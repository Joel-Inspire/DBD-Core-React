0010 REM "generation of lot table <EC3IC2>
0020 SETESC 9300; SETERR 9000
0035 REM "5.4 - 06/22/05 - 10.355 - dmm - SSP# 185253
0040 REM "Copyright 2005 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},TABLE_HTML$,ICF_INFO${ALL},MAX_INDEX_TO_REPORT,OPTIONS$
0100 SETERR 9000
0110 X0$="EC3IC2",X1$="Generator of Lot Table"
0120 EOL$=$0D0A$
0300 REM "IOLISTS
0310 IOLIST ICF$,ICF[0],ICF[1],ICF[2],ICF[3],ICF[4],ICF[5],ICF[6],ICF[7],ICF[8],ICF[9],ICF[10],ICF[11],ICF[12]
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01O ICF...  02O ECX...  03O FM0...  13O ZZPARM  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0900 IF MAX_INDEX_TO_REPORT<1 THEN GOSUB 3800; TABLE_HTML$=LOT_SECTION$; GOTO 9900
0910 DIM ICF[12],FM0INFO$[20]; FM0WREADS$=""
1000 REM "Process ICF_INFO$ array
1020 FOR I=1 TO MAX_INDEX_TO_REPORT
1040 ICF_KEY$=ICF_INFO$[I,2],ICF$=ICF_INFO$[I,1],LOT_QTY=NUM(ICF_INFO$[I,3]),LOT_QTY_UNITS=NUM(ICF_INFO$[I,4]),ICF_READ$="N",ICF_PRIMARY_PACK=NUM(ICF_INFO$[I,6])
1042 IF ICF$(82,9)=DIM(9) THEN STARTING_NUMBER$="N/A",CALC_ENDING_NUMBER$="" ELSE STARTING_NUMBER$=STP(ICF$(82,9),1),CALC_ENDING_NUMBER$=ICF_INFO$[I,5]
1044 IF CALC_ENDING_NUMBER<0 THEN CALC_ENDING_NUMBER=0
1100 GOSUB 3900
1110 RETURNED_LOT_SECTION$=RETURNED_LOT_SECTION$+LOT_SECTION$
1490 NEXT I
1500 TABLE_HTML$=RETURNED_LOT_SECTION$
1900 GOTO 9900
3800 REM "Get lotted lines section in TABLE_HTML$ and generate LOT_SECTION$ containing an entry WHEN NO LOT RECORDS EXIST
3802 LOT_SECTION$="",LOT_TAGS$="001<icf_record_status>"
3806 LOT$=TABLE_HTML$
3815 LOT_INDEX=POS("?tf?"=LOT$); IF LOT_INDEX=0 THEN GOTO 3891
3816 LOTEND_INDEX=POS("?"=LOT$(LOT_INDEX+4)),LOT_TAG$=LOT$(LOT_INDEX+4,LOTEND_INDEX-1),LOT1$=LOT$(1,LOT_INDEX-1),LOT2$=LOT$(LOT_INDEX+LOTEND_INDEX+4),LOT_POS=POS("<"+LOT_TAG$+">"=LOT_TAGS$); IF LOT_POS=0 THEN LOT$=LOT1$+LOT2$,LOT_INDEX=0 ELSE LOT_INDEX=NUM(LOT_TAGS$(LOT_POS-3,3))
3820 ON LOT_INDEX GOTO 3889,3821,3889
3821 MSG=1; GOSUB 4100; LOT$=LOT1$+LOTMESSAGE$+LOT2$; GOTO 3890; REM "icf_location_code
3822 CALL "ZZDISP","DX",ICF$(25,6),"",X3$,DATE1$,"",0,0,X4$; LOT$=LOT1$+DATE1$+LOT2$; GOTO 3890; REM "icf_receipt_date
3890 GOTO 3815
3891 REM "** if memory overload will have to return in string array -  IF LEN(LOT_SECTION$)+LEN(LOT$)>64000 THEN PRINT (OUTPUT) LOT_SECTION$,EOL$; LET LOT_SECTION$="" ELSE LET LOT_SECTION$=LOT_SECTION$+LOT$
3892 LOT_SECTION$=LOT_SECTION$+LOT$
3895 RETURN 
3900 REM "Get lotted lines section in TABLE_HTML$ and generate LOT_SECTION$ containing an entry for each order line from ICF for the corresponding line section item
3902 LOT_SECTION$="",LOT_TAGS$="001<icf_location_code>002<icf_receipt_date>003<icf_seq_no>004<icf_recv_report>005<icf_tf_ponumber>006<icf_tf_podate>007<icf_job_number>008<icf_vendor_code>009<icf_starting_number>010<icf_ending_number>011<icf_bin_location>012<icf_order_number>013<icf_primary_uom>014<icf_primary_pack>015<icf_no_of_units>016<icf_qty_in_eaches>017<icf_lot_qty_needed>018<icf_lot_units_needed>019<icf_calc_ending_number>020<icf_committed_status>021<icf_calc_numbering_formatted>022<icf_numbering_formatted>023<icf_uom_ext>024<icf_uom_ext_needed>025<whse_city>026<whse_state>027<icf_packaging_unit>028<icf_units_per_package>029<icf_lot_sell_price>030<icf_lot_sell_price_ext>031<icf_custpo>"
3906 LOT$=TABLE_HTML$
3915 LOT_INDEX=POS("?tf?"=LOT$); IF LOT_INDEX=0 THEN GOTO 3991
3916 LOTEND_INDEX=POS("?"=LOT$(LOT_INDEX+4)),LOT_TAG$=LOT$(LOT_INDEX+4,LOTEND_INDEX-1),LOT1$=LOT$(1,LOT_INDEX-1),LOT2$=LOT$(LOT_INDEX+LOTEND_INDEX+4),LOT_POS=POS("<"+LOT_TAG$+">"=LOT_TAGS$); IF LOT_POS=0 THEN LOT$=LOT1$+LOT2$,LOT_INDEX=0 ELSE LOT_INDEX=NUM(LOT_TAGS$(LOT_POS-3,3))
3920 ON LOT_INDEX GOTO 3989,3921,3922,3923,3924,3925,3926,3927,3928,3929,3930,3931,3932,3933,3934,3935,3936,3937,3938,3939,3940,3941,3942,3943,3944,3945,3946,3947,3948,3949,3950,3951,3989
3921 LOT$=LOT1$+ICF$(21,4)+LOT2$; GOTO 3990; REM "icf_location_code
3922 CALL "ZZDISP","DX",ICF$(25,6),"",X3$,DATE2$,"",0,0,X4$; LOT$=LOT1$+DATE2$+LOT2$; GOTO 3990; REM "icf_receipt_date
3923 LOT$=LOT1$+ICF$(31,2)+LOT2$; GOTO 3990; REM "icf_seq_no
3924 LOT$=LOT1$+STP(ICF$(33,8),1)+LOT2$; GOTO 3990; REM "icf_recv_report"
3925 CALL "ZZDISP","AX",ICF$(41,9),"P/O",X3$,ICF_PO$,"",0,0,X4$; LOT$=LOT1$+ICF_PO$+LOT2$; GOTO 3990; REM "icf_tf_ponumber. SSP184878, "P/O" was missing.
3926 CALL "ZZDISP","DX",ICF$(25,6),"",X3$,DATE1$,"",0,0,X4$; LOT$=LOT1$+DATE1$+LOT2$; GOTO 3990; REM "icf_tf_podate
3927 LOT$=LOT1$+STP(ICF$(56,12),1)+LOT2$; GOTO 3990; REM "icf_job_number
3928 CALL "ZZDISP","AX",ICF$(68,10),"A/P",X3$,VENDORCD$,"",0,0,X4$; LOT$=LOT1$+VENDORCD$+LOT2$; GOTO 3990; REM "icf_vendor_code
3929 LOT$=LOT1$+STARTING_NUMBER$+LOT2$; GOTO 3990; REM "icf_starting_number
3930 LOT$=LOT1$+STP(ICF$(91,9),2)+LOT2$; GOTO 3990; REM "icf_ending_number
3931 LOT$=LOT1$+STP(ICF$(100,10),1)+LOT2$; GOTO 3990; REM "icf_bin_location
3932 CALL "ZZDISP","AX",ICF$(110,8),"O/P",X3$,LOT_ORDERNO$,"",0,0,X4$; LOT$=LOT1$+LOT_ORDERNO$+LOT2$; GOTO 3990; REM "icf_order_number
3933 LOT$=LOT1$+STP(ICF$(121,4),1)+LOT2$; GOTO 3990; REM "icf_primary_uom
3934 GOSUB 4000; LOT$=LOT1$+STR(ICF[3]:"###0")+LOT2$; GOTO 3990; REM "icf_primary _pack (would be 50 in PAD's of 50)
3935 GOSUB 4000; LOT$=LOT1$+STR(ICF[4]:"#,##0")+LOT2$; GOTO 3990; REM "icf_no_of_units
3936 GOSUB 4000; LOT$=LOT1$+STR(ICF[3]*ICF[4]:"##,###,##0")+LOT2$; GOTO 3990; REM "icf_qty_in_eaches
3937 LOT$=LOT1$+STR(LOT_QTY:"###,##0")+LOT2$; GOTO 3990; REM "icf_lot_qty_needed
3938 LOT$=LOT1$+STR(LOT_QTY_UNITS:"###,##0")+LOT2$; GOTO 3990; REM "icf_lot_units_needed
3939 LOT$=LOT1$+CALC_ENDING_NUMBER$+LOT2$; GOTO 3990; REM "icf_calc_ending_number
3940 IF ICF$(110,8)=DIM(8) THEN COMMIT_STATUS$=STP(EC_PARM$(671,15),2) ELSE COMMIT_STATUS$=STP(EC_PARM$(656,15),2) END_IF ; LOT$=LOT1$+COMMIT_STATUS$+LOT2$; GOTO 3990; REM "icf_committed_status
3941 IF ICF$(82,9)=DIM(9) THEN N_FORMAT$="" ELSE N_FORMAT$="Numbering: "+STP(ICF$(82,9),2)+" to "+CALC_ENDING_NUMBER$ END_IF ; LOT$=LOT1$+N_FORMAT$+LOT2$; GOTO 3990; REM "icf_calc_numbering_formatted
3942 GOSUB 4000; IF ICF$(82,9)=DIM(9) THEN N_FORMAT$="" ELSE N_FORMAT$="Numbering: "+STP(ICF$(82,9),2)+" to "+STP(ICF$(91,9),2) END_IF ; LOT$=LOT1$+N_FORMAT$+LOT2$; GOTO 3990; REM "icf_calc_numbering_formatted
3943 GOSUB 4000; LOT$=LOT1$+STR(ICF[4]:"#,##0")+" "+ICF$(121,4)+"/"+STR(ICF[3]:"#,##0")+LOT2$; GOTO 3990; REM "icf_uom_ext
3944 GOSUB 4000; LOT$=LOT1$+STR(LOT_QTY_UNITS:"#,##0")+" "+ICF$(121,4)+"/"+STR(ICF_PRIMARY_PACK:"#,##0")+LOT2$; GOTO 3990; REM "icf_uom_ext_needed
3945 GOSUB 7000; LOT$=LOT1$+STP(FM0WHSE$(111,16),2)+LOT2$; GOTO 3990; REM "whse_city
3946 GOSUB 7000; LOT$=LOT1$+STP(FM0WHSE$(127,2),2)+LOT2$; GOTO 3990; REM "whse_state
3947 LOT$=LOT1$+STP(ICF$(125,4),1)+LOT2$; GOTO 3990 ! icf_packaging_unit
3948 GOSUB 4000; LOT$=LOT1$+STR(ICF[2]:"#,##0")+LOT2$; GOTO 3990 ! icf_units_per_package
3949 IF EC$[2](322,1)="Y" THEN LOT$=LOT1$+LOT2$; GOTO 3990 ELSE GOSUB 4000; LOT$=LOT1$+STR(ICF[5]:X3$(69,1)+"###,###.00")+LOT2$; GOTO 3990 ! icf_lot_sell_price, WO168682. SSP175796, check buyer don't show price parm
3950 IF EC$[2](322,1)="Y" THEN LOT$=LOT1$+LOT2$; GOTO 3990 ELSE GOSUB 4000; IF ICF[6]=0 THEN ICF[6]=1 END_IF ; IF ICF[2]<>0 THEN EACHES=ICF[2]*ICF[3]*ICF[4] ELSE EACHES=ICF[3]*ICF[4] END_IF ; LOT_SELL_EXT=EACHES/ICF[6]*ICF[5],%LOT_SELL_PRICE_TOTAL+=LOT_SELL_EXT; IF ICF$(21,1)="9" THEN %CUST_OWNED_LOT_SELL_PRICE_TOTAL+=LOT_SELL_EXT END_IF ; LOT$=LOT1$+STR(LOT_SELL_EXT:X3$(69,1)+"###,###.00")+LOT2$; GOTO 3990 ! icf_lot_sell_price_ext, WO173708. Accum cust owned lots only for WO175385.  SSP175796, check buyer don't show price parm
3951 LOT$=LOT1$+STP(ICF$(133,15),1)+LOT2$; GOTO 3990 ! SSP185253, icf_custpo
3990 GOTO 3915
3991 REM "** if memory overload will have to return in string array -  IF LEN(LOT_SECTION$)+LEN(LOT$)>64000 THEN PRINT (OUTPUT) LOT_SECTION$,EOL$; LET LOT_SECTION$="" ELSE LET LOT_SECTION$=LOT_SECTION$+LOT$
3992 LOT_SECTION$=LOT_SECTION$+LOT$
3995 RETURN 
4000 REM "ck if ICF record read for numerics
4010 IF ICF_READ$="Y" THEN GOTO 4040
4012 DIM ICF[12],ICF$(500); READ (Z[1],KEY=ICF_KEY$,DOM=4013)IOL=0310
4015 ICF_READ$="Y"
4045 RETURN 
4100 REM "GeT LOT MESSAGE
4101 DIM ECX$(300),MSGKEY$(15); MSGKEY$(1,10)="LOTMESSAGE",LOTMESSAGE$=""
4102 MSGKEY$(11,5)=STR(MSG:"00000")
4104 FIND (Z[2],KEY=MSGKEY$,DOM=4120)ECX$
4106 LOTMESSAGE$=STP(ECX$(20,240),1)
4145 RETURN 
5000 REM "EOJ
5010 C=T; GOSUB 8150
5020 IF Q1$="" THEN CALL "ZZPROM",".4",X3$,Z,"Process complete!!","","",0
5040 GOTO 9900
7000 REM "read in warehouse information
7002 XXX=POS(ICF$(21,4)=FM0WREADS$,4); IF XXX<>0 THEN XXX=INT(XXX/4)+1; GOTO 7024
7010 DIM FM0WHSE$(1000); FIND (Z(3),KEY="D"+DIM(10)+ICF$(21,4),DOM=7011)FM0WHSE$
7020 FM0WREADS$=FM0WREADS$+ICF$(21,4)
7021 XXX=POS(ICF$(21,4)=FM0WREADS$,4),XXX=INT(XXX/4)+1
7022 FM0INFO$[XXX]=FM0WHSE$
7024 FM0WHSE$=FM0INFO$[XXX]
7040 RETURN 
8910 DEF FND$(Z9$)=Z9$(1*2+1,2)+"/"+Z9$(7-1*2,2)+"/"+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
9000 REM "ERROR PROCESSING
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9900 REM "END PROGRAM
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
