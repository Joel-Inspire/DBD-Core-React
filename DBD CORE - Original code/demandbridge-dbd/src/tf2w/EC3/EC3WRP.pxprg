0010 REM "WebEC Warehouse Release Report Engine <EC3WRP>
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 10/27/09 - 23.381944 - crg - SSP# 233219
0037 REM "233219-Create excel versions of some of the EC html reports to use 
0040 REM "Copyright 2009 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0100 SETERR 9000
0102 GOSUB SET_READONLY
0110 X0$="EC3WRP",X1$="WebEC Warehouse Release Report"
0120 EOL$=$0D0A$; EOL$=ATH(STP(EC_PARM$(57,8),1))
0132 UMASK$="#,###,##0-"
0320 IOLIST FM1$,FM1[0],FM1[1],FM1[2],FM1[3],FM1[4],FM1[5],FM1[6],FM1[7],FM1[8],FM1[9],FM1[10],FM1[11],FM1[12],FM1[13],FM1[14],FM1[15],FM1[16],FM1[17],FM1[18],FM1[19],FM1[20],FM1[21],FM1[22],FM1[23],FM1[24],FM1[25],FM1[26],FM1[27],FM1[28],FM1[29],FM1[30],FM1[31]
0340 IOLIST ECG$
0350 IOLIST ECH$
0360 IOLIST ECR$
0380 IOLIST FM0$
0490 IOLIST FMZ$,FMZ(0),FMZ(1),FMZ(2),FMZ(3),FMZ(4),FMZ(5),FMZ(6),FMZ(7),FMZ(8),FMZ(9),FMZ(10),FMZ(11),FMZ(12),FMZ(13),FMZ(14)
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))]
0507 WORK_FILE$="W"+EC$[1](1,7); REM "work file is "W"+session id
0508 CLOSE (1001); OPEN (1001,ERR=0509)WORK_FILE$; CLOSE (1001); GOTO 0510
0509 DIRECT WORK_FILE$,60,0,2048; REM "create work file if it doesn't exist. SSP173078, was 34,0,596 changed to 60,0,2048 to be consistant with others
0510 Z$="01O AR1... 020 FM1... 03O FT1... 04O ECG... 05O ECH... 06O ECR... 07O "+WORK_FILE$+" 08O FM0... 09O IC1... 10O FM3... 11O FM4... 12O EDE... 13O ZZPARM 14O EDI... 15O EDA... 18O EDQ... 19O FMZ... "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0600 REM 'SET IMG SRC PREFIX/SUFFIX
0601 ITEM_SEARCH_ELEMENTS=8,ST_SEARCH_ELEMENTS=7
0602 DIM SI$[ITEM_SEARCH_ELEMENTS,3]; REM "item search elements (index 1=search text   2=<string>AAAABBBB  A=starting position B=length of fm1 field 2=<numeric>AAAA A=numeric element 3=S/N (string or numeric  <string processed unless set to N>
0603 DIM ST$[ST_SEARCH_ELEMENTS,3]; REM "shipto search elements (index 1=search text   2=<string>AAAABBBB  A=starting position B=length of fm1 field 2=<numeric>AAAA A=numeric element 3=S/N (string or numeric  <string processed unless set to N>
0610 IMGSRC_PREFIX$=STP(EC_PARM$(311,20),2),IMGSRC_ATTRIB$=" "+STP(EC_PARM$(331,60),2)+">",IMGSRC_SUFFIX$=STP(EC_PARM$(391,20),2)
0800 GOSUB 3000
1000 REM "Process DATA array
1005 DATA_TAGS$="001<template>002<user>003<password>004<maxrows>005<xxxxx>006<xxxxx>007<session_id>008<xxxxx>009<search>010<search_type>011<search_item_code>012<search_item_description>013<xxxxx>014<xxxxx>015<xxxxx>016<xxxxx>017<xxxxx>018<xxxxx>019<xxxxx>020<xxxxx>021<xxxxxx>022<xxxxx>023<xxxxx>024<xxxxx>025<xxxxx>026<xxxxx>027<requested_location>028<xxxxx>029<xxxxx>030<xxxxx>031<xxxxx>032<xxxxx>033<xxxxx>034<ship_date_start>035<ship_date_end>036<restrict_types>"
1006 MAX_ROWS=NUM(EC_PARM$(258,3)),POSITION_ITEM$="",DIRECTION$="F"
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1018 DPOS=POS("<"+TAG$+">"=DATA_TAGS$); IF DPOS=0 THEN GOTO 1090 ELSE DINDEX=NUM(DATA_TAGS$(DPOS-3,3),ERR=1090)
1019 ON DINDEX GOTO 1090,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1090
1021 TEMPLATE$=VALUE$; GOTO 1090; REM "template
1022 USER$=VALUE$; GOSUB 3000; GOTO 1090; REM "user
1023 PASSWORD$=VALUE$; GOTO 1090; REM "password
1024 MAX_ROWS=NUM(VALUE$,ERR=1090); GOTO 1090; REM "maxrows
1025 POSITION_ITEM$=VALUE$; GOTO 1090; REM "position_item
1026 IF VALUE$="backward" THEN DIRECTION$="B"; GOTO 1090; REM "direction, only set if it is 'backward'
1027 SESSION_ID$=VALUE$; GOTO 1090; REM "Get session id
1028 CATEGORY$=VALUE$; GOTO 1090; REM "category(s) to display (10 *'s is for all categories otherwise this can contain a single or multiple categories)
1029 SEARCH=POS(VALUE$="Y"); GOTO 1090; REM "if search set then will initiate searching mechanism - if not will work off the product catalog
1030 SEARCH_TYPE$=VALUE$; STYPE=INT(POS(SEARCH_TYPE$="I/CFM0ORD")/3); GOTO 1090; REM "search_type
1031 SEARCH_ITEM_CODE$=VALUE$,SI$[1,1]=VALUE$,SI$[1,2]="00110010"; GOTO 1090; REM "value to search item codes
1032 SEARCH_ITEM_DESC$=VALUE$,SI$[2,1]=VALUE$,SI$[2,2]="00420040"; GOTO 1090; REM "value to search item descriptions
1033 SEARCH_ITEM_LR$=VALUE$,SI$[3,1]=VALUE$,SI$[3,2]="00240008"; GOTO 1090; REM "search_item_lr (left-right dimensions)
1034 SEARCH_ITEM_TB$=VALUE$,SI$[4,1]=VALUE$,SI$[4,2]="00320008"; GOTO 1090; REM "search_item_tb (top-bottom)
1035 SEARCH_ITEM_PLY$=VALUE$,SI$[5,1]=VALUE$,SI$[5,2]="00400002"; GOTO 1090; REM "search_item_ply
1036 SEARCH_ITME_FMS$=VALUE$,SI$[6,1]=VALUE$,SI$[6,2]="01080001"; GOTO 1090; REM "search_item_fms (should be Y or N to only get certain FMS flagging
1037 SEARCH_ITEM_VENDCD$=VALUE$,SI$[7,1]=VALUE$,SI$[7,2]="00820010"; GOTO 1090; REM "search_item_vendorcd
1038 SEARCH_ITEM_CIC$=VALUE$,SI$[8,1]=VALUE$,SI$[8,2]="03500020"; GOTO 1090; REM "search_item_cic
1039 SEARCH_ST_CODE$=VALUE$,ST$[1,1]=VALUE$,ST$[1,2]="00120004"; GOTO 1090; REM "search_st_code (tf shipto code)
1040 SEARCH_ST_AREA_CODE$=VALUE$,ST$[2,1]=VALUE$,ST$[2,2]="02000003"; GOTO 1090; REM "search_st_area_code (uses first 3 char of phone)
1041 SEARCH_ST_STATE$=VALUE$,ST$[3,1]=VALUE$,ST$[3,2]="01270002"; GOTO 1090; REM "search_st_state
1042 SEARCH_ST_REC_DEPT$=VALU$,ST$[4,1]=VALUE$,ST$[4,2]="03820020"; GOTO 1090
1043 SEARCH_ST_LOC$=VALUE$,ST$[5,1]=VALUE$,ST$[5,2]="02140009"; GOTO 1090; REM "search_st_loc (customer 9 character location)
1044 SEARCH_ST_ZIP$=VALUE$,ST$[6,1]=VALUE$,ST$[6,2]="00240009"; GOTO 1090; REM "search_st_zip
1045 SEARCH_ST_CITY$=VALUE$,ST$[7,1]=VALUE$,ST$[7,2]="01110016"; GOTO 1090; REM "search_city
1046 USAGE_YEAR$=VALUE$; GOTO 1090; REM "requested_usage_year
1047 USAGE_LOCATION$=VALUE$; GOTO 1090; REM "requested_location
1048 USAGE_PERIOD$=VALUE$; GOTO 1090; REM "requested_period
1049 SUPPRESS_DUPLICATES$=VALUE$; GOTO 1090; REM "suppress_duplicates
1050 RS=POS(VALUE$="Yy"); IF RS<>0 THEN RS$="Y" ELSE RS$="N" END_IF ; GOTO 1090; REM " set flag for reporting in selling units
1051 BALANCE_TYPE$=UCS(VALUE$); GOTO 1090; REM "Set balance type to report from FM3 (if blank set to U in the 1100's)
1052 CATALOG$=VALUE$; GOTO 1090; REM "catalog
1053 BELOW_REORDER$=VALUE$; IF BELOW_REORDER$="ON" THEN BELOW_REORDER$="Y" END_IF ; GOTO 1090; REM "only_below_reorderpt (only applies to custom items FM1)
1054 TEST$=STR(NUM(VALUE$,ERR=1090):"000000"); CALL "EC3DAT",X3$,1,VALUE$(5,2)+VALUE$(1,4),START_SHIP_DATE$,""; GOTO 1090; REM "ship_date_start
1055 TEST$=STR(NUM(VALUE$,ERR=1090):"000000"); CALL "EC3DAT",X3$,1,VALUE$(5,2)+VALUE$(1,4),END_SHIP_DATE$,""; GOTO 1090; REM "ship_date_end
1056 RESTRICT_TYPES$=UCS(VALUE$); GOTO 1090 ! SSP183662, restrict_types
1090 NEXT I
1100 REM "preprocessing
1101 VERSION$="52.0000.148744.165240.173398.173329.183662.186593.188859.184884.20051129",PROGRAM$=PGN; DIM BYBINFO$[5]; BYBINFO$[1]=PROGRAM$,BYBINFO$[2]=VERSION$,BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1107 IF STP(SEARCH_ITEM_CODE$,3," ")<>"" THEN SEARCH_ITEM_CODE$="*"+UCS(STP(SEARCH_ITEM_CODE$,2))+"*"
1108 IF STP(SEARCH_ITEM_DESC$,3," ")<>"" THEN SEARCH_ITEM_DESC$="*"+UCS(STP(SEARCH_ITEM_DESC$,2))+"*"
1109 DIM FM0$(500)
1112 IF STP(CATALOG$,2)<>"" THEN GOTO 1114; REM "set search category
1113 CATALOG$=EC$[1](1125,10); IF CATALOG$=DIM(10) THEN CATALOG$=EC$[2](325,10); REM "no catalog passed in so get from defaults
1114 GOSUB 8050; REM "get category list
1115 IF CATEGORY$="**********" THEN CATEGORY$=EDI_CATEGORY_LIST$
1116 DIM EDA$(200); FIND (Z(15),KEY=CATALOG$,DOM=1117)EDA$; REM "ssp 154559
1117 IF EDA$(73,1)<>"Y" THEN CATALOGSORT=0 ELSE CATALOGSORT=1; REM "ssp 154559
1126 MAX_ROWS=999999999; REM "set rows to for reports
1130 REM "ck if new search
1132 GOSUB 5000; REM "get valid list of items
1500 REM "Use template$ to open file, read line by line and insert
1501 IF %BASIC2$<>"" THEN GOTO 1995; REM "156580
1505 CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1506 REM "Setup line_tags$
1507 LINE_TAGS$="001<user>002<cust_code>003<password>004<cust_name>005<ec_company>006<entrystart>007<buttonnext>008<buttonprev>009<session_id>010<buyer_id>011<buyer_name>012<date>013<time>014<location_heading_start>015<mousedbox1start>016<category_list>017<category_code>018<number_records_found>019<unused_2>020<item_totals_start>021<location_totals_start>022<report_totals_start>023<unused_3>"
1510 READ (100,END=1595)LINE$; GOSUB 7550
1515 INDEX=POS("?tf?"=LINE$); IF INDEX=0 THEN PRINT (OUTPUT)LINE$,EOL$,; GOTO 1510
1520 END_INDEX=POS("?"=LINE$(INDEX+4)),TAG$=LINE$(INDEX+4,END_INDEX-1),LINE1$=LINE$(1,INDEX-1),LINE2$=LINE$(INDEX+END_INDEX+4),LPOS=POS("<"+TAG$+">"=LINE_TAGS$); IF LPOS=0 THEN LINDEX=0 ELSE LINDEX=NUM(LINE_TAGS$(LPOS-3,3))
1530 GOSUB 2000; GOTO 1515
1995 GOTO 9900
1999 REM "Get tag value & substitute
2000 ON LINDEX GOTO 2090,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2090
2001 LINE$=LINE1$+USER$+LINE2$; GOTO 2095; REM "user
2002 LINE$=LINE1$+CUST_CODE$+LINE2$; GOTO 2095; REM "cust_code
2003 LINE$=LINE1$+PASSWORD$+LINE2$; GOTO 2095; REM "password
2004 LINE$=LINE1$+STP(EC$[1](23,35),1)+LINE2$; GOTO 2095; REM "cust_name
2005 LINE$=LINE1$+STP(EC_PARM$(7,50),1)+LINE2$; GOTO 2095; REM "ec_company
2006 GOSUB 3200; LINE$=TABLE$; GOTO 2095; REM "entrystart
2007 GOSUB 3500; LINE$=BUTTON$; GOTO 2095; REM "buttonnext
2008 GOSUB 3600; LINE$=BUTTON$; GOTO 2095; REM "buttonprev
2009 LINE$=LINE1$+STP(SESSION_ID$,1)+LINE2$; GOTO 2095; REM "session_id
2010 LINE$=LINE1$+STP(EC$[1](8,15),1)+LINE2$; GOTO 2095; REM "buyer_id
2011 LINE$=LINE1$+STP(EC$[2](16,35),1)+LINE2$; GOTO 2095; REM "buyer_name
2012 LINE$=LINE1$+EC$[4]+LINE2$; GOTO 2095; REM " date
2013 LINE$=LINE1$+EC$[5]+LINE2$; GOTO 2095; REM "time
2014 GOSUB 2200; GOTO 2095; REM "location_heading_start - store in LOCATION_HEADING_TEMPLATE$
2015 GOSUB 3700; LINE$=MOUSEDBOX1$; GOTO 2095; REM "mousedbox1start - store in MOUSEDBOX1_TEMPLATE$
2016 GOSUB 2150; LINE$=LINE1$+CATEGORY_LIST$+LINE2$; GOTO 2095; REM "catalog category list
2017 LINE$=LINE1$+ECH$(11,10)+LINE2$; GOTO 2095; REM "category_code
2018 IF SEARCH_TYPE$<>"" THEN FILE_SPEC$=FN%FIN$(Z(7),"NUMREC"),NUM_RECS=NUM(FILE_SPEC$),LINE$=LINE1$+"("+STP(STR(NUM_RECS:"##,##0"),2)+" Item(s) found)"+LINE2$; GOTO 2095 ELSE LINE$=LINE1$+LINE2$; GOTO 2095; REM "number_records_found
2019 LINE$=LINE1$+LINE2$; GOTO 2095; REM "unused_2
2020 GOSUB 2250; ENTRY$=ENTRY1$+ENTRY2$; GOTO 2095; REM "item_totals_start
2021 GOSUB 2300; ENTRY$=ENTRY1$+ENTRY2$; GOTO 2095; REM "location_totals_start"
2022 GOSUB 2350; ENTRY$=ENTRY1$+ENTRY2$; GOTO 2095; REM "report_totals_start
2023 GOTO 2095; REM "unused_3
2090 LINE$=LINE1$+LINE2$; GOTO 2095; REM "tag not found, replace with '?. 233219 - Remove "?"
2095 RETURN 
2150 REM "Return CATEGORY_LIST$ as HTML for drop down list
2155 CATEGORY_LIST$="",PUBLISHED$=EC$[6]
2157 IF LEN(STP(PUBLISHED$,2))=0 THEN GOTO 2195
2159 FOR PP=0 TO LEN(PUBLISHED$)/10-1; CURRCAT$=PUBLISHED$(PP*10+1,10)
2160 READ (Z[4],KEY=CURRCAT$,DOM=2180)IOL=0340
2165 CATEGORY_LIST$=CATEGORY_LIST$+"<option selected value="+QUO+CURRCAT$+QUO; IF PP=0 THEN CATEGORY_LIST$=CATEGORY_LIST$+" SELECTED>"+ECG$(11,30)+"</option>" ELSE CATEGORY_LIST$=CATEGORY_LIST$+">"+ECG$(11,30)+"</option>"; REM "if first item in list (pp=0) then set to be SELECTED as the initial value in the dd list
2180 NEXT PP
2185 STMP=POS("</select>"=LINE1$,-1); IF STMP<>0 THEN CATEGORY_LIST$=CATEGORY_LIST$+"</select>"; IF STMP=1 THEN LINE1$="" ELSE LINE1$=LINE1$(1,STMP-1)
2186 IF LINE2$>"" THEN IF LINE2$(1,1)=">" THEN LINE2$=LINE2$(2); REM "if token was part of a comment, then remove the end of the comment.
2195 RETURN 
2200 REM "Store location header template into LOCATION_HEADING_TEMPLATE$, it will be used in the entry section
2204 LOCATION_HEADING_TEMPLATE$=LINE$,LINE$=""
2205 READ (100,END=2210)LINE$; GOSUB 7550
2206 IF POS("?tf?location_heading_end?"=LINE$)<>0 THEN GOTO 2209 END_IF ; INDEX=POS("?tf?"=LINE$); IF INDEX=0 THEN GOTO 2209; REM "searching for tags within the category heading section
2207 END_INDEX=POS("?"=LINE$(INDEX+4)),TAG$=LINE$(INDEX+4,END_INDEX-1),LINE1$=LINE$(1,INDEX-1),LINE2$=LINE$(INDEX+END_INDEX+4),LPOS=POS("<"+TAG$+">"=LINE_TAGS$); IF LPOS=0 THEN LINDEX=0 ELSE LINDEX=NUM(LINE_TAGS$(LPOS-3,3))
2209 LOCATION_HEADING_TEMPLATE$=LOCATION_HEADING_TEMPLATE$+LINE$+EOL$; IF POS("?tf?location_heading_end?"=LINE$)=0 THEN GOTO 2205
2230 LINE$=""
2249 RETURN 
2250 REM "Store item totals template into ITEM_TOTALS_TEMPLATE$, it will be used in the entry section
2254 ITEM_TOTALS_TEMPLATE$=LINE$,LINE$=""
2255 READ (100,END=2410)LINE$; REM " GOSUB 07550
2256 IF POS("?tf?item_totals_end?"=LINE$)<>0 THEN GOTO 2259 END_IF ; INDEX=POS("?tf?"=LINE$); IF INDEX=0 THEN GOTO 2259; REM "searching for tags within the category heading section
2257 END_INDEX=POS("?"=LINE$(INDEX+4)),TAG$=LINE$(INDEX+4,END_INDEX-1),LINE1$=LINE$(1,INDEX-1),LINE2$=LINE$(INDEX+END_INDEX+4),LPOS=POS("<"+TAG$+">"=LINE_TAGS$); IF LPOS=0 THEN LINDEX=0 ELSE LINDEX=NUM(LINE_TAGS$(LPOS-3,3))
2259 ITEM_TOTALS_TEMPLATE$=ITEM_TOTALS_TEMPLATE$+LINE$+EOL$; IF POS("?tf?item_totals_end?"=LINE$)=0 THEN GOTO 2255
2280 LINE$=""
2299 RETURN 
2300 REM "Store location totals template into LOCATION_TOTALS_TEMPLATE$, it will be used in the entry section
2304 LOCATION_TOTALS_TEMPLATE$=LINE$,LINE$=""
2305 READ (100,END=2310)LINE$; REM " GOSUB 07550
2306 IF POS("?tf?location_totals_end?"=LINE$)<>0 THEN GOTO 2309 END_IF ; INDEX=POS("?tf?"=LINE$); IF INDEX=0 THEN GOTO 2309; REM "searching for tags within the category heading section
2307 END_INDEX=POS("?"=LINE$(INDEX+4)),TAG$=LINE$(INDEX+4,END_INDEX-1),LINE1$=LINE$(1,INDEX-1),LINE2$=LINE$(INDEX+END_INDEX+4),LPOS=POS("<"+TAG$+">"=LINE_TAGS$); IF LPOS=0 THEN LINDEX=0 ELSE LINDEX=NUM(LINE_TAGS$(LPOS-3,3))
2309 LOCATION_TOTALS_TEMPLATE$=LOCATION_TOTALS_TEMPLATE$+LINE$+EOL$; IF POS("?tf?location_totals_end?"=LINE$)=0 THEN GOTO 2305
2330 LINE$=""
2349 RETURN 
2350 REM "Store report totals template into REPORT_TOTALS_TEMPLATE$, it will be used in the entry section
2354 REPORT_TOTALS_TEMPLATE$=LINE$,LINE$=""
2355 READ (100,END=2410)LINE$; GOSUB 7550
2356 IF POS("?tf?report_totals_end?"=LINE$)<>0 THEN GOTO 2359 END_IF ; INDEX=POS("?tf?"=LINE$); IF INDEX=0 THEN GOTO 2359; REM "searching for tags within the category heading section
2357 END_INDEX=POS("?"=LINE$(INDEX+4)),TAG$=LINE$(INDEX+4,END_INDEX-1),LINE1$=LINE$(1,INDEX-1),LINE2$=LINE$(INDEX+END_INDEX+4),LPOS=POS("<"+TAG$+">"=LINE_TAGS$); IF LPOS=0 THEN LINDEX=0 ELSE LINDEX=NUM(LINE_TAGS$(LPOS-3,3))
2359 REPORT_TOTALS_TEMPLATE$=REPORT_TOTALS_TEMPLATE$+LINE$+EOL$; IF POS("?tf?report_totals_end?"=LINE$)=0 THEN GOTO 2355
2380 LINE$=""
2399 RETURN 
3000 REM "Read customer data into AR1$
3010 DIM AR1$(600); READ (Z[1],KEY=EC$[2](51,10),DOM=3011)AR1$
3015 CALL "ZZDISP","AX",EC$[2](51,10),"A/R",X3$,CUST_CODE$,"",0,0,X4$
3045 RETURN 
3200 REM "Output I/C type entries, using ENTRY_TEMPLATE$ to pass information, create TABLE$ to output
3201 ENTRY_TAGS$="001<item_code>002<form_code>003<location_type>004<receiving_code>005<ship_date>006<description>007<rev_date>008<ship_via_desc>009<order_type>010<tf_order_no>011<cust_po>012<order_date>013<order_line>014<vendor_code>015<selling_uom>016<selling_qty_peruom>017<tf_po_code>018<invoice_no>019<invoice_date>020<starting_no>021<ending_no>022<receiving_dept>023<fms_price>024<fms_price_ext>025<sell_price>026<sell_price_ext>027<freight_prorated>028<tax_prorated>029<qty_shipped_eaches>030<qty_shipped_sell>031<item_totals_start>032<location_totals_start>033<report_totals_start>034<selling_uom_ext>035<buyer_on_order>"
3203 REM "Setup ENTRY_TEMPLATE$
3204 LOCATIONBREAK$="",ITEMBREAK$="",RECDEPTBREAK$="",ENTRY_TEMPLATE$=LINE$,TABLE$="",PREV_CATEGORY$=""; REM "Setup ENTRY_TEMPLATE$
3205 READ (100,END=3206)LINE$; GOSUB 7550; ENTRY_TEMPLATE$=ENTRY_TEMPLATE$+LINE$+EOL$; IF POS("?tf?entryend?"=LINE$)=0 THEN GOTO 3205
3209 REM "now read search file (work file)
3210 READ (Z(7),KEY="",DOM=*NEXT)
3212 FMZKEY$=KEY(Z(7),END=3246); READ (Z(7),KEY=FMZKEY$)IOL=0490
3214 IF LOCATIONBREAK$<>FMZ$(12,4) THEN IF ITEMBREAK$="" THEN GOSUB 5500; LOCATIONBREAK$=FMZ$(12,4),RECDEPTBREAK$=FMZ$(365,20); ELSE TOTALSINDEX=1; GOSUB 5300; ITEMBREAK$=FMZ$(16,10); TOTALSINDEX=2; GOSUB 5300; LOCATIONBREAK$=FMZ$(12,4),RECDEPTBREAK$=FMZ$(365,20); GOSUB 5500; REM "location change - do item totals if not first change
3216 IF ITEMBREAK$<>FMZ$(16,10) THEN IF ITEMBREAK$<>"" THEN TOTALSINDEX=1; GOSUB 5300; ITEMBREAK$=FMZ$(16,10) ELSE ITEMBREAK$=FMZ$(16,10); REM "item totals
3220 ENTRY$=ENTRY_TEMPLATE$
3230 GOSUB 3300
3231 GOSUB 5200; REM "increment totals
3235 IF LEN(TABLE$+ENTRY$)>25000 THEN PRINT (OUTPUT)TABLE$,EOL$,; TABLE$="" END_IF ; TABLE$=TABLE$+ENTRY$
3245 GOTO 3212
3250 FOR XXXX=1 TO 3; TOTALSINDEX=XXXX; GOSUB 5300; NEXT XXXX; REM "generate all totals
3295 RETURN 
3300 REM "Given FM1$, create row in table
3305 EINDEX=POS("?tf?"=ENTRY$); IF EINDEX=0 THEN GOTO 3396
3306 EEND_INDEX=POS("?"=ENTRY$(EINDEX+4)),ETAG$=ENTRY$(EINDEX+4,EEND_INDEX-1),ENTRY1$=ENTRY$(1,EINDEX-1),ENTRY2$=ENTRY$(EINDEX+EEND_INDEX+4),EPOS=POS("<"+ETAG$+">"=ENTRY_TAGS$); IF EPOS=0 THEN EINDEX=0 ELSE EINDEX=NUM(ENTRY_TAGS$(EPOS-3,3))
3310 ON EINDEX GOTO 3392,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3344,3345,3392
3311 ENTRY$=ENTRY1$+STP(FMZ$(16,10),2)+ENTRY2$; GOTO 3395; REM "item_code
3312 ENTRY$=ENTRY1$+STP(FMZ$(16,10),2)+ENTRY2$; GOTO 3395; REM "form_code
3313 ENTRY$=ENTRY1$+FMZ$(11,1)+ENTRY2$; GOTO 3395; REM "location_type
3314 ENTRY$=ENTRY1$+FMZ$(12,4)+ENTRY2$; GOTO 3395; REM "receiving_code
3315 DATEIN$=FMZ$(26,6); GOSUB GET_DATE; ENTRY$=ENTRY1$+DATEOUT_LONG$+ENTRY2$; GOTO 3395; REM "ship_date "
3316 ENTRY$=ENTRY1$+STP(FMZ$(46,40),1)+ENTRY2$; GOTO 3395; REM "description
3317 ENTRY$=ENTRY1$+STP(FMZ$(86,6),1)+ENTRY2$; GOTO 3395; REM "rev_date
3318 ENTRY$=ENTRY1$+STP(FMZ$(97,15),1)+ENTRY2$; GOTO 3395; REM "ship_via_desc
3319 ENTRY$=ENTRY1$+STP(FMZ$(112,1),1)+ENTRY2$; GOTO 3395; REM "order_type
3320 CALL "ZZDISP","AX",FMZ$(113,8),"O/P",X3$,TF_ORDER_NO$,"",0,0,X4$; ENTRY$=ENTRY1$+TF_ORDER_NO$+ENTRY2$; GOTO 3395; REM "tf_order_no
3321 ENTRY$=ENTRY1$+STP(FMZ$(122,15),1)+ENTRY2$; GOTO 3395; REM "cust_po
3322 DATEIN$=FMZ$(145,6); GOSUB GET_DATE; ENTRY$=ENTRY1$+DATEOUT$+ENTRY2$; GOTO 3395; REM "order_date
3323 ENTRY$=ENTRY1$+FMZ$(151,3)+ENTRY2$; GOTO 3395; REM "order_line
3324 ENTRY$=ENTRY1$+FMZ$(166,10)+ENTRY2$; GOTO 3395; REM "vendor_code
3325 ENTRY$=ENTRY1$+STP(FMZ$(180,4),2)+ENTRY2$; GOTO 3395; REM "selling_uom
3326 ENTRY$=ENTRY1$+STR(FMZ(0):"####")+ENTRY2$; GOTO 3395; REM "selling_qty_peruom
3327 ENTRY$=ENTRY1$+FMZ$(121,1)+ENTRY2$; GOTO 3395; REM "tf_po_code
3328 ENTRY$=ENTRY1$+FMZ$(185,7)+ENTRY2$; GOTO 3395; REM "invoice_no"
3329 DATEIN$=FMZ$(192,6); GOSUB GET_DATE; ENTRY$=ENTRY1$+DATEOUT$+ENTRY2$; GOTO 3395; REM "invoice_date
3330 ENTRY$=ENTRY1$+STP(FMZ$(198,9),1)+ENTRY2$; GOTO 3395; REM "starting_no
3331 ENTRY$=ENTRY1$+STP(FMZ$(207,9),1)+ENTRY2$; GOTO 3395; REM "ending_no
3332 ENTRY$=ENTRY1$+STP(FMZ$(365,20),1)+ENTRY2$; GOTO 3395; REM "receiving_dept
3333 ENTRY$=ENTRY1$+STP(STR(FMZ(2):"#,###.00-"),2)+ENTRY2$; GOTO 3395; REM "fms_price
3334 ENTRY$=ENTRY1$+STP(STR(FMZ(3):"###,###.00-"),2)+ENTRY2$; GOTO 3395; REM "fms_price_ext
3335 IF EC$[2](322,1)="Y" THEN ENTRY$=ENTRY1$+ENTRY2$; GOTO 3395 ELSE ENTRY$=ENTRY1$+STP(STR(FMZ(4):"#,###.00-"),2)+ENTRY2$; GOTO 3395; REM "sell_price. SSP186593, check buyer pricing parameter
3336 IF EC$[2](322,1)="Y" THEN ENTRY$=ENTRY1$+ENTRY2$; GOTO 3395 ELSE ENTRY$=ENTRY1$+STP(STR(FMZ(5):"###,###.00-"),2)+ENTRY2$; GOTO 3395; REM "sell_price_ext. SSP186593, check buyer pricing parameter
3337 ENTRY$=ENTRY1$+STP(STR(FMZ(7):"#,###.00-"),2)+ENTRY2$; GOTO 3395; REM "freight_prorated"
3338 ENTRY$=ENTRY1$+STP(STR(FMZ(8):"#,###.00-"),2)+ENTRY2$; GOTO 3395; REM "tax_prorated"
3339 ENTRY$=ENTRY1$+STP(STR(FMZ(1):"##,###,##0-"),2)+ENTRY2$; GOTO 3395; REM "qty_shipped_eaches"
3340 IF FMZ(0)=0 THEN QSS=0 ELSE QSS=FMZ(1)/FMZ(0) END_IF ; ENTRY$=ENTRY1$+STP(STR(QSS:"##,###,##0.0-"),2)+ENTRY2$; GOTO 3395; REM "qty_shipped_sell"
3341 GOSUB 2250; ENTRY$=ENTRY1$+ENTRY2$; GOTO 3395; REM "item_totals_start
3342 GOSUB 2300; ENTRY$=ENTRY1$+ENTRY2$; GOTO 3395; REM "location_totals_start"
3343 GOSUB 2350; ENTRY$=ENTRY1$+ENTRY2$; GOTO 3395; REM "report_totals_start
3344 ENTRY$=ENTRY1$+FMZ$(180,4)+"/"+STR(FMZ(3):"###0")+ENTRY2$; GOTO 3395; REM "selling_uom_ext"
3345 ENTRY$=ENTRY1$+FMZ$(409,15)+ENTRY2$; GOTO 3395 ! buyer_on_order, WO188859
3392 ENTRY$=ENTRY1$+ENTRY2$; REM "unknown tag. 233219 - Remove "?"
3395 GOTO 3305
3399 RETURN 
3400 REM "Output report from work file built @5000
3445 RETURN 
4000 REM "Category has changed, output a category header (if categorystart was supplied and we have html to do so), then update PREV_CATEGORY$
4002 CAT_TAGS$="001<category_code>002<category_desc>003<category_addl>"
4003 DIM ECG$(100); IF SEARCH_TYPE$="" THEN ECG$(1,10)=DISPLAY$[ENTRY_INDEX](11,10) ELSE ECG$(1,10)=DISPLAY$[ENTRY_INDEX](26,10) END_IF ; FIND (Z[4],KEY=ECG$(1,10),DOM=4004)IOL=0340
4004 IF SEARCH_TYPE$="" THEN PREV_CATEGORY$=DISPLAY$[ENTRY_INDEX](11,10) ELSE PREV_CATEGORY$=DISPLAY$[ENTRY_INDEX](26,10)
4005 IF CAT_TEMPLATE$="" THEN GOTO 4095 ELSE CAT$="",TMP_CAT$=CAT_TEMPLATE$; REM "Skip if no template supplied, else setup for starting
4006 CINDEX=POS("?tf?"=TMP_CAT$); IF CINDEX=0 THEN CAT$=CAT$+TMP_CAT$; GOTO 4093
4007 CEND_INDEX=POS("?"=TMP_CAT$(CINDEX+4)),CTAG$=TMP_CAT$(CINDEX+4,CEND_INDEX-1),CAT$=CAT$+TMP_CAT$(1,CINDEX-1),TMP_CAT$=TMP_CAT$(CINDEX+CEND_INDEX+4),CPOS=POS("<"+CTAG$+">"=CAT_TAGS$); IF CPOS=0 THEN CINDEX=0 ELSE CINDEX=NUM(CAT_TAGS$(CPOS-3,3))
4010 ON CINDEX GOTO 4089,4011,4012,4013,4089
4011 CAT$=CAT$+STP(ECG$(1,10),1); GOTO 4090; REM "category_code
4012 CAT$=CAT$+STP(ECG$(11,30),1); GOTO 4090; REM "category_desc
4013 CAT$=CAT$+STP(ECG$(41,60),1); GOTO 4090; REM "category_addl
4089 CAT$=CAT$+""; GOTO 4090; REM "tag not found, replace with '?'. 233219 - Remove "?"
4090 GOTO 4006
4093 TABLE$=TABLE$+CAT$
4095 RETURN 
4400 REM "Use Product Catalog file to build display array
4401 REM "** currently not supporting next/previous buttons
4402 FIRST_ITEM$="",LAST_ITEM$="",TOTAL_RECORDS=0,INDEX=1,ITEM_LIST$=""; DIM DISPLAY$[6000]
4404 REM "GOSUB 04450
4405 FOR CATEGORY_INDEX=0 TO LEN(CATEGORY$)/10-1
4406 CURRENT_CATEGORY$=CATEGORY$(CATEGORY_INDEX*10+1,10)
4407 IF CURRENT_CATEGORY$=EC$[2](483,10) THEN READ (Z[12],KEY=EC$[2](1,15),KNO=CATALOGSORT,DOM=4408) ELSE READ (Z[5],KEY=CATALOG$+CURRENT_CATEGORY$,KNO=CATALOGSORT,DOM=4410)
4408 EDEKEY$=KEY(Z[12],KNO=CATALOGSORT,END=4435); IF EDEKEY$(1,15)<>EC$[2](1,15) THEN GOTO 4435 ELSE READ (Z[12],KEY=EDEKEY$,KNO=CATALOGSORT)EDE$; ECRKEY$=EDE$(36,20); DIM ECH$(190); ECH$(1,10)=EC$[2](325,10),ECH$(11,10)=EC$[2](483,10),ECH$(21,40)=EDE$(16,40),ECH$(61,40)=EDE$(56,40); GOTO 4411; REM "153058
4410 ECHKEY$=KEY(Z[5],KNO=CATALOGSORT,END=4435); IF ECHKEY$(1,20)<>CATALOG$+CURRENT_CATEGORY$ THEN GOTO 4442 ELSE READ (Z[5],KEY=ECHKEY$,KNO=CATALOGSORT)ECH$; ECRKEY$=ECH$(41,20); REM "153058
4411 IF EC$[2](339,1)<>"Y" THEN GOTO 4413; REM "ck if only reporting activeitems
4412 FIND (Z[11],KEY=ECH$(41,20)+EC$[2](61,4),DOM=4410); REM "skip if no FM4 record
4413 DIM ECR$(1000); FIND (Z(6),KEY=ECRKEY$,DOM=*NEXT)IOL=0360
4420 IF SUPPRESS_DUPLICATES$="Y" THEN IF POS(ECH$(41,20)=ITEM_LIST$,20)<>0 THEN GOTO 4426; REM "if already in display array then do not add again
4423 GOSUB 8000; IF ITEM_OK$<>"Y" THEN GOTO 4426
4425 DISPLAY$[INDEX]=ECH$,TOTAL_RECORDS=TOTAL_RECORDS+1,INDEX=INDEX+1,ITEM_LIST$=ITEM_LIST$+ECH$(41,20)
4430 IF CURRENT_CATEGORY$=EC$[2](483,10) THEN GOTO 4408 ELSE GOTO 4410
4442 NEXT CATEGORY_INDEX
4443 FIRST_ITEM$=DISPLAY$[1],LAST_ITEM$=DISPLAY$[TOTAL_RECORDS]
4445 RETURN 
4450 REM "Set VERY_FIRST_ITEM$ and VERY_LAST_ITEM$. These will be used to determine when to NOT show prev and next buttons
4455 VERY_FIRST_ITEM$="",VERY_LAST_ITEM$=""
4460 READ (Z[5],KEY=EC$[2](325,10),DOM=4461)
4465 VK$=KEY(Z[5],END=4466); IF VK$(1,10)=EC$[2](325,10) THEN VERY_FIRST_ITEM$=VK$
4470 READ (Z[5],KEY=EC$[2](325,10)+$FF$,DOM=4471)
4471 VK$=KEP(Z[5],END=4472); IF VK$(1,10)=EC$[2](325,10) THEN VERY_LAST_ITEM$=VK$
4495 RETURN 
5000 REM "Item Search
5001 DIM TOTALS(30,3)
5002 FMZHIKEY$=EC$[2](51,10)+"C"; IF USAGE_LOCATION$<>"****" THEN FMZHIKEY$=FMZHIKEY$+USAGE_LOCATION$
5003 FOUND=0; DIM FMZ(14)
5005 CALL "ZZINIT",STR(Z[7]:"00")
5009 READ (Z(19),KEY=FMZHIKEY$,DOM=*NEXT)
5010 FMZKEY$=KEY(Z(19),END=5160); READ (Z(19),KEY=FMZKEY$)IOL=0490
5020 IF FMZKEY$(1,10)<>EC$[2](51,10) THEN GOTO 5160
5030 IF FMZKEY$(11,1)<>"C" THEN GOTO 5010; REM "exclude shipments into the warehouse
5035 IF STP(RESTRICT_TYPES$,3)="" THEN GOTO *NEXT ELSE IF POS(FMZ$(35,1)=RESTRICT_TYPES$,1)>0 THEN GOTO 5010 ! SSP183662, check restrict_types and if match to activity type then don't use this record
5040 IF USAGE_LOCATION$="****" THEN GOTO *NEXT ELSE IF FMZKEY$(12,4)<>USAGE_LOCATION$ THEN GOTO 5160
5050 IF STP(SEARCH_ITEM_CODE$,3," ")="" THEN GOTO *NEXT ELSE IF FMZ$(16,10) LIKE SEARCH_ITEM_CODE$ THEN GOTO *NEXT ELSE GOTO 5010
5060 IF STP(SEARCH_ITEM_DESC$,3," ")="" THEN GOTO *NEXT ELSE IF UCS(FMZ$(46,40)) LIKE SEARCH_ITEM_DESC$ THEN GOTO *NEXT ELSE GOTO 5010
5070 IF FMZKEY$(26,6)<START_SHIP_DATE$ THEN READ (Z(19),KEY=FMZKEY$(1,25)+START_SHIP_DATE$,DOM=5010)
5080 IF FMZKEY$(26,6)>END_SHIP_DATE$ THEN READ (Z(19),KEY=FMZKEY$(1,31)+$FF$,DOM=5010)
5090 DIM ECR$(1000); READ (Z[6],KEY=FMZ$(1,10)+FMZ$(16,10),DOM=*NEXT)ECR$ ! SSP173398
5095 GOSUB 8000; IF ITEM_OK$<>"Y" THEN GOTO 5010 ! SSP173398
5100 REM "record qualifies
5110 WRITE (Z(7),KEY=FMZKEY$)IOL=0490
5120 FOUND=FOUND+1
5150 GOTO 5010
5160 READ (Z[7],KEY="",DOM=*NEXT) ! SSP173329, was using KNO=CATALOGSORT, this generated an error 80 since the work file is not defined with an alt key
5190 RETURN 
5200 REM "update totals variables
5210 FOR XXX=1 TO 3
5211 TOTALS(1,XXX)=TOTALS(1,XXX)+FMZ(3); REM "fms_price_ext
5212 TOTALS(2,XXX)=TOTALS(2,XXX)+FMZ(5); REM "sell_price_ext
5213 TOTALS(3,XXX)=TOTALS(3,XXX)+FMZ(7); REM "freight_prorated
5214 TOTALS(4,XXX)=TOTALS(4,XXX)+FMZ(8); REM "tax_prorated
5215 TOTALS(5,XXX)=TOTALS(5,XXX)+FMZ(1); REM "qty_shipped_eaches
5216 IF FMZ(0)=0 THEN QSST=0 ELSE QSST=FMZ(1)/FMZ(0) END_IF ; TOTALS(6,XXX)=TOTALS(6,XXX)+QSST; REM "qty_shipped_sell"
5217 TOTALS(7,XXX)=TOTALS(7,XXX)+1; REM "count
5230 NEXT XXX
5245 RETURN 
5300 REM "totaling routine
5305 TOTAL_TAGS$="001<fms_price_ext_total>002<sell_price_ext_total>003<freight_prorated_total>004<tax_prorated_total>005<qty_shipped_sell_total>006<item_code>007<fmz_shipto_code>008<fmz_receiving_dept>009<qty_shipped_each_total>010<item_count>"
5310 ON TOTALSINDEX-1 GOTO 5311,5312,5313
5311 TOTALS_TEMPLATE$=ITEM_TOTALS_TEMPLATE$; GOTO 5320
5312 TOTALS_TEMPLATE$=LOCATION_TOTALS_TEMPLATE$; GOTO 5320
5313 TOTALS_TEMPLATE$=REPORT_TOTALS_TEMPLATE$; GOTO 5320
5330 ENTRY$=TOTALS_TEMPLATE$
5340 GOSUB 5400; TABLE$=TABLE$+ENTRY$,ENTRY$=""
5350 FOR XXX=1 TO 30; TOTALS(XXX,TOTALSINDEX)=0; NEXT XXX
5390 RETURN 
5400 REM "Create totals template
5405 EINDEX=POS("?tf?"=ENTRY$); IF EINDEX=0 THEN GOTO 5496
5406 EEND_INDEX=POS("?"=ENTRY$(EINDEX+4)),ETAG$=ENTRY$(EINDEX+4,EEND_INDEX-1),ENTRY1$=ENTRY$(1,EINDEX-1),ENTRY2$=ENTRY$(EINDEX+EEND_INDEX+4),EPOS=POS("<"+ETAG$+">"=TOTAL_TAGS$); IF EPOS=0 THEN EINDEX=0 ELSE EINDEX=NUM(TOTAL_TAGS$(EPOS-3,3))
5410 ON EINDEX GOTO 5492,5411,5412,5413,5414,5415,5416,5417,5418,5419,5420,5492
5411 ENTRY$=ENTRY1$+STP(STR(TOTALS(1,TOTALSINDEX):"##,###,##0.00-"),2)+ENTRY2$; GOTO 5495; REM "fms_price_ext_total
5412 IF EC$[2](322,1)="Y" THEN ENTRY$=ENTRY1$+ENTRY2$; GOTO 5495 ELSE ENTRY$=ENTRY1$+STP(STR(TOTALS(2,TOTALSINDEX):"##,###,##0.00-"),2)+ENTRY2$; GOTO 5495; REM "sell_price_ext_total. SSP186593, check buyer pricing parameter
5413 ENTRY$=ENTRY1$+STP(STR(TOTALS(3,TOTALSINDEX):"##,###,##0.00-"),2)+ENTRY2$; GOTO 5495; REM "freight_prorated_total
5414 ENTRY$=ENTRY1$+STP(STR(TOTALS(4,TOTALSINDEX):"##,###,##0.00-"),2)+ENTRY2$; GOTO 5495; REM "tax_prorated_total
5415 ENTRY$=ENTRY1$+STP(STR(TOTALS(6,TOTALSINDEX):"##,###,##0.00-"),2)+ENTRY2$; GOTO 5495; REM "qty_shipped_sell_total
5416 ENTRY$=ENTRY1$+STP(ITEMBREAK$,2)+ENTRY2$; GOTO 5495; REM "item_code
5417 ENTRY$=ENTRY1$+STP(LOCATIONBREAK$,2)+ENTRY2$; GOTO 5495; REM "fmz_shipto_code
5418 ENTRY$=ENTRY1$+STP(RECDEPTBREAK$,2)+ENTRY2$; GOTO 5495; REM "fmz_receving_dept
5419 ENTRY$=ENTRY1$+STP(STR(TOTALS(5,TOTALSINDEX):"##,###,##0.00-"),2)+ENTRY2$; GOTO 5495; REM "qty_shipped_eaches_total
5420 ENTRY$=ENTRY1$+STP(STR(TOTALS(7,TOTALSINDEX):"##,##0"),2)+ENTRY2$; GOTO 5495; REM "item_count
5492 ENTRY$=ENTRY1$+ENTRY2$; GOTO 5405 ! 233219 - Remove "?"
5495 GOTO 5405
5499 RETURN 
5500 REM "location_heading_start - output section
5502 ENTRY$=LOCATION_HEADING_TEMPLATE$,ACTIVE_LOCATION$=FMZ$(12,4)
5504 DIM FM0$(500),FM0(14); FIND (Z(8),KEY="C"+EC$[2](51,10)+ACTIVE_LOCATION$,DOM=*NEXT)IOL=0380
5505 LOCATION_TAGS$="001<fm0_receiving_dept>002<fm0_description>003<fm0_address1>004<fm0_address2>005<fm0_address3>006<fm0_shipto_code>007<fm0_attention>"
5506 EINDEX=POS("?tf?"=ENTRY$); IF EINDEX=0 THEN GOTO 5596
5507 EEND_INDEX=POS("?"=ENTRY$(EINDEX+4)),ETAG$=ENTRY$(EINDEX+4,EEND_INDEX-1),ENTRY1$=ENTRY$(1,EINDEX-1),ENTRY2$=ENTRY$(EINDEX+EEND_INDEX+4),EPOS=POS("<"+ETAG$+">"=LOCATION_TAGS$); IF EPOS=0 THEN EINDEX=0 ELSE EINDEX=NUM(LOCATION_TAGS$(EPOS-3,3))
5510 ON EINDEX GOTO 5592,5511,5512,5513,5514,5515,5516,5517,5592
5511 ENTRY$=ENTRY1$+STP(FM0$(382,20),2)+ENTRY2$; GOTO 5590; REM "fm0_receiving_dept
5512 ENTRY$=ENTRY1$+STP(FM0$(16,35),2)+ENTRY2$; GOTO 5590; REM "fm0_description
5513 ENTRY$=ENTRY1$+STP(FM0$(51,30),2)+ENTRY2$; GOTO 5590; REM "fm0_address1
5514 ENTRY$=ENTRY1$+STP(FM0$(81,30),2)+ENTRY2$; GOTO 5590; REM "fm0_address2
5515 ADDR3$=STP(FM0$(111,16),2)+", "+FM0$(127,2)+" "+FM0$(129,9); ENTRY$=ENTRY1$+ADDR3$+ENTRY2$; GOTO 5590; REM "fm0_address3
5516 ENTRY$=ENTRY1$+ACTIVE_LOCATION$+ENTRY2$; GOTO 5590; REM "fm0_shipto_code
5517 ENTRY$=ENTRY1$+STP(FM0$(160,20),2)+ENTRY2$; GOTO 5590; REM "fm0_attention
5590 GOTO 5506
5592 ENTRY$=ENTRY1$+ENTRY2$; GOTO 5506 ! 233219 - Remove "?"
5599 TABLE$=TABLE$+ENTRY$; RETURN 
7000 GET_DATE:
7010 CALL "EC3DAT",X3$,2,DATEIN$,DATEOUT$,DATEOUT_LONG$
7020 RETURN 
7500 REM "ck if form over reorder point
7502 REORDER_TRIGGERED$="N"
7510 IF FM1$(109,6)<X3$(21,6) AND FM1$(109,6)<>DIM(6) THEN REORDER_TRIGGERED$="Y",RO_TYPE$="Date"; GOTO 7540; REM "ck reorder date
7512 IF IC1INFO[33]<FM1(23) THEN REORDER_TRIGGERED$="Y",RO_TYPE$="Qty"; GOTO 7540; REM "ck reorder qty
7513 IF SELL_UM=0 OR FM1(24)=0 THEN GOTO 7540
7514 ROD=((IC1INFO[33]/SELL_UM)/(FM1(24)/SELL_UM)*30); IF ROD<FM1(22) THEN REORDER_TRIGGERED$="Y",RO_TYPE$="Days"; GOTO 7540; REM "ck reorder point in days
7540 RETURN 
7550 REM "Send LINE$ to EC3BYB for generic fields processing
7560 CALL "EC3BYB",ERR=7561,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,LINE$,BYBINFO${ALL},BYBOPTIONS$,100
7595 RETURN 
7600 REM "format zip code
7620 CALL "ZZDISP","A",ZIPIN$,"ZIP",X3$,ZIPOUT$,"",0,0,X4$
7650 REM "format phone
7670 CALL "ZZDISP","P",PIN$,"",X3$,POUT$,"",0,0,X4$
7680 RETURN 
7700 REM "calcualte and extended price
7701 REM "first convert to each price and then calculate
7705 EACHQTY=FM1[3]*1000/SELL_UM
7800 REM "get active uom
7810 ON POS(ITEM_TYPE$="CI")-1 GOTO 7820,7840
7820 REM "C - items FM1
7830 IF STP(FM1$(238,4),3," ")="" OR FM1[25]=0 THEN UM$=FM1$(100,4),PACK=FM1[4]; GOTO 7860 ELSE UM$=FM1$(238,4),PACK=FM1[25]; GOTO 7860
7840 REM "I - items IC0
7850 UM$=IC0$(120,4),PACK=IC0[14]
7860 UM$=STP(UM$,1),EXT_UM$=STP(UM$,1)+"/"+STR(PACK:"##,##0")
7890 RETURN 
7900 REM "get inventory / usage figures
7909 DIM USAGE_KEYS$(10); USAGE_KEYS$(1,4)=USAGE_YEAR$,USAGE_KEYS$(5,2)=USAGE_PERIOD$; IF USAGE_LOCATION$<>"****" THEN USAGE_KEYS$(7,4)=USAGE_LOCATION$; REM "set to value passed in
7910 DIM CHANNELS[4]; CHANNELS[1]=Z[9],CHANNELS[2]=Z[10],CHANNELS[3]=Z[11],CHANNELS[4]=Z[6]
7911 DIM OPTIONS$(20); OPTIONS$(1,2)="RB"; REM "R-reported warehouses   B-both usage/inventory figs, SSP165240 change DIM to 20
7912 OPTIONS$(5,1)=BALANCE_TYPE$
7930 CALL "EC3IC0",X3$,X4$,EC_PARM$,EC${ALL},FM1$(1,20),USAGE_KEYS$,CHANNELS{ALL},IC1INFO{ALL},FM3{ALL},FM3ALL{ALL},FM4$,FM4{ALL},FM4ALL{ALL},FORM_OTHER{ALL},FORM_OTHERALL{ALL},OPTIONS$
7940 REM "set other vars to local variables
7941 FM4_AVG_MOS_USAGE=FORM_OTHER[0],FM4_AVG_MOS_USAGEALL=FORM_OTHERALL[0]
7942 LAST_COMPLETED_PER_USAGE=FORM_OTHER[1],LAST_COMPLETED_PER_USAGEALL=FORM_OTHERALL[1]
7943 YTD_USAGE=FORM_OTHER[2],YTD_USAGE_ALL=FORM_OTHERALL[2]
7990 RETURN 
8000 REM "ck item secure codes against buyer record
8001 IF EC$[2](86,1)="Y" THEN GOTO 8030; REM "bypass if secure code super user
8002 ITEM_OK$="Y"
8004 IF ECR$(233,10)=DIM(10) THEN GOTO 8019
8005 ITEM_OK$="N"
8010 FOR ITEM_OK=0 TO 4
8012 TEMP$=ECR$(ITEM_OK*2+233,2); IF TEMP$=DIM(2) THEN GOTO 8018
8014 IF POS(TEMP$=EC$[2](233,20)+EC$[2](898,40),2)<>0 THEN EXITTO 8030
8018 NEXT ITEM_OK
8019 IF EC_PARM$(554,1)<>"Y" THEN GOTO 8040 ! 209871
8020 REM "ck for unlimited secure codes 153058
8021 DIM EDQ$(1000); EDQ$(1,20)=ECR$(1,20),EDQ$(21,2)="01"; READ (Z(18),KEY=EDQ$(1,22),DOM=8040)EDQ$
8022 CODES$=STP(EDQ$(23,978),3," "); IF CODES$="" THEN GOTO 8040 ! SSP173398, was GOTO 8030
8023 ITEM_OK$="N" ! SSP173398
8024 FOR ITEM_OK=0 TO LEN(CODES$)/2-1; CURRCODE$=CODES$(ITEM_OK*2+1,2)
8025 IF POS(CURRCODE$=EC$[2](233,20)+EC$[2](898,40),2)<>0 THEN EXITTO 8030
8026 NEXT ITEM_OK
8027 GOTO 8040
8030 ITEM_OK$="Y"
8040 RETURN 
8050 REM "return list of categories based on EDI
8051 IF EC$[2](325,10)=CATALOG$ THEN EDI_CATEGORY_LIST$=EC$[6]; GOTO 8061
8052 EDI_CATEGORY_LIST$=""
8053 READ (Z[14],KEY=CATALOG$,DOM=8054)
8060 EDIKEY$=KEY(Z[14],END=8061); IF EDIKEY$(1,10)=CATALOG$ THEN EDI_CATEGORY_LIST$=EDI_CATEGORY_LIST$+EDIKEY$(11,10); READ (Z[14]); GOTO 8060
8070 IF LEN(EDI_CATEGORY_LIST$)=0 THEN DIM EDI_CATEGORY_LIST$(10)
8090 RETURN 
8500 SET_READONLY:REM "Set the PRM READONLY to on
8510 SAVE_XI=PRM('XI'); SET_PARAM 'XI' ! Ignore exclusive locks, save previous setting
8525 SET_READONLY_END:RETURN 
8530 CLEAR_READONLY:REM "Restore previous setting
8535 SET_PARAM 'XI'=SAVE_XI ! restore previous setting
8545 CLEAR_READONLY_END:RETURN 
8910 DEF FND$(Z9$)=Z9$(1*2+1,2)+"/"+Z9$(7-1*2,2)+"/"+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
8915 DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$); REM "131928
9090 GOTO 9900
9900 REM "End
9905 SETERR 9910; GOSUB CLEAR_READONLY
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9950 EXIT 
9999 END 
56000 ! Program changes starting 10/25/05
56002 REM "233219-Create excel versions of some of the EC html reports to use 
56010 REM "188859-Add a new tag, buyer_on_order, to the WebEC Warehouse
56015 REM "184884-Need file for users to create style sheet codes, then they
56020 REM "192407-Buyer needs 20 additional secure codes.                     
56022 REM "205460-Oracle - FIN(CHANNEL,"NUMREC") changed to use FN%FIN$()     
56023 REM "209871-Secure codes not working if unlimited secure codes off     
