0010 REM "Webec - Build order status sort file (ECW) <EC3SOR>
0011 REM "** Called from FM2ODH if web ec parameters set
0020 SETESC 9300; SETERR 9000
0035 REM "5.1 - 12/16/02 - 11.766666 - wab - SSP# 135031
0040 REM "Copyright 2002 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0087 REM "C0=command, 1=add, -1=maint. delete, -2=header delete stuff, -3=both deletes, -4=Put out FSA prior record only, 99=Rebuild mode (FM2UT9)
0088 REM "A$=sales order data
0089 REM "SOURCE_FILE_FOR_A$ = identifies if A$ is from FS1 or FT3 (if FT3 then use FT4/5 instead of FS2/PO3)
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,C0,A$,A{ALL},SOURCE_FILE_FOR_A$,E1$,E2$,E3$
0100 SETERR 9000
0110 X0$="EC3SOR",X1$="Webec - Build order status sort file <ECW>"
0130 K0=20,K1=1
0135 C9=-1
0200 REM "
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0295 DIM Z0$(80,X3$(235,1)),BLANK$(100); Z0$=ESC+"BG"+Z0$+ESC+"EG"
0300 REM "IOLISTS
0320 IOLIST FS2$,FS2[0],FS2[1],FS2[2],FS2[3],FS2[4],FS2[5],FS2[6],FS2[7],FS2[8],FS2[9],FS2[10],FS2[11],FS2[12],FS2[13],FS2[14],FS2[15],FS2[16],FS2[17],FS2[18],FS2[19],FS2[20],FS2[21],FS2[22]
0330 IOLIST PO3$
0350 IOLIST ECU$
0360 IOLIST ECV$
0500 REM "FILES
0502 IF POS("FS1"=SOURCE_FILE_FOR_A$)=0 THEN LINEFILE$="FT4...",SHIPFILE$="FT5..." ELSE LINEFILE$="FS2...",SHIPFILE$="PO3..."
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01O ECW...  02O "+LINEFILE$+"  03O "+SHIPFILE$+"  04O ECS... 05O ECU...  06O ECV...  13O ZZPARM  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0550 REM "definitions
0560 DEF FNA$(Z9$)=CHR(127-DEC(Z9$))
0561 REM "converts tfmmdd to yymmdd
0562 DEF FNO$(Z9$)=STR(MOD((ASC(Z9$(1,1))-65)*10,100)+NUM(Z9$(2,1)):"00")+Z9$(3,4)
0563 REM "converts yymmdd to tfmmdd
0564 DEF FNP$(X$)=CHR(ASC("K")+INT(NUM(X$(1,2))/10))+STR(MOD(NUM(X$(1,2)),10))+X$(3,4)
0600 REM "read in customer webec parameters
0605 CUSTOMER_CODE$=A$(6,10)
0610 DIM CUST_PARMS$(600); FIND (Z[4],KEY=CUSTOMER_CODE$,DOM=9900)CUST_PARMS$
0612 DIM EC_PARM$(2048); FIND (Z(13),KEY=X3$(9,3)+"E/C",DOM=0613)EC_PARM$
0620 REM "ck if order to be processed
0621 TODAYYYMMDD$=FNO$(X3$(21,6)),OEJULIAN=JUL(NUM(TODAYYYMMDD$(1,2)),NUM(TODAYYYMMDD$(3,2)),NUM(TODAYYYMMDD$(5,2))); CUTOFFJULIAN=OEJULIAN-NUM(EC_PARM$(125,3))
0622 CUTOFFYYMMDD$=DTE(CUTOFFJULIAN:"%Yz%Mz%Dz"),CUTOFFDATE$=FNP$(CUTOFFYYMMDD$)
0623 IF A$(16,6)<CUTOFFDATE$ THEN GOTO 6000; REM "if order entry date is past the cutoff days from e/c parms then bypass processing
0650 REM "set variables based on number of customer order status sort definitions
0652 HDR_DEFS$="",LINE_DEFS$="",OSKW_HDR_DEFS$="",OSKW_LINE_DEFS$=""
0654 FOR H=0 TO 2; VALUE$=CUST_PARMS$(H*10+172,10); IF VALUE$<>DIM(10) THEN HDR_DEFS$=HDR_DEFS$+VALUE$ END_IF ; NEXT H
0656 FOR L=0 TO 2; VALUE$=CUST_PARMS$(L*10+202,10); IF VALUE$<>DIM(10) THEN LINE_DEFS$=LINE_DEFS$+VALUE$ END_IF ; NEXT L
0660 REM "get order status keyword sorts (hdr and line based)
0664 OSKW_HDR_SORT_TYPES_MAIN$="O1O2O4",OSKW_HDR_SORT_TYPES$=""; FOR OO=0 TO 1; VALUE$=EC_PARM$(OO*10+843,10); IF VALUE$<>DIM(10) THEN OSKW_HDR_DEFS$=OSKW_HDR_DEFS$+VALUE$,OSKW_HDR_SORT_TYPES$=OSKW_HDR_SORT_TYPES$+OSKW_HDR_SORT_TYPES_MAIN$(OO*2+1,2) END_IF ; NEXT OO; IF EC_PARM$(913,10)<>DIM(10) THEN OSKW_HDR_DEFS$=OSKW_HDR_DEFS$+EC_PARM$(913,10),OSKW_HDR_SORT_TYPES$=OSKW_HDR_SORT_TYPES$+"O4"
0670 OSKW_LINE_SORT_TYPES_MAIN$="I1S1S3S4S5I2",OSKW_LINE_SORT_TYPES$=""; FOR OO=0 TO 4; VALUE$=EC_PARM$(OO*10+863,10); IF VALUE$<>DIM(10) THEN OSKW_LINE_DEFS$=OSKW_LINE_DEFS$+VALUE$,OSKW_LINE_SORT_TYPES$=OSKW_LINE_SORT_TYPES$+OSKW_LINE_SORT_TYPES_MAIN$(OO*2+1,2) END_IF ; NEXT OO; IF EC_PARM$(923,10)<>DIM(10) THEN OSKW_LINE_DEFS$=OSKW_LINE_DEFS$+EC_PARM$(923,10),OSKW_LINE_SORT_TYPES$=OSKW_LINE_SORT_TYPES$+"I2"
0690 REM "dimension definition storage variables
0692 REM "(A,B)  a=number of definitions    b=max number of elements in a definition
0695 DIM H$[LEN(HDR_DEFS$)/10,100],L$[LEN(LINE_DEFS$)/10,100],OH$[7,10],OL$[7,10]; REM "H$-customer header sorts   L$-customer line sorts   OH$-order keyword search sorts (header based)  OL$=order keyword search sorts (line based)
1000 REM "get definitions for HEADER sorts
1002 REM "set up initial variables
1020 HDR_DEF_COUNT=LEN(HDR_DEFS$)/10; IF HDR_DEF_COUNT=0 THEN GOTO 1500; REM "if no header definitions proceed to line definitions
1022 HDR_INDEX=0
1100 REM "get next definition
1120 FOR H=1 TO HDR_DEF_COUNT
1122 SORT_DEFINITION$=HDR_DEFS$((H-1)*10+1,10)
1130 REM "ck for customer based definition
1132 ECUKEY$=CUSTOMER_CODE$+SORT_DEFINITION$; FIND (Z[6],KEY=ECUKEY$+"001",DOM=1140); GOTO 1150
1140 REM "check for global definition
1142 ECUKEY$=BLANK$(1,10)+SORT_DEFINITION$; FIND (Z[6],KEY=ECUKEY$+"001",DOM=1480); REM "if not found get next definition
1150 REM "set element count and index
1160 HDR_INDEX=HDR_INDEX+1,HDR_ELEMENT_COUNT=0
1200 REM "get next element for current ECU entry from ECV
1210 FIND (Z[6],KEY=ECUKEY$+STR(HDR_ELEMENT_COUNT+1:"000"),DOM=1480)IOL=0360
1220 HDR_ELEMENT_COUNT=HDR_ELEMENT_COUNT+1
1250 REM "place ECV definition in H$
1260 H$[HDR_INDEX,HDR_ELEMENT_COUNT]=ECV$
1280 GOTO 1200
1480 REM "get next definition
1482 H$[HDR_INDEX,0]=STR(HDR_ELEMENT_COUNT); REM "record number of elements in index zero
1490 NEXT H
1500 REM "get definitions for OSKW sorts
1502 REM "set up initial variables
1520 OSKW_HDR_DEF_COUNT=LEN(OSKW_HDR_DEFS$)/10; IF OSKW_HDR_DEF_COUNT=0 THEN GOTO 2000
1522 OSKW_HDR_INDEX=0
1600 REM "get next definition
1620 FOR OO=1 TO OSKW_HDR_DEF_COUNT
1622 SORT_DEFINITION$=OSKW_HDR_DEFS$((OO-1)*10+1,10)
1630 REM "ck for global definition (customer definitions not supported)
1642 ECUKEY$=BLANK$(1,10)+SORT_DEFINITION$; FIND (Z(6),KEY=ECUKEY$+"001",DOM=1980); REM "if not found get next definition
1650 REM "set element count and index
1660 OSKW_HDR_INDEX=OSKW_HDR_INDEX+1,OSKW_HDR_ELEMENT_COUNT=0
1700 REM "get next element for current ECU entry from ECV
1710 FIND (Z(6),KEY=ECUKEY$+STR(OSKW_HDR_ELEMENT_COUNT+1:"000"),DOM=1980)IOL=0360
1720 OSKW_HDR_ELEMENT_COUNT=OSKW_HDR_ELEMENT_COUNT+1
1750 REM "place ECV definition in O$
1760 OH$[OSKW_HDR_INDEX,OSKW_HDR_ELEMENT_COUNT]=ECV$
1780 GOTO 1700
1980 REM "get next definition
1982 OH$[OSKW_HDR_INDEX,0]=STR(OSKW_HDR_ELEMENT_COUNT); REM "record number of elements in index zero
1990 NEXT OO
2000 REM "get definitions for LINE sorts
2002 REM "set up initial variables
2020 LINE_DEF_COUNT=LEN(LINE_DEFS$)/10; IF LINE_DEF_COUNT=0 THEN GOTO 2500; REM "if no header definitions proceed to line definitions
2022 LINE_INDEX=0
2100 REM "get next definition
2120 FOR L=1 TO LINE_DEF_COUNT
2122 SORT_DEFINITION$=LINE_DEFS$((L-1)*10+1,10)
2130 REM "ck for customer based definition
2132 ECUKEY$=CUSTOMER_CODE$+SORT_DEFINITION$; FIND (Z[6],KEY=ECUKEY$+"001",DOM=2140); GOTO 2150
2140 REM "check for global definition
2142 ECUKEY$=BLANK$(1,10)+SORT_DEFINITION$; FIND (Z[6],KEY=ECUKEY$+"001",DOM=2480); REM "if not found get next definition
2150 REM "set element count and index
2160 LINE_INDEX=LINE_INDEX+1,LINE_ELEMENT_COUNT=0
2200 REM "get next element for current ECU entry from ECV
2210 FIND (Z[6],KEY=ECUKEY$+STR(LINE_ELEMENT_COUNT+1:"000"),DOM=2480)IOL=0360
2220 LINE_ELEMENT_COUNT=LINE_ELEMENT_COUNT+1
2250 REM "place ECV definition in L$
2260 L$[LINE_INDEX,LINE_ELEMENT_COUNT]=ECV$
2280 GOTO 2200
2480 REM "get next definition
2482 L$[LINE_INDEX,0]=STR(LINE_ELEMENT_COUNT); REM "record number of elements in index zero
2490 NEXT L
2500 REM "get definitions for OSKW_LINE sorts
2502 REM "set up initial varialbes
2520 OSKW_LINE_DEF_COUNT=LEN(OSKW_LINE_DEFS$)/10; IF OSKW_LINE_DEF_COUNT=0 THEN GOTO 3000
2522 OSKW_LINE_INDEX=0
2600 REM "get next definition
2620 FOR L=1 TO OSKW_LINE_DEF_COUNT
2622 SORT_DEFINITION$=OSKW_LINE_DEFS$((L-1)*10+1,10)
2630 REM "ck for global definition (customer based not supported)
2642 ECUKEY$=BLANK$(1,10)+SORT_DEFINITION$; FIND (Z(6),KEY=ECUKEY$+"001",DOM=2980); REM "if not found get next definition
2650 REM "set element count and index
2660 OSKW_LINE_INDEX=OSKW_LINE_INDEX+1,OSKW_LINE_ELEMENT_COUNT=0
2700 REM "get next element for current ECU entry from ECV
2710 FIND (Z(6),KEY=ECUKEY$+STR(OSKW_LINE_ELEMENT_COUNT+1:"000"),DOM=2980)IOL=0360
2720 OSKW_LINE_ELEMENT_COUNT=OSKW_LINE_ELEMENT_COUNT+1
2750 REM "place ECV definition in L$
2760 OL$[OSKW_LINE_INDEX,OSKW_LINE_ELEMENT_COUNT]=ECV$
2780 GOTO 2700
2980 REM "get next definition
2982 OL$[OSKW_LINE_INDEX,0]=STR(OSKW_LINE_ELEMENT_COUNT); REM "record number of elements in index zero
2990 NEXT L
2992 REM "ck if no definitions on file - if so exit
2994 IF HDR_DEF_COUNT=0 AND LINE_DEF_COUNT=0 AND OSKW_HDR_DEF_COUNT=0 AND OSKW_LINE_DEF_COUNT=0 THEN GOTO 9900
2996 IF HDR_DEF_COUNT=0 THEN GOTO 4000; REM "if no header definitions go direct to line defintions
3000 REM "process ORDER HEADER record agains H$[] definitions
3002 REM "read in supporting file records (PO3)
3010 DIM PO3$(1000); FIND (Z[3],KEY=A$(118,8)+BLANK$(1,5),DOM=3011)PO3$
3100 REM "get next HEADER definition
3120 FOR HDR_INDEX=1 TO HDR_DEF_COUNT
3200 REM "process ECV element entry
3210 RESULT$=""
3215 IF NUM(H$[HDR_INDEX,0])<1 THEN GOTO 3700
3220 FOR ELEMENT=1 TO NUM(H$[HDR_INDEX,0])
3300 REM "build string based on definition
3302 TYPE$=H$[HDR_INDEX,ELEMENT](24,1),DPOSITION=NUM(H$[HDR_INDEX,ELEMENT](27,3)),LENGTH=NUM(H$[HDR_INDEX,ELEMENT](70,3)),TEXT$=H$[HDR_INDEX,ELEMENT](30,40),FILESOURCE$=H$[HDR_INDEX,ELEMENT](87,3),ECV$=H$[HDR_INDEX,ELEMENT]
3304 ON INT(POS(FILESOURCE$="FS1PO3",3)/3) GOTO 3305,3306
3305 RECORD$=A$; GOTO 3310; REM "set file source for FS1/FT3 (passed in)
3306 RECORD$=PO3$; GOTO 3310; REM "set file source for PO3
3316 ON POS(TYPE$="1T")-1 GOTO 3320,3332
3320 REM "data
3324 IF ECV$(73,1)="A" THEN GOTO 3340
3325 REM "S type
3326 IF POS("R"=ECV$(73,5))=0 THEN RESULT$=RESULT$+RECORD$(DPOSITION,LENGTH); GOTO 3352
3327 REM "reversed option set on S type
3328 IN_STRING$=RECORD$(DPOSITION,LENGTH); GOSUB 7500; RESULT$=RESULT$+REV_STRING$; GOTO 3352
3332 REM "text
3336 RESULT$=RESULT$+TEXT$(1,LENGTH); GOTO 3352
3340 REM "account type
3344 CALL "ZZDISP","AX",RECORD$(DPOSITION,LENGTH),STP(H$[HDR_INDEX,ELEMENT](78,9),2),X3$,ZRESULT$,"",0,0,X4$
3348 RESULT$=RESULT$+ZRESULT$; GOTO 3400
3400 NEXT ELEMENT
3500 REM "write ECW record
3510 ECWKEY$=RESULT$(1,10)+"H"+STR(HDR_INDEX:"0")+RESULT$(11)
3520 IF C0=1 OR C0=99 THEN GOSUB 6700 ELSE GOSUB 6500
3700 NEXT HDR_INDEX
4000 REM "process ORDER LINE record agains L$[] definitions
4010 IF LINE_DEF_COUNT=0 THEN GOTO 4900
4020 READ (Z[2],KEY=A$(118,8),DOM=4021); REM "position lines for start of order
4030 DIM FS2[22]
4050 REM "get next order line (PO3/FS2)
4052 FS2KEY$=KEY(Z[2],END=4900); IF FS2KEY$(1,8)<>A$(118,8) THEN GOTO 4900 ELSE READ (Z[2],KEY=FS2KEY$)IOL=0320
4060 REM "load all PO3 lines associated with FS2 line into PO3_LINE$[]
4062 DIM PO3_LINE$[50]; PO3_COUNT=0
4063 DIM PO3_GENERAL$(1000); READ (Z[3],KEY=FS2KEY$(1,8)+BLANK$(1,5),DOM=4064)PO3_GENERAL$
4064 READ (Z[3],KEY=FS2$(1,8)+" "+FS2$(9,3),DOM=4065)
4066 PO3KEY$=KEY(Z[3],END=4080); IF PO3KEY$(1,12)<>FS2KEY$(1,8)+" "+FS2KEY$(9,3) THEN GOTO 4080 ELSE READ (Z[3],KEY=PO3KEY$)IOL=0330
4069 IF PO3$(11,1)="C" THEN PO3_COUNT=PO3_COUNT+1; PO3_LINE$[PO3_COUNT]=PO3$; REM "only process customer ship-to records
4070 GOTO 4065
4080 IF PO3_COUNT=0 AND PO3_GENERAL$<>DIM(1000) THEN PO3_COUNT=1,PO3_LINE$[PO3_COUNT]=PO3_GENERAL$; REM "if no special shipping records found then set general shipping record
4100 REM "get next LINE definition
4120 FOR LINE_INDEX=1 TO LINE_DEF_COUNT
4130 REM "get associated ECU record
4132 FIND (Z[5],KEY=L$[LINE_INDEX,1](11,10),DOM=4700)IOL=0350; REM "get ECU definition from first element entry
4140 SOURCE_FILES$=ECU$(61,6)+ECU$(355,24)
4142 IF POS("PO3"=SOURCE_FILES$,3)=0 THEN PROCESS_PO3$="N",PO3_RECORD_COUNT=0; GOTO 4200 ELSE PROCESS_PO3$="Y",PO3_RECORD_COUNT=PO3_COUNT; GOTO 4300; REM "only process shipping records if PO3 is a source file in the definition
4200 REM "process definition for only FS2 record
4220 GOSUB 7000
4230 REM "write ECW record
4232 ECWKEY$=RESULT$(1,10)+"L"+STR(LINE_INDEX:"0")+RESULT$(11)
4234 IF C0=1 OR C0=99 THEN GOSUB 6700 ELSE GOSUB 6500
4240 GOTO 4500
4300 REM "process definition for all PO3 and associated FS2 records
4305 IF PO3_RECORD_COUNT=0 THEN GOTO 4500
4310 FOR P=1 TO PO3_RECORD_COUNT
4312 PO3$=PO3_LINE$[P]
4320 GOSUB 7000
4330 REM "write ECW record
4332 ECWKEY$=RESULT$(1,10)+"L"+STR(LINE_INDEX:"0")+RESULT$(11)
4334 IF C0=1 OR C0=99 THEN GOSUB 6700 ELSE GOSUB 6500
4360 NEXT P
4380 GOTO 4500
4700 NEXT LINE_INDEX
4800 REM "get next order line FS2
4820 GOTO 4050
5000 REM "process oskw records against OH$[] definitions
5002 REM "read in supporting records (PO3)
5010 DIM PO3$(1000); FIND (Z(3),KEY=A$(118,8)+BLANK$(1,5),DOM=5011)PO3$
5020 READ (Z(2),KEY=A$(118,8),DOM=5021); REM "position lines for start of order
5100 REM "get next HEADER definition
5120 FOR OSKW_HDR_INDEX=1 TO OSKW_HDR_DEF_COUNT
5200 REM "process ECV element entry
5210 RESULT$=""
5215 IF NUM(OH$[OSKW_HDR_INDEX,0])<1 THEN GOTO 5500; REM "** 
5220 FOR ELEMENT=1 TO NUM(OH$[OSKW_HDR_INDEX,0])
5300 REM "build strting based on definition
5302 TYPE$=OH$[OSKW_HDR_INDEX,ELEMENT](24,1),DPOSITION=NUM(OH$[OSKW_HDR_INDEX,ELEMENT](27,3)),LENGTH=NUM(OH$[OSKW_HDR_INDEX,ELEMENT](70,3)),TEXT$=OH$[OSKW_HDR_INDEX,ELEMENT](30,40),FILESOURCE$=OH$[OSKW_HDR_INDEX,ELEMENT](87,3),ECV$=OH$[OSKW_HDR_INDEX,ELEMENT]
5304 ON INT(POS(FILESOURCE$="FS1PO3",3)/3) GOTO 5305,5306
5305 RECORD$=A$; GOTO 5310; REM "set file source for FS1/FT3 (passed in)
5306 RECORD$=PO3$; GOTO 5310; REM "set file source for PO3
5316 ON POS(TYPE$="1T")-1 GOTO 5320,5332
5320 REM "data
5324 IF ECV$(73,1)="A" THEN GOTO 5340
5325 REM "S type
5326 IF POS("R"=ECV$(73,5))=0 THEN RESULT$=RESULT$+RECORD$(DPOSITION,LENGTH); GOTO 5352
5327 REM "reversed option set on S type
5328 IN_STRING$=RECORD$(DPOSITION,LENGTH); GOSUB 7500; RESULT$=RESULT$+REV_STRING$; GOTO 5352
5332 REM "text
5336 RESULT$=RESULT$+TEXT$(1,LENGTH); GOTO 5352
5340 REM "account type
5344 CALL "ZZDISP","AX",RECORD$(DPOSITION,LENGTH),STP(OH$[HDR_INDEX,ELEMENT](78,9),2),X3$,ZRESULT$,"",0,0,X4$
5348 RESULT$=RESULT$+ZRESULT$; GOTO 5400
5400 NEXT ELEMENT
5450 REM "write out ECW record
5460 ECWKEY$=RESULT$(1,10)+OSKW_HDR_SORT_TYPES$((OSKW_HDR_INDEX-1)*2+1,2)+RESULT$(11)
5470 IF C0=1 OR C0=99 THEN GOSUB 6700 ELSE GOSUB 6500
5480 NEXT OSKW_HDR_INDEX
5500 REM "process OSKW LINE records against OL$[] definitions
5510 IF OSKW_LINE_DEF_COUNT=0 THEN GOTO 5990
5520 READ (Z(2),KEY=A$(118,8),DOM=5521); REM "position lines for start of order
5530 DIM FS2(22)
5550 REM "get next order line (PO3/FS2)
5552 FS2KEY$=KEY(Z(2),END=5990); IF FS2KEY$(1,8)<>A$(118,8) THEN GOTO 5990 ELSE READ (Z(2),KEY=FS2KEY$)IOL=0320
5560 REM "load all PO3 lines associated with FS2 lines into PO3_LINE[]
5562 DIM PO3_LINE$[50]; PO3_COUNT=0
5563 DIM PO3_GENERAL$(1000); READ (Z(3),KEY=FS2KEY$(1,8)+BLANK$(1,5),DOM=5564)PO3_GENERAL$
5564 READ (Z[3],KEY=FS2$(1,8)+" "+FS2$(9,3),DOM=5565)
5566 PO3KEY$=KEY(Z[3],END=5580); IF PO3KEY$(1,12)<>FS2KEY$(1,8)+" "+FS2KEY$(9,3) THEN GOTO 5580 ELSE READ (Z[3],KEY=PO3KEY$)IOL=0330
5569 IF PO3$(11,1)="C" THEN PO3_COUNT=PO3_COUNT+1; PO3_LINE$[PO3_COUNT]=PO3$; REM "only process customer ship-to records
5570 GOTO 5565
5580 IF PO3_COUNT=0 AND PO3_GENERAL$<>DIM(1000) THEN PO3_COUNT=1,PO3_LINE$[PO3_COUNT]=PO3_GENERAL$; REM "if no special shipping records found then set general shipping record
5600 REM "get next LINE definition
5619 IF OSKW_LINE_DEF_COUNT=0 THEN GOTO 5901
5620 FOR OSKW_LINE_INDEX=1 TO OSKW_LINE_DEF_COUNT
5630 REM "get associated ECU record
5632 FIND (Z(5),KEY=OL$[OSKW_LINE_INDEX,1](11,10),DOM=5950)IOL=0350; REM "get ECU definition from first element entry
5640 SOURCE_FILES$=ECU$(61,6)+ECU$(355,24)
5642 IF POS("PO3"=SOURCE_FILES$,3)=0 THEN PROCESS_PO3$="N",PO3_RECORD_COUNT=0; GOTO 5700 ELSE PROCESS_PO3$="Y",PO3_RECORD_COUNT=PO3_COUNT; GOTO 5800; REM "only process shipping records if PO3 is a source file in the definition
5700 REM "process definition for only FS2 record
5720 GOSUB 7200
5730 REM "write ECW record
5732 ECWKEY$=RESULT$(1,10)+OSKW_LINE_SORT_TYPES$((OSKW_LINE_INDEX-1)*2+1,2)+RESULT$(11)
5734 IF C0=1 OR C0=99 THEN GOSUB 6700 ELSE GOSUB 6500
5800 REM "process definition for all PO3 and associated FS2 records
5805 IF PO3_RECORD_COUNT=0 THEN GOTO 6000
5810 FOR P=1 TO PO3_RECORD_COUNT
5812 PO3$=PO3_LINE$[P]
5820 GOSUB 7200
5830 REM "write ECW record
5832 ECWKEY$=RESULT$(1,10)+OSKW_LINE_SORT_TYPES$((OSKW_LINE_INDEX-1)*2+1,2)+RESULT$(11)
5834 IF C0=1 OR C0=99 THEN GOSUB 6700 ELSE GOSUB 6500
5860 NEXT P
5900 NEXT OSKW_LINE_INDEX
5920 REM "get next order line FS2
5950 GOTO 5550
6000 REM "process complete
6100 GOTO 9900
6500 REM "delete ECW records
6520 REMOVE (Z[1],KEY=ECWKEY$,DOM=6521)
6590 RETURN 
6700 REM "add ECW records
6710 ECWKEY$=UCS(ECWKEY$)
6720 WRITE (Z[1],KEY=ECWKEY$)
6790 RETURN 
7000 REM "process ECV element entry for FS2/PO3
7010 RESULT$=""
7020 FOR ELEMENT=1 TO NUM(L$[LINE_INDEX,0])
7030 REM "build string based on definition
7040 TYPE$=L$[LINE_INDEX,ELEMENT](24,1),DPOSITION=NUM(L$[LINE_INDEX,ELEMENT](27,3)),LENGTH=NUM(L$[LINE_INDEX,ELEMENT](70,3)),TEXT$=L$[LINE_INDEX,ELEMENT](30,40),FILESOURCE$=L$[LINE_INDEX,ELEMENT](87,3),ECV$=L$[LINE_INDEX,ELEMENT]
7050 ON INT(POS(FILESOURCE$="FS1PO3FS2",3)/3) GOTO 7060,7070,7072
7060 RECORD$=A$; GOTO 7080; REM "set file source for FS1/FT3 (passed in)
7070 RECORD$=PO3$; GOTO 7080; REM "set file source for PO3
7072 RECORD$=FS2$; GOTO 7080; REM "set file source for FS2
7080 ON POS(TYPE$="1T")-1 GOTO 7090,7120
7090 REM "data
7100 IF ECV$(73,1)="A" THEN GOTO 7140
7101 REM "S type
7102 IF POS("R"=ECV$(73,5))=0 THEN RESULT$=RESULT$+RECORD$(DPOSITION,LENGTH); GOTO 7164
7104 REM "Reverse string option set for S type
7105 IN_STRING$=RECORD$(DPOSITION,LENGTH); GOSUB 7500; RESULT$=RESULT$+REV_STRING$; GOTO 7164
7120 REM "text
7130 RESULT$=RESULT$+TEXT$(1,LENGTH); GOTO 7164
7140 REM "account type
7150 CALL "ZZDISP","AX",RECORD$(DPOSITION,LENGTH),STP(L$[LINE_INDEX,ELEMENT](78,9),2),X3$,ACCOUNT_RESULT$,"",0,0,X4$
7160 RESULT$=RESULT$+ACCOUNT_RESULT$; GOTO 7170
7170 NEXT ELEMENT
7190 RETURN 
7200 REM "process ECV element for OSKW FS2/PO3
7210 RESULT$=""
7220 FOR ELEMENT=1 TO NUM(OL$[OSKW_LINE_INDEX,0])
7230 REM "build string based on definition
7240 TYPE$=OL$[OSKW_LINE_INDEX,ELEMENT](24,1),DPOSITION=NUM(OL$[OSKW_LINE_INDEX,ELEMENT](27,3)),LENGTH=NUM(OL$[OSKW_LINE_INDEX,ELEMENT](70,3)),TEXT$=OL$[OSKW_LINE_INDEX,ELEMENT](30,40),FILESOURCE$=OL$[OSKW_LINE_INDEX,ELEMENT](87,3),ECV$=OL$[OSKW_LINE_INDEX,ELEMENT]
7250 ON INT(POS(FILESOURCE$="FS1PO3FS2",3)/3) GOTO 7260,7270,7272
7260 RECORD$=A$; GOTO 7280; REM "set file source for FS1/FT3 (passed in)
7270 RECORD$=PO3$; GOTO 7080; REM "set file source for PO3
7272 RECORD$=FS2$; GOTO 7280; REM "set file soruce for FS2
7280 ON POS(TYPE$="1T")-1 GOTO 7290,7320
7290 REM "data
7300 IF ECV$(73,1)="A" THEN GOTO 7340
7301 REM "s type
7302 IF POS("R"=ECV$(73,5))=0 THEN RESULT$=RESULT$+RECORD$(DPOSITION,LENGTH); GOTO 7364
7304 REM "reverse string option set for s type
7305 IN_STRING$=RECORD$(DPOSITION,LENGTH); GOSUB 7500; RESULT$=RESULT$+REV_STRING$; GOTO 7364
7320 REM "text
7330 RESULT$=RESULT$+TEXT$(1,LENGTH); GOTO 7364
7340 REM "account type
7350 CALL "ZZDISP","AX",RECORD$(DPOSITION,LENGTH),STP(OL$[OSKW_LINE_INDEX,ELEMENT](78,9),2),X3$,ACCOUNT_RESULT$,"",0,0,X4$
7360 RESULT$=RESULT$+ACCOUNT_RESULT$
7370 NEXT ELEMENT
7390 RETURN 
7500 REM "convert string to reverse
7502 REV_STRING$=""
7504 FOR RI=0 TO LEN(IN_STRING$)-1; REV_STRING$=REV_STRING$+FNA$(IN_STRING$(RI*1+1,1)); NEXT RI
7510 RETURN 
8950 DEF FNS$(Z9$)=Z9$(1,POS("     "=Z9$+"     ")-1)
9000 REM "ERROR PROCESSING
9001 REM "PRINT ERR," ",TCB(5),; ESCAPE
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9900 REM "END PROGRAM
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
10000 ESCAPE 
