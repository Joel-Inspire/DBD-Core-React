0010 REM "Retrieval of lotted invnetory information <EC3IC1>
0020 SETESC 9300; SETERR 9000
0035 REM "5.2 - 12/02/03 - 11.215555 - dmm - SSP# 164844
0040 REM "Copyright 2003 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 REM "
0052 REM "ITEM_KEY$ = (1,10)=customer  (11,10)=item
0053 REM "WHSE_LIST$ = string of warehouses to evaluate
0054 REM "quantity needed = looking for this quantity (if negative passed in then program will return information on all lot records for the item in the warehouse)
0056 REM "quanitity needed*  if returned with positive quantity then this means that requested warehouse did not have adequate stock - program returns next_index to show next available  ICF_INFO$[X] index position
0057 REM "quantity_needed*  - See options$(1,11) - if set then will report all lot records with matching order number
0058 REM "CARTON_PACK = qty per ordering unit (needed for "A" auto lot selection method)
0060 REM "ICF_INFO$[X] = index (see dim statement below for index documentation)
0062 REM "NEXT_INDEX = returns next index available in ICF_INFO$[X]  array
0068 REM "(OPTIONS$)
0070 REM "OPTIONS$(1,8) = order number committed to (if blank then report based on requeted quantity needed - if NOT BLANK then only report lot records containing this order number
0081 VERSION$="52.0000.154728.164844.20031202",PROGRAM$=PGN; DIM BYBINFO$[5]; BYBINFO$[1]=PROGRAM$,BYBINFO$[2]=VERSION$,BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$="" ! SSP#146994
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},ITEM_KEY$,WHSE_LIST$,UNITS_NEEDED,CARTON_PACK,ICF_INFO${ALL},NEXT_INDEX,OPTIONS$
0092 REM "PRINT 'CS',@(0,0),"UNITS/PACK: ",UNITS_NEEDED,CARTON_PACK; INPUT *
0100 SETERR 9000
0110 X0$="EC3IC1",X1$="Retrive lotted inventory information"
0300 REM "IOLISTS
0310 IOLIST ICF$,ICF[0],ICF[1],ICF[2],ICF[3],ICF[4],ICF[5],ICF[6],ICF[7],ICF[8],ICF[9],ICF[10],ICF[11],ICF[12]
0320 IOLIST B$
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01O ICF...  13O ZZPARM  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0600 REM "
0605 QUANTITY_NEEDED=UNITS_NEEDED; REM "ssp 154728 - not reporting committed product"
0606 REM "PRINT @(0,3),"QUANTITY NEEDED: ",QUANTITY_NEEDED; INPUT *
0610 DIM ICF_INFO$[100,10],ICF[12]; REM "index 1=ICF record  2=key to icf record  3=number of eaches needed for the associated lot record  4=number of primary unites needed  5=calculated ending number (only loaded if starting number is not blank 6=primary lot pack 7-10=unused
0620 OPTIONS$=PAD(OPTIONS$,20)
0630 NEXT_INDEX=1
0640 IF POS(EC$[15](52,1)="AB")=0 THEN SELECTION_METHOD$=EC$[15](70,1) ELSE SELECTION_METHOD$=EC$[15](52,1)
0700 REM "position file
0705 WHSE_INDEX=1
0710 READ (Z[1],KEY=ITEM_KEY$,DOM=0711)
1000 REM "Mainline
1010 WHILE WHSE_INDEX<=LEN(WHSE_LIST$)/4 AND QUANTITY_NEEDED<>0
1012 ACTIVE_WHSE$=WHSE_LIST$((WHSE_INDEX-1)*4+1,4),ACTIVE_ITEM_KEY$=ITEM_KEY$+ACTIVE_WHSE$
1014 READ (Z[1],KEY=ACTIVE_ITEM_KEY$,DOM=1015)
1020 IF QUANTITY_NEEDED=0 THEN GOTO 1500 ELSE ICF_KEY$=KEY(Z[1],END=1500); IF ICF_KEY$(1,LEN(ACTIVE_ITEM_KEY$))<>ACTIVE_ITEM_KEY$ THEN GOTO 1500
1022 READ (Z[1],KEY=ICF_KEY$)IOL=0310
1100 REM "get next quantity
1105 REM "PRINT @(0,5),'CE',ICF_KEY$," ",ICF[3],ICF[4],; INPUT *
1110 ICF_QTY=ICF[3]*ICF[4],ICF_PRIMARY_PACK=ICF[3]
1111 IF QUANTITY_NEEDED<0 THEN GOTO 1112 END_IF ; IF OPTIONS$(1,11)=DIM(11) AND ICF$(110,11)<>DIM(11) THEN GOTO 1020 ! SSP164844, check 11 instead of 8
1112 IF OPTIONS$(1,11)<>DIM(11) THEN IF ICF$(110,11)=OPTIONS$(1,11) THEN LOT_QTY_TAKEN_EACHES=ICF_QTY,LOT_UNITS_TAKEN=ICF[4]; GOTO 1160 ELSE GOTO 1020; REM "if requesting committed lot records then select based on matching order number SSP#161113.  SSP164844, match all 11
1113 IF QUANTITY_NEEDED<0 THEN LOT_QTY_TAKEN_EACHES=ICF_QTY; GOTO 1160; REM "if qty needed is negative then requestion reporting of all records
1115 ON POS(SELECTION_METHOD$="AB")-1 GOTO 1120,1150
1120 REM "matching case pack then oldest
1122 IF ICF[3]<>CARTON_PACK THEN GOTO 1020
1150 REM "select quantities
1151 IF ICF_QTY>QUANTITY_NEEDED THEN IF ICF_PRIMARY_PACK>=QUANTITY_NEEDED THEN LOT_QTY_TAKEN_EACHES=ICF_PRIMARY_PACK,QUANTITY_NEEDED=0,LOT_UNITS_TAKEN=1; GOTO 1153 ELSE LOT_UNITS_TAKEN=INT(QUANTITY_NEEDED/ICF_PRIMARY_PACK+.5),QUANTITY_NEEDED=0,LOT_QTY_TAKEN_EACHES=LOT_UNITS_TAKEN*ICF_PRIMARY_PACK; GOTO 1153
1152 IF ICF_QTY<=QUANTITY_NEEDED THEN QUANTITY_NEEDED=QUANTITY_NEEDED-ICF_QTY,LOT_QTY_TAKEN_EACHES=ICF_QTY,LOT_UNITS_TAKEN=ICF[4]; REM "if lot record satisfies quantity need then zero remainder
1160 ICF_INFO$[NEXT_INDEX,1]=ICF$,ICF_INFO$[NEXT_INDEX,2]=ICF_KEY$,ICF_INFO$[NEXT_INDEX,3]=STR(LOT_QTY_TAKEN_EACHES)
1162 ICF_INFO$[NEXT_INDEX,4]=STR(LOT_UNITS_TAKEN),ICF_INFO$[NEXT_INDEX,6]=STR(ICF_PRIMARY_PACK)
1164 IF ICF$(82,9)<>DIM(9) THEN CALC_ENDING_NUMBER=NUM(ICF$(82,9),ERR=1165)+LOT_QTY_TAKEN_EACHES-1,ICF_INFO$[NEXT_INDEX,5]=STR(CALC_ENDING_NUMBER)
1170 NEXT_INDEX=NEXT_INDEX+1
1300 GOTO 1020
1500 WHSE_INDEX=WHSE_INDEX+1
1600 WEND 
5000 REM "EOJ
5040 GOTO 9900
6000 REM "BACKGROUND
8950 DEF FNS$(Z9$)=Z9$(1,POS("     "=Z9$+"     ")-1)
9000 REM "ERROR PROCESSING
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9900 REM "END PROGRAM
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
