0010 REM "EC Order Status Report <EC3OSR>
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 08/27/14 - 12.096666 - crg - SSP# 272270
0037 REM "272270-Ability to display order status summary on the EC site after
0040 REM "Copyright 2014 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0100 SETERR 9000
0110 X0$="EC3OSR",X1$="E/C Order Status Report"
0120 EOL$=$0D0A$; EOL$=ATH(STP(EC_PARM$(57,8),1))
0130 NY$="NY"
0320 IOL_FS1:IOLIST FS1$,FS1{ALL}
0350 IOL_FS6:IOLIST FS6$,FS6{ALL}
0370 IOL_FT3:IOLIST FT3$,FT3{ALL}
0380 IOL_EDW:IOLIST EDW$,EDW{ALL}
0440 IOL_FT4:IOLIST FT4$,FT4{ALL}
0450 IOL_FS2:IOLIST FS2$,FS2{ALL}
0460 IOL_FM0:IOLIST FM0$
0480 IOL_SM4:IOLIST SM4$,SM4{ALL}
0485 IOL_PO3:IOLIST PO3$,PO3{ALL}
0490 IOL_UOM:IOLIST UM$,UM{ALL}
0495 IOL_FM1:IOLIST FM1$,FM1{ALL}
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))],FS6[7],BLANKS$(100),FT3[13]
0510 Z$="02O FS1... 03O FS4... 04O AR3... 05O FS6...  06O ECW...  07O FT3...  08O FS8... 09O ASC... 10O ECA... 11O PO3... 12O FT5... 13O ZZPARM 14O FT4... 15O FS2... 16O ECS... 17O ECU... 18O SM4... 19O FM0... 20O EDW...  21O FMP...  22O FM1...  23O EC9...  24O ECR...  25O EC7...  26O ECE...  27O EDV...  28OSFS2...  29OSFT4...  30O PO1...  31O FT8...  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0524 _ZFS1=Z[2],_ZFS4=Z[3],_ZAR3=Z[4],_ZFS6=Z[5],_ZECW=Z[6],_ZFT3=Z[7],_ZFS8=Z[8],_ZASC=Z[9],_ZECA=Z[10],_ZPO3=Z[11],_ZFT5=Z[12],_ZZP=Z[13],_ZFT4=Z[14],_ZFS2=Z[15],_ZECS=Z[16],_ZECU=Z[17],_ZSM4=Z[18],_ZFM0=Z[19],_ZEDW=Z[20],_ZFMP=Z[21],_ZFM1=Z[22],_ZEC9=Z[23],_ZECR=Z[24],_ZEC7=Z[25],_ZECE=Z[26],_ZEDV=Z[27],_Z2FS2=Z[28],_Z2FT4=Z[29],_ZPO1=Z[30],_ZFT8=Z[31]
0525 GOSUB SET_READONLY
0535 READ (_ZZP,KEY=X3$(9,3)+"A/R")ARPARM2$; READ (_ZZP,KEY=X3$(9,3)+"AR3",DOM=*NEXT)ARPARM3$
0540 DIM M6[1]; CALL "IC2PRE",X3$,_ZZP,M6$,M6{ALL},"",0,"",0
0550 REM 'GET E/C PARAMETERS
0560 READ (_ZZP,KEY=X3$(9,3)+"E/C",DOM=9900)ECPARMS$
0600 REM "Build search strings
0910 CALL "ZZDISP","AX",EC$[2](51,10),"A/R",X3$,CUST_CODE$,"",0,0,X4$
1000 REM "Process DATA array
1005 DATA_TAGS$="001<template>002<maxrows>003<position_order>004<direction>005<session_id>006<order_types>007<by_date>008<position_cust_po>009<order_sort>010<cust_loc_for_sort>011<order_position_key>012<ship_stat_msg_open>013<ship_stat_msg_partial>014<ship_stat_msg_shipped>015<edw_status_list>"
1006 MAX_ROWS=25,POSITION_ORDER$="",DIRECTION$="F",ORDER_TYPES_TO_REPORT$="",BY_DATE$="N"
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1018 DPOS=POS("<"+TAG$+">"=DATA_TAGS$); IF DPOS=0 THEN GOTO 1090 ELSE DINDEX=NUM(DATA_TAGS$(DPOS-3,3),ERR=1090)
1019 ON DINDEX GOTO 1090,1021,1022,1023,1024,1025,1026,1027,1028,1029,1090,1028,1032,1033,1034,1035,1090
1021 TEMPLATE$=VALUE$; GOTO 1090; REM "template
1022 MAX_ROWS=NUM(VALUE$,ERR=1090); GOTO 1090; REM "maxrows
1023 POSITION_ORDER$=VALUE$; GOTO 1090; REM "position_order
1024 IF VALUE$="backward" THEN DIRECTION$="B"; GOTO 1090; REM "direction, only set if it is 'backward'
1025 SESSION_ID$=VALUE$; GOTO 1090; REM "Get session id
1026 ORDER_TYPES_TO_REPORT$=VALUE$; GOTO 1090; REM 'ORDER TYPES TO FILTER STATUS DISPLAY
1027 IF VALUE$="Y" THEN BY_DATE$="Y"; GOTO 1090; REM "BY_DATE$, Y=use rev date sort
1028 ORDER_POSITION_KEY$=UCS(VALUE$); GOTO 1090; REM "Set ORDER_POSITION_KEY$ to start display of orders here
1029 ORDER_SORT$=VALUE$; GOTO 1090; REM "order_sort  (nothing use ASC  otherwise H1/H2/H3/L1/L2/L3)
1030 CUST_LOC_FOR_SORT$=VALUE$; GOTO 1090; REM "cust_loc_for_sort  (required if 'order_sort' being used
1032 SHIP_STAT_MSG_OPEN$=VALUE$; GOTO 1090 ! WO227326/227500, ship_stat_msg_open
1033 SHIP_STAT_MSG_PARTIAL$=VALUE$; GOTO 1090 ! WO227326/227500, ship_stat_msg_partial
1034 SHIP_STAT_MSG_SHIPPED$=VALUE$; GOTO 1090 ! WO227326/227500, ship_stat_msg_shipped
1035 EDW_STAT_LIST$=VALUE$; GOTO 1090 ! WO272270, edw_status_list
1090 NEXT I
1100 REM "Gather orders on this page
1101 VERSION$="51.3215.152549.156580.158066.159960.163279.181172.184190.184660.20050607",PROGRAM$=PGN; DIM BYBINFO$[5]; BYBINFO$[1]=PROGRAM$,BYBINFO$[2]=VERSION$,BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1102 IF ORDER_SORT$<>"" THEN GOTO 1105; REM "if already set then continue - otherwise try and retrieve from buyer settings
1103 IF STP(EC$[2](336,2),3," ")="" THEN ORDER_SORT$=EC_PARM$(431,2); GOTO 1105; REM "no ud order sort on buyers record then set from ec parameters
1104 ORDER_SORT$=EC$[2](336,2); IF ORDER_SORT$(1,1)="L" THEN CUST_LOC_FOR_SORT$=EC$[2](61,4); REM "get from buyer record and if Location based set location
1105 READ (_ZECS,KEY=EC$[2](51,10))ECS$; REM "read in customer parameters
1106 IF ORDER_POSITION_KEY$<>"" THEN ACTIVE_ORDER_SORT$=EC$[7](352,2) ELSE IF ORDER_SORT$<>"" THEN ACTIVE_ORDER_SORT$=ORDER_SORT$ ELSE ACTIVE_ORDER_SORT$=""
1109 IF NUM(EC_PARM$(433,3))<>0 OR MAX_ROWS=0 THEN MAX_ROWS=NUM(EC_PARM$(433,3))
1110 IF STP(ACTIVE_ORDER_SORT$,2)<>"" THEN GOSUB 3400 ELSE GOSUB 3800; REM "if order sort (H1/H2/H3/L1/L2/L3) is specified then run of user defined order sort file ECW - otherwise run off ASC  (but why would you want to ??)
1500 REM "Use template$ to open file, read line by line and insert
1501 IF %BASIC2$<>"" THEN GOTO 1995; REM "156580
1505 CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1506 REM "Setup line_tags$
1507 LINE_TAGS$="001<cust_code>002<cust_name>003<ec_company>004<entrystart>005<buttonnext>006<buttonprev>007<session_id>008<buyer_id>009<buyer_name>010<date>011<time>012<H1_sort_link>013<H2_sort_link>014<H3_sort_link>015<L1_sort_link>016<L2_sort_link>017<L3_sort_link>018<active_order_sort>"
1510 READ (100,END=1595)LINE$; GOSUB 7550
1515 INDEX=POS("?tf?"=LINE$); IF INDEX=0 THEN PRINT (OUTPUT)LINE$,EOL$,; GOTO 1510
1520 END_INDEX=POS("?"=LINE$(INDEX+4)),TAG$=LINE$(INDEX+4,END_INDEX-1),LINE1$=LINE$(1,INDEX-1),LINE2$=LINE$(INDEX+END_INDEX+4),LPOS=POS("<"+TAG$+">"=LINE_TAGS$); IF LPOS=0 THEN LINDEX=0 ELSE LINDEX=NUM(LINE_TAGS$(LPOS-3,3))
1530 GOSUB 2000; GOTO 1515
1995 GOTO 9900
1999 REM "Get tag value & substitute
2000 ON LINDEX GOTO 2090,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2090
2001 LINE$=LINE1$+CUST_CODE$+LINE2$; GOTO 2095; REM "cust_code
2002 LINE$=LINE1$+STP(EC$[1](23,35),1)+LINE2$; GOTO 2095; REM "cust_name
2003 LINE$=LINE1$+STP(EC_PARM$(7,50),1)+LINE2$; GOTO 2095; REM "ec_company
2004 GOSUB 3200; LINE$=TABLE$; GOTO 2095; REM "entrystart
2005 GOSUB 3500; LINE$=BUTTON$; GOTO 2095; REM "buttonnext
2006 GOSUB 3600; LINE$=BUTTON$; GOTO 2095; REM "buttonprev
2007 LINE$=LINE1$+STP(EC$[1](1,7),1)+LINE2$; GOTO 2095; REM "session_id from EC$
2008 LINE$=LINE1$+STP(EC$[1](8,15),1)+LINE2$; GOTO 2095; REM "buyer_id
2009 LINE$=LINE1$+STP(EC$[2](16,35),1)+LINE2$; GOTO 2095; REM "buyer_name
2010 LINE$=LINE1$+EC$[4]+LINE2$; GOTO 2095; REM " date
2011 LINE$=LINE1$+EC$[5]+LINE2$; GOTO 2095; REM "time
2012 ORDER_SORT_TYPE$="H1"; GOSUB 4000; LINE$=LINE1$+SORT_LINK$+LINE2$; GOTO 2095; REM "order sort link for H1
2013 ORDER_SORT_TYPE$="H2"; GOSUB 4000; LINE$=LINE1$+SORT_LINK$+LINE2$; GOTO 2095; REM "order sort link for H2
2014 ORDER_SORT_TYPE$="H3"; GOSUB 4000; LINE$=LINE1$+SORT_LINK$+LINE2$; GOTO 2095; REM "order sort link for H3
2015 ORDER_SORT_TYPE$="L1"; GOSUB 4000; LINE$=LINE1$+SORT_LINK$+LINE2$; GOTO 2095; REM "order sort link for L1
2016 ORDER_SORT_TYPE$="L2"; GOSUB 4000; LINE$=LINE1$+SORT_LINK$+LINE2$; GOTO 2095; REM "order sort link for L2
2017 ORDER_SORT_TYPE$="L3"; GOSUB 4000; LINE$=LINE1$+SORT_LINK$+LINE2$; GOTO 2095; REM "order sort link for L3
2018 LINE$=LINE1$+ACTIVE_ORDER_SORT$+LINE2$; GOTO 2095; REM "active order sort (also see button sections)
2090 LINE$=LINE1$+"?"+LINE2$; GOTO 2095; REM "tag not found, replace with '?'
2095 RETURN 
3200 REM "Output entries, using ENTRY_TEMPLATE$ to pass information, create TABLE$ to output
3202 ENTRY_TAGS$="001<order_no>002<order_date>003<order_status>004<order_amount>005<order_cust_po>006<date_requested>007<deposit_ck_no>008<deposit_date>009<deposit_amount>010<csr_code>011<csr_abbr_name>012<sper_code>013<sper_abbr_name>014<GB_gold_rush>015<GB_sample_rebate>016<GB_no_overruns>017<GB_dist_samples>018<GB_sure_date>019<GB_imprint_color>020<order_key>021<session_id>022<ship_to_city>023<ship_to_state>024<ship_to_zip>025<order_type>026<ship_date>027<attention>028<ship_to_code>029<ship_to_company>030<edw_status>031<order_buyer_id>032<order_buyer_name>033<order_buyer_email>034<order_buyer_pa_email>035<order_buyer_csr_email>036<order_buyer_sls_email>037<linesstart>038<shipinfostart>039<shipheadingstart>040<addr_name>041<attention>042<addr_1>043<addr_2>044<addr_3>045<buyer_on_order>046<ordered_by>047<recv_dept>048<ship_via>049<mark_for>050<location_name>051<item_count>052<sell_price_total>053<buyer_on_order_name>054<lot_sell_price_total>055<cust_owned_lot_sell_price_total>056<order_total_value>057<3p_order_id>058<timestamp_order_date>059<location_desc>060<3p_sender_id>061<display_order>062<gslinestart>"
3204 ENTRY_TEMPLATE$=LINE$,TABLE$=""
3205 READ (100,END=3206)LINE$; GOSUB 7550; ENTRY_TEMPLATE$=ENTRY_TEMPLATE$+LINE$+EOL$; IF POS("?tf?entryend?"=LINE$)=0 THEN GOTO 3205
3209 REM "Now read order$, if B direction do it backwards
3210 IF DIRECTION$="B" THEN START_PT=TOTAL_RECORDS,END_PT=1,STEP_SIZE=-1 ELSE START_PT=1,END_PT=TOTAL_RECORDS,STEP_SIZE=1
3215 FOR ENTRY_INDEX=START_PT TO END_PT STEP STEP_SIZE
3220 DIM FS1$(350),FS1[13]; ORDER_FILE_SOURCE$="FS1"; FIND (_ZFS1,KEY=ORDER$[ENTRY_INDEX,0],DOM=3221)IOL=IOL_FS1; GOTO 3222
3221 FIND (_ZFT3,KEY=ORDER$[ENTRY_INDEX,0],DOM=3245)IOL=IOL_FS1; ORDER_FILE_SOURCE$="FT3"; REM 'TRY IN REPEAT ORDER FILES
3222 DIM CSR$(255); FIND (_ZAR3,KEY=FS1$(89,4),DOM=3223)CSR$
3223 DIM SPER$(255); FIND (_ZAR3,KEY=FS1$(93,4),DOM=3224)SPER$
3224 DIM LOC$(299); IF ORDER_FILE_SOURCE$="FS1" THEN LOC_CHAN=_ZPO3 ELSE LOC_CHAN=_ZFT5 END_IF ; FIND (LOC_CHAN,KEY=ORDER$[ENTRY_INDEX,0]+DIM(5),DOM=3225)LOC$
3225 ENTRY$=ENTRY_TEMPLATE$
3226 GOSUB GET_ORDER_BUYER ! 272270
3227 GOSUB 13200
3230 GOSUB 3300
3235 IF LEN(TABLE$)+LEN(ENTRY$)>62000 THEN PRINT (OUTPUT)TABLE$,EOL$,; TABLE$="" END_IF ; TABLE$=TABLE$+ENTRY$; REM "#134089
3245 NEXT ENTRY_INDEX
3295 RETURN 
3300 REM "Given FS1$, create row in table
3305 EINDEX=POS("?tf?"=ENTRY$); IF EINDEX=0 THEN GOTO 3395
3306 EEND_INDEX=POS("?"=ENTRY$(EINDEX+4)),ETAG$=ENTRY$(EINDEX+4,EEND_INDEX-1),ENTRY1$=ENTRY$(1,EINDEX-1),ENTRY2$=ENTRY$(EINDEX+EEND_INDEX+4),EPOS=POS("<"+ETAG$+">"=ENTRY_TAGS$); IF EPOS=0 THEN EINDEX=0 ELSE EINDEX=NUM(ENTRY_TAGS$(EPOS-3,3))
3310 ON EINDEX GOTO 3389,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3344,3345,3346,3347,3348,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3367,3368,3369,3370,3371,3372,3389
3311 CALL "ZZDISP","AX",FS1$(118,8),"O/P",X3$,ORDER_NO$,"",0,0,X4$; ENTRY$=ENTRY1$+ORDER_NO$+ENTRY2$; GOTO 3390; REM "order_no
3312 CALL "ZZDISP","DX",FS1$(16,6),"",X3$,DATE1$,"",0,0,X4$; ENTRY$=ENTRY1$+DATE1$+ENTRY2$; GOTO 3390; REM "order_date
3313 ORDER_STATUS$=ORDER$[ENTRY_INDEX,1]; ENTRY$=ENTRY1$+ORDER_STATUS$+ENTRY2$; GOTO 3390; REM "order_status
3314 ENTRY$=ENTRY1$+STR(FS1[6]:"-$###,###.00")+ENTRY2$; GOTO 3390; REM "order_amount
3315 ENTRY$=ENTRY1$+STP(FS1$(28,15),1)+ENTRY2$; GOTO 3390; REM "order_cust_po
3316 CALL "ZZDISP","DX",FS1$(55,6),"",X3$,DATE1$,"",0,0,X4$; ENTRY$=ENTRY1$+DATE1$+ENTRY2$; GOTO 3390; REM "date_requested
3317 ENTRY$=ENTRY1$+STP(FS1$(64,6),1)+ENTRY2$; GOTO 3390; REM "deposit_ck_no
3318 CALL "ZZDISP","DX",FS1$(70,6),"",X3$,DATE1$,"",0,0,X4$; ENTRY$=ENTRY1$+DATE1$+ENTRY2$; GOTO 3390; REM "deposit_date
3319 ENTRY$=ENTRY1$+STR(FS1[0]:"-$###,###.00")+ENTRY2$; GOTO 3390; REM "deposit_amount
3320 ENTRY$=ENTRY1$+STP(FS1$(89,4),1)+ENTRY2$; GOTO 3390; REM "csr_code
3321 ENTRY$=ENTRY1$+STP(CSR$(149,20),1)+ENTRY2$; GOTO 3390; REM "csr_abbr_name
3322 ENTRY$=ENTRY1$+STP(FS1$(93,4),1)+ENTRY2$; GOTO 3390; REM "sper_code
3323 ENTRY$=ENTRY1$+STP(SPER$(149,20),1)+ENTRY2$; GOTO 3390; REM "sper_abbr_name
3324 ENTRY$=ENTRY1$+NY$(POS(FS1$(195,1)="Y")+1,1)+ENTRY2$; GOTO 3390; REM "GB_gold_rush
3325 ENTRY$=ENTRY1$+NY$(POS(FS1$(197,1)="Y")+1,1)+ENTRY2$; GOTO 3390; REM "GB_sample_rebate
3326 ENTRY$=ENTRY1$+NY$(POS(FS1$(198,1)="Y")+1,1)+ENTRY2$; GOTO 3390; REM "GB_no_overruns
3327 ENTRY$=ENTRY1$+STP(FS1$(223,3),1)+ENTRY2$; GOTO 3390; REM "GB_dist_samples
3328 ENTRY$=ENTRY1$+NY$(POS(FS1$(226,1)="Y")+1,1)+ENTRY2$; GOTO 3390; REM "GB_sure_date
3329 ENTRY$=ENTRY1$+STP(FS1$(203,20),1)+ENTRY2$; GOTO 3390; REM "GB_imprint_color
3330 ENTRY$=ENTRY1$+FS1$(118,8)+ENTRY2$; GOTO 3390; REM " order_key
3331 ENTRY$=ENTRY1$+STP(EC$[1](1,7),1)+ENTRY2$; GOTO 3390; REM " session_id from EC$
3332 ENTRY$=ENTRY1$+STP(LOC$(106,16),1)+ENTRY2$; GOTO 3390; REM "ship_to_city
3333 ENTRY$=ENTRY1$+STP(LOC$(122,2),1)+ENTRY2$; GOTO 3390; REM "ship_to_state
3334 CALL "ZZDISP","AX",LOC$(124,9),"ZIP",X3$,ZIP$,"",0,0,X4$; ENTRY$=ENTRY1$+ZIP$+ENTRY2$; GOTO 3390; REM "ship_to_zip
3335 GOSUB 7600; ENTRY$=ENTRY1$+ORDER_TYPE$+ENTRY2$; GOTO 3390; REM "order_type
3336 ENTRY$=ENTRY1$+ORDER$[ENTRY_INDEX,3]+ENTRY2$; GOTO 3390; REM "ship_date (from sm4 file) 158066
3337 ENTRY$=ENTRY1$+STP(LOC$(16,30),1)+ENTRY2$; GOTO 3390 ! WO181172, attention
3338 ENTRY$=ENTRY1$+STP(LOC$(12,4),1)+ENTRY2$; GOTO 3390 ! WO184190, ship_to_code
3339 ENTRY$=ENTRY1$+STP(LOC$(225,35),1)+ENTRY2$; GOTO 3390 ! WO184660, ship_to_company
3340 GOSUB GET_EDW_STATUS; ENTRY$=ENTRY1$+STP(EDW_STATUS$)+ENTRY2$; GOTO 3390 ! WO272270, edw_status
3341 ENTRY$=ENTRY1$+STP(ECA$(1,15),1)+ENTRY2$; GOTO 3390 ! WO272270, order_buyer_id
3342 ENTRY$=ENTRY1$+STP(ECA$(16,35),1)+ENTRY2$; GOTO 3390 ! WO272270, order_buyer_name
3343 ENTRY$=ENTRY1$+STP(ECA$(109,60),1)+ENTRY2$; GOTO 3390 ! WO272270, order_buyer_email
3344 ENTRY$=ENTRY1$+STP(ECA$(169,60),1)+ENTRY2$; GOTO 3390 ! WO272270, order_buyer_pa_email
3345 ENTRY$=ENTRY1$+STP(ECA$(340,60),1)+ENTRY2$; GOTO 3390 ! WO272270, order_buyer_csr_email
3346 ENTRY$=ENTRY1$+STP(ECA$(400,60),1)+ENTRY2$; GOTO 3390 ! WO272270, order_buyer_sls_email
3347 GOSUB 13500; ENTRY$=ENTRY1$+LINES_SECTION$+ENTRY2$; GOTO 3390; REM "linesstart  add lines section
3348 GOSUB 13600; ENTRY$=ENTRY1$+SHIPINFO_SECTION$+ENTRY2$; GOTO 3390; REM "shipinfostart - add shipinfo section
3349 GOSUB 13700; REM "shipheadingstart (get tracking info heading - placed only if tracking info found in 13600)
3350 ENTRY$=ENTRY1$+FN%HTML_ESC$(STP(PO3$(225,35),2))+ENTRY2$; GOTO 3390; REM "addr_name
3351 ENTRY$=ENTRY1$+FN%HTML_ESC$(STP(PO3$(16,30),2))+ENTRY2$; GOTO 3390; REM "attention
3352 ENTRY$=ENTRY1$+FN%HTML_ESC$(ADDR$[1])+ENTRY2$; GOTO 3390; REM "addr_1
3353 ENTRY$=ENTRY1$+FN%HTML_ESC$(ADDR$[2])+ENTRY2$; GOTO 3390; REM "addr_2
3354 ENTRY$=ENTRY1$+FN%HTML_ESC$(ADDR$[3])+ENTRY2$; GOTO 3390; REM "addr_3
3355 ENTRY$=ENTRY1$+FN%HTML_ESC$(STP(FS1$(250,15),3," "))+ENTRY2$; GOTO 3390; REM "buyer_on_order 1159208
3356 ENTRY$=ENTRY1$+FN%HTML_ESC$(STP(FS1$(129,20),3," "))+ENTRY2$; GOTO 3390; REM "ordered_by; REM "1159208
3357 ENTRY$=ENTRY1$+FN%HTML_ESC$(STP(FM0$(382,20),1))+ENTRY2$; GOTO 3390 ! WO1168683, recv_dept
3358 ENTRY$=ENTRY1$+FN%HTML_ESC$(STP(PO3$(210,15),1))+ENTRY2$; GOTO 3390 ! WO1168683, ship_via
3359 ENTRY$=ENTRY1$+FN%HTML_ESC$(STP(PO3$(175,35),1))+ENTRY2$; GOTO 3390 ! WO1168683, mark_for
3360 IF STP(FM0$(248,35),3," ")="" THEN ENTRY$=ENTRY1$+FN%HTML_ESC$(STP(FM0$(16,35),1))+ENTRY2$ ELSE ENTRY$=ENTRY1$+FN%HTML_ESC$(STP(FM0$(248,35),1))+ENTRY2$ END_IF ; GOTO 3390 ! WO1168683, location_name
3361 ENTRY$=ENTRY1$+FN%HTML_ESC$(STP(STR(ITEM_COUNT:"##0"),1))+ENTRY2$; GOTO 3390 ! WO1168683, item_count
3362 IF EC$[2](322,1)="Y" THEN ENTRY$=ENTRY1$+ENTRY2$; GOTO 3390 ELSE ENTRY$=ENTRY1$+FN%HTML_ESC$(STR(SELL_PRICE_TOTAL:"$###,###.00"))+ENTRY2$; GOTO 3390 ! WO1168683, sell_price_total. SSP1173363, don't show price if says so for buyer
3363 GOSUB 14650; ENTRY$=ENTRY1$+FN%HTML_ESC$(STP(ECA$(16,35),2))+ENTRY2$; GOTO 3390 ! SSP1173133, buyer_on_order_name
3364 IF EC$[2](322,1)="Y" THEN ENTRY$=ENTRY1$+ENTRY2$; GOTO 3390 ELSE ENTRY$=ENTRY1$+FN%HTML_ESC$(STR(%LOT_SELL_PRICE_TOTAL:"###,###.00"))+ENTRY2$; GOTO 3390 ! WO1173708, gets accumulated in EC3IC2. SSP1175796, check buyer don't show price parm 
3365 IF EC$[2](322,1)="Y" THEN ENTRY$=ENTRY1$+ENTRY2$; GOTO 3390 ELSE ENTRY$=ENTRY1$+FN%HTML_ESC$(STR(%CUST_OWNED_LOT_SELL_PRICE_TOTAL:"###,###.00"))+ENTRY2$; GOTO 3390 ! WO1175385, gets accumulated in EC3IC2.  SSP1175796, check buyer don't show price parm    
3366 IF EC$[2](322,1)="Y" THEN ENTRY$=ENTRY1$+ENTRY2$; GOTO 3390 ELSE ENTRY$=ENTRY1$+FN%HTML_ESC$(STR(SELL_PRICE_TOTAL+%CUST_OWNED_LOT_SELL_PRICE_TOTAL:"###,###.00"))+ENTRY2$; GOTO 3390 ! WO1176121, order_total_value     
3367 ENTRY$=ENTRY1$+FN%HTML_ESC$(ORDER_ID_3P$)+ENTRY2$; GOTO 3390 ! WO1233389, 3p_order_id
3368 TS_OD$="null"; TS_OD$=DTE(FN%GET_DATETIME(FS1$(16,6),.10001),*:"%Y-%Mz-%DzT%Hz:%mz:%sz")+STR((TCB(44)/13600+TCB(45))*-100:"+00:00"); ENTRY$=ENTRY1$+FN%HTML_ESC$(TS_OD$)+ENTRY2$; GOTO 3390 ! WO1233389, timestamp_order_date
3369 IF STP(FM0$(16,35),3," ")="" THEN ENTRY$=ENTRY1$+FN%HTML_ESC$(STP(FM0$(248,35),1))+ENTRY2$ ELSE ENTRY$=ENTRY1$+FN%HTML_ESC$(STP(FM0$(16,35),1))+ENTRY2$ END_IF ; GOTO 3390 ! 1254077, location_desc
3370 ENTRY$=ENTRY1$+FN%HTML_ESC$(SENDER_ID_3P$)+ENTRY2$; GOTO 3390 ! 3p_sender_id, SSP1234945
3371 ENTRY$=ENTRY1$+DISPLAY_ORDER$+ENTRY2$; GOTO 3390 ! display_order
3372 GOSUB 14050; ENTRY$=ENTRY1$+GENERAL_SHIP_SECTION$+ENTRY2$; GOTO 3390 ! gslinestart
3389 ENTRY$=ENTRY1$+"?"+ENTRY2$; GOTO 3390; REM "tag not found, replace with '?'
3390 GOTO 3305
3395 RETURN 
3400 REM "build order status screen using ECW (user defined order sort)
3401 REM "fill order$[] with orders, using position_order$ and direction$, if direction$='B'(ackwards) then 1->total_records is in reverse order, so read it later as total_records-> 1
3403 GOSUB 3450
3404 REM "PRINT VERY_FIRST_ORDER$," ",VERY_LAST_ORDER$; ESCAPE ; REM "IF ORDER POSITION KEY PASSED IN THEN USE THE IDENTIFIED PO SORT ON THE CUSTOMER PARAMETERS AS THE SORT
3405 IF POSITION_ORDER$="" AND DIRECTION$="B" THEN IF ORDER_POSITION_KEY$="" THEN POSITION_ORDER$=SORTKEY_HI$+$FFFFFFFFFFFF$ ELSE POSITION_ORDER$=EC$[2](51,10)+EC$[7](352,2)+ORDER_POSITION_KEY$; REM "if in backwards order, start at end of file
3406 IF POSITION_ORDER$="" AND DIRECTION$="F" THEN IF ORDER_POSITION_KEY$="" THEN POSITION_ORDER$=SORTKEY_HI$ ELSE POSITION_ORDER$=EC$[2](51,10)+EC$[7](352,2)+ORDER_POSITION_KEY$; REM "if forward, start at beginning of file unless direct customer po access requested with order position key
3410 ORDER_LIST$="",FIRST_ORDER$="",LAST_ORDER$="",TOTAL_RECORDS=0,INDEX=1; DIM ORDER$[MAX_ROWS,3]; REM "141008 / 158066
3415 READ (_ZECW,KEY=POSITION_ORDER$,DOM=3416) ! SSP240529, changed EXTRACT to READ, was causing the position_order to show up on the next/previous page, should just position to that order then get the next one or previous one, at line 3420 with the KEY or KEP, depending on direction
3420 IF DIRECTION$="B" THEN ECWKEY$=KEP(_ZECW,END=3435) ELSE ECWKEY$=KEY(_ZECW,END=3435)
3421 IF ECWKEY$(1,LEN(SORTKEY_HI$))<>POSITION_ORDER$(1,LEN(SORTKEY_HI$)) THEN GOTO 3435 ELSE READ (_ZECW,KEY=ECWKEY$,DOM=3420); ONUMB$=ECWKEY$(LEN(ECWKEY$)-7,8); IF ONUMB$=ORDER_CK$ THEN GOTO 3420; REM "if end of customer leave, else if same order, skip it
3422 GOSUB CHECK_ORDER; IF REPORT$="N" THEN GOTO 3420; REM "skip iforder does not meet reporting requirements
3423 ORDER_CK$=ECWKEY$(LEN(ECWKEY$)-7,8); GOSUB 3700; REM "get order status for current order in ONUMB$
3425 GOSUB CHECK_OSTATUS_MSG; ORDER$[INDEX,0]=ONUMB$,ORDER$[INDEX,1]=OSTATUS$,ORDER$[INDEX,2]=ECWKEY$,ORDER$[INDEX,3]=STP(SM4_SHIP_DATE$,3," "),TOTAL_RECORDS=TOTAL_RECORDS+1,INDEX=INDEX+1; IF MAX_ROWS<>0 AND TOTAL_RECORDS>=MAX_ROWS THEN GOTO 3435; REM "skip to correct place to exit / 158066. WO227326/227500, check ship stat msg for override
3430 GOTO 3420
3440 IF DIRECTION$="B" THEN FIRST_ORDER$=ORDER$[TOTAL_RECORDS,2],LAST_ORDER$=ORDER$[1,2] ELSE FIRST_ORDER$=ORDER$[1,2],LAST_ORDER$=ORDER$[TOTAL_RECORDS,2]
3445 RETURN 
3450 REM "Set VERY_FIRST_ORDER$ and VERY_LAST_ORDER$. These will be used to determine when to NOT show prev and next buttons
3451 VERY_FIRST_ORDER$="",VERY_LAST_ORDER$=""
3453 ON INT(POS(ACTIVE_ORDER_SORT$="H1H2H3L1L2L3",2)/2) GOTO 3454,3454,3454,3457,3457,3457
3454 SORTKEY_HI$=EC$[2](51,10)+ACTIVE_ORDER_SORT$; GOTO 3460; REM "header based sort
3457 IF CUST_LOC_FOR_SORT$<>"" THEN SORTKEY_HI$=EC$[2](51,10)+ACTIVE_ORDER_SORT$+CUST_LOC_FOR_SORT$; GOTO 3460 ELSE SORTKEY_HI$=EC$[2](51,10)+ACTIVE_ORDER_SORT$; GOTO 3460; REM "line based sort (requires location code)
3460 READ (_ZECW,KEY=SORTKEY_HI$,DOM=3461)
3465 VK$=KEY(_ZECW,END=3467); READ (_ZECW); IF VK$(1,LEN(SORTKEY_HI$))=SORTKEY_HI$ THEN ONUMB$=VK$(LEN(VK$)-7,8); GOSUB CHECK_ORDER; GOTO 3466 ELSE GOTO 3470
3466 IF REPORT$="Y" THEN VERY_FIRST_ORDER$=VK$; GOTO 3470 ELSE GOTO 3465
3470 READ (_ZECW,KEY=SORTKEY_HI$+$FF$,DOM=3471)
3471 VK$=KEP(_ZECW,END=3473); READ (_ZECW,KEY=VK$,END=3473); IF VK$(1,LEN(SORTKEY_HI$))=SORTKEY_HI$ THEN ONUMB$=VK$(LEN(VK$)-7,8); GOSUB CHECK_ORDER; GOTO 3472 ELSE GOTO 3474
3472 IF REPORT$="Y" THEN VERY_LAST_ORDER$=VK$; GOTO 3474 ELSE GOTO 3471
3495 RETURN 
3500 REM "Output next button, using BUTTON_NEXT_TEMPLATE$ to pass information, creating BUTTON$, if needed
3502 BUTTON$="",BUTTON_NEXT_TAGS$="001<position_order>002<session_id>003<active_order_sort>"
3503 REM "Setup BUTTON_NEXT_TEMPLATE$
3505 READ (100,END=3506)LINE$; GOSUB 7550; BUTTON_NEXT_TEMPLATE$=BUTTON_NEXT_TEMPLATE$+LINE$+EOL$; IF POS("?tf?buttonnextend?"=LINE$)=0 THEN GOTO 3505
3510 IF LAST_ORDER$=VERY_LAST_ORDER$ THEN BUTTON$=""; GOTO 3595 ELSE BUTTON$=BUTTON_NEXT_TEMPLATE$
3515 BNINDEX=POS("?tf?"=BUTTON$); IF BNINDEX=0 THEN GOTO 3591
3516 BNEND_INDEX=POS("?"=BUTTON$(BNINDEX+4)),BNTAG$=BUTTON$(BNINDEX+4,BNEND_INDEX-1),BUTTON1$=BUTTON$(1,BNINDEX-1),BUTTON2$=BUTTON$(BNINDEX+BNEND_INDEX+4),BNPOS=POS("<"+BNTAG$+">"=BUTTON_NEXT_TAGS$); IF BNPOS=0 THEN BUTTON$=BUTTON1$+BUTTON2$,BNINDEX=0 ELSE BNINDEX=NUM(BUTTON_NEXT_TAGS$(BNPOS-3,3))
3520 ON BNINDEX GOTO 3590,3521,3522,3523,3590
3521 BUTTON$=BUTTON1$+LAST_ORDER$+BUTTON2$; GOTO 3590; REM "position_order
3522 BUTTON$=BUTTON1$+EC$[1](1,7)+BUTTON2$; GOTO 3590; REM "session_id from EC$
3523 BUTTON$=BUTTON1$+ACTIVE_ORDER_SORT$+BUTTON2$; GOTO 3590; REM "acvtive order sort
3590 GOTO 3515
3595 RETURN 
3600 REM "Output previous button, using BUTTON_PREV_TEMPLATE$ to pass information, creating BUTTON$, if needed
3602 BUTTON$="",BUTTON_PREV_TAGS$="001<position_order>002<session_id>003<active_order_sort>"
3605 READ (100,END=3606)LINE$; GOSUB 7550; BUTTON_PREV_TEMPLATE$=BUTTON_PREV_TEMPLATE$+LINE$+EOL$; IF POS("?tf?buttonprevend?"=LINE$)=0 THEN GOTO 3605
3610 IF FIRST_ORDER$=VERY_FIRST_ORDER$ THEN BUTTON$=""; GOTO 3695 ELSE BUTTON$=BUTTON_PREV_TEMPLATE$
3615 BNINDEX=POS("?tf?"=BUTTON$); IF BNINDEX=0 THEN GOTO 3691
3616 BNEND_INDEX=POS("?"=BUTTON$(BNINDEX+4)),BNTAG$=BUTTON$(BNINDEX+4,BNEND_INDEX-1),BUTTON1$=BUTTON$(1,BNINDEX-1),BUTTON2$=BUTTON$(BNINDEX+BNEND_INDEX+4),BNPOS=POS("<"+BNTAG$+">"=BUTTON_PREV_TAGS$); IF BNPOS=0 THEN BUTTON$=BUTTON1$+BUTTON2$,BNINDEX=0 ELSE BNINDEX=NUM(BUTTON_PREV_TAGS$(BNPOS-3,3))
3620 ON BNINDEX GOTO 3690,3621,3622,3623,3690
3621 BUTTON$=BUTTON1$+FIRST_ORDER$+BUTTON2$; GOTO 3690; REM "position_order
3622 BUTTON$=BUTTON1$+EC$[1](1,7)+BUTTON2$; GOTO 3690; REM "session_id
3623 BUTTON$=BUTTON1$+ACTIVE_ORDER_SORT$+BUTTON2$; GOTO 3690; REM "active order sort
3690 GOTO 3615
3695 RETURN 
3700 REM "Determine Order Status For Current Order (using order status sorts)
3702 SHIP_STATUS$="",PARTIAL_SHIPPED$="N",FS2_LINE_COUNT=0,FT4_LINE_COUNT=0; DIM FS1_ORDER$[1000],FT3_ORDER$[1000],FS2[29],FT4[29]
3703 IF ORDER_FILE_SOURCE$="FS1" THEN ORDER_CHAN=_ZFS1 ELSE ORDER_CHAN=_ZFT3
3710 REM "Read FS1 order into array
3711 READ RECORD (_ZFS1,KEY=ONUMB$,DOM=3715)FS1$; FS1_ORDER$[0]=FS1$
3712 READ (_ZFS2,KEY=ONUMB$,DOM=3713)
3713 FS2_KEY$=KEY(_ZFS2,END=3715); IF FS2_KEY$(1,LEN(ONUMB$))<>ONUMB$ THEN GOTO 3715 ELSE READ (_ZFS2,KEY=FS2_KEY$)IOL=IOL_FS2; FS2_LINE_COUNT=FS2_LINE_COUNT+1; FS1_ORDER$[FS2_LINE_COUNT+1]=FS2_KEY$; IF FS2[16]<>0 THEN PARTIAL_SHIPPED$="Y" END_IF ; GOTO 3713
3715 FS1_ORDER$[1]=STR(FS2_LINE_COUNT); REM "set number of lines on order
3720 REM "Read FT3 order into array
3721 READ RECORD (_ZFT3,KEY=ONUMB$,DOM=3725)FT3$; FT3_ORDER$[0]=FT3$
3722 READ (_ZFT4,KEY=ONUMB$,DOM=3723)
3723 FT4_KEY$=KEY(_ZFT4,END=3725); IF FT4_KEY$(1,LEN(ONUMB$))<>ONUMB$ THEN GOTO 3725 ELSE READ (_ZFT4,KEY=FT4_KEY$)IOL=IOL_FT4; FT4_LINE_COUNT=FT4_LINE_COUNT+1; FT3_ORDER$[FT4_LINE_COUNT+1]=FT4_KEY$; GOTO 3723
3725 FT3_ORDER$[1]=STR(FT4_LINE_COUNT); REM "set line count for archived order
3730 REM "determine status on line comparison
3731 REM "Shipped = FS1 line count = zero
3732 REM "parially shipped = FS1 line count less than FT4 line count
3735 IF FS2_LINE_COUNT=0 THEN OSTATUS$="Shipped"; GOTO 3751; REM "158066
3736 IF FS2_LINE_COUNT<FT4_LINE_COUNT THEN OSTATUS$="Partially Shipped"; GOTO 3790
3740 REM "determine if any part of a line is shipped from the open order
3741 IF PARTIAL_SHIPPED$="Y" THEN OSTATUS$="Partially Shipped" ELSE OSTATUS$="Open"
3750 REM "if order considered open based on order check - ck to see if SM4 information on file
3751 REM "IF OSTATUS$<>"Open" THEN GOTO 3760 - 158066
3752 SM4_RECORD_COUNT=0,SHIP_DATE$="",SM4_SHIP_DATE$=""; READ (_ZSM4,KEY=ONUMB$,DOM=3753); REM "158066"
3753 SM4KEY$=KEY(_ZSM4,END=3760); IF SM4KEY$(1,LEN(ONUMB$))<>ONUMB$ THEN GOTO 3760 END_IF ; IF OSTATUS$="Open" THEN OSTATUS$="Shipped"; REM "at least one shipping record found; REM "158066
3754 SM4_RECORD_COUNT=SM4_RECORD_COUNT+1; IF SM4_RECORD_COUNT>1 THEN SHIP_DATE$="Multiple",SM4_SHIP_DATE$=SHIP_DATE$; GOTO 3760; REM "158066
3755 DIM SM4$(500),SM4(12); READ (_ZSM4,KEY=SM4KEY$)IOL=IOL_SM4; SHIP_DATE$=SM4$(15,6); GOTO 3753; REM "158066
3760 IF STP(SHIP_DATE$,3," ")="" OR SHIP_DATE$="Multiple" THEN GOTO 3761 END_IF ; CALL "ZZDISP","DX",SHIP_DATE$,"",X3$,SM4_SHIP_DATE$,"",0,0,X4$; REM "convert ship date unless not set 158066
3795 RETURN 
3800 REM "build order status screen using ORDER HISTORY BY CUSTOMER PO (ASC)"
3801 REM "fill order$[] with orders, using position_order$ and direction$, if direction$='B'(ackwards) then 1->total_records is in reverse order, so read it later as total_records-> 1
3803 GOSUB 3850
3804 REST_OF_KEY$=""; IF POSITION_ORDER$<>"" THEN GOSUB 8050 ELSE IF ORDER_POSITION_KEY$<>"" THEN ORDER_POSITION_KEY$=PAD(ORDER_POSITION_KEY$,15) ELSE ORDER_POSITION_KEY$=DIM(15); REM "If given order number use it to position, else if given cust_Po use it, else start at the beginnning
3805 IF POSITION_ORDER$="" AND DIRECTION$="B" THEN REST_OF_KEY$=$FF$; REM "if in backwards order, start at end of file
3810 ORDER_LIST$="",FIRST_ORDER$="",LAST_ORDER$="",TOTAL_RECORDS=0,INDEX=1,ORDER_CK$=""; DIM ORDER$[100,3]; REM "141008 / 158066
3815 EXTRACT (_ZASC,KEY=EC$[2](51,10)+ORDER_POSITION_KEY$+REST_OF_KEY$,DOM=3816)
3820 IF DIRECTION$="B" THEN KEY_9$=KEP(_ZASC,END=3835) ELSE KEY_9$=KEY(_ZASC,END=3835)
3821 IF KEY_9$(1,10)<>EC$[2](51,10) THEN GOTO 3835 ELSE READ (_ZASC,KEY=KEY_9$,DOM=3820); IF KEY_9$(37,8)=ORDER_CK$ THEN GOTO 3820; REM "if end of customer leave, else if same order, skip it
3823 ONUMB$=KEY_9$(37,8); GOSUB CHECK_ORDER; IF REPORT$="N" THEN GOTO 3820; REM "skip if order does not meet reporting criteria
3824 ORDER_CK$=KEY_9$(37,8),ORDER_KEY$=""; GOSUB 3900; REM 'GET ORDER STATUS AND READ ALL LINES FOR THIS ORDER
3825 GOSUB CHECK_OSTATUS_MSG; ORDER$[INDEX,0]=ORDER_CK$,ORDER$[INDEX,1]=OSTATUS$,ORDER$[INDEX,2]=ORDER_CK$,TOTAL_RECORDS=TOTAL_RECORDS+1,INDEX=INDEX+1; IF MAX_ROWS<>0 AND TOTAL_RECORDS>=MAX_ROWS THEN GOTO 3835; REM "skip to correct place to exit. WO227326/227500, check ship stat msg for override
3830 GOTO 3820
3840 IF DIRECTION$="B" THEN FIRST_ORDER$=ORDER$[TOTAL_RECORDS,2],LAST_ORDER$=ORDER$[1,2] ELSE FIRST_ORDER$=ORDER$[1,2],LAST_ORDER$=ORDER$[TOTAL_RECORDS,2]
3845 RETURN 
3850 REM "Set VERY_FIRST_ORDER$ and VERY_LAST_ORDER$. These will be used to determine when to NOT show prev and next buttons
3855 VERY_FIRST_ORDER$="",VERY_LAST_ORDER$=""
3860 READ (_ZASC,KEY=EC$[2](51,10),DOM=3861)
3865 VK$=KEY(_ZASC,END=3870); READ (_ZASC); IF VK$(1,10)=EC$[2](51,10) THEN ONUMB$=VK$(37,8); GOSUB CHECK_ORDER; GOTO 3866 ELSE GOTO 3870
3866 IF REPORT$="Y" THEN VERY_FIRST_ORDER$=ONUMB$ ELSE GOTO 3865
3870 READ (_ZASC,KEY=EC$[2](51,10)+$FF$,DOM=3871)
3871 VK$=KEP(_ZASC,END=3874); READ (_ZASC,KEY=VK$,END=3874); IF VK$(1,10)=EC$[2](51,10) THEN ONUMB$=VK$(37,8); GOSUB CHECK_ORDER; GOTO 3873 ELSE GOTO 3874
3873 IF REPORT$="Y" THEN VERY_LAST_ORDER$=ONUMB$ ELSE GOTO 3871
3895 RETURN 
3900 REM 'PROCESS ALL RECORDS FOR THE CURRENT ORDER# USING FS8
3901 REM ' AFTER PROCESSING ALL ORDER LINES - ORDER STATUS SET BASED ON OF ALL, SOME OR NONE OF THE LINES SHOW BILLING INFORMATION
3902 SHIP_STATUS$=""
3905 READ (_ZFS8,KEY=EC$[2](51,10)+ORDER_CK$,DOM=3906)
3910 KEY_8$=KEY(_ZFS8,END=3930)
3912 IF KEY_8$(1,10)<>EC$[2](51,10) OR KEY_8$(11,8)<>ORDER_CK$ THEN GOTO 3930
3913 READ (_ZFS8)
3914 READ (_ZFS6,KEY=KEY_8$(1,10)+KEY_8$(19,11)+KEY_8$(11,8)+KEY_8$(30,1),DOM=3910)IOL=IOL_FS6
3916 IF FS6$(40,8)=BLANKS$(1,8) THEN SHIPPED$=" " ELSE SHIPPED$="Y"
3918 SHIP_STATUS$=SHIP_STATUS$+SHIPPED$; GOTO 3910
3930 IF LEN(SHIP_STATUS$)=0 OR SHIP_STATUS$=BLANKS$(1,LEN(SHIP_STATUS$)) THEN OSTATUS$="Open"; GOTO 3940
3932 FOR SINDEX=1 TO LEN(SHIP_STATUS$)
3934 IF SHIP_STATUS$(SINDEX,1)=" " THEN OSTATUS$="Partial Shipped"; EXITTO 3940 ELSE NEXT SINDEX
3936 OSTATUS$="Shipped"
3945 RETURN 
4000 REM "build order sort links
4005 UD_SORT_CODE$=ECS$(172+10*INT(POS(ORDER_SORT_TYPE$="H1H2H3L1L2L3",2)/2),10)
4006 DIM UD_SORT_DESC$(40); FIND (_ZECU,KEY=UD_SORT_CODE$,DOM=4007)ECU$; UD_SORT_DESC$=ECU$(11,50)
4015 IF EC_PARM$(1177,1)="Y" THEN SID$=EC$[1](1,7) ELSE SID$=EC$[1](1213,64) ! SSP212160 jdf
4020 SORT_LINK$="<a href="+QUO+STP(EC$[14](316,60),2)+"?basic=EC3OS0&amp;session_id="+STP(SID$,1)+"&amp;template="+STP(EC_PARM$(561,35),1)+"&amp;order_sort="+ORDER_SORT_TYPE$+"&amp;maxrows="+EC_PARM$(433,3)+QUO+">"+STP(UD_SORT_DESC$,2)+"</a>" ! SSP212160 jdf
4045 RETURN 
7000 CHECK_ORDER:REM "get the order header record (tries repeat orders first then open)
7001 REM 'ONUMB$ = ORDER NUMBER PASSED IN
7002 REM "ORDER_TYPE$ = R/W/Sales Order
7003 REM "ORDER_DATE$ = order entry date    DATE_REQUESTED$ - requested ship date
7004 REM "ORDER_DAYS_OLD = number of days old based on oe date
7005 REM "REQUESTED_DAYS_OLD = number of days old based on requested ship date
7006 REM "REPORT$ Y/N - based on e/c parameters
7007 REM "ORDER_LIST$ = List of orders put into array, an order can be in ASC multiple times, we only want to show onece
7008 REM "OSOURCE = FS1/FT3 returned value based on where order was reported from
7009 REPORT$="Y",ORDER_FILE_SOURCE$="FS1"
7013 IF STP(ACTIVE_ORDER_SORT$,2)<>"" THEN GOTO 7016
7015 IF POS(ONUMB$=ORDER_LIST$,8)<>0 THEN REPORT$="N"; GOTO 7090 ELSE ORDER_LIST$=ORDER_LIST$+ONUMB$; REM "Note, this does not prevent is from showing on seperate pages
7018 DIM FS1[13]; FIND (_ZFT3,KEY=ONUMB$,DOM=7020)IOL=IOL_FS1; GOTO 7028
7020 FIND (_ZFS1,KEY=ONUMB$,DOM=7022)IOL=IOL_FS1; GOTO 7029
7022 REPORT$="N"; GOTO 7090; REM "order number not found
7028 ORDER_FILE_SOURCE$="FT3"
7030 ORDER_TYPE$=FS1$(47,1),ORDER_DATE$=FS1$(16,6),DATE_REQUESTED$=FS1$(55,6)
7031 IF ORDER_TYPE$=" " THEN ORDER_TYPE$="S"; REM "need to evaluate blank types as S based on buyer parms"
7032 IF ORDER_TYPES_TO_REPORT$>"" THEN IF POS(ORDER_TYPE$=ORDER_TYPES_TO_REPORT$)=0 THEN REPORT$="N"; GOTO 7090; REM "Check against order types requested by options if any were requested.
7033 CALL "EC3DAT",ERR=7034,X3$,11,"",ORDER_DATE$,ORDER_DAYS_OLD$; ORDER_DAYS_OLD=NUM(ORDER_DAYS_OLD$)
7034 IF STP(DATE_REQUESTED$,3," ")="" THEN REQUESTED_DAYS_OLD=0 ELSE CALL "EC3DAT",ERR=7035,X3$,11,"",DATE_REQUESTED$,REQUESTED_DAYS_OLD$; REQUESTED_DAYS_OLD=NUM(REQUESTED_DAYS_OLD$)
7050 REM 'COMPARE ON REPORTING PARAMETERS
7052 IF NUM(ECPARMS$(125,3))<>0 THEN IF (-1)*ORDER_DAYS_OLD>NUM(ECPARMS$(125,3)) THEN REPORT$="N"; GOTO 7090; REM "ck if order to be reported based on EC parameters for number of days back to report order status
7053 IF EC$[2](1090,1)="Y" THEN IF MID(FS1$,250,15)<>EC$[2](1,15) THEN REPORT$="N"; GOTO 7090 ! 266516 - ck if order display restricted to current buyer only
7054 IF POS(ORDER_TYPE$=EC$[2](97,4))=0 THEN REPORT$="N"; GOTO 7090; REM "ck if order type matches acceptable types on buyer parameters"
7055 REM 'CK IF RESTRICTED TO BUYER LOCATION
7056 IF EC$[2](92,1)<>"Y" AND EC$[2](726,9)=DIM(9) THEN GOTO 7060 ELSE IF ORDER_FILE_SOURCE$="FS1" THEN LOC_CHAN=_ZPO3 ELSE LOC_CHAN=_ZFT5
7057 REPORT$="N"; READ (LOC_CHAN,KEY=ONUMB$,DOM=7058)
7058 CKLOC$=KEY(LOC_CHAN,END=7060); READ (LOC_CHAN,KEY=CKLOC$)CKLOCREC$; IF CKLOC$(1,LEN(ONUMB$))<>ONUMB$ THEN GOTO 7060 END_IF ; IF EC$[2](61,4)=DIM(4) THEN GOTO 7059 ELSE IF CKLOCREC$(11,5)="C"+EC$[2](61,4) THEN REPORT$="Y"; GOTO 7060 ELSE GOTO 7058; REM "ck for shipto match for restricted to shipto option,168581 look at ship to type also D= dist C=Cust
7059 IF EC$[2](726,9)<>DIM(9) THEN GOSUB 7100; IF LOC_REC$(236,9)=EC$[2](726,9) THEN REPORT$="Y"; GOTO 7060 ELSE GOTO 7058; REM "ck if shipto ddl match to shipto ssp 147646                                                       
7060 IF REPORT$="N" THEN GOTO 7090; REM "ck results of location search - if none found then exit before further checks"
7090 RETURN 
7100 REM "Retreive location record based on cklocrec$ and fs1$                 
7105 DIM LOC_REC$(640); IF CKLOCREC$(11,1)="D" THEN LOCKEY$="D"+DIM(10)+CKLOCREC$(12,4) ELSE IF CKLOCREC$(11,1)="C" THEN LOCKEY$="C"+FS1$(6,10)+CKLOCREC$(12,4) ELSE GOTO 7140
7110 FIND (_ZFM0,KEY=LOCKEY$,DOM=7140)LOC_REC$
7145 RETURN 
7400 SET_READONLY:
7410 SET_PARAM 'XI'
7420 SET_READONLY_END:RETURN 
7430 CLEAR_READONLY:
7435 SET_PARAM -'XI'
7440 CLEAR_READONLY_END:RETURN 
7550 REM "Send LINE$ to EC3BYB for generic fields processing
7560 CALL "EC3BYB",ERR=7561,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,LINE$,BYBINFO${ALL},BYBOPTIONS$,100 ! 227154
7595 RETURN 
7600 REM "get description of order type"
7605 ON POS(FS1$(47,1)="RW") GOTO 7610,7611
7610 ORDER_TYPE$="Reorder"; GOTO 7620
7611 ORDER_TYPE$="Whse Release"; GOTO 7620
7640 RETURN 
8000 REM "Given customer number and order number, read FS8 to get key to read FS6 to get order date (34,6), and calculate the correct rev_date$ for this order to read into FTI with
8005 READ (_ZFS8,KEY=EC$[2](51,10)+POSITION_ORDER$,DOM=8006)
8010 DIM KEY8$(30); KEY8$=KEY(_ZFS8,END=8011)
8011 IF KEY8$(1,18)<>EC$[2](51,10)+POSITION_ORDER$ THEN GOTO 8045
8015 READ (_ZFS6,KEY=KEY8$(1,10)+KEY8$(19,1)+KEY8$(20,10)+KEY8$(11,8)+KEY8$(30,1),DOM=8045)TMP8$
8030 REV_DATE$=FNR$(TMP8$(34,6))
8045 RETURN 
8050 REM "Given customer number and order number, read FS8 to get key to read FS6 to get customer P/O, type, and form code date to read into ASC with
8055 READ (_ZFS8,KEY=EC$[2](51,10)+POSITION_ORDER$,DOM=8056)
8060 DIM KEY8$(30); KEY8$=KEY(_ZFS8,END=8011)
8061 IF KEY8$(1,18)<>EC$[2](51,10)+POSITION_ORDER$ THEN GOTO 8095
8065 READ (_ZFS6,KEY=KEY8$(1,10)+KEY8$(19,1)+KEY8$(20,10)+KEY8$(11,8)+KEY8$(30,1),DOM=8095)TMP8$
8075 ORDER_POSITION_KEY$=TMP8$(54,15),REST_OF_KEY$=TMP8$(11,19); IF DIRECTION$="B" THEN REST_OF_KEY$=REST_OF_KEY$+$FF$
8095 RETURN 
8100 CHECK_OSTATUS_MSG:! SSP227326/227500
8110 IF OSTATUS$="Open" THEN GOTO 8130 ELSE IF OSTATUS$="Partial Shipped" OR OSTATUS$="Partially Shipped" THEN GOTO 8140 ELSE IF OSTATUS$="Shipped" THEN GOTO 8150 ELSE GOTO *RETURN
8130 IF STP(SHIP_STAT_MSG_OPEN$,2)>"" THEN OSTATUS$=STP(SHIP_STAT_MSG_OPEN$,2) END_IF ; GOTO *RETURN
8140 IF STP(SHIP_STAT_MSG_PARTIAL$,2)>"" THEN OSTATUS$=STP(SHIP_STAT_MSG_PARTIAL$,2) END_IF ; GOTO *RETURN
8150 IF STP(SHIP_STAT_MSG_SHIPPED$,2)>"" THEN OSTATUS$=STP(SHIP_STAT_MSG_SHIPPED$,2) END_IF ; GOTO *RETURN
8190 RETURN 
8195 ! 
8200 GET_EDW_STATUS:! Returns status only if that is the same status on ALL EDW records for given order
8205 EDW_STATUS$=""; EDW_STATUS_SET=0; IF NUL(EDW_STAT_LIST$) THEN GOTO 8270
8210 READ (_ZEDW,KEY=FS1$(118,8),KNO=0,DOM=*NEXT)
8215 DIM EDW$(200),EDW[0]; EDWK$=KEY(_ZEDW,END=8270); READ (_ZEDW,KEY=EDWK$)IOL=IOL_EDW
8220 IF MID(EDWK$,1,8)<>FS1$(118,8) THEN GOTO 8270
8235 IF POS(STP(MID(EDW$,78,10))=EDW_STAT_LIST$)=0 THEN EDW_STATUS$=""; GOTO 8270 ! Encountered a status not in requested list
8236 IF EDW_STATUS$<>STP(MID(EDW$,78,10)) THEN IF NOT(EDW_STATUS_SET) THEN EDW_STATUS$=STP(MID(EDW$,78,10)),EDW_STATUS_SET=1 ELSE EDW_STATUS$=""; GOTO 8270
8265 GOTO 8215
8295 RETURN 
8299 ! 
8300 GET_ORDER_BUYER:! 272270
8310 DIM ECA$(1540); IF NOT(NUL(MID(FS1$,250,15))) THEN FIND (_ZECA,KEY=FS1$(250,15),DOM=*NEXT)ECA$
8315 RETURN 
8319 ! 
8910 DEF FND$(Z9$)=Z9$(1*2+1,2)+"/"+Z9$(7-1*2,2)+"/"+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
8915 DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
8920 DEF FNR$(X$)=STR(10000000-NUM(STR(ASC(X$(1,1)))+X$(2)):"0000000")
8925 DEF FNS$(Z9$)=TBL(NUM(Z9$)<10,CHR(ASC("A")+NUM(Z9$)-10),STR(NUM(Z9$):"0")) ! CHAR(3) SEQ# (1-35) => CHAR(1) SEQ# (1-9,A-Z)
8930 DEF FNN$(Z9$)=TBL(Z9$<"A",STR(ASC(Z9$)-ASC("A")+10:"000"),STR(NUM(Z9$):"000")) ! CHAR(1) SEQ# (1-9,A-Z) => CHAR(3) SEQ# (1-35)
8940 DEF FNM$(X$)=CHR(ASC("K")+INT(NUM(X$(1,2))/10))+STR(MOD(NUM(X$(1,2)),10))+X$(3,4)
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9005 GOSUB CLEAR_READONLY
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$); REM "131928
9090 GOTO 9900
9900 REM "End
9905 GOSUB CLEAR_READONLY
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9950 EXIT 
9999 END 
10000 ! 
13200 REM "Read in order header information
13201 DISPLAY_ORDER$=ORDER$[ENTRY_INDEX,0]
13202 ORDERLINES$=""; READ (_ZFT4,KEY=DISPLAY_ORDER$,DOM=13203)
13203 TEMPKEY$=KEY(_ZFT4,END=13204); IF TEMPKEY$(1,LEN(DISPLAY_ORDER$))<>DISPLAY_ORDER$ THEN GOTO 13204 ELSE ORDERLINES$=ORDERLINES$+TEMPKEY$(9,3); READ (_ZFT4); GOTO 13203; REM "build list of total lines on the order
13210 LINE_FILE=_ZFS2; DIM FS1$(350),FS1[13],PO3$(301); FIND (_ZFS1,KEY=DISPLAY_ORDER$,DOM=13211)IOL=IOL_FS1; LINE_FILE=_ZFS2; FIND (_ZPO3,KEY=DISPLAY_ORDER$+DIM(5),DOM=13212)PO3$; GOTO 13212
13211 FIND (_ZFT3,KEY=DISPLAY_ORDER$,DOM=13245)IOL=IOL_FS1; LINE_FILE=_ZFT4; FIND (_ZFT5,KEY=DISPLAY_ORDER$+DIM(5),DOM=13212)PO3$
13222 DIM CSR$(255); FIND (_ZAR3,KEY=FS1$(89,4),DOM=13223)CSR$
13223 DIM SPER$(255); FIND (_ZAR3,KEY=FS1$(93,4),DOM=13224)SPER$
13245 DIM ADDR$[3]; LOC_ZIP$=""; CALL "ZZDISP","AX",PO3$(124,9),"ZIP",X3$,LOC_ZIP$,"",0,0,X4$; REM "define formatted address
13246 ADDRESS_INDEX=1; IF STP(PO3$(46,30),2)<>"" THEN ADDR$[ADDRESS_INDEX]=PO3$(46,30),ADDRESS_INDEX=ADDRESS_INDEX+1
13247 IF STP(PO3$(76,30),2)<>"" THEN ADDR$[ADDRESS_INDEX]=PO3$(76,30),ADDRESS_INDEX=ADDRESS_INDEX+1
13248 IF STP(PO3$(106,27),2)<>"" THEN CSZ$=STP(PO3$(106,16),2)+", "+PO3$(122,2)+" "+LOC_ZIP$,ADDR$[ADDRESS_INDEX]=CSZ$
13250 DIM FM0$(618); READ (_ZFM0,KEY="C"+FS1$(6,10)+PO3$(12,4),DOM=*NEXT)FM0$ ! WO1168683
13295 RETURN 
13299 ! 
13500 REM "Get lines section in LS_TEMPLATE$ and generate LINES_SECTION$ containing an entry for each order line from FS2
13502 LINES_SECTION$="",LS_TAGS$="001<fixed_price>002<line_number>003<shipping_whse>004<custom>005<item_code>006<full_item_code>007<left-right>008<top_bottom>009<desc>010<plys>011<starting_number>012<ending_number>013<reorder_date>014<sell_unit>015<sell_qty_per>016<sell_um>017<taxable>018<form_type>019<cust_code>020<job_number>021<job_date>022<carton_weight>023<carton_pack>024<quote_number>025<quote_line>026<sell_price>027<sell_total>028<qty_ordered>029<qty_backordered>030<qty_inv_todate>031<last_inv_info>032<last_inv_no>033<last_inv_date>034<qty_in_eaches>035<qty_ordered_extaltum>036<qty_ordered_extum>037<qty_backordered_extaltum>038<qty_backordered_extum>039<qty_inv_todate_extaltum>040<qty_inv_todate_extum>041<backordered_in_eaches>042<inv_todate_in_eaches>043<altum>044<cic_code>045<3pinfostart>046<lotlinestart>047<linemessage_start>048<po_schd_ship_date>049<sell_unit_two>050<ext_line_number>051<order_line_number>052<po_number>053<line_state_code>054<line_state_desc>055<line_change_status>056<line_change_status_msg>057<sslinestart>058<edw_status>059<edw_status_id>060<edw_status_date>061<edw_status_time>062<edw_rc_num>063<edw_ext_field_1>064<edw_ext_field_2>065<display_order>"
13503 REM "Setup LS_TEMPLATE$
13504 LS_TEMPLATE$=MID(ENTRY2$,1,POS("?tf?linesend?"=ENTRY2$)); ENTRY2$=MID(ENTRY2$,POS("?tf?linesend?"=ENTRY2$)+13) ! IF POS("?tf?linesend?"=LINE$)>0 THEN GOTO 13506 ! SSP1190505, if we already have linesend in LINE$, don't read from the template, we already have this whole section (include file).
13505 ! READ (100,END=13506)LINE$; GOSUB 7550; LS_TEMPLATE$=LS_TEMPLATE$+LINE$+EOL$; IF POS("?tf?linesend?"=LINE$)=0 THEN GOTO 13505
13508 IF ORDERLINES$="" THEN GOTO 13595
13509 FOR GETNEXTLINE=0 TO LEN(ORDERLINES$)/3-1; CURRLINE$=ORDERLINES$(GETNEXTLINE*3+1,3)
13510 DIM FS2$(300),FS2[29]; OS_I=NUM(CURRLINE$,ERR=*PROCEED); READ (LINE_FILE,KEY=DISPLAY_ORDER$+CURRLINE$,DOM=13511,BSY=*PROCEED)IOL=IOL_FS2; GOTO 13512 ! 1272565
13511 READ (_ZFT4,KEY=DISPLAY_ORDER$+CURRLINE$,DOM=13593)IOL=IOL_FS2; REM "if not found in default source then try in FT4 where it should always be
13512 IF EO_MODE THEN GOTO 13517 END_IF ; GOSUB 17800; IF SC_DISPLAY$<>"Y" THEN GOTO 13593 END_IF ; IF FS2$(155,1)=" " THEN GOTO 13513 ELSE IF POS(FS2$(155,1)=STP(EC_PARM$(709,5),2))<>0 THEN GOTO 13593; REM "do not display if order line type blocked 
13513 IF FS2$(9,1)=" " THEN GOTO *NEXT ELSE IF POS(FS2$(9,1)=STP(EC_PARM$(714,20),2))<>0 THEN GOTO 13593; REM "restrict display of specified po codes
13514 IF FS2$(230,3)<>DIM(3) AND FS2$(155,1)<>"M" THEN DONT_PRINT=0; GOSUB 17900; IF DONT_PRINT THEN GOTO 13593 ! SSP1190529, if comp item line, then check to see if line should display
13517 GOSUB 17500; LS$=LS_TEMPLATE$; REM "1159109
13518 LS_INDEX=POS("?tf?"=LS$); IF LS_INDEX=0 THEN GOTO 13591
13519 LSEND_INDEX=POS("?"=LS$(LS_INDEX+4)),LS_TAG$=LS$(LS_INDEX+4,LSEND_INDEX-1),LS1$=LS$(1,LS_INDEX-1),LS2$=LS$(LS_INDEX+LSEND_INDEX+4),LS_POS=POS("<"+LS_TAG$+">"=LS_TAGS$); IF LS_POS=0 THEN LS$=LS1$+LS2$,LS_INDEX=0 ELSE LS_INDEX=NUM(LS_TAGS$(LS_POS-3,3))
13520 ON LS_INDEX GOTO 13589,13521,13522,13523,13524,13525,13526,13527,13528,13529,13530,13531,13532,13533,13534,13535,13536,13537,13538,13539,13540,13541,13542,13543,13544,13545,13546,13547,13548,13549,13550,13551,13552,13553,13554,13555,13556,13557,13558,13559,13560,13561,13562,13563,13564,13565,13566,13567,13568,13569,13570,13571,13572,13573,13574,13575,13576,13577,13578,13579,13580,13581,13582,13583,13584,13585,13589
13521 LS$=LS1$+FN%HTML_ESC$(NY$(POS(FS2$(4,1)="Y")+1,1))+LS2$; GOTO 13590; REM "fixed_price
13522 LS$=LS1$+FN%HTML_ESC$(STR(NUM(FS2$(6,3))))+LS2$; GOTO 13590; REM "line_number
13523 LS$=LS1$+FN%HTML_ESC$(FS2$(10,4))+LS2$; GOTO 13590; REM "shipping_whse
13524 LS$=LS1$+FN%HTML_ESC$(NY$(POS(FS2$(14,1)="Y")+1,1))+LS2$; GOTO 13590; REM "custom
13525 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(19,10),1))+LS2$; GOTO 13590; REM "item_code
13526 LS$=LS1$+FN%HTML_ESC$(ITEM_CUST$+"-"+STP(FS2$(19,10),1))+LS2$; GOTO 13590; REM "full_item_code
13527 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(32,8),1))+LS2$; GOTO 13590; REM "left_right
13528 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(40,8),1))+LS2$; GOTO 13590; REM "top_bottom
13529 ITEM_COUNT=ITEM_COUNT+1; LS$=LS1$+FN%HTML_ESC$(STP(FS2$(50,40),1))+LS2$; GOTO 13590; REM "desc
13530 LS$=LS1$+FN%HTML_ESC$(FS2$(48,2))+LS2$; GOTO 13590; REM "plys
13531 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(104,9),1))+LS2$; GOTO 13590; REM "starting_number
13532 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(189,9),1))+LS2$; GOTO 13590; REM "ending_number
13533 CALL "ZZDISP","DX",FS2$(113,6),"",X3$,DATE1$,"",0,0,X4$; LS$=LS1$+FN%HTML_ESC$(DATE1$)+LS2$; GOTO 13590; REM "reorder_date
13534 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(124,4),1))+LS2$; GOTO 13590; REM "sell_unit
13535 LS$=LS1$+FN%HTML_ESC$(STR(FS2[5]:"##,###"))+LS2$; GOTO 13590; REM "sell_qty_per
13536 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(124,4),1)+"/"+STP(STR(FS2[5]:"##,###"),2))+LS2$; GOTO 13590; REM "sell_um
13537 LS$=LS1$+FN%HTML_ESC$(NY$(POS(FS2$(136,1)="Y")+1,1))+LS2$; GOTO 13590; REM "taxable
13538 LS$=LS1$+FN%HTML_ESC$(FORM_TYPE$)+LS2$; GOTO 13590; REM "form_type
13539 LS$=LS1$+FN%HTML_ESC$(ITEM_CUST$)+LS2$; GOTO 13590; REM "cust_code
13540 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(171,12),1))+LS2$; GOTO 13590; REM "job_number
13541 CALL "ZZDISP","DX",FS2$(183,6),"",X3$,DATE1$,"",0,0,X4$; LS$=LS1$+FN%HTML_ESC$(DATE1$)+LS2$; GOTO 13590; REM "job_date
13542 LS$=LS1$+FN%HTML_ESC$(STR(NUM(FS2$(198,7)):"##,###"))+LS2$; GOTO 13590; REM "carton weight
13543 LS$=LS1$+FN%HTML_ESC$(STR(FS2[12]:"##,###"))+LS2$; GOTO 13590; REM "carton_pack
13544 LS$=LS1$+FN%HTML_ESC$(STR(FS2[10]/SELL_DIVISOR:"#,###,###-"))+LS2$; GOTO 13590; REM "qty_ordered (in sell u/m)
13545 LS$=LS1$+FN%HTML_ESC$(STR(NUM(FS2$(15,3)):"###"))+LS2$; GOTO 13590; REM "quote_line
13546 IF EC$[2](322,1)="Y" THEN LS$=LS1$+LS2$; GOTO 13590 ELSE LS$=LS1$+FN%HTML_ESC$(STR(FS2[4]:"$-###,###.00"))+LS2$; GOTO 13590; REM "sell_price. SSP1173363, don't show price if says so for buyer
13547 IF EC$[2](322,1)="Y" THEN LS$=LS1$+LS2$; GOTO 13590 ELSE LS$=LS1$+FN%HTML_ESC$(STR(FS2[6]:"-#,###,###.00"))+LS2$; SELL_PRICE_TOTAL+=FS2[6]; GOTO 13590; REM "sell_total. WO1168683, calculate sell_price_total. SSP1173363, don't show price if says so for buyer
13548 LS$=LS1$+FN%HTML_ESC$(STP(STR(FS2[10]/SELL_DIVISOR:"#,###,###-"),2))+LS2$; GOTO 13590; REM "qty_ordered (in sell u/m) WO1233389, added STP
13549 LS$=LS1$+FN%HTML_ESC$(STR(FS2[8]/SELL_DIVISOR:"#,###,###-"))+LS2$; GOTO 13590; REM "qty_backordered (in sell u/m)
13550 ITPOS=POS(FS2$(6,3)=FS6LINE$,3); IF ITPOS=0 THEN IT=0 ELSE IT=FS6INV[(ITPOS+2)/3] END_IF ; LS$=LS1$+FN%HTML_ESC$(STR(IT/SELL_DIVISOR:"#,###,###-"))+LS2$; GOTO 13590; REM "qty_inv_todate (in sell u/m)
13551 GOSUB 17700; LS$=LS1$+FN%HTML_ESC$("Invoice # "+STP(LAST_INV$,2)+" on "+LAST_INV_DATE$)+LS2$; GOTO 13590; REM "last_inv_info
13552 GOSUB 17700; LS$=LS1$+FN%HTML_ESC$(STP(LAST_INV$,2))+LS2$; GOTO 13590; REM "last_inv_no
13553 GOSUB 17700; LS$=LS1$+FN%HTML_ESC$(LAST_INV_DATE$)+LS2$; GOTO 13590; REM "last_inv_date
13554 LS$=LS1$+FN%HTML_ESC$(STR(FS2[10]:"#,###,###-"))+LS2$; GOTO 13590; REM "qty_in_eaches
13555 LS$=LS1$+FN%HTML_ESC$(ALTUMEXT$)+LS2$; GOTO 13590; REM "qty_ordered_extaltum - prints using alternate unit of issue if avail - otherwise prints from the order (see 17528)
13556 LS$=LS1$+FN%HTML_ESC$(UMEXT$)+LS2$; GOTO 13590; REM "qty_ordered_extum - prints using order um exclusively (see lines 17520-17550)
13557 IF FS2(8)=0 THEN ALTUMEXTBO$="" END_IF ; LS$=LS1$+FN%HTML_ESC$(ALTUMEXTBO$)+LS2$; GOTO 13590; REM "qty_backordered_extaltum - prints using alternate unit of issue if avail - otherwise prints from the order (see 17528)
13558 IF FS2(8)=0 THEN UMEXTBO$="" END_IF ; LS$=LS1$+FN%HTML_ESC$(UMEXTBO$)+LS2$; GOTO 13590; REM "qty_backorded_extum - prints using order um exclusively (see lines 17520-17550)
13559 LS$=LS1$+FN%HTML_ESC$(ALTUMEXTINV$)+LS2$; GOTO 13590; REM "qty_inv_todate_extaltum - prints using alternate unit of issue if avail - otherwise prints from the order (see 17528)"/ 1159109
13560 LS$=LS1$+FN%HTML_ESC$(UMEXTINV$)+LS2$; GOTO 13590; REM "qty_inv_todate_extum - prints using order um exclusively (see lines 17520-17550)
13561 LS$=LS1$+FN%HTML_ESC$(STP(STR(FS2(8):"#,###,###-"),2))+LS2$; GOTO 13590; REM "backordered_in_eaches
13562 LS$=LS1$+FN%HTML_ESC$(STP(STR(FS2(16):"#,###,###-"),2))+LS2$; GOTO 13590; REM "inv_todate_in_eaches
13563 LS$=LS1$+FN%HTML_ESC$(ALTUM$)+LS2$; GOTO 13590; REM "altum 1159109
13564 LS$=LS1$+FN%HTML_ESC$(TBL(NUL(FM1$(350,20)),STP(FM1$(350,20),1),STP(FS2$(19,10),1)))+LS2$; GOTO 13590 ! cic_code SSP1164819
13565 GOSUB 13950; LS$=LS1$+TPINFO_TEMPLATE$+LS2$; GOTO 13590 ! WO1168683, 3pinfostart
13566 GOSUB 13900; LS$=LS1$+LOT_SECTION$+LS2$; GOTO 13590 ! WO1168683, lotlinestart
13567 GOSUB 13850; LS$=LS1$+LINEMSG_SECTION$+LS2$; GOTO 13590 ! WO1168683, linemessage_start
13568 GOSUB 14700; IF NOT(NUL(PO1$(291,6))) THEN CALL "ZZDISP","DX",PO1$(291,6),"",X3$,DATE1$,"",0,0,X4$; LS$=LS1$+FN%HTML_ESC$(DATE1$)+LS2$ ELSE LS$=LS1$+LS2$ END_IF ; GOTO 13590; REM "po_schd_ship_date - 1209902
13569 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(124,2),1))+LS2$; GOTO 13590 ! WO1233389, sell_unit_two
13570 LS$=LS1$+FN%HTML_ESC$(STP(EDW$(35,3),1))+LS2$; GOTO 13590 ! WO1233389, ext_line_number
13571 LS$=LS1$+FN%HTML_ESC$(FS2$(6,3))+LS2$; GOTO 13590; REM "order_line_number, 1263664
13572 PO_NUMBER$=""; IF NOT(NUL(FS2$(9,1))) THEN PO_NUMBER$=FN%ZZDISP$(DISPLAY_ORDER$+FS2$(9,1),"P/O") END_IF ; LS$=LS1$+FN%HTML_ESC$(PO_NUMBER$)+LS2$; GOTO 13590 ! SSP1263664, po_number
13573 LS$=LS1$+ORD_STAT$[OS_I,0]+LS2$; GOTO 13590 ! line_state_code
13574 LS$=LS1$+ORD_STAT$[OS_I,1]+LS2$; GOTO 13590 ! line_state_desc
13575 LS$=LS1$+ORD_STAT$[OS_I,2]+LS2$; GOTO 13590 ! line_change_status
13576 LS$=LS1$+ORD_STAT$[OS_I,3]+LS2$; GOTO 13590 ! line_change_status_msg
13577 GOSUB 14000; LS$=LS1$+SPECIAL_SHIP_SECTION$+LS2$; GOTO 13590 ! sslinestart
13578 LS$=LS1$+STP(MID(EDW$,78,10),2)+LS2$; GOTO 13590 ! edw_status
13579 LS$=LS1$+STP(MID(EDW$,88,10),2)+LS2$; GOTO 13590 ! edw_status_id
13580 TMP$=""; IF NOT(NUL(MID(EDW$,98,6))) THEN TMP$=FND$(MID(EDW$,98,6)) END_IF ; LS$=LS1$+TMP$+LS2$; GOTO 13590 ! edw_status_date
13581 TMP$=""; IF NOT(NUL(MID(EDW$,104,4))) THEN TMP$=FNT$(MID(EDW$,104,4)) END_IF ; LS$=LS1$+TMP$+LS2$; GOTO 13590 ! edw_status_time
13582 LS$=LS1$+STP(MID(EDW$,12,20),2)+LS2$; GOTO 13590 ! edw_rc_num
13583 LS$=LS1$+STP(MID(EDW$,38,10),2)+LS2$; GOTO 13590 ! edw_ext_field_1
13584 LS$=LS1$+STP(MID(EDW$,58,10),2)+LS2$; GOTO 13590 ! edw_ext_field_2
13585 LS$=LS1$+DISPLAY_ORDER$+LS2$; GOTO 13590 ! display_order
13589 LS$=LS1$+LS2$; GOTO 13590; REM "not found replace with a '?' WO1233389, problem with "?" replacement when linesstart/linesend
13590 GOTO 13518
13591 LINES_SECTION$=LINES_SECTION$+LS$; REM "add to lines section, then get next line if any
13593 NEXT GETNEXTLINE
13595 RETURN 
13600 REM "Get shipinfo info in SI_TEMPLATE$ and generate SHIPINFO_SECTION$ containing an entry for each SM4 record, given FS1$
13602 SHIPINFO_SECTION$="",SI_TAGS$="001<order_no>002<order_line>003<shipto_point>004<seq_no>005<ship_date>006<ship_time>007<est_arrival>008<carrier_id>009<carrier_name>010<tracking_no>011<pickup_no>012<invoice_no>013<packer_id>014<lot_id>015<box_no>016<total_boxes>017<quantity>018<act_weight>019<ship_weight>020<ship_cost>021<3p_text>"
13603 REM "Setup SI_template$
13604 OUTPUT_SHIP_HEADING$="Y"; REM "set flag to output the shipping heading when first shipping line is generated
13607 SI_TEMPLATE$=MID(ENTRY2$,1,POS("?tf?shipinfoend?"=ENTRY2$)); ENTRY2$=MID(ENTRY2$,POS("?tf?shipinfoend?"=ENTRY2$)+16)
13609 READ (_ZSM4,KEY=FS1$(118,8),DOM=13610)
13610 DIM SM4$(700),SM4[15]; READ (_ZSM4,END=13695)IOL=IOL_SM4; IF SM4$(1,8)<>FS1$(118,8) THEN GOTO 13695 ! 1261000
13611 IF NUL(SM4$(49,20)) AND NUL(MID(SM4$,383,60)) THEN GOTO 13610 ! Ignore blank tracking lines - 1211094, 1261000
13612 IF OUTPUT_SHIP_HEADING$="Y" THEN SHIPINFO_SECTION$=SHIPINFO_SECTION$+SHIP_HEADING$,OUTPUT_SHIP_HEADING$="N"; REM "add heading for shipping section
13614 SI$=SI_TEMPLATE$
13615 SI_INDEX=POS("?tf?"=SI$); IF SI_INDEX=0 THEN GOTO 13691
13616 SIEND_INDEX=POS("?"=SI$(SI_INDEX+4)),SI_TAG$=SI$(SI_INDEX+4,SIEND_INDEX-1),SI1$=SI$(1,SI_INDEX-1),SI2$=SI$(SI_INDEX+SIEND_INDEX+4),SI_POS=POS("<"+SI_TAG$+">"=SI_TAGS$); IF SI_POS=0 THEN SI$=SI1$+SI2$,SI_INDEX=0 ELSE SI_INDEX=NUM(SI_TAGS$(SI_POS-3,3))
13620 ON SI_INDEX GOTO 13689,13621,13622,13623,13624,13625,13626,13627,13628,13629,13630,13631,13632,13633,13634,13635,13636,13637,13638,13639,13640,13641,13689
13621 CALL "ZZDISP","AX",SM4$(1,8),"O/P",X3$,TMP$,"",0,0,X4$; SI$=SI1$+FN%HTML_ESC$(TMP$)+SI2$; GOTO 13690; REM "order_no
13622 SI$=SI1$+FN%HTML_ESC$(STR(NUM(SM4$(10,3))))+SI2$; GOTO 13690; REM "order_line
13623 SI$=SI1$+FN%HTML_ESC$(SM4$(13,1))+SI2$; GOTO 13690; REM "shipto_point
13624 SI$=SI1$+FN%HTML_ESC$(SM4$(14,1))+SI2$; GOTO 13690; REM "seq_no
13625 CALL "ZZDISP","DX",SM4$(15,6),"",X3$,DATE1$,"",0,0,X4$; SI$=SI1$+FN%HTML_ESC$(DATE1$)+SI2$; GOTO 13690; REM "ship_date
13626 SI$=SI1$+FN%HTML_ESC$(FNT$(SM4$(21,4)))+SI2$; GOTO 13690; REM "ship_time
13627 SI$=SI1$+FN%HTML_ESC$(SM4$(25,6))+SI2$; GOTO 13690; REM "est_arrival
13628 SI$=SI1$+FN%HTML_ESC$(STP(SM4$(31,6),1))+SI2$; GOTO 13690; REM "carrier_id
13629 IF STP(SM4$(37,12),3," ")="" THEN CN$=SM4$(31,6) ELSE CN$=SM4$(37,12) END_IF ; SI$=SI1$+FN%HTML_ESC$(STP(CN$,1))+SI2$; GOTO 13690; REM "carrier_name
13630 IF NUL(MID(SM4$,383,60)) THEN TMP_TRACKNO$=SM4$(49,20) ELSE TMP_TRACKNO$=MID(SM4$,383,60) END_IF ; SI$=SI1$+FN%HTML_ESC$(STP(TMP_TRACKNO$,1))+SI2$; GOTO 13690; REM "tracking_no, 1261000
13631 SI$=SI1$+FN%HTML_ESC$(STP(SM4$(69,16),1))+SI2$; GOTO 13690; REM "pickup_no
13632 CALL "ZZDISP","AX",SM4$(101,8),"AR6",X3$,TMP$,"",0,0,X4; SI$=SI1$+FN%HTML_ESC$(TMP$)+SI2$; GOTO 13690; REM "invoice_no
13633 SI$=SI1$+FN%HTML_ESC$(STP(SM4$(109,3),1))+SI2$; GOTO 13690; REM "packer_id
13634 SI$=SI1$+FN%HTML_ESC$(STP(SM4$(112,12),1))+SI2$; GOTO 13690; REM "lot_id
13635 SI$=SI1$+FN%HTML_ESC$(STR(NUM(SM4$(124,3)):"###"))+SI2$; GOTO 13690; REM "box_no
13636 SI$=SI1$+FN%HTML_ESC$(STR(NUM(SM4$(127,3)):"###-"))+SI2$; GOTO 13690; REM "total_boxes
13637 SI$=SI1$+FN%HTML_ESC$(STR(SM4[0]:"#,###,###-"))+SI2$; GOTO 13690; REM "quantity
13638 SI$=SI1$+FN%HTML_ESC$(STR(SM4[1]:"##,###.00"))+SI2$; GOTO 13690; REM "act_weight
13639 SI$=SI1$+FN%HTML_ESC$(STR(SM4[2]:"##,###.00"))+SI2$; GOTO 13690; REM "ship_weight
13640 SI$=SI1$+FN%HTML_ESC$(STR(SM4[3]:"$###,###.00"))+SI2$; GOTO 13690; REM "ship_cost
13641 GOSUB 17600; SI$=SI1$+VAR_TEXT$+SI2$; GOTO 13690; REM " SSP# 1152902
13689 SI$=SI1$+"?"+SI2$; GOTO 13690; REM "not found, replace with a '?'
13690 GOTO 13615
13692 SHIPINFO_SECTION$=SHIPINFO_SECTION$+SI$; GOTO 13610 ! REM "add to shipinfo section, then get next ship infor record if any
13695 RETURN 
13700 REM "process <shipheadingstart>
13705 SHIP_HEADING$=""
13710 READ (100,END=13711)LINE$; GOSUB 7550; SHIP_HEADING$=SHIP_HEADING$+LINE$+EOL$; IF POS("?tf?shipheadingend?"=LINE$)=0 THEN GOTO 13710
13720 RETURN 
13850 REM "get line message section (linemessage_start).  Copied from EC3WS1, WO1168683.
13852 LINEMSG_SECTION$="",LM_TEMPLATE$=LS2$(2); IF LS1$(LEN(LS1$)-1,2)="<!" THEN LS1$=LS1$(1,LEN(LS1$)-2)
13853 LINEMSG_END=POS("<!?tf?linemessage_end"=LM_TEMPLATE$),LM_TEMPLATE$=LM_TEMPLATE$(1,LINEMSG_END-1)
13854 LINEMSG_END=POS("<!?tf?linemessage_end"=LS2$); IF LEN(LS2$)=LINEMSG_END+23 THEN LS2$="" ELSE LS2$=LS2$(LINEMSG_END+23); REM "strip out the line message section from LS2$
13855 DIM ECE$(500); READ (_ZECE,KEY=FS1$(289,10)+EDW$(32,3),DOM=*NEXT)ECE$
13858 DIM OPTIONS$(20); REM "OPTIONS$(1,1)=ORDER_REVIEW$
13860 CALL "EC3MG0",X3$,X4$,EC_PARM$,EC${ALL},LM_TEMPLATE$,ECE$,MESS_INFO${ALL},OPTIONS$; REM "process messages for line
13891 LINEMSG_SECTION$=LM_TEMPLATE$
13895 RETURN 
13900 REM "Get lotted lines section in LOT_TEMPLATE$ and generate LOT_SECTION$ containing an entry for each order line from ICF for the corresponding line section item.  Code copied from EC3WS1, WO1168683.
13903 REM "Setup LOT_TEMPLATE$
13904 LOT_TEMPLATE$=LS2$(2)
13905 LOT_END=POS("<!?tf?lotlineend"=LOT_TEMPLATE$),LOT_TEMPLATE$=LOT_TEMPLATE$(1,LOT_END-1)
13906 LS2$=LS2$(2); REM "get rid of trailing > from opening <!?tf?lotlinstart>
13907 LOT_END=POS("<!?tf?lotlineend"=LS2$); IF LEN(LS2$)=LOT_END+18 THEN LS2$="" ELSE LS2$=LS2$(LOT_END+18); REM "strip out the lot section from LS2$
13910 DIM ECR$(11000); FIND (_ZECR,KEY=FORMCODE$,DOM=13911)ECR$
13912 IF STP(ECR$(256,48),1)="" THEN WHSE_LIST$=EC$[11] ELSE WHSE_LIST$=STP(ECR$(256,48),1)
13920 REM "get lot records
13922 CALL "EC3IC1",X3$,X4$,EC_PARM$,EC${ALL},FORMCODE$,WHSE_LIST$,FS2[0],FS2[5],ICF_INFO${ALL},NEXT_ICF_INDEX,FS1$(118,8)+FS2$(6,3)
13925 REM "IF NEXT_ICF_INDEX=1 THEN LET LOT_TEMPLATE$=""; GOTO 103933; REM "NO LOT RECORDS
13930 REM "output lot section
13932 CALL "EC3IC2",X3$,X4$,EC_PARM$,EC${ALL},LOT_TEMPLATE$,ICF_INFO${ALL},NEXT_ICF_INDEX-1,""
13933 IF FS2$(9,1)=" " THEN LOT_SECTION$=LOT_TEMPLATE$ ELSE LOT_SECTION$=""; REM "if po being issued then eliminate lot section completely
13940 RETURN 
13950 REM "Get lines section in TPINFO_TEMPLATE$ and generate TPINFO_SECTION$ containing an entry for each order line from FS2.  Code copied in from EC3WS1, WO1168683.
13951 IF LEN(LS1$)<=2 THEN LS1$="" ELSE LS1$=LS1$(1,LEN(LS1$)-2); REM "get rid of <!
13952 TPINFO_SECTION$="",TPINFO_TAGS$="001<3p_info_1>002<3p_info_2>003<3p_text>004<3p_info_3>"
13953 REM "Setup TPINFO_TEMPLATE$
13954 TPINFO_TEMPLATE$=LS2$(2)
13955 TPINFO_END=POS("<!?tf?3pinfoend"=TPINFO_TEMPLATE$),TPINFO_TEMPLATE$=TPINFO_TEMPLATE$(1,TPINFO_END-1)
13956 LS2$=LS2$(2); REM "get rid of trailing > from opening <!?tf?3pinfostart>
13957 TPINFO_END=POS("<!?tf?3pinfoend"=LS2$); IF LEN(LS2$)=TPINFO_END+17 THEN LS2$="" ELSE LS2$=LS2$(TPINFO_END+17); REM "strip out the lot section from LS2$
13958 DIM ECR$(11000); READ (_ZECR,KEY=FORMCODE$,DOM=*NEXT)ECR$ ! WO1168683
13959 IF LEN(ECR$)<252 THEN GOTO 13995 END_IF ; IF ECR$(243,10)=DIM(10) THEN TPINFO_TEMPLATE$=""; GOTO 13995; REM "if no 3pinfo on item parameter then eliminate section
13960 DIM EC7$(200); READ (_ZEC7,KEY=FS1$(289,10)+EDW$(32,3),DOM=*NEXT)EC7$ ! WO1168683
13965 TPINFO_INDEX=POS("?tf?"=TPINFO_TEMPLATE$); IF TPINFO_INDEX=0 THEN GOTO 13991
13966 TPINFOEND_INDEX=POS("?"=TPINFO_TEMPLATE$(TPINFO_INDEX+4)),TPINFO_TAG$=TPINFO_TEMPLATE$(TPINFO_INDEX+4,TPINFOEND_INDEX-1),TP1$=TPINFO_TEMPLATE$(1,TPINFO_INDEX-1),TP2$=TPINFO_TEMPLATE$(TPINFO_INDEX+TPINFOEND_INDEX+4),TPINFO_POS=POS("<"+TPINFO_TAG$+">"=TPINFO_TAGS$); IF TPINFO_POS=0 THEN TPINFO_TEMPLATE$=TP1$+TP2$,TPINFO_INDEX=0 ELSE TPINFO_INDEX=NUM(TPINFO_TAGS$(TPINFO_POS-3,3))
13970 ON TPINFO_INDEX GOTO 13989,13971,13972,13973,13974,13989
13971 TPINFO_TEMPLATE$=TP1$+FN%HTML_ESC$(STP(EC7$(24,20),1))+TP2$; GOTO 13990; REM "3p_info_1
13972 TPINFO_TEMPLATE$=TP1$+FN%HTML_ESC$(STP(EC7$(24,20),2))+TP2$; GOTO 13990; REM "3p_info_2
13973 GOSUB 14350; TPINFO_TEMPLATE$=TP1$+VAR_TEXT$+TP2$; GOTO 13990; REM "3p_text 1166342
13974 TPINFO_TEMPLATE$=TP1$+FN%HTML_ESC$(STP(EC7$(64,50),2))+TP2$; GOTO 13990 ! WO1178946, 3p_info_3
13989 TPINFO_TEMPLATE$=TP1$+"?"+TP2$; GOTO 13990; REM "not found replace with a '?'
13990 GOTO 13965
13995 RETURN 
14000 REM "Get special shipping section; only if line has special shipping
14005 SPECIAL_SHIP_SECTION$="",SS_TEMPLATE$=LS2$
14010 SS_END=POS("?tf?sslineend?"=SS_TEMPLATE$); SS_TEMPLATE$="?tf?sslinestart?"+SS_TEMPLATE$(1,SS_END+14); LS2$=LS2$(SS_END+15)
14015 IF NOT(EO_MODE) OR FS2$(18,1)<>"Y" OR FS2$(155,1)="M" THEN SS_TEMPLATE$=""; GOTO 14040 ! If line does not have special shipping, or is a "M" type line, or EO mode not enabled, skip section
14025 PO3_KEY$=FS2$(147,8)+" "+FS2$(6,3),OPTIONS$=""; CALL "EC3PO3",X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},PO3_KEY$,OPTIONS$,"?tf?sslinestart?",SS_TEMPLATE$,"?tf?sslineend?",SHIP_STAT${ALL}; REM "process special ship records for line
14040 SPECIAL_SHIP_SECTION$=SS_TEMPLATE$
14045 RETURN 
14049 ! 
14050 REM "Get general shipping section
14055 GENERAL_SHIP_SECTION$="",GS_TEMPLATE$=LINE$
14060 GS_TEMPLATE$+=LINE$+EOL$; IF POS("?tf?gslineend?"=LINE$)=0 THEN READ (100,END=*NEXT)LINE$; GOSUB 7550; GOTO *SAME
14065 IF NOT(EO_MODE) THEN GS_TEMPLATE$=""; GOTO 14090 ! If EO mode not enabled, skip section
14075 PO3_KEY$=DISPLAY_ORDER$+DIM(4),OPTIONS$=""; CALL "EC3PO3",X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},PO3_KEY$,OPTIONS$,"?tf?gslinestart?",GS_TEMPLATE$,"?tf?gslineend?",SHIP_STAT${ALL}; REM "process general shipping for order
14090 GENERAL_SHIP_SECTION$=GS_TEMPLATE$
14095 RETURN 
14099 ! 
14350 REM "3p_text handling, TP2$ should have [x] in it
14355 REM "Extract [x] part from TP2, if not found then ignore
14360 VAR_TEXT$=""
14365 BRACKET_POS=POS("]"=TP2$); IF MID(TP2$,1,1)<>"[" OR BRACKET_POS=0 THEN RETURN ELSE VAR_CODE$=TP2$(1,BRACKET_POS),TP2$=TP2$(BRACKET_POS+1)
14370 VAR_CODE$=VAR_CODE$(2,LEN(VAR_CODE$)-2); VAR_CODE$=STR(NUM(VAR_CODE$,ERR=14368):"100000")
14375 VAR_CODE_KEY$=ECR$(243,10)+VAR_CODE$; CALL "EC3BYC",X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,VAR_CODE_KEY$,VAR_TEXT${ALL}
14380 VAR_TEXT$=VAR_TEXT$[1]
14385 RETURN 
14390 ! 
14650 ! Get buyer record for buyer from FS1, SSP1173133, code brought in from EC3WS1
14660 DIM ECA$(11540); ECAFSLOT=FN%FFN("ECA"+X3$(9,3)); IF ECAFSLOT<0 THEN GOTO 14690 ! 1205455
14665 READ (ECAFSLOT,KEY=FS1$(250,15),DOM=14690)ECA$
14690 RETURN 
14695 ! 
14700 ! Get PO header associated with current line
14701 DIM PO1$(383)
14705 IF NUL(FS2$(9,1)) THEN GOTO 14745 ! Order line not on a PO!SSP#1235533
14710 PO1_KEY$=FS2$(147,8)+FS2$(9,1)
14720 FIND (_ZPO1,KEY=PO1_KEY$,DOM=*NEXT)PO1$; GOTO 14745
14730 FIND (_ZFT8,KEY=PO1_KEY$,DOM=*NEXT)PO1$; GOTO 14745
14745 RETURN 
14749 ! 
16650 REM "Convert quantity to eaches
16655 GET_QTY_IN_EACHES:
16660 UM$=PAD(UM$,4),THOUSANDS$="M   ",EACHES_QTY=0; IF STP(EC_PARM$(11089,4),3)>"" THEN THOUSANDS$=EC_PARM$(11089,4)
16665 DIM M$(21),M[1]; FIND (_ZZP,KEY="U/M"+UM$,DOM=*NEXT)M$,M[0],M[1]
16670 IF M$(20,1)="Y" AND M[1]<>0 AND UM$<>THOUSANDS$ AND UM$<>"C   " THEN QTY_PER_UM=M[1]; REM " If fixed unit of measure then fix it.  SSP1171511, for Hundreds, act like we do for thousands and don't stop from converting.  This is opposite of how it works in manual order entry.  We may need a parameter in EC like we do for thousands at some point.
16675 REM " Multiply out unless we are expecting the amount in eaches
16680 IF UM$=THOUSANDS$ AND EC_PARM$(948,1)="Y" THEN EACHES_QTY=ORIG_QTY; GOTO *RETURN
16685 EACHES_QTY=ORIG_QTY*QTY_PER_UM
16695 RETURN 
16699 ! 
17500 REM "Set values from FS2$ that need calculations, etc
17504 DIM EDW$(200); READ (_ZEDW,KEY=DISPLAY_ORDER$+CURRLINE$,DOM=*NEXT)EDW$ ! WO1168683
17505 CALL "ZZDISP","AX",FS2$(161,10),"A/R",X3$,ITEM_CUST$,"",0,0,X4$
17507 CALL "ZZDISP","AX",FS2$(221,8),"O/P",X3$,QUOTE_NUMBER$,"",0,0,X4$
17510 FORM_TYPE$=""; ON POS(FS2$(155,1)="NECSB") GOTO FORM_TYPE_END,17511,17512,17513,17514,17515,FORM_TYPE_END
17511 FORM_TYPE$="New"; GOTO FORM_TYPE_END
17512 FORM_TYPE$="Exact Repeat"; GOTO FORM_TYPE_END
17513 FORM_TYPE$="Copy Change"; GOTO FORM_TYPE_END
17514 FORM_TYPE$="Spec Change"; GOTO FORM_TYPE_END
17515 FORM_TYPE$="Spec & Copy Change"; GOTO FORM_TYPE_END
17516 FORM_TYPE_END:
17520 REM "Set SELL_DIVISOR from sell unit of measure
17521 MASK5$="##,##0-",MASK7$="#,###,##0-"
17522 DIM UM$(22),UM[5]; FIND (_ZZP,KEY="U/M"+FS2$(124,4),DOM=17523)IOL=IOL_UOM
17523 IF UM$(20,1)="Y" OR UM$(21,1)="Y" OR FS2[5]=0 THEN SELL_DIVISOR=1 ELSE SELL_DIVISOR=FS2(5) END_IF ; UMEXT$=STP(STR(FS2(10)/SELL_DIVISOR:MASK7$),2)+" "+STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):MASK5$),2),UMEXTBO$=STP(STR(FS2(8)/SELL_DIVISOR:MASK7$),2)+" "+STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):MASK5$),2); REM "1159109
17524 DIM FM1(31),FM1$(500); FORMCODE$=FS2$(161,10)+FS2$(19,10); IF FORMCODE$(1,10)=DIM(10) THEN ALT_SELL_DIVISOR=SELL_DIVISOR,ALTUM$=STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):"##,##0-"),2),ALTUMEXT$=STP(STR(FS2(10)/ALT_SELL_DIVISOR:"#,###,##0-"),2)+" "+STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):"##,##0-"),2),ALTUMEXTBO$=STP(STR(FS2(8)/ALT_SELL_DIVISOR:MASK7$),2)+" "+STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):MASK5$),2); GOTO 17545 ! SSP1168892, if no cust code then still need to set altum tags
17525 FIND (_ZFM1,KEY=FORMCODE$,DOM=17526)IOL=IOL_FM1; GOTO 17527
17526 ALT_SELL_DIVISOR=SELL_DIVISOR; REM "1159109  ; GOTO 17545
17528 IF FM1(25)=0 OR FM1$(238,4)=DIM(4) THEN ALT_SELL_DIVISOR=SELL_DIVISOR,ALTUM$=STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):"##,##0-"),2),ALTUMEXT$=STP(STR(FS2(10)/ALT_SELL_DIVISOR:"#,###,##0-"),2)+" "+STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):"##,##0-"),2),ALTUMEXTBO$=STP(STR(FS2(8)/ALT_SELL_DIVISOR:MASK7$),2)+" "+STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):MASK5$),2) ELSE ALT_SELL_DIVISOR=FM1(25),ALTUM$=STP(FM1$(238,4),2)+"/"+STP(STR(FM1(25):"##,##0-"),2),ALTUMEXT$=STP(STR(FS2(10)/ALT_SELL_DIVISOR:"#,###,##0-"),2)+" "+STP(FM1$(238,4),2)+"/"+STP(STR(FM1(25):"##,##0-"),2),ALTUMEXTBO$=STP(STR(FS2(8)/ALT_SELL_DIVISOR:MASK7$),2)+" "+STP(FM1$(238,4),2)+"/"+STP(STR(FM1(25):MASK5$),2); REM "1159109
17530 ITPOS=POS(FS2$(6,3)=FS6LINE$,3),ALTUMEXTINV$="",UMEXTINV$=""; IF ITPOS=0 THEN IT=0 ELSE IT=FS6INV[(ITPOS+2)/3] END_IF ; IF IT=0 THEN GOTO 17536; REM "1159109
17532 IF FM1(25)=0 OR FM1$(238,4)=DIM(4) THEN ALTUMEXTINV$=STP(STR(IT/ALT_SELL_DIVISOR:MASK7$),2)+" "+STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):MASK5$),2) ELSE ALTUMEXTINV$=STP(STR(IT/ALT_SELL_DIVISOR:MASK7$),2)+" "+STP(FM1$(238,4),2)+"/"+STP(STR(FM1(25):MASK5$),2); REM "1159109
17534 IF UM$(20,1)="Y" OR UM$(21,1)="Y" OR FS2[5]=0 THEN SELL_DIVISOR=1 ELSE SELL_DIVISOR=FS2(5) END_IF ; UMEXTINV$=STP(STR(IT/SELL_DIVISOR:MASK7$),2)+" "+STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):MASK5$),2); REM "1159109"
17545 RETURN 
17550 REM "Use FS8 and customer code + order number to look into FS6 records. Set ship status based on lines being invoiced. SHIP_STATUS$="OPEN","SHIPPED", or "PARTIAL SHIPPED"
17551 REM "build fs6line$ (list of lines found), fs6inv$(corr to lines found, each entry=1,8 last inv#, 9,6=last inv date, and fs6inv[](corr to lines found, is qty inv to date
17554 FS6LINE$="",FS6INV$=""; DIM FS6INV[200]
17555 SHIP_STATUS$="Open",O_LINES=0,S_LINES=0; READ (_ZFS8,KEY=EC$[2](51,10)+FS1$(118,8),DOM=17556)
17560 KEY8$=KEY(_ZFS8,END=17585); READ (_ZFS8); IF KEY8$(1,18)<>EC$[2](51,10)+FS1$(118,8) THEN GOTO 17585 ELSE DIM FS6[7]; READ (_ZFS6,KEY=KEY8$(1,10)+KEY8$(19,11)+KEY8$(11,8)+KEY8$(30,1),DOM=17560)FS6$,FS6[0],FS6[1],FS6[2],FS6[3],FS6[4],FS6[5],FS6[6],FS6[7]
17565 IF STP(FS6$(40,8),3," ")="" THEN O_LINES=O_LINES+1 ELSE S_LINES=S_LINES+1
17567 REM "Update fs6inv info
17568 ASCFS6=ASC(FS6$(30,1))-48; IF ASCFS6>=100 THEN ASCFS6-=10 END_IF ; LINE_NO$=STR(ASCFS6:"000"); FS6LINE$=FS6LINE$+LINE_NO$,LINE_INDEX=LEN(FS6LINE$)/3 ! 1236557
17569 FS6INV$=FS6INV$+FS6$(40,14),FS6INV[LINE_INDEX]=FS6[5]
17580 GOTO 17560
17590 IF S_LINES=0 THEN SHIP_STATUS$="Open" ELSE IF O_LINES>0 THEN SHIP_STATUS$="Partial Ship" ELSE SHIP_STATUS$="Shipped"
17595 RETURN 
17600 REM "3p_text handling, SI2$ should have [x] in it                       
17605 REM "Extract [x] part from line2, if not found then ignore                 
17606 VAR_TEXT$=""
17610 IF LEN(SI2$)<3 THEN GOTO 17611 ELSE BRACKET_POS=POS("]"=SI2$); IF SI2$(1,1)<>"[" OR BRACKET_POS=0 THEN GOTO 17611 ELSE VAR_CODE$=SI2$(1,BRACKET_POS),SI2$=SI2$(BRACKET_POS+1); GOTO 17612
17611 VAR_TEXT$=""; GOTO 17645; REM "did not find var code part, so leave         
17612 VAR_CODE$=VAR_CODE$(2,LEN(VAR_CODE$)-2); VAR_CODE$=STR(NUM(VAR_CODE$,ERR=17611):"100000")
17613 FIND (_ZEC9,KEY=PAD(SM4$(31,6),10)+VAR_CODE$,DOM=17614)EC9$; GOTO 17615 ! 1206208
17614 FIND (_ZEC9,KEY=SM4$(37,10)+VAR_CODE$,DOM=17611)EC9$
17615 VAR_CODE_KEY$=EC9$(1,10)+VAR_CODE$; CALL "EC3BYC",X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,VAR_CODE_KEY$,VAR_TEXT${ALL}
17620 VAR_TEXT$=VAR_TEXT$[1]
17645 RETURN 
17649 ! 
17700 REM "given FS2$ return last_inv$ and last_inv_date$ as pre-formatted values based on fs6line$ and fs6inv$ (set in 17560's)
17705 LAST_INV$="",LAST_INV_DATE$="",LI=POS(FS2$(6,3)=FS6LINE$); IF LI=0 THEN GOTO 17745
17710 LI$=FS6INV$(((LI+2)/3-1)*14+1,14)
17715 CALL "ZZDISP","AX",LI$(1,8),"AR6",X3$,LAST_INV$,"",0,0,X4$
17720 CALL "ZZDISP","DX",LI$(9,6),"",X3$,LAST_INV_DATE$,"",0,0,X4$
17745 RETURN 
17800 REM "ck if special charge displaying
17801 SC_DISPLAY$="Y"
17802 IF FS2$(155,1)<>"S" THEN GOTO 17890
17805 IF X3$(9,3)="130" THEN SC_DISPLAY$="N"; GOTO 17890
17806 IF POS("S"=STP(EC_PARM$(709,5),2))<>0 THEN SC_DISPLAY$="N"; GOTO 17890
17810 DIM SCC$(200); FIND (_ZFMP,KEY="X"+FS2$(19,10),DOM=17890)SCC$
17812 SCC$=PAD(SCC$,200)
17814 IF SCC$(62,1)="Y" THEN SC_DISPLAY$="N"; GOTO 17890
17816 IF SCC$(63,10)=DIM(10) THEN GOTO 17890
17818 FS2$(19,10)=SCC$(63,10); DIM SCC$(200); FIND (_ZFMP,KEY="X"+FS2$(19,10),DOM=17819)SCC$
17819 FS2$(50,40)=SCC$(12,40)
17890 REM " 'CS',FS2$(9,1)," ",FS2$(155,1)," ",SC_DISPLAY$," ",FS2$(19,10),; INPUT *,
17895 RETURN 
17900 ! Order line is a companion item line, see if comp item record says don't print, if so then don't print here either, SSP1190529
17905 IF LINE_FILE=_ZFS2 THEN COMP_LINE_FILE=_Z2FS2 ELSE IF LINE_FILE=_ZFT4 THEN COMP_LINE_FILE=_Z2FT4 ELSE GOTO *RETURN
17910 FIND (COMP_LINE_FILE,KEY=DISPLAY_ORDER$+FS2$(230,3),DOM=*RETURN)COMP_LINE$
17915 READ (_ZEDV,KEY=COMP_LINE$(161,10)+COMP_LINE$(19,10),DOM=*NEXT)
17920 COMP_KEY$=KEY(_ZEDV,END=*RETURN); READ (_ZEDV,KEY=COMP_KEY$)EDV$
17925 IF EDV$(1,20)<>COMP_LINE$(161,10)+COMP_LINE$(19,10) THEN GOTO *RETURN
17930 IF EDV$(35,1)<>FS2$(155,1) THEN GOTO 17920 ! Line type
17935 IF FS2$(155,1)="S" AND EDV$(48,10)=FS2$(19,10) THEN IF EDV$(168,1)<>"Y" THEN DONT_PRINT=1; GOTO *RETURN ELSE GOTO *RETURN ! Special charge type, and a match, check whether to print
17940 IF POS(FS2$(155,1)="CI")>0 AND EDV$(38,20)=FS2$(161,10)+FS2$(19,10) THEN IF EDV$(168,1)<>"Y" THEN DONT_PRINT=1; GOTO *RETURN ELSE GOTO *RETURN ! C or I type, and a match, check whether to print
17945 GOTO 17920
17990 RETURN 
17995 ! 
18000 REM "take Q$, try to figure out date and return in Q$
18001 REM "assume MM?DD?YY(YY) format where we don't care about ?'s. if only YY then pivot on 60
18004 IF LEN(Q$)=7 AND Q$(2,1)="/" THEN Q$="0"+Q$; REM "1135234
18005 IF LEN(Q$)<6 THEN GOTO 18045 ELSE IF LEN(Q$)>=8 THEN Q$=Q$(1,2)+Q$(3,2)+Q$(7); IF LEN(Q$)>8 THEN Q$=Q$(1,8)
18009 REM "NOW in MMDDYY.. format
18010 IF LEN(Q$(5))>2 THEN YY$=Q$(5) ELSE IF Q$(5)<"60" THEN YY$="20"+Q$(5) ELSE YY$="19"+Q$(5)
18015 TMP$=Q$,Q$=DIM(6),Q$=CHR(NUM(YY$(1,3),ERR=18016)-125,ERR=18016)+YY$(4,1)+TMP$(1,4); REM "1135884
18045 RETURN 
18049 ! 
