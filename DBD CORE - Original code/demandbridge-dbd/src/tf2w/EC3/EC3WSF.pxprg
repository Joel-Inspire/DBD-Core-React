0010 REM "Generate EC Order Request Files <EC3WSF>
0035 REM "5.7 - 11/30/11 - 14.656111 - dmm - SSP# 250835
0037 REM "250835-PROCESS log has 000-EC3UTL-601, 000-EC3WSF-550.  READONLY   
0040 REM "Copyright 2011 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 ! WO233493 - Med-Pass - for DSSI - This program will be run by the PROCESS server, files from DSSI will be retrieved from a particular directory (cron job gets the files via FTP), evaluated to see if data is valid and an order can be created by EC3WS1, if so generate the EC request.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000
0110 X0$="EC3WSF",X1$="Generate EC Order Request Files"
0120 DIM Z0$(80,"-")
0200 REM "                                                                 
0240 IF Q1$="" THEN CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0295 DIM Z0$(80,X3$(235,1)); Z0$=ESC+"BG"+Z0$+ESC+"EG"
0310 IOLIST ECA$
0320 IOLIST EEH$
0330 IOLIST FM1$
0340 IOLIST IC0$
0410 IOLIST FSH$
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01O ECA...  02O EEH...  03O FM1...  04O IC0...  05O FSH...  06O FS1...  07O FS2...  13O ZZPARM"
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0525 ! 
0549 GOSUB SET_READONLY ! SSP250835
0550 DIM EC_PARM$(1275); FIND (Z[13],KEY=X3$(9,3)+"E/C",DOM=*NEXT)EC_PARM$(1)
0560 READ (Z[13],KEY=X3$(9,3)+"O/F")OFPARM$
0561 GOSUB CLEAR_READONLY ! SSP250835
0595 ! 
0600 REM "                                                                 
0610 IF Q1$="" THEN GOSUB 6000
0620 ! IF Q1$="" THEN GOSUB 8100
0640 IF Q1$="" THEN CALL "ZZPROM",".Y",X3$,Z,"Proceed?","","",0; ON Z GOTO 0641,9900
0910 SAVE_PREFIX$=PFX(1)
0920 DIR$="/usr/lib/pvx/dssi_orders"+DLM
0930 PREFIX (1)DIR$
0940 SEPERATOR$=", "
0950 ARCHIVE_DIR$="/usr/lib/pvx/dssi_orders/dssi_orders_archive"+DLM
0960 FIND$="*.txt"
0970 SERVER_DIR$="/usr/lib/pvx/www_text"+DLM
0980 FILE_MASK$="*.tx"
0985 TEMPLATE$="DSSI_text_response_with_lines_template"
0995 ! 
1000 CHECK_FOR_FILES:! Check the directory for files to process
1005 IF Q1$="" THEN PRINT @(0,12),'CE',@(10,12),"Checking for files to process...",
1006 IF NOT(NUL(Q1$)) THEN MX=FN%_LOG_MESSAGE_WITH_FLUSH("MESG","EC3WSF|CHECKING FOR FILES TO PROCESS")
1010 FILES$=""
1015 SELECT F_NAME$ FROM DIR$ WHERE F_NAME$ LIKE FIND$
1020 FILES$=FILES$+F_NAME$+"|"
1025 NEXT RECORD 
1030 IF FILES$="" THEN GOTO 5000
1035 IF MSK(FILES$,"[^\|]*\|") THEN FILE_NAME$=FILES$(1,MSL-1); FILES$=MID(FILES$,MSL+1); GOSUB PROCESS_A_FILE; GOTO *SAME
1040 GOTO CHECK_FOR_FILES
1095 ! 
1100 PROCESS_A_FILE:
1105 IF Q1$="" THEN PRINT @(0,14),'CE',@(10,14),"Processing file: "+FILE_NAME$,
1106 IF NOT(NUL(Q1$)) THEN MX=FN%_LOG_MESSAGE_WITH_FLUSH("MESG","EC3WSF|PROCESSING FILE|"+FILE_NAME$)
1107 ORD_NUM$=""
1110 IN_FILE_SLOT=HFN; OPEN (IN_FILE_SLOT,ERR=*NEXT)FILE_NAME$; GOTO FILE_OK
1115 E=ERR; IF E=0 OR E=12 THEN RETURN ELSE OPEN LOCK (IN_FILE_SLOT)FILE_NAME$; GOTO FILE_OK ! If an error 0 or 12 then just return, file is in use by another process.  IF other error then try again and let error logic handle the error.
1120 FILE_OK:
1125 IN_NAME$=DIR$+FILE_NAME$,NEW_FILE_NAME$=IN_NAME$+".z",ARCHIVE_FILE_NAME$=ARCHIVE_DIR$+FILE_NAME$+".done"
1130 ERASE NEW_FILE_NAME$,ERR=*NEXT
1135 RENAME FILE_NAME$,NEW_FILE_NAME$ ! rename file on disk so possible other processes won't pick it up
1140 ERASE ARCHIVE_FILE_NAME$,ERR=*NEXT
1150 READ_HEADER:
1155 HAVE_HEADER=0; DIM HEADER$(923); READ (IN_FILE_SLOT,END=ARCHIVE_FILE)HEADER$(1)
1160 IF HEADER$(1,6)<>"DPO010" THEN GOTO ARCHIVE_FILE
1165 IF HEADER$(7,1)<>"H" THEN GOTO ARCHIVE_FILE
1170 PROVIDER$=HEADER$(13,3),BUYER$=PROVIDER$+HEADER$(56,12) ! Provider code (3) plus Ship To Account Number (15), DSSI says these are really a max of 8 characters, will be used to find the buyer ID
1175 DIM ECA$(1540); READ (Z[1],KEY=BUYER$,DOM=NO_BUYER)IOL=0310 ! If we don't have a valid buyer, don't process the file, it will be archived
1180 LOCATION$=ECA$(61,4); IF LOCATION$=DIM(4) THEN LOCATION$="0001" ! Ship-to location for the order
1185 CUST_REQ$=STP(HEADER$(16,15),2) ! Customer PO
1190 FMN_NOTE1$=STP(HEADER$(695,50),2),FMN_NOTE2$=STP(HEADER$(745,30),2) ! General notes for order (80)
1195 FMN_NOTE3$=STP(HEADER$(864,30),2) ! Special delivery instructions
1200 FMN_NOTE4$=STP(HEADER$(894,30),2) ! Packing slip notes
1250 BUYER_CUST$=ECA$(51,10)
1255 PASSWORD$=STP(ECA$(65,15),2)
1260 SUSPEND_PL$="Y"
1265 IF STP(HEADER$(387,30))>"" THEN ATTENTION$=HEADER$(387,30) ! SSP245033, Order Contact Name
1290 HAVE_HEADER=1
1295 ! 
1300 READ_DETAIL:
1305 HAVE_DETAIL=0,NUM_LINES=0; DIM DETAIL$(188); READ (IN_FILE_SLOT,END=ARCHIVE_FILE)DETAIL$(1)
1310 IF DETAIL$(1,6)<>"DPO010" THEN GOTO ARCHIVE_FILE
1315 IF DETAIL$(7,1)<>"D" THEN GOTO ARCHIVE_FILE ! Must have at least one detail record
1320 GOSUB DETAIL_VARS
1330 GOSUB FIND_ITEM_KEY
1335 DIM DETAIL$[200]; DETAIL_INDEX=1; DETAIL$[DETAIL_INDEX]=DETAIL$
1340 HAVE_DETAIL=1
1345 LINETYPES$=LINE_TYPE$,ITEMKEYS$=ITEM_KEY$,UMS$=UM$,ELNS$=EXT_LINE_NUM$,LER1$=LINE_EXT_REF1$
1350 QUANTITYS$=STR(QUANTITY),UNITPRICES$=STR(UNIT_PRICE),CPS$=CREATE_PO$,ITEMDESCS$=ITEM_DESC$
1370 NUM_LINES+=1
1400 NEXT_DETAIL:
1405 DIM DETAIL$(188); READ (IN_FILE_SLOT,END=CREATE_EC_REQUEST_FILE)DETAIL$(1)
1410 IF DETAIL$(1,6)<>"DPO010" THEN GOTO NEXT_DETAIL
1415 IF DETAIL$(7,1)<>"D" THEN GOTO CREATE_EC_REQUEST_FILE ! We have "S" (summary) record
1420 GOSUB DETAIL_VARS
1430 GOSUB FIND_ITEM_KEY
1435 LINETYPES$+=SEPERATOR$+LINE_TYPE$,ITEMKEYS$+=SEPERATOR$+ITEM_KEY$,UMS$+=SEPERATOR$+UM$,ELNS$+=SEPERATOR$+EXT_LINE_NUM$,LER1$+=SEPERATOR$+LINE_EXT_REF1$
1440 QUANTITYS$+=SEPERATOR$+STR(QUANTITY),UNITPRICES$+=SEPERATOR$+STR(UNIT_PRICE),CPS$+=SEPERATOR$+CREATE_PO$,ITEMDESCS$+=SEPERATOR$+ITEM_DESC$
1445 DETAIL_INDEX+=1; DETAIL$[DETAIL_INDEX]=DETAIL$
1450 NUM_LINES+=1
1460 GOTO NEXT_DETAIL
1495 ! 
1500 CREATE_EC_REQUEST_FILE:
1505 IF NOT(HAVE_HEADER) OR NOT(HAVE_DETAIL) THEN GOTO ARCHIVE_FILE
1510 IF NUM_LINES=0 THEN GOTO ARCHIVE_FILE
1515 GOSUB GET_NEXT_ORDER_NUMBER; IF NO_ORDER_NUMBER THEN GOTO ARCHIVE_FILE
1530 RND$=STR(INT(RND*1000000):"0000000")
1535 OUT$=SERVER_DIR$+STP(SUB(FILE_MASK$,"*","DSSI_PO_"+DTE(JUL(DAY)+((TIM+(TCB(44)/3600))/24),*:"%Y%Mz%Dz_%Hz%mz_%sz")+"_"+RND$))
1540 OUT_TMP$=OUT$+".tmp"
1545 ERASE OUT_TMP$,ERR=*NEXT
1550 SERIAL OUT_TMP$,ERR=ARCHIVE_FILE
1555 OUTPUT=HFN; OPEN LOCK (OUTPUT)OUT_TMP$
1560 IF Q1$="" THEN PRINT @(10,16),"Creating EC request file: "+OUT_TMP$,
1565 IF NOT(NUL(Q1$)) THEN MX=FN%_LOG_MESSAGE_WITH_FLUSH("MESG","EC3WSF|CREATING EC REQUEST FILE|"+OUT_TMP$)
1590 ! 
1600 ADD_ENTRIES_TO_REQUEST_FILE:
1610 PRINT (OUTPUT)"basic=EC3WS1"
1620 PRINT (OUTPUT)"user="+BUYER$
1630 PRINT (OUTPUT)"password="+PASSWORD$
1640 PRINT (OUTPUT)"template="+TEMPLATE$
1650 PRINT (OUTPUT)"no_header=Y"
1660 PRINT (OUTPUT)"new=Y"
1665 PRINT (OUTPUT)"req_tf_order_no="+ORD_NUM$
1670 PRINT (OUTPUT)"location="+LOCATION$
1675 IF ATTENTION$>"" THEN PRINT (OUTPUT)"attention="+ATTENTION$ ! SSP245033
1680 PRINT (OUTPUT)"cust_req="+CUST_REQ$
1690 PRINT (OUTPUT)"fmn_note1="+FMN_NOTE1$
1700 PRINT (OUTPUT)"fmn_note2="+FMN_NOTE2$
1710 PRINT (OUTPUT)"fmn_note3="+FMN_NOTE3$
1720 PRINT (OUTPUT)"fmn_note4="+FMN_NOTE4$
1725 PRINT (OUTPUT)"suspend_pl="+SUSPEND_PL$
1730 PRINT (OUTPUT)"line_type="+LINETYPES$
1740 PRINT (OUTPUT)"item_key="+ITEMKEYS$
1750 PRINT (OUTPUT)"um="+UMS$
1760 PRINT (OUTPUT)"ext_line_number="+ELNS$
1770 PRINT (OUTPUT)"quantity="+QUANTITYS$
1780 PRINT (OUTPUT)"line_unit_price="+UNITPRICES$
1790 PRINT (OUTPUT)"create_po="+CPS$
1800 PRINT (OUTPUT)"item_desc="+ITEMDESCS$
1810 PRINT (OUTPUT)"line_external_ref1="+LER1$
1850 PRINT (OUTPUT)"purchase=Y"
1895 ! 
1900 DONE_WITH_ENTRIES:
1910 CLOSE (OUTPUT)
1920 RENAME OUT_TMP$,OUT$,ERR=*NEXT
1925 ! 
1930 ARCHIVE_FILE:
1934 CLOSE (IN_FILE_SLOT) ! SSP245518
1935 RENAME NEW_FILE_NAME$,ARCHIVE_FILE_NAME$
1950 IF Q1$="" THEN PRINT @(0,16),'CE',@(10,16),"Archive file name: "+ARCHIVE_FILE_NAME$,
1951 IF NOT(NUL(Q1$)) THEN MX=FN%_LOG_MESSAGE_WITH_FLUSH("MESG","EC3WSF|ARCHIVE FILE NAME|"+ARCHIVE_FILE_NAME$)
1955 IF ORD_NUM$="" THEN GOTO *RETURN
1960 ! 
1965 GOSUB FIND_OPEN_ORDER
1970 IF ORDER_NOT_FOUND THEN GOSUB ORDER_NOT_FOUND_WORK; GOTO *RETURN
1975 GOSUB CREATE_PO_ACK
1990 RETURN 
1995 ! 
3500 GET_NEXT_ORDER_NUMBER:! code from OF2UAA
3505 NO_ORDER_NUMBER=1,ORD_NUM$=""
3510 EXTRACT (Z[5],KEY=BUYER_CUST$(1,2),DOM=*RETURN)IOL=0410
3514 IF OFPARM$(34,1)=" " THEN ORD_NUM$=FSH$(3,8),N1=5 ELSE IF OFPARM$(34,1)="R" THEN ORD_NUM$=FSH$(116,8),N1=118 ELSE N1=NUM(OFPARM$(34,1),ERR=*RETURN)*6+132; ORD_NUM$=FSH$(1,2)+FSH$(N1,6)
3520 IF ORD_NUM$(1,2)="  " THEN ORD_NUM$(1,2)="00"
3525 P0=NUM(FSH$(N1,6)),P0=P0+1; IF P0>999999 THEN P0=1
3526 FSH$(N1,6)=STR(P0:"000000"); WRITE (Z[5],KEY=BUYER_CUST$(1,2))FSH$
3530 FIND (Z[6],KEY=ORD_NUM$,DOM=*NEXT); GOTO 3514
3535 NO_ORDER_NUMBER=0
3540 IF Q1$="" THEN PRINT @(10,18),"Requested order number: "+ORD_NUM$,
3541 IF NOT(NUL(Q1$)) THEN MX=FN%_LOG_MESSAGE_WITH_FLUSH("MESG","EC3WSF|REQUESTED ORDER NUMBER|"+ORD_NUM$)
3545 RETURN 
3549 ! 
3550 FIND_OPEN_ORDER:! check FS1 to make sure order was created
3555 ORDER_NOT_FOUND=1
3557 WAIT 5 ! SSP246069
3560 WAIT 1; EXTRACT (Z[6],KEY=ORD_NUM$,DOM=*NEXT,ERR=CHECK_ERR)FS1$; ORDER_NOT_FOUND=0; GOTO DONE_FIND_OPEN_ORDER ! SSP245262
3565 IF LOOP_COUNT++>10 THEN LOOP_COUNT=1; GOTO DONE_FIND_OPEN_ORDER ELSE GOTO 3560
3595 DONE_FIND_OPEN_ORDER:RETURN ! SSP245204
3599 ! 
3600 CREATE_PO_ACK:! call FM2ODW to create initial acknowledgement (A)
3605 IF Q1$="" THEN PRINT @(10,20),"Creating initial PO acknowledgement",
3606 IF NOT(NUL(Q1$)) THEN MX=FN%_LOG_MESSAGE_WITH_FLUSH("MESG","EC3WSF|CREATING INITIAL PO ACKNOWLEDGEMENT|HEADER|") ! 245262
3610 CALL "FM2ODW;CREATE_HEADER",ERR=*NEXT,X3$,X4$,"A",ORD_NUM$,HEADER$,OTHER${ALL}
3615 ! 
3620 FOR X=1 TO DETAIL_INDEX
3625 PO_DETAIL$=DETAIL$[X]
3630 GOSUB GET_FS2_RECORD
3632 IF NOT(NUL(Q1$)) THEN MX=FN%_LOG_MESSAGE_WITH_FLUSH("MESG","EC3WSF|CREATING INITIAL PO ACKNOWLEDGEMENT|DETAIL|LINE "+STR(X)+"|FOUND "+STR(FS2_NOT_FOUND)) ! 245262
3635 IF FS2_NOT_FOUND THEN GOTO 3650
3640 CALL "FM2ODW;CREATE_DETAIL",ERR=*NEXT,X3$,X4$,"A",ORD_NUM$,ORD_LINE_NUM$,PO_DETAIL$,LINE_STATUS$,OTHER${ALL}
3650 NEXT X
3655 ! 
3668 IF NOT(NUL(Q1$)) THEN MX=FN%_LOG_MESSAGE_WITH_FLUSH("MESG","EC3WSF|CREATING INITIAL PO ACKNOWLEDGEMENT|SUMMARY|") ! 245262
3670 CALL "FM2ODW;CREATE_SUMMARY_AND_FINISH",ERR=*NEXT,X3$,X4$,"A",ORD_NUM$,OTHER${ALL}
3695 RETURN 
3699 ! 
3700 GET_FS2_RECORD:
3705 FS2_NOT_FOUND=1
3710 READ (Z[7],KEY=ORD_NUM$,DOM=*NEXT)
3715 NEXT_FS2: FS2_KEY$=KEY(Z[7],END=*RETURN)
3720 IF FS2_KEY$(1,8)<>ORD_NUM$ THEN GOTO *RETURN
3725 DIM FS2$(356); READ (Z[7],KEY=FS2_KEY$)FS2$(1)
3730 IF FS2$(239,5)<>PO_DETAIL$(8,5) THEN GOTO NEXT_FS2
3735 ORD_LINE_NUM$=FS2$(6,3)
3740 IF FS2$(155,1)="M" THEN LINE_STATUS$="IR" ELSE LINE_STATUS$="IA"
3750 FS2_NOT_FOUND=0
3795 RETURN 
3799 ! 
4000 NO_BUYER:! Buyer record not found, change archive file extension to .nb and go on to archive the file
4010 ARCHIVE_FILE_NAME$=ARCHIVE_DIR$+FILE_NAME$+".nb"
4020 GOTO ARCHIVE_FILE
4049 ! 
4050 ORDER_NOT_FOUND_WORK:! If order not found, rename the archive file using the .no extension, and attempt to erase the EC request file, the assumption being the TEXT EC server is not running, no order ack will be created so they will need to move the file back in for processing once they realize this or have the file (new name) sent again
4055 ! 
4060 NEW_ARCHIVE_FILE_NAME$=ARCHIVE_DIR$+FILE_NAME$+".no"
4065 RENAME ARCHIVE_FILE_NAME$,NEW_ARCHIVE_FILE_NAME$,ERR=*NEXT
4070 ! 
4080 ERASE OUT$,ERR=*NEXT
4090 RETURN 
4099 ! 
4100 CHECK_ERR:! SSP245262, got an error.  If error 0 then we want to retry until we get it, otherwise go to regular error logic.
4105 J=ERR,K=TCB(5)
4110 IF NOT(NUL(Q1$)) THEN MX=FN%_LOG_MESSAGE_WITH_FLUSH("MESG","EC3WSF|ERROR OCCURRED|ORDER="+ORD_NUM$+"|ERR="+STR(J)+"|LINE="+STR(K)) ! SSP245262
4120 IF J=0 THEN RETRY 
4130 GOTO 9000
4135 ! 
4140 RETURN 
4145 ! 
5000 REM "EOJ
5010 ! IF Q1$="" THEN C=T; GOSUB 8150
5020 IF Q1$="" THEN CALL "ZZPROM",".4",X3$,Z,"Process complete!!","","",0
5025 IF NOT(NUL(Q1$)) THEN MX=FN%_LOG_MESSAGE_WITH_FLUSH("MESG","EC3WSF|PROCESS COMPLETE")
5040 GOTO 9900
5095 ! 
6000 REM "BACKGROUND                                                       
6005 PRINT (0,ERR=6016)'SB',
6020 PRINT @(0,4),"This program will check the incoming purchase order directory and process any ",@(0,5),"files found.  A copy of the incoming PO file will be archived once processed.  ",@(0,6),"If the program can not find an EC buyer to generate the order request, the ",@(0,7),"file will not be processed, but will be archived.",
6165 PRINT (0,ERR=6166)'SF',
6190 RETURN 
6199 ! 
7000 FIND_ITEM_KEY:! Read the EEH file with the Provider Code, if a record is found, use that customer code plus the item to see if there is an FM1 record, if so that is the one to use.  If not, check for a stock item in IC0 using the item, if found, that is the one to use.  If not, read the FM1 file with the buyer's customer code plus the item, if found, that is the one to use.  If none of these three checks find a valid item code, create a message line indicating the item was not found.
7005 TRY_1:DIM EEH$(127); READ (Z[2],KEY=PAD(PROVIDER$,30),DOM=TRY_2)IOL=0320
7010 ITEM_KEY$=EEH$(31,10)+ITEM_NUMBER$
7015 DIM FM1$(448); READ (Z[3],KEY=ITEM_KEY$,DOM=TRY_2)IOL=0330
7020 ITEM_DESC$="",LINE_TYPE$="C",CREATE_PO$="N"; GOTO *RETURN
7024 ! 
7025 TRY_2:
7030 ITEM_KEY$=DIM(10)+ITEM_NUMBER$
7035 DIM IC0$(187); READ (Z[4],KEY=ITEM_KEY$,DOM=TRY_3)IOL=0340
7040 ITEM_DESC$="",LINE_TYPE$="I",CREATE_PO$="N"; GOTO *RETURN
7044 ! 
7045 TRY_3:
7050 ITEM_KEY$=BUYER_CUST$+ITEM_NUMBER$
7055 DIM FM1$(448); READ (Z[3],KEY=ITEM_KEY$,DOM=ITEM_NOT_FOUND)IOL=0330
7060 ITEM_DESC$="",LINE_TYPE$="C",CREATE_PO$="Y"; GOTO *RETURN
7065 ! 
7070 ITEM_NOT_FOUND:! Create message line with information
7075 ITEM_KEY$="",ITEM_DESC$="Item Not Found: "+ITEM_NUMBER$+DIM(1)+STR(QUANTITY)+"/"+UM$+DIM(1)+STR(UNIT_PRICE:"####0.00"),LINE_TYPE$="M",CREATE_PO$="N",QUANTITY=0,UM$="",UNIT_PRICE=0
7080 ! 
7095 RETURN 
7099 ! 
7400 SET_READONLY:
7410 SET_PARAM 'XI'
7420 SET_READONLY_END:RETURN 
7430 CLEAR_READONLY:
7435 SET_PARAM -'XI'
7440 CLEAR_READONLY_END:RETURN 
7500 DETAIL_VARS:
7505 EXT_LINE_NUM$=DETAIL$(10,3) ! PO Line Number is in 8 for 5, zero filled to left, we only support 3 chars
7510 ITEM_NUMBER$=DETAIL$(13,10) ! Item Number is in 13 for 30, we will capture 10 chars
7515 QUANTITY=NUM(DETAIL$(123,10),ERR=*NEXT) ! Quantity
7520 UM$=UCS(DETAIL$(133,2)) ! Unit of Measure
7525 UNIT_PRICE=NUM(DETAIL$(135,11),ERR=*NEXT) ! Unit Cost
7530 LINE_EXT_REF1$=DETAIL$(8,5) ! PO Line Number, will write to FS2
7590 RETURN 
7595 ! 
8100 REM "GOSUB here, once, at the beginning, after the background is set and before the Proceed? question. Set T to total # to do (by calling ZZINFO) and T0 to the reporting interval (report every T0 number of records) this is typically 2% of total; This also prints a message (@8115),so adjust accordingly                                                
8110 CALL "ZZINFO",Z[1],T9,X3$,T,T0,K,B,D,S0,S1,F$
8115 PRINT @(0,10),"There are "+STR(T)+" records to process"
8129 REM "Set T0, we make sure T0 is > 1, because later on we MOD and look for avalue of 1. IF T0 is 1, then nothing would get reported. We look for a result of 1 because this causes the first record to automatically start the reporting instead of waiting until the T0'th record to get the first report                                                     
8130 T0=INT(T*.02); IF T0<=1 THEN T0=2
8145 RETURN 
8150 REM "Call this each time to update the bar graph. Display horiz. bar graph given total #, T and current #, C, and time counter T1 (T1 is init'ed here and used here, just don't use it somewhere else)            
8155 CALL "ZZBARG",X3$,"HG",19,10,50,T1,T,C
8195 RETURN 
9000 REM "ERROR PROCESSING
9010 Y5=ERR,Y6=TCB(5)
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,1
9045 REM 
9050 ON Y7 GOTO 9060,9100,9190,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9190 GOSUB 6600; GOTO 9900
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9700 REM "FILES
9740 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,0; ON Z0 GOTO 0521,9900
9790 RETURN 
9900 REM "END PROGRAM                                      
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9920 PREFIX (1)SAVE_PREFIX$
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
56000 REM "233493-Retrieve/process DSSI PO files, create/send DSSI PO Acks.
56002 REM "245033-Addition to DSSI Order program (EC3WSF), Order Contact Name,
56004 REM "245204-DSSI order LCC0022N5310, our order 125647, no po ack sent.  
56006 REM "245262-Po Ack being sent but getting truncated, malformed
56008 REM "245518-PO acks not created correctly - too many files open
56010 ! 246069 - Add WAIT 5 before checking for order header
56012 REM "250835-PROCESS log has 000-EC3UTL-601, 000-EC3WSF-550.  READONLY   
