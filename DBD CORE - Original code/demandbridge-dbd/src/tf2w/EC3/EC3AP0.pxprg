0010 REM "Approval Order Status <EC3AP0>
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 01/09/19 - 11.030277 - dmm - SSP# 303115
0037 REM "303115-FN%HTML_ESC$ additions in EC programs                       
0040 REM "Copyright 2019 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0100 SETERR 9000
0110 X0$="EC3AP0",X1$="Approval Order Status"
0120 EOL$=$0D0A$; EOL$=ATH(STP(EC_PARM$(57,8),1))
0130 NY$="NY"
0310 IOLIST EDU$
0320 IOLIST FS1$,FS1[0],FS1[1],FS1[2],FS1[3],FS1[4],FS1[5],FS1[6],FS1[7],FS1[8],FS1[9],FS1[10],FS1[11],FS1[12],FS1[13]
0350 IOLIST FS6$,FS6[0],FS6[1],FS6[2],FS6[3],FS6[4],FS6[5],FS6[6],FS6[7]
0370 IOLIST FT3$,FT3[0],FT3[1],FT3[2],FT3[3],FT3[4],FT3[5],FT3[6],FT3[7],FT3[8],FT3[9],FT3[10],FT3[11],FT3[12],FT3[13]
0440 IOLIST FT4$,FT4[0],FT4[1],FT4[2],FT4[3],FT4[4],FT4[5],FT4[6],FT4[7],FT4[8],FT4[9],FT4[10],FT4[11],FT4[12],FT4[13],FT4[14],FT4[15],FT4[16],FT4[17],FT4[18],FT4[19],FT4[20],FT4[21],FT4[22],FT4[23],FT4[24],FT4[25],FT4[26],FT4[27],FT4[28],FT4[29]
0450 IOLIST FS2$,FS2[0],FS2[1],FS2[2],FS2[3],FS2[4],FS2[5],FS2[6],FS2[7],FS2[8],FS2[9],FS2[10],FS2[11],FS2[12],FS2[13],FS2[14],FS2[15],FS2[16],FS2[17],FS2[18],FS2[19],FS2[20],FS2[21],FS2[22],FS2[23],FS2[24],FS2[25],FS2[26],FS2[27],FS2[28],FS2[29]
0480 IOLIST SM4$,SM4(0),SM4(1),SM4(2),SM4(3),SM4(4),SM4(5),SM4(6),SM4(7),SM4(8),SM4(9),SM4(10),SM4(11),SM4(12)
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))],FS6[7],BLANKS$(100),FT3[13]
0510 Z$="01O EDU... 06O ECW...  10O ECA... 13O ZZPARM 16O ECS... 17O ECU... "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0525 GOSUB SET_READONLY
0550 REM 'GET E/C PARAMETERS
0560 READ (Z[13],KEY=X3$(9,3)+"E/C",DOM=9900)ECPARMS$
0600 REM "Build search strings
0910 CALL "ZZDISP","AX",EC$[2](51,10),"A/R",X3$,CUST_CODE$,"",0,0,X4$
1000 REM "Process DATA array
1005 DATA_TAGS$="001<template>002<maxrows>003<position_order>004<direction>005<session_id>006<approval_template>"
1006 MAX_ROWS=25,POSITION_ORDER$="",DIRECTION$="F",ORDER_TYPES_TO_REPORT$="",BY_DATE$="N"
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1018 DPOS=POS("<"+TAG$+">"=DATA_TAGS$); IF DPOS=0 THEN GOTO 1090 ELSE DINDEX=NUM(DATA_TAGS$(DPOS-3,3),ERR=1090)
1019 ON DINDEX GOTO 1090,1021,1022,1023,1024,1025,1026,1090
1021 TEMPLATE$=VALUE$; GOTO 1090; REM "template
1022 MAX_ROWS=NUM(VALUE$,ERR=1090); GOTO 1090; REM "maxrows
1023 POSITION_ORDER$=VALUE$; GOTO 1090; REM "position_order
1024 IF VALUE$="backward" THEN DIRECTION$="B"; GOTO 1090; REM "direction, only set if it is 'backward'
1025 SESSION_ID$=VALUE$; GOTO 1090; REM "Get session id
1026 APPROVAL_TEMPLATE$=VALUE$; GOTO 1090; REM "approval_template
1090 NEXT I
1100 REM "process
1101 VERSION$="52.0000.148750.172982.182543.185396.20050801",PROGRAM$=PGN; DIM BYBINFO$[5]; BYBINFO$[1]=PROGRAM$,BYBINFO$[2]=VERSION$,BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1105 READ (Z[16],KEY=EC$[2](51,10))ECS$; REM "read in customer parameters
1106 IF EC$[2](867,1)="Y" AND EC_PARM$(946,1)="Y" THEN APPROVAL_ACCESS$="Y"; IF EC$[2](1063,1)="Y" THEN IS_SUPER_APP$="Y",ALTKEY=3 ELSE ALTKEY=2 END_IF ELSE APPROVAL_ACCESS$="N",ALTKEY=1
1107 IF APPROVAL_ACCESS$="Y" AND STP(APPROVAL_TEMPLATE$,3," ")<>"" THEN TEMPLATE$=APPROVAL_TEMPLATE$; CALL "EC3SVT",X3$,X4$,EC_PARM$,EC${ALL},TEMPLATE$; REM "if buyer has approval powers then redirect to approval template
1108 BYBINFO$[3]=TEMPLATE$
1109 IF NUM(EC_PARM$(433,3))<>0 OR MAX_ROWS=0 THEN MAX_ROWS=NUM(EC_PARM$(433,3))
1110 GOSUB 3400; REM "get approval orders for display
1500 REM "Use template$ to open file, read line by line and insert
1501 IF %BASIC2$<>"" THEN GOTO 1995; REM "156580
1505 CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1506 REM "Setup line_tags$
1507 LINE_TAGS$="001<cust_code>002<cust_name>003<ec_company>004<entrystart>005<buttonnext>006<buttonprev>007<session_id>"
1510 READ (100,END=1595)LINE$; GOSUB 7550
1515 INDEX=POS("?tf?"=LINE$); IF INDEX=0 THEN PRINT (OUTPUT)LINE$,EOL$,; GOTO 1510
1520 END_INDEX=POS("?"=LINE$(INDEX+4)),TAG$=LINE$(INDEX+4,END_INDEX-1),LINE1$=LINE$(1,INDEX-1),LINE2$=LINE$(INDEX+END_INDEX+4),LPOS=POS("<"+TAG$+">"=LINE_TAGS$); IF LPOS=0 THEN LINDEX=0 ELSE LINDEX=NUM(LINE_TAGS$(LPOS-3,3))
1530 GOSUB 2000; GOTO 1515
1995 GOTO 9900
1999 REM "Get tag value & substitute
2000 ON LINDEX GOTO 2090,2001,2002,2003,2004,2005,2006,2007,2090
2001 LINE$=LINE1$+FN%HTML_ESC$(CUST_CODE$)+LINE2$; GOTO 2095; REM "cust_code SSP303115
2002 LINE$=LINE1$+FN%HTML_ESC$(STP(EC$[1](23,35),1))+LINE2$; GOTO 2095; REM "cust_name SSP303115
2003 LINE$=LINE1$+FN%HTML_ESC$(STP(EC_PARM$(7,50),1))+LINE2$; GOTO 2095; REM "ec_company SSP303115
2004 GOSUB 3200; LINE$=TABLE$; GOTO 2095; REM "entrystart
2005 GOSUB 3500; LINE$=BUTTON$; GOTO 2095; REM "buttonnext
2006 GOSUB 3600; LINE$=BUTTON$; GOTO 2095; REM "buttonprev
2007 LINE$=LINE1$+FN%HTML_ESC$(STP(EC$[1](1,7),1))+LINE2$; GOTO 2095; REM "session_id from EC$ SSP303115
2090 LINE$=LINE1$+"?"+LINE2$; GOTO 2095; REM "tag not found, replace with '?'
2095 RETURN 
3200 REM "Output entries, using ENTRY_TEMPLATE$ to pass information, create TABLE$ to output
3202 ENTRY_TAGS$="001<worksheet>002<date_created>003<time_created>004<orig_buyer_id>005<orig_buyer_name>006<pa_buyer_id>007<pa_buyer_name>008<current_status>009<last_change_date>010<last_change_time>011<approval_closed>012<approval_comments>"
3203 REM "Setup ENTRY_TEMPLATE$
3204 ENTRY_TEMPLATE$=LINE$,TABLE$=""
3205 READ (100,END=3206)LINE$; GOSUB 7550; ENTRY_TEMPLATE$=ENTRY_TEMPLATE$+LINE$+EOL$; IF POS("?tf?entryend?"=LINE$)=0 THEN GOTO 3205
3209 REM "Now read order$, if B direction do it backwards
3210 IF DIRECTION$="B" THEN START_PT=TOTAL_RECORDS,END_PT=1,STEP_SIZE=-1 ELSE START_PT=1,END_PT=TOTAL_RECORDS,STEP_SIZE=1
3211 IF TOTAL_RECORDS=0 THEN TABLE$=""; GOTO 3295
3215 FOR ENTRY_INDEX=START_PT TO END_PT STEP STEP_SIZE
3225 ENTRY$=ENTRY_TEMPLATE$
3230 GOSUB 3300
3235 IF LEN(TABLE$)+LEN(ENTRY$)>62000 THEN PRINT (OUTPUT)TABLE$,EOL$,; TABLE$="" END_IF ; TABLE$=TABLE$+ENTRY$; REM "#134089
3245 NEXT ENTRY_INDEX
3295 RETURN 
3300 REM "Given FS1$, create row in table
3305 EINDEX=POS("?tf?"=ENTRY$); IF EINDEX=0 THEN GOTO 3395
3306 EEND_INDEX=POS("?"=ENTRY$(EINDEX+4)),ETAG$=ENTRY$(EINDEX+4,EEND_INDEX-1),ENTRY1$=ENTRY$(1,EINDEX-1),ENTRY2$=ENTRY$(EINDEX+EEND_INDEX+4),EPOS=POS("<"+ETAG$+">"=ENTRY_TAGS$); IF EPOS=0 THEN EINDEX=0 ELSE EINDEX=NUM(ENTRY_TAGS$(EPOS-3,3))
3310 ON EINDEX GOTO 3389,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3389
3311 ENTRY$=ENTRY1$+ORDER$[ENTRY_INDEX,1](1,10)+ENTRY2$; GOTO 3390; REM "worksheet
3312 INDATE$=ORDER$[ENTRY_INDEX,1](11,6); GOSUB 7900; ENTRY$=ENTRY1$+OUTDATE$+ENTRY2$; GOTO 3390; REM "date_created
3313 INTIME$=ORDER$[ENTRY_INDEX,1](17,4); GOSUB 7920; ENTRY$=ENTRY1$+OUTTIME$+ENTRY2$; GOTO 3390; REM "time_created
3314 ENTRY$=ENTRY1$+STP(ORDER$[ENTRY_INDEX,1](21,15),2)+ENTRY2$; GOTO 3390; REM "orig_buyer_id
3315 ENTRY$=ENTRY1$+STP(ORDER$[ENTRY_INDEX,1](322,35),2)+ENTRY2$; GOTO 3390; REM "orig_buyer_name
3316 ENTRY$=ENTRY1$+STP(ORDER$[ENTRY_INDEX,1](46,15),2)+ENTRY2$; GOTO 3390; REM "pa_buyer_id
3317 ENTRY$=ENTRY1$+STP(ORDER$[ENTRY_INDEX,1](357,35),2)+ENTRY2$; GOTO 3390; REM "pa_buyer_name
3318 ENTRY$=ENTRY1$+STP(ORDER$[ENTRY_INDEX,1](62,20),2)+ENTRY2$; GOTO 3390; REM "current_status
3319 INDATE$=ORDER$[ENTRY_INDEX,1](36,6); GOSUB 7900; ENTRY$=ENTRY1$+OUTDATE$+ENTRY2$; GOTO 3390; REM "last_change_date
3320 INTIME$=ORDER$[ENTRY_INDEX,1](42,4); GOSUB 7920; ENTRY$=ENTRY1$+OUTTIME$+ENTRY2$; GOTO 3390; REM "last_change_time
3321 ENTRY$=ENTRY1$+STP(ORDER$[ENTRY_INDEX,1](61,1),2)+ENTRY2$; GOTO 3390; REM "approval_closed
3322 ENTRY$=ENTRY1$+STP(ORDER$[ENTRY_INDEX,1](82,240),2)+ENTRY2$; GOTO 3390; REM "approval_comments
3389 ENTRY$=ENTRY1$+"?"+ENTRY2$; GOTO 3390; REM "tag not found, replace with '?'
3390 GOTO 3305
3395 RETURN 
3400 REM "build approval order status screen using EDU
3401 REM "fill order$[] with orders, using position_order$ and direction$, if direction$='B'(ackwards) then 1->total_records is in reverse order, so read it later as total_records-> 1
3402 IF IS_SUPER_APP$="Y" THEN POSITION_KEY_PREFIX$=EC$[2](51,10) ELSE POSITION_KEY_PREFIX$=EC$[2](1,15)
3403 GOSUB 3450
3404 REM "PRINT VERY_FIRST_ORDER$," ",VERY_LAST_ORDER$; ESCAPE ; REM "IF ORDER POSITION KEY PASSED IN THEN USE THE IDENTIFIED PO SORT ON THE CUSTOMER PARAMETERS AS THE SORT
3405 IF POSITION_ORDER$="" AND DIRECTION$="B" THEN IF ORDER_POSITION_KEY$="" THEN POSITION_ORDER$=POSITION_KEY_PREFIX$+$FFFFFFFFFFFF$ ELSE POSITION_ORDER$=POSITION_KEY_PREFIX$+ORDER_POSITION_KEY$; REM "if in backwards order, start at end of file
3406 IF POSITION_ORDER$="" AND DIRECTION$="F" THEN IF ORDER_POSITION_KEY$="" THEN POSITION_ORDER$=POSITION_KEY_PREFIX$ ELSE POSITION_ORDER$=POSITION_KEY_PREFIX$+ORDER_POSITION_KEY$; REM "if forward, start at beginning of file unless direct customer po access requested with order position key
3410 ORDER_LIST$="",FIRST_ORDER$="",LAST_ORDER$="",TOTAL_RECORDS=0,INDEX=1; DIM ORDER$[MAX_ROWS,2]
3411 REM "ORDERS$[X]  0=EDUKEY$  1=EDU$
3415 READ (Z[1],KEY=POSITION_ORDER$,KNO=ALTKEY,DOM=*NEXT)
3420 IF DIRECTION$="B" THEN EDUKEY$=KEP(Z[1],KNO=ALTKEY,END=3435) ELSE EDUKEY$=KEY(Z[1],KNO=ALTKEY,END=3435)
3421 IF EDUKEY$(1,LEN(POSITION_KEY_PREFIX$))<>POSITION_KEY_PREFIX$ THEN GOTO 3435 ELSE READ (Z[1],KEY=EDUKEY$,KNO=ALTKEY,DOM=3420)IOL=0310
3422 IF ALTKEY=1 AND EC$[2](984,1)<>"Y" AND EDU$(61,1)="Y" THEN REMOVE (Z[1],KEY=EDUKEY$(16,10)); GOTO 3420 ELSE IF (ALTKEY=2 OR ALTKEY=3) AND EDU$(61,1)="Y" THEN GOTO 3420; REM "if order closed then remove from EDU file.  SSP172982, if this is the buyer and they don't have the all status parm set then remove, else if this is a PA and order closed then don't show
3423 IF ALTKEY=1 AND EC$[2](984,1)="Y" AND EDU$(61,1)="Y" THEN CALL "EC3DAT",ERR=3420,X3$,11,"",EDU$(11,6),ORDER_DAYS_OLD$; ORDER_DAYS_OLD=NUM(ORDER_DAYS_OLD$); IF NUM(ECPARMS$(125,3))<>0 THEN IF (-1)*ORDER_DAYS_OLD>NUM(ECPARMS$(125,3)) THEN GOTO 3420 ! SSP172982, if buyer and buyer parm says show all status and this is a closed record, then check to see if it's over Oldest order to show status
3425 ORDER$[INDEX,0]=EDUKEY$,ORDER$[INDEX,1]=EDU$,TOTAL_RECORDS=TOTAL_RECORDS+1,INDEX=INDEX+1; IF MAX_ROWS<>0 AND TOTAL_RECORDS>=MAX_ROWS THEN GOTO 3435; REM "skip to correct place to exit / 158066
3430 GOTO 3420
3435 IF TOTAL_RECORDS=0 THEN GOTO 3445
3440 IF DIRECTION$="B" THEN FIRST_ORDER$=ORDER$[TOTAL_RECORDS,1](1,10),LAST_ORDER$=ORDER$[1,1](1,10) ELSE FIRST_ORDER$=ORDER$[1,1](1,10),LAST_ORDER$=ORDER$[TOTAL_RECORDS,1](1,10)
3445 RETURN 
3450 REM "Set VERY_FIRST_ORDER$ and VERY_LAST_ORDER$. These will be used to determine when to NOT show prev and next buttons
3451 VERY_FIRST_ORDER$="",VERY_LAST_ORDER$=""
3454 SORTKEY_HI$=POSITION_KEY_PREFIX$; REM "
3460 READ (Z[1],KEY=SORTKEY_HI$,KNO=ALTKEY,DOM=3461)
3465 VK$=KEY(Z[1],END=3467); READ (Z[1],KEY=VK$,KNO=ALTKEY)IOL=0310; IF (ALTKEY=1 AND EC$[2](984,1)<>"Y" AND EDU$(61,1)="Y") OR ((ALTKEY=2 OR ALTKEY=3) AND EDU$(61,1)="Y") THEN GOTO *SAME ELSE IF VK$(1,LEN(SORTKEY_HI$))=SORTKEY_HI$ THEN GOSUB CHECK_DATE; GOTO 3466 ELSE GOTO 3470 ! SSP240480
3466 IF REPORT$="Y" THEN VERY_FIRST_ORDER$=VK$(LEN(POSITION_KEY_PREFIX$)+1,10); GOTO 3470 ELSE GOTO 3465 ! SSP240480
3470 READ (Z[1],KEY=SORTKEY_HI$+$FF$,KNO=ALTKEY,DOM=3471)
3471 VK$=KEP(Z[1],END=3473); READ (Z[1],KEY=VK$,KNO=ALTKEY)IOL=0310; IF (ALTKEY=1 AND EC$[2](984,1)<>"Y" AND EDU$(61,1)="Y") OR ((ALTKEY=2 OR ALTKEY=3) AND EDU$(61,1)="Y") THEN GOTO *SAME ELSE IF VK$(1,LEN(SORTKEY_HI$))=SORTKEY_HI$ THEN GOSUB CHECK_DATE; GOTO 3472 ELSE GOTO 3474 ! SSP240480
3472 IF REPORT$="Y" THEN VERY_LAST_ORDER$=VK$(LEN(POSITION_KEY_PREFIX$)+1,10); GOTO 3474 ELSE GOTO 3471 ! SSP240480
3495 RETURN 
3500 REM "Output next button, using BUTTON_NEXT_TEMPLATE$ to pass information, creating BUTTON$, if needed
3502 BUTTON$="",BUTTON_NEXT_TAGS$="001<position_order>002<session_id>003<active_order_sort>"
3503 REM "Setup BUTTON_NEXT_TEMPLATE$
3505 READ (100,END=3506)LINE$; GOSUB 7550; BUTTON_NEXT_TEMPLATE$=BUTTON_NEXT_TEMPLATE$+LINE$+EOL$; IF POS("?tf?buttonnextend?"=LINE$)=0 THEN GOTO 3505
3510 IF LAST_ORDER$=VERY_LAST_ORDER$ THEN BUTTON$=""; GOTO 3595 ELSE BUTTON$=BUTTON_NEXT_TEMPLATE$
3515 BNINDEX=POS("?tf?"=BUTTON$); IF BNINDEX=0 THEN GOTO 3591
3516 BNEND_INDEX=POS("?"=BUTTON$(BNINDEX+4)),BNTAG$=BUTTON$(BNINDEX+4,BNEND_INDEX-1),BUTTON1$=BUTTON$(1,BNINDEX-1),BUTTON2$=BUTTON$(BNINDEX+BNEND_INDEX+4),BNPOS=POS("<"+BNTAG$+">"=BUTTON_NEXT_TAGS$); IF BNPOS=0 THEN BUTTON$=BUTTON1$+BUTTON2$,BNINDEX=0 ELSE BNINDEX=NUM(BUTTON_NEXT_TAGS$(BNPOS-3,3))
3520 ON BNINDEX GOTO 3590,3521,3522,3523,3590
3521 BUTTON$=BUTTON1$+POSITION_KEY_PREFIX$+LAST_ORDER$+BUTTON2$; GOTO 3590; REM "position_order
3522 BUTTON$=BUTTON1$+EC$[1](1,7)+BUTTON2$; GOTO 3590; REM "session_id from EC$
3523 BUTTON$=BUTTON1$+ACTIVE_ORDER_SORT$+BUTTON2$; GOTO 3590; REM "acvtive order sort
3590 GOTO 3515
3595 RETURN 
3600 REM "Output previous button, using BUTTON_PREV_TEMPLATE$ to pass information, creating BUTTON$, if needed
3602 BUTTON$="",BUTTON_PREV_TAGS$="001<position_order>002<session_id>003<active_order_sort>"
3605 READ (100,END=3606)LINE$; GOSUB 7550; BUTTON_PREV_TEMPLATE$=BUTTON_PREV_TEMPLATE$+LINE$+EOL$; IF POS("?tf?buttonprevend?"=LINE$)=0 THEN GOTO 3605
3610 IF FIRST_ORDER$=VERY_FIRST_ORDER$ THEN BUTTON$=""; GOTO 3695 ELSE BUTTON$=BUTTON_PREV_TEMPLATE$
3615 BNINDEX=POS("?tf?"=BUTTON$); IF BNINDEX=0 THEN GOTO 3691
3616 BNEND_INDEX=POS("?"=BUTTON$(BNINDEX+4)),BNTAG$=BUTTON$(BNINDEX+4,BNEND_INDEX-1),BUTTON1$=BUTTON$(1,BNINDEX-1),BUTTON2$=BUTTON$(BNINDEX+BNEND_INDEX+4),BNPOS=POS("<"+BNTAG$+">"=BUTTON_PREV_TAGS$); IF BNPOS=0 THEN BUTTON$=BUTTON1$+BUTTON2$,BNINDEX=0 ELSE BNINDEX=NUM(BUTTON_PREV_TAGS$(BNPOS-3,3))
3620 ON BNINDEX GOTO 3690,3621,3622,3623,3690
3621 BUTTON$=BUTTON1$+POSITION_KEY_PREFIX$+FIRST_ORDER$+BUTTON2$; GOTO 3690; REM "position_order
3622 BUTTON$=BUTTON1$+EC$[1](1,7)+BUTTON2$; GOTO 3690; REM "session_id
3623 BUTTON$=BUTTON1$+ACTIVE_ORDER_SORT$+BUTTON2$; GOTO 3690; REM "active order sort
3690 GOTO 3615
3695 RETURN 
7400 SET_READONLY:
7410 SET_PARAM 'XI'
7420 SET_READONLY_END:RETURN 
7430 CLEAR_READONLY:
7435 SET_PARAM -'XI'
7440 CLEAR_READONLY_END:RETURN 
7550 REM "Send LINE$ to EC3BYB for generic fields processing
7560 CALL "EC3BYB",ERR=7561,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,LINE$,BYBINFO${ALL},BYBOPTIONS$,100 ! 227154
7595 RETURN 
7600 REM "get description of order type"
7605 ON POS(FS1$(47,1)="RW") GOTO 7610,7611
7610 ORDER_TYPE$="Reorder"; GOTO 7620
7611 ORDER_TYPE$="Whse Release"; GOTO 7620
7640 RETURN 
7900 REM "convert date
7905 DIM OUTDATE$(10); IF STP(INDATE$,3," ")="" THEN DIM OUTDATE$(0); GOTO 7915
7910 CALL "ZZDISP","DXS",INDATE$,"",X3$,OUTDATE$,"",1,10,X4$
7915 RETURN 
7920 REM "convert time
7921 IF INTIME$=DIM(4) THEN DIM OUTTIME$(0); GOTO 7926
7925 CALL "EC3DAT",X3$,12,INTIME$,OUTTIME$,""
7929 RETURN 
8000 REM "Given customer number and order number, read FS8 to get key to read FS6 to get order date (34,6), and calculate the correct rev_date$ for this order to read into FTI with
8005 READ (Z[8],KEY=EC$[2](51,10)+POSITION_ORDER$,DOM=8006)
8010 DIM KEY8$(30); KEY8$=KEY(Z[8],END=8011)
8011 IF KEY8$(1,18)<>EC$[2](51,10)+POSITION_ORDER$ THEN GOTO 8045
8015 READ (Z[5],KEY=KEY8$(1,10)+KEY8$(19,1)+KEY8$(20,10)+KEY8$(11,8)+KEY8$(30,1),DOM=8045)TMP8$
8030 REV_DATE$=FNR$(TMP8$(34,6))
8045 RETURN 
8050 REM "Given customer number and order number, read FS8 to get key to read FS6 to get customer P/O, type, and form code date to read into ASC with
8055 READ (Z[8],KEY=EC$[2](51,10)+POSITION_ORDER$,DOM=8056)
8060 DIM KEY8$(30); KEY8$=KEY(Z[8],END=8011)
8061 IF KEY8$(1,18)<>EC$[2](51,10)+POSITION_ORDER$ THEN GOTO 8095
8065 READ (Z[5],KEY=KEY8$(1,10)+KEY8$(19,1)+KEY8$(20,10)+KEY8$(11,8)+KEY8$(30,1),DOM=8095)TMP8$
8075 ORDER_POSITION_KEY$=TMP8$(54,15),REST_OF_KEY$=TMP8$(11,19); IF DIRECTION$="B" THEN REST_OF_KEY$=REST_OF_KEY$+$FF$
8095 RETURN 
8099 ! 
8100 CHECK_DATE:! SSP240480, check date against number of days to report order status, set REPORT$ accordingly
8105 REPORT$="Y"
8110 IF ALTKEY=1 AND EC$[2](984,1)="Y" AND EDU$(61,1)="Y" THEN CALL "EC3DAT",ERR=*RETURN,X3$,11,"",EDU$(11,6),ORDER_DAYS_OLD$; ORDER_DAYS_OLD=NUM(ORDER_DAYS_OLD$); IF NUM(ECPARMS$(125,3))<>0 THEN IF (-1)*ORDER_DAYS_OLD>NUM(ECPARMS$(125,3)) THEN REPORT$="N"
8145 RETURN 
8149 ! 
8910 DEF FND$(Z9$)=Z9$(1*2+1,2)+"/"+Z9$(7-1*2,2)+"/"+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
8915 DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
8920 DEF FNR$(X$)=STR(10000000-NUM(STR(ASC(X$(1,1)))+X$(2)):"0000000")
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9005 GOSUB CLEAR_READONLY
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$); REM "131928
9090 GOTO 9900
9900 REM "End
9905 GOSUB CLEAR_READONLY
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9950 EXIT 
9999 END 
56002 REM "207913-Purchase approvals: Super-approver must be able to approve all worksheets
56004 REM "227154-Modify EC3BYB to support a condition tag : ?tf?if?[expr]    
56006 REM "240480-Previous link displays on first screen in error
56008 REM "303115-FN%HTML_ESC$ additions in EC programs                       
