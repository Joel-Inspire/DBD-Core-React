0010 REM "<EC3ICX> Send product inventory numbers to Four51
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 06/10/21 - 8.727083 - dmm - SSP# 307356
0037 REM "307356-DBD-183-DBSPT-118015;EC3ICX LOT PRICE issue                 
0040 REM "Copyright 2021 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0100 SETERR 9000
0110 X0$="EC3ICX",X1$="Send product inventory numbers to Four51"
0120 EOL$=$0D0A$
0130 K0=20,K1=1
0135 C9=-1
0200 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0300 REM "IOLISTS
0310 IOLIST A$
0320 IOLIST B$
0330 IOLIST IC1$,IC1[0],IC1[1],IC1[2],IC1[3],IC1[4],IC1[5],IC1[6],IC1[7],IC1[8],IC1[9],IC1[10],IC1[11],IC1[12],IC1[13],IC1[14],IC1[15],IC1[16],IC1[17],IC1[18],IC1[19],IC1[20],IC1[21],IC1[22],IC1[23],IC1[24],IC1[25],IC1[26],IC1[27],IC1[28],IC1[29],IC1[30],IC1[31],IC1[32],IC1[33],IC1[34],IC1[35],IC1[36],IC1[37],IC1[38],IC1[39],IC1[40]
0340 IOLIST FM1$,FM1[0],FM1[1],FM1[2],FM1[3],FM1[4],FM1[5],FM1[6],FM1[7],FM1[8],FM1[9],FM1[10],FM1[11],FM1[12],FM1[13],FM1[14],FM1[15],FM1[16],FM1[17],FM1[18],FM1[19],FM1[20],FM1[21],FM1[22],FM1[23],FM1[24],FM1[25],FM1[26],FM1[27],FM1[28],FM1[29],FM1[30],FM1[31]
0380 IOL_IC0:IOLIST IC0$,IC0{ALL}
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01O AR1...  02O IC0...  03O IC1...  04O FM1...  05O ECR...  06O EDC...  07O FMP...  08O ECS...  13O ZZPARM  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0525 FIND (Z[13],KEY=X3$(9,3)+"XMLOUT",DOM=*NEXT)XMLOUT$
0527 IF STP(MID(XMLOUT$,50,120),2)="" THEN GOTO 9900
0528 URL$=STP(MID(XMLOUT$,50,120),2); REM "External URL
0529 SHARED_SECRET$=STP(MID(XMLOUT$,170,40),2); REM "External Shared secret code
0530 STP_MODE=3 ! 291976 - By default, strip all spaces out of InteropsIds
0531 ACTION_MODE$="I" ! 290933 - Default mode: I-Inventory; P-Pricing
0535 THOUSANDS$="M   "; IF STP(EC_PARM$(1089,4),3)>"" THEN THOUSANDS$=EC_PARM$(1089,4) ! 298311
0600 REM "
1000 REM "Process DATA array
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1025 SWITCH TAG$ ! 1185 end switch
1030 CASE "template"; TEMPLATE$=VALUE$; BREAK
1040 CASE "send_data"; IF STP(VALUE$,2)="Y" THEN SEND_DATA=1; BREAK
1041 CASE "preserve_spaces"; IF STP(VALUE$,2)="Y" THEN STP_MODE=2; BREAK ! 291976 - only trim leading/trailing spaces, not internal spaces
1045 CASE "log_response"; IF STP(VALUE$,2)="Y" THEN LOG_RESPONSE=1; BREAK
1180 DEFAULT ; VIA TAG$=VALUE$; BREAK ! Set to same name variable as TAG$
1185 END SWITCH ! 1050
1190 NEXT I
1195 DIM BYBINFO$[5]; BYBINFO$[1]=PGN,BYBINFO$[2]="193728.20060925",BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1200 ! 
1500 REM "Process template
1504 CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1510 READ (100,END=DONE_WITH_TEMPLATE)LINE$; LINE$=FNBYB$(LINE$)
1515 CHKTAG=1
1520 WHILE CHKTAG ! 1920 wend
1522 P1=MSK(LINE$,"\?tf\?[^?]*\?"); IF P1=0 THEN CHKTAG=0; BREAK
1530 TAG$=LINE$(P1,MSL); LINE1$=LINE$(1,P1-1),LINE2$=MID(LINE$,P1+MSL)
1600 SWITCH TAG$ ! 1910 end switch
1605 CASE "?tf?item_start?"; GOSUB PROCESS_CUST; LINE$=CUST_SECTION$; BREAK
1610 CASE "?tf?shared_secret?"; LINE$=LINE1$+SHARED_SECRET$+LINE2$; BREAK
1900 DEFAULT ; LINE$=LINE1$+LINE2$ ! didn't match existing tag, so remove it
1910 END SWITCH ! 1600
1920 WEND ! 1520
2810 IF LINE$<>"" THEN PRINT (OUTPUT)LINE$
2900 GOTO 1510; REM next read
2950 DONE_WITH_TEMPLATE:
2951 IF SEND_DATA THEN GOSUB SEND_XML_FILE
2960 GOTO 9900
2970 ! 
3000 PROCESS_CUST:! Add PO line info based on PO line section
3005 CUST_SECTION$=""; CUST_TEMPLATE$=LINE$
3010 READ (100,END=DONE_WITH_TEMPLATE)CUST_LINE$; CUST_LINE$=SUB(SUB(CUST_LINE$,$0D$,""),$0A$,""); CUST_TEMPLATE$+=FNBYB$(CUST_LINE$)+EOL$; IF POS("?tf?item_end?"=CUST_TEMPLATE$)=0 THEN GOTO *SAME
3040 READ (Z[1],KEY="",DOM=*NEXT)
3050 NEXT_CUST:
3060 K$=KEY(Z[1],END=CUST_DONE)
3064 GOSUB SET_READONLY; READ (Z[1],KEY=K$,DOM=*NEXT)AR1$; GOSUB CLEAR_READONLY; IF ACTION_MODE$="I" THEN IF MID(AR1$,474,1)<>"Y" THEN GOTO NEXT_CUST ELSE GOSUB GET_CUST_PARAMS; GOTO 3066 END_IF ELSE IF ACTION_MODE$="P" THEN IF MID(AR1$,542,1)<>"Y" THEN GOTO NEXT_CUST ELSE GOSUB GET_CUST_PARAMS; GOTO 3066 END_IF ! Webservice not enabled for this customer. SSP263900, was line 3065, moved to 3064, change DOM to next line so readonly is cleared, if rec found then check parms and if set get cust parameters and go on to line 3066 to start processing.  SSP300318-DBD-131-DBSPT-78893, Inventory vs. Price now separate customer parameters
3065 GOSUB CLEAR_READONLY; GOTO NEXT_CUST ! SSP263900, got the DOM, need to clear readonly then get next customer.
3066 GOSUB GET_ITEM_LIST; READ (ITEMCHN,KEY="",DOM=*NEXT)
3067 NEXT_ITEM:
3068 I$=KEY(ITEMCHN,END=NEXT_CUST); READ (ITEMCHN,KEY=I$)ITEMFILE$ ! Make a note of the source of the item (whether IC0 or/and FM1; if BOTH then use IC0 to lookup base price, should match FM1)
3069 GOSUB SET_READONLY; DIM IC0$(188),IC0[40]; READ (Z[2],KEY=I$,ERR=*PROCEED)IOL=IOL_IC0; READ (Z[2],KEY=I$,ERR=*PROCEED,REC=IC0$); GOSUB CLEAR_READONLY ! SSP271893, READONLY
3070 CUST_LINE$=CUST_TEMPLATE$,CUST_CHKTAG=1
3071 GOSUB GET_INVENTORY
3072 GOSUB GET_ITEM_ECPARAMS; IF UCS(EXCLUDE_CREATE_PO_ITEMS$)="Y" AND MID(ECR$,255,1)="Y" THEN GOTO NEXT_ITEM ! 307233/DBD-90, Skip item if set to create POs (not inventory item)
3073 IF ACTION_MODE$="P" THEN GOSUB GET_ITEM_PRICE
3075 WHILE CUST_CHKTAG
3090 P1=MSK(CUST_LINE$,"\?tf\?[^?]*\?"); IF P1=0 THEN CUST_CHKTAG=0; BREAK
3095 TAG$=CUST_LINE$(P1,MSL); CUST_LINE1$=CUST_LINE$(1,P1-1),CUST_LINE2$=MID(CUST_LINE$,P1+MSL)
3100 SWITCH TAG$
3105 CASE "?tf?product_interop_id?"; CUST_LINE$=CUST_LINE1$+FNX$(BASE_INTEROP$)+CUST_LINE2$; BREAK
3106 CASE "?tf?variant_interop_id?"; CUST_LINE$=CUST_LINE1$+FNX$(VARIANT_INTEROP$)+CUST_LINE2$; BREAK
3107 CASE "?tf?fm1_item_code?"; CUST_LINE$=CUST_LINE1$+FNX$(STP(MID(FM1$,11,10),2))+CUST_LINE2$; BREAK ! fm1_item_code, WO246038
3108 CASE "?tf?fm1_item_desc?"; CUST_LINE$=CUST_LINE1$+FNX$(STP(MID(FM1$,42,40),2))+CUST_LINE2$; BREAK ! fm1_item_desc, WO246038
3109 CASE "?tf?cic_code?"; CUST_LINE$=CUST_LINE1$+FNX$(STP(MID(FM1$,350,20),2))+CUST_LINE2$; BREAK ! cic_code, WO246038
3110 CASE "?tf?quantity?"; CUST_LINE$=CUST_LINE1$+STR(INT(IC1INFO[20]/SELL_UM))+CUST_LINE2$; BREAK
3111 CASE "?tf?ic_cust_code?"; CUST_LINE$=CUST_LINE1$+FNX$(STP(MID(I$,1,10),3))+CUST_LINE2$; BREAK
3120 CASE "?tf?ic_item_code?"; CUST_LINE$=CUST_LINE1$+FNX$(STP(MID(I$,11,10),3))+CUST_LINE2$; BREAK
3121 CASE "?tf?quantity_onhand?"; CUST_LINE$=CUST_LINE1$+STR(INT(IC1INFO[19]/SELL_UM))+CUST_LINE2$; BREAK ! quantity_on_hand, WO246038
3122 CASE "?tf?quantity_onhand_in_eaches?"; CUST_LINE$=CUST_LINE1$+STR(INT(IC1INFO[19]))+CUST_LINE2$; BREAK ! quantity_on_hand_in_eaches, WO246038
3123 CASE "?tf?item_source?"; CUST_LINE$=CUST_LINE1$+ITEMFILE$+CUST_LINE2$; BREAK ! 290933 - item_source - whether item found in IC0 or FM1 or from both files
3124 CASE "?tf?lot_sell_price?"; CUST_LINE$=CUST_LINE1$+LOT_PRICE$+CUST_LINE2$; BREAK ! 290933 - lot_sell_price
3125 CASE "?tf?qbp_qty1?"; BI=1; BREAKQTY$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKQTY$=STR(Q[BI,1]:"0") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKQTY$+CUST_LINE2$; BREAK ! 290933 - qbp_qty1
3126 CASE "?tf?qbp_price1?"; BI=1; BREAKPRICE$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKPRICE$=STR(P[BI]:"0.00") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKPRICE$+CUST_LINE2$; BREAK ! 290933 - qbp_price1
3127 CASE "?tf?qbp_qty2?"; BI=2; BREAKQTY$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKQTY$=STR(Q[BI,1]:"0") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKQTY$+CUST_LINE2$; BREAK ! 290933 - qbp_qty2
3128 CASE "?tf?qbp_price2?"; BI=2; BREAKPRICE$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKPRICE$=STR(P[BI]:"0.00") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKPRICE$+CUST_LINE2$; BREAK ! 290933 - qbp_price2
3129 CASE "?tf?qbp_qty3?"; BI=3; BREAKQTY$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKQTY$=STR(Q[BI,1]:"0") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKQTY$+CUST_LINE2$; BREAK ! 290933 - qbp_qty3
3130 CASE "?tf?qbp_price3?"; BI=3; BREAKPRICE$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKPRICE$=STR(P[BI]:"0.00") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKPRICE$+CUST_LINE2$; BREAK ! 290933 - qbp_price3
3131 CASE "?tf?qbp_qty4?"; BI=4; BREAKQTY$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKQTY$=STR(Q[BI,1]:"0") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKQTY$+CUST_LINE2$; BREAK ! 290933 - qbp_qty4
3132 CASE "?tf?qbp_price4?"; BI=4; BREAKPRICE$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKPRICE$=STR(P[BI]:"0.00") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKPRICE$+CUST_LINE2$; BREAK ! 290933 - qbp_price4
3133 CASE "?tf?qbp_qty5?"; BI=5; BREAKQTY$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKQTY$=STR(Q[BI,1]:"0") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKQTY$+CUST_LINE2$; BREAK ! 290933 - qbp_qty5
3134 CASE "?tf?qbp_price5?"; BI=5; BREAKPRICE$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKPRICE$=STR(P[BI]:"0.00") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKPRICE$+CUST_LINE2$; BREAK ! 290933 - qbp_price5
3135 CASE "?tf?qbp_qty6?"; BI=6; BREAKQTY$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKQTY$=STR(Q[BI,1]:"0") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKQTY$+CUST_LINE2$; BREAK ! 290933 - qbp_qty6
3136 CASE "?tf?qbp_price6?"; BI=6; BREAKPRICE$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKPRICE$=STR(P[BI]:"0.00") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKPRICE$+CUST_LINE2$; BREAK ! 290933 - qbp_price6
3137 CASE "?tf?qbp_qty7?"; BI=7; BREAKQTY$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKQTY$=STR(Q[BI,1]:"0") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKQTY$+CUST_LINE2$; BREAK ! 290933 - qbp_qty7
3138 CASE "?tf?qbp_price7?"; BI=7; BREAKPRICE$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKPRICE$=STR(P[BI]:"0.00") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKPRICE$+CUST_LINE2$; BREAK ! 290933 - qbp_price7
3139 CASE "?tf?qbp_qty8?"; BI=8; BREAKQTY$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKQTY$=STR(Q[BI,1]:"0") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKQTY$+CUST_LINE2$; BREAK ! 290933 - qbp_qty8
3140 CASE "?tf?qbp_price8?"; BI=8; BREAKPRICE$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKPRICE$=STR(P[BI]:"0.00") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKPRICE$+CUST_LINE2$; BREAK ! 290933 - qbp_price8
3141 CASE "?tf?qbp_qty9?"; BI=9; BREAKQTY$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKQTY$=STR(Q[BI,1]:"0") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKQTY$+CUST_LINE2$; BREAK ! 290933 - qbp_qty9
3142 CASE "?tf?qbp_price9?"; BI=9; BREAKPRICE$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKPRICE$=STR(P[BI]:"0.00") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKPRICE$+CUST_LINE2$; BREAK ! 290933 - qbp_price9
3143 CASE "?tf?qbp_qty10?"; BI=10; BREAKQTY$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKQTY$=STR(Q[BI,1]:"0") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKQTY$+CUST_LINE2$; BREAK ! 290933 - qbp_qty10
3144 CASE "?tf?qbp_price10?"; BI=10; BREAKPRICE$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKPRICE$=STR(P[BI]:"0.00") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKPRICE$+CUST_LINE2$; BREAK ! 290933 - qbp_price10
3145 CASE "?tf?qbp_qty11?"; BI=11; BREAKQTY$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKQTY$=STR(Q[BI,1]:"0") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKQTY$+CUST_LINE2$; BREAK ! 290933 - qbp_qty11
3146 CASE "?tf?qbp_price11?"; BI=11; BREAKPRICE$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKPRICE$=STR(P[BI]:"0.00") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKPRICE$+CUST_LINE2$; BREAK ! 290933 - qbp_price11
3147 CASE "?tf?qbp_qty12?"; BI=12; BREAKQTY$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKQTY$=STR(Q[BI,1]:"0") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKQTY$+CUST_LINE2$; BREAK ! 290933 - qbp_qty12
3148 CASE "?tf?qbp_price12?"; BI=12; BREAKPRICE$=""; IF Q[1,0] AND Q[BI,0]<>0 THEN BREAKPRICE$=STR(P[BI]:"0.00") END_IF ; CUST_LINE$=CUST_LINE1$+BREAKPRICE$+CUST_LINE2$; BREAK ! 290933 - qbp_price12
3149 CASE "?tf?base_price?"; CUST_LINE$=CUST_LINE1$+BASEPRICE$+CUST_LINE2$; BREAK ! 290933 - base_price
3150 CASE "?tf?exclude_inv_export?"; EIE$="N"; IF MID(ECR$,597,1)="Y" THEN EIE$="Y" END_IF ; CUST_LINE$=CUST_LINE1$+EIE$+CUST_LINE2$; BREAK ! WO294840
3151 CASE "?tf?exclude_prc_export?"; EPE$="N"; IF MID(ECR$,598,1)="Y" THEN EPE$="Y" END_IF ; CUST_LINE$=CUST_LINE1$+EPE$+CUST_LINE2$; BREAK ! WO294840
3152 DEFAULT ! didn't match existing tags, so discard it, unless it is one of these special situations below ! WO294840 move line 3150 to 3152
3153 IF POS("?tf?ic0_"=TAG$)=1 THEN GOSUB PROCESS_IC0_TAG; PP=FNP(STP(IC0_TAG_VAL$)); BREAK
3154 IF POS("?tf?fm1_"=TAG$)=1 THEN GOSUB PROCESS_FM1_TAG; PP=FNP(STP(FM1_TAG_VAL$)); BREAK ! SSP300318-DBD-131
3156 CUST_LINE$=CUST_LINE1$+CUST_LINE2$ ! didn't match existing tag, so discard it
3157 END SWITCH 
3159 WEND 
3160 CUST_SECTION$+=CUST_LINE$
3170 ITEM_DONE:
3171 PRINT (OUTPUT)CUST_SECTION$,; CUST_SECTION$=""
3180 GOTO NEXT_ITEM
3190 CUST_DONE:
3195 RETURN 
3200 ! 
4000 GET_INVENTORY:
4105 DIM IC1(60),IC1[40],IC1INFO[20],FM1$(500),FM1[40]
4106 READ (Z[3],KEY=MID(I$,1,20),DOM=*NEXT)
4107 GOSUB SET_READONLY; READ (Z[4],KEY=MID(I$,1,20),DOM=*NEXT)IOL=0340; READ (Z[4],KEY=MID(I$,1,20),ERR=*PROCEED,REC=FM1$) ! SSP#216860 SSP300318-DBD-131
4108 GOSUB CLEAR_READONLY ! SSP#216860
4110 NEXT_REC: IC1_KEY$=KEY(Z[3],END=GET_INVENTORY_END); IF MID(IC1_KEY$,1,20)<>MID(I$,1,20) THEN GOTO GET_INVENTORY_END
4120 READ (Z[3],KEY=IC1_KEY$)IOL=0330
4125 FOR VV=0 TO 11
4130 IF POS(STR(VV:"00")="0102",2)<>0 THEN GOTO HIGHEST_VAL
4135 IC1INFO[VV]=IC1INFO[VV]+IC1[VV]; GOTO NEXT_VV
4140 HIGHEST_VAL:REM "Process highest value
4145 IF IC1INFO[VV]<IC1[VV] THEN IC1INFO[VV]=IC1[VV]
4150 NEXT_VV:
4155 NEXT VV; REM "Process next IC1 variable
4160 GOTO NEXT_REC
4161 GET_INVENTORY_END:
4165 REM "Calculate other variables
4170 IC1INFO[19]=IC1INFO[3]+IC1INFO[4]-IC1INFO[5]+IC1INFO[6]; REM "ic1_on_hand
4175 IC1INFO[20]=IC1INFO[19]-IC1INFO[7]; REM "ic1_qty_avail
4177 GOSUB GET_ACTIVE_UOM; SELL_UM=PACK; IF SELL_UM=0 THEN SELL_UM=1; REM "Set selling unit for reporting capability
4180 ! PRINT STR(SELL_UM)," - ",STR(IC1INFO[20])," FM1 : ",FM1$(1,30),STR(FM1[4])
4196 RETURN 
4197 ! 
4200 ! "Send XML Inventory data file to Four51
4211 SEND_XML_FILE:
4213 FILE_TO_SEND$=PTH(OUTPUT); CLOSE (OUTPUT)
4216 CALL "ZZ2CMD",ERR=*NEXT,X3$,X4$,"{WEBSVC_UPD_INV}",URL$+SEP+FILE_TO_SEND$+SEP+"Content-type=text/xml","NR",RET_CODE,RESP$
4217 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|"+PGN+"|SEND_XML_FILE|"+FILE_TO_SEND$+"|RESPCODE|"+STR(RET_CODE))
4218 IF LOG_RESPONSE THEN MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|"+PGN+"|RESPONSE|"+RESP$) ! 227154
4220 RETURN 
4230 ! 
4300 GET_ITEM_ECPARAMS:
4310 GOSUB SET_READONLY; DIM ECR$(1000); BASE_INTEROP$="",VARIANT_INTEROP$=""; ECR$(1,20)=I$(1,20); FIND (Z[5],KEY=ECR$(1,20),DOM=*NEXT)ECR$ ! Get WebEC item params
4320 GOSUB CLEAR_READONLY
4330 IF NOT(NUL(ECR$(577,20))) THEN BASE_INTEROP$=STP(ECR$(577,20),STP_MODE),VARIANT_INTEROP$=STP(MID(I$,1,20),STP_MODE) ELSE BASE_INTEROP$=STP(MID(I$,1,20),STP_MODE) ! 291976 - Honor whitespace mode
4395 RETURN 
4399 ! 
6600 GET_ITEM_LIST:
6605 IF FN%ISOPEN(ITEMCHN) THEN CLOSE (ITEMCHN)
6610 OPEN (HFN)"*MEMORY*"; ITEMCHN=LFO
6615 READ (Z[2],KEY=MID(K$,1,10),DOM=*NEXT)
6620 LIST_IC0: I$=KEY(Z[2],END=LIST_IC0_DONE); GOSUB SET_READONLY; READ (Z[2],KEY=I$,ERR=*PROCEED)IC0$; GOSUB CLEAR_READONLY ! SSP271893, READONLY
6625 IF MID(I$,1,10)<>MID(K$,1,10) THEN GOTO *NEXT ELSE WRITE (ITEMCHN,KEY=I$)"IC0"; GOTO LIST_IC0 ! Check if all inventory has been processed for this customer
6630 LIST_IC0_DONE:IF ACTION_MODE$<>"P" THEN RETURN ! Check if pricing mode, if so list all FM1 items as well
6635 READ (Z[4],KEY=MID(K$,1,10),DOM=*NEXT)
6640 LIST_FM1: I$=KEY(Z[4],END=LIST_FM1_DONE); GOSUB SET_READONLY; READ (Z[4],KEY=I$,ERR=*PROCEED)FM1$; GOSUB CLEAR_READONLY ! SSP271893, READONLY
6645 IF MID(I$,1,10)<>MID(K$,1,10) THEN GOTO *NEXT ELSE ITEMFILE$=""; READ (ITEMCHN,KEY=I$,DOM=*PROCEED)ITEMFILE$; WRITE (ITEMCHN,KEY=I$)ITEMFILE$+"FM1"; GOTO LIST_FM1 ! Check if all custom items have been collected for this customer
6650 LIST_FM1_DONE:
6695 RETURN 
6699 ! 
6700 PROCESS_IC0_TAG:
6705 TAG$=MID(TAG$,5); TAG$=STP(TAG$,1,"?")
6706 IC0_TAG_VAL$=""
6710 IC0_TAG_VAL$=EVS(SUB(UCS(TAG$),"IC0_","IC0.")+"$"); IF LEN(IC0_TAG_VAL$)=0 THEN IC0_TAG_VAL$=STR(EVN(SUB(UCS(TAG$),"IC0_","IC0.")))
6745 RETURN 
6749 ! 
6800 GET_CUST_PARAMS:
6801 WHSE_GRP$="",CUST_WHSE_LIST$="",LOT_SELL_MODE$=""
6803 IF ACTION_MODE$<>"P" THEN RETURN ! Lookups only required if price mode; otherwise we have all we need for inventory mode so return
6805 GOSUB SET_READONLY
6810 DIM ECS$(1000); FIND (Z[8],KEY=K$(1,10),DOM=*RETURN)ECS$; IF ECS$(747,1)<>"Y" THEN GOTO *RETURN ELSE LOT_SELL_MODE$=ECS$(747,1); IF ECS$(515,21)<>DIM(21) THEN WHSE_GRP$=ECS$(515,21) ELSE GOTO GET_CUST_DFLT_WHSE ! If highest lot price param is not on then no need for a whse list lookup, leave; if whse group is not set then we fall through to do the default whse logic
6820 DIM EDC$(129); FIND (Z[6],KEY=WHSE_GRP$,DOM=GET_CUST_DFLT_WHSE)EDC$; FOR WGI=0 TO 11; CUST_WHSE_LIST$=CUST_WHSE_LIST$+STP(EDC$(82+WGI*4,4),1); NEXT WGI
6825 GOSUB CLEAR_READONLY
6830 RETURN ! Found whse group, get list and stop
6840 GET_CUST_DFLT_WHSE:DIM FMPD$(244); FIND (Z[7],KEY="D"+K$(1,10),DOM=*NEXT)FMPD$; IF NOT(NUL(FMPD$(238,4))) THEN CUST_WHSE_LIST$=FMPD$(238,4); REM "customer default whse
6850 IF NUL(CUST_WHSE_LIST$) THEN CUST_WHSE_LIST$="0001"; REM "if default warehouse not set then defaults to warehouse 0001
6860 IF MID(ECS$,233,1)="Y" AND NUL(MID(ECS$,515,2)) THEN IF CUST_WHSE_LIST$(1,1)="9" THEN CUST_WHSE_LIST$=CUST_WHSE_LIST$+"0"+CUST_WHSE_LIST$(2,3) ELSE CUST_WHSE_LIST$=CUST_WHSE_LIST$+"9"+CUST_WHSE_LIST$(2,3); REM "if try pulling from alternate warehouse set on the customer parameters then set a second default warehouse code opposite of the current default
6890 CUST_PARAMS_DONE:GOSUB CLEAR_READONLY
6894 ! IF WHO="crg" THEN PRINT "EC3ICX|",K$,"|LOTPRICE|",MID(ECS$,747,1),"|WHSELIST|",CUST_WHSE_LIST$; ESCAPE 
6895 RETURN 
6899 ! 
6900 GET_ITEM_PRICE:
6902 LOT_PRICE$="",LOT_PRICE=0 ! DBD-183-DBSPT-118015-SSP307356
6905 IF LOT_SELL_MODE$="Y" AND POS("IC0"=ITEMFILE$)>0 THEN {! If highest lot sell price parameter enabled and item is an inventory item
6910 WHSE_LIST$=CUST_WHSE_LIST$; IF NOT(NUL(ECR$(256,48))) THEN WHSE_LIST$=STP(MID(ECR$,256,48),2)
6915 LPOPTIONS$="W"; CALL "FM2ICF",ERR=*NEXT,X3$,X4$,EC_PARM$,EC${ALL},I$,WHSE_LIST$,"",0,LOT_PRICE,LOT_PRICE_FOUND,LPOPTIONS$
6920 IF LOT_PRICE>0 AND LOT_PRICE_FOUND THEN LOT_PRICE$=STR(LOT_PRICE:"0.00")
6925  }
6930 QBP_OPTIONS$=DIM(3); CALL "EC3UTE",X3$,X4$,EC_PARM$,EC${ALL},Z[7],IC0$,IC0{ALL},AR1$(398,3),Q{ALL},P{ALL},QBP_OPTIONS$
6940 BASEPRICE$=""; IF POS("IC0"=ITEMFILE$)>0 THEN BASEPRICE$=STR(IC0[0]:"0.00") ELSE BASEPRICE$=STR(FM1[3]:"0.00")
6995 RETURN 
6999 ! 
7151 FNX:
7152 DEF FNX$(LOCAL X$)
7165 TRANSLATE X$,"&"+$05$+"&amp;"+"<"+$04$+"&lt;"+">"+$04$+"&gt;"+QUO+$06$+"&quot;"
7170 RETURN X$
7195 END DEF
7400 SET_READONLY:
7410 SET_PARAM 'XI'
7420 SET_READONLY_END:RETURN 
7430 CLEAR_READONLY:
7435 SET_PARAM -'XI'
7440 CLEAR_READONLY_END:RETURN 
7700 PROCESS_FM1_TAG:! SSP300318-DBD-131
7705 TAG$=MID(TAG$,5); TAG$=STP(TAG$,1,"?")
7706 FM1_TAG_VAL$=""
7710 FM1_TAG_VAL$=EVS(SUB(UCS(TAG$),"FM1_","FM1.")+"$"); IF LEN(FM1_TAG_VAL$)=0 THEN FM1_TAG_VAL$=STR(EVN(SUB(UCS(TAG$),"FM1_","FM1.")))
7745 RETURN 
7749 ! 
7800 ! "Get active uom
7805 GET_ACTIVE_UOM:
7830 IF STP(FM1$(238,4),3," ")="" OR FM1[25]=0 THEN UM$=FM1$(100,4),PACK=FM1[4] ELSE UM$=FM1$(238,4),PACK=FM1[25]
7860 UM$=STP(UM$,1),EXT_UM$=STP(UM$,1)+"/"+STR(PACK:"##,##0")
7870 IF STP(UM$,1)=STP(THOUSANDS$,1) THEN IF EC_PARM$(948,1)="Y" THEN PACK=1 ! SSP185844, if suppress extending for thousands parm is Y, then set divisor to 1.
7880 IF MID(XMLOUT$,210,1)="Y" THEN IF FM1[0]>0 THEN PACK=FM1[0] ! SSP224325, use carton pack as divisor
7890 RETURN 
7900 ! 
8750 FNP:
8751 DEF FNP(LOCAL DATA$)
8760 CUST_LINE$=CUST_LINE1$+DATA$+CUST_LINE2$
8790 RETURN 0
8800 FNBYB:
8801 DEF FNBYB$(LOCAL DATA$)
8802 ! Send DATA$ through EC3BYB
8820 CALL "EC3BYB",ERR=*NEXT,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,DATA$,BYBINFO${ALL},BYBOPTIONS$,100 ! 227154
8840 RETURN DATA$
8845 END DEF
9000 REM "ERROR PROCESSING
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9900 REM "END PROGRAM
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9920 GOSUB CLEAR_READONLY
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
56002 REM "193728-Four51 Webservices; ShipNoticeRequest,UpdateProductInventory
56004 REM "207104-Four51 Inventory Webservice for company 589 not working     
56006 REM "208092-Four51 Update Product Inventory Web service modifications   
56008 REM "224325-UpdateProductInventory, use carton pack as divisor.
56009 REM "227154-Modify EC3BYB to support a condition tag : ?tf?if?[expr]    
56010 REM "246038-Integration project - Customer Cape Clogs : Daily sched job
56012 REM "263900-Four51 UpdateProductInventory for comp 589 getting error 0  
56014 REM "271893-Four51 UpdateProductInventory gets error 0 reading IC0.     
56015 REM "291976-Flowpoint Inventory integration - preserve internal spaces  
56016 REM "290933-FlowPoint; Price and Product Updates to Four51              
56018 REM "294840-EC Item Parameters to exclude from inventory and/or price   
56019 REM "307233-DBD-90; Exclude PO items from EC Inventory Export           
56020 REM "300318-DBD-131-FlowPoint; Propago item price/qty break price update feature
56021 REM "300318-DBD-131-FlowPoint; Add specific customer parameter for item price export
56022 REM "307356-DBD-183-DBSPT-118015;EC3ICX LOT PRICE issue                 
