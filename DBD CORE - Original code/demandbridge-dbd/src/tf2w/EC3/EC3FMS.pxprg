0010 REM "EC Item Specs <EC3FMS>"
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 07/30/18 - 15.329444 - dmm - SSP# 302215
0037 REM "302215-FlowPoint; Comp 080 PDQ order processing error in item      
0040 REM "Copyright 2018 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0085 SWITCH TCB(20) ! Number of param in CALL
0090 CASE 7; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT; BREAK ! Standard Webec call entry point, from EC3SRV
0095 CASE 8; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},ITEM_KEY$,OPTIONS$,LINE$; BREAK ! Internal program call entry point, from non-EC3SRV programs
0099 END SWITCH 
0100 SETERR 9000
0110 X0$="EC3FMS",X1$="EC Item Specs"
0120 EOL$=$0D0A$; REM EOL$=ATH(STP(EC_PARM$(57,8),1))
0127 HTML_TEXT$="Content-type: text/html"
0140 DIM MESS_INFO$[20]
0150 REM "EC$[1]=ESB session record, EC$[2]=client number        , ec$[3]=message from server to called program, EC$[4]=formatted date, EC$[5]=formatted time EC$[6]=ECA2$ available web catalogs (concatonated string) EC$[7]=customer webec parms (ECS)  EC$[8]=image path (customer if set otherwise from ec_parm) EC$[9]=ST_LIST sort code record EC$[10]=reporting whse list EC$[11]=(1,4)warehouse code to use for o/e FM2RT0  (5,4)=would contain the 'other'warehouse for availability checking o/e messaging <not passed to FM2RT0, EC$[12]=email params,see 8000s [13] UNUSED ,[14]=ECY$, [15]=inventory system parameters [16]=Credict Card code/desc list [17]=active webcode [18-20] unused
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01O FSE...  02O FSF...  03O FMS...  04O FMU...  05O FMV...  06O FMP...  07O FM1...  08O IC0...  09O FT1...  13O ZZPARM  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0570 FIND (Z[13],KEY=X3$(9,3)+"F/M")FMPARM$ ! 259010
0600 ! Set Masks
0610 COUNT_MASK$="###"
1000 REM "Process DATA array
1005 IF NOT(OUTPUT) THEN GOTO 1200 ! called mode, skip to main processing
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1025 SWITCH TAG$ ! 1185 end switch
1180 DEFAULT ; VIA TAG$=VALUE$; BREAK ! Set to same name variable as TAG$
1185 END SWITCH ! 1050
1190 NEXT I
1195 DIM BYBINFO$[5]; BYBINFO$[1]=PGN,BYBINFO$[2]="259010.20130312",BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1200 ! Get info
1203 GOSUB SET_READONLY ! SSP245945
1204 ITEM_KEY$=PAD(ITEM_KEY$,20),PROD_CODE$=PAD(PROD_CODE$,3)
1210 GOSUB GET_ITEM_INFO
1220 GOSUB GET_SPEC_FLAGS
1295 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3FMS|ITEM SPECS|ITEM_KEY|"+ITEM_KEY$+"|PROD_CODE|"+PROD_CODE$+"|")
1495 IF NOT(OUTPUT) THEN GOTO 1515 ! called mode, skip reading in the template file from disk, use passed in template snippet line$ instead
1499 ! 
1500 ! Fill out template
1504 IF NOT(NUL(%BASIC2$)) THEN GOTO 2990 ! Skip outputting template if additional program to be done
1505 CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1510 READ (100,END=*NEXT)TMP_LINE$; LINE$+=FNBYB$(TMP_LINE$)+EOL$; GOTO *SAME
1515 CHKTAG=1
1520 WHILE CHKTAG ! 2800 wend
1522 P1=MSK(LINE$,"\?tf\?[^?]*\?"); IF P1=0 THEN CHKTAG=0; BREAK
1530 TAG$=LINE$(P1,MSL); LINE1$=LINE$(1,P1-1),LINE2$=MID(LINE$,P1+MSL)
1533 T_IN=POS("."=TAG$); IF T_IN THEN TAG_PARM$=MID(TAG$,T_IN+1),TAG$=MID(TAG$,1,T_IN-1) ELSE TAG_PARM$=""
1600 SWITCH TAG$ ! 2790 end switch
1630 CASE "?tf?item_comp_start?"; GOSUB PROCESS_SPEC_COMP; PP=FNP(SPECS_SECTION$); BREAK ! 259010
1631 CASE "?tf?item_plys_start?"; GOSUB PROCESS_PLYS; PP=FNP(PLYS_SECTION$); BREAK ! 259010
1632 CASE "?tf?item_spec_comments_start?"; GOSUB PROCESS_SPEC_COMMENTS; PP=FNP(COM_SECTION$); BREAK ! 259010
1634 CASE "?tf?item_userdef_spec_start?"; GOSUB PROCESS_USERDEF_SPEC; PP=FNP(UDS_SECTION$); BREAK ! 259010
1635 CASE "?tf?userdef_spec_code?"; PP=FNP(STP(MID(XPT$,33,3))); BREAK
1636 CASE "?tf?item_num_plys?"; PP=FNP(STR(NUM(PLYS$,ERR=*PROCEED))); BREAK ! 259010
1640 CASE "?tf?userdef_spec_heading"; GOSUB GET_USERDEF_SPEC_ENTRY; PP=FNP(FLDHDG$); BREAK
1641 CASE "?tf?userdef_spec_value"; GOSUB GET_USERDEF_SPEC_ENTRY; PP=FNP(FLDVAL$); BREAK
2785 DEFAULT ! didn't match existing tags, so discard it, unless it is one of these special situations below
2786 IF POS("?tf?fm1_"=TAG$)=1 THEN GOSUB PROCESS_FM1_TAG; PP=FNP(FNX$(STP(FM1_TAG_VAL$))); BREAK ! SSP302215
2789 LINE$=LINE1$+LINE2$ ! didn't match existing tag, so discard it
2790 END SWITCH ! 1600
2800 WEND ! 1520
2950 DONE_WITH_TEMPLATE:
2953 IF (OUTPUT) THEN PRINT (OUTPUT)LINE$
2955 GOSUB CLEAR_READONLY ! SSP245945
2990 GOTO 9900
2999 ! 
5500 PROCESS_USERDEF_SPEC:! 259010
5510 UDS_SECTION$="",UDS_TEMPLATE$=LINE2$
5520 UDS_END=POS("?tf?item_userdef_spec_end?"=UDS_TEMPLATE$),UDS_TEMPLATE$=UDS_TEMPLATE$(1,UDS_END-1)
5530 LINE2$=LINE2$(UDS_END+26)
5540 IF SPECS_UDS$<>"Y" THEN GOTO 5895 ! Don't process user defined specs section if no user defined specs
5545 IF UDFCHAN THEN CLOSE (UDFCHAN,ERR=*PROCEED) END_IF ; OPEN (HFN)"*MEMORY*"; UDFCHAN=LFO
5550 DIM FSF$:IOL(Z[2]); READ (Z[2],KEY=ITEM_KEY$,REC=FSF$,DOM=5895)IOL=IOL(Z[2]) ! Get item's user def spec values
5555 FSF_DATA$=FSF.USER_DEF_SPEC$
5560 READ (Z[1],KEY=MID(XPT$,33,3),DOM=*NEXT)
5570 NEXT_FSE_FLD:DIM FSE$:IOL(Z[1]); READ DATA FROM DIM(LEN(FSE$)),REC=FSE$ TO IOL=IOL(FSE$)
5580 READ (Z[1],REC=FSE$,END=5895)IOL=IOL(Z[1]); IF FSE.TEMPLATE_CODE$<>MID(XPT$,33,3) THEN GOTO 5895
5590 IF NUL(MID(FSE.DATA_TYPE$,1,1)) THEN GOTO NEXT_FSE_FLD
5600 L=NUM(FSE.MAX_LENGTH$,ERR=NEXT_FSE_FLD); F5$=MID(FSF_DATA$,1,L); FSF_DATA$=MID(FSF_DATA$,L+1)
5610 SWITCH MID(FSE.DATA_TYPE$,1,1)
5620 CASE "D"; F5$=FND$(F5$,""); BREAK
5630 CASE "P"; CALL "ZZDISP","PX",F5$,"",X3$,F5$,"",0,0,X4$; BREAK
5640 DEFAULT ; BREAK
5650 END SWITCH 
5660 FLDREF$=FSE.TEMPLATE_CODE$+"_"+FSE.SCREEN_NUM$+"_"+FSE.FIELD_NUM$
5670 FLDHDG$=STP(FSE.FLD_TXT_HDG_ON_SCRN$,2); IF NOT(NUL(FSE.F1_HDG_TEXT_1$)) THEN FLDHDG$=STP(FSE.F1_HDG_TEXT_1$,2)
5680 FLDVAL$=STP(F5$,2)
5685 WRITE (UDFCHAN,KEY=FLDREF$)FNX$(STP(FLDHDG$,2)),FNX$(STP(FLDVAL$,2))
5690 UDS_LINE$=UDS_TEMPLATE$,UDS_CHKTAG=1
5700 WHILE UDS_CHKTAG
5710 UDS1=MSK(UDS_LINE$,"\?tf\?[^?]*\?"); IF UDS1=0 THEN UDS_CHKTAG=0; BREAK
5720 UDS_TAG$=UDS_LINE$(UDS1,MSL); UDS_LINE1$=UDS_LINE$(1,UDS1-1),UDS_LINE2$=MID(UDS_LINE$,UDS1+MSL)
5730 SWITCH UDS_TAG$
5731 CASE "?tf?spec_ref?"; UDS_LINE$=UDS_LINE1$+FLDREF$+UDS_LINE2$; BREAK
5732 CASE "?tf?spec_heading?"; UDS_LINE$=UDS_LINE1$+FNX$(STP(FLDHDG$,2))+UDS_LINE2$; BREAK
5733 CASE "?tf?spec_value?"; UDS_LINE$=UDS_LINE1$+FNX$(STP(FLDVAL$,2))+UDS_LINE2$; BREAK
5870 DEFAULT ; UDS_LINE$=UDS_LINE1$+UDS_LINE2$
5875 END SWITCH 
5880 WEND 
5885 UDS_SECTION$+=UDS_LINE$
5890 GOTO NEXT_FSE_FLD
5895 RETURN 
5899 ! 
6000 PROCESS_SPEC_COMP:! 259010
6005 SPECS_SECTION$="",SPECS_TEMPLATE$=LINE2$
6010 SPECS_END=POS("?tf?item_comp_end?"=SPECS_TEMPLATE$),SPECS_TEMPLATE$=SPECS_TEMPLATE$(1,SPECS_END-1)
6015 LINE2$=LINE2$(SPECS_END+18)
6020 IF SPECS_REQ$<>"Y" THEN GOTO 6195 ! Don't process comp section if PO line says no specs = "N or comments only = "C"
6025 IF SPECS_COMP_SKIP$="Y" THEN GOTO 6195 ! Don't process comp section if product code says to skip
6030 DIM FMS$:IOL(Z[3]); READ DATA FROM DIM(LEN(FMS$)),REC=FMS$ TO IOL=IOL(FMS$)
6035 READ (Z[3],KEY=ITEM_KEY$,REC=FMS$,DOM=6195)IOL=IOL(Z[3])
6040 SPC_LINE$=SPECS_TEMPLATE$,SPC_CHKTAG=1
6045 WHILE SPC_CHKTAG
6050 SPC1=MSK(SPC_LINE$,"\?tf\?[^?]*\?"); IF SPC1=0 THEN SPC_CHKTAG=0; BREAK
6055 SPC_TAG$=SPC_LINE$(SPC1,MSL); SPC_LINE1$=SPC_LINE$(1,SPC1-1),SPC_LINE2$=MID(SPC_LINE$,SPC1+MSL)
6060 SWITCH SPC_TAG$
6061 CASE "?tf?plant_to_set_copy?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.PLANT_TO_SET_COPY$,2))+SPC_LINE2$; BREAK
6062 CASE "?tf?cr_copy?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.CR_COPY$,2))+SPC_LINE2$; BREAK
6063 CASE "?tf?negatives_attached?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.NEGATIVES_ATTACHED$,2))+SPC_LINE2$; BREAK
6064 CASE "?tf?extra_field?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.EXTRA_FIELD$,2))+SPC_LINE2$; BREAK
6065 CASE "?tf?artwork?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.ARTWORK$,2))+SPC_LINE2$; BREAK
6066 CASE "?tf?plant_to_set_scrns?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.PLANT_TO_SET_SCRNS$,2))+SPC_LINE2$; BREAK
6067 CASE "?tf?plant_to_make_adj?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.PLANT_TO_MAKE_ADJ$,2))+SPC_LINE2$; BREAK
6068 CASE "?tf?return_art?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.RETURN_ART$,2))+SPC_LINE2$; BREAK
6069 CASE "?tf?return_negs?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.RETURN_NEGS$,2))+SPC_LINE2$; BREAK
6070 CASE "?tf?return_cr_copy?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.RETURN_CR_COPY$,2))+SPC_LINE2$; BREAK
6071 CASE "?tf?destroy_old_copy?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.DESTROY_OLD_COPY$,2))+SPC_LINE2$; BREAK
6072 CASE "?tf?proof_required?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.PROOF_REQUIRED$,2))+SPC_LINE2$; BREAK
6073 CASE "?tf?imprint_required?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.IMPRINT_REQUIRED$,2))+SPC_LINE2$; BREAK
6074 CASE "?tf?carbon_dummy?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.CARBON_DUMMY$,2))+SPC_LINE2$; BREAK
6075 CASE "?tf?samples?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.SAMPLES$,2))+SPC_LINE2$; BREAK
6076 CASE "?tf?subpack_um?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.SUBPACK_UM$,2))+SPC_LINE2$; BREAK
6077 CASE "?tf?subpack_qty_per?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.SUBPACK_QTY_PER$,2))+SPC_LINE2$; BREAK
6078 CASE "?tf?mod?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.TF_MOD$,2))+SPC_LINE2$; BREAK
6079 CASE "?tf?num_of_pos?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.NUM_OF_POS$,2))+SPC_LINE2$; BREAK
6080 CASE "?tf?color?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.COLOR$,2))+SPC_LINE2$; BREAK
6081 CASE "?tf?arabic?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.ARABIC$,2))+SPC_LINE2$; BREAK
6082 CASE "?tf?press?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.PRESS$,2))+SPC_LINE2$; BREAK
6083 CASE "?tf?collate?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.TF_COLLATE$,2))+SPC_LINE2$; BREAK
6084 CASE "?tf?guaranteed_num?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.GUARANTEED_NUM$,2))+SPC_LINE2$; BREAK
6085 CASE "?tf?list?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.TF_LIST$,2))+SPC_LINE2$; BREAK
6086 CASE "?tf?jumbo?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.JUMBO$,2))+SPC_LINE2$; BREAK
6087 CASE "?tf?micr?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.MICR$,2))+SPC_LINE2$; BREAK
6088 CASE "?tf?static?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.TF_STATIC$,2))+SPC_LINE2$; BREAK
6089 CASE "?tf?consecutive?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.CONSECUTIVE$,2))+SPC_LINE2$; BREAK
6090 CASE "?tf?others?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.OTHERS$,2))+SPC_LINE2$; BREAK
6091 CASE "?tf?glue_left?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.GLUE_LEFT$,2))+SPC_LINE2$; BREAK
6092 CASE "?tf?glue_right?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.GLUE_RIGHT$,2))+SPC_LINE2$; BREAK
6093 CASE "?tf?crimp_left?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.CRIMP_LEFT$,2))+SPC_LINE2$; BREAK
6094 CASE "?tf?crimp_right?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.CRIMP_RIGHT$,2))+SPC_LINE2$; BREAK
6095 CASE "?tf?others?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.OTHERS_1$,2))+SPC_LINE2$; BREAK
6096 CASE "?tf?plys?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.PLYS$,2))+SPC_LINE2$; BREAK
6097 CASE "?tf?position?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.TF_POSITION$,2))+SPC_LINE2$; BREAK
6098 CASE "?tf?number?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.TF_NUMBER$,2))+SPC_LINE2$; BREAK
6099 CASE "?tf?diameter?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.DIAMETER$,2))+SPC_LINE2$; BREAK
6100 CASE "?tf?center_to_center?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.CENTER_TO_CENTER$,2))+SPC_LINE2$; BREAK
6101 CASE "?tf?books?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.BOOKS$,2))+SPC_LINE2$; BREAK
6102 CASE "?tf?pads?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.PADS$,2))+SPC_LINE2$; BREAK
6103 CASE "?tf?num_of_sets_per?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.NUM_OF_SETS_PER$,2))+SPC_LINE2$; BREAK
6104 CASE "?tf?wrap_around?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.WRAP_AROUND$,2))+SPC_LINE2$; BREAK
6105 CASE "?tf?triad?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.TRIAD$,2))+SPC_LINE2$; BREAK
6106 CASE "?tf?open_end?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.OPEN_END$,2))+SPC_LINE2$; BREAK
6107 CASE "?tf?parts_left_in_book?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.PARTS_LEFT_IN_BOOK$,2))+SPC_LINE2$; BREAK
6108 CASE "?tf?polywrap?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.POLYWRAP$,2))+SPC_LINE2$; BREAK
6109 CASE "?tf?printer?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.PRINTER$,2))+SPC_LINE2$; BREAK
6110 CASE "?tf?decollator_type?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.DECOLLATOR_TYPE$,2))+SPC_LINE2$; BREAK
6111 CASE "?tf?burster_type?"; SPC_LINE$=SPC_LINE1$+FNX$(STP(FMS.BURSTER_TYPE$,2))+SPC_LINE2$; BREAK
6150 DEFAULT ; SPC_LINE$=SPC_LINE1$+SPC_LINE2$
6160 END SWITCH 
6170 WEND 
6180 SPECS_SECTION$+=SPC_LINE$
6195 RETURN 
6199 ! 
6300 PROCESS_PLYS:
6310 PLYS_SECTION$="",PLYS_TEMPLATE$=LINE2$
6320 PLYS_END=POS("?tf?item_plys_end?"=PLYS_TEMPLATE$),PLYS_TEMPLATE$=PLYS_TEMPLATE$(1,PLYS_END-1)
6330 LINE2$=LINE2$(PLYS_END+18)
6335 IF SPECS_REQ$<>"Y" THEN GOTO 6495 ! Don't process ply section if PO line says no specs = "N or comments only = "C"
6340 READ (Z[4],KEY=ITEM_KEY$,DOM=*NEXT)
6350 DIM FMU$:IOL(Z[4]); READ DATA FROM DIM(LEN(FMU$)),REC=FMU$ TO IOL=IOL(FMU$)
6360 READ (Z[4],REC=FMU$,END=6495)IOL=IOL(Z[4]); IF FMU.CUST_DIV$+FMU.CUST_CODE$+FMU.ITEM_CODE$<>ITEM_KEY$ THEN GOTO 6495
6370 PLY_LINE$=PLYS_TEMPLATE$,PLY_CHKTAG=1
6380 WHILE PLY_CHKTAG
6390 PLY1=MSK(PLY_LINE$,"\?tf\?[^?]*\?"); IF PLY1=0 THEN PLY_CHKTAG=0; BREAK
6400 PLY_TAG$=PLY_LINE$(PLY1,MSL); PLY_LINE1$=PLY_LINE$(1,PLY1-1),PLY_LINE2$=MID(PLY_LINE$,PLY1+MSL)
6410 SWITCH PLY_TAG$
6411 CASE "?tf?line_num?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.LINE_NUM$),2)+PLY_LINE2$; BREAK
6412 CASE "?tf?color?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.COLOR$),2)+PLY_LINE2$; BREAK
6413 CASE "?tf?weight?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.WT$),2)+PLY_LINE2$; BREAK
6414 CASE "?tf?paper_grade?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.PAPER_GRADE$),2)+PLY_LINE2$; BREAK
6415 CASE "?tf?left_right?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.LEFT_RIGHT$),2)+PLY_LINE2$; BREAK
6416 CASE "?tf?top_bottom?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.TOP_BOTTOM$),2)+PLY_LINE2$; BREAK
6417 CASE "?tf?ink_color_1?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.INK_COLOR_1$),2)+PLY_LINE2$; BREAK
6418 CASE "?tf?ink_color_2?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.INK_COLOR_2$),2)+PLY_LINE2$; BREAK
6419 CASE "?tf?ink_color_3?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.INK_COLOR_3$),2)+PLY_LINE2$; BREAK
6420 CASE "?tf?backer?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.BACKER$),2)+PLY_LINE2$; BREAK
6421 CASE "?tf?perfs_cont_snapout?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.PERFS_CONT_SNAPOUT$),2)+PLY_LINE2$; BREAK
6422 CASE "?tf?extra_perfs?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.EXTRA_PERFS$),2)+PLY_LINE2$; BREAK
6423 CASE "?tf?copy_change_code?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.COPY_CHANGE_CODE$),2)+PLY_LINE2$; BREAK
6424 CASE "?tf?copy_change_front?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.COPY_CHANGE_FRONT$),2)+PLY_LINE2$; BREAK
6425 CASE "?tf?copy_change_back?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.COPY_CHANGE_BACK$),2)+PLY_LINE2$; BREAK
6426 CASE "?tf?carbon_width?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.CARBON_WIDTH$),2)+PLY_LINE2$; BREAK
6427 CASE "?tf?carbon_color?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.CARBON_COLOR$),2)+PLY_LINE2$; BREAK
6428 CASE "?tf?marginal_words_pos?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.MARGINAL_WORDS_POS$),2)+PLY_LINE2$; BREAK
6429 CASE "?tf?marginal_words?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.MARGINAL_WORDS$),2)+PLY_LINE2$; BREAK
6430 CASE "?tf?carbon_type?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.CARBON_TYPE$),2)+PLY_LINE2$; BREAK
6431 CASE "?tf?plate_num_ink_1?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.PLATE_NUM_INK_1$),2)+PLY_LINE2$; BREAK
6432 CASE "?tf?plate_num_ink_2?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.PLATE_NUM_INK_2$),2)+PLY_LINE2$; BREAK
6433 CASE "?tf?plate_num_ink_3?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.PLATE_NUM_INK_3$),2)+PLY_LINE2$; BREAK
6434 CASE "?tf?plate_num_ink_backer?"; PLY_LINE$=PLY_LINE1$+STP(FNX$(FMU.PLATE_NUM_INK_BACKER$),2)+PLY_LINE2$; BREAK
6450 DEFAULT ; PLY_LINE$=PLY_LINE1$+PLY_LINE2$
6460 END SWITCH 
6470 WEND 
6480 PLYS_SECTION$+=PLY_LINE$
6490 GOTO 6350
6495 RETURN 
6499 ! 
6500 PROCESS_SPEC_COMMENTS:
6510 COM_SECTION$="",COM_TEMPLATE$=LINE2$
6520 COM_END=POS("?tf?item_spec_comments_end?"=COM_TEMPLATE$),COM_TEMPLATE$=COM_TEMPLATE$(1,COM_END-1)
6530 LINE2$=LINE2$(COM_END+27)
6535 IF POS(SPECS_REQ$="YC")=0 THEN GOTO 6695 ! Don't process comments section if PO line says no specs = "N (should only be if specs req = "Y" or "C" comments only)
6540 READ (Z[5],KEY=ITEM_KEY$,DOM=*NEXT)
6550 DIM FMV$:IOL(Z[5]); READ DATA FROM DIM(LEN(FMV$)),REC=FMV$ TO IOL=IOL(FMV$)
6560 READ (Z[5],REC=FMV$,END=6695)IOL=IOL(Z[5]); IF FMV.CUST_DIV$+FMV.CUST_CODE$+FMV.ITEM_CODE$<>ITEM_KEY$ THEN GOTO 6695
6565 IF FMV.TF_PRINT$<>"Y" THEN GOTO 6550
6570 COM_LINE$=COM_TEMPLATE$,COM_CHKTAG=1
6580 WHILE COM_CHKTAG
6590 COM1=MSK(COM_LINE$,"\?tf\?[^?]*\?"); IF COM1=0 THEN COM_CHKTAG=0; BREAK
6600 COM_TAG$=COM_LINE$(COM1,MSL); COM_LINE1$=COM_LINE$(1,COM1-1),COM_LINE2$=MID(COM_LINE$,COM1+MSL)
6610 SWITCH COM_TAG$
6611 CASE "?tf?line_num?"; COM_LINE$=COM_LINE1$+STP(FNX$(FMV.LINE_NUM$),2)+COM_LINE2$; BREAK
6612 CASE "?tf?comment?"; COM_LINE$=COM_LINE1$+STP(FNX$(FMV.TF_COMMENT$),2)+COM_LINE2$; BREAK
6650 DEFAULT ; COM_LINE$=COM_LINE1$+COM_LINE2$
6660 END SWITCH 
6670 WEND 
6680 COM_SECTION$+=COM_LINE$
6690 GOTO 6550
6695 RETURN 
6699 ! 
6700 PROCESS_FM1_TAG:
6705 TAG$=MID(TAG$,5); TAG$=STP(TAG$,1,"?")
6706 FM1_TAG_VAL$="",FM1_TAG_VAL_SET=0
6710 FM1_TAG_VAL$=EVS(SUB(UCS(TAG$),"FM1_","FM1.")+"$"); IF LEN(FM1_TAG_VAL$)=0 THEN FM1_TAG_VAL$=STR(EVN(SUB(UCS(TAG$),"FM1_","FM1.")))
6745 RETURN 
6749 ! 
6900 GET_USERDEF_SPEC_ENTRY:
6905 FLDHDG$="",FLDVAL$=""
6915 IF NOT(UDFCHAN) THEN GOTO *RETURN
6920 FIND (UDFCHAN,KEY=MID(TAG_PARM$,1,LEN(TAG_PARM$)-1),DOM=*NEXT)FLDHDG$,FLDVAL$
6945 RETURN 
6949 ! 
6950 GET_SPEC_FLAGS:
6955 SPECS_UDS$="N",SPECS_REQ$="Y",SPECS_COMP_SKIP$="N"
6960 FIND (Z[6],KEY="T"+PROD_CODE$,DOM=XPT_NOT_FOUND)XPT$
6965 IF MID(XPT$,21,1)="Y" THEN SPECS_COMP_SKIP$="Y"
6970 ! IF POS(PO2.LINE_TYPE$="CXI") THEN SPECS_REQ$=PO2.SPECS_REQ$ ! Are specs required for this item on po line or spec comments only?
6975 IF MID(FMPARM$,168,1)="Y" THEN IF NOT(NUL(MID(XPT$,33,3))) THEN SPECS_UDS$="Y" ! Are user defined specs present?
6995 RETURN 
6999 ! 
7000 GET_ITEM_INFO:
7001 ITEM_KEY$=STP(ITEM_KEY$,3,*$0D0A$); CIC_CODE$=STP(CIC_CODE$,3,*$0D0A$) ! 295893
7005 IF NUL(ITEM_KEY$) AND NOT(NUL(CIC_CODE$)) THEN GOSUB GET_ITEM_FROM_CIC; IF NOT(NUL(FOUND_ITEM$)) THEN ITEM_KEY$=EC$[2](51,10)+PAD(FOUND_ITEM$,10) ! 276579
7010 IF NUL(MID(ITEM_KEY$,1,10)) THEN GOTO *NEXT END_IF ; READ (Z[7],KEY=ITEM_KEY$,DOM=*NEXT)FM1$; READ (Z[7],KEY=ITEM_KEY$,REC=FM1$); PLYS$=FM1$(40,2); PROD_CODE$=FM1$(21,3); GOTO 7030
7020 READ (Z[8],KEY=ITEM_KEY$,DOM=ITEM_NOT_FOUND)IC0$; PLYS$=IC0$(80,2); PROD_CODE$=IC0$(61,3)
7045 RETURN 
7049 ! 
7050 GET_ITEM_FROM_CIC:! 276579 - cic_code - read FT1 for item code
7052 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3FMS|ITEM SPECS|LOOKUP CIC|"+CIC_CODE$+"|")
7055 FOUND_ITEM$=CIC_CODE$,FT1_KEY$=EC$[2](51,10)+PAD(CIC_CODE$,20)
7060 READ (Z[9],KEY=FT1_KEY$,DOM=*NEXT)
7070 FT1$=KEY(Z[9],END=*RETURN)
7080 IF MID(FT1$,1,30)=FT1_KEY$ THEN FOUND_ITEM$=MID(FT1$,31)
7095 RETURN 
7099 ! 
7151 FNX:
7152 DEF FNX$(LOCAL X$)
7165 TRANSLATE X$,"&"+$05$+"&amp;"+"<"+$04$+"&lt;"+">"+$04$+"&gt;"+QUO+$06$+"&quot;"+"'"+$06$+"&apos;" ! SSP247374, fix for apostrophe
7170 RETURN X$
7195 END DEF
7199 ! ***********************************************************
7600 SET_READONLY:
7610 SET_PARAM 'XI'
7620 SET_READONLY_END:RETURN 
7630 CLEAR_READONLY:
7640 SET_PARAM -'XI'
7645 CLEAR_READONLY_END:RETURN 
7649 ! 
8000 ! Caught errors
8010 XPT_NOT_FOUND: MX=FN%_LOG_MESSAGE("EXCP","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3FMS|XPT NOT FOUND|PROD_CODE|"+PROD_CODE$+"|ITEM_KEY|"+ITEM_KEY$+"|"); GOTO 9900
8020 ITEM_NOT_FOUND: MX=FN%_LOG_MESSAGE("EXCP","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3FMS|ITEM NOT FOUND|ITEM_KEY|"+ITEM_KEY$+"|"); GOTO 9900
8099 ! 
8600 FNTP:! SSP242631
8605 DEF FNTP(LOCAL DATA$)
8610 TP_LINE$=TP_LINE1$+DATA$+TP_LINE2$
8640 RETURN 0
8649 ! 
8750 FNP:
8751 DEF FNP(LOCAL DATA$)
8760 LINE$=LINE1$+DATA$+LINE2$
8790 RETURN 0
8799 ! ********************************************************
8800 FNBYB:
8801 DEF FNBYB$(LOCAL DATA$)
8802 ! Send DATA$ through EC3BYB
8820 CALL "EC3BYB",ERR=*NEXT,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,DATA$,BYBINFO${ALL},BYBOPTIONS$
8840 RETURN DATA$
8845 END DEF
8899 ! **********************************************************
8915 FNT:DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
8949 ! *****************************
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$); REM "131928
9090 GOTO 9900
9900 REM "End
9905 GOSUB CLEAR_READONLY
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9920 IF UDFCHAN THEN CLOSE (UDFCHAN,ERR=*NEXT)
9950 EXIT 
9999 END 
56000 ! Program changes starting 02/08/06
56002 REM "259010-Ability to export item specifications
56003 REM "276579-FlowPoint PDQ integration - support for CIC
56004 REM "295893-FlowPoint; Need all info about PDQ implementation for 589.  
56006 REM "302215-FlowPoint; Comp 080 PDQ order processing error in item      
