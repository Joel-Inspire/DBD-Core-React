0010 REM "Webec search results <EC3PC3>
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 06/29/17 - 18.495555 - crg - SSP# 293536
0037 REM "293536-We made updates to vp and CRG & DMM for pending flowpoint   
0040 REM "Copyright 2017 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0100 SETERR 9000
0110 X0$="EC3PC3",X1$="Webec Search Results"
0120 EOL$=$0D0A$; EOL$=ATH(STP(EC_PARM$(57,8),1))
0320 IOLIST FM1$,FM1[0],FM1[1],FM1[2],FM1[3],FM1[4],FM1[5],FM1[6],FM1[7],FM1[8],FM1[9],FM1[10],FM1[11],FM1[12],FM1[13],FM1[14],FM1[15],FM1[16],FM1[17],FM1[18],FM1[19],FM1[20],FM1[21],FM1[22],FM1[23],FM1[24],FM1[25],FM1[26],FM1[27],FM1[28],FM1[29],FM1[30],FM1[31]
0340 IOLIST ECG$
0350 IOLIST ECH$
0360 IOLIST ECR$
0380 IOLIST FM0$
0390 IOLIST FM4$(1),FM42$,FM4(0),FM4(1),FM4(2),FM4(3),FM4(4),FM4(5),FM4(6),FM4(7),FM4(8),FM4(9),FM4(10),FM4(11),FM4(12),FM4(13),FM4(14),FM4(15)
0410 IOLIST IC0$,IC0[0],IC0[1],IC0[2],IC0[3],IC0[4],IC0[5],IC0[6],IC0[7],IC0[8],IC0[9],IC0[10],IC0[11],IC0[12],IC0[13],IC0[14],IC0[15],IC0[16],IC0[17],IC0[18],IC0[19],IC0[20],IC0[21],IC0[22],IC0[23],IC0[24],IC0[25],IC0[26],IC0[27],IC0[28],IC0[29],IC0[30],IC0[31],IC0[32],IC0[33],IC0[34],IC0[35],IC0[36],IC0[37],IC0[38],IC0[39],IC0[40]
0420 IOLIST P$(1),P[0],P[1]
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))]
0507 WORK_FILE$="W"+EC$[1](1,7); REM "work file is "W"+session id
0508 CLOSE (1001); OPEN (1001,ERR=0509)WORK_FILE$; CLOSE (1001); GOTO 0510
0509 DIRECT WORK_FILE$,60,0,2048,0,0; REM "create work file if it doesn't exist
0510 Z$="01O AR1... 020 FM1... 03O FT1... 04O ECG... 05O ECH... 06O ECR... 07O "+WORK_FILE$+" 08O FM0... 09O FM4... 10O EDE... 11O IC0... 13O ZZPARM 14O FMP... 15O EDI... 16O EC6... 17O FS0... 18O EDQ... "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0590 DIM ECG$(100) ! 165374 - Do this to prevent err 47 if catalog is empty
0600 REM 'SET IMG SRC PREFIX/SUFFIX
0601 ITEM_SEARCH_ELEMENTS=8,ST_SEARCH_ELEMENTS=7
0602 DIM SI$[ITEM_SEARCH_ELEMENTS,4]; REM "item search elements (index 1=search text   2=<string>AAAABBBB  A=starting position B=length of fm1 field 2=<numeric>AAAA A=numeric element 3=S/N (string or numeric  <string processed unless set to N> 4=<string>AAAABBBB A/B=start position/length in IC0 (same as 2 for fm1
0603 DIM ST$[ST_SEARCH_ELEMENTS,3]; REM "shipto search elements (index 1=search text   2=<string>AAAABBBB  A=starting position B=length of fm1 field 2=<numeric>AAAA A=numeric element 3=S/N (string or numeric  <string processed unless set to N>
0610 IMGSRC_PREFIX$=STP(EC_PARM$(311,20),2),IMGSRC_ATTRIB$=" "+STP(EC_PARM$(331,60),2)+">",IMGSRC_SUFFIX$=STP(EC_PARM$(391,20),2)
0800 GOSUB 3000
1000 REM "Process DATA array
1005 DATA_TAGS$="001<template>002<user>003<password>004<maxrows>005<position_item>006<direction>007<session_id>008<category>009<new_search>010<search_type>011<search_item_code>012<search_item_description>013<search_item_lr>014<search_item_tb>015<search_item_ply>016<search_item_fms>017<search_item_vendorcd>018<search_item_cic>019<search_st_code>020<search_st_area_code>021<search_st_state>022<search_st_rec_dept>023<search_st_location>024<search_st_zip_code>025<search_st_city>026<exact_itemcode_match>027<catalog>"
1006 MAX_ROWS=NUM(EC_PARM$(258,3)),POSITION_ITEM$="",DIRECTION$="F"
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1018 DPOS=POS("<"+TAG$+">"=DATA_TAGS$); IF DPOS=0 THEN GOTO 1090 ELSE DINDEX=NUM(DATA_TAGS$(DPOS-3,3),ERR=1090)
1019 ON DINDEX GOTO 1090,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1090
1021 TEMPLATE$=VALUE$; GOTO 1090; REM "template
1022 USER$=VALUE$; GOSUB 3000; GOTO 1090; REM "user
1023 PASSWORD$=VALUE$; GOTO 1090; REM "password
1024 MAX_ROWS=NUM(VALUE$,ERR=1090); GOTO 1090; REM "maxrows
1025 POSITION_ITEM$=VALUE$; GOTO 1090; REM "position_item
1026 IF VALUE$="backward" THEN DIRECTION$="B"; GOTO 1090; REM "direction, only set if it is 'backward'
1027 SESSION_ID$=VALUE$; GOTO 1090; REM "Get session id
1028 CATEGORY$=VALUE$; GOTO 1090; REM "single catalog category to display
1029 NEW_SEARCH$=VALUE$; GOTO 1090; REM "new search  (will init the search results file (ECT)
1030 SEARCH_TYPE$=VALUE$; STYPE=INT(POS(SEARCH_TYPE$="I/CFM0ORD")/3); GOTO 1090; REM "search_type
1031 GOSUB 8300; ITEMSTRING$=""; IF VAL_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF STP(VAL$[VAL_INDEX],3," ")="" THEN NEXT VAL_INDEX ELSE ITEMSTRING$=ITEMSTRING$+PAD(UCS(VAL$[VAL_INDEX]),10); NEXT VAL_INDEX END_IF ; SEARCH_ITEM_CODE$=ITEMSTRING$,SI$[1,1]=ITEMSTRING$,SI$[1,2]="00110010",SI$[1,4]="00110010"; GOTO 1090; REM "value to search item codes"
1032 SEARCH_ITEM_DESC$=VALUE$,SI$[2,1]=VALUE$,SI$[2,2]="00420040",SI$[2,4]="00210040"; GOTO 1090; REM "value to search item descriptions
1033 SEARCH_ITEM_LR$=VALUE$,SI$[3,1]=VALUE$,SI$[3,2]="00240008",SI$[3,4]="00640008"; GOTO 1090; REM "search_item_lr (left-right dimensions)
1034 SEARCH_ITEM_TB$=VALUE$,SI$[4,1]=VALUE$,SI$[4,2]="00320008",SI$[4,4]="00720008"; GOTO 1090; REM "search_item_tb (top-bottom)
1035 SEARCH_ITEM_PLY$=VALUE$,SI$[5,1]=VALUE$,SI$[5,2]="00400002",SI$[5,4]="00800002"; GOTO 1090; REM "search_item_ply
1036 SEARCH_ITME_FMS$=VALUE$,SI$[6,1]=VALUE$,SI$[6,2]="01080001",SI$[6,4]="01180002"; GOTO 1090; REM "search_item_fms (should be Y or N to only get certain FMS flagging
1037 SEARCH_ITEM_VENDCD$=VALUE$,SI$[7,1]=VALUE$,SI$[7,2]="00820010",SI$[7,4]="00820010"; GOTO 1090; REM "search_item_vendorcd
1038 SEARCH_ITEM_CIC$=VALUE$,SI$[8,1]=VALUE$,SI$[8,2]="03500020",SI$[8,4]="00110010"; GOTO 1090; REM "search_item_cic
1039 SEARCH_ST_CODE$=VALUE$,ST$[1,1]=VALUE$,ST$[1,2]="00120004"; GOTO 1090; REM "search_st_code (tf shipto code)
1040 SEARCH_ST_AREA_CODE$=VALUE$,ST$[2,1]=VALUE$,ST$[2,2]="02000003"; GOTO 1090; REM "search_st_area_code (uses first 3 char of phone)
1041 SEARCH_ST_STATE$=VALUE$,ST$[3,1]=VALUE$,ST$[3,2]="01270002"; GOTO 1090; REM "search_st_state
1042 SEARCH_ST_REC_DEPT$=VALU$,ST$[4,1]=VALUE$,ST$[4,2]="03820020"; GOTO 1090
1043 SEARCH_ST_LOC$=VALUE$,ST$[5,1]=VALUE$,ST$[5,2]="02140009"; GOTO 1090; REM "search_st_loc (customer 9 character location)
1044 SEARCH_ST_ZIP$=VALUE$,ST$[6,1]=VALUE$,ST$[6,2]="00240009"; GOTO 1090; REM "search_st_zip
1045 SEARCH_ST_CITY$=VALUE$,ST$[7,1]=VALUE$,ST$[7,2]="01110016"; GOTO 1090; REM "search_city
1046 EXACT_ITEMCODE_MATCH$="Y"; GOTO 1090; REM "exact_itemcode_match (restricts to only reporting exact matches)  ; REM "150761
1047 CATALOG$=VALUE$; GOTO 1090; REM "get catalog to display
1090 NEXT I
1100 REM "preprocessing
1101 VERSION$="280572.20151021",PROGRAM$=PGN; DIM BYBINFO$[5]; BYBINFO$[1]=PROGRAM$,BYBINFO$[2]=VERSION$,BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1110 ENTRY_TAGS$="001<item_code>002<cic_code>003<desc>004<um_ext>005<price>006<item_key>007<user>008<password>009<session_id>010<catalog_code>011<catalog_addl>012<catalog_image>013<fms_price>014<alt_um_ext>015<price_in_alt_um>016<flagged_fms_price>017<image_form1>018<image_form2>019<image_form3>020<image_form4>021<image_form5>022<image_form1_link>023<image_form2_link>024<image_form3_link>025<image_form4_link>026<image_form5_link>027<st_code>028<st_description>029<st_addr1>030<st_addr2>031<st_city>032<st_state>033<st_zip>034<st_city_state_zip>035<st_phone>036<st_location>037<st_rec_dept>038<3p_text>039<item_key_ue>040<desc_ue>041<qtybreakstart>042<fms_in_alt_um>043<vp_text>044<vp_url>045<infostockstart>046<infowrstart>047<infopostart>048<form_memo>049<monthly_max>050<line_class>051<form_note>052<max_months>053<cumulative_max>054<base_price>055<item_key_catalog>056<item_key_catalog_ue>057<flagged_price_in_alt_um>058<qty_breaks_ddl>059<item_code_pdf>060<ext_ref_1>061<rev_date>062<3p_id>"
1112 REM "set search category
1113 IF NUL(CATALOG$) THEN CATALOG$=EC$[1](1115,10); IF CATALOG$=DIM(10) THEN CATALOG$=EC$[2](325,10)
1114 IF CATALOG$="**********" THEN { CATALOG_HOLDER$=CATALOG$; CATALOG$=EC$[2](325,10); GOSUB 8035 } ELSE GOSUB 8050; REM "get category list
1122 IF CATEGORY$=EC$[2](483,10) THEN MYCATALOG$="Y",CATALOG_CHANNEL=10 ELSE MYCATALOG$="N",CATALOG_CHANNEL=5; REM "if current catalog is the buyer specific catalog EDE
1125 REM 'CK FOR VALID MAXROWS
1126 MAX_ROWS=2000; REM "IF NUM(EC_PARM$(258,3))<>0 OR MAX_ROWS=0 THEN LET MAX_ROWS=NUM(EC_PARM$(258,3))
1130 REM "ck if new search
1132 IF NEW_SEARCH$="Y" THEN GOSUB 5000
1200 GOSUB 3400
1500 REM "Use template$ to open file, read line by line and insert
1501 IF %BASIC2$<>"" THEN GOTO 1995; REM "156580
1505 CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1506 REM "Setup line_tags$
1507 LINE_TAGS$="001<user>002<cust_code>003<password>004<cust_name>005<ec_company>006<entrystart>007<buttonnext>008<buttonprev>009<session_id>010<buyer_id>011<buyer_name>012<date>013<time>014<categorystart>015<mousedbox1start>016<category_list>017<category_code>018<category_desc>019<category_addl>020<number_records_found>021<allorderstart>022<3porderstart>023<buttonallstart>"
1510 READ (100,END=1595)LINE$; GOSUB 7550
1515 INDEX=POS("?tf?"=LINE$); IF INDEX=0 THEN PRINT (OUTPUT)LINE$,EOL$,; GOTO 1510
1520 END_INDEX=POS("?"=LINE$(INDEX+4)),TAG$=LINE$(INDEX+4,END_INDEX-1),LINE1$=LINE$(1,INDEX-1),LINE2$=LINE$(INDEX+END_INDEX+4),LPOS=POS("<"+TAG$+">"=LINE_TAGS$); IF LPOS=0 THEN LINDEX=0 ELSE LINDEX=NUM(LINE_TAGS$(LPOS-3,3))
1530 GOSUB 2000; GOTO 1515
1995 GOTO 9900
1999 REM "Get tag value & substitute
2000 ON LINDEX GOTO 2090,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2090
2001 LINE$=LINE1$+USER$+LINE2$; GOTO 2095; REM "user
2002 LINE$=LINE1$+CUST_CODE$+LINE2$; GOTO 2095; REM "cust_code
2003 LINE$=LINE1$+PASSWORD$+LINE2$; GOTO 2095; REM "password
2004 LINE$=LINE1$+STP(EC$[1](23,35),1)+LINE2$; GOTO 2095; REM "cust_name
2005 LINE$=LINE1$+STP(EC_PARM$(7,50),1)+LINE2$; GOTO 2095; REM "ec_company
2006 GOSUB 3200; LINE$=TABLE$; GOTO 2095; REM "entrystart
2007 GOSUB 3500; LINE$=BUTTON$; GOTO 2095; REM "buttonnext
2008 GOSUB 3600; LINE$=BUTTON$; GOTO 2095; REM "buttonprev
2009 LINE$=LINE1$+STP(SESSION_ID$,1)+LINE2$; GOTO 2095; REM "session_id
2010 LINE$=LINE1$+STP(EC$[1](8,15),1)+LINE2$; GOTO 2095; REM "buyer_id
2011 LINE$=LINE1$+STP(EC$[2](16,35),1)+LINE2$; GOTO 2095; REM "buyer_name
2012 LINE$=LINE1$+EC$[4]+LINE2$; GOTO 2095; REM " date
2013 LINE$=LINE1$+EC$[5]+LINE2$; GOTO 2095; REM "time
2014 GOSUB 2200; GOTO 2095; REM "categorystart - store in CAT_TEMPLATE$
2015 GOSUB 3700; LINE$=MOUSEDBOX1$; GOTO 2095; REM "mousedbox1start - store in MOUSEDBOX1_TEMPLATE$
2016 GOSUB 2150; LINE$=LINE1$+CATEGORY_LIST$+LINE2$; GOTO 2095; REM "catalog category list
2017 LINE$=LINE1$+ECH$(11,10)+LINE2$; GOTO 2095; REM "category_code
2018 GOSUB 8400; LINE$=LINE1$+CATEGORY_DESC$+LINE2$; GOTO 2095; REM "category_desc. SSP173335
2019 LINE$=LINE1$+STP(ECG$(41,60),2)+LINE2$; GOTO 2095; REM "category additional
2020 FILE_SPEC$=FN%FIN$(Z(7),"NUMREC"),NUM_RECS=NUM(FILE_SPEC$),LINE$=LINE1$+STR(NUM_RECS:"##,##0")+LINE2$; GOTO 2095; REM "number_records_found
2021 GOSUB 3800; LINE$=TABLE$; GOTO 2095; REM "allorderstart
2022 GOSUB 3850; LINE$=TABLE$; GOTO 2095; REM "3porderstart
2023 GOSUB 3700; LINE$=ALLBUTTON$; GOTO 2095; REM "buttonallstart
2090 LINE$=LINE1$+"?"+LINE2$; GOTO 2095; REM "tag not found, replace with '?'
2095 RETURN 
2150 REM "Return CATEGORY_LIST$ as HTML for drop down list
2155 CATEGORY_LIST$="",PUBLISHED$=EC$[6]
2157 IF LEN(STP(PUBLISHED$,2))=0 THEN GOTO 2195
2159 FOR PP=0 TO LEN(PUBLISHED$)/10-1; CURRCAT$=PUBLISHED$(PP*10+1,10)
2160 READ (Z[4],KEY=CURRCAT$,DOM=2180)IOL=0340
2165 CATEGORY_LIST$=CATEGORY_LIST$+"<option selected value="+QUO+CURRCAT$+QUO; IF PP=0 THEN CATEGORY_LIST$=CATEGORY_LIST$+" SELECTED>"+ECG$(11,30)+"</option>" ELSE CATEGORY_LIST$=CATEGORY_LIST$+">"+ECG$(11,30)+"</option>"; REM "if first item in list (pp=0) then set to be SELECTED as the initial value in the dd list
2180 NEXT PP
2185 STMP=POS("</select>"=LINE1$,-1); IF STMP<>0 THEN CATEGORY_LIST$=CATEGORY_LIST$+"</select>"; IF STMP=1 THEN LINE1$="" ELSE LINE1$=LINE1$(1,STMP-1)
2186 IF LINE2$>"" THEN IF LINE2$(1,1)=">" THEN LINE2$=LINE2$(2); REM "if token was part of a comment, then remove the end of the comment.
2195 RETURN 
2200 REM "Store category header template into CAT_TEMPLATE$, it will be used in the entry section
2204 CAT_TEMPLATE$=LINE$,LINE$=""
2205 READ (100,END=2206)LINE$; GOSUB 7550
2206 IF POS("?tf?categoryend?"=LINE$)<>0 THEN GOTO 2209 END_IF ; INDEX=POS("?tf?"=LINE$); IF INDEX=0 THEN GOTO 2209; REM "searching for tags within the category heading section
2207 END_INDEX=POS("?"=LINE$(INDEX+4)),TAG$=LINE$(INDEX+4,END_INDEX-1),LINE1$=LINE$(1,INDEX-1),LINE2$=LINE$(INDEX+END_INDEX+4),LPOS=POS("<"+TAG$+">"=LINE_TAGS$); IF LPOS=0 THEN LINDEX=0 ELSE LINDEX=NUM(LINE_TAGS$(LPOS-3,3))
2208 GOSUB 2000; REM "process tags within the category section
2209 CAT_TEMPLATE$=CAT_TEMPLATE$+LINE$+EOL$; IF POS("?tf?categoryend?"=LINE$)=0 THEN GOTO 2205
2230 LINE$=""
2245 RETURN 
3000 REM "Read customer data into AR1$
3010 DIM AR1$(600); READ (Z[1],KEY=EC$[2](51,10),DOM=3011)AR1$
3015 CALL "ZZDISP","AX",EC$[2](51,10),"A/R",X3$,CUST_CODE$,"",0,0,X4$
3045 RETURN 
3200 REM "Output I/C type entries, using ENTRY_TEMPLATE$ to pass information, create TABLE$ to output
3202 REM "moved to 1110
3203 REM "Setup ENTRY_TEMPLATE$
3204 ENTRY_TEMPLATE$=LINE$,TABLE$="",PREV_CATEGORY$=""
3205 READ (100,END=3206)LINE$; GOSUB 7550; ENTRY_TEMPLATE$=ENTRY_TEMPLATE$+LINE$+EOL$; IF POS("?tf?entryend?"=LINE$)=0 THEN GOTO 3205
3209 REM "now read search file (ECT...)
3210 IF DIRECTION$="B" THEN START_PT=TOTAL_RECORDS,END_PT=1,STEP_SIZE=-1 ELSE START_PT=1,END_PT=TOTAL_RECORDS,STEP_SIZE=1
3211 IF TOTAL_RECORDS=0 THEN GOTO 3246
3212 FOR ENTRY_INDEX=START_PT TO END_PT STEP STEP_SIZE
3213 ON STYPE GOTO 3214,3217,3220
3214 FINDITEMKEY$=DISPLAY$[ENTRY_INDEX,1](26,20),ECH$=DISPLAY$[ENTRY_INDEX,2]; GOSUB 7100; GOTO 3225; REM "157200
3217 DIM FM0$(600); FIND (Z[7],KEY=DISPLAY$[ENTRY_INDEX,1],DOM=3245)IOL=0380; GOTO 3225; REM "get customer shipto information
3220 REM "put in read for order information here!
3225 ENTRY$=ENTRY_TEMPLATE$
3230 GOSUB 3300
3235 IF LEN(TABLE$+ENTRY$)>62000 THEN PRINT (OUTPUT)TABLE$,EOL$,; TABLE$="" END_IF ; TABLE$=TABLE$+ENTRY$
3245 NEXT ENTRY_INDEX
3295 RETURN 
3300 REM "Given FM1$, create row in table
3305 EINDEX=POS("?tf?"=ENTRY$); IF EINDEX=0 THEN GOTO 3395
3306 EEND_INDEX=POS("?"=ENTRY$(EINDEX+4)),ETAG$=ENTRY$(EINDEX+4,EEND_INDEX-1),ENTRY1$=ENTRY$(1,EINDEX-1),ENTRY2$=ENTRY$(EINDEX+EEND_INDEX+4),EPOS=POS("<"+ETAG$+">"=ENTRY_TAGS$); IF EPOS=0 THEN EINDEX=0 ELSE EINDEX=NUM(ENTRY_TAGS$(EPOS-3,3))
3310 ON EINDEX GOTO 3389,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3344,3345,3346,3347,3348,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3367,3368,3369,3370,3371,3372,3389
3311 IF STOCK$="Y" THEN IC$=IC0$(11,10) ELSE IC$=FM1$(11,10) END_IF ; ENTRY$=ENTRY1$+STP(IC$,1)+ENTRY2$; GOTO 3390; REM "item_code
3312 ENTRY$=ENTRY1$+STP(FM1$(350,20),1)+ENTRY2$; GOTO 3390; REM "cic_code
3313 IF STOCK$="Y" THEN ID$=IC0$(21,40) ELSE ID$=FM1$(42,40) END_IF ; ENTRY$=ENTRY1$+STP(ID$,1)+ENTRY2$; GOTO 3390; REM "item description
3314 IF STOCK$="Y" THEN ITEM_TYPE$="I" ELSE ITEM_TYPE$="C" END_IF ; GOSUB 7800; UM_EXT$=EXT_UM$; ENTRY$=ENTRY1$+UM_EXT$+ENTRY2$; GOTO 3390; REM "um_ext, selling u/m & u/per extended
3315 IF STOCK$="Y" THEN SP=IC0[0] ELSE SP=FM1[3] END_IF ; IF EC$[7](598,1)<>"Y" AND (FM1[29]<>0 OR EC$[7](601,1)="Y") THEN SP=FM1[29] END_IF ; IF EC$[2](322,1)="Y" THEN TEMP$="" ELSE TEMP$=STR(SP:X3$(69,1)+"###,###.00") END_IF ; ENTRY$=ENTRY1$+TEMP$+ENTRY2$; GOTO 3390; REM "sell price. SSP175762, make logic consistant with EC3PC0. SSP263620, was IF EC$[7](598,1)="N", corrected to <>"Y"
3316 IF STOCK$="Y" THEN ITEMKEYIN$=IC0$(1,20) ELSE ITEMKEYIN$=FM1$(1,20) END_IF ; ENTRY$=ENTRY1$+ITEMKEYIN$+ENTRY2$; GOTO 3390; REM "item_key - key to Form master
3317 ENTRY$=ENTRY1$+USER$+ENTRY2$; GOTO 3390; REM "user
3318 ENTRY$=ENTRY1$+PASSWORD$+ENTRY2$; GOTO 3390; REM "password
3319 ENTRY$=ENTRY1$+SESSION_ID$+ENTRY2$; GOTO 3390; REM "session id
3320 ENTRY$=ENTRY1$+STP(ECH$(21,20),1)+ENTRY2$; GOTO 3390; REM "catalog_code from ECH; REM "150761
3321 IF LEN(ECH$)<121 THEN ECH$=ECH$+DIM(60) END_IF ; ENTRY$=ENTRY1$+STP(ECH$(61,60),1)+ENTRY2$; GOTO 3390; REM "catalog_addl from ECH
3322 IF LEN(ECH$)<181 THEN ECH$=ECH$+DIM(180) END_IF ; ENTRY$=ENTRY1$+STP(ECH$(121,60),1)+ENTRY2$; GOTO 3390; REM "catalog_image from ECH
3323 IF FM1[29]=0 THEN FMS_PRICE=FM1[3] ELSE FMS_PRICE=FM1[29] END_IF ; IF EC$[2](322,1)="Y" THEN TEMP$="" ELSE TEMP$=STR(FMS_PRICE:X3$(69,1)+"###,###.00") END_IF ; ENTRY$=ENTRY1$+TEMP$+ENTRY2$; GOTO 3390; REM "fms_price
3324 IF STOCK$="Y" THEN ITEM_TYPE$="I" ELSE ITEM_TYPE$="C" END_IF ; GOSUB 7800; UM_EXT$=EXT_UM$,ENTRY$=ENTRY1$+UM_EXT$+ENTRY2$; GOTO 3390; REM "alt_um_ext, alternate unit of issue  u/m & u/per extended
3325 IF STOCK$="Y" THEN ENTRY$=ENTRY1$+STR(IC0[0]:"$###,###.00")+ENTRY2$; GOTO 3390 END_IF ; IF FM1[25]=0 THEN ALT_PRICE=FM1[3] ELSE IF FM1[3]=0 OR FM1[4]=0 THEN ALT_PRICE=0 ELSE ALT_PRICE=FM1[3]*FM1[25]/FM1[4] END_IF END_IF ; IF EC$[2](322,1)="Y" THEN TEMP$="" ELSE TEMP$=STR(ALT_PRICE:X3$(69,1)+"###,###.00") END_IF ; ENTRY$=ENTRY1$+TEMP$+ENTRY2$; GOTO 3390; REM "price_in_alt_um, calculated from sell price, sell u/m and alt iss #1 um
3326 IF FM1[29]=0 THEN FMS_PRICE=FM1[3] ELSE FMS_PRICE=FM1[29] END_IF ; IF EC$[2](322,1)="Y" THEN ENTRY$=ENTRY1$+ENTRY2$ ELSE ENTRY$=ENTRY1$+STR(FMS_PRICE:"$###,###.00 per ")+ENTRY2$ END_IF ; GOTO 3390; REM "flagged_fms_price,shown unless don't show flag in buyer is set
3327 ISTART=31; GOSUB 6900; ENTRY$=ENTRY1$+IMAGE$+ENTRY2$; GOTO 3390; REM "image_form1 159016
3328 ISTART=61; GOSUB 6900; ENTRY$=ENTRY1$+IMAGE$+ENTRY2$; GOTO 3390; REM "image_form2  159016
3329 ISTART=91; GOSUB 6900; ENTRY$=ENTRY1$+IMAGE$+ENTRY2$; GOTO 3390; REM "image_form3 159016
3330 ISTART=121; GOSUB 6900; ENTRY$=ENTRY1$+IMAGE$+ENTRY2$; GOTO 3390; REM "image_form4 159016
3331 ISTART=151; GOSUB 6900; ENTRY$=ENTRY1$+IMAGE$+ENTRY2$; GOTO 3390; REM "image_form5 159016
3332 ENTRY$=ENTRY1$+EC$[8]+STP(ECR$(31,30),2)+ENTRY2$; GOTO 3390; REM "image_form1_link
3333 ENTRY$=ENTRY1$+EC$[8]+STP(ECR$(61,30),2)+ENTRY2$; GOTO 3390; REM "image_form2_link
3334 ENTRY$=ENTRY1$+EC$[8]+STP(ECR$(91,30),2)+ENTRY2$; GOTO 3390; REM "image_form3_link
3335 ENTRY$=ENTRY1$+EC$[8]+STP(ECR$(121,30),2)+ENTRY2$; GOTO 3390; REM "image_form4_link
3336 IF STP(ECR$(151,30),3," ")="" THEN ENTRY$=ENTRY1$+ENTRY2$; GOTO 3390 ELSE ENTRY$=ENTRY1$+EC$[8]+STP(ECR$(151,30),2)+ENTRY2$; GOTO 3390; REM "image_form5_link.  SSP166278
3337 ENTRY$=ENTRY1$+FM0$(12,4)+ENTRY2$; GOTO 3390; REM "st_code
3338 ENTRY$=ENTRY1$+FM0$(16,35)+ENTRY2$; GOTO 3390; REM "st_description
3339 ENTRY$=ENTRY1$+FM0$(51,30)+ENTRY2$; GOTO 3390; REM "st_addr1
3340 ENTRY$=ENTRY1$+FM0$(81,30)+ENTRY2$; GOTO 3390; REM "st_addr2
3341 ENTRY$=ENTRY1$+FM0$(111,16)+ENTRY2$; GOTO 3390; REM "st_city
3342 ENTRY$=ENTRY1$+FM0$(127,2)+ENTRY2$; GOTO 3390; REM "st_state
3343 ZIPIN$=FM0$(129,9); GOSUB 8000; ENTRY$=ENTRY1$+ZIPOUT$+ENTRY2$; GOTO 3390; REM "st_zip
3344 ZIPIN$=FM0$(129,9); GOSUB 8000; ENTRY$=ENTRY1$+STP(FM0$(111,16),2)+", "+FM0$(127,2)+" "+ZIPOUT$+ENTRY2$; GOTO 3390; REM "st_city_state_zip
3345 PIN$=FM0$(200,14); GOSUB 8030; ENTRY$=ENTRY1$+POUT$+ENTRY2$; GOTO 3390; REM "st_phone
3346 ENTRY$=ENTRY1$+FM0$(214,9)+ENTRY2$; GOTO 3390; REM "st_location
3347 ENTRY$=ENTRY1$+FM0$(382,20)+ENTRY2$; GOTO 3390; REM "st_rec_dept
3348 GOSUB 7600; ENTRY$=ENTRY1$+VAR_TEXT$+ENTRY2$; GOTO 3390; REM "3p_text, ENTRY2$ should have [x] on front of it
3349 ITEMKEYIN$=FM1$(1,20); GOSUB 7700; ENTRY$=ENTRY1$+ITEM_KEY_UE$+ENTRY2$; GOTO 3390; REM "item_key_ue
3350 GOSUB 7750; ENTRY$=ENTRY1$+DESC_UE$+ENTRY2$; GOTO 3390; REM "desc_ue
3351 GOSUB 7950; GOSUB 4100; ENTRY$=ENTRY1$+QTYBREAK$+ENTRY2$; GOTO 3390; REM "qtybreakstart
3352 GOSUB 7890; GOTO 3390; REM "fms_in_alt_um
3353 GOSUB 7600; ENTRY$=ENTRY1$+VAR_TEXT$+ENTRY2$; GOTO 3390; REM "vp_text
3354 GOSUB 3900; ENTRY$=ENTRY1$+VAR_URL$+ENTRY2$; GOTO 3390; REM "vp_url
3355 GOSUB 4300; ENTRY$=ENTRY1$+INFOSTOCK$+ENTRY2$; GOTO 3390; REM "infostockstart
3356 GOSUB 4350; ENTRY$=ENTRY1$+INFOWR$+ENTRY2$; GOTO 3390; REM "infowrstart
3357 GOSUB 4400; ENTRY$=ENTRY1$+INFOPO$+ENTRY2$; GOTO 3390; REM "infopostart
3358 ENTRY$=ENTRY1$+STP(FM1$(389,60),2)+ENTRY2$; GOTO 3390; REM "form_memo
3359 GOSUB 7000; ENTRY$=ENTRY1$+MAX$+ENTRY2$; GOTO 3390; REM "monthly_max
3360 LC$=STR(MOD(ENTRY_INDEX,2)+1); ENTRY$=ENTRY1$+LC$+ENTRY2$; GOTO 3390; REM "line_class
3361 GOSUB 4450; ENTRY$=ENTRY1$+STP(FS0$(21,60),2)+ENTRY2$; GOTO 3390; REM "form_note
3362 GOSUB 7000; IF MAX$="" THEN ENTRY$=ENTRY1$+ENTRY2$; GOTO 3390 ELSE ENTRY$=ENTRY1$+STP(STR(NUM(EC$[7](591,2)):"##"),2)+" mo max qty: "+ENTRY2$; GOTO 3390; REM "max_months
3363 GOSUB 7000; ENTRY$=ENTRY1$+CUMULATIVE_MAX$+ENTRY2$; GOTO 3390; REM "cumulative_max
3364 IF EC$[2](322,1)="Y" THEN ENTRY$=ENTRY1$+ENTRY2$; GOTO 3390 ELSE IF ECR$(253,1)="C" THEN SELL_PRICE=FM1(3) ELSE GOSUB 7950; SELL_PRICE=NUM(BREAKPRICE$[0]) END_IF END_IF ; ENTRY$=ENTRY1$+STR(SELL_PRICE:X3$(69,1)+"###,###.00")+ENTRY2$; GOTO 3390; REM "base_price
3365 ITEMKEY$=DISPLAY$[ENTRY_INDEX,1](26,20); ENTRY$=ENTRY1$+ITEMKEY$+ENTRY2$; GOTO 3390; REM "item_key_catalog
3366 GOSUB 7700; ENTRY$=ENTRY1$+ITEM_KEY_CATALOG_UE$+ENTRY2$; GOTO 3390; REM "item_key_catalog_ue "
3367 IF STOCK$="Y" THEN ENTRY$=ENTRY1$+STR(IC0[0]:"$###,###.00")+" per "+ENTRY2$; GOTO 3390 END_IF ; IF FM1[25]=0 THEN ALT_PRICE=FM1[3] ELSE IF FM1[3]=0 OR FM1[4]=0 THEN ALT_PRICE=0 ELSE ALT_PRICE=FM1[3]*FM1[25]/FM1[4] END_IF END_IF ; IF EC$[2](322,1)="Y" THEN TEMP$="" ELSE TEMP$=STR(ALT_PRICE:X3$(69,1)+"###,###.00")+" per " END_IF ; ENTRY$=ENTRY1$+TEMP$+ENTRY2$; GOTO 3390 ! WO166710, flagged_price_in_alt_um, same as line 3325
3368 GOSUB 8200; ENTRY$=ENTRY1$+QB_LIST$+ENTRY2$; GOTO 3390 ! WO175854, qty_breaks_ddl
3369 ENTRY$=ENTRY1$+STP(ECH$(51,10),3)+".pdf"+ENTRY2$; GOTO 3390 ! WO181992, item_code_pdf SSP280572, was GOTO 3395
3370 ENTRY$=ENTRY1$+STP(ECR$(577,20),2)+ENTRY2$; GOTO 3390; REM "ext_ref_1, ssp 213479
3371 ENTRY$=ENTRY1$+STP(FM1$(167,6),1)+ENTRY2$; GOTO 3390 ! SSP280572, rev_date
3372 ENTRY$=ENTRY1$+STP(ECR$(243,10),2)+ENTRY2$; GOTO 3390 ! SSP293536,290795 - 3p_id
3389 ENTRY$=ENTRY1$+ENTRY2$; GOTO 3390; REM "tag not found, take it out
3390 GOTO 3305
3395 RETURN 
3400 REM "Use Search Results file to build display array
3404 GOSUB 3450
3405 IF POSITION_ITEM$="" AND DIRECTION$="B" THEN POSITION_ITEM$=HIKEY$+$FFFFFF$ ELSE IF POSITION_ITEM$="" AND DIRECTION$="F" OR DIRECTION$="" THEN POSITION_ITEM$=HIKEY$; REM "if in backwards order, start at end of file
3410 FIRST_ITEM$="",LAST_ITEM$="",TOTAL_RECORDS=0,INDEX=1; DIM DISPLAY$[MAX_ROWS,2]
3415 READ (Z[7],KEY=POSITION_ITEM$,DOM=3416)
3420 IF DIRECTION$="B" THEN ECTKEY$=KEP(Z[7],END=3435) ELSE ECTKEY$=KEY(Z[7],END=3435)
3425 IF ECTKEY$(1,25)<>HIKEY$ THEN GOTO 3435 ELSE READ (Z[7],KEY=ECTKEY$)*,ECH$; DISPLAY$[INDEX,1]=ECTKEY$,DISPLAY$[INDEX,2]=ECH$,TOTAL_RECORDS=TOTAL_RECORDS+1,INDEX=INDEX+1; IF MAX_ROWS<>0 AND TOTAL_RECORDS>=MAX_ROWS THEN GOTO 3435; REM "skip to correct place to exit
3430 GOTO 3420
3440 IF DIRECTION$="B" THEN FIRST_ITEM$=DISPLAY$[TOTAL_RECORDS,1],LAST_ITEM$=DISPLAY$[1,1] ELSE FIRST_ITEM$=DISPLAY$[1,1],LAST_ITEM$=DISPLAY$[TOTAL_RECORDS,1]
3445 RETURN 
3450 REM "Set VERY_FIRST_ITEM$ and VERY_LAST_ITEM$. These will be used to determine when to NOT show prev and next buttons
3455 VERY_FIRST_ITEM$="",VERY_LAST_ITEM$=""
3460 READ (Z[7],KEY=HIKEY$,DOM=3461)
3465 VK$=KEY(Z[7],END=3466); IF VK$(1,25)=HIKEY$ THEN VERY_FIRST_ITEM$=VK$
3470 READ (Z[7],KEY=HIKEY$+$FF$,DOM=3471)
3471 VK$=KEP(Z[7],END=3472); IF VK$(1,25)=HIKEY$ THEN VERY_LAST_ITEM$=VK$
3495 RETURN 
3500 REM "Output next button, using BUTTON_NEXT_TEMPLATE$ to pass information, creating BUTTON$, if needed
3502 BUTTON$="",BUTTON_NEXT_TAGS$="001<position_item>002<user>003<password>004<session_id>005<category>"
3503 REM "Setup BUTTON_NEXT_TEMPLATE$
3505 READ (100,END=3506)LINE$; GOSUB 7550; BUTTON_NEXT_TEMPLATE$=BUTTON_NEXT_TEMPLATE$+LINE$+EOL$; IF POS("?tf?buttonnextend?"=LINE$)=0 THEN GOTO 3505
3510 IF LAST_ITEM$=VERY_LAST_ITEM$ THEN BUTTON$=""; GOTO 3595 ELSE BUTTON$=BUTTON_NEXT_TEMPLATE$
3515 BNINDEX=POS("?tf?"=BUTTON$); IF BNINDEX=0 THEN GOTO 3591
3516 BNEND_INDEX=POS("?"=BUTTON$(BNINDEX+4)),BNTAG$=BUTTON$(BNINDEX+4,BNEND_INDEX-1),BUTTON1$=BUTTON$(1,BNINDEX-1),BUTTON2$=BUTTON$(BNINDEX+BNEND_INDEX+4),BNPOS=POS("<"+BNTAG$+">"=BUTTON_NEXT_TAGS$); IF BNPOS=0 THEN BUTTON$=BUTTON1$+BUTTON2$,BNINDEX=0 ELSE BNINDEX=NUM(BUTTON_NEXT_TAGS$(BNPOS-3,3))
3520 ON BNINDEX GOTO 3590,3521,3522,3523,3524,3525,3590
3521 BUTTON$=BUTTON1$+LAST_ITEM$+BUTTON2$; GOTO 3590; REM "position_item
3522 BUTTON$=BUTTON1$+USER$+BUTTON2$; GOTO 3590; REM "User
3523 BUTTON$=BUTTON1$+PASSWORD$+BUTTON2$; GOTO 3590; REM "password
3524 BUTTON$=BUTTON1$+SESSION_ID$+BUTTON2$; GOTO 3590; REM "session_id
3525 BUTTON$=BUTTON1$+CATEGORY$+BUTTON2$; GOTO 3590; REM "category
3590 GOTO 3515
3595 RETURN 
3600 REM "Output previous button, using BUTTON_PREV_TEMPLATE$ to pass information, creating BUTTON$, if needed
3602 BUTTON$="",BUTTON_PREV_TAGS$="001<position_item>002<user>003<password>004<session_id>005<category>"
3605 READ (100,END=3606)LINE$; GOSUB 7550; BUTTON_PREV_TEMPLATE$=BUTTON_PREV_TEMPLATE$+LINE$+EOL$; IF POS("?tf?buttonprevend?"=LINE$)=0 THEN GOTO 3605
3610 IF FIRST_ITEM$=VERY_FIRST_ITEM$ THEN BUTTON$=""; GOTO 3695 ELSE BUTTON$=BUTTON_PREV_TEMPLATE$
3615 BNINDEX=POS("?tf?"=BUTTON$); IF BNINDEX=0 THEN GOTO 3691
3616 BNEND_INDEX=POS("?"=BUTTON$(BNINDEX+4)),BNTAG$=BUTTON$(BNINDEX+4,BNEND_INDEX-1),BUTTON1$=BUTTON$(1,BNINDEX-1),BUTTON2$=BUTTON$(BNINDEX+BNEND_INDEX+4),BNPOS=POS("<"+BNTAG$+">"=BUTTON_PREV_TAGS$); IF BNPOS=0 THEN BUTTON$=BUTTON1$+BUTTON2$,BNINDEX=0 ELSE BNINDEX=NUM(BUTTON_PREV_TAGS$(BNPOS-3,3))
3620 ON BNINDEX GOTO 3690,3621,3622,3623,3624,3625,3690
3621 BUTTON$=BUTTON1$+FIRST_ITEM$+BUTTON2$; GOTO 3690; REM "position_item
3622 BUTTON$=BUTTON1$+USER$+BUTTON2$; GOTO 3690; REM "User
3623 BUTTON$=BUTTON1$+PASSWORD$+BUTTON2$; GOTO 3690; REM "password
3624 BUTTON$=BUTTON1$+SESSION_ID$+BUTTON2$; GOTO 3690; REM "session_id
3625 BUTTON$=BUTTON1$+CATEGORY$+BUTTON2$; GOTO 3690; REM "category
3690 GOTO 3615
3695 RETURN 
3700 REM "buttonallstart/end
3702 ALLBUTTON$=""
3705 READ (100,END=3706)LINE$; GOSUB 7550; ALLBUTTON$=ALLBUTTON$+LINE$+EOL$; IF POS("?tf?buttonallend?"=LINE$)=0 THEN GOTO 3705
3707 IF ITEMALL_COUNT=0 THEN ALLBUTTON$=""
3709 RETURN 
3750 REM "Process DISPLAY$[X] and separate into ITEMALL$[X] and ITEM3P$[X] for separate section display
3751 IF SEPARATION_DONE$="Y" THEN GOTO 3795
3752 DIM ITEMALL$[MAX_ROWS,2],ITEM3P$[MAX_ROWS,2]; ITEMALL_COUNT=0,ITEM3P_COUNT=0; REM "[x,1]=item code  [x,2]=ECH$ rec
3753 SEPARATION_DONE$="Y"; IF TOTAL_RECORDS=0 THEN GOTO 3795
3755 FOR SI=1 TO TOTAL_RECORDS
3757 GOSUB SET_READONLY; DIM ECR$(1000); FIND (Z[6],KEY=DISPLAY$[SI,1](26,20),DOM=*NEXT)ECR$; GOSUB CLEAR_READONLY; IF ECR$(243,10)=DIM(10) THEN GOTO 3760 ELSE GOTO 3765 ! SSP227617, add READONLY, change DOM from 3760 to next
3758 GOSUB CLEAR_READONLY; GOTO 3760 ! SSP227617, got the DOM
3760 REM "all item
3762 ITEMALL_COUNT=ITEMALL_COUNT+1,ITEMALL$[ITEMALL_COUNT,1]=DISPLAY$[SI,1],ITEMALL$[ITEMALL_COUNT,2]=DISPLAY$[SI,2]; GOTO 3769; REM "150761
3765 REM "3p item
3767 ITEM3P_COUNT=ITEM3P_COUNT+1,ITEM3P$[ITEM3P_COUNT,1]=DISPLAY$[SI,1],ITEM3P$[ITEM3P_COUNT,2]=DISPLAY$[SI,2]; REM "150761
3769 NEXT SI
3795 RETURN 
3800 REM "Output entries, using ENTRYALL_TEMPLATE$ to pass information, create TABLE$ to output
3801 GOSUB 3750
3802 REM "entry tags moved to line 1110
3803 REM "Setup ENTRYALL_TEMPLATE$
3804 ENTRYALL_TEMPLATE$=LINE$,TABLE$="",PREV_CATEGORY$=""
3805 READ (100,END=3806)LINE$; GOSUB 7550; ENTRYALL_TEMPLATE$=ENTRYALL_TEMPLATE$+LINE$+EOL$; IF POS("?tf?allorderend?"=LINE$)=0 THEN GOTO 3805
3809 REM "Now read catalog,if B direction do it backwards
3810 IF DIRECTION$="B" THEN START_PT=ITEMALL_COUNT,END_PT=1,STEP_SIZE=-1 ELSE START_PT=1,END_PT=ITEMALL_COUNT,STEP_SIZE=1
3812 IF ITEMALL_COUNT=0 THEN GOTO 3849
3815 FOR ENTRY_INDEX=START_PT TO END_PT STEP STEP_SIZE
3816 FINDITEMKEY$=ITEMALL$[ENTRY_INDEX,1](26,20),ECH$=ITEMALL$[ENTRY_INDEX,2]; GOSUB 7100; REM " 157200/150761
3821 REM "**IF ECR$(181,6)<>DIM(6) THEN ECR$(181,6)>X3$(21,6) GOTO 3845 REM "IF EFFECTIVE DATE NOT YET REACHED THEN SKIP
3822 REM "**IF ECR$(187,6)<>DIM(6) THEN ECR$(187,6)<X3$(21,6) GOTO 3845 ; REM "IF EXPIRATION DATE HAS PASSED THEN SKIP
3823 REM "**
3825 ENTRY$=ENTRYALL_TEMPLATE$; GOSUB CHECK_FOR_INCLUDE
3828 IF ITEMALL$[ENTRY_INDEX,1](1,10)<>PREV_CATEGORY$ THEN GOSUB 4000; REM "150761
3830 ACTIVETEMPLATE$=ENTRYALL_TEMPLATE$; GOSUB 3300
3835 IF LEN(TABLE$+ENTRY$)>62000 THEN PRINT (OUTPUT)TABLE$,EOL$,; TABLE$="" END_IF ; TABLE$=TABLE$+ENTRY$
3845 NEXT ENTRY_INDEX
3849 RETURN 
3850 REM "Output entries, using ENTRY3P_TEMPLATE$ to pass information, create TABLE$ to output
3851 GOSUB 3750
3853 REM "Setup ENTRY3P_TEMPLATE$
3854 ENTRY3P_TEMPLATE$=LINE$,TABLE$="",PREV_CATEGORY$=""
3855 READ (100,END=3856)LINE$; GOSUB 7550; ENTRY3P_TEMPLATE$=ENTRY3P_TEMPLATE$+LINE$+EOL$; IF POS("?tf?3porderend?"=LINE$)=0 THEN GOTO 3855
3859 REM "Now read catalog,if B direction do it backwards
3860 IF DIRECTION$="B" THEN START_PT=ITEM3P_COUNT,END_PT=1,STEP_SIZE=-1 ELSE START_PT=1,END_PT=ITEM3P_COUNT,STEP_SIZE=1
3864 IF ITEM3P_COUNT=0 THEN GOTO 3899
3865 FOR ENTRY_INDEX=START_PT TO END_PT STEP STEP_SIZE
3867 FINDITEMKEY$=ITEM3P$[ENTRY_INDEX,1](26,20),ECH$=ITEM3P$[ENTRY_INDEX,2]; GOSUB 7100; REM "150761
3871 REM "**IF ECR$(181,6)<>DIM(6) THEN ECR$(181,6)>X3$(21,6) GOTO 3895 REM "IF EFFECTIVE DATE NOT YET REACHED THEN SKIP
3872 REM "**IF ECR$(187,6)<>DIM(6) THEN ECR$(187,6)<X3$(21,6) GOTO 3895 ; REM "IF EXPIRATION DATE HAS PASSED THEN SKIP
3873 REM "**
3875 ENTRY$=ENTRY3P_TEMPLATE$; GOSUB CHECK_FOR_INCLUDE
3880 ACTIVETEMPLATE$=ENTRY3P_TEMPLATE$; GOSUB 3300
3885 IF LEN(TABLE$+ENTRY$)>62000 THEN PRINT (OUTPUT)TABLE$,EOL$,; TABLE$="" END_IF ; TABLE$=TABLE$+ENTRY$
3895 NEXT ENTRY_INDEX
3899 RETURN 
3900 ! Set VAR_URL$, assumes ECR$ is for current item - ssp#148607
3905 VAR_URL$=""
3910 DIM EC6$(900); FIND (Z[16],KEY=ECR$(243,10),DOM=*NEXT)EC6$
3915 VAR_URL$=STP(EC6$(81,60))
3949 RETURN 
4000 REM "Category has changed, output a category header (if categorystart was supplied and we have html to do so), then update PREV_CATEGORY$
4002 CAT_TAGS$="001<category_code>002<category_desc>003<category_addl>"
4003 DIM ECG$(100); ECG$(1,10)=DISPLAY$[ENTRY_INDEX,1](1,10); FIND (Z[4],KEY=ECG$(1,10),DOM=4004)IOL=0340
4004 PREV_CATEGORY$=DISPLAY$[ENTRY_INDEX,1](1,10)
4005 IF CAT_TEMPLATE$="" THEN GOTO 4095 ELSE CAT$="",TMP_CAT$=CAT_TEMPLATE$; REM "Skip if no template supplied, else setup for starting
4006 CINDEX=POS("?tf?"=TMP_CAT$); IF CINDEX=0 THEN CAT$=CAT$+TMP_CAT$; GOTO 4093
4007 CEND_INDEX=POS("?"=TMP_CAT$(CINDEX+4)),CTAG$=TMP_CAT$(CINDEX+4,CEND_INDEX-1),CAT$=CAT$+TMP_CAT$(1,CINDEX-1),TMP_CAT$=TMP_CAT$(CINDEX+CEND_INDEX+4),CPOS=POS("<"+CTAG$+">"=CAT_TAGS$); IF CPOS=0 THEN CINDEX=0 ELSE CINDEX=NUM(CAT_TAGS$(CPOS-3,3))
4010 ON CINDEX GOTO 4089,4011,4012,4013,4089
4011 CAT$=CAT$+STP(ECG$(1,10),1); GOTO 4090; REM "category_code
4012 CAT$=CAT$+STP(ECG$(11,30),1); GOTO 4090; REM "category_desc
4013 CAT$=CAT$+STP(ECG$(41,60),1); GOTO 4090; REM "category_addl
4089 CAT$=CAT$+"?"; GOTO 4090; REM "tag not found, replace with '?'
4090 GOTO 4006
4093 TABLE$=TABLE$+CAT$
4095 RETURN 
4100 REM "quantity break pricing section (qtybreakstart)
4101 REM "Output entries, using QTYBREAK_TEMPLATE$ to pass information, create QTABLE$ to output
4102 REM "entry tags moved to line 1110
4103 REM "Setup QTYBREAK_TEMPLATE$
4104 QTYBREAK_TEMPLATE$=ACTIVETEMPLATE$,QTABLE$="",TMPENTRY$=ACTIVETEMPLATE$
4110 STARTQP=POS("<!?tf?qtybreakstart?>"=QTYBREAK_TEMPLATE$); IF STARTQP<>0 AND LEN(QTYBREAK_TEMPLATE$)<>STARTQP+21 THEN QTYBREAK_TEMPLATE$=QTYBREAK_TEMPLATE$(STARTQP+21)
4111 ENDQP=POS("<!?tf?qtybreakend?>"=QTYBREAK_TEMPLATE$); IF ENDQP<>0 THEN QTYBREAK_TEMPLATE$=QTYBREAK_TEMPLATE$(1,ENDQP-1)
4112 REM "strip out the qtybreakstart/end section from ENTRY2$ that is currently being processed
4115 ENDQP=POS("<!?tf?qtybreakend?>"=ENTRY2$); IF ENDQP=0 THEN GOTO 4116 ELSE ENTRY2$=ENTRY2$(ENDQP+21)
4116 IF LEN(ENTRY1$)<=2 THEN GOTO 4117 END_IF ; IF ENTRY1$(LEN(ENTRY1$)-1,2)="<!" THEN ENTRY1$=ENTRY1$(1,LEN(ENTRY1$)-2); REM "strip out page control tag <! that is left over with the processing of it as a simple data tag
4117 REM "PRINT 'CS',"ENTRY1: ",'LF',@(0),ENTRY1$,; INPUT *
4120 QBENTRY$=QTYBREAK_TEMPLATE$
4122 IF QTYBREAKS_INEFFECT$="Y" THEN GOSUB 4200; QTYBREAK$=QBENTRY$ ELSE QTYBREAK$=""; REM "157200
4149 RETURN 
4200 REM "Given item, create row in table
4210 CALL "EC3QB2",X3$,X4$,EC_PARM$,EC${ALL},STOCK$,FLAGGED_STOCK$,ECR$,BREAKQTY${ALL},BREAKPRICE${ALL},BREAKALL${ALL},BREAKRANGE${ALL},BREAKRANGEALL${ALL},QBENTRY$,OPTIONS$,FM1$,IC0$
4240 RETURN 
4300 REM "infostockstart - strip section into INFOSTOCK_TEMPLATE$
4301 REM "Output entries, using INFOSTOCK_TEMPLATE$ to pass information
4304 INFOSTOCK_TEMPLATE$=ACTIVETEMPLATE$,TMPENTRY$=ACTIVETEMPLATE$
4310 STARTXX=POS("<!?tf?infostockstart?>"=INFOSTOCK_TEMPLATE$); IF STARTXX<>0 AND LEN(INFOSTOCK_TEMPLATE$)<>STARTXX+22 THEN INFOSTOCK_TEMPLATE$=INFOSTOCK_TEMPLATE$(STARTXX+22)
4311 ENDXX=POS("<!?tf?infostockend?>"=INFOSTOCK_TEMPLATE$); IF ENDXX<>0 THEN INFOSTOCK_TEMPLATE$=INFOSTOCK_TEMPLATE$(1,ENDXX-1)
4312 REM "strip out the infostockstart/end section from ENTRY2$ that is currently being processed
4315 ENDXX=POS("<!?tf?infostockend?>"=ENTRY2$); IF ENDXX=0 THEN GOTO 4316 ELSE ENTRY2$=ENTRY2$(ENDXX+22)
4316 IF LEN(ENTRY1$)<=2 THEN GOTO 4317 END_IF ; IF ENTRY1$(LEN(ENTRY1$)-1,2)="<!" THEN ENTRY1$=ENTRY1$(1,LEN(ENTRY1$)-2); REM "strip out page control tag <! that is left over with the processing of it as a simple data tag
4317 REM "PRINT 'CS',"ENTRY1: ",'LF',@(0),ENTRY1$,; INPUT *
4319 IF STOCK$<>"Y" AND FLAGGED_STOCK$<>"Y" THEN INFOSTOCK_TEMPLATE$=""; REM "if not stock item then return nothing
4320 INFOSTOCKENTRY$=INFOSTOCK_TEMPLATE$
4322 REM "GOSUB 4200
4332 INFOSTOCK$=INFOSTOCKENTRY$
4349 RETURN 
4350 REM "infowrstart - strip section into INFOWR_TEMPLATE$
4351 REM "Output entries, using INFOWR_TEMPLATE$ to pass information
4354 INFOWR_TEMPLATE$=ACTIVETEMPLATE$,TMPENTRY$=ACTIVETEMPLATE$
4360 STARTXX=POS("<!?tf?infowrstart?>"=INFOWR_TEMPLATE$); IF STARTXX<>0 AND LEN(INFOWR_TEMPLATE$)<>STARTXX+19 THEN INFOWR_TEMPLATE$=INFOWR_TEMPLATE$(STARTXX+19)
4361 ENDXX=POS("<!?tf?infowrend?>"=INFOWR_TEMPLATE$); IF ENDXX<>0 THEN INFOWR_TEMPLATE$=INFOWR_TEMPLATE$(1,ENDXX-1)
4362 REM "strip out the infowrstart/end section from ENTRY2$ that is currently being processed
4365 ENDXX=POS("<!?tf?infowrend?>"=ENTRY2$); IF ENDXX=0 THEN GOTO 4366 ELSE ENTRY2$=ENTRY2$(ENDXX+19)
4366 IF LEN(ENTRY1$)<=2 THEN GOTO 4367 END_IF ; IF ENTRY1$(LEN(ENTRY1$)-1,2)="<!" THEN ENTRY1$=ENTRY1$(1,LEN(ENTRY1$)-2); REM "strip out page control tag <! that is left over with the processing of it as a simple data tag
4367 REM "PRINT 'CS',"ENTRY1: ",'LF',@(0),ENTRY1$,; INPUT *
4369 IF ECR$(255,1)="Y" OR STOCK$="Y" OR FLAGGED_STOCK$="Y" THEN INFOWR_TEMPLATE$=""; REM "if not warehouse release of custom form then return nothing
4370 INFOWRENTRY$=INFOWR_TEMPLATE$
4372 REM "GOSUB 4200
4382 INFOWR$=INFOWRENTRY$
4399 RETURN 
4400 REM "infopostart - strip section into INFOPO_TEMPLATE$
4401 REM "Output entries, using INFOPO_TEMPLATE$ to pass information
4404 INFOPO_TEMPLATE$=ACTIVETEMPLATE$,TMPENTRY$=ACTIVETEMPLATE$
4410 STARTXX=POS("<!?tf?infopostart?>"=INFOPO_TEMPLATE$); IF STARTXX<>0 AND LEN(INFOPO_TEMPLATE$)<>STARTXX+19 THEN INFOPO_TEMPLATE$=INFOPO_TEMPLATE$(STARTXX+19)
4411 ENDXX=POS("<!?tf?infopoend?>"=INFOPO_TEMPLATE$); IF ENDXX<>0 THEN INFOPO_TEMPLATE$=INFOPO_TEMPLATE$(1,ENDXX-1)
4412 REM "strip out the infopostart/end section from ENTRY2$ that is currently being processed
4415 ENDXX=POS("<!?tf?infopoend?>"=ENTRY2$); IF ENDXX=0 THEN GOTO 4416 ELSE ENTRY2$=ENTRY2$(ENDXX+19)
4416 IF LEN(ENTRY1$)<=2 THEN GOTO 4417 END_IF ; IF ENTRY1$(LEN(ENTRY1$)-1,2)="<!" THEN ENTRY1$=ENTRY1$(1,LEN(ENTRY1$)-2); REM "strip out page control tag <! that is left over with the processing of it as a simple data tag
4417 REM "PRINT 'CS',"ENTRY1: ",'LF',@(0),ENTRY1$,; INPUT *
4419 IF ECR$(255,1)<>"Y" OR STOCK$="Y" OR FLAGGED_STOCK$="Y" THEN INFOPO_TEMPLATE$=""; REM "if not warehouse release of custom form then return nothing   ; 157200
4420 INFOPOENTRY$=INFOPO_TEMPLATE$
4422 REM "GOSUB 4200
4432 INFOPO$=INFOPOENTRY$
4449 RETURN 
4450 REM "read in FS0 for item
4452 DIM FS0$(200); FIND (Z(17),KEY=FM1$(1,20),DOM=4453)FS0$
4459 RETURN 
5000 REM "Item Search
5002 HIKEY$=EC$[1](1,22)+SEARCH_TYPE$,FOUND=0
5004 IF NEW_SEARCH$<>"Y" THEN GOTO 5020
5005 LOCK (Z[7]); UNLOCK (Z[7]) ! SSP278795, verify we can lock, if error it will fall though to error logic
5006 CALL "ZZINIT",STR(Z[7]:"00")
5020 REM "process search type
5021 REM "I/C=form search    FM0=ship-to search    ORD=TF order number   P/O=customer p/o
5025 ON STYPE GOTO 5050,5200,5300
5050 REM "item search setup
5055 IF CATEGORY$="**********" THEN SEARCH_CATEGORY$=EDI_CATEGORY_LIST$ ELSE SEARCH_CATEGORY$=CATEGORY$
5060 IF CATALOG_HOLDER$="**********" THEN SEARCH_CATEGORY$=CATALOG_LIST$
5090 REM "item searches
5100 IF ALL_PUBLISHED$<>"" THEN FOR INT_CAT=0 TO LEN(ALL_PUBLISHED$)/10-1; CATALOG$=ALL_PUBLISHED$(INT_CAT*10+1,10)
5102 FOR CATINDEX=0 TO LEN(SEARCH_CATEGORY$)/10-1; REM "get next category
5103 CURRCAT$=SEARCH_CATEGORY$(CATINDEX*10+1,10)
5104 IF CURRCAT$=EC$[2](483,10) THEN SEARCH_MYCATEGORY$="Y"; READ (Z[10],KEY=EC$[2](1,15),DOM=5105) ELSE SEARCH_MYCATEGORY$="N"; READ (Z[5],KEY=CATALOG$+CURRCAT$,DOM=5106)
5105 EDEKEY$=KEY(Z[10],END=5180); READ (Z[10],KEY=EDEKEY$)EDEREC$; DIM ECH$(60); ECH$(1,10)=EC$[2](325,10),ECH$(11,10)=EC$[2](483,10),ECH$(21,40)=EDEREC$(16,40); IF EDEKEY$(1,15)<>EC$[2](1,15) THEN GOTO 5180 ELSE GOTO 5108; REM "if my catagory being searched then check for break
5106 ECHKEY$=KEY(Z[5],END=5180); IF ECHKEY$(1,10)<>CATALOG$ THEN GOTO 5180 END_IF ; IF ECHKEY$(11,10)<>CURRCAT$ THEN GOTO 5180 END_IF ; REM "if end-of-catalog or end-of-category --> get next category to process
5107 GOSUB SET_READONLY; READ (Z[5],KEY=ECHKEY$)IOL=0350; DIM ECR$(1000); FIND (Z[6],KEY=ECH$(41,20),DOM=5108)IOL=0360; GOSUB 8100; IF ITEM_OK$<>"Y" THEN GOTO 5160 ELSE GOSUB 8450; IF CAT_OK$<>"Y" THEN GOTO 5160 ! SSP173447, added category check.  SSP227617, SET_READONLY was on line 5108, moved to line 5107
5108 DIM IC0$(200),IC0[40],FM1$(500),FM1[40]; IF ECH$(41,10)=DIM(10) THEN STOCK$="Y"; FIND (Z[11],KEY=ECH$(41,20),DOM=5160)IOL=0410; ITEMVAR$=IC0$ ELSE STOCK$="N"; FIND (Z[2],KEY=ECH$(41,20),DOM=5160)IOL=0320; ITEMVAR$=FM1$ ! SSP227617, move SET_READONLY from line 5108 to line 5107
5109 REPORT$="N",SINDEX=1
5110 IF EC$[2](339,1)<>"Y" THEN GOTO 5115 ELSE IF EC$[2](483,10)<>DIM(10) THEN GOTO 5112
5111 FIND (Z[9],KEY=ECH$(41,20)+EC$[2](61,4),DOM=5160); REM "if requiring activity at location - then skip if no FM4 record
5120 WHILE SINDEX<=ITEM_SEARCH_ELEMENTS AND REPORT$="N"; REM "set at 601
5121 IF SINDEX=1 AND EXACT_ITEMCODE_MATCH$="Y" THEN WILDCD$="" ELSE WILDCD$="*" END_IF ; IF LEN(STP(SI$[SINDEX,1],2))=0 THEN GOTO 5140 END_IF ; ITEMDONE$="N",ITEMINDEX=0; IF STOCK$<>"Y" THEN SECONDINDEX=2 ELSE SECONDINDEX=4; REM "no value requested for matching from the search request 150761-exact item code match option
5122 IF SINDEX<>1 THEN CKITEM$=SI$[SINDEX,1]; IF LEN(STP(CKITEM$,2))=0 THEN GOTO 5140 ELSE GOTO 5135; REM "if not item code search then get item to check
5123 WHILE ITEMDONE$<>"Y" AND ITEMINDEX<=LEN(SI$[SINDEX,1])/10-1; CKITEM$=SI$[SINDEX,1](ITEMINDEX*10+1,10),ITEMINDEX=ITEMINDEX+1; IF LEN(STP(CKITEM$,2))=0 THEN GOTO 5129
5124 PATTERN$=WILDCD$+STP(UCS(CKITEM$),1," ")+WILDCD$,ITEMVALUE$=STP(UCS(STP(ITEMVAR$(NUM(SI$[SINDEX,SECONDINDEX](1,4)),NUM(SI$[SINDEX,SECONDINDEX](5,4))),1)),0) ! SSP168644, changed back to original from WO150761, had changed on 162672?  SSP177701, change STP option to 1 for PATTERN$, was 3
5125 IF LEN(ITEMVALUE$)=0 THEN GOTO 5129
5128 IF ITEMVALUE$ LIKE PATTERN$ THEN ITEMDONE$="Y",REPORT$="Y"
5129 WEND ; GOTO 5140; REM "get next item code to check
5135 REM "item desc ck 159610
5136 PATTERN$=WILDCD$+STP(UCS(CKITEM$),1," ")+WILDCD$,ITEMVALUE$=STP(UCS(STP(ITEMVAR$(NUM(SI$[SINDEX,SECONDINDEX](1,4)),NUM(SI$[SINDEX,SECONDINDEX](5,4))),1)),0); REM "get ic0$/fm1$ value - convert to uppercase and strip leading/trailing blanks 159610.  SSP177701, change STP option to 1 for PATTERN$, was 3
5137 IF ITEMVALUE$ LIKE PATTERN$ THEN ITEMDONE$="Y",REPORT$="Y"; REM "159610
5140 SINDEX=SINDEX+1; WEND 
5145 IF REPORT$="N" THEN GOTO 5160
5150 REM "item qualifies against search
5152 FOUND=FOUND+1; IF STOCK$<>"Y" THEN WRITE (Z[7],KEY=HIKEY$+ECH$(41,20))HIKEY$+ECH$,ECH$,IOL=0320 ELSE WRITE (Z[7],KEY=HIKEY$+ECH$(41,20))HIKEY$+ECH$,ECH$,IOL=0410
5160 GOSUB CLEAR_READONLY; IF SEARCH_MYCATALOG$<>"Y" THEN GOTO 5106 ELSE GOTO 5105; REM "get next catalog record
5180 NEXT CATINDEX
5181 IF ALL_PUBLISHED$<>"" THEN NEXT INT_CAT
5190 GOTO 5990
5200 REM "customer ship-to searches
5216 READ (Z[8],KEY="C"+EC$[2](51,10),DOM=5220)
5220 FM0KEY$=KEY(Z[8],END=5280); IF FM0KEY$(1,11)<>"C"+EC$[2](51,10) THEN GOTO 5280
5224 READ (Z[8],KEY=FM0KEY$)IOL=0380
5232 REPORT$="N",SINDEX=1
5236 WHILE SINDEX<=ST_SEARCH_ELEMENTS AND REPORT$="N"; REM "set at 601
5240 ON POS(ST$[SINDEX,3]="SN") GOTO 5244,5244,5244
5244 IF LEN(STP(ST$[SINDEX,1],2))=0 THEN GOTO 5260; REM "no value requested for matching from the search request
5248 PATTERN$="*"+UCS(ST$[SINDEX,1])+"*",FM0VALUE$=STP(UCS(STP(FM0$(NUM(ST$[SINDEX,2](1,4)),NUM(ST$[SINDEX,2](5,4))),1)),0); REM "get fm0$ value - convert to uppercase and strip leading/trailing blanks
5252 IF LEN(FM0VALUE$)=0 THEN GOTO 5260
5256 IF FM0VALUE$ LIKE PATTERN$ THEN REPORT$="Y"
5260 SINDEX=SINDEX+1; WEND 
5264 IF REPORT$="N" THEN GOTO 5280
5268 REM "shipto qualifies against search
5272 WRITE (Z[7],KEY=HIKEY$+FM0KEY$)IOL=0380; FOUND=FOUND+1
5276 GOTO 5220; REM "get next catalog record
5280 GOTO 5990
5300 REM "tf order information search
5990 READ (Z[7],KEY="",DOM=5991)
5995 RETURN 
6900 REM "format image code 159016
6905 IMAGE$=STP(ECR$(ISTART,30),3," ")
6910 IF STP(IMAGE$,3," ")="" THEN IMAGE$=IMGSRC_PREFIX$+STP(EC_PARM$(198,60),2)+STP(EC_PARM$(411,20),2)+IMGSRC_ATTRIB$+IMGSRC_SUFFIX$ ELSE IMAGE$=IMGSRC_PREFIX$+EC$[8]+IMAGE$+IMGSRC_ATTRIB$+IMGSRC_SUFFIX$
6920 IF ISTART=151 AND STP(ECR$(ISTART,30),3," ")="" THEN IMAGE$="" ! SSP166278
6945 RETURN 
7000 REM "monthly_max
7002 IF EC$[2](87,1)="Y" THEN GOTO 7040 ELSE IF STP(FM4$,2)="" OR FM4$(1,20)<>ECH$(41,20) THEN GOSUB 7050
7003 MAX=0
7004 IF FM4LOCATED$="N" THEN GOTO 7010; REM "if no fm4 then only check for item parm max level
7006 IF FM4(10)<>0 THEN MAX=FM4(10); GOTO 7040
7007 PERCENTUSAGE=NUM(EC$[2](229,4)); IF PERCENTUSAGE=0 OR THEN THEN GOTO 7010
7008 MAX=FM4(0)*(PERCENTUSAGE/100); GOTO 7040
7010 IF NUM(ECR$(520,8))<>0 THEN MAX=NUM(ECR$(520,8)); GOTO 7040
7040 GOSUB 7800; MAX=MAX/SELLPACK
7042 IF MAX=0 THEN MAX$="" ELSE MAX$=STP(STR(MAX:"#,###,##0"),1)+" "+EXT_UM$
7043 IF MAX=0 THEN CUMULATIVE_MAX$="" ELSE CUMULATIVE_MAX$=STP(STR(MAX*NUM(EC$[7](591,2)):"#,###,##0"),2)+" "+EXT_UM$
7045 RETURN 
7050 REM "get FM4 record
7054 DIM FM4(15),FM4(500)
7070 READ (Z(9),KEY=ECH$(41,20)+EC$[1](1167,4),DOM=7071)IOL=0390; FM4LOCATED$="Y"; GOTO 7072
7071 FM4LOCATED$="N"
7095 RETURN 
7100 REM "get FM1/IC0/ECR item information ssp 157200
7101 BADITEM$="N",IC0FOUND$="N",STOCK$="N",FLAGGED_STOCK$="N"; REM "158267
7103 GOSUB SET_READONLY ! SSP227617, will clear at 7140 (RETURN)
7105 IF FINDITEMKEY$(1,10)=DIM(10) THEN STOCK$="Y" ELSE STOCK$="N"; REM "157200
7108 DIM FM1$(550),FM1[31],IC0$(200),IC0[40]; IF STOCK$="N" THEN FIND (Z[2],KEY=FINDITEMKEY$,DOM=7109)IOL=0320; GOTO 7110 ELSE GOTO 7112
7109 FM1$(1,20)=EC$[2](51,10)+ITEM_KEY$,FINDITEMKEY$=FM1$(1,20); FIND (Z(2),KEY=FM1$(1,20),DOM=7111)IOL=0320; ITEM_KEY$=FM1$(1,20); GOTO 7110; REM "if can't find item initially then add the customer (assuming they only sent over the item code and not the associated customer) ssp 135581
7110 IF FM1$(105,1)="Y" AND EC_PARM$(556,1)="Y" THEN FLAGGED_STOCK$="Y"; GOTO 7112 ELSE GOTO 7112
7111 BADITEM$="Y"; GOTO 7140
7112 FIND (Z(11),KEY=FINDITEMKEY$(1,20),DOM=7113)IOL=0410; IC0FOUND$="Y"; GOTO 7115; REM "get IC0 record using custom item master key
7113 FIND (Z(11),KEY=DIM(10)+FINDITEMKEY$(11,10),DOM=7115)IOL=0410; IC0FOUND$="Y"; REM "get IC0 record using stock setting
7115 IF STOCK$="Y" AND IC0FOUND$<>"Y" THEN GOTO 7111; REM "bad record since stock item but no IC0 record found
7130 DIM ECR$(1024); FIND (Z[6],KEY=FINDITEMKEY$(1,20),DOM=7131)IOL=0360; REM "get form webec parms
7131 IF IC0FOUND$="N" AND ECR$(253,1)="I" THEN ECR$(253,1)="C"; REM "if pricing source set to inventory but no inventory record found then reset to custom item master
7140 GOSUB CLEAR_READONLY; RETURN ! SSP227617, set on 7103 
7400 SET_READONLY:
7410 SET_PARAM 'XI'
7420 SET_READONLY_END:RETURN 
7430 CLEAR_READONLY:
7435 SET_PARAM -'XI'
7440 CLEAR_READONLY_END:RETURN 
7550 REM "Send LINE$ to EC3BYB for generic fields processing
7560 CALL "EC3BYB",ERR=7561,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,LINE$,BYBINFO${ALL},BYBOPTIONS$,100 ! 227154
7595 RETURN 
7600 REM "3p_text handling, ENTRY2$ should have [x] in it
7605 REM "Extract [x] part from line2, if not found then ignore
7606 VAR_TEXT$=""
7610 IF LEN(ENTRY2$)<3 THEN GOTO 7611 ELSE BRACKET_POS=POS("]"=ENTRY2$); IF ENTRY2$(1,1)<>"[" OR BRACKET_POS=0 THEN GOTO 7611 ELSE VAR_CODE$=ENTRY2$(1,BRACKET_POS),ENTRY2$=ENTRY2$(BRACKET_POS+1); GOTO 7612
7611 VAR_TEXT$=""; GOTO 7645; REM "did not find var code part, so leave
7612 VAR_CODE$=VAR_CODE$(2,LEN(VAR_CODE$)-2); VAR_CODE$=STR(NUM(VAR_CODE$,ERR=7611):"00000")
7615 VAR_CODE_KEY$=ECR$(243,10)+VAR_CODE$; CALL "EC3BYC",X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,VAR_CODE_KEY$,VAR_TEXT${ALL}
7620 VAR_TEXT$=VAR_TEXT$[1]
7645 RETURN 
7700 REM "Netscape and other may require URL encoded item code to hide spaces, slashes, etc. we will encode the whole string rather than just the special chars, because its easier
7705 ITEM_KEY_UE$="",ITEM_KEY_CATALOG_UE$=""
7707 IF STOCK$="Y" OR FLAGGED_STOCK$="Y" THEN ITEMKEY$=IC0$(1,20) ELSE ITEMKEY$=FM1$(1,20)
7708 ITEMKEYCATALOG$=DISPLAY$[ENTRY_INDEX,1](26,20)
7710 FOR JJ=1 TO 20; ITEM_KEY_UE$=ITEM_KEY_UE$+"%"+HTA(ITEMKEY$(JJ,1)); NEXT JJ
7712 FOR JJ=1 TO 20; ITEM_KEY_CATALOG_UE$=ITEM_KEY_CATALOG_UE$+"%"+HTA(ITEMKEYCATALOG$(JJ,1)); NEXT JJ
7745 RETURN 
7750 REM "URL encode the description
7755 DESC_UE$="",DESC$=STP(FM1$(42,40),1); IF DESC$="" THEN GOTO 7795
7760 FOR JJ=1 TO LEN(DESC$); DESC_UE$=DESC_UE$+"%"+HTA(DESC$(JJ,1)); NEXT JJ
7795 RETURN 
7800 REM "get active uom
7810 ON POS(ITEM_TYPE$="CI")-1 GOTO 7820,7840
7820 REM "C - items FM1
7830 IF STP(FM1$(238,4),3," ")="" OR FM1[25]=0 THEN UM$=STP(FM1$(100,4),1),PACK=FM1[4],EXT_UM$=UM$+"/"+STR(PACK:"###0"); GOTO 7860 ELSE UM$=STP(FM1$(238,4),1),PACK=FM1[25],EXTU$=UM$+"/"+STR(PACK:"###0"); GOTO 7860
7840 REM "I - items IC0
7850 UM$=STP(IC0$(120,4),1),PACK=IC0[14]
7860 EXT_UM$=UM$+"/"+STP(STR(PACK:"###0"),2),EXTUMS$=UM$+"es/"+STR(PACK:"###0"); IF IC0[14]=0 THEN SELLPACK=1 ELSE SELLPACK=IC0[14]
7870 RETURN 
7880 REM "price_in_alt_um
7881 IF EC$[2](322,1)="Y" THEN ENTRY$=ENTRY1$+ENTRY2$; GOTO 7895
7882 IF STOCK$<>"Y" THEN GOTO 7890 ELSE GOTO 7883
7885 ALT_PRICE=IC0[0]; ENTRY$=ENTRY1$+STR(ALT_PRICE:X3$(69,1)+"###,###.00")+ENTRY2$; GOTO 7895; REM "price_in_alt_um, calculated from sell price, sell u/m and alt iss #1 um
7890 IF FM1[25]=0 THEN ALT_PRICE=FM1[3] ELSE IF FM1[3]=0 OR FM1[4]=0 THEN ALT_PRICE=0 ELSE ALT_PRICE=FM1[3]*FM1[25]/FM1[4] END_IF END_IF ; ENTRY$=ENTRY1$+STR(ALT_PRICE:X3$(69,1)+"###,###.00")+ENTRY2$; GOTO 7895; REM "price_in_alt_um, calculated from sell price, sell u/m and alt iss #1 um
7895 RETURN 
7900 REM "URL encode anything
7902 REM "RTEXT passed in   UTEXT returned
7910 UTEXT$=""; IF RTEXT$="" THEN GOTO 7930
7920 FOR JJ=1 TO LEN(RTEXT$); UTEXT$=UTEXT$+"%"+HTA(RTEXT$(JJ,1)); NEXT JJ
7930 RETURN 
7950 REM "break variables
7960 CALL "EC3QB1",X3$,X4$,EC_PARM$,EC${ALL},STOCK$,FLAGGED_STOCK$,Z(14),ECR$,IC0$,IC0{ALL},AR1$,Q{ALL},P{ALL},BREAKQTY${ALL},BREAKPRICE${ALL},BREAKALL${ALL},BREAKRANGE${ALL},BREAKRANGEALL${ALL},QTYBREAKS_INEFFECT$,OPTIONS$
7995 RETURN 
8000 REM "format zip code
8020 CALL "ZZDISP","A",ZIPIN$,"ZIP",X3$,ZIPOUT$,"",0,0,X4$
8030 REM "format phone
8032 CALL "ZZDISP","P",PIN$,"",X3$,POUT$,"",0,0,X4$
8034 RETURN 
8035 REM " Return  a list of categories to search if CATALOG$ = "**********"
8036 CATALOG_LIST$="",TEMP_PUBLISHED$=EC$[1](565,180),PUBLISHED$=""; TEMP_CATALOG$=CATALOG$; ALL_PUBLISHED$=""
8037 FOR PP=0 TO 17
8038 IF TEMP_PUBLISHED$(PP*10+1,10)<>DIM(10) THEN PUBLISHED$=PUBLISHED$+TEMP_PUBLISHED$(PP*10+1,10); CATALOG$=TEMP_PUBLISHED$(PP*10+1,10); GOSUB 8050; GOSUB 8043 END_IF 
8039 NEXT PP
8040 CATALOG$=TEMP_CATALOG$; ALL_PUBLISHED$=PUBLISHED$
8041 IF LEN(STP(PUBLISHED$,2))=0 THEN GOTO 8049
8042 RETURN 
8043 REM "process the list, eliminate duplicates"
8044 FOR INT_EDL=0 TO (LEN(EDI_CATEGORY_LIST$)/10-1)
8045 IF POS(EDI_CATEGORY_LIST$(INT_EDL*10+1,10)=CATALOG_LIST$,10)=0 THEN CATALOG_LIST$=CATALOG_LIST$+EDI_CATEGORY_LIST$(INT_EDL*10+1,10)
8046 NEXT INT_EDL
8048 RETURN 
8050 REM "return list of categories based on EDI
8051 IF EC$[2](325,10)=CATALOG$ THEN EDI_CATEGORY_LIST$=EC$[6]; GOTO 8061
8052 EDI_CATEGORY_LIST$=""
8053 READ (Z[15],KEY=CATALOG$,DOM=8054)
8060 EDIKEY$=KEY(Z[15],END=8061); IF EDIKEY$(1,10)=CATALOG$ THEN EDI_CATEGORY_LIST$=EDI_CATEGORY_LIST$+EDIKEY$(11,10); READ (Z[15]); GOTO 8060
8070 IF LEN(EDI_CATEGORY_LIST$)=0 THEN DIM EDI_CATEGORY_LIST$(10)
8090 RETURN 
8100 REM "ck item secure codes against buyer record
8101 IF EC$[2](86,1)="Y" THEN GOTO 8130; REM "bypass if secure code super user
8102 ITEM_OK$="Y"
8104 IF ECR$(233,10)=DIM(10) THEN GOTO 8119
8105 ITEM_OK$="N"
8110 FOR ITEM_OK=0 TO 4
8112 TEMP$=ECR$(ITEM_OK*2+233,2); IF TEMP$=DIM(2) THEN GOTO 8118
8114 IF POS(TEMP$=EC$[2](233,20)+EC$[2](898,40),2)<>0 THEN EXITTO 8130 ! Was 8130, changed SSP170525.  CHANGED BACK TO 8130 BY DMM ON SSP170658
8118 NEXT ITEM_OK
8119 IF EC_PARM$(554,1)<>"Y" THEN GOTO 8140 ! Was 8130, changed SSP165654
8120 REM "ck for unlimited secure codes 153058
8121 DIM EDQ$(1000); EDQ$(1,20)=ECR$(1,20),EDQ$(21,2)="01"; READ (Z(18),KEY=EDQ$(1,22),DOM=8140)EDQ$
8122 CODES$=STP(EDQ$(23,978),3," "); IF CODES$="" THEN GOTO 8140 ! SSP173398, was GOTO 8130
8123 ITEM_OK$="N" ! SSP173398
8124 FOR ITEM_OK=0 TO LEN(CODES$)/2-1; CURRCODE$=CODES$(ITEM_OK*2+1,2)
8125 IF POS(CURRCODE$=EC$[2](233,20)+EC$[2](898,40),2)<>0 THEN EXITTO 8130
8126 NEXT ITEM_OK
8127 GOTO 8140
8130 ITEM_OK$="Y"
8140 RETURN 
8200 ! Return QB_LIST$ as HTML for drop down list, for qty_breaks_ddl tag
8205 QB_LIST$=""
8210 ! IF POS("<!"=ENTRY1$,-1)>1 THEN ENTRY1$=ENTRY1$(1,POS("<!"=ENTRY1$)-1); REM "Remove start of comment if there; 237269-Ignore comments
8215 QB_UM$=IC0$(120,4),QB_PACK=IC0[14]; IF STP(FM1$(238,4),1)>"" AND FM1[25]<>0 THEN QB_UM$=FM1$(238,4),QB_PACK=FM1[25]
8220 DIM P$(21),P[1]; READ (Z[13],KEY="U/M"+QB_UM$,DOM=*NEXT)IOL=0420
8225 IF P$(20,1)="Y" THEN QB_PACK=P[1]
8226 THOUSANDS$="M   "; IF STP(EC_PARM$(1089,4),3)>"" THEN THOUSANDS$=EC_PARM$(1089,4)
8227 IF QB_UM$=THOUSANDS$ AND EC_PARM$(948,1)<>"Y" THEN QB_PACK=1000
8230 IF QB_PACK=0 THEN QB_PACK=1
8235 QB_LIST$="<option selected value="+QUO+DIM(20)+QUO+">          </option>"
8240 FOR X=1 TO 11 STEP 2
8245 IF IC0[X]=0 THEN EXITTO 8270 ELSE QB_LIST$+="<option value="+QUO+STR(INT(IC0[X]/QB_PACK+.99))+QUO+">"+STR(INT(IC0[X]/QB_PACK+.99))+"</option>"
8250 NEXT X
8255 FOR X=21 TO 31 STEP 2
8260 IF IC0[X]=0 THEN EXITTO 8270 ELSE QB_LIST$+="<option value="+QUO+STR(INT(IC0[X]/QB_PACK+.99))+QUO+">"+STR(INT(IC0[X]/QB_PACK+.99))+"</option>"
8265 NEXT X
8270 STMP=POS("</select>"=ENTRY1$,-1); IF STMP<>0 THEN QB_LIST$=QB_LIST$+"</select>"; IF STMP=1 THEN ENTRY1$="" ELSE ENTRY1$=ENTRY1$(1,STMP-1)
8275 ! IF ENTRY2$>"" THEN IF ENTRY2$(1,1)=">" THEN ENTRY2$=ENTRY2$(2); REM "if token was part of a comment, then remove the end of the comment. 237269-Ignore comments
8290 RETURN 
8295 ! 
8300 REM "Retreive 1 or more values in VALUE$ place in VAL$[] and set VAL_COUNT-Values seperated by ', 's (that is comma + blank), current max of 200 values, 132667
8301 REM "We will add all values blank or not
8305 DIM VAL$[2000]; VAL_COUNT=0
8310 IF VAL_COUNT=2000 THEN GOTO 8340 ELSE VP=POS(", "=VALUE$); IF VP=0 THEN GOTO 8335
8315 VAL_COUNT=VAL_COUNT+1; IF VP=1 THEN VAL$[VAL_COUNT]="",VALUE$=VALUE$(3); GOTO 8310 ELSE VAL$[VAL_COUNT]=VALUE$(1,VP-1); IF VP=LEN(VALUE$) THEN VALUE$=""; GOTO 8340 ELSE VALUE$=VALUE$(VP+2); GOTO 8310
8335 REM "finish up last one
8337 VAL_COUNT=VAL_COUNT+1; VAL$[VAL_COUNT]=VALUE$
8340 REM "IF VAL_COUNT>HIGHEST_VAL_COUNT THEN FOR TMP_INDEX=HIGHEST_VAL_COUNT+1 TO VAL_COUNT; ECE_IN_DATA$[TMP_INDEX]=DIM(LEN(ECE_IN$)); NEXT TMP_INDEX; HIGHEST_VAL_COUNT=VAL_COUNT; REM "If new higher val count value then initialize corresponding strings in ECE_IN_DATA$[]
8345 RETURN 
8400 ! SSP173335, get category_desc
8410 IF CATEGORY$="**********" THEN CATEGORY_DESC$="ALL Categories"; GOTO *RETURN
8415 CATEGORY_DESC$=""
8420 READ (Z[4],KEY=CATEGORY$,DOM=*NEXT)CATEGORY_DESC$; CATEGORY_DESC$=STP(CATEGORY_DESC$(11,30),2)
8440 RETURN 
8445 ! 
8450 ! SSP173447, check the category for this item, if set to restricted then don't show it
8460 CAT_OK$="N"; DIM ECG_REC$(120); READ (Z[4],KEY=ECH$(11,10),DOM=8490)ECG_REC$
8465 IF ECG_REC$(107,1)="Y" THEN GOTO *RETURN
8470 CAT_OK$="Y"
8490 RETURN 
8495 ! 
8700 GET_INCLUDE_FILE:! found include tag now get name from brackets, find file, and set INCLUDE_DATA$ to it's contents
8705 INCLUDE_DATA$=""
8710 IF MSK(INCENTRY2$,"\[[^\]]*\]")=1 THEN {
8715 INCLUDE_FILE$=INCENTRY2$(2,MSL-2),INCENTRY2$=MID(INCENTRY2$,MSL+1)
8720 ! If we see a tag in the include file name, then call EC3BYB to add info
8725 P=POS("?tf?qty_breaks_only?"=INCLUDE_FILE$); IF P>0 THEN GOSUB SET_QTY_BREAKS_ONLY; IF P=1 THEN INCLUDE_FILE$=QTY_BREAKS_ONLY$+INCLUDE_FILE$(P+20) ELSE INCLUDE_FILE$=INCLUDE_FILE$(1,P-1)+QTY_BREAKS_ONLY$+INCLUDE_FILE$(P+20)
8726 P=POS("?tf?item_key?"=INCLUDE_FILE$); IF P>0 THEN GOSUB SET_ITEM_KEY; IF P=1 THEN INCLUDE_FILE$=ITEM_KEY_INCL$+INCLUDE_FILE$(P+13) ELSE INCLUDE_FILE$=INCLUDE_FILE$(1,P-1)+ITEM_KEY_INCL$+INCLUDE_FILE$(P+13) ! WO 240669
8727 P=POS("?tf?show_pdf_link?"=INCLUDE_FILE$); IF P>0 THEN GOSUB SET_SHOW_PDF_LINK; IF P=1 THEN INCLUDE_FILE$=SHOW_PDF_LINK$+INCLUDE_FILE$(P+18) ELSE INCLUDE_FILE$=INCLUDE_FILE$(1,P-1)+SHOW_PDF_LINK$+INCLUDE_FILE$(P+18)
8730 ! If webcode then try with webcode first
8735 IF NOT(NUL(EC$[2](276,15))) THEN IF_CHAN=HFN; OPEN (IF_CHAN,ERR=*NEXT)STP(EC$[14](56,60),1)+DLM+STP(EC$[2](276,15),1)+INCLUDE_FILE$; GOTO GET_INCLUDE_DATA
8740 IF_CHAN=HFN; OPEN (IF_CHAN,ERR=*RETURN)STP(EC$[14](56,60),1)+DLM+INCLUDE_FILE$
8745 GET_INCLUDE_DATA:READ (IF_CHAN,ERR=*NEXT,END=*NEXT)IF_IN$; INCLUDE_DATA$+=IF_IN$+EOL$; GOTO *SAME
8750 ! Remove the last EOL$ so we don't introduce an extra line feed
8754 CLOSE (IF_CHAN,ERR=*NEXT) ! SSP186570, 263917
8755 INCLUDE_DATA$=MID(INCLUDE_DATA$,1,LEN(INCLUDE_DATA$)-(LEN(EOL$)))
8759 CALL "EC3BYB",ERR=*NEXT,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,INCLUDE_DATA$,BYBINFO${ALL},BYBOPTIONS$,IF_CHAN ! 227154
8760  }
8765 RETURN 
8770 ! 
8775 SET_QTY_BREAKS_ONLY:
8780 QTY_BREAKS_ONLY$="N"
8785 IF ECR$(572,1)="Y" AND IC0[1]>0 THEN QTY_BREAKS_ONLY$="Y"
8795 RETURN 
8799 ! 
8800 CHECK_FOR_INCLUDE:
8810 TXTINDEX=POS("?tf?3p_text?"=ENTRY$); IF TXTINDEX=0 THEN GOTO 8830
8815 TXTENDINDEX=POS("?"=ENTRY$(TXTINDEX+4)),TXTTAG$=ENTRY$(TXTINDEX+4,TXTENDINDEX-1),TXTENTRY1$=ENTRY$(1,TXTINDEX-1),TXTENTRY2$=ENTRY$(TXTINDEX+TXTENDINDEX+4)
8820 GOSUB GET_3PTEXT_FILE
8825 ENTRY$=TXTENTRY1$+TXT_VAR_TEXT$+TXTENTRY2$
8830 INCINDEX=POS("?tf?EC3PC0_include?"=ENTRY$); IF INCINDEX=0 THEN GOTO *RETURN
8835 INCENDINDEX=POS("?"=ENTRY$(INCINDEX+4)),INCTAG$=ENTRY$(INCINDEX+4,INCENDINDEX-1),INCENTRY1$=ENTRY$(1,INCINDEX-1),INCENTRY2$=ENTRY$(INCINDEX+INCENDINDEX+4)
8840 GOSUB GET_INCLUDE_FILE
8845 ENTRY$=INCENTRY1$+INCLUDE_DATA$+INCENTRY2$; GOTO 8830 ! ssp 195434 - check for more than one include file
8848 RETURN 
8849 ! 
8850 GET_3PTEXT_FILE:! special one for use with new EC3PC0_include, copied from 7600's
8855 ! Extract [x] part from txtentry2, if not found then ignore
8860 TXT_VAR_TEXT$=""
8865 IF LEN(TXTENTRY2$)<3 THEN GOTO 8870 ELSE BRACKET_POS=POS("]"=TXTENTRY2$); IF TXTENTRY2$(1,1)<>"[" OR BRACKET_POS=0 THEN GOTO 8870 ELSE TXT_VAR_CODE$=TXTENTRY2$(1,BRACKET_POS),TXTENTRY2$=TXTENTRY2$(BRACKET_POS+1); GOTO 8875
8870 TXT_VAR_TEXT$=""; GOTO *RETURN; REM "did not find var code part, so leave
8875 TXT_VAR_CODE$=TXT_VAR_CODE$(2,LEN(TXT_VAR_CODE$)-2); TXT_VAR_CODE$=STR(NUM(TXT_VAR_CODE$,ERR=8870):"00000")
8885 TXT_VAR_CODE_KEY$=ECR$(243,10)+TXT_VAR_CODE$; CALL "EC3BYC",X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,TXT_VAR_CODE_KEY$,TXT_VAR_TEXT${ALL}
8890 TXT_VAR_TEXT$=TXT_VAR_TEXT$[1]
8895 RETURN 
8899 ! 
8910 DEF FND$(Z9$)=Z9$(1*2+1,2)+"/"+Z9$(7-1*2,2)+"/"+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
8915 DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
8950 SET_ITEM_KEY:! WO 240669
8955 IF STOCK$="Y" OR FLAGGED_STOCK$="Y" THEN ITEM_KEY_INCL$=IC0$(1,20) ELSE ITEM_KEY_INCL$=FM1$(1,20) END_IF ; ITEM_KEY_INCL$=STP(ITEM_KEY_INCL$,3,*EC_PARM$(687,19)+" ",ERR=*PROCEED) ! Strip invalid chars from Item key
8970 RETURN 
8974 ! 
8975 SET_SHOW_PDF_LINK:
8980 SHOW_PDF_LINK$="N"
8985 IF ECR$(576,1)="Y" THEN SHOW_PDF_LINK$="Y"
8990 RETURN 
8995 ! 
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$); REM "131928
9090 GOTO 9900
9900 REM "End
9905 REM FOR I=1 TO 20; IF Z[I]<>0 THEN CLOSE (Z[I]) FI; NEXT I
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9950 EXIT 
9999 END 
56010 REM "195434-Need documentation for linking to PDF instead of            
56015 REM "192407-Buyer needs 20 additional secure codes.                     
56017 REM "205460-Oracle - FIN(CHANNEL,"NUMREC") changed to use FN%FIN$()     
56019 REM "204974-Enhance Web.ec Item Search functionality
56021 REM "213479-Tag for the ext_ref field of the ECR file
56022 REM "227154-Modify EC3BYB to support a condition tag : ?tf?if?[expr]    
56024 ! 227617-error 0 at line 5107
56025 REM "237269-Issue with qty breaks dropdown display
56026 REM "240669-EC tag item_key support for ec3pc0_include tag
56028 REM "263620-IMS price doesn't show, product catalog, customer 80-09227, 
56029 REM "263917-Channels not being closed - EC3PC0_include tag
56030 REM "278795-WIP554 and WIP2554 restarts, last request to EC3PC3 Item    
56032 REM "280572-Using rev_date tag on prod cat page for search results but  
56033 REM "293536-We made updates to vp and CRG & DMM for pending flowpoint   
