0010 REM "EC Locations <EC3FM0>"
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 08/11/22 - 17.395231 - crg - SSP# 307415
0037 REM "307415-DBD-280; EC3FM0 copy feature, keep multiple custs in sync   
0040 REM "Copyright 2022 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0100 SETERR 9000
0110 X0$="EC3FM0",X1$="EC Locations"
0120 EOL$=$0D0A$; EOL$=ATH(STP(EC_PARM$(57,8),1))
0127 HTML_TEXT$="Content-type: text/html"
0140 DIM MESS_INFO$[20]
0150 REM "EC$[1]=ESB session record, EC$[2]=client number        , ec$[3]=message from server to called program, EC$[4]=formatted date, EC$[5]=formatted time EC$[6]=ECA2$ available web catalogs (concatonated string) EC$[7]=customer webec parms (ECS)  EC$[8]=image path (customer if set otherwise from ec_parm) EC$[9]=ST_LIST sort code record EC$[10]=reporting whse list EC$[11]=(1,4)warehouse code to use for o/e FM2RT0  (5,4)=would contain the 'other'warehouse for availability checking o/e messaging <not passed to FM2RT0, EC$[12]=email params,see 8000s [13] UNUSED ,[14]=ECY$, [15]=inventory system parameters [16]=Credict Card code/desc list [17]=active webcode [18-20] unused
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01OSFM0...  02O AR1...  03O AR5...  04O FMP...  05O FMM...  06O ASR...  07O ASH...  08O FTD...  13O ZZPARM  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0565 FIND (Z[13],KEY=X3$(9,3)+"A/R")ARPARM$
0570 FIND (Z[13],KEY=X3$(9,3)+"F/M")FMPARM$
0575 DIM AR1$(599); FIND (Z[2],KEY=EC$[2](51,10),DOM=*NEXT)AR1$(1)
0580 DIM CUST_DFLT$(244); FIND (Z[4],KEY="D"+EC$[2](51,10),DOM=*NEXT)CUST_DFLT$(1)
0600 ! Set Masks
0610 COUNT_MASK$="###"
0620 DIM NEW_FM0$(618),CUR_FM0$(618); UPDATE_MODE=0,CREATE_MODE=0,COPY_MODE$="N",WRITE_FM0_OK=1,NEW_STAX_CODE_OK$=DIM(10) ! 307415
0630 DIM COPY_IN$(30),COPY_IN_DATA$[100] ! 307415 - Copy locations to multiple customers
1000 REM "Process DATA array
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1025 SWITCH TAG$ ! 1385 end switch
1030 CASE "template"; TEMPLATE$=VALUE$; BREAK
1035 CASE "loc_code"; LOC_CODE$=PAD(UCS(VALUE$),4),NEW_LOC_CODE$=LOC_CODE$; BREAK
1040 CASE "cust_loc_code"; CUST_LOC_CODE$=PAD(UCS(VALUE$),9),NEW_CUST_LOC_CODE$=CUST_LOC_CODE$; BREAK
1045 CASE "recvg_dept"; RECVG_DEPT$=PAD(UCS(VALUE$),20),NEW_RECVG_DEPT$=RECVG_DEPT$; BREAK
1050 CASE "action"; ACTION$=PAD(UCS(VALUE$),1); BREAK ! U=update existing record if found else return error message, C=update existing record or if not found then create new one
1052 CASE "copy_mode"; IF UCS(MID(VALUE$,1,1))="Y" THEN COPY_MODE$="Y" END_IF ; BREAK ! 307415
1055 CASE "template_loc_code"; TEMPLATE_LOC_CODE$=PAD(UCS(VALUE$),4); DIM TEMPLATE_FM0$(618); FIND (Z[1],KEY="C"+EC$[2](51,10)+TEMPLATE_LOC_CODE$,KNO=0,DOM=*PROCEED)TEMPLATE_FM0$(1); BREAK ! location code to use as template and starting number if creating new
1060 CASE "smart_addr_n"; IF UCS(MID(VALUE$,1,1))="Y" THEN SMART_ADDR_N$="Y" END_IF ; BREAK
1075 CASE "loc_desc"; NEW_LOC_DESC$=VALUE$; BREAK
1080 CASE "loc_addr_1"; NEW_LOC_ADDR_1$=VALUE$,SMART_NEW_LOC_ADDR_1$=VALUE$; BREAK
1085 CASE "loc_addr_2"; NEW_LOC_ADDR_2$=VALUE$,SMART_NEW_LOC_ADDR_2$=VALUE$; BREAK
1090 CASE "loc_city"; NEW_LOC_CITY$=VALUE$; BREAK
1095 CASE "loc_st"; NEW_LOC_ST$=PAD(UCS(VALUE$),2); BREAK
1100 CASE "loc_zip_code"; NEW_LOC_ZIP_CODE$=PAD(STP(VALUE$,3,"-"),9); BREAK
1105 CASE "loc_fax"; PTMP$=VALUE$; GOSUB PHONE_NUM; NEW_LOC_FAX$=PTMP$; BREAK
1110 CASE "loc_lookup"; NEW_LOC_LOOKUP$=PAD(UCS(VALUE$),10); BREAK
1115 CASE "loc_agent"; NEW_LOC_AGENT$=VALUE$; BREAK
1120 CASE "loc_greeting"; NEW_LOC_GREETING$=VALUE$; BREAK
1125 CASE "loc_phone"; PTMP$=VALUE$; GOSUB PHONE_NUM; NEW_LOC_PHONE$=PTMP$; BREAK
1130 CASE "fms_method"; NEW_FMS_METHOD$=PAD(UCS(VALUE$),1); BREAK
1135 CASE "stax_code"; NEW_STAX_CODE$=PAD(UCS(STP(VALUE$,3,"-")),10); BREAK
1140 ! CASE "exc_from_fms_onhand"; NEW_EXC_FROM_FMS_ONHAND$=PAD(UCS(VALUE$),1); BREAK
1145 CASE "no_show_ec"; NEW_NO_SHOW_EC$=PAD(UCS(VALUE$),1); BREAK
1150 CASE "cost_center_code"; NEW_COST_CENTER_CODE$=PAD(UCS(STP(VALUE$,3,"-")),9); BREAK
1155 CASE "multi_cnt_stops"; NEW_MULTI_CNT_STOPS$=PAD(UCS(VALUE$),1); BREAK
1160 CASE "loc_name"; NEW_LOC_NAME$=VALUE$; BREAK
1165 CASE "loc_tax_exempt"; NEW_LOC_TAX_EXEMPT$=PAD(UCS(VALUE$),1); BREAK
1170 CASE "dflt_supply_whse"; NEW_DFLT_SUPPLY_WHSE$=PAD(UCS(VALUE$),4); BREAK
1175 CASE "dflt_fob_code"; NEW_DFLT_FOB_CODE$=PAD(UCS(VALUE$),1); BREAK
1180 CASE "dflt_how_to_ship"; NEW_DFLT_HOW_TO_SHIP$=PAD(UCS(VALUE$),1); BREAK
1185 CASE "dflt_inside_dlvry"; NEW_DFLT_INSIDE_DLVRY$=VALUE$; BREAK
1190 CASE "dflt_ship_via_code"; NEW_DFLT_SHIP_VIA_CODE$=PAD(VALUE$,1); BREAK
1195 CASE "dflt_ship_via_text"; NEW_DFLT_SHIP_VIA_TEXT$=VALUE$; BREAK
1200 CASE "secure_items_here"; NEW_SECURE_ITEMS_HERE$=PAD(UCS(VALUE$),20); BREAK
1205 CASE "loc_opts"; NEW_LOC_OPTS$=PAD(UCS(VALUE$),8); BREAK
1210 CASE "cnt_entry_id"; NEW_CNT_ENTRY_ID$=PAD(UCS(VALUE$),1); BREAK
1215 CASE "ship_type"; NEW_SHIP_TYPE$=PAD(UCS(VALUE$),1); BREAK
1220 CASE "will_call"; NEW_WILL_CALL$=PAD(UCS(VALUE$),1); BREAK
1225 CASE "loc_addl_addr_1"; NEW_LOC_ADDL_ADDR_1$=VALUE$; BREAK
1230 CASE "loc_addl_addr_2"; NEW_LOC_ADDL_ADDR_2$=VALUE$; BREAK
1235 CASE "loc_addl_addr_3"; NEW_LOC_ADDL_ADDR_3$=VALUE$; BREAK
1240 CASE "loc_addl_addr_4"; NEW_LOC_ADDL_ADDR_4$=VALUE$; BREAK
1245 CASE "email"; NEW_EMAIL$=VALUE$; BREAK
1250 CASE "united_acct"; NEW_UNITED_ACCT$=PAD(UCS(VALUE$),6); BREAK
1255 CASE "ignore_ec_max"; NEW_IGNORE_EC_MAX$=PAD(UCS(VALUE$),1); BREAK
1256 CASE "copy_customer_list"; GOSUB PARSE_VALUES; IF VAL_COUNT>0 THEN FOR VAL_INDEX=1 TO VAL_COUNT; IF STP(VAL$[VAL_INDEX],3," ")="" THEN NEXT VAL_INDEX ELSE COPY_IN_DATA$[VAL_INDEX](1,10)=UCS(VAL$[VAL_INDEX]); NEXT VAL_INDEX END_IF ; BREAK; REM "copy_customer_list
1257 CASE "copy_recvg_dept_list"; GOSUB PARSE_VALUES; IF VAL_COUNT>0 THEN FOR VAL_INDEX=1 TO VAL_COUNT; IF STP(VAL$[VAL_INDEX],3," ")="" THEN NEXT VAL_INDEX ELSE COPY_IN_DATA$[VAL_INDEX](11,20)=UCS(VAL$[VAL_INDEX]); NEXT VAL_INDEX END_IF ; BREAK; REM "copy_recvg_dept_list
1380 ! don't allow any input tags except those above DEFAULT ; VIA TAG$=VALUE$,ERR=*PROCEED; BREAK ! Set to same name variable as TAG$
1385 END SWITCH ! 1050
1390 NEXT I
1395 DIM BYBINFO$[5]; BYBINFO$[1]=PGN,BYBINFO$[2]="283432.20160414",BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1400 ! Get info
1405 GOSUB SET_READONLY
1410 IF NOT(NUL(LOC_CODE$)) THEN REC_KEY$="C"+EC$[2](51,10)+PAD(LOC_CODE$,4),KEY_NUM=0 ELSE IF NOT(NUL(CUST_LOC_CODE$)) THEN REC_KEY$=EC$[2](51,10)+PAD(CUST_LOC_CODE$,9),KEY_NUM=3 ELSE IF NOT(NUL(RECVG_DEPT$)) THEN REC_KEY$=EC$[2](51,10)+PAD(RECVG_DEPT$,20),KEY_NUM=4 ELSE GOTO LOCATION_NOT_FOUND ! Lookup priority loc_code, then cust_loc_code, then recvg_dept
1480 GOSUB GET_LOC_INFO
1485 IF UPDATE_MODE THEN GOSUB FIELDS_UPDATE; GOSUB VALIDATE_FM0; GOSUB WRITE_FM0 ! Existing record, update, validate then write
1495 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3FM0|LOC_CODE|"+EC$[2](51,10)+"|"+LOC_CODE$+"|CUST_LOC_CODE|"+CUST_LOC_CODE$+"|RECVG_DEPT|"+RECVG_DEPT$+"|")
1499 ! 
1500 FILL_OUT_TEMPLATE:! Fill out template
1504 IF NOT(NUL(%BASIC2$)) THEN GOTO 2990 ! Skip outputting template if additional program to be done
1505 CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1510 READ (100,END=*NEXT)TMP_LINE$; LINE$+=FNBYB$(TMP_LINE$)+EOL$; GOTO *SAME
1515 CHKTAG=1
1520 WHILE CHKTAG ! 2800 wend
1522 P1=MSK(LINE$,"\?tf\?[^?]*\?"); IF P1=0 THEN CHKTAG=0; BREAK
1530 TAG$=LINE$(P1,MSL); LINE1$=LINE$(1,P1-1),LINE2$=MID(LINE$,P1+MSL)
1533 T_IN=POS("."=TAG$); IF T_IN THEN TAG_PARM$=MID(TAG$,T_IN+1),TAG$=MID(TAG$,1,T_IN-1) ELSE TAG_PARM$=""
1600 SWITCH TAG$ ! 2790 end switch
1605 CASE "?tf?ec3fm0_status?"; NN=FNN(STP(EC3FM0_STATUS$)); BREAK
2785 DEFAULT ! didn't match existing tags, so discard it, unless it is one of these special situations below
2786 IF POS("?tf?fm0_"=TAG$)=1 THEN GOSUB PROCESS_FM0_TAG; PP=FNP(FN%HTML_ESC$(STP(FM0_TAG_VAL$))); BREAK
2789 LINE$=LINE1$+LINE2$ ! didn't match existing tag, so discard it
2790 END SWITCH ! 1600
2800 WEND ! 1520
2950 DONE_WITH_TEMPLATE:
2953 IF (OUTPUT) THEN PRINT (OUTPUT)LINE$
2955 GOSUB CLEAR_READONLY
2990 GOTO 9900
2999 ! 
6700 PROCESS_FM0_TAG:
6705 TAG$=MID(TAG$,5); TAG$=STP(TAG$,1,"?")
6706 FM0_TAG_VAL$="",FM0_TAG_VAL_SET=0
6710 FM0_TAG_VAL$=EVS(SUB(UCS(TAG$),"FM0_","FM0.")+"$"); IF LEN(FM0_TAG_VAL$)=0 THEN FM0_TAG_VAL$=STR(EVN(SUB(UCS(TAG$),"FM0_","FM0.")))
6745 RETURN 
6749 ! 
7000 GET_LOC_INFO:
7005 IF KEY_NUM=3 THEN GOSUB GET_LOC_FROM_CUST_LOC_CODE; IF NOT(NUL(FOUND_LOC$)) THEN REC_KEY$="C"+EC$[2](51,10)+FOUND_LOC$ ELSE EXITTO LOCATION_NOT_FOUND
7010 IF KEY_NUM=4 THEN GOSUB GET_LOC_FROM_RECVG_DEPT; IF NOT(NUL(FOUND_LOC$)) THEN REC_KEY$="C"+EC$[2](51,10)+FOUND_LOC$ ELSE EXITTO LOCATION_NOT_FOUND
7015 READ (Z[1],KEY=REC_KEY$,KNO=0,REC=FM0$,DOM=*NEXT); DIM CUR_FM0$(618); READ (Z[1],KEY=REC_KEY$,KNO=0,DOM=*NEXT)CUR_FM0$(1); GOTO LOCATION_FOUND
7020 GOTO LOCATION_NOT_FOUND
7025 LOCATION_FOUND:
7030 IF POS(ACTION$="UC")>0 THEN NEW_FM0$=CUR_FM0$,UPDATE_MODE=1 ! if update existing then put current record in new, input data will override
7045 RETURN 
7049 ! 
7050 GET_LOC_FROM_CUST_LOC_CODE:
7052 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3FM0|LOOKUP CUST_LOC_CODE|"+REC_KEY$+"|")
7055 FOUND_LOC$=""
7060 READ (Z[1],KEY=REC_KEY$,KNO=KEY_NUM,DOM=*NEXT)
7070 FM0$=KEY(Z[1],END=*RETURN)
7080 IF MID(FM0$,11,9)=PAD(CUST_LOC_CODE$,9) THEN FOUND_LOC$=MID(FM0$,20,4)
7095 RETURN 
7099 ! 
7100 GET_LOC_FROM_RECVG_DEPT:
7102 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3FM0|LOOKUP RECVG_DEPT|"+REC_KEY$+"|")
7105 FOUND_LOC$=""
7110 READ (Z[1],KEY=REC_KEY$,KNO=KEY_NUM,DOM=*NEXT)
7120 FM0$=KEY(Z[1],END=*RETURN)
7130 IF MID(FM0$,11,20)=PAD(RECVG_DEPT$,20) THEN FOUND_LOC$=MID(FM0$,31,4)
7145 RETURN 
7149 ! 
7150 VALIDATE_STAX_CODE:
7155 NEW_STAX_CODE_OK$=DIM(10)
7160 FIND (Z[3],KEY=NEW_STAX_CODE$,DOM=*NEXT); NEW_STAX_CODE_OK$=NEW_STAX_CODE$
7190 RETURN 
7195 ! 
7200 FIELDS_UPDATE:! FM0 fields update if provided, for new or existing
7210 IF STP(NEW_LOC_DESC$)>"" THEN NEW_FM0$(16,35)=NEW_LOC_DESC$ ELSE IF STP(NEW_FM0$(16,35))="" THEN NEW_FM0$(16,35)=AR1$(11,35)
7215 IF STP(NEW_LOC_ADDR_1$)>"" THEN NEW_FM0$(51,30)=NEW_LOC_ADDR_1$
7220 IF STP(NEW_LOC_ADDR_2$)>"" THEN NEW_FM0$(81,30)=NEW_LOC_ADDR_2$
7221 IF SMART_ADDR_N$="Y" AND LEN(SMART_NEW_LOC_ADDR_1$)>30 THEN GOSUB SMART_NEW_LOC_ADDR ! If trigger tag is Y and saved new loc addr1 is greater than 30
7225 IF STP(NEW_LOC_CITY$)>"" THEN NEW_FM0$(111,16)=NEW_LOC_CITY$
7230 IF STP(NEW_LOC_ST$)>"" THEN NEW_FM0$(127,2)=NEW_LOC_ST$
7235 IF STP(NEW_LOC_ZIP_CODE$)>"" THEN NEW_FM0$(129,9)=NEW_LOC_ZIP_CODE$
7240 IF STP(NEW_LOC_FAX$)>"" THEN NEW_FM0$(138,12)=NEW_LOC_FAX$
7245 IF STP(NEW_LOC_LOOKUP$)>"" THEN NEW_FM0$(150,10)=NEW_LOC_LOOKUP$ ELSE IF STP(NEW_FM0$(150,10))="" THEN NEW_FM0$(150,10)=AR1$(155,10)
7250 IF STP(NEW_LOC_AGENT$)>"" THEN NEW_FM0$(160,20)=NEW_LOC_AGENT$
7255 IF STP(NEW_LOC_GREETING$)>"" THEN NEW_FM0$(180,20)=NEW_LOC_GREETING$ ELSE IF STP(NEW_FM0$(180,20))="" THEN NEW_FM0$(180,20)=AR1$(185,20)
7260 IF STP(NEW_LOC_PHONE$)>"" THEN NEW_FM0$(200,14)=NEW_LOC_PHONE$
7265 IF POS(MID(NEW_FMS_METHOD$,1,1)="CI",1) THEN NEW_FM0$(223,1)=NEW_FMS_METHOD$ ELSE IF NEW_FM0$(223,1)=DIM(1) AND CUST_DFLT$(24,1)="Y" THEN NEW_FM0$(223,1)="I"
7270 IF STP(NEW_STAX_CODE$)>"" THEN GOSUB VALIDATE_STAX_CODE; NEW_FM0$(224,10)=NEW_STAX_CODE_OK$ END_IF ; GOSUB SET_SALES_TAX_CODE
7275 IF POS(MID(NEW_NO_SHOW_EC$,1,1)="YN",1) THEN NEW_FM0$(235,1)=NEW_NO_SHOW_EC$ ELSE IF STP(NEW_FM0$(235,1))="" THEN NEW_FM0$(235,1)="N"
7280 IF STP(NEW_COST_CENTER_CODE$)>"" THEN GOSUB VALIDATE_COST_CENTER_CODE; NEW_FM0$(236,9)=NEW_COST_CENTER_CODE_OK$
7285 IF POS(MID(NEW_MULTI_CNT_STOPS$,1,1)="YN",1) THEN NEW_FM0$(245,1)=NEW_MULTI_CNT_STOPS$
7290 IF STP(NEW_LOC_NAME$)>"" THEN NEW_FM0$(248,35)=NEW_LOC_NAME$
7295 IF POS(MID(NEW_LOC_TAX_EXEMPT$,1,1)="YN",1) THEN NEW_FM0$(283,1)=NEW_LOC_TAX_EXEMPT$ ELSE IF STP(NEW_FM0$(283,1))="" THEN NEW_FM0$(283,1)=AR1$(245,1)
7300 IF STP(NEW_DFLT_SUPPLY_WHSE$)>"" THEN GOSUB VALIDATE_DFLT_SUPPLY_WHSE; NEW_FM0$(284,4)=NEW_DFLT_SUPPLY_WHSE_OK$
7305 IF STP(NEW_DFLT_FOB_CODE$)>"" THEN GOSUB VALIDATE_DFLT_FOB_CODE; NEW_FM0$(288,1)=NEW_DFLT_FOB_CODE_OK$ END_IF ; IF STP(NEW_FM0$(288,1))="" THEN NEW_FM0$(288,1)=CUST_DFLT$(28,1)
7310 IF STP(NEW_DFLT_HOW_TO_SHIP$)>"" THEN GOSUB VALIDATE_DFLT_HOW_TO_SHIP; NEW_FM0$(289,1)=NEW_DFLT_HOW_TO_SHIP_OK$ END_IF ; IF STP(NEW_FM0$(289,1))="" THEN NEW_FM0$(289,1)=CUST_DFLT$(29,1)
7315 IF STP(NEW_DFLT_INSIDE_DLVRY$)>"" THEN NEW_FM0$(290,15)=NEW_DFLT_INSIDE_DLVRY$ ELSE IF STP(NEW_FM0$(290,15))="" THEN NEW_FM0$(290,15)=CUST_DFLT$(30,15)
7320 IF STP(NEW_DFLT_SHIP_VIA_CODE$)>"" THEN GOSUB VALIDATE_DFLT_SHIP_VIA_CODE; NEW_FM0$(305,1)=NEW_DFLT_SHIP_VIA_CODE_OK$ END_IF ; IF STP(NEW_FM0$(305,1))="" THEN NEW_FM0$(305,1)=CUST_DFLT$(45,1)
7325 IF STP(NEW_DFLT_SHIP_VIA_TEXT$)>"" THEN NEW_FM0$(306,15)=NEW_DFLT_SHIP_VIA_TEXT$
7330 IF STP(NEW_SECURE_ITEMS_HERE$)>"" THEN NEW_FM0$(347,20)=NEW_SECURE_ITEMS_HERE$
7335 IF STP(NEW_LOC_OPTS$)>"" THEN NEW_FM0$(367,8)=NEW_LOC_OPTS$
7340 IF STP(NEW_CNT_ENTRY_ID$)>"" THEN NEW_FM0$(375,1)=NEW_CNT_ENTRY_ID$
7345 IF POS(MID(NEW_SHIP_TYPE$,1,1)="DWMFS",1) THEN NEW_FM0$(376,1)=NEW_SHIP_TYPE$
7350 IF POS(MID(NEW_WILL_CALL$,1,1)=" SW",1) THEN NEW_FM0$(377,1)=NEW_WILL_CALL$
7355 IF STP(NEW_LOC_ADDL_ADDR_1$)>"" THEN NEW_FM0$(402,30)=NEW_LOC_ADDL_ADDR_1$
7360 IF STP(NEW_LOC_ADDL_ADDR_2$)>"" THEN NEW_FM0$(432,30)=NEW_LOC_ADDL_ADDR_2$
7365 IF STP(NEW_LOC_ADDL_ADDR_3$)>"" THEN NEW_FM0$(462,30)=NEW_LOC_ADDL_ADDR_3$
7370 IF STP(NEW_LOC_ADDL_ADDR_4$)>"" THEN NEW_FM0$(492,30)=NEW_LOC_ADDL_ADDR_4$
7375 IF STP(NEW_EMAIL$)>"" THEN NEW_FM0$(522,40)=NEW_EMAIL$
7380 IF STP(NEW_UNITED_ACCT$)>"" THEN NEW_UNITED_ACCT$=STR(NUM(NEW_UNITED_ACCT$,ERR=*PROCEED):"000000"); NEW_FM0$(562,6)=NEW_UNITED_ACCT$
7385 IF POS(MID(NEW_IGNORE_EC_MAX$,1,1)=" YN",1) THEN NEW_FM0$(601,1)=NEW_IGNORE_EC_MAX$
7400 IF STP(NEW_CUST_LOC_CODE$)>"" THEN NEW_FM0$(214,9)=NEW_CUST_LOC_CODE$ ELSE IF NEW_FM0$(214,9)=DIM(9) THEN NEW_FM0$(214,9)=NEW_FM0$(12,4)
7405 IF STP(NEW_RECVG_DEPT$)>"" THEN NEW_FM0$(382,20)=NEW_RECVG_DEPT$
7590 RETURN 
7595 ! 
7600 SET_READONLY:
7610 SET_PARAM 'XI'
7620 SET_READONLY_END:RETURN 
7630 CLEAR_READONLY:
7640 SET_PARAM -'XI'
7645 CLEAR_READONLY_END:RETURN 
7649 ! 
7700 PHONE_NUM:REM "Given PTMP$, remove all but numbers
7705 PTMP$=STP(PTMP$,2); IF PTMP$="" THEN GOTO 7745 ELSE MY_TMP$=PTMP$,LEN_MY_TMP=LEN(MY_TMP$),PTMP$=""
7710 FOR MY_INDEX=1 TO LEN_MY_TMP; IF POS(MY_TMP$(MY_INDEX,1)="0123456789")<>0 THEN PTMP$=PTMP$+MY_TMP$(MY_INDEX,1) END_IF ; NEXT MY_INDEX
7745 PHONE_NUM_END:RETURN 
7749 ! 
7750 VALIDATE_COST_CENTER_CODE:
7755 NEW_COST_CENTER_CODE_OK$=DIM(9)
7760 FIND (Z[4],KEY="c"+EC$[2](51,10)+NEW_COST_CENTER_CODE$,DOM=*NEXT); NEW_COST_CENTER_CODE_OK$=NEW_COST_CENTER_CODE$
7790 RETURN 
7795 ! 
7800 VALIDATE_DFLT_SUPPLY_WHSE:
7805 NEW_DFLT_SUPPLY_WHSE_OK$=DIM(4)
7810 FIND (Z[1],KEY="D"+DIM(10)+NEW_DFLT_SUPPLY_WHSE$,KNO=0,DOM=*NEXT); NEW_DFLT_SUPPLY_WHSE_OK$=NEW_DFLT_SUPPLY_WHSE$
7840 RETURN 
7845 ! 
7850 VALIDATE_DFLT_FOB_CODE:
7855 NEW_DFLT_FOB_CODE_OK$=DIM(1)
7860 FIND (Z[4],KEY="F"+NEW_DFLT_FOB_CODE$,DOM=*NEXT); NEW_DFLT_FOB_CODE_OK$=NEW_DFLT_FOB_CODE$
7890 RETURN 
7895 ! 
7900 VALIDATE_DFLT_HOW_TO_SHIP:
7905 NEW_DFLT_HOW_TO_SHIP_OK$=DIM(1)
7910 FIND (Z[4],KEY="H"+NEW_DFLT_HOW_TO_SHIP$,DOM=*NEXT); NEW_DFLT_HOW_TO_SHIP_OK$=NEW_DFLT_HOW_TO_SHIP$
7940 RETURN 
7945 ! 
7950 VALIDATE_DFLT_SHIP_VIA_CODE:
7955 NEW_DFLT_SHIP_VIA_CODE_OK$=DIM(1)
7960 DIM SVC$(280); FIND (Z[4],KEY="S"+NEW_DFLT_SHIP_VIA_CODE$,DOM=*NEXT)SVC$(1); NEW_DFLT_SHIP_VIA_CODE_OK$=NEW_DFLT_SHIP_VIA_CODE$
7990 RETURN 
7995 ! 
8000 LOCATION_NOT_FOUND:! 1410 and 7000's read for existing record, not found. Check based on action, act accordingly. If no action, then throw error.
8010 IF ACTION$="C" THEN IF STP(TEMPLATE_FM0$)>"" THEN CREATE_MODE=1,NEW_FM0$=TEMPLATE_FM0$; GOSUB CREATE_NEW_LOC_CODE; GOSUB FIELDS_UPDATE; GOSUB VALIDATE_FM0; GOSUB WRITE_FM0; GOTO FILL_OUT_TEMPLATE ELSE IF STP(NEW_LOC_CODE$)>"" THEN CREATE_MODE=1,NEW_FM0$(12,4)=NEW_LOC_CODE$; GOSUB FIELDS_UPDATE; GOSUB VALIDATE_FM0; GOSUB WRITE_FM0; GOTO FILL_OUT_TEMPLATE
8035 INVALID: MX=FN%_LOG_MESSAGE("EXCP","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3FM0|LOC NOT FOUND|LOC_CODE|"+EC$[2](51,10)+"|"+LOC_CODE$+"|CUST_LOC_CODE|"+CUST_LOC_CODE$+"|RECVG_DEPT|"+RECVG_DEPT$); PRINT (OUTPUT)"Invalid"; GOTO 9900
8049 ! 
8050 WRITE_FM0:! write new or updated FM0
8055 IF NOT(WRITE_FM0_OK) THEN MSG$="UNABLE TO WRITE FM0 RECORD"; GOSUB LOG_ERR_MESSAGE; PRINT (OUTPUT)MSG$; EXITTO 9900
8060 MODE$=""; IF CREATE_MODE THEN MODE$="CREATE" ELSE IF UPDATE_MODE THEN MODE$="UPDATE"
8062 IF POS(FMPARM$(279,1)="YF")<>0 AND NEW_FM0$(382,20)=DIM(20) THEN NEW_FM0$(382,20)=NEW_FM0$(12,4)
8064 GOSUB CLEAR_READONLY
8065 WRITE (Z[1],KEY=NEW_FM0$(1,15))NEW_FM0$; EC3FM0_STATUS$="WRITE SUCCESSFUL FOR "+MODE$
8070 IF UPDATE_MODE THEN GOSUB REMOVE_SORT_RECORDS
8075 GOSUB WRITE_SORT_RECORDS
8080 GOSUB SET_READONLY
8085 READ (Z[1],KEY=NEW_FM0$(1,15),KNO=0,REC=FM0$) ! get record into FM0. variables for template filling
8090 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3FM0|WRITE|MODE|"+MODE$+"|CUST|"+EC$[2](51,10)+"|LOC_CODE|"+NEW_FM0$(12,4)+"|CUST_LOC_CODE|"+NEW_FM0$(214,9)+"|RECVG_DEPT|"+NEW_FM0$(382,20)+"|")
8092 IF COPY_MODE$="Y" THEN GOSUB COPY_LOCATIONS ! 307415
8095 RETURN 
8099 ! 
8100 REMOVE_SORT_RECORDS:! If existing record and will be updated, first remove existing sort record, will be added back later when FM0 updated.
8110 REMOVE (Z[6],KEY=CUR_FM0$(200,10)+CUR_FM0$(1,15),DOM=*NEXT) ! ASR
8115 REMOVE (Z[7],KEY=CUR_FM0$(129,9)+CUR_FM0$(2,10)+CUR_FM0$(12,4),DOM=*NEXT) ! ASH
8120 REMOVE (Z[5],KEY=CUR_FM0$(1,11)+CUR_FM0$(214,9)+CUR_FM0$(12,4),DOM=*NEXT) ! FMM
8125 REMOVE (Z[8],KEY=CUR_FM0$(1,11)+CUR_FM0$(382,20)+CUR_FM0$(12,4),DOM=*NEXT) ! FTD
8140 RETURN 
8145 ! 
8150 WRITE_SORT_RECORDS:! after write FM0, update sorts
8160 WRITE (Z[6],KEY=NEW_FM0$(200,10)+NEW_FM0$(1,15)) ! ASR
8165 WRITE (Z[7],KEY=NEW_FM0$(129,9)+NEW_FM0$(2,10)+NEW_FM0$(12,4)) ! ASH
8170 WRITE (Z[5],KEY=NEW_FM0$(1,11)+NEW_FM0$(214,9)+NEW_FM0$(12,4)) ! FMM
8175 IF POS(FMPARM$(279,1)="YF")<>0 THEN WRITE (Z[8],KEY=NEW_FM0$(1,11)+NEW_FM0$(382,20)+NEW_FM0$(12,4)) ! FTD
8190 RETURN 
8195 ! 
8200 CREATE_NEW_LOC_CODE:
8210 USE_LOC_CODE$=TEMPLATE_LOC_CODE$
8215 GET_NEW_LOC_CODE:
8220 IF USE_LOC_CODE$<"0000" OR USE_LOC_CODE$>="ZZZZ" THEN MSG$="NO MORE VALID LOCATION CODES AVAILABLE"; GOSUB LOG_ERR_MESSAGE; PRINT (OUTPUT)MSG$; EXITTO 9900
8225 NEXT_LOC_CODE$=FN%NEXT_SEQ$(USE_LOC_CODE$,6)
8235 FIND (Z[1],KEY="C"+EC$[2](51,10)+NEXT_LOC_CODE$,KNO=0,DOM=*NEXT); USE_LOC_CODE$=NEXT_LOC_CODE$; GOTO GET_NEW_LOC_CODE
8240 NEW_FM0$(12,4)=NEXT_LOC_CODE$
8245 RETURN 
8249 ! 
8250 VALIDATE_FM0:
8255 IF STP(NEW_FM0$(12,4))="" THEN MSG$="BLANK LOC_CODE"; GOSUB LOG_ERR_MESSAGE; PRINT (OUTPUT)MSG$; EXITTO 9900
8260 IF NEW_FM0$(1,1)=DIM(1) THEN NEW_FM0$(1,1)="C"
8265 IF NEW_FM0$(2,10)=DIM(10) THEN NEW_FM0$(2,10)=EC$[2](51,10)
8295 RETURN 
8299 ! 
8300 LOG_ERR_MESSAGE:
8310 MX=FN%_LOG_MESSAGE("EXCP","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3FM0|"+MSG$+"|LOC_CODE|"+EC$[2](51,10)+"|"+NEW_FM0$(12,4)+"|CUST_LOC_CODE|"+NEW_FM0$(214,9)+"|RECVG_DEPT|"+NEW_FM0$(382,20))
8340 RETURN 
8345 ! 
8350 SET_SALES_TAX_CODE:! If not provided or blank, set the sales tax code unless already set to one with no override parm activated - copied most from OF2UAA
8355 IF NEW_FM0$(224,10)<>DIM(10) THEN DIM AR5$(400); FIND (Z[3],KEY=NEW_FM0$(224,10),DOM=*NEXT)AR5$(1); IF AR5$(182,1)="Y" THEN GOTO *RETURN ! if current code set to no override
8360 IF ARPARM$(134,1)="Y" THEN DIM G$(190); CALL "TW2FUN;LOOKUP_TAX_CODE",ERR=8365,X3$,X4$,NEW_FM0$(127,2),NEW_FM0$(129,5),NEW_FM0$(111,16),"",T$,T{ALL}; G$(1)=T$(1); IF NEW_STAX_CODE_OK$=DIM(10) THEN NEW_FM0$(224,10)=G$(1,10); GOTO *RETURN
8365 IF NEW_STAX_CODE_OK$=DIM(10) OR NEW_FM0$(224,10)=DIM(10) THEN NEW_FM0$(224,10)=AR1$(235,10); GOTO 8375
8395 RETURN 
8399 ! 
8400 SMART_NEW_LOC_ADDR:
8405 LEFTOVER$=""; IF LEN(SMART_NEW_LOC_ADDR_1$)>60 THEN SMART_NEW_LOC_ADDR_1$=SMART_NEW_LOC_ADDR_1$(1,60) ! Addr1 is 30 and Addr2 is 30 so that is the max we can try for.
8410 P=POS(" "=SMART_NEW_LOC_ADDR_1$,-1); IF P=0 THEN GOTO *RETURN ! if there isn't a space then can't do it.
8415 P=POS(" "=SMART_NEW_LOC_ADDR_1$,-1); IF P=0 THEN GOTO 8430 ! if P=0 then use what we have at this point
8420 LEFTOVER$=SMART_NEW_LOC_ADDR_1$(P+1)+DIM(1)+LEFTOVER$,SMART_NEW_LOC_ADDR_1$=SMART_NEW_LOC_ADDR_1$(1,P-1)
8425 IF LEN(SMART_NEW_LOC_ADDR_1$)>30 THEN GOTO 8415
8430 NEW_FM0$(51,30)=SMART_NEW_LOC_ADDR_1$
8435 NEW_FM0$(81,30)=LEFTOVER$+SMART_NEW_LOC_ADDR_2$
8445 RETURN 
8449 ! 
8500 PARSE_VALUES:
8505 DIM VAL$[2000]; VAL_COUNT=0
8510 IF VAL_COUNT=2000 THEN GOTO 8540 ELSE VP=POS(", "=VALUE$); IF VP=0 THEN GOTO 8535
8515 VAL_COUNT=VAL_COUNT+1; IF VP=1 THEN VAL$[VAL_COUNT]="",VALUE$=VALUE$(3); GOTO 8510 ELSE VAL$[VAL_COUNT]=VALUE$(1,VP-1); IF VP=LEN(VALUE$) THEN VALUE$=""; GOTO 8540 ELSE VALUE$=VALUE$(VP+2); GOTO 8510
8535 REM "finish up last one
8537 VAL_COUNT=VAL_COUNT+1; VAL$[VAL_COUNT]=VALUE$
8540 IF VAL_COUNT>HIGHEST_VAL_COUNT THEN FOR TMP_INDEX=HIGHEST_VAL_COUNT+1 TO VAL_COUNT; COPY_IN_DATA$[TMP_INDEX]=DIM(LEN(COPY_IN$)); NEXT TMP_INDEX; HIGHEST_VAL_COUNT=VAL_COUNT; REM "If new higher val count value then initialize corresponding strings in COPY_IN_DATA$[]
8545 RETURN 
8549 ! 
8550 COPY_LOCATIONS:! copy current location to multiple customers
8555 FOR COPY_INDEX=1 TO HIGHEST_VAL_COUNT
8557 FIND (Z[2],KEY=COPY_IN_DATA$[COPY_INDEX](1,10),DOM=*CONTINUE)COPY_AR1$ ! If not valid customer then skip
8560 NEW_FM0$(2,10)=COPY_IN_DATA$[COPY_INDEX](1,10); IF NOT(NUL(COPY_IN_DATA$[COPY_INDEX](11,20))) THEN NEW_FM0$(382,20)=COPY_IN_DATA$[COPY_INDEX](11,20) ! Add or update location for this customer; update recvg_dept if not blank
8562 DIM CUR_FM0$(618); READ (Z[1],KEY=NEW_FM0$(1,15),KNO=0,DOM=*NEXT)CUR_FM0$(1); GOSUB REMOVE_SORT_RECORDS ! If loc exists for this customer then remove sorts otherwise proceed to add new loc
8565 WRITE (Z[1],KEY=NEW_FM0$(1,15))NEW_FM0$; EC3FM0_STATUS$+="; COPY SUCCESSFUL FOR "+COPY_IN_DATA$[COPY_INDEX](1,10)
8570 GOSUB WRITE_SORT_RECORDS
8585 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3FM0|WRITE|MODE|COPY|CUST|"+NEW_FM0$(2,10)+"|LOC_CODE|"+NEW_FM0$(12,4)+"|CUST_LOC_CODE|"+NEW_FM0$(214,9)+"|RECVG_DEPT|"+NEW_FM0$(382,20)+"|")
8590 NEXT COPY_INDEX
8595 RETURN 
8599 ! 
8600 FNTP:
8605 DEF FNTP(LOCAL DATA$)
8610 TP_LINE$=TP_LINE1$+DATA$+TP_LINE2$
8640 RETURN 0
8649 ! 
8750 FNP:
8751 DEF FNP(LOCAL DATA$)
8760 LINE$=LINE1$+DATA$+LINE2$
8790 RETURN 0
8799 ! ********************************************************
8800 FNBYB:
8801 DEF FNBYB$(LOCAL DATA$)
8802 ! Send DATA$ through EC3BYB
8820 CALL "EC3BYB",ERR=*NEXT,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,DATA$,BYBINFO${ALL},BYBOPTIONS$
8840 RETURN DATA$
8845 END DEF
8899 ! **********************************************************
8915 FNT:DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
8920 FNN:
8921 DEF FNN(LOCAL DATA$)
8925 LINE$=LINE1$+DATA$+LINE2$
8930 RETURN 0
8945 END DEF
8949 ! *****************************
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$)
9090 GOTO 9900
9900 REM "End
9905 GOSUB CLEAR_READONLY
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9950 EXIT 
9999 END 
56000 ! 
56001 REM "283432-Setup and Implementation FlowPoint; Location update/create  
56002 REM "307415-DBD-280; EC3FM0 copy feature, keep multiple custs in sync   
