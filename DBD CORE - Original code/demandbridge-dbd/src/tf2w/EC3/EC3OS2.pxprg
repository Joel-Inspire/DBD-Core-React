0010 REM "EC Order Status Search Results <EC3OS2>
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 09/19/14 - 8.953888 - crg - SSP# 272270
0037 REM "272270-Ability to display order status summary on the EC site after
0040 REM "Copyright 2014 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0100 SETERR 9000
0110 X0$="EC3OS2",X1$="E/C Order Status Search Results"
0120 EOL$=$0D0A$; EOL$=ATH(STP(EC_PARM$(57,8),1))
0130 NY$="NY"
0320 IOLIST FS1$,FS1[0],FS1[1],FS1[2],FS1[3],FS1[4],FS1[5],FS1[6],FS1[7],FS1[8],FS1[9],FS1[10],FS1[11],FS1[12],FS1[13]
0350 IOLIST FS6$,FS6[0],FS6[1],FS6[2],FS6[3],FS6[4],FS6[5],FS6[6],FS6[7]
0370 IOLIST FT3$,FT3[0],FT3[1],FT3[2],FT3[3],FT3[4],FT3[5],FT3[6],FT3[7],FT3[8],FT3[9],FT3[10],FT3[11],FT3[12],FT3[13]
0380 IOL_EDW:IOLIST EDW$,EDW[0]
0410 IOLIST PO3$,PO3(0),PO3(1),PO3(2)
0440 IOLIST FT4$,FT4[0],FT4[1],FT4[2],FT4[3],FT4[4],FT4[5],FT4[6],FT4[7],FT4[8],FT4[9],FT4[10],FT4[11],FT4[12],FT4[13],FT4[14],FT4[15],FT4[16],FT4[17],FT4[18],FT4[19],FT4[20],FT4[21],FT4[22],FT4[23],FT4[24],FT4[25],FT4[26],FT4[27],FT4[28],FT4[29]
0450 IOLIST FS2$,FS2[0],FS2[1],FS2[2],FS2[3],FS2[4],FS2[5],FS2[6],FS2[7],FS2[8],FS2[9],FS2[10],FS2[11],FS2[12],FS2[13],FS2[14],FS2[15],FS2[16],FS2[17],FS2[18],FS2[19],FS2[20],FS2[21],FS2[22],FS2[23],FS2[24],FS2[25],FS2[26],FS2[27],FS2[28],FS2[29]
0480 IOLIST SM4$,SM4(0),SM4(1),SM4(2),SM4(3),SM4(4),SM4(5),SM4(6),SM4(7),SM4(8),SM4(9),SM4(10),SM4(11),SM4(12)
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))],FS6[7],BLANKS$(100),FT3[13]
0507 WORK_FILE$="W"+EC$[1](1,7); REM "work file is "W"+session id
0508 CLOSE (1001); OPEN (1001,ERR=0509)WORK_FILE$; CLOSE (1001); ERASE WORK_FILE$,ERR=0509
0509 DIRECT WORK_FILE$,60,0,2048,0,0; REM "create work file if it doesn't exist
0510 Z$="01O "+WORK_FILE$+"  020 FS1... 03O FS4... 04O AR3... 05O FS6...  06O ECW...  07O FT3...  08O FS8... 09O ASC... 10O ECA... 11O PO3... 12O FT5... 13O ZZPARM 14O FT4... 15O FS2... 16O ECS... 17O ECU... 18O SM4... 19O FM0... 20O EDW... "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0550 REM 'GET E/C PARAMETERS
0560 READ (Z[13],KEY=X3$(9,3)+"E/C",DOM=9900)ECPARMS$
0600 REM "Build search strings
0910 CALL "ZZDISP","AX",EC$[2](51,10),"A/R",X3$,CUST_CODE$,"",0,0,X4$
1000 REM "Process DATA array
1005 DATA_TAGS$="001<template>002<maxrows>003<position_order>004<direction>005<session_id>006<order_types>007<by_date>008<position_cust_po>009<order_sort>010<cust_loc_for_sort>011<order_position_key>012<oss_previous_days>013<oss_cust_po>014<oss_order_no>015<oss_order_type>016<oss_item_code_ddl>017<oss_item_code>018<oss_item_desc_ddl>019<oss_item_desc>020<oss_location>021<oss_address>022<oss_city>023<oss_state>024<oss_zip>025<oss_attention>026<search_type>027<oss_mark_for>028<edw_status_list>"
1006 MAX_ROWS=25,POSITION_ORDER$="",DIRECTION$="F",ORDER_TYPES_TO_REPORT$="",BY_DATE$="N"
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1018 DPOS=POS("<"+TAG$+">"=DATA_TAGS$); IF DPOS=0 THEN GOTO 1090 ELSE DINDEX=NUM(DATA_TAGS$(DPOS-3,3),ERR=1090)
1019 ON DINDEX GOTO 1090,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1090
1021 TEMPLATE$=VALUE$; GOTO 1090; REM "template
1022 MAX_ROWS=NUM(VALUE$,ERR=1090); GOTO 1090; REM "maxrows
1023 POSITION_ORDER$=VALUE$; GOTO 1090; REM "position_order
1024 IF VALUE$="backward" THEN DIRECTION$="B"; GOTO 1090; REM "direction, only set if it is 'backward'
1025 SESSION_ID$=VALUE$; GOTO 1090; REM "Get session id
1026 ORDER_TYPES_TO_REPORT$=VALUE$; GOTO 1090; REM 'ORDER TYPES TO FILTER STATUS DISPLAY
1027 IF VALUE$="Y" THEN BY_DATE$="Y"; GOTO 1090; REM "BY_DATE$, Y=use rev date sort
1028 ORDER_POSITION_KEY$=VALUE$; GOTO 1090; REM "Set ORDER_POSITION_KEY$ to start display of orders here
1029 ORDER_SORT$=VALUE$; GOTO 1090; REM "order_sort  (nothing use ASC  otherwise H1/H2/H3/L1/L2/L3)
1030 CUST_LOC_FOR_SORT$=VALUE$; GOTO 1090; REM "cust_loc_for_sort  (required if 'order_sort' being used
1032 OSS_D3$=VALUE$,PREV_DAYS=NUM(VALUE$,ERR=1090),STDDATE$=DAY,STDDATE$=STDDATE$(7,2)+STDDATE$(1,2)+STDDATE$(4,2); GOSUB 7650; START_DATE$=TFDATE$; GOTO 1090; REM "oss_previous_days
1033 OSS_O2$=UCS(STP(VALUE$,1)); IF LEN(OSS_O2$)>15 THEN OSS_O2$=OSS_O2$(1,15) END_IF ; GOTO 1090; REM "oss_cust_po 158264
1034 OSS_O3$=UCS(STP(VALUE$,1)); VVV=POS("-"=OSS_O3$); IF VVV<>0 THEN OSS_O3$=STP(OSS_O3$,3,"-") END_IF ; IF LEN(OSS_O3$)>8 THEN OSS_O3$=OSS_O3$(1,8) END_IF ; GOTO 1090; REM "oss_order_no 158264/159098
1035 OSS_O1$=UCS(STP(VALUE$,2)); GOTO 1090; REM "oss_order_type
1036 OSS_I1$=UCS(VALUE$); GOTO 1090; REM "oss_item_code_ddl
1037 OSS_I2$=UCS(STP(VALUE$,1)); GOTO 1090; REM "oss_item_code (pattern match) - 158264.  SSP169798
1038 OSS_I3$=UCS(VALUE$); GOTO 1090; REM "oss_item_desc_ddl
1039 OSS_I4$=UCS(STP(VALUE$,1)); IF OSS_I4$<>"" THEN OSS_I4$="*"+OSS_I4$+"*" END_IF ; IF LEN(OSS_I4$)>40 THEN OSS_I4$=OSS_I4$(1,40) END_IF ; GOTO 1090; REM "oss_item_desc (pattern match) - 158264
1040 OSS_S1$=UCS(VALUE$); GOTO 1090; REM "oss_location
1041 OSS_S2$=UCS(STP(VALUE$,1)); IF OSS_S2$<>"" THEN OSS_S2$="*"+OSS_S2$+"*" END_IF ; IF LEN(OSS_S2$)>30 THEN OSS_S2$=OSS_O2$(1,30) END_IF ; GOTO 1090; REM "oss_address - 158264
1042 OSS_S3$=UCS(STP(VALUE$,1)); IF LEN(OSS_S3$)>16 THEN OSS_S3$=OSS_S3$(1,16) END_IF ; GOTO 1090; REM "oss_city 158264
1043 OSS_S4$=UCS(STP(VALUE$,1)); IF LEN(OSS_S4$)>2 THEN OSS_S4$=OSS_S4$(1,2) END_IF ; GOTO 1090; REM "oss_state 158264
1044 OSS_S5$=UCS(STP(VALUE$,1)); IF LEN(OSS_S5$)>9 THEN OSS_S5$=OSS_S5$(1,9) END_IF ; GOTO 1090; REM "oss_zip  158264
1045 OSS_S6$=UCS(STP(VALUE$,1)); IF OSS_S6$<>"" THEN OSS_S6$="*"+OSS_S6$+"*" END_IF ; GOTO 1090; REM "oss_attention
1046 SEARCH_TYPE$=VALUE$; GOTO 1090; REM "search_type
1047 OSS_S7$=UCS(STP(VALUE$,1)); IF OSS_S7$<>"" THEN OSS_S7$="*"+OSS_S7$+"*" END_IF ; GOTO 1090; REM "oss_mark_for
1048 EDW_STAT_LIST$=VALUE$; GOTO 1090 ! WO272270, edw_status_list
1090 NEXT I
1100 REM "Gather orders on this page
1101 VERSION$="266516.20131224",PROGRAM$=PGN; DIM BYBINFO$[5]; BYBINFO$[1]=PROGRAM$,BYBINFO$[2]=VERSION$,BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1102 IF STP(END_DATE$,2)<>"" THEN GOTO 1105; REM "calculate ending date if needed
1103 IF PREV_DAYS=0 THEN PREV_DAYS=NUM(ECPARMS$(712,3)) END_IF ; IF PREV_DAYS=0 THEN PREV_DAYS=NUM(ECPARMS$(125,3))
1104 PREV_DAYS=PREV_DAYS*(-1); CALL "EC3DT1",X3$,X4$,START_DATE$,"2",PREV_DAYS,END_DATE$
1105 READ (Z[16],KEY=EC$[2](51,10))ECS$; REM "read in customer parameters
1106 IF ORDER_POSITION_KEY$<>"" THEN ACTIVE_ORDER_SORT$=EC$[7](352,2) ELSE IF ORDER_SORT$<>"" THEN ACTIVE_ORDER_SORT$=ORDER_SORT$ ELSE ACTIVE_ORDER_SORT$=""
1109 IF NUM(EC_PARM$(433,3))<>0 OR MAX_ROWS=0 THEN MAX_ROWS=NUM(EC_PARM$(433,3))
1110 GOSUB 4050; REM "build display ORDER$[] array off successful search results
1500 REM "Use template$ to open file, read line by line and insert
1501 IF %BASIC2$<>"" THEN GOTO 1995; REM "156580
1505 CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1506 REM "Setup line_tags$
1507 LINE_TAGS$="001<cust_code>002<cust_name>003<ec_company>004<entrystart>005<buttonnext>006<buttonprev>007<session_id>008<buyer_id>009<buyer_name>010<date>011<time>012<H1_sort_link>013<H2_sort_link>014<H3_sort_link>015<L1_sort_link>016<L2_sort_link>017<L3_sort_link>018<active_order_sort>019<number_records_found>020<oss_previous_days>021<oss_cust_po>022<oss_order_no>023<oss_order_type>024<oss_item_code_ddl>025<oss_item_code>026<oss_item_desc_ddl>027<oss_item_desc>028<oss_location>029<oss_address>030<oss_city>031<oss_state>032<oss_zip>033<oss_attention>034<oss_mark_for>035<shipto_desc>"
1510 READ (100,END=1595)LINE$; GOSUB 7550
1515 INDEX=POS("?tf?"=LINE$); IF INDEX=0 THEN PRINT (OUTPUT)LINE$,EOL$,; GOTO 1510
1520 END_INDEX=POS("?"=LINE$(INDEX+4)),TAG$=LINE$(INDEX+4,END_INDEX-1),LINE1$=LINE$(1,INDEX-1),LINE2$=LINE$(INDEX+END_INDEX+4),LPOS=POS("<"+TAG$+">"=LINE_TAGS$); IF LPOS=0 THEN LINDEX=0 ELSE LINDEX=NUM(LINE_TAGS$(LPOS-3,3))
1530 GOSUB 2000; GOTO 1515
1995 GOTO 9900
1999 REM "Get tag value & substitute
2000 ON LINDEX GOTO 2090,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2090
2001 LINE$=LINE1$+CUST_CODE$+LINE2$; GOTO 2095; REM "cust_code
2002 LINE$=LINE1$+STP(EC$[1](23,35),1)+LINE2$; GOTO 2095; REM "cust_name
2003 LINE$=LINE1$+STP(EC_PARM$(7,50),1)+LINE2$; GOTO 2095; REM "ec_company
2004 GOSUB 3200; LINE$=TABLE$; GOTO 2095; REM "entrystart
2005 GOSUB 3500; LINE$=BUTTON$; GOTO 2095; REM "buttonnext
2006 GOSUB 3600; LINE$=BUTTON$; GOTO 2095; REM "buttonprev
2007 LINE$=LINE1$+STP(EC$[1](1,7),1)+LINE2$; GOTO 2095; REM "session_id from EC$
2008 LINE$=LINE1$+STP(EC$[1](8,15),1)+LINE2$; GOTO 2095; REM "buyer_id
2009 LINE$=LINE1$+STP(EC$[2](16,35),1)+LINE2$; GOTO 2095; REM "buyer_name
2010 LINE$=LINE1$+EC$[4]+LINE2$; GOTO 2095; REM " date
2011 LINE$=LINE1$+EC$[5]+LINE2$; GOTO 2095; REM "time
2012 ORDER_SORT_TYPE$="H1"; GOSUB 4000; LINE$=LINE1$+SORT_LINK$+LINE2$; GOTO 2095; REM "order sort link for H1
2013 ORDER_SORT_TYPE$="H2"; GOSUB 4000; LINE$=LINE1$+SORT_LINK$+LINE2$; GOTO 2095; REM "order sort link for H2
2014 ORDER_SORT_TYPE$="H3"; GOSUB 4000; LINE$=LINE1$+SORT_LINK$+LINE2$; GOTO 2095; REM "order sort link for H3
2015 ORDER_SORT_TYPE$="L1"; GOSUB 4000; LINE$=LINE1$+SORT_LINK$+LINE2$; GOTO 2095; REM "order sort link for L1
2016 ORDER_SORT_TYPE$="L2"; GOSUB 4000; LINE$=LINE1$+SORT_LINK$+LINE2$; GOTO 2095; REM "order sort link for L2
2017 ORDER_SORT_TYPE$="L3"; GOSUB 4000; LINE$=LINE1$+SORT_LINK$+LINE2$; GOTO 2095; REM "order sort link for L3
2018 LINE$=LINE1$+ACTIVE_ORDER_SORT$+LINE2$; GOTO 2095; REM "active order sort (also see button sections)
2019 LINE$=LINE1$+STR(TOTAL_RECORDS)+LINE2$; GOTO 2095; REM "number_records_found
2020 LINE$=LINE1$+OSS_D3$+LINE2$; GOTO 2095; REM "oss_previous_days
2021 LINE$=LINE1$+OSS_O2$+LINE2$; GOTO 2095; REM "oss_cust_po
2022 LINE$=LINE1$+OSS_O3$+LINE2$; GOTO 2095; REM "oss_order_no"
2023 LINE$=LINE1$+OSS_O1$+LINE2$; GOTO 2095; REM "oss_order_type
2024 LINE$=LINE1$+OSS_I1$+LINE2$; GOTO 2095; REM "oss_item_code_ddl
2025 LINE$=LINE1$+"*"+OSS_I2$+"*"+LINE2$; GOTO 2095; REM "oss_item_code.  SSP169798
2026 LINE$=LINE1$+OSS_I3$+LINE2$; GOTO 2095; REM "oss_item_desc_ddl
2027 LINE$=LINE1$+OSS_I4$+LINE2$; GOTO 2095; REM "oss_item_desc
2028 LINE$=LINE1$+OSS_S1$+LINE2$; GOTO 2095; REM "oss_location
2029 LINE$=LINE1$+OSS_S2$+LINE2$; GOTO 2095; REM "oss_address
2030 LINE$=LINE1$+OSS_S3$+LINE2$; GOTO 2095; REM "oss_city
2031 LINE$=LINE1$+OSS_S4$+LINE2$; GOTO 2095; REM "oss_state
2032 LINE$=LINE1$+OSS_S5$+LINE2$; GOTO 2095; REM "oss_zip
2033 LINE$=LINE1$+OSS_S6$+LINE2$; GOTO 2095; REM "oss_attention
2034 LINE$=LINE1$+OSS_S7$+LINE2$; GOTO 2095; REM "oss_mark_for
2035 GOSUB 3950; LINE$=LINE1$+STDESC$+LINE2$; GOTO 2095; REM "shipto_desc
2090 LINE$=LINE1$+"?"+LINE2$; GOTO 2095; REM "tag not found, replace with '?'
2095 RETURN 
3200 REM "Output entries, using ENTRY_TEMPLATE$ to pass information, create TABLE$ to output
3202 ENTRY_TAGS$="001<order_no>002<order_date>003<order_status>004<order_amount>005<order_cust_po>006<date_requested>007<deposit_ck_no>008<deposit_date>009<deposit_amount>010<csr_code>011<csr_abbr_name>012<sper_code>013<sper_abbr_name>014<GB_gold_rush>015<GB_sample_rebate>016<GB_no_overruns>017<GB_dist_samples>018<GB_sure_date>019<GB_imprint_color>020<order_key>021<session_id>022<ship_to_city>023<ship_to_state>024<ship_to_zip>025<order_type>026<ship_date>027<edw_status>028<order_buyer_id>029<order_buyer_name>030<order_buyer_email>031<order_buyer_pa_email>032<order_buyer_csr_email>033<order_buyer_sls_email>"
3203 REM "Setup ENTRY_TEMPLATE$
3204 ENTRY_TEMPLATE$=LINE$,TABLE$=""
3205 READ (100,END=3206)LINE$; GOSUB 7550; ENTRY_TEMPLATE$=ENTRY_TEMPLATE$+LINE$+EOL$; IF POS("?tf?entryend?"=LINE$)=0 THEN GOTO 3205
3209 REM "Now read order$, if B direction do it backwards
3210 IF DIRECTION$="B" THEN START_PT=TOTAL_RECORDS,END_PT=1,STEP_SIZE=-1 ELSE START_PT=1,END_PT=TOTAL_RECORDS,STEP_SIZE=1
3215 FOR ENTRY_INDEX=START_PT TO END_PT STEP STEP_SIZE
3220 DIM FS1$(350),FS1[13]; ORDER_FILE_SOURCE$="FS1"; FIND (Z[2],KEY=ORDER$[ENTRY_INDEX,0],DOM=3221)IOL=0320; GOTO 3222
3221 FIND (Z[7],KEY=ORDER$[ENTRY_INDEX,0],DOM=3245)IOL=0320; ORDER_FILE_SOURCE$="FT3"; REM 'TRY IN REPEAT ORDER FILES
3222 DIM CSR$(255); FIND (Z[4],KEY=FS1$(89,4),DOM=3223)CSR$
3223 DIM SPER$(255); FIND (Z[4],KEY=FS1$(93,4),DOM=3224)SPER$
3224 DIM LOC$(299); IF ORDER_FILE_SOURCE$="FS1" THEN LOC_CHAN=Z[11] ELSE LOC_CHAN=Z[12] END_IF ; FIND (LOC_CHAN,KEY=ORDER$[ENTRY_INDEX,0]+DIM(5),DOM=3225)LOC$
3225 ENTRY$=ENTRY_TEMPLATE$
3226 GOSUB GET_ORDER_BUYER ! 272270
3230 GOSUB 3300
3235 IF LEN(TABLE$)+LEN(ENTRY$)>62000 THEN PRINT (OUTPUT)TABLE$,EOL$,; TABLE$="" END_IF ; TABLE$=TABLE$+ENTRY$; REM "#134089
3245 NEXT ENTRY_INDEX
3295 RETURN 
3300 REM "Given FS1$, create row in table
3305 EINDEX=POS("?tf?"=ENTRY$); IF EINDEX=0 THEN GOTO 3395
3306 EEND_INDEX=POS("?"=ENTRY$(EINDEX+4)),ETAG$=ENTRY$(EINDEX+4,EEND_INDEX-1),ENTRY1$=ENTRY$(1,EINDEX-1),ENTRY2$=ENTRY$(EINDEX+EEND_INDEX+4),EPOS=POS("<"+ETAG$+">"=ENTRY_TAGS$); IF EPOS=0 THEN EINDEX=0 ELSE EINDEX=NUM(ENTRY_TAGS$(EPOS-3,3))
3310 ON EINDEX GOTO 3389,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3389
3311 CALL "ZZDISP","AX",FS1$(118,8),"O/P",X3$,ORDER_NO$,"",0,0,X4$; ENTRY$=ENTRY1$+ORDER_NO$+ENTRY2$; GOTO 3390; REM "order_no
3312 CALL "ZZDISP","DX",FS1$(16,6),"",X3$,DATE1$,"",0,0,X4$; ENTRY$=ENTRY1$+DATE1$+ENTRY2$; GOTO 3390; REM "order_date
3313 ORDER_STATUS$=ORDER$[ENTRY_INDEX,1]; ENTRY$=ENTRY1$+ORDER_STATUS$+ENTRY2$; GOTO 3390; REM "order_status
3314 ENTRY$=ENTRY1$+STR(FS1[6]:"-$###,###.00")+ENTRY2$; GOTO 3390; REM "order_amount
3315 ENTRY$=ENTRY1$+STP(FS1$(28,15),1)+ENTRY2$; GOTO 3390; REM "order_cust_po
3316 CALL "ZZDISP","DX",FS1$(55,6),"",X3$,DATE1$,"",0,0,X4$; ENTRY$=ENTRY1$+DATE1$+ENTRY2$; GOTO 3390; REM "date_requested
3317 ENTRY$=ENTRY1$+STP(FS1$(64,6),1)+ENTRY2$; GOTO 3390; REM "deposit_ck_no
3318 CALL "ZZDISP","DX",FS1$(70,6),"",X3$,DATE1$,"",0,0,X4$; ENTRY$=ENTRY1$+DATE1$+ENTRY2$; GOTO 3390; REM "deposit_date
3319 ENTRY$=ENTRY1$+STR(FS1[0]:"-$###,###.00")+ENTRY2$; GOTO 3390; REM "deposit_amount
3320 ENTRY$=ENTRY1$+STP(FS1$(89,4),1)+ENTRY2$; GOTO 3390; REM "csr_code
3321 ENTRY$=ENTRY1$+STP(CSR$(149,20),1)+ENTRY2$; GOTO 3390; REM "csr_abbr_name
3322 ENTRY$=ENTRY1$+STP(FS1$(93,4),1)+ENTRY2$; GOTO 3390; REM "sper_code
3323 ENTRY$=ENTRY1$+STP(SPER$(149,20),1)+ENTRY2$; GOTO 3390; REM "sper_abbr_name
3324 ENTRY$=ENTRY1$+NY$(POS(FS1$(195,1)="Y")+1,1)+ENTRY2$; GOTO 3390; REM "GB_gold_rush
3325 ENTRY$=ENTRY1$+NY$(POS(FS1$(197,1)="Y")+1,1)+ENTRY2$; GOTO 3390; REM "GB_sample_rebate
3326 ENTRY$=ENTRY1$+NY$(POS(FS1$(198,1)="Y")+1,1)+ENTRY2$; GOTO 3390; REM "GB_no_overruns
3327 ENTRY$=ENTRY1$+STP(FS1$(223,3),1)+ENTRY2$; GOTO 3390; REM "GB_dist_samples
3328 ENTRY$=ENTRY1$+NY$(POS(FS1$(226,1)="Y")+1,1)+ENTRY2$; GOTO 3390; REM "GB_sure_date
3329 ENTRY$=ENTRY1$+STP(FS1$(203,20),1)+ENTRY2$; GOTO 3390; REM "GB_imprint_color
3330 ENTRY$=ENTRY1$+FS1$(118,8)+ENTRY2$; GOTO 3390; REM " order_key
3331 ENTRY$=ENTRY1$+STP(EC$[1](1,7),1)+ENTRY2$; GOTO 3390; REM " session_id from EC$
3332 ENTRY$=ENTRY1$+STP(LOC$(106,16),1)+ENTRY2$; GOTO 3390; REM "ship_to_city
3333 ENTRY$=ENTRY1$+STP(LOC$(122,2),1)+ENTRY2$; GOTO 3390; REM "ship_to_state
3334 CALL "ZZDISP","AX",LOC$(124,9),"ZIP",X3$,ZIP$,"",0,0,X4$; ENTRY$=ENTRY1$+ZIP$+ENTRY2$; GOTO 3390; REM "ship_to_zip
3335 GOSUB 7600; ENTRY$=ENTRY1$+ORDER_TYPE$+ENTRY2$; GOTO 3390; REM "order_type
3336 ENTRY$=ENTRY1$+ORDER$[ENTRY_INDEX,3]+ENTRY2$; GOTO 3390; REM "ship_date (from sm4 file) 158066
3337 GOSUB GET_EDW_STATUS; ENTRY$=ENTRY1$+STP(EDW_STATUS$)+ENTRY2$; GOTO 3390 ! WO272270, edw_status
3338 ENTRY$=ENTRY1$+STP(ECA$(1,15),1)+ENTRY2$; GOTO 3390 ! WO272270, order_buyer_id
3339 ENTRY$=ENTRY1$+STP(ECA$(16,35),1)+ENTRY2$; GOTO 3390 ! WO272270, order_buyer_name
3340 ENTRY$=ENTRY1$+STP(ECA$(109,60),1)+ENTRY2$; GOTO 3390 ! WO272270, order_buyer_email
3341 ENTRY$=ENTRY1$+STP(ECA$(169,60),1)+ENTRY2$; GOTO 3390 ! WO272270, order_buyer_pa_email
3342 ENTRY$=ENTRY1$+STP(ECA$(340,60),1)+ENTRY2$; GOTO 3390 ! WO272270, order_buyer_csr_email
3343 ENTRY$=ENTRY1$+STP(ECA$(400,60),1)+ENTRY2$; GOTO 3390 ! WO272270, order_buyer_sls_email
3389 ENTRY$=ENTRY1$+"?"+ENTRY2$; GOTO 3390; REM "tag not found, replace with '?'
3390 GOTO 3305
3395 RETURN 
3400 REM "build order status screen using ECW (user defined order sort)
3401 REM "fill order$[] with orders, using position_order$ and direction$, if direction$='B'(ackwards) then 1->total_records is in reverse order, so read it later as total_records-> 1
3403 GOSUB 3450
3405 IF POSITION_ORDER$="" AND DIRECTION$="B" THEN IF ORDER_POSITION_KEY$="" THEN POSITION_ORDER$=SORTKEY_HI$+$FFFFFFFFFFFF$ ELSE POSITION_ORDER$=EC$[2](51,10)+EC$[7](352,2)+ORDER_POSITION_KEY$; REM "if in backwards order, start at end of file
3406 IF POSITION_ORDER$="" AND DIRECTION$="F" THEN IF ORDER_POSITION_KEY$="" THEN POSITION_ORDER$=SORTKEY_HI$ ELSE POSITION_ORDER$=EC$[2](51,10)+EC$[7](352,2)+ORDER_POSITION_KEY$; REM "if forward, start at beginning of file unless direct customer po access requested with order position key
3410 ORDER_LIST$="",FIRST_ORDER$="",LAST_ORDER$="",TOTAL_RECORDS=0,INDEX=1; DIM ORDER$[MAX_ROWS,3]; REM "141008 / 158066
3415 READ (Z[6],KEY=POSITION_ORDER$,DOM=3416)
3420 IF DIRECTION$="B" THEN ECWKEY$=KEP(Z[6],END=3435) ELSE ECWKEY$=KEY(Z[6],END=3435)
3421 IF ECWKEY$(1,LEN(SORTKEY_HI$))<>POSITION_ORDER$(1,LEN(SORTKEY_HI$)) THEN GOTO 3435 ELSE READ (Z[6],KEY=ECWKEY$,DOM=3420); ONUMB$=ECWKEY$(LEN(ECWKEY$)-7,8); IF ONUMB$=ORDER_CK$ THEN GOTO 3420; REM "if end of customer leave, else if same order, skip it
3422 GOSUB CHECK_ORDER; IF REPORT$="N" THEN GOTO 3420; REM "skip iforder does not meet reporting requirements
3423 ORDER_CK$=ECWKEY$(LEN(ECWKEY$)-7,8); GOSUB 3700; REM "get order status for current order in ONUMB$
3425 ORDER$[INDEX,0]=ONUMB$,ORDER$[INDEX,1]=OSTATUS$,ORDER$[INDEX,2]=ECWKEY$,ORDER$[INDEX,3]=STP(SM4_SHIP_DATE$,3," "),TOTAL_RECORDS=TOTAL_RECORDS+1,INDEX=INDEX+1; IF MAX_ROWS<>0 AND TOTAL_RECORDS>=MAX_ROWS THEN GOTO 3435; REM "skip to correct place to exit / 158066
3430 GOTO 3420
3440 IF DIRECTION$="B" THEN FIRST_ORDER$=ORDER$[TOTAL_RECORDS,2],LAST_ORDER$=ORDER$[1,2] ELSE FIRST_ORDER$=ORDER$[1,2],LAST_ORDER$=ORDER$[TOTAL_RECORDS,2]
3445 RETURN 
3450 REM "Set VERY_FIRST_ORDER$ and VERY_LAST_ORDER$. These will be used to determine when to NOT show prev and next buttons
3451 VERY_FIRST_ORDER$="",VERY_LAST_ORDER$=""
3453 ON INT(POS(ACTIVE_ORDER_SORT$="H1H2H3L1L2L3",2)/2) GOTO 3454,3454,3454,3457,3457,3457
3454 SORTKEY_HI$=EC$[2](51,10)+ACTIVE_ORDER_SORT$; GOTO 3460; REM "header based sort
3457 IF CUST_LOC_FOR_SORT$<>"" THEN SORTKEY_HI$=EC$[2](51,10)+ACTIVE_ORDER_SORT$+CUST_LOC_FOR_SORT$; GOTO 3460 ELSE SORTKEY_HI$=EC$[2](51,10)+ACTIVE_ORDER_SORT$; GOTO 3460; REM "line based sort (requires location code)
3460 READ (Z[6],KEY=SORTKEY_HI$,DOM=3461)
3465 VK$=KEY(Z[6],END=3467); READ (Z[6]); IF VK$(1,LEN(SORTKEY_HI$))=SORTKEY_HI$ THEN ONUMB$=VK$(LEN(VK$)-7,8); GOSUB CHECK_ORDER; GOTO 3466 ELSE GOTO 3470
3466 IF REPORT$="Y" THEN VERY_FIRST_ORDER$=VK$; GOTO 3470 ELSE GOTO 3465
3470 READ (Z[6],KEY=SORTKEY_HI$+$FF$,DOM=3471)
3471 VK$=KEP(Z[6],END=3473); READ (Z[6],DIR=-1,END=3473); IF VK$(1,LEN(SORTKEY_HI$))=SORTKEY_HI$ THEN ONUMB$=VK$(LEN(VK$)-7,8); GOSUB CHECK_ORDER; GOTO 3472 ELSE GOTO 3474
3472 IF REPORT$="Y" THEN VERY_LAST_ORDER$=VK$; GOTO 3474 ELSE GOTO 3471
3495 RETURN 
3500 REM "Output next button, using BUTTON_NEXT_TEMPLATE$ to pass information, creating BUTTON$, if needed
3502 BUTTON$="",BUTTON_NEXT_TAGS$="001<position_order>002<session_id>003<active_order_sort>"
3503 REM "Setup BUTTON_NEXT_TEMPLATE$
3505 READ (100,END=3506)LINE$; GOSUB 7550; BUTTON_NEXT_TEMPLATE$=BUTTON_NEXT_TEMPLATE$+LINE$+EOL$; IF POS("?tf?buttonnextend?"=LINE$)=0 THEN GOTO 3505
3510 IF LAST_ORDER$=VERY_LAST_ORDER$ THEN BUTTON$=""; GOTO 3595 ELSE BUTTON$=BUTTON_NEXT_TEMPLATE$
3515 BNINDEX=POS("?tf?"=BUTTON$); IF BNINDEX=0 THEN GOTO 3591
3516 BNEND_INDEX=POS("?"=BUTTON$(BNINDEX+4)),BNTAG$=BUTTON$(BNINDEX+4,BNEND_INDEX-1),BUTTON1$=BUTTON$(1,BNINDEX-1),BUTTON2$=BUTTON$(BNINDEX+BNEND_INDEX+4),BNPOS=POS("<"+BNTAG$+">"=BUTTON_NEXT_TAGS$); IF BNPOS=0 THEN BUTTON$=BUTTON1$+BUTTON2$,BNINDEX=0 ELSE BNINDEX=NUM(BUTTON_NEXT_TAGS$(BNPOS-3,3))
3520 ON BNINDEX GOTO 3590,3521,3522,3523,3590
3521 BUTTON$=BUTTON1$+LAST_ORDER$+BUTTON2$; GOTO 3590; REM "position_order
3522 BUTTON$=BUTTON1$+EC$[1](1,7)+BUTTON2$; GOTO 3590; REM "session_id from EC$
3523 BUTTON$=BUTTON1$+ACTIVE_ORDER_SORT$+BUTTON2$; GOTO 3590; REM "acvtive order sort
3590 GOTO 3515
3595 RETURN 
3600 REM "Output previous button, using BUTTON_PREV_TEMPLATE$ to pass information, creating BUTTON$, if needed
3602 BUTTON$="",BUTTON_PREV_TAGS$="001<position_order>002<session_id>003<active_order_sort>"
3605 READ (100,END=3606)LINE$; GOSUB 7550; BUTTON_PREV_TEMPLATE$=BUTTON_PREV_TEMPLATE$+LINE$+EOL$; IF POS("?tf?buttonprevend?"=LINE$)=0 THEN GOTO 3605
3610 IF FIRST_ORDER$=VERY_FIRST_ORDER$ THEN BUTTON$=""; GOTO 3695 ELSE BUTTON$=BUTTON_PREV_TEMPLATE$
3615 BNINDEX=POS("?tf?"=BUTTON$); IF BNINDEX=0 THEN GOTO 3691
3616 BNEND_INDEX=POS("?"=BUTTON$(BNINDEX+4)),BNTAG$=BUTTON$(BNINDEX+4,BNEND_INDEX-1),BUTTON1$=BUTTON$(1,BNINDEX-1),BUTTON2$=BUTTON$(BNINDEX+BNEND_INDEX+4),BNPOS=POS("<"+BNTAG$+">"=BUTTON_PREV_TAGS$); IF BNPOS=0 THEN BUTTON$=BUTTON1$+BUTTON2$,BNINDEX=0 ELSE BNINDEX=NUM(BUTTON_PREV_TAGS$(BNPOS-3,3))
3620 ON BNINDEX GOTO 3690,3621,3622,3623,3690
3621 BUTTON$=BUTTON1$+FIRST_ORDER$+BUTTON2$; GOTO 3690; REM "position_order
3622 BUTTON$=BUTTON1$+EC$[1](1,7)+BUTTON2$; GOTO 3690; REM "session_id
3623 BUTTON$=BUTTON1$+ACTIVE_ORDER_SORT$+BUTTON2$; GOTO 3690; REM "active order sort
3690 GOTO 3615
3695 RETURN 
3700 REM "Determine Order Status For Current Order (using order status sorts)
3702 SHIP_STATUS$="",PARTIAL_SHIPPED$="N",FS2_LINE_COUNT=0,FT4_LINE_COUNT=0; DIM FS1_ORDER$[1000],FT3_ORDER$[1000],FS2[29],FT4[29]
3703 IF ORDER_FILE_SOURCE$="FS1" THEN ORDER_CHAN=Z[2] ELSE ORDER_CHAN=Z[7]
3710 REM "Read FS1 order into array
3711 READ RECORD (Z[2],KEY=ONUMB$,DOM=3715)FS1$; FS1_ORDER$[0]=FS1$
3712 READ (Z[15],KEY=ONUMB$,DOM=3713)
3713 FS2_KEY$=KEY(Z[15],END=3715); IF FS2_KEY$(1,LEN(ONUMB$))<>ONUMB$ THEN GOTO 3715 ELSE READ (Z[15],KEY=FS2_KEY$)IOL=0450; FS2_LINE_COUNT=FS2_LINE_COUNT+1; FS1_ORDER$[FS2_LINE_COUNT+1]=FS2_KEY$; IF FS2[16]<>0 THEN PARTIAL_SHIPPED$="Y" END_IF ; GOTO 3713
3715 FS1_ORDER$[1]=STR(FS2_LINE_COUNT); REM "set number of lines on order
3720 REM "Read FT3 order into array
3721 READ RECORD (Z[7],KEY=ONUMB$,DOM=3725)FT3$; FT3_ORDER$[0]=FT3$
3722 READ (Z[14],KEY=ONUMB$,DOM=3723)
3723 FT4_KEY$=KEY(Z[14],END=3725); IF FT4_KEY$(1,LEN(ONUMB$))<>ONUMB$ THEN GOTO 3725 ELSE READ (Z[14],KEY=FT4_KEY$)IOL=0440; FT4_LINE_COUNT=FT4_LINE_COUNT+1; FT3_ORDER$[FT4_LINE_COUNT+1]=FT4_KEY$; GOTO 3723
3725 FT3_ORDER$[1]=STR(FT4_LINE_COUNT); REM "set line count for archived order
3730 REM "determine status on line comparison
3731 REM "Shipped = FS1 line count = zero
3732 REM "parially shipped = FS1 line count less than FT4 line count
3735 IF FS2_LINE_COUNT=0 THEN OSTATUS$="Shipped"; GOTO 3751; REM "158066
3736 IF FS2_LINE_COUNT<FT4_LINE_COUNT THEN OSTATUS$="Partially Shipped"; GOTO 3790
3740 REM "determine if any part of a line is shipped from the open order
3741 IF PARTIAL_SHIPPED$="Y" THEN OSTATUS$="Partially Shipped" ELSE OSTATUS$="Open"
3750 REM "if order considered open based on order check - ck to see if SM4 information on file
3751 REM "IF OSTATUS$<>"Open" THEN GOTO 3760 - 158066
3752 SM4_RECORD_COUNT=0,SHIP_DATE$="",SM4_SHIP_DATE$=""; READ (Z[18],KEY=ONUMB$,DOM=3753); REM "158066"
3753 SM4KEY$=KEY(Z[18],END=3760); IF SM4KEY$(1,LEN(ONUMB$))<>ONUMB$ THEN GOTO 3760 END_IF ; IF OSTATUS$="Open" THEN OSTATUS$="Shipped"; REM "at least one shipping record found; REM "158066
3754 SM4_RECORD_COUNT=SM4_RECORD_COUNT+1; IF SM4_RECORD_COUNT>1 THEN SHIP_DATE$="Multiple",SM4_SHIP_DATE$=SHIP_DATE$; GOTO 3760; REM "158066
3755 DIM SM4$(500),SM4(12); READ (Z(18),KEY=SM4KEY$)IOL=0480; SHIP_DATE$=SM4$(15,6); GOTO 3753; REM "158066
3760 IF STP(SHIP_DATE$,3," ")="" OR SHIP_DATE$="Multiple" THEN GOTO 3761 END_IF ; CALL "ZZDISP","DX",SHIP_DATE$,"",X3$,SM4_SHIP_DATE$,"",0,0,X4$; REM "convert ship date unless not set 158066
3795 RETURN 
3800 REM "build order status screen using ORDER HISTORY BY CUSTOMER PO (ASC)"
3801 REM "fill order$[] with orders, using position_order$ and direction$, if direction$='B'(ackwards) then 1->total_records is in reverse order, so read it later as total_records-> 1
3803 GOSUB 3850
3804 REST_OF_KEY$=""; IF POSITION_ORDER$<>"" THEN GOSUB 8050 ELSE IF ORDER_POSITION_KEY$<>"" THEN ORDER_POSITION_KEY$=PAD(ORDER_POSITION_KEY$,15) ELSE ORDER_POSITION_KEY$=DIM(15); REM "If given order number use it to position, else if given cust_Po use it, else start at the beginnning
3805 IF POSITION_ORDER$="" AND DIRECTION$="B" THEN REST_OF_KEY$=$FF$; REM "if in backwards order, start at end of file
3810 ORDER_LIST$="",FIRST_ORDER$="",LAST_ORDER$="",TOTAL_RECORDS=0,INDEX=1,ORDER_CK$=""; DIM ORDER$[100,3]; REM "141008 / 158066
3815 EXTRACT (Z[9],KEY=EC$[2](51,10)+ORDER_POSITION_KEY$+REST_OF_KEY$,DOM=3816)
3820 IF DIRECTION$="B" THEN KEY_9$=KEP(Z[9],END=3835) ELSE KEY_9$=KEY(Z[9],END=3835)
3821 IF KEY_9$(1,10)<>EC$[2](51,10) THEN GOTO 3835 ELSE READ (Z[9],KEY=KEY_9$,DOM=3820); IF KEY_9$(37,8)=ORDER_CK$ THEN GOTO 3820; REM "if end of customer leave, else if same order, skip it
3823 ONUMB$=KEY_9$(37,8); GOSUB CHECK_ORDER; IF REPORT$="N" THEN GOTO 3820; REM "skip if order does not meet reporting criteria
3824 ORDER_CK$=KEY_9$(37,8),ORDER_KEY$=""; GOSUB 3900; REM 'GET ORDER STATUS AND READ ALL LINES FOR THIS ORDER
3825 ORDER$[INDEX,0]=ORDER_CK$,ORDER$[INDEX,1]=OSTATUS$,ORDER$[INDEX,2]=ORDER_CK$,TOTAL_RECORDS=TOTAL_RECORDS+1,INDEX=INDEX+1; IF MAX_ROWS<>0 AND TOTAL_RECORDS>=MAX_ROWS THEN GOTO 3835; REM "skip to correct place to exit
3830 GOTO 3820
3840 IF DIRECTION$="B" THEN FIRST_ORDER$=ORDER$[TOTAL_RECORDS,2],LAST_ORDER$=ORDER$[1,2] ELSE FIRST_ORDER$=ORDER$[1,2],LAST_ORDER$=ORDER$[TOTAL_RECORDS,2]
3845 RETURN 
3850 REM "Set VERY_FIRST_ORDER$ and VERY_LAST_ORDER$. These will be used to determine when to NOT show prev and next buttons
3855 VERY_FIRST_ORDER$="",VERY_LAST_ORDER$=""
3860 READ (Z[9],KEY=EC$[2](51,10),DOM=3861)
3865 VK$=KEY(Z[9],END=3870); READ (Z[9]); IF VK$(1,10)=EC$[2](51,10) THEN ONUMB$=VK$(37,8); GOSUB CHECK_ORDER; GOTO 3866 ELSE GOTO 3870
3866 IF REPORT$="Y" THEN VERY_FIRST_ORDER$=ONUMB$ ELSE GOTO 3865
3870 READ (Z[9],KEY=EC$[2](51,10)+$FF$,DOM=3871)
3871 VK$=KEP(Z[9],END=3874); READ (Z[9],DIR=-1,END=3874); IF VK$(1,10)=EC$[2](51,10) THEN ONUMB$=VK$(37,8); GOSUB CHECK_ORDER; GOTO 3873 ELSE GOTO 3874
3873 IF REPORT$="Y" THEN VERY_LAST_ORDER$=ONUMB$ ELSE GOTO 3871
3895 RETURN 
3900 REM 'PROCESS ALL RECORDS FOR THE CURRENT ORDER# USING FS8
3901 REM ' AFTER PROCESSING ALL ORDER LINES - ORDER STATUS SET BASED ON OF ALL, SOME OR NONE OF THE LINES SHOW BILLING INFORMATION
3902 SHIP_STATUS$=""
3905 READ (Z[8],KEY=EC$[2](51,10)+ORDER_CK$,DOM=3906)
3910 KEY_8$=KEY(Z[8],END=3930)
3912 IF KEY_8$(1,10)<>EC$[2](51,10) OR KEY_8$(11,8)<>ORDER_CK$ THEN GOTO 3930
3913 READ (Z[8])
3914 READ (Z[5],KEY=KEY_8$(1,10)+KEY_8$(19,11)+KEY_8$(11,8)+KEY_8$(30,1),DOM=3910)IOL=0350
3916 IF FS6$(40,8)=BLANKS$(1,8) THEN SHIPPED$=" " ELSE SHIPPED$="Y"
3918 SHIP_STATUS$=SHIP_STATUS$+SHIPPED$; GOTO 3910
3930 IF LEN(SHIP_STATUS$)=0 OR SHIP_STATUS$=BLANKS$(1,LEN(SHIP_STATUS$)) THEN OSTATUS$="Open"; GOTO 3940
3932 FOR SINDEX=1 TO LEN(SHIP_STATUS$)
3934 IF SHIP_STATUS$(SINDEX,1)=" " THEN OSTATUS$="Partial Shipped"; EXITTO 3940 ELSE NEXT SINDEX
3936 OSTATUS$="Shipped"
3945 RETURN 
3950 REM "get ship-to description (based on ship-to searched for)
3952 IF STP(OSS_S1$,3)="" OR OSS_S1$="****" THEN STDESC$="ALL Locations"; GOTO 3958
3954 DIM FM0$(200); FIND (Z(19),KEY="C"+EC$[2](51,10)+OSS_S1$,DOM=3955)FM0$; STDESC$=FM0$(16,35)
3958 RETURN 
4000 REM "build order sort links
4005 UD_SORT_CODE$=ECS$(172+10*INT(POS(ORDER_SORT_TYPE$="H1H2H3L1L2L3",2)/2),10)
4006 DIM UD_SORT_DESC$(40); FIND (Z[17],KEY=UD_SORT_CODE$,DOM=4007)ECU$; UD_SORT_DESC$=ECU$(11,50)
4015 IF EC_PARM$(1177,1)="Y" THEN SID$=EC$[1](1,7) ELSE SID$=EC$[1](1213,64) ! SSP212160 jdf
4020 SORT_LINK$="<a href="+QUO+STP(EC$[14](316,60),2)+"?basic=EC3OS2&amp;session_id="+STP(SID$,1)+"&amp;template="+STP(EC_PARM$(561,35),1)+"&amp;order_sort="+ORDER_SORT_TYPE$+"&amp;maxrows="+EC_PARM$(433,3)+QUO+">"+STP(UD_SORT_DESC$,2)+"</a>" ! SSP212160 jdf
4045 RETURN 
4050 REM "build search results file
4052 DIM ORDER$[1000,3]; INDEX=0,TOTAL_RECORDS=0
4060 IF SEARCH_TYPE$="SHIPTO" THEN GOTO 4100 ELSE IF SEARCH_TYPE$="PRODUCT" THEN GOTO 4300 ELSE GOTO 4500
4100 REM "shipto based search
4101 REM "ECW format:  custcd + sbasis + element + revdate + orderno
4109 REM "determine search basis
4110 IF STP(OSS_S3$,2)="" AND STP(OSS_S4$,2)="" AND STP(OSS_S5$,2)="" THEN SBASIS$="S1",SELEMENT$=""; GOTO 4120
4111 IF STP(OSS_S3$,2)<>"" THEN SBASIS$="S3",SELEMENT$=OSS_S3$; GOTO 4120
4112 IF STP(OSS_S5$,2)<>"" THEN SBASIS$="S5",SELEMENT$=OSS_S5$; GOTO 4120
4113 IF STP(OSS_S4$,2)<>"" THEN SBASIS$="S4",SELEMENT$=OSS_S4$; GOTO 4120
4115 SBASIS$="S1",SELEMENT$=""; GOTO 4120
4128 HIKEY$=EC$[2](51,10)+SBASIS$+SELEMENT$
4129 READ (Z(6),KEY=HIKEY$,DOM=4130); REM "set position in file
4130 REM "search
4140 ECWKEY$=KEY(Z(6),END=4700); READ (Z(6)); IF ECWKEY$(1,LEN(HIKEY$))<>HIKEY$ THEN GOTO 4700
4142 REVDATE$=ECWKEY$(LEN(ECWKEY$)-13,6); GOSUB RESET_ECWDATE; REM "get reversed date from current ECW record
4144 IF REVDATE$>START_DATE$ THEN GOTO 4130; REM "if before start get next record
4145 IF REVDATE$<END_DATE$ THEN GOTO 4700; REM "if beyond cut off then end
4150 REM "get PO3... (shipping information)
4151 ONUMB$=ECWKEY$(LEN(ECWKEY$)-7,8); DIM PO3$(500),PO3(2); FIND (Z(11),KEY=ONUMB$+DIM(5),DOM=4152)IOL=0410; GOTO 4153; REM "look in PO3 first
4152 FIND (Z(12),KEY=ONUMB$+DIM(5),DOM=4130)IOL=0410; REM "look in FT5 (not found then skip)
4154 ADDRESS$=UCS(PO3$(46,60)); REM "create combined address line 1/2
4155 REM "get FS1... (order header)
4156 DIM FS1$(350),FS1(13); FIND (Z(2),KEY=ONUMB$,DOM=4157)IOL=0320; GOTO 4158
4157 FIND (Z(7),KEY=ONUMB$,DOM=4130)IOL=0320
4158 IF FS1$(47,1)=" " OR FS1$(47,1)="B" THEN OTYPE$="S" ELSE OTYPE$=FS1$(47,1); REM "set order types
4159 IF EC$[2](61,4)<>DIM(4) AND EC$[2](92,1)="Y" THEN IF PO3$(12,4)<>EC$[2](61,4) THEN GOTO 4130
4160 REM "Passed Primary Element - Ck to see if other search values match
4162 IF OSS_S1$<>"****" THEN IF PO3$(12,4)<>OSS_S1$ THEN GOTO 4130
4164 IF OSS_S2$<>"" THEN IF ADDRESS$ LIKE OSS_S2$ THEN GOTO 4165 ELSE GOTO 4130; REM "if pattern match on address then continue - otherwise skip
4166 IF OSS_S3$<>"" THEN IF UCS(PO3$(106,LEN(OSS_S3$)))<>OSS_S3$ THEN GOTO 4130
4168 IF OSS_S4$<>"" THEN IF UCS(PO3$(122,2))<>OSS_S4$ THEN GOTO 4130; REM "STATE - require exact match
4170 IF OSS_S5$<>"" THEN IF UCS(PO3$(124,LEN(OSS_S5$)))<>OSS_S5$ THEN GOTO 4130; REM "zip
4172 IF OSS_S6$<>"" THEN IF UCS(PO3$(16,30)) LIKE OSS_S6$ THEN GOTO 4173 ELSE GOTO 4130; REM "attention
4174 IF OSS_S7$<>"" THEN IF UCS(PO3$(175,35)) LIKE OSS_S7$ THEN GOTO 4175 ELSE GOTO 4130; REM "mark_for
4176 IF OSS_O1$="" OR LEN(OSS_O1$)=3 THEN GOTO 4180 ELSE IF POS(OTYPE$=OSS_O1$)=0 THEN GOTO 4130; REM "if order types not specified or set to all 3 types then bypass check - otherwise verify type
4180 IF EC$[2](1090,1)="Y" THEN IF MID(FS1$,250,15)<>EC$[2](1,15) THEN GOTO 4130 ! 266516 - ck if order display restricted to current buyer only
4190 REM "qualified order
4191 GOSUB 3700; REM "determine order status
4195 INDEX=INDEX+1,TOTAL_RECORDS=TOTAL_RECORDS+1; ORDER$[INDEX,0]=ONUMB$,ORDER$[INDEX,1]=OSTATUS$,ORDER$[INDEX,2]=ECWKEY$,ORDER$[INDEX,3]=STP(SM4_SHIP_DATE$,3," "); REM "158066"
4198 GOTO 4130; REM "get next order sort record
4300 REM "PRODUCT based search
4301 REM "ECW format:  custcd + sbasis + element + revdate + orderno + lineno
4302 ORDERSFOUND$=""
4309 REM "determine search basis
4310 IF STP(OSS_I1$,2)="" AND STP(OSS_I2$,2)="" AND STP(OSS_I3$,2)="" AND STP(OSS_I4$,2)="" THEN SBASIS$="I2",SELEMENT$=""; GOTO 4320
4311 IF STP(OSS_I1$,2)<>"" THEN SBASIS$="I1",SELEMENT$=OSS_I1$; GOTO 4320
4312 IF STP(OSS_I2$,2)<>"" THEN SBASIS$="I2",SELEMENT$=""; GOTO 4320
4315 SBASIS$="I2",SELEMENT$=""; GOTO 4320
4328 HIKEY$=EC$[2](51,10)+SBASIS$+SELEMENT$
4329 READ (Z(6),KEY=HIKEY$,DOM=4330); REM "set position in file
4330 REM "search
4340 ECWKEY$=KEY(Z(6),END=4700); READ (Z(6)); IF ECWKEY$(1,LEN(HIKEY$))<>HIKEY$ THEN GOTO 4700
4342 REVDATE$=ECWKEY$(LEN(ECWKEY$)-16,6); GOSUB RESET_ECWDATE; REM "get reversed date from current ECW record
4344 IF REVDATE$>START_DATE$ THEN GOTO 4330; REM "if before start get next record
4345 IF REVDATE$<END_DATE$ THEN GOTO 4700; REM "if beyond cut off then end
4350 REM "get FS2... (order line information)
4351 ONUMB$=ECWKEY$(LEN(ECWKEY$)-10,8),OLINE$=ECWKEY$(LEN(ECWKEY$)-2,3); DIM FS2$(250),FS2(29); FIND (Z(15),KEY=ONUMB$+OLINE$,DOM=4352)IOL=0450; GOTO 4353; REM "look in FS2 first
4352 FIND (Z(14),KEY=ONUMB$+OLINE$,DOM=4330)IOL=0450; REM "look in FT4 (not found then skip)
4353 IF FS2$(9,1)=" " THEN IF POS(FS2$(155,1)="ICN")=0 THEN GOTO 4330; REM "only search item lines
4354 ! IF OSS_O1$="" OR LEN(OSS_O1$)=3 THEN GOTO 4360; REM "if order type not specified then ship read; 266516 - always read FS1
4355 REM "get FS1... (order header)
4356 DIM FS1$(350),FS1(13); FIND (Z(2),KEY=ONUMB$,DOM=4357)IOL=0320; GOTO 4358
4357 FIND (Z(7),KEY=ONUMB$,DOM=4330)IOL=0320
4358 IF FS1$(47,1)=" " OR FS1$(47,1)="B" THEN OTYPE$="S" ELSE OTYPE$=FS1$(47,1); REM "set order types
4359 IF EC$[2](1090,1)="Y" THEN IF MID(FS1$,250,15)<>EC$[2](1,15) THEN GOTO 4330 ! 266516 - ck if order display restricted to current buyer only
4360 REM "Passed Primary Element - Ck to see if other search values match
4364 IF OSS_I1$<>"" THEN IF UCS(FS2$(19,10)) LIKE OSS_I1$ THEN GOTO 4365 ELSE GOTO 4330
4366 IF OSS_I2$<>"" THEN IF UCS(FS2$(19,10)) LIKE "*"+OSS_I2$+"*" THEN GOTO 4367 ELSE GOTO 4330 ! SSP169798
4368 IF OSS_I3$<>"" THEN IF UCS(FS2$(50,40)) LIKE OSS_I3$ THEN GOTO 4369 ELSE GOTO 4330
4370 IF OSS_I4$<>"" THEN IF UCS(FS2$(50,40)) LIKE OSS_I4$ THEN GOTO 4371 ELSE GOTO 4330
4376 IF OSS_O1$="" OR LEN(OSS_O1$)=3 THEN GOTO 4380 ELSE IF POS(OTYPE$=OSS_O1$)=0 THEN GOTO 4330; REM "if order types not specified or set to all 3 types then bypass check - otherwise verify type
4380 REM "ck if restricted to specific shipto location
4381 IF EC$[2](61,4)=DIM(4) THEN GOTO 4390 ELSE IF EC$[2](92,1)<>"Y" THEN GOTO 4390
4382 DIM PO3$(500),PO3(2); FIND (Z(11),KEY=ONUMB$+DIM(5),DOM=4383)IOL=0410; GOTO 4385
4383 FIND (Z(12),KEY=ONUMB$+DIM(5),DOM=4330)IOL=0410
4385 IF PO3$(12,4)<>EC$[2](61,4) THEN GOTO 4330
4390 REM "qualified order
4391 IF POS(ONUMB$=ORDERSFOUND$,8)<>0 THEN GOTO 4398; REM "if order already qualified then do not add again
4392 GOSUB 3700; REM "determine order status
4395 INDEX=INDEX+1,TOTAL_RECORDS=TOTAL_RECORDS+1; ORDER$[INDEX,0]=ONUMB$,ORDER$[INDEX,1]=OSTATUS$,ORDER$[INDEX,2]=ECWKEY$(1,LEN(ECWKEY$)-2),ORDER$[INDEX,3]=STP(SM4_SHIP_DATE$,3," "),ORDERSFOUND$=ORDERSFOUND$+ONUMB$; REM "158066
4398 GOTO 4330; REM "get next order sort record
4500 REM "ORDER based search
4501 REM "ECW format:  custcd + sbasis + element + revdate + orderno
4502 DIM OPPARM$(100); FIND (Z(13),KEY=X3$(9,3)+"F/M")OPPARM$; NUMBER_BY_DIVISION$=OPPARM$(8,1); IF NUMBER_BY_DIVISION$<>"Y" AND OSS_O3$<>"" THEN OSS_O3$="00"+OSS_O3$
4509 REM "determine search basis
4510 IF STP(OSS_O1$,2)="" AND STP(OSS_O2$,2)="" AND STP(OSS_O3$,2)="" THEN SBASIS$="O4",SELEMENT$=""; GOTO 4520
4511 IF STP(OSS_O2$,2)<>"" THEN SBASIS$="O2",SELEMENT$=OSS_O2$; GOTO 4520
4515 SBASIS$="O4",SELEMENT$=""; GOTO 4520
4528 HIKEY$=EC$[2](51,10)+SBASIS$+SELEMENT$
4529 READ (Z(6),KEY=HIKEY$,DOM=4530); REM "set position in file
4530 REM "search
4540 ECWKEY$=KEY(Z(6),END=4700); READ (Z(6)); IF ECWKEY$(1,LEN(HIKEY$))<>HIKEY$ THEN GOTO 4700
4542 REVDATE$=ECWKEY$(LEN(ECWKEY$)-13,6); GOSUB RESET_ECWDATE; REM "get reversed date from current ECW record
4544 IF REVDATE$>START_DATE$ THEN GOTO 4530; REM "if before start get next record
4545 IF REVDATE$<END_DATE$ THEN GOTO 4700; REM "if beyond cut off then end
4550 REM "get FS1... (order information)
4551 ONUMB$=ECWKEY$(LEN(ECWKEY$)-7,8)
4553 IF OSS_O3$<>"" THEN IF ONUMB$(1,LEN(OSS_O3$))<>OSS_O3$ THEN GOTO 4530
4554 ! IF OSS_O1$="" OR LEN(OSS_O1$)=3 THEN GOTO 4560 ! 266516 - always read FS1
4556 DIM FS1$(350),FS1(13); FIND (Z(2),KEY=ONUMB$,DOM=4557)IOL=0320; GOTO 4558
4557 FIND (Z(7),KEY=ONUMB$,DOM=4530)IOL=0320
4558 IF FS1$(47,1)=" " OR FS1$(47,1)="B" THEN OTYPE$="S" ELSE OTYPE$=FS1$(47,1); REM "set order types
4559 IF EC$[2](1090,1)="Y" THEN IF MID(FS1$,250,15)<>EC$[2](1,15) THEN GOTO 4530 ! 266516 - ck if order display restricted to current buyer only
4560 REM "Passed Primary Element - Ck to see if other search values match
4576 IF OSS_O1$="" OR LEN(OSS_O1$)=3 THEN GOTO 4580 ELSE IF POS(OTYPE$=OSS_O1$)=0 THEN GOTO 4530; REM "if order types not specified or set to all 3 types then bypass check - otherwise verify type
4580 REM "ck if restricted to specific shipto location
4581 IF EC$[2](61,4)=DIM(4) THEN GOTO 4590 ELSE IF EC$[2](92,1)<>"Y" THEN GOTO 4590
4582 DIM PO3$(500),PO3(2); FIND (Z(11),KEY=ONUMB$+DIM(5),DOM=4583)IOL=0410; GOTO 4585
4583 FIND (Z(12),KEY=ONUMB$+DIM(5),DOM=4530)IOL=0410
4585 IF PO3$(11,5)<>"C"+EC$[2](61,4) THEN GOTO 4530 ! SSP231164, then for C type location only
4590 REM "qualified order
4591 GOSUB 3700; REM "determine order status
4595 INDEX=INDEX+1,TOTAL_RECORDS=TOTAL_RECORDS+1; ORDER$[INDEX,0]=ONUMB$,ORDER$[INDEX,1]=OSTATUS$,ORDER$[INDEX,2]=ECWKEY$(1,LEN(ECWKEY$)-2),ORDER$[INDEX,3]=STP(SM4_SHIP_DATE$,3," "); REM "158066
4598 GOTO 4530; REM "get next order sort record
4700 REM "DONE with search
4710 RETURN 
7000 CHECK_ORDER:REM "get the order header record (tries repeat orders first then open)
7001 REM 'ONUMB$ = ORDER NUMBER PASSED IN
7002 REM "ORDER_TYPE$ = R/W/Sales Order
7003 REM "ORDER_DATE$ = order entry date    DATE_REQUESTED$ - requested ship date
7004 REM "ORDER_DAYS_OLD = number of days old based on oe date
7005 REM "REQUESTED_DAYS_OLD = number of days old based on requested ship date
7006 REM "REPORT$ Y/N - based on e/c parameters
7007 REM "ORDER_LIST$ = List of orders put into array, an order can be in ASC multiple times, we only want to show onece
7008 REM "OSOURCE = FS1/FT3 returned value based on where order was reported from
7009 REPORT$="Y",ORDER_FILE_SOURCE$="FS1"
7013 IF STP(ACTIVE_ORDER_SORT$,2)<>"" THEN GOTO 7016
7015 IF POS(ONUMB$=ORDER_LIST$,8)<>0 THEN REPORT$="N"; GOTO 7090 ELSE ORDER_LIST$=ORDER_LIST$+ONUMB$; REM "Note, this does not prevent is from showing on seperate pages
7018 DIM FS1[13]; FIND (Z[7],KEY=ONUMB$,DOM=7020)IOL=0320; GOTO 7028
7020 FIND (Z[2],KEY=ONUMB$,DOM=7022)IOL=0320; GOTO 7030
7022 REPORT$="N"; GOTO 7090; REM "order number not found
7028 ORDER_FILE_SOURCE$="FT3"
7030 ORDER_TYPE$=FS1$(47,1),ORDER_DATE$=FS1$(16,6),DATE_REQUESTED$=FS1$(55,6)
7031 IF ORDER_TYPE$=" " THEN ORDER_TYPE$="S"; REM "need to evaluate blank types as S based on buyer parms"
7032 IF ORDER_TYPES_TO_REPORT$>"" THEN IF POS(ORDER_TYPE$=ORDER_TYPES_TO_REPORT$)=0 THEN REPORT$="N"; GOTO 7090; REM "Check against order types requested by options if any were requested.
7033 CALL "EC3DAT",ERR=7034,X3$,11,"",ORDER_DATE$,ORDER_DAYS_OLD$; ORDER_DAYS_OLD=NUM(ORDER_DAYS_OLD$)
7034 IF STP(DATE_REQUESTED$,3," ")="" THEN REQUESTED_DAYS_OLD=0 ELSE CALL "EC3DAT",ERR=7035,X3$,11,"",DATE_REQUESTED$,REQUESTED_DAYS_OLD$; REQUESTED_DAYS_OLD=NUM(REQUESTED_DAYS_OLD$)
7050 REM 'COMPARE ON REPORTING PARAMETERS
7052 IF NUM(ECPARMS$(125,3))<>0 THEN IF (-1)*ORDER_DAYS_OLD>NUM(ECPARMS$(125,3)) THEN REPORT$="N"; GOTO 7090; REM "ck if order to be reported based on EC parameters for number of days back to report order status
7053 IF EC$[2](1090,1)="Y" THEN IF MID(FS1$,250,15)<>EC$[2](1,15) THEN REPORT$="N"; GOTO 7090 ! 266516 - ck if order display restricted to current buyer only
7054 IF POS(ORDER_TYPE$=EC$[2](97,4))=0 THEN REPORT$="N"; GOTO 7090; REM "ck if order type matches acceptable types on buyer parameters"
7055 REM 'CK IF RESTRICTED TO BUYER LOCATION
7056 IF EC$[2](92,1)<>"Y" THEN GOTO 7060 ELSE IF ORDER_FILE_SOURCE$="FS1" THEN LOC_CHAN=Z[11] ELSE LOC_CHAN=Z[12]
7057 REPORT$="N"; READ (LOC_CHAN,KEY=ONUMB$,DOM=7058)
7058 CKLOC$=KEY(LOC_CHAN,END=7060); READ (LOC_CHAN,KEY=CKLOC$)CKLOCREC$; IF CKLOC$(1,LEN(ONUMB$))<>ONUMB$ THEN GOTO 7060 ELSE IF CKLOCREC$(11,5)="C"+EC$[2](61,4) THEN REPORT$="Y"; GOTO 7060 ELSE GOTO 7058 ! SSP231164, check for C type only when doing location check for restrict order status to buyer's location
7060 IF REPORT$="N" THEN GOTO 7090; REM "ck results of location search - if none found then exit before further checks"
7090 RETURN 
7500 REVERSE_DATES:REM "convert start/stop dates to reversed format ** NOT USED CURRENTLY **
7501 REM "incoming dates must be in tfmmdd format
7502 ORIG_START_DATE$=START_DATE$,ORIG_END_DATE$=END_DATE$
7504 TEMPSTRING$=""; FOR RI=0 TO LEN(START_DATE$)-1; TEMPSTRING$=TEMPSTRING$+FNA$(START_DATE$(RI*1+1,1)); NEXT RI; START_DATE$=TEMPSTRING$
7506 TEMPSTRING$=""; FOR RI=0 TO LEN(END_DATE$)-1; TEMPSTRING$=TEMPSTRING$+FNA$(END_DATE$(RI*1+1,1)); NEXT RI; END_DATE$=TEMPSTRING$
7508 RETURN 
7520 RESET_ECWDATE:REM "set rev date to readable date
7524 TEMPSTRING$=""; FOR RI=0 TO LEN(REVDATE$)-1; TEMPSTRING$=TEMPSTRING$+FNA$(REVDATE$(RI*1+1,1)); NEXT RI; REVDATE$=TEMPSTRING$
7528 RETURN 
7550 REM "Send LINE$ to EC3BYB for generic fields processing
7560 CALL "EC3BYB",ERR=7561,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,LINE$,BYBINFO${ALL},BYBOPTIONS$,100 ! 227154
7595 RETURN 
7600 REM "get description of order type"
7605 ON POS(FS1$(47,1)="RW") GOTO 7610,7611
7610 ORDER_TYPE$="Reorder"; GOTO 7620
7611 ORDER_TYPE$="Whse Release"; GOTO 7620
7640 RETURN 
7650 REM "convert STDDATE$ TO TFDATE$
7651 REM "STDDATE$ in YYMMDD format
7655 TFDATE$=""
7660 IF STP(STDDATE$,3," ")="" THEN GOTO 7690
7662 IF LEN(STDDATE$)<6 THEN GOTO 7690 ELSE TMPDATE$=STDDATE$(1,2)
7664 IF TMPDATE$="  " THEN TMPDATE$=""
7666 IF TMPDATE$<"50" THEN TMPDATE$="20"+TMPDATE$ ELSE TMPDATE$="19"+TMPDATE$
7668 TFDATE$=CHR(NUM(TMPDATE$(1,3),ERR=7669)-125)+TMPDATE$(4,1)+STDDATE$(3,2)+STDDATE$(5,2)
7690 RETURN 
8000 REM "Given customer number and order number, read FS8 to get key to read FS6 to get order date (34,6), and calculate the correct rev_date$ for this order to read into FTI with
8005 READ (Z[8],KEY=EC$[2](51,10)+POSITION_ORDER$,DOM=8006)
8010 DIM KEY8$(30); KEY8$=KEY(Z[8],END=8011)
8011 IF KEY8$(1,18)<>EC$[2](51,10)+POSITION_ORDER$ THEN GOTO 8045
8015 READ (Z[5],KEY=KEY8$(1,10)+KEY8$(19,1)+KEY8$(20,10)+KEY8$(11,8)+KEY8$(30,1),DOM=8045)TMP8$
8030 REV_DATE$=FNR$(TMP8$(34,6))
8045 RETURN 
8050 REM "Given customer number and order number, read FS8 to get key to read FS6 to get customer P/O, type, and form code date to read into ASC with
8055 READ (Z[8],KEY=EC$[2](51,10)+POSITION_ORDER$,DOM=8056)
8060 DIM KEY8$(30); KEY8$=KEY(Z[8],END=8011)
8061 IF KEY8$(1,18)<>EC$[2](51,10)+POSITION_ORDER$ THEN GOTO 8095
8065 READ (Z[5],KEY=KEY8$(1,10)+KEY8$(19,1)+KEY8$(20,10)+KEY8$(11,8)+KEY8$(30,1),DOM=8095)TMP8$
8075 ORDER_POSITION_KEY$=TMP8$(54,15),REST_OF_KEY$=TMP8$(11,19); IF DIRECTION$="B" THEN REST_OF_KEY$=REST_OF_KEY$+$FF$
8095 RETURN 
8200 GET_EDW_STATUS:! Returns status only if that is the same status on ALL EDW records for given order
8205 EDW_STATUS$=""; EDW_STATUS_SET=0; IF NUL(EDW_STAT_LIST$) THEN GOTO 8270
8210 READ (Z[20],KEY=FS1$(118,8),KNO=0,DOM=*NEXT)
8215 DIM EDW$(200),EDW[0]; EDWK$=KEY(Z[20],END=8270); READ (Z[20],KEY=EDWK$)IOL=IOL_EDW
8220 IF MID(EDWK$,1,8)<>FS1$(118,8) THEN GOTO 8270
8235 IF POS(STP(MID(EDW$,78,10))=EDW_STAT_LIST$)=0 THEN EDW_STATUS$=""; GOTO 8270 ! Encountered a status not in requested list
8236 IF EDW_STATUS$<>STP(MID(EDW$,78,10)) THEN IF NOT(EDW_STATUS_SET) THEN EDW_STATUS$=STP(MID(EDW$,78,10)),EDW_STATUS_SET=1 ELSE EDW_STATUS$=""; GOTO 8270
8265 GOTO 8215
8295 RETURN 
8299 ! 
8300 GET_ORDER_BUYER:! 272270
8310 DIM ECA$(1540); IF NOT(NUL(MID(FS1$,250,15))) THEN FIND (Z[10],KEY=FS1$(250,15),DOM=*NEXT)ECA$
8315 RETURN 
8319 ! 
8910 DEF FND$(Z9$)=Z9$(1*2+1,2)+"/"+Z9$(7-1*2,2)+"/"+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
8911 DEF FNA$(Z9$)=CHR(127-DEC(Z9$))
8915 DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
8920 DEF FNR$(X$)=STR(10000000-NUM(STR(ASC(X$(1,1)))+X$(2)):"0000000")
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$); REM "131928
9090 GOTO 9900
9900 REM "End
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9950 EXIT 
9999 END 
56002 REM "201193-Questions about security of Boars Head EC Promo site.       
56004 REM "212160-Webec is down.  Cannot use 64 character session id          
56006 REM "227154-Modify EC3BYB to support a condition tag : ?tf?if?[expr]    
56008 REM "231164-Order showing up in Order Search online but not in Order
56009 REM "266516-Order status display, only show orders placed by buyer
