0010 REM "EC Customer Invoicing Gateway Interface <EC3CIG>"
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 08/14/19 - 17.806111 - crg - SSP# 307200
0037 REM "307200-Ability in EC3CIG to control RP1 filenames                  
0040 REM "Copyright 2019 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0100 SETERR 9000
0110 X0$="EC3CIG",X1$="EC Customer Invoicing Gateway Interface"
0120 EOL$=$0D0A$; EOL$=ATH(STP(EC_PARM$(57,8),1)) ! SSP234945
0127 HTML_TEXT$="Content-type: text/html"
0140 DIM MESS_INFO$[20]
0150 REM "EC$[1]=ESB session record, EC$[2]=client number        , ec$[3]=message from server to called program, EC$[4]=formatted date, EC$[5]=formatted time EC$[6]=ECA2$ available web catalogs (concatonated string) EC$[7]=customer webec parms (ECS)  EC$[8]=image path (customer if set otherwise from ec_parm) EC$[9]=ST_LIST sort code record EC$[10]=reporting whse list EC$[11]=(1,4)warehouse code to use for o/e FM2RT0  (5,4)=would contain the 'other'warehouse for availability checking o/e messaging <not passed to FM2RT0, EC$[12]=email params,see 8000s [13] UNUSED ,[14]=ECY$, [15]=inventory system parameters [16]=Credict Card code/desc list [17]=active webcode [18-20] unused
0310 IOLIST SM4$,SM4[0],SM4[1],SM4[2],SM4[3],SM4[4],SM4[5],SM4[6],SM4[7],SM4[8],SM4[9],SM4[10],SM4[11],SM4[12],SM4[13],SM4[14],SM4[15] ! WO244750, expand SM4
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))],BLGRBNKS$(100)
0510 Z$="01O SM4... 02O SM5... 03O SM6... 04O FS1... 05O PO1...  06O IL1...  07O JT0...  13O ZZPARM"
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0540 %HAS_IMAGE_LIB=0; IF FN%HAS_MODULE("IL") THEN FIND (Z[13],KEY=%C$+"I/L",DOM=*NEXT); %HAS_IMAGE_LIB=1 ! SSP250683
0900 PRINT_DOC=0
1000 REM "Process DATA array
1005 DIM RP1$(242+60); VENDOR_INV_1ST_TIME=1,PO_LINE_1ST_TIME=1,RP1_FILENAME_TAG$="EC3CIG" ! ssp 257952,307200
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1020 T_IN=POS("."=TAG$); IF T_IN THEN TAG_PARM$=MID(TAG$,T_IN+1),TAG$=MID(TAG$,1,T_IN-1) ELSE TAG_PARM$=""
1025 SWITCH TAG$ ! 1185 end switch
1030 CASE "print_doc"; PRINT_DOC=1; BREAK
1035 CASE "template"; TEMPLATE$=VALUE$; BREAK
1040 CASE "data_source"; RP1$(1,3)=VALUE$; BREAK
1042 CASE "cig_version"; RP1$(4,3)=VALUE$; BREAK
1044 CASE "tf_po_num"; RP1$(7,9)=SUB(VALUE$,"-",""); IF LEN(STP(RP1$(7,9),1))=7 THEN RP1$(7,9)="00"+STP(RP1$(7,9),1) END_IF ; BREAK ! SSP280095
1046 CASE "po_line_num"; RP1$(16,3)=VALUE$; BREAK
1048 CASE "ship_to_seq"; RP1$(19,1)=VALUE$; BREAK
1050 CASE "ship_to_loc"; RP1$(20,5)=VALUE$; BREAK
1052 CASE "vendor_inv_num"; RP1$(25,10)=VALUE$; BREAK
1054 CASE "vendor_inv_date"; GOSUB GET_DATE; RP1$(35,8)=DATE$; BREAK
1056 CASE "receipt_date"; RP1$(43,8)=VALUE$; BREAK
1058 CASE "fiscal_year"; RP1$(51,4)=VALUE$; BREAK
1060 CASE "acct_period"; RP1$(55,2)=VALUE$; BREAK
1062 CASE "factory_job_num"; RP1$(57,12)=VALUE$; BREAK
1064 CASE "factory_job_date"; GOSUB GET_DATE; RP1$(69,8)=DATE$; BREAK ! 209310, SSP255977
1066 CASE "ending_num"; RP1$(77,9)=VALUE$; BREAK
1068 CASE "complete"; RP1$(86,1)=UCS(VALUE$); BREAK
1070 CASE "um"; RP1$(87,4)=VALUE$; BREAK
1072 CASE "qty_per_um"; RP1$(91,7)=VALUE$; BREAK
1074 CASE "quantity"; RP1$(98,7)=VALUE$; BREAK
1076 CASE "backordered_qty"; RP1$(105,7)=VALUE$; BREAK
1078 CASE "carton_pack"; RP1$(112,7)=VALUE$; BREAK
1080 CASE "frt_amt"; RP1$(119,8)=FN_FIX_NUM_STRING$(VALUE$,TAG_PARM$); BREAK
1082 CASE "unit_cost"; RP1$(127,10)=FN_FIX_NUM_STRING$(VALUE$,TAG_PARM$); BREAK
1084 CASE "extended_cost"; RP1$(137,10)=FN_FIX_NUM_STRING$(VALUE$,TAG_PARM$); BREAK
1086 CASE "customer"; RP1$(147,10)=VALUE$; BREAK
1088 CASE "tracking_num"; RP1$(241,60)=VALUE$; BREAK ! SSP 257952
1090 CASE "carrier_id"; RP1$(177,6)=VALUE$; BREAK
1092 CASE "carrier_name"; RP1$(183,12)=VALUE$; BREAK
1094 CASE "pickup_num"; RP1$(195,16)=VALUE$; BREAK
1096 CASE "zip_code"; RP1$(211,9)=VALUE$; BREAK
1098 CASE "zone"; RP1$(220,3)=VALUE$; BREAK
1100 CASE "ship_date"; GOSUB GET_DATE; RP1$(223,8)=DATE$,RP1$(231,4)=TIME$; BREAK
1102 CASE "ship_time"; RP1$(231,4)=VALUE$; BREAK
1104 CASE "est_arrival"; RP1$(235,6)=VALUE$; BREAK
1106 CASE "xml_ship_datetime"; GOSUB XML_DATETIME; BREAK
1108 CASE "new_vendor_inv"; IF VALUE$="Y" THEN IF VENDOR_INV_1ST_TIME THEN VENDOR_INV_1ST_TIME=0 ELSE GOSUB WRITE_RP1; RP1$(1)=""; JOB_NOTE=0,JOB_NOTE$=""; PO_LINE_1ST_TIME=1 END_IF END_IF ; BREAK
1110 CASE "new_po_line"; IF VALUE$="Y" THEN IF PO_LINE_1ST_TIME THEN PO_LINE_1ST_TIME=0 ELSE GOSUB WRITE_RP1; GOSUB CLEAR_PO_LINE; END_IF END_IF ; BREAK
1112 CASE "julian_rec_date"; GOSUB GET_JULIAN_DATE; RP1$(43,8)=DATE$; BREAK
1114 CASE "julian_ship_date"; GOSUB GET_JULIAN_DATE; RP1$(223,8)=DATE$; BREAK
1116 CASE "asn_only"; IF VALUE$="Y" THEN ASN_ONLY=1 END_IF ; BREAK ! 307200, added missing BREAK
1118 CASE "job_note"; IF NOT(NUL(VALUE$)) THEN JOB_NOTE=FN_SET_JOB_NOTE(VALUE$,TAG_PARM$) END_IF ; BREAK ! 260047
1124 CASE "rp1_filename_tag"; IF NOT(NUL(STP(VALUE$,3,*"./\"))) THEN RP1_FILENAME_TAG$="EC3CIG_"+STP(VALUE$,3,*"./\") END_IF ; BREAK ! 307200
1185 END SWITCH ! 1050
1190 NEXT I
1195 DIM BYBINFO$[5]; BYBINFO$[1]=PGN,BYBINFO$[2]="166471.182560.20050509",BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1200 REM ' extract issue
1205 IF PRINT_DOC=0 THEN {! 1495 }
1207 GOSUB EMAIL_NOTIFY ! SSP249883, add tags to trigger email notification
1210 GOSUB WRITE_RP1
1495  }
1505 IF PRINT_DOC=0 THEN CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1510 IF PRINT_DOC THEN READ DATA LINE$,ERR=2950 ELSE IF ISSDET=0 THEN READ (100,END=2950)LINE$; GOSUB BYB_PROCESSING
1515 CHKTAG=1
1520 WHILE CHKTAG ! 2800 wend
1522 P1=MSK(LINE$,"\?tf\?[^?]*\?"); IF P1=0 THEN CHKTAG=0; BREAK
1530 TAG$=LINE$(P1,MSL); LINE1$=LINE$(1,P1-1),LINE2$=MID(LINE$,P1+MSL)
1600 SWITCH TAG$ ! 2790 end switch
1610 CASE "?tf?status?"
1615 IF PRINT_DOC THEN TAGDESC$="Status code, 0=ok"; GOSUB 5000 ELSE LINE$=LINE1$+STR(STATUS)+LINE2$
1619 BREAK
1620 CASE "?tf?status_msg?"
1625 IF PRINT_DOC THEN TAGDESC$="Status message relating to status code"; GOSUB 5000 ELSE LINE$=LINE1$+STR(STATUS_MSG$)+LINE2$
1629 BREAK
2790 END SWITCH ! 1600
2800 WEND ! 1520
2805 DATA "?tf?status?","?tf?status_msg?"
2810 PRINT (OUTPUT)LINE$,EOL$, ! SSP 234945 IF LINE$<>"" THEN PRINT (OUTPUT)LINE$
2900 GOTO 1510; REM next read
2990 GOTO 9900
5000 REM print tag desc html
5010 LINE$=TAG$+" "+TAGDESC$
5090 RETURN 
5100 ADD_MSG_TO_LOG:! Add message to log file
5110 MOUT$="SESSION ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|WORKSHEET|"+ECD$(1,10)+"|LINE|"+ECE$(25,3)+"|MESSAGE NO|"+STR(MESSAGE_NO:"00000")+"|MESSAGE|"+MESSAGE$+"|"
5135 MX=FN%_LOG_MESSAGE("MESG",MOUT$)
5145 RETURN 
5149 ! 
6000 WRITE_RP1:! update the current RP1 record
6005 IF JOB_NOTE THEN GOSUB WRITE_JT0
6010 IF ASN_ONLY THEN GOSUB WRITE_SM4; ASN_ONLY=0; RETURN ! if ASN then just update SM4 and we're done
6020 STATUS=0,STATUS_MSG$="OK"
6025 IF NUL(RP1$(1,3)) THEN RP1$(1,3)="WWW"
6030 IF NUL(RP1$(4,3)) THEN RP1$(4,3)="101" ! SSP 257952
6035 IF NUL(RP1$(7,9)) THEN STATUS=1,STATUS_MSG$="No TopForm P/O Number"
6040 IF NUL(RP1$(25,10)) THEN STATUS=2,STATUS_MSG$="No Vendor Invoice Number"
6055 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3CIG|UPDATE RP1|PO_NUM|"+FN%ZZDISP$(RP1$(7,9),"P/O")+"|PO_LINE|"+RP1$(16,3)+"|VENDOR INV NUMBER|"+RP1$(25,10)+"|QUANTITY|"+RP1$(98,7)+"|UNIT_COST|"+RP1$(127,10)+"|EXTENDED_COST|"+RP1$(137,10)+"|")
6057 IF %HAS_IMAGE_LIB THEN GOSUB IL_INVOICE ! SSP250683
6060 ! CALL "SM2UDA",ERR=*NEXT,X3$,X4$,"","[RP1]"+OP$+RP1$; GOTO AFTER_ERROR_LOGIC
6062 CALL "UPDRP1;ADD_RP1",ERR=*NEXT,X3$,X4$,RP1$,RP1_FILENAME_TAG$; GOTO AFTER_ERROR_LOGIC ! WO 270121, 307200
6065 STATUS=ERR,STATUS_MSG$=MSG(STATUS) ! Error occurred
6070 AFTER_ERROR_LOGIC:
6095 RETURN 
6099 ! *********************************************************
6100 CLEAR_PO_LINE:! clear the line info for RP1 to prepare for next data
6110 RP1$(16,9)="",RP1$(77)=""
6145 RETURN 
6149 ! *********************************************************
6200 WRITE_SM4:! Create SM4 record from RP1 data and write out
6205 DIM SM4$(700),SM4[15] ! WO244750, expand SM4
6208 DIM FS1$(1000); FIND (Z[4],KEY=RP1$(7,8),DOM=*NEXT)FS1$
6209 GOSUB CONVERT_RP1_DATES
6210 SM4$(1,9)=RP1$(7,9),SM4$(10,3)=RP1$(16,3),SM4$(13,1)=RP1$(19,1),SM4$(124,3)="001" ! po_num, po line, loc code, box number
6212 SM4$(15,6)=SHIP_DATE$,SM4$(21,4)=RP1$(231,4),SM4$(25,6)=EST_ARRIVAL$ ! ship date, ship time, est arrival
6214 SM4$(31,6)=RP1$(177,6),SM4$(37,12)=RP1$(183,12),SM4$(49,20)=DIM(20),SM4$(69,16)=RP1$(195,16) ! carrier id, carrier name, track no, pickup no;!SSP 257952
6215 SM4$(383,60)=MID(RP1$,241,60) ! SSP 257952
6216 SM4$(85,9)=RP1$(211,9),SM4$(94,3)=RP1$(220,3),SM4$(97,4)="NNYN" ! zip, zone, flags
6218 SM4$(109,3)="WWW",SM4$(147,9)=RP1$(77,9),SM4$(174,4)=RP1$(87,4) ! pack id set to WWW, ending num, um 
6220 SM4$(294,12)=RP1$(57,12),SM4$(306,6)=RP1$(69,8) ! job number, job date
6225 SM4[0]=NUM(RP1$(98,7),ERR=*NEXT) ! qty
6226 SM4[8]=NUM(RP1$(97,7),ERR=*NEXT) ! units per u/m
6228 SM4[11]=NUM(RP1$(105,7),ERR=*NEXT) ! backorder qty
6230 SM4[12]=NUM(RP1$(112,7),ERR=*NEXT) ! carton packt
6254 CALL "SM2SM4",ERR=*NEXT,X3$,X4$,SM4$,SM4{ALL}
6255 WRITE (Z[1],KEY=SM4$(1,13)+SM4$(124,3),DOM=*NEXT)IOL=0310; GOSUB 7900; GOTO SM4_WRITTEN
6260 SM4$(124,3)=FN%INCR$(SM4$(124,3)); GOTO 6255 ! 291110 !STR(NUM(SM4$(124,3))+1:"000")
6265 SM4_WRITTEN:
6285 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3CIG|UPDATE SM4|PO_NUM|"+FN%ZZDISP$(SM4$(1,9),"P/O")+"|PO_LINE|"+SM4$(10,3)+"|BOX NUMBER|"+SM4$(124,3)+"|CARRIER|"+SM4$(31,6)+"|TRACKING NUMBER|"+MID(SM4$,383,60)+"|SHIP DATE|"+FN%FMT_TFDATE$(SM4$(15,6),"MM/DD/YYYY")+"|") ! SSP 257952
6295 RETURN 
6299 ! *****************************************************
6300 CONVERT_RP1_DATES:! Convert 8 character rp1 dates inplace into ship_date$ and est_arrival$
6305 SHIP_DATE$=X3$(15,6),EST_ARRIVAL$=DIM(6)
6310 Q$=RP1$(223,8); IF NOT(NUL(Q$)) THEN SHIP_DATE$=CHR(NUM(Q$(1,3),ERR=*NEXT)-125)+Q$(4,1)+Q$(5,2)+Q$(7,2)
6320 Q$=RP1$(235,6); IF NOT(NUL(Q$)) THEN GOSUB YYMMDD_DATE; EST_ARRIVAL$=D0$ ! SSP279522, was RP1$(235,8), NEED CONVERSION FOR YYMMDD
6395 RETURN 
6399 ! ***********************************
7100 GET_DATE:! Take date in YYYY-MM-DD and maybe time in HH:MM:SS and convert to match RP1 file requirements
7105 D_VALUE$=VALUE$,DATE$="",TIME$=""
7110 IF STP(VALUE$,3)="" THEN GOTO *RETURN
7115 P=POS("T"=VALUE$); IF P>0 THEN D_VALUE$=VALUE$(1,P-1),T_VALUE$=VALUE$(P+1); GOSUB GET_TIME
7120 IF LEN(D_VALUE$)>10 THEN DATE$=""; GOTO *RETURN
7125 P=POS("-"=D_VALUE$); IF P=0 THEN DATE$=PAD(D_VALUE$,8); GOTO *RETURN ELSE DATE$=D_VALUE$(1,P-1),D_VALUE$=D_VALUE$(P+1) ! Year
7130 P=POS("-"=D_VALUE$); IF P=0 THEN DATE$=PAD(DATE$+D_VALUE$,8); GOTO *RETURN ELSE DATE$=DATE$+STR(NUM(D_VALUE$(1,P-1),ERR=*RETURN):"00"),D_VALUE$=D_VALUE$(P+1) ! Month
7135 DATE$=DATE$+STR(NUM(D_VALUE$,ERR=*RETURN):"00") ! Day
7140 RETURN 
7145 ! 
7150 GET_TIME:
7155 TIME$=""
7160 IF POS("Z"=T_VALUE$) THEN ZULU=1 ELSE ZULU=0
7165 IF LEN(T_VALUE$)>8 THEN T_VALUE$=T_VALUE$(1,8)
7170 IF NOT(ZULU) THEN {
7172 TIME$=T_VALUE$(1,2)+T_VALUE$(4,2)
7175  } ELSE {
7177 HRS=NUM(T_VALUE$(1,2)); HRS+=TCB(44)/3600+TCB(45)
7180 TIME$=STR(HRS:"00")+T_VALUE$(4,2)
7185  }
7190 RETURN 
7195 ! 
7199 ! *****************************************************
7200 GET_JULIAN_DATE:! take in julian based date yyyddd where yyy is # years since 1900, ddd is current day of the year, return DATE$
7205 D_VALUE$=VALUE$,DATE$="",TIME$=""
7210 IF LEN(STP(D_VALUE$))<4 THEN RETURN ! too short to have a valid date
7214 ! Convert year to num, add 1900 and get julian # (1970 based) for Jan 1, add julian date (-1 to adjust for jan 1) and then convert using DTE. 
7215 DATE$=DTE(JUL(NUM(MID(D_VALUE$,1,3),ERR=*RETURN)+1900,1,1)+NUM(MID(D_VALUE$,4),ERR=*RETURN)-1:"%Y%Mz%Dz")
7245 RETURN 
7249 ! ************************************************
7500 XML_DATETIME:! process xml datetime field into the Date and Time fields
7504 ! Format must be: [-]YYYY-MM-DDTHH:MM:SS[.SS][Z][+-HH:MM]
7505 TPOS=POS("T"=VALUE$); IF TPOS=0 THEN RETURN ! invalid format
7510 TDATE$=MID(VALUE$,1,TPOS-1),TTIME$=MID(VALUE$,TPOS+1)
7515 IF LEN(TDATE$)<10 OR LEN(TDATE$)>12 THEN RETURN ELSE IF LEN(TDATE$)=11 THEN TDATE$=TDATE$(2)
7520 RP1$(223,8)=TDATE$(1,4)+TDATE$(6,2)+TDATE$(9,2) ! put into YYYYMMDD
7550 IF POS("Z"=TTIME$) THEN ZULU=1 ELSE ZULU=0
7555 IF LEN(TTIME$)>8 THEN TTIME$=TTIME$(1,8)
7560 IF NOT(ZULU) THEN {
7565 RP1$(231,4)=TTIME$(1,2)+TTIME$(4,2) ! If not Z on end then is actual time
7570  } ELSE {
7575 HRS=NUM(TTIME$(1,2)); HRS+=TCB(44)/3600+TCB(45) ! adjust for zulu, tcb(44)=#secs diff, tcb(45)=1 if daylight savings
7580 RP1$(231,4)=STR(HRS:"00")+TTIME$(4,2)
7585  }
7595 RETURN 
7599 ! *******************************************************
7600 YYMMDD_DATE:! Q$ in YYMMDD format SSP279522
7605 D0$=""
7610 IF STP(Q$,3," ")="" THEN GOTO *RETURN
7625 IF LEN(Q$)<6 THEN GOTO *RETURN ELSE D1$=Q$(1,2)
7630 IF D1$="  " THEN D1$="00"
7635 IF D1$<"50" THEN D1$="20"+D1$ ELSE D1$="19"+D1$
7640 D0$=CHR(NUM(D1$(1,3),ERR=*NEXT)-125)+D1$(4,1)+Q$(3,2)+Q$(5,2)
7645 RETURN 
7649 ! 
7900 REM "Write SM5 and SM6 for SM4$ record and FS1$ is FS1
7905 WRITE (Z[2],KEY=SM4$(15,6)+SM4$(1,13)+SM4$(124,3))
7910 WRITE (Z[3],KEY=FS1$(6,10)+SM4$(14,6)+SM4$(1,13)+SM4$(124,3))
7945 RETURN 
8000 REM "take Q$, try to figure out date and return in Q$
8001 REM "assume MM?DD?YY(YY) format where we don't care about ?'s. if only YY then pivot on 60
8004 IF LEN(Q$)=7 AND Q$(2,1)="/" THEN Q$="0"+Q$; REM "135234
8005 IF LEN(Q$)<6 THEN GOTO 8045 ELSE IF LEN(Q$)>=8 THEN Q$=Q$(1,2)+Q$(4,2)+Q$(7); IF LEN(Q$)>8 THEN Q$=Q$(1,8)
8009 REM "NOW in MMDDYY.. format
8010 IF LEN(Q$(5))>2 THEN YY$=Q$(5) ELSE IF Q$(5)<"60" THEN YY$="20"+Q$(5) ELSE YY$="19"+Q$(5)
8015 TMP$=Q$,Q$=DIM(6),Q$=CHR(NUM(YY$(1,3),ERR=8016)-125,ERR=8016)+YY$(4,1)+TMP$(1,4); REM "135884
8045 RETURN 
8150 BYB_PROCESSING:! Send LINE$ to EC3BYB for generic fields processing
8160 CALL "EC3BYB",ERR=8161,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,LINE$,BYBINFO${ALL},BYBOPTIONS$
8195 RETURN 
8200 FN_FIX_NUM_STRING:
8201 DEF FN_FIX_NUM_STRING$(LOCAL IN_NUMBER$,DECIMALS$) ! we will get a number in in_number$, and optional decimals$. If decimals$ is null then no_action, else decimals$ is assumed to be # of implied decimals, so insert decimal in correct place
8205 FIXED_NUMBER$=IN_NUMBER$
8210 IF NUL(DECIMALS$) THEN GOTO FFNS_DONE ELSE DECIMALS=NUM(DECIMALS$,ERR=FFNS_DONE); IF DECIMALS=0 THEN GOTO FFNS_DONE ! 202164
8215 IF DECIMALS>LEN(FIXED_NUMBER$) THEN FIXED_NUMBER$=PAD(FIXED_NUMBER$,DECIMALS,0,"0")
8220 FIXED_NUMBER$=MID(FIXED_NUMBER$,1,LEN(FIXED_NUMBER$)-DECIMALS)+"."+MID(FIXED_NUMBER$,-DECIMALS)
8240 FFNS_DONE:
8245 RETURN FIXED_NUMBER$
8248 END DEF
8249 ! **************************************************
8250 FN_SET_JOB_NOTE:! 260047
8251 DEF FN_SET_JOB_NOTE(LOCAL IN_VAL$, LOCAL IN_PARM$) ! Append job note to existing job note string, separate using newline char $0A$
8254 JOB_NOTE$+=STP(IN_VAL$,2)+$0A$
8258 RETURN 1
8259 END DEF
8260 WRITE_JT0:! create new JT0 record for current purchase order, make sure no duplication
8265 NOTE_REF$=PAD(RP1$(7,9),9),REF_TYPE$="P",INVOLVES$="V",NOTE_DATA$=JOB_NOTE$
8268 IF NOT(JOB_NOTE) OR NUL(NOTE_REF$) THEN GOTO *RETURN
8270 IF POS(NOTE_REF$=JOB_NOTE_PO_NUMS$,9)=0 THEN JOB_NOTE_PO_NUMS$+=NOTE_REF$ ELSE GOTO *RETURN ! If PO already in list then just return, avoid duplicate JT0 record
8272 NEXT_JT0: TMP_JOB_NOTE$=MID(NOTE_DATA$,1,1600),NOTE_DATA$=MID(NOTE_DATA$,1601); IF NUL(TMP_JOB_NOTE$) THEN GOTO DONE_JT0
8275 NOTE_KEY$=""; CALL "ZZGFUN;ADD_NOTE",ERR=*NEXT,Z[7],NOTE_KEY$,REF_TYPE$,NOTE_REF$,"","",INVOLVES$,TMP_JOB_NOTE$
8280 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3CIG|UPDATE JT0|VENDOR INV NUMBER|"+RP1$(25,10)+"|PO_NUM|"+NOTE_REF$+"|NOTE_KEY|"+NOTE_KEY$+"|")
8285 GOTO NEXT_JT0
8290 DONE_JT0:
8295 RETURN 
8299 ! *************************************************
8300 EMAIL_NOTIFY:! SSP249883, if action code present for any buyer then add tags that will trigger email notification containing the request file data.
8310 IF ASN_ONLY THEN EMAIL_ACTION_CODE$="T" ELSE EMAIL_ACTION_CODE$="V"
8315 BUYER_EMAIL_ACTIONS$=EC$[2](256,10)+EC$[2](266,10)+EC$[2](460,10)+EC$[2](470,10)
8320 IF POS(EMAIL_ACTION_CODE$=BUYER_EMAIL_ACTIONS$)=0 THEN RETURN 
8325 GOSUB GET_VENDOR_CODE
8330 PO$=FN%ZZDISP$(RP1$(7,9),"P/O")
8335 IF EMAIL_ACTION_CODE$="T" THEN EMAIL_SUBJECT$="ASN "+STP(RP1$(157,20),1)+" received from vendor "+VENDOR_CODE$+" for PO "+PO$ ELSE IF EMAIL_ACTION_CODE$="V" THEN EMAIL_SUBJECT$="INV "+STP(RP1$(25,10),1)+" received from vendor "+VENDOR_CODE$+" for PO "+PO$
8355 NUM_ENTRIES+=1; DATA$[NUM_ENTRIES,0]="email_action_code",DATA$[NUM_ENTRIES,1]=EMAIL_ACTION_CODE$
8360 NUM_ENTRIES+=1; DATA$[NUM_ENTRIES,0]="email_subject",DATA$[NUM_ENTRIES,1]=EMAIL_SUBJECT$
8385 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3CIG|EMAIL NOTIFY|PO_NUM|"+PO$+"|ACTION CODE|"+EMAIL_ACTION_CODE$+"|SUBJECT|"+EMAIL_SUBJECT$+"|")
8390 RETURN 
8395 ! 
8400 GET_VENDOR_CODE:! SSP249883, need vendor code for email subject
8410 IF NUL(RP1$(7,9)) THEN VENDOR_CODE$="NOT FOUND"; RETURN 
8415 DIM PO1$(383); FIND (Z[5],KEY=RP1$(7,9),DOM=*NEXT)PO1$(1); GOTO FOUND_PO1
8420 VENDOR_CODE$="NOT FOUND"; RETURN 
8425 FOUND_PO1:
8430 VENDOR_CODE$=FN%ZZDISP$(PO1$(7,10),"A/P"),VENDOR_CODE_UF$=PO1$(7,10)
8445 RETURN 
8449 ! 
8500 IL_INVOICE:! SSP250683
8510 IF NOT(%IL_CODES) THEN PERFORM "ILGFUN;BUILD_DOC_LIST"
8515 FIND (%IL_CODES,KEY="01",DOM=*RETURN)IL0_CODE$,IL0_DESC$,IL0_DIR$,IL0_FMT$,IL0_SCAN$,IL0_ONLY_SAVE_LAST$,IL0_ACCESS$,IL0_ADD_FMT_CODE$
8520 IF STP(IL0_DIR$,2)="" THEN RETURN 
8525 GOSUB GET_VENDOR_CODE; IF VENDOR_CODE$="NOT FOUND" THEN RETURN 
8526 VENDOR_CODE$=STP(VENDOR_CODE$,3); IF VENDOR_CODE$="" THEN RETURN ! SSP25696
8527 INVOKE "mkdir -p "+IL0_DIR$+" >/dev/null" ! SSP256996, if directory not setup then do so
8530 PO_UF$=RP1$(7,9),VEND_INV$=RP1$(25,10),IL1KEY$="",IMAGE_TYPE$="01"
8535 IMAGE_FILE_NAME$=STP(VENDOR_CODE$,1)+"_"+STP(VEND_INV$,1)+"_"+FN%TIMRND$
8545 EC_REQUEST_PATH$=PTH(33001)
8550 IF MID(EC_REQUEST_PATH$,-4,1)="." THEN EXT$=MID(EC_REQUEST_PATH$,-4) ELSE EXT$=".txt"
8555 IMAGE_PATH$=IL0_DIR$+DLM+IMAGE_FILE_NAME$+EXT$,VERSION_LABEL$="EC3CIG"
8560 COMMAND$="cp "+EC_REQUEST_PATH$+".z "+IMAGE_PATH$
8565 INVOKE COMMAND$
8575 CALL "ILGFUN;ADD_IMAGE",ERR=*NEXT,Z[6],IL1KEY$,IMAGE_TYPE$,PO_UF$,VENDOR_CODE_UF$+VEND_INV$,IMAGE_PATH$,VERSION_LABEL$
8580 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3CIG|IL_INVOICE|PO_NUM|"+PO_UF$+"|IMAGE_PATH|"+IMAGE_PATH$+"|IMAGE_KEY|"+IL1KEY$+"|")
8590 RETURN 
8595 ! 
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$); REM "131928
9090 GOTO 9900
9900 REM "End
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9950 EXIT 
9999 END 
56002 REM "199040-XML integration with Broker Forms - questions, documentation
56004 REM "209310-Governor invoices being not being imported if more than one 
56006 REM "234945-DB XML exchange hub
56008 REM "244750-Inbound Freight processing in the Customer Invoicing Gateway
56010 REM "249883-Flowpoint; Vendor Inv rec'd email notification, IL support  
56012 REM "250683-Flowpoint; Image Libary support for XML vendor invoice.     
56014 REM "256996-EC3CIG error 257 line 8565, no IL dir, vend code has space. 
56016 REM "255977-Flowpoint; Vendor invoice needs job number/date, ending num 
56018 REM "257952-Need larger tracking number field to replace 20 character   
56020 REM "260047-Flowpoint vendor invoices; New Job Note Type, Purchase Order
56021 REM "270121-CIG Plus; Additional to WO260723, Batch Enable SM7.         
56022 REM "279522-EC3CIG; weird characters in Estimated Arrival field in SM4  
56024 REM "280095-EC3CIG issue for non-divisional PO numbers, needs prefix 00 
56025 REM "291110-Modify SM files three character BOX_NUMBER to sequence using
56026 REM "307200-Ability in EC3CIG to control RP1 filenames                  
