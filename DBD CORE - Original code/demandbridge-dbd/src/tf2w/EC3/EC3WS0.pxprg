0010 REM "EC Worksheet Processing <EC3WS0>
0020 SETESC 9300; SETERR 9000
0035 REM "5.2 - 10/09/03 - 9.429166 - dmm - SSP# 165240
0040 REM "Copyright 2003 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0091 REM "PRINT 'CS',EC$[11]; INPUT *
0100 SETERR 9000
0110 X0$="EC3WS0",X1$="EC Worksheet Processing"
0120 EOL$=$0D0A$; EOL$=ATH(STP(EC_PARM$(57,8),1))
0130 NY$="NY"
0140 DIM MESS_INFO$[20]
0310 IOLIST ECD$,ECD2$
0320 IOLIST ECE$,ECE[0],ECE[1]
0330 IOLIST ECE$,ECE[0],ECE[1]
0360 IOLIST IC0$,IC0[0],IC0[1],IC0[2],IC0[3],IC0[4],IC0[5],IC0[6],IC0[7],IC0[8],IC0[9],IC0[10],IC0[11],IC0[12],IC0[13],IC0[14],IC0[15],IC0[16],IC0[17],IC0[18],IC0[19],IC0[20],IC0[21],IC0[22],IC0[23],IC0[24],IC0[25],IC0[26],IC0[27],IC0[28],IC0[29],IC0[30],IC0[31],IC0[32],IC0[33],IC0[34],IC0[35],IC0[36],IC0[37],IC0[38],IC0[39],IC0[40]
0370 IOLIST FM1$(1),FM1[0],FM1[1],FM1[2],FM1[3],FM1[4],FM1[5],FM1[6],FM1[7],FM1[8],FM1[9],FM1[10],FM1[11],FM1[12],FM1[13],FM1[14],FM1[15],FM1[16],FM1[17],FM1[18],FM1[19],FM1[20],FM1[21],FM1[22],FM1[23],FM1[24],FM1[25],FM1[26],FM1[27],FM1[28],FM1[29],FM1[30],FM1[31]
0380 IOLIST FM0$
0390 IOLIST FMPS$
0391 IOLIST FMPH$
0420 IOLIST EC7$,EC7[0],EC7[1]
0430 IOLIST UM$,UM[0],UM[1],UM[2],UM[3],UM[4],UM[5]
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))],FS6[7],BLANKS$(100)
0510 Z$="020 ECD... 03O ECE... 04O ECF... 05O ECB...  06O IC0... 07O FM1... 08O FM0... 09O FMP... 10O ECJ... 11O ECK... 12O ECL... 13O ZZPARM 14O ECG... 15O ECH... 16O FMM... 17O ECX... 18O ECI... 19O IC1... 20O FM3... 21O FM4... 22O EC7... 23O ECV... 24O EC0... 25O ECR... "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
1000 REM "Process DATA array
1001 REM "Set ECD_IN$ and ECE_IN$ and any other variables
1004 DIM ECD_IN$(579),ECE_IN$(499),ECE_IN[1],ECE_SET[1],ECE_IN_DATA$[2000],ECE_IN_DATA[2000,1],ECE_SET_DATA[2000,1],REAL_ITEM_KEY_DATA$[2000],DELETE_LINE[2000]
1005 DATA_TAGS$="001<template>002<purchase>003<delete>004<new>005<worksheet>006<customer>007<location>008<cust_req>009<req_date>010<attention>011<ship_via>012<needed_by>013<line_number>014<line_type>015<from_customer>016<item_code>017<cost_center>018<cost_code>019<item_desc>020<um>021<ship_from>022<quantity>023<qty_per_um>024<ordered_by>025<ship_via_code>026<how_to_ship>027<ship_with>028<man_name>029<man_addr_1>030<man_addr_2>031<man_city>032<man_state>033<man_zip>034<mark_for>035<reset>036<delete_line>037<item_key>038<3p_id>039<3p_info_1>040<3p_info_2>041<man_addr_n>042<print_flags>"
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1018 DPOS=POS("<"+TAG$+">"=DATA_TAGS$); IF DPOS=0 THEN GOTO 1090 ELSE DINDEX=NUM(DATA_TAGS$(DPOS-3,3),ERR=1090)
1019 ON DINDEX GOTO 1090,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1090
1021 TEMPLATE$=VALUE$; GOTO 1090; REM "template
1022 IF POS("Y"=VALUE$)=1 THEN PURCHASE=1 END_IF ; GOTO 1090; REM "Purchase
1023 IF VALUE$="Y" THEN DELETE_ORDER=1 END_IF ; GOTO 1090; REM "Delete
1024 IF VALUE$="Y" THEN NEW=1 END_IF ; GOTO 1090; REM "New
1025 ECD_IN$(1,10)=VALUE$,ECE_IN$(1,10)=VALUE$,WORKSHEET$=VALUE$; GOTO 1090; REM "worksheet (will touch up later
1026 ECD_IN$(26,10)=VALUE$; GOTO 1090; REM "customer - will add check for permission and cleanuplater
1027 IF VALUE$="" OR STP(VALUE$,3," ")="" THEN GOTO 1090 ELSE ECD_IN$(36,4)=VALUE$; GOTO 1090; REM "location - will add check for permision & cleanup code later
1028 ECD_IN$(40,10)=FN%CVT4$(STP(STP(VALUE$,1),0)); IF LEN(VALUE$)>10 THEN ECD_IN$(163,5)=VALUE$(11) END_IF ; GOTO 1090; REM "cust_req
1029 Q$=VALUE$; GOSUB 8000; ECD_IN$(58,6)=Q$; GOTO 1090; REM "req_date
1030 ECD_IN$(64,30)=VALUE$; GOTO 1090; REM "attention
1031 ECD_IN$(94,15)=VALUE$; GOTO 1090; REM "Ship via
1032 Q$=VALUE$; GOSUB 8000; ECD_IN$(109,6)=Q$; GOTO 1090; REM "needed_by
1033 GOSUB 8300; IF VAL_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF STP(VAL$[VAL_INDEX],3," ")="" THEN NEXT VAL_INDEX ELSE ECE_IN_DATA$[VAL_INDEX](25,3)=STR(NUM(VAL$[VAL_INDEX],ERR=8950):"000"); NEXT VAL_INDEX END_IF ; GOTO 1090; REM "line_number
1034 GOSUB 8300; IF VAL_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF STP(VAL$[VAL_INDEX],3," ")="" THEN NEXT VAL_INDEX ELSE ECE_IN_DATA$[VAL_INDEX](28,1)=VAL$[VAL_INDEX]; NEXT VAL_INDEX END_IF ; GOTO 1090; REM "line_type,will have to add check logic
1035 GOSUB 8300; IF VAL_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF STP(VAL$[VAL_INDEX],3," ")="" THEN NEXT VAL_INDEX ELSE ECE_IN_DATA$[VAL_INDEX](29,10)=VAL$[VAL_INDEX]; NEXT VAL_INDEX END_IF ; GOTO 1090; REM "from_customer, will have to add check logic
1036 GOSUB 8300; IF VAL_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF STP(VAL$[VAL_INDEX],3," ")="" THEN NEXT VAL_INDEX ELSE ECE_IN_DATA$[VAL_INDEX](39,10)=UCS(VAL$[VAL_INDEX]); NEXT VAL_INDEX END_IF ; GOTO 1090; REM "item_code, will be checked later
1037 GOSUB 8300; IF VAL_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF STP(VAL$[VAL_INDEX],3," ")="" THEN NEXT VAL_INDEX ELSE ECE_IN_DATA$[VAL_INDEX](49,9)=VAL$[VAL_INDEX]; NEXT VAL_INDEX END_IF ; GOTO 1090; REM "cost_center
1038 GOSUB 8300; IF VAL_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF STP(VAL$[VAL_INDEX],3," ")="" THEN NEXT VAL_INDEX ELSE ECE_IN_DATA$[VAL_INDEX](58,9)=VAL$[VAL_INDEX]; NEXT VAL_INDEX END_IF ; GOTO 1090; REM "cost_code
1039 GOSUB 8300; IF VAL_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF STP(VAL$[VAL_INDEX],3," ")="" THEN NEXT VAL_INDEX ELSE ECE_IN_DATA$[VAL_INDEX](67,40)=VAL$[VAL_INDEX]; NEXT VAL_INDEX END_IF ; GOTO 1090; REM "item_desc
1040 GOSUB 8300; IF VAL_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF STP(VAL$[VAL_INDEX],3," ")="" THEN NEXT VAL_INDEX ELSE ECE_IN_DATA$[VAL_INDEX](107,4)=VAL$[VAL_INDEX]; NEXT VAL_INDEX END_IF ; GOTO 1090; REM "um -add check logic later
1041 GOSUB 8300; IF VAL_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF STP(VAL$[VAL_INDEX],3," ")="" THEN NEXT VAL_INDEX ELSE ECE_IN_DATA$[VAL_INDEX](111,4)=VAL$[VAL_INDEX]; NEXT VAL_INDEX END_IF ; GOTO 1090; REM "ship_from - add check logic & permissions
1042 GOSUB 8300; IF VAL_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF STP(VAL$[VAL_INDEX],3," ")="" THEN NEXT VAL_INDEX ELSE ECE_IN_DATA[VAL_INDEX,0]=NUM(VAL$[VAL_INDEX],ERR=8950),ECE_SET_DATA[VAL_INDEX,0]=1; NEXT VAL_INDEX; GOTO 1090; REM "quantity, set ece_set[0] so we know it should be changed
1043 GOSUB 8300; IF VAL_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF STP(VAL$[VAL_INDEX],3," ")="" THEN NEXT VAL_INDEX ELSE ECE_IN_DATA[VAL_INDEX,1]=NUM(VAL$[VAL_INDEX],ERR=8950),ECE_SET_DATA[VAL_INDEX,1]=1; NEXT VAL_INDEX; GOTO 1090; REM "qty_per_um, set ece_set[1] so we know it should be changed
1044 ECD_IN$(168,20)=VALUE$; GOTO 1090; REM "ordered_by
1045 GOSUB 7650; GOTO 1090; REM "ship_via_code
1046 GOSUB 7700; GOTO 1090; REM "how_to_ship
1047 ECD_IN$(205,30)=VALUE$; GOTO 1090; REM "ship_with
1048 ECD_IN$(376,35)=STP(VALUE$,2); GOTO 1090; REM "man_name
1049 ECD_IN$(243,30)=STP(VALUE$,2); GOTO 1090; REM "man_addr_1
1050 ECD_IN$(273,30)=STP(VALUE$,2); GOTO 1090; REM "man_addr_2
1051 ECD_IN$(303,16)=STP(VALUE$,2); GOTO 1090; REM "man_city
1052 ECD_IN$(319,2)=UCS(VALUE$); GOTO 1090; REM "man_state
1053 GOSUB 7750; GOTO 1090; REM "man_zip
1054 ECD_IN$(330,35)=VALUE$; GOTO 1090; REM "mark_for
1055 IF VALUE$="Y" THEN DO_RESET=1 END_IF ; GOTO 1090; REM "reset  will reset order
1056 GOSUB 8300; IF VAL_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF POS("Y"=VAL$[VAL_INDEX])>0 THEN DELETE_LINE[VAL_INDEX]=1 END_IF ; NEXT VAL_INDEX; GOTO 1090; REM "delete_line
1057 GOSUB 8300; IF VAL_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF POS(" "<>VAL$[VAL_INDEX])>0 THEN REAL_ITEM_KEY_DATA$[VAL_INDEX]=UCS(VAL$[VAL_INDEX]),ECE_IN_DATA$[VAL_INDEX](29,20)=REAL_ITEM_KEY_DATA$[VAL_INDEX] END_IF ; NEXT VAL_INDEX; GOTO 1090; REM "item_key
1058 P_ID$=VALUE$; GOTO 1090; REM "3p_id
1059 P_INFO_1$=VALUE$; GOTO 1090; REM "3p_info_1
1060 P_INFO_2$=VALUE$; GOTO 1090; REM "3p_info_2
1061 IF ADDR_N=243 THEN ADDR_N=273 ELSE ADDR_N=243 END_IF ; ECD_IN$(ADDR_N,30)=STP(VALUE$,2); GOTO 1090; REM "man_addr_n, add first to addr_1, then addr_2
1062 GOSUB 8300; IF VAL_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF STP(VAL$[VAL_INDEX],3," ")="" THEN NEXT VAL_INDEX ELSE ECE_IN_DATA$[VAL_INDEX](13,5)=VAL$[VAL_INDEX]; NEXT VAL_INDEX END_IF ; GOTO 1090; REM "print_flags
1063 ECD_IN$(415,20)=STP(VALUE$,2); GOTO 1090; REM "cc_number
1064 ECD_IN$(435,4)=STP(VALUE$,2); GOTO 1090; REM "cc_expire
1065 ECD_IN$(439,40)=STP(VALUE$,2); GOTO 1090; REM "cc_name
1066 ECD_IN$(411,4)=STP(VALUE$,2); GOTO 1090; REM "cc_type
1090 NEXT I
1100 REM "Process order
1101 VERSION$="52.0000.134999.165240.20031009",PROGRAM$=PGN; DIM BYBINFO$[5]; BYBINFO$[1]=PROGRAM$,BYBINFO$[2]=VERSION$,BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1102 DIM ECD$(579),ECD[1],ECE$(129),ECE[1]; USE_EXIST=0
1104 IF DO_RESET AND PURCHASE=0 THEN ECD_IN$(1)=""; GOSUB 8100; GOTO 1500; REM "If purchase is set then we want to buy it and THEN clearit, so wait to clear
1106 IF STP(ECD_IN$(1,10),3," ")="" THEN IF STP(ECD_IN$(40,10)+ECD_IN$(163,5),3," ")="" THEN GOTO 1107; REM ELSE GOSUB 07850; REM "Check to see if cust_req given then can we lookup the worksheet number, we don't want to lookup the cust_req here, that should be a customer requested action
1107 IF DELETE_ORDER THEN GOSUB 7800; GOSUB 8100; GOTO 1500 ELSE FOR DEL_INDEX=1 TO HIGHEST_VAL_COUNT; IF DELETE_LINE[DEL_INDEX] THEN GOSUB 8200 END_IF ; NEXT DEL_INDEX; REM GOTO 01500; REM "Delete the worksheet. Will delete the current worksheet number if no worksheet number given. If delete_line then remove 1 line only
1108 IF NEW THEN GOTO 1110 ELSE IF STP(ECD_IN$(1,10),3," ")="" THEN IF STP(EC$[1](97,10),3," ")="" THEN GOTO 1110 ELSE ECD_IN$(1,10)=EC$[1](97,10); FIND (Z[2],KEY=ECD_IN$(1,10),DOM=1109); USE_EXIST=1; GOTO 1111 END_IF ELSE GOTO 1111; REM "if no ws# given, check current ws#, if there then we will use it
1109 ECD_IN$(1,10)=""; REM "didn't find worksheet so assume we need new
1110 IF (NEW OR STP(ECD_IN$(1,10),3," ")="") THEN IF EC$[2](88,1)="Y" THEN GOSUB 8050 ELSE GOTO 1150; REM "If NEW or no current worksheet,then create a worksheet If permitted to do so, else give error message
1115 WORKSHEET$=ECD_IN$(1,10); REM "Update worksheet number used in display section
1120 GOSUB 7500; REM "Update header fields
1145 GOSUB 1200; REM "Process line information
1150 IF PURCHASE THEN GOSUB 7900; IF DO_RESET THEN ECD_IN$(1)="",ECD$(1)="",ECE_IN$(1)="",ECE$(1)="",WORKSHEET$=""; GOSUB 8100; REM "if reset is set , clear after purchase
1195 GOTO 1500; REM "Process output file
1200 REM "Process ECE_IN$ information if needed
1201 IF HIGHEST_VAL_COUNT<1 THEN GOTO 1298
1202 FOR ECE_INDEX=1 TO HIGHEST_VAL_COUNT
1203 ECE_IN$=ECE_IN_DATA$[ECE_INDEX],REAL_ITEM_KEY$=REAL_ITEM_KEY_DATA$[ECE_INDEX]; FOR ECE_INDEX2=0 TO 1; ECE_IN[ECE_INDEX2]=ECE_IN_DATA[ECE_INDEX,ECE_INDEX2],ECE_SET[ECE_INDEX2]=ECE_SET_DATA[ECE_INDEX,ECE_INDEX2]; NEXT ECE_INDEX2
1204 DIM ECE$(499),ECE[1]; ECE$(1,10)=ECD$(1,10),ECE$(25,3)=ECE_IN$(25,3)
1205 IF ECE_IN$(28,1)="S" THEN IF STP(ECE_IN$(39,10),3," ")="" THEN GOTO 1297 END_IF ELSE IF ECE_IN$(28,1)<>"M" THEN IF STP(ECE_IN$(39,10),3," ")="" OR ECE_IN[0]=0 THEN GOTO 1297; REM "If no item code given, then don't create a line
1206 DIM ECR$(1000); IF LEN(STP(REAL_ITEM_KEY$,1))=0 THEN ECR$(1,20)=EC$[2](51,10)+ECE_IN$(39,10) ELSE ECR$(1,20)=REAL_ITEM_KEY$ END_IF ; ECE$(165,48)=EC$[11]; FIND (Z[25],KEY=ECR$(1,20),DOM=1207)ECR$; IF ECR$(256,48)<>DIM(48) THEN ECE$(165,48)=STP(ECR$(256,48),1); REM "set up warehouse selection list on ECE line - override from item parameters if set
1209 REM "If line # <> blank then get that line to update non-blank fields. If specified line not found, or line # is blank, then create new line
1210 IF ECE$(25,3)<>DIM(3) THEN EXTRACT (Z[3],KEY=ECE$(1,10)+ECE$(25,3),DOM=1214)IOL=0330; GOTO 1215
1211 READ (Z[3],KEY=ECE$(1,10)+$FFFFFF$,DOM=1212)
1212 KEY_3$="",KEY_3$=KEP(Z[3],END=1213)
1213 IF KEY_3$="" OR KEY_3$(1,10)<>ECE$(1,10) THEN ECE$(25,3)="001" ELSE ECE$(25,3)=STR(NUM(KEY_3$(11,3))+1:"000")
1214 WRITE (Z[3],KEY=ECE$(1,10)+ECE$(25,3),DOM=1211)IOL=0330; EXTRACT (Z[3],KEY=ECE$(1,10)+ECE$(25,3),DOM=1211)IOL=0330
1215 REM "Put non-blank ECE_IN$ values into ECE$
1216 ISTR$="013012|028001|029010|039010|049009|058009|067040|107004|111004|"
1220 FOR II=1 TO LEN(ISTR$)-6 STEP 7
1222 XX=NUM(ISTR$(II,3)),YY=NUM(ISTR$(II+3,3)); IF STP(ECE_IN$(XX,YY),3," ")="" THEN GOTO 1224 ELSE ECE$(XX,YY)=ECE_IN$(XX,YY)
1224 NEXT II
1225 REM "update numerics also
1233 FOR II=0 TO 1
1234 IF ECE_SET[II] THEN ECE[II]=ECE_IN[II]
1235 NEXT II
1240 REM "lookup FM1 and IC0 data, set up def_xxx$ strings to default if needed
1244 IF ECE$(28,1)="M" THEN GOSUB 8500; WRITE (Z[3],KEY=ECE$(1,10)+ECE$(25,3))IOL=0330; GOTO 1297; REM "Skip checks if message line
1245 IF ECE$(28,1)="S" THEN GOSUB 3100; GOTO 1297; REM "Processing for Special charge
1246 GOSUB 7550
1247 REM "If qty < 100 and < qty per, then up it to qty* qty per, BUT make exception for T types they are handled differently
1248 REM IF X3$(9,3)<>"288" THEN IF ECE[0]<>0 AND ECE$(107,4)<>"T   " AND (ECE$(107,4)<>"M   " OR ECE[0]<1000) THEN LET ECETMP=ECE[0]*ECE[1]; IF FPT(ECETMP)<>0 THEN LET ECETMP=INT(ECETMP)+SGN(ECETMP) FI; IF ECETMP=0 THEN LET ECE[0]=1 ELSE LET ECE[0]=ECETMP; REM "133563
1295 GOSUB 8350
1296 REM "IF NUM(ECE$(11,2))<>0 THEN ESCAPE
1297 NEXT ECE_INDEX
1299 RETURN 
1500 REM "Use template$ to open file, read line by line and insert
1503 IF TEMPLATE$="" THEN GOTO 1995 ELSE CALL "ZZDISP","AX",EC$[2](51,10),"A/R",X3$,CUST_CODE$,"",0,0,X4$; GOSUB 2100
1504 FIND (Z[2],KEY=WORKSHEET$,DOM=1505)IOL=0310; REM "If no template, ok then we may be starting order, so display location info etc
1505 CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1506 REM "Setup line_tags$
1507 LINE_TAGS$="001<cust_code>002<cust_name>003<ec_company>004<session_id>005<buyer_id>006<buyer_name>007<worksheet>008<customer>009<location>010<cust_req>011<req_date>012<attention>013<ship_via>014<needed_by>015<wslinestart>016<cust_loc_code>017<address_1>018<address_2>019<city>020<state>021<zip>022<addr_1>023<addr_2>024<addr_3>025<cost_center>026<location_name>027<recv_dept>028<ship_via_list>029<date>030<time>031<tf_order_no>032<mark_for>033<location_list>034<locchangestart>035<man_name>036<man_addr_1>037<man_addr_2>038<man_city>039<man_state>040<man_zip>041<category_entry_start>042<message>043<message_start>044<ship_via_code>045<location_desc>046<addr_city>047<addr_state>048<addr_zip>049<addr_unformatted_1>050<addr_unformatted_2>051<addr_name>052<ship_via_text>053<location_text>"
1510 READ (100,END=1595)LINE$; GOSUB 8150
1515 INDEX=POS("?tf?"=LINE$); IF INDEX=0 THEN PRINT (OUTPUT)LINE$,EOL$,; GOTO 1510
1517 REM "LET PGINDEX=POS("<!?TF?MESSAGE"=LINE$); IF PGINDEX=0 THEN GOTO 01518 ELSE ESCAPE ; IF PGINDEX=1 THEN LET LINE$=LINE$(3) ELSE LET LINE$=LINE$(1,PGINDEX-1)+LINE$(PGINDEX+2); REM "GET RID OF THE DARNED <! ON PAGE CONTROL TAGS - OTHERWISE THE WHOLE LINE GETS COMMENTED OUT IN THE HTML
1520 END_INDEX=POS("?"=LINE$(INDEX+4)),TAG$=LINE$(INDEX+4,END_INDEX-1),LINE1$=LINE$(1,INDEX-1),LINE2$=LINE$(INDEX+END_INDEX+4),LPOS=POS("<"+TAG$+">"=LINE_TAGS$); IF LPOS=0 THEN LINDEX=0 ELSE LINDEX=NUM(LINE_TAGS$(LPOS-3,3))
1530 GOSUB 2000; GOTO 1515
1995 GOTO 9900
1999 REM "Get tag value & substitute
2000 ON LINDEX GOTO 2090,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2090
2001 LINE$=LINE1$+CUST_CODE$+LINE2$; GOTO 2095; REM "cust_code
2002 LINE$=LINE1$+STP(EC$[1](23,35),1)+LINE2$; GOTO 2095; REM "cust_name
2003 LINE$=LINE1$+STP(EC_PARM$(7,50),1)+LINE2$; GOTO 2095; REM "ec_company
2004 LINE$=LINE1$+STP(EC$[1](1,7),1)+LINE2$; GOTO 2095; REM "session_id from EC$
2005 LINE$=LINE1$+STP(EC$[1](8,15),1)+LINE2$; GOTO 2095; REM "Buyer id
2006 LINE$=LINE1$+STP(EC$[2](16,35),1)+LINE2$; GOTO 2095; REM "Buyer name
2007 LINE$=LINE1$+STP(ECD$(1,10),1)+LINE2$; GOTO 2095; REM "worksheet
2008 CALL "ZZDISP","AX",ECD$(26,10),"A/R",X3$,TMP$,"",0,0,X4$; LINE$=LINE1$+TMP$+LINE2$; GOTO 2095; REM "Customer code
2009 LINE$=LINE1$+ECD$(23,6)+LINE2$; GOTO 2095; REM "location code
2010 LINE$=LINE1$+STP(ECD$(40,10)+ECD$(163,5),1)+LINE2$; GOTO 2095; REM "cust_req
2011 IF STP(ECD$(58,6),3," ")="" THEN TMP$="" ELSE CALL "ZZDISP","DX",ECD$(58,6),"",X3$,TMP$,"",0,0,X4$ END_IF ; LINE$=LINE1$+TMP$+LINE2$; GOTO 2095; REM "req_date
2012 IF ECD_IN$(64,30)<>DIM(30) THEN ECD$(64,30)=ECD_IN$(64,30) END_IF ; LINE$=LINE1$+STP(ECD$(64,30),1)+LINE2$; GOTO 2095; REM "attention
2013 LINE$=LINE1$+STP(ECD$(94,15),1)+LINE2$; GOTO 2095; REM "ship_via
2014 IF STP(ECD$(109,6),3," ")="" THEN TMP$="" ELSE CALL "ZZDISP","DX",ECD$(109,6),"",X3$,TMP$,"",0,0,X4$ END_IF ; LINE$=LINE1$+TMP$+LINE2$; GOTO 2095; REM "needed by
2015 GOSUB 3500; LINE$=LINES_SECTION$; GOTO 2095; REM "wslinestart
2016 LINE$=LINE1$+STP(FM0$(214,9),1)+LINE2$; GOTO 2095; REM "cust_loc_code
2017 LINE$=LINE1$+STP(FM0$(51,30),1)+LINE2$; GOTO 2095; REM "address_1
2018 LINE$=LINE1$+STP(FM0$(81,30),1)+LINE2$; GOTO 2095; REM "address_2
2019 LINE$=LINE1$+STP(FM0$(111,16),1)+LINE2$; GOTO 2095; REM "city
2020 LINE$=LINE1$+STP(FM0$(127,2),1)+LINE2$; GOTO 2095; REM "state
2021 LINE$=LINE1$+STP(LOC_ZIP$,1)+LINE2$; GOTO 2095; REM "zip
2022 LINE$=LINE1$+ADDR$[1]+LINE2$; GOTO 2095; REM "addr_1
2023 LINE$=LINE1$+ADDR$[2]+LINE2$; GOTO 2095; REM "addr_2
2024 LINE$=LINE1$+ADDR$[3]+LINE2$; GOTO 2095; REM "addr_3
2025 LINE$=LINE1$+STP(FM0$(236,9),1)+LINE2$; GOTO 2095; REM "cost_center
2026 IF STP(FM0$(248,35),3," ")="" THEN LINE$=LINE1$+STP(FM0$(16,35),1)+LINE2$ ELSE LINE$=LINE1$+STP(FM0$(248,35),1)+LINE2$ END_IF ; GOTO 2095; REM "location_name
2027 LINE$=LINE1$+STP(FM0$(382,20),1)+LINE2$; GOTO 2095; REM "recv_dept
2028 GOSUB 2150; LINE$=LINE1$+SHIPVIA$+LINE2$; GOTO 2095; REM "ship_via_list
2029 LINE$=LINE1$+EC$[4]+LINE2$; GOTO 2095; REM "date
2030 LINE$=LINE1$+EC$[5]+LINE2$; GOTO 2095; REM "time
2031 CALL "ZZDISP","AX",ECD$(235,8),"O/P",X3$,TMP$,"",0,0,X4$; LINE$=LINE1$+TMP$+LINE2$; GOTO 2095; REM "tf_order_no
2032 LINE$=LINE1$+STP(ECD$(330,35),1)+LINE2$; GOTO 2095; REM "mark_for
2033 GOSUB 2200; LINE$=LINE1$+LOC_LIST$+LINE2$; GOTO 2095; REM "location_list
2034 GOSUB 3600; LINE$=LOC_CHG$; GOTO 2095; REM "locchangestart
2035 LINE$=LINE1$+ECD$(376,35)+LINE2$; GOTO 2095; REM "man_name
2036 LINE$=LINE1$+ECD$(243,30)+LINE2$; GOTO 2095; REM "man_addr_1
2037 LINE$=LINE1$+ECD$(273,30)+LINE2$; GOTO 2095; REM "man_addr_2
2038 LINE$=LINE1$+ECD$(303,16)+LINE2$; GOTO 2095; REM "man_city
2039 LINE$=LINE1$+ECD$(319,2)+LINE2$; GOTO 2095; REM "man_state
2040 CALL "ZZDISP","AX",ECD$(321,9),"ZIP",X3$,TMP_ZIP$,"",0,0,X4$; LINE$=LINE1$+TMP_ZIP$+LINE2$; GOTO 2095; REM "man_zip
2041 GOSUB 3700; LINE$=CAT_ITEM_SECTION$; GOTO 2095; REM "category_entry_start
2042 LINE$=LINE1$+MESSAGE$+LINE2$; GOTO 2095; REM "message
2043 GOSUB 3050; LINE$=LINE1$+MESSAGE_SECTION$+LINE2$; GOTO 2095; REM "message_start
2044 LINE$=LINE1$+ECD$(188,1)+LINE2$; GOTO 2095; REM "SHIP_VIA_CODE
2045 IF STP(FM0$(16,35),3," ")="" THEN LD$=FM0$(248,35) ELSE LD$=FM0$(16,35) END_IF ; LINE$=LINE1$+STP(LD$,2)+LINE2$; GOTO 2095; REM "location_desc
2046 LINE$=LINE1$+SHIP$(111,16)+LINE2$; GOTO 2095; REM "addr_city
2047 LINE$=LINE1$+SHIP$(127,2)+LINE2$; GOTO 2095; REM "addr_state
2048 LINE$=LINE1$+SHIP$(129,9)+LINE2$; GOTO 2095; REM "addr_zip
2049 LINE$=LINE1$+SHIP$(51,30)+LINE2$; GOTO 2095; REM "addr_unformatted_1"
2050 LINE$=LINE1$+SHIP$(81,30)+LINE2$; GOTO 2095; REM "addr_unformatted_2
2051 LINE$=LINE1$+STP(ECD$(376,35),2)+LINE2$; GOTO 2095; REM "addr_name
2052 TEXT_OPT=1; GOSUB 2150; TEXT_OPT=0; LINE$=LINE1$+SHIPVIA$+LINE2$; GOTO 2095; REM "ship_via_text - 137648
2053 TEXT_OPT=1; GOSUB 2200; TEXT_OPT=0; LINE$=LINE1$+LOC_LIST$+LINE2$; GOTO 2095; REM "location_text  -137648
2054 LINE$=LINE1$+ECD$(411,4)+LINE2$; GOTO 2095; REM "cc_type
2055 LINE$=LINE1$+STP(ECD$(415,20),2)+LINE2$; GOTO 2095; REM "cc_number
2056 LINE$=LINE1$+STP(ECD$(435,4),2); GOTO 2095; REM "cc_expire
2057 LINE$=LIN1$+STP(ECD$(439,40),2); GOTO 2095; REM "cc_name
2090 LINE$=LINE1$+LINE2$; GOTO 2095; REM "tag not found, replace with nothingg
2095 RETURN 
2100 REM "Get Location information & format addr$[] array with address
2104 REM "OLD WAY ->DIM ADDR$[3],FM0$(521); READ (Z[8],KEY="C"+EC$[2](51,14),DOM=02106) IOL=00380
2106 DIM ADDR$[3],FM0$(521); READ (Z[8],KEY="C"+ECD$(26,14),DOM=2108)IOL=0380
2108 IF LOCATION_CHANGED THEN LOCATION_CHANGED=0; IF STP(FM0$(51,87),3," ")="" OR ECD$(243,87)<>DIM(87) AND (ORIGINAL_ECD_SHIPTO$=ECD$(36,4) OR ECD_IN$(243,87)<>DIM(87)) THEN GOTO 2109 ELSE ECD$(243,87)=FM0$(51,87),ECD$(376,35)=FM0$(16,35); REM "136662
2109 DIM SHIP$(521); IF STP(ECD$(243,87),3," ")="" OR ORIGINAL_ECD_SHIPTO$<>ECD$(36,4) THEN SHIP$=FM0$; GOTO 2113 ELSE SHIP$=FM0$; IF ECD_IN$(243,87)<>DIM(87) THEN SHIP$(51,87)=ECD_IN$(243,87),ECD$(243,87)=ECD_IN$(243,87) ELSE SHIP$(51,87)=ECD$(243,87); REM "if ther is currently no address on the order or the selected shipto has changed then pull the address from FM0 otherwise maintain from the ECD record and allow manual overrides in 2111->136662
2110 IF ECD_IN$(273,30)<>DIM(30) THEN SHIP$(81,30)=ECD_IN$(273,30) ELSE IF ECD_IN$(243,87)<>DIM(87) THEN SHIP$(81,30)=ECD_IN$(273,30); REM "if the incoming 2nd address line is blank then if the remaining ecd_in is not blank assume that the user has entered in a blank in the 2nd address line and assign
2111 IF ECD_IN$(243,30)<>DIM(30) THEN SHIP$(51,30)=ECD_IN$(243,30) END_IF ; IF ECD_IN$(303,16)<>DIM(16) THEN SHIP$(111,16)=ECD_IN$(303,16) END_IF ; IF ECD_IN$(319,2)<>DIM(2) THEN SHIP$(127,2)=ECD_IN$(319,2) END_IF ; IF ECD_IN$(321,9)<>DIM(9) THEN SHIP$(129,9)=ECD_IN$(321,9) END_IF ; IF ECD_IN$(376,35)<>DIM(35) THEN SHIP$(16,35)=ECD_IN$(376,35)
2113 LOC_ZIP$=""; CALL "ZZDISP","AX",SHIP$(129,9),"ZIP",X3$,LOC_ZIP$,"",0,0,X4$
2114 ADDRI=1
2115 IF STP(SHIP$(51,30),3," ")="" THEN GOTO 2116 ELSE ADDR$[ADDRI]=STP(SHIP$(51,30),1),ADDRI=ADDRI+1
2117 IF STP(SHIP$(81,30),3," ")="" THEN GOTO 2118 ELSE ADDR$[ADDRI]=STP(SHIP$(81,30),1),ADDRI=ADDRI+1
2119 IF STP(SHIP$(111,16),3," ")="" THEN CSZ$=STP(SHIP$(127,2),1)+" "+STP(LOC_ZIP$,1) ELSE CSZ$=STP(SHIP$(111,16),1)+", "+STP(SHIP$(127,2),1)+" "+STP(LOC_ZIP$,1)
2120 IF STP(CSZ$,3," ")="" THEN GOTO 2121 ELSE ADDR$[ADDRI]=CSZ$,ADDRI=ADDRI+1
2125 IF STP(ECD$(64,30),3," ")="" THEN ECD$(64,30)=SHIP$(160,20); REM "Set attention field if blank
2145 RETURN 
2150 REM "Return SHIPVIA$ as HTML for drop down list
2151 READ (Z[23],KEY=EC$[2](51,10)+"SHIP_VIA  ",DOM=2152); REM "ck for customer specific shipto's
2152 CUSTOMER_SPECIFIC_SHIPVIAS$="N"; ECV_KEY$=KEY(Z[23],END=2153); IF ECV_KEY$(1,20)=EC$[2](51,10)+"SHIP_VIA  " THEN CUSTOMER_SPECIFIC_SHIPVIAS$="Y"
2155 SHIPVIA$=""; IF ECD_IN$(188,1)<>" " THEN SELECTED$=ECD_IN$(188,1) ELSE IF ECD$(188,1)<>" " THEN SELECTED$=ECD$(188,1) ELSE IF EC$[2](61,4)=DIM(4) THEN SELECTED$=EC$[1](155,1) ELSE SELECTED$=FM0$(305,1)
2158 IF POS("<!"=LINE1$)<>0 THEN LINE1$=LINE1$(1,POS("<!"=LINE1$)-1); REM "If in comment remove the start of the comment
2159 IF CUSTOMER_SPECIFIC_SHIPVIAS$="N" THEN READ (Z[9],KEY="S",DOM=2160) ELSE GOTO 2170
2160 READ (Z[9],END=2185)IOL=0390; IF FMPS$(1,1)<>"S" THEN GOTO 2185 ELSE IF FMPS$(18,1)="Y" THEN GOTO 2160; REM "Skip ship via's marked with an yes
2163 IF TEXT_OPT THEN SHIPVIA$=SHIPVIA$+FMPS$(2,1)+" "+FMPS$(3,15)+EOL$; GOTO 2160; REM "137648
2165 IF FMPS$(2,1)=SELECTED$ THEN SHIPVIA$=SHIPVIA$+"<option selected value="+QUO+FMPS$(2,1)+QUO+">"+FMPS$(3,15)+"</option>" ELSE SHIPVIA$=SHIPVIA$+"<option value="+QUO+FMPS$(2,1)+QUO+">"+FMPS$(3,15)+"</option>"
2167 GOTO 2160
2170 REM "build ship-vias from customer specific list
2171 CUST_SHIPVIA$=KEY(Z[23],END=2176); READ (Z[23]); IF CUST_SHIPVIA$(1,20)<>EC$[2](51,10)+"SHIP_VIA  " THEN GOTO 2176
2172 READ (Z[9],KEY="S"+CUST_SHIPVIA$(21,1),DOM=2171)IOL=0390
2173 IF FMPS$(18,1)="Y" THEN GOTO 2171; REM "Skip ship via's marked with an yes
2174 IF TEXT_OPT THEN SHIPVIA$=SHIPVIA$+FMPS$(2,1)+" "+FMPS$(3,15)+EOL$; GOTO 2171 ELSE IF FMPS$(2,1)=SELECTED$ THEN SHIPVIA$=SHIPVIA$+"<option selected value="+QUO+FMPS$(2,1)+QUO+">"+FMPS$(3,15)+"</option>" ELSE SHIPVIA$=SHIPVIA$+"<option value="+QUO+FMPS$(2,1)+QUO+">"+FMPS$(3,15)+"</option>"
2175 GOTO 2171
2185 STMP=POS("</select>"=LINE1$,-1); IF STMP<>0 THEN SHIPVIA$=SHIPVIA$+"</select>"; IF STMP=1 THEN LINE1$="" ELSE LINE1$=LINE1$(1,STMP-1)
2186 IF LINE2$>"" THEN IF LINE2$(1,1)=">" THEN LINE2$=LINE2$(2); REM "if token was part of a comment, then remove the end of the comment.
2195 RETURN 
2200 REM "Return LOC_LIST$ as HTML for drop down listwhen called from lines section
2205 LOC_LIST$=""; IF ECD_IN$(36,4)<>DIM(4) THEN SELECTED$=ECD_IN$(36,4) ELSE IF ECD$(36,4)<>DIM(4) THEN SELECTED$=ECD$(36,4) ELSE SELECTED$=EC$[2](61,4)
2206 IF SELECTED$=DIM(4) THEN LOC_LIST$="<option selected value="+QUO+QUO+"></option>"; REM "if no pre selected value, default to blank so we don't overwrite with the first one.
2210 IF EC$[9]="" THEN PGMNAME$="EC3SCS" ELSE PGMNAME$=STP(EC$[9](57,6),2)
2211 IF TEXT_OPT THEN ALL$="T" ELSE ALL$=""
2212 CALL PGMNAME$,X3$,X4$,EC_PARM$,EC${ALL},ST_LIST$,SELECTED$,ALL$,""
2214 LOC_LIST$=LOC_LIST$+ST_LIST$
2234 IF POS("<!"=LINE1$)<>0 THEN LINE1$=LINE1$(1,POS("<!"=LINE1$)-1); REM "If in comment remove the start of the comment
2235 STMP=POS("</select>"=LINE1$,-1); IF STMP<>0 THEN LOC_LIST$=LOC_LIST$+"</select>"; IF STMP=1 THEN LINE1$="" ELSE LINE1$=LINE1$(1,STMP-1)
2236 IF LINE2$>"" THEN IF LINE2$(1,1)=">" THEN LINE2$=LINE2$(2); REM "if token was part of a comment, then remove the end of the comment.
2245 RETURN 
2250 REM "Return LOC_LIST$ as HTML for drop down list when called from loc change section
2255 LOC_LIST$=""; IF ECD_IN$(36,4)<>DIM(4) THEN SELECTED$=ECD_IN$(36,4) ELSE IF ECD$(36,4)<>DIM(4) THEN SELECTED$=ECD$(36,4) ELSE SELECTED$=EC$[2](61,4)
2260 IF EC$[9]="" THEN PGMNAME$="EC3SCS" ELSE PGMNAME$=STP(EC$[9](57,6),2)
2262 CALL PGMNAME$,X3$,X4$,EC_PARM$,EC${ALL},ST_LIST$,SELECTED$,"",""
2264 REM "IF LEN(LOC_LIST$)+LEN(ST_LIST$)<64000 THEN LOC_LIST$=LOC_LIST$+ST_LIS T$                                                                         
2265 LOC_LIST$=LOC_LIST$+ST_LIST$
2284 IF POS("<!"=LC1$,-1)<>0 THEN LC1$=LC1$(1,POS("<!"=LC1$,-1)-1); REM "If in comment remove the start of the comment
2285 STMP=POS("</select>"=LC1$,-1); IF STMP<>0 THEN LOC_LIST$=LOC_LIST$+"</select>"; IF STMP=1 THEN LC1$="" ELSE LC1$=LC1$(1,STMP-1)
2286 IF LC2$>"" THEN IF LC2$(1,1)=">" THEN LC2$=LC2$(2); REM "if token was part of a comment, then remove the end of the comment.
2295 RETURN 
3000 REM "message processing, lookup up message in ECX, return in MESSAGE_SECTION
3005 IF ORDER_MESSAGE_NO=0 THEN MESSAGE_SECTION$=""; GOTO 3045; REM "discard message section HTML
3010 DIM ECX$(288); ECX$(1,10)="EC3WS0",ECX$(11,5)=STR(ORDER_MESSAGE_NO:"00000")
3015 FIND (Z[17],KEY=ECX$(1,15),DOM=3016)ECX$
3016 REM "PRINT ECX$; ESCAPE
3017 IF ECX$(16,1)="Y" THEN GOTO 3045; REM "If don't display, then skip this section
3020 MTMP$=STP(ECX$(20,240),1)
3025 MS2_INDEX=POS("?tf?"=MTMP$); IF MS2_INDEX=0 THEN GOTO 3040
3026 MSEND2_INDEX=POS("?"=MTMP$(MS2_INDEX+4)),MTMP_TAG$=MTMP$(MS2_INDEX+4,MSEND2_INDEX-1),MTMP1$=MTMP$(1,MS2_INDEX-1),MTMP2$=MTMP$(MS2_INDEX+MSEND2_INDEX+4)
3030 MINFO$=""; IF NUM(MTMP_TAG$,ERR=3031)<=FN%NEA("MESS_INFO$",1) THEN MINFO$=MESS_INFO$[NUM(MTMP_TAG$,ERR=3031)]
3032 MTMP$=MTMP1$+MINFO$+MTMP2$
3035 GOTO 3025
3041 MLINE$=""
3042 IF MTMP$="" THEN GOTO 3043 ELSE MPOS=POS(" "=MTMP$); IF MPOS=0 OR MPOS=LEN(MTMP$) THEN INLINE$=MTMP$,MTMP$="" ELSE INLINE$=MTMP$(1,MPOS),MTMP$=MTMP$(MPOS+1) END_IF ; IF LEN(MLINE$)+LEN(INLINE$)>60 THEN MESSAGE$=MESSAGE$+MLINE$+EOL$,MLINE$=INLINE$ ELSE MLINE$=MLINE$+INLINE$ END_IF ; GOTO 3042
3043 MESSAGE$=MESSAGE$+MLINE$
3044 DIM MESS_INFO$[20]
3045 RETURN 
3050 REM "Get lines section in MS_TEMPLATE$ and generate MESSAGE_SECTION$ containing the message
3052 MESSAGE_SECTION$="",MS_TAGS$="001<message>"
3053 MS_TEMPLATE$=LINE$
3055 READ (100,END=3056)LINE$; GOSUB 8150; MS_TEMPLATE$=MS_TEMPLATE$+LINE$+EOL$; IF POS("?tf?message_end?"=LINE$)=0 THEN GOTO 3055
3056 MSTART=POS("<!?tf?message_start?>"=MS_TEMPLATE$),MSTARTEND=POS("start?>"=MS_TEMPLATE$); IF MSTARTEND<>0 THEN MS_TEMPLATE$=MS_TEMPLATE$(MSTARTEND+8); REM "get rid of leading tag
3057 MSEND=POS("<!?tf?message_end"=MS_TEMPLATE$); IF MSEND<>0 THEN MS_TEMPLATE$=MS_TEMPLATE$(1,MSEND-1)
3064 MS$=MS_TEMPLATE$
3065 MS_INDEX=POS("?tf?"=MS$); IF MS_INDEX=0 THEN GOTO 3091
3066 MSEND_INDEX=POS("?"=MS$(MS_INDEX+4)),MS_TAG$=MS$(MS_INDEX+4,MSEND_INDEX-1),MS1$=MS$(1,MS_INDEX-1),MS2$=MS$(MS_INDEX+MSEND_INDEX+4),MS_POS=POS("<"+MS_TAG$+">"=MS_TAGS$); IF MS_POS=0 THEN MS$=MS1$+MS2$,MS_INDEX=0 ELSE MS_INDEX=NUM(MS_TAGS$(MS_POS-3,3))
3070 ON MS_INDEX GOTO 3089,3071,3089
3071 GOSUB 3000; MS$=MS1$+MESSAGE$+MS2$; GOTO 3090; REM "message
3089 MS$=MS1$+MS2$; GOTO 3090; REM "Not found
3090 GOTO 3065
3091 MESSAGE_SECTION$=MS$
3092 IF ORDER_MESSAGE_NO=0 THEN MESSAGE_SECTION$=""; REM "discard message section if no message
3095 IF POS("<!"=LINE1$)<>0 THEN LINE1$=""; REM "**wab qbf
3096 IF POS(">"=LINE2$)<>0 THEN LINE2$=""; REM "**wab qbf
3099 RETURN 
3100 REM "Lookup info for Special Charge
3102 REM "If extension only type spcl charge, then quantity is taken to be the charge amount. If not extension only then assumed to be quantity * price from special charge
3105 DIM FMPX$(61),FMPX[3]; FIND (Z[9],KEY="X"+ECE$(39,10),DOM=3106)FMPX$,FMPX[0],FMPX[1],FMPX[2],FMPX[3]; GOTO 3110
3106 ECE$(11,2)="01",MESSAGE_NO=1; MESS_INFO$[1]=STP(ECE$(39,10),2); GOSUB 3000; GOTO 3145; REM "if not in Special chrages,flag error
3110 IF ECE$(67,40)=DIM(40) THEN ECE$(67,40)=FMPX$(12,40); REM "Set description if not set
3112 IF ECE$(107,4)=DIM(4) THEN ECE$(107,4)=FMPX$(55,4),ECE[1]=FMPX[0]
3114 IF FMPX$(61,1)<>"Y" THEN ECE[0]=FMPX[1]*ECE[0]; REM "If not extension only then extend the price
3115 IF ECE[0]=0 THEN ECE[0]=FMPX[1]; REM "If price is 0 default from spcl charge
3140 WRITE (Z[3],KEY=ECE$(1,10)+ECE$(25,3))IOL=0330
3145 RETURN 
3500 REM "Get lines section in LS_TEMPLATE$ and generate LINES_SECTION$ containing an entry for each order line from ESE
3502 LINES_SECTION$="",LS_TAGS$="001<line_number>002<line_type>003<from_customer>004<item_code>005<cost_center>006<cost_code>007<item_desc>008<um>009<ship_from>010<quantity>011<qty_per_um>012<session_id>013<worksheet>014<lotlinestart>015<qty_in_eaches>016<linemessage_start>017<3p_info_1>018<3p_info_2>019<3p_id>"
3503 REM "Setup LS_TEMPLATE$
3504 LS_TEMPLATE$=LINE$
3505 READ (100,END=3506)LINE$; GOSUB 8150; LS_TEMPLATE$=LS_TEMPLATE$+LINE$+EOL$; IF POS("?tf?wslineend?"=LINE$)=0 THEN GOTO 3505
3509 READ (Z[3],KEY=WORKSHEET$,DOM=3510)
3510 DIM ECE$(129),ECE[1]; READ (Z[3],END=3595)IOL=0330; IF ECE$(1,10)<>WORKSHEET$ THEN GOTO 3595 ELSE GOSUB 7600; GOSUB 8250
3514 LS$=LS_TEMPLATE$
3515 LS_INDEX=POS("?tf?"=LS$); IF LS_INDEX=0 THEN GOTO 3591
3516 LSEND_INDEX=POS("?"=LS$(LS_INDEX+4)),LS_TAG$=LS$(LS_INDEX+4,LSEND_INDEX-1),LS1$=LS$(1,LS_INDEX-1),LS2$=LS$(LS_INDEX+LSEND_INDEX+4),LS_POS=POS("<"+LS_TAG$+">"=LS_TAGS$); IF LS_POS=0 THEN LS$=LS1$+LS2$,LS_INDEX=0 ELSE LS_INDEX=NUM(LS_TAGS$(LS_POS-3,3))
3520 ON LS_INDEX GOTO 3589,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3589
3521 LS$=LS1$+ECE$(25,3)+LS2$; GOTO 3590; REM "line_number
3522 LS$=LS1$+ECE$(28,1)+LS2$; GOTO 3590; REM "line_type
3523 CALL "ZZDISP","AX",ECE$(29,10),"A/R",X3$,TMP$,"",0,0,X4$; LS$=LS1$+TMP$+LS2$; GOTO 3590; REM "from_customer
3524 LS$=LS1$+STP(ECE$(39,10),1)+LS2$; GOTO 3590; REM "item_code
3525 LS$=LS1$+STP(ECE$(49,9),1)+LS2$; GOTO 3590; REM "cost_center
3526 LS$=LS1$+STP(ECE$(58,9),1)+LS2$; GOTO 3590; REM "cost_code
3527 LS$=LS1$+STP(ECE$(67,40),1)+LS2$; GOTO 3590; REM "item_desc
3528 TMP$=STP(ECE$(107,4),1)+"/"+STP(STR(ECE[1]:"##,###"),2); IF TMP$="/" THEN LS$=LS1$+LS2$; GOTO 3590 ELSE LS$=LS1$+TMP$+LS2$; GOTO 3590; REM "um
3530 IF ECE$(28,1)="S" THEN TMASK$="###,###.00" ELSE TMASK$="#,###,###" END_IF ; LS$=LS1$+STR(ECE[0]/QTY_DIVISOR:TMASK$)+LS2$; GOTO 3590; REM "quantity
3531 LS$=LS1$+STR(ECE[1]:"##,###")+LS2$; GOTO 3590; REM "qty_per_um
3532 LS$=LS1$+STP(EC$[1](1,7),1)+LS2$; GOTO 3590; REM "session_id
3533 LS$=LS1$+WORKSHEET$+LS2$; GOTO 3590; REM "worksheet
3534 GOSUB 3900; LS$=LS1$+LOT_SECTION$+LS2$; GOTO 3590; REM "lotlinestart - output of lotted information
3535 LS$=LS1$+STR(ECE[0]*ECE[1]:"#,###,###")+LS2$; GOTO 3590; REM "qty_in_eaches
3536 GOSUB 3850; LS$=LS1$+LINEMSG_SECTION$+LS2$; GOTO 3590; REM "linemessage_start
3537 LS$=LS1$+STP(EC7$(24,20),1)+LS2$; GOTO 3590; REM "3p_info_1
3538 LS$=LS1$+STP(EC7$(44,20),1)+LS2$; GOTO 3590; REM "3p_info_2
3539 LS$=LS1$+STP(EC7$(14,10),1)+LS2$; GOTO 3590; REM "3p_id
3589 LS$=LS1$+LS2$; GOTO 3590; REM "not found replace with a '?'
3590 GOTO 3515
3591 IF LEN(LINES_SECTION$)+LEN(LS$)>64000 THEN PRINT (OUTPUT)LINES_SECTION$,EOL$; LINES_SECTION$=""; REM "ssp#134905
3592 LINES_SECTION$=LINES_SECTION$+LS$; GOTO 3510; REM "add to lines section, then get next line if any
3595 RETURN 
3600 REM "Location change section, template in LC_TEMPLATE$ and generate LOC_CHG$ containing the section with location change info. HOWEVER, if buyer id location field is filled in the skip this section, they can't change it.
3602 LOC_CHG$="",LC_TAGS$="001<location_list>"
3603 REM "Setup LC_TEMPLATE$
3604 LC_TEMPLATE$=LINE$+EOL$
3605 READ (100,END=3606)LINE$; GOSUB 8150; LC_TEMPLATE$=LC_TEMPLATE$+LINE$+EOL$; IF POS("?tf?locchangeend?"=LINE$)=0 THEN GOTO 3605
3609 IF EC$[2](61,4)<>DIM(4) THEN GOTO 3695; REM "If location code of buyer record is not blank, then they are not allowed to change their shipto location.
3614 LC$=LC_TEMPLATE$
3615 LC_INDEX=POS("?tf?"=LC$); IF LC_INDEX=0 THEN GOTO 3691
3616 LCEND_INDEX=POS("?"=LC$(LC_INDEX+4)),LC_TAG$=LC$(LC_INDEX+4,LCEND_INDEX-1),LC1$=LC$(1,LC_INDEX-1),LC2$=LC$(LC_INDEX+LCEND_INDEX+4),LC_POS=POS("<"+LC_TAG$+">"=LC_TAGS$); IF LC_POS=0 THEN LC$=LC1$+LC2$,LC_INDEX=0 ELSE LC_INDEX=NUM(LC_TAGS$(LC_POS-3,3))
3620 ON LC_INDEX GOTO 3689,3621,3689
3621 GOSUB 2250; LC$=LC1$+LOC_LIST$+LC2$; GOTO 3690; REM "location_list
3689 LC$=LC1$+LC2$; GOTO 3690; REM "not found replace with a BLANK
3690 GOTO 3615
3691 LOC_CHG$=LC$; REM "Put in loc_chg$ and leave
3695 RETURN 
3700 REM "Get cat item entry in CI_TEMPLATE$ and generate CAT_ITEM_SECTION$ containing an entry for each item in the catalog
3702 CAT_ITEM_SECTION$="",CI_TAGS$="001<category_desc>002<category_addl_desc>003<category_item_list>004<category_item_um_list>"
3703 REM "Setup CI_TEMPLATE$
3704 CI_TEMPLATE$=LINE$
3705 READ (100,END=3706)LINE$; GOSUB 8150; CI_TEMPLATE$=CI_TEMPLATE$+LINE$+EOL$; IF POS("?tf?category_entry_end?"=LINE$)=0 THEN GOTO 3705
3706 IF LEN(EC$[6])<10 THEN GOTO 3795
3708 FOR CAT_I=1 TO LEN(EC$[6])-9 STEP 10
3709 CATALOG_ID$=EC$[2](51,10); READ (Z[15],KEY=CATALOG_ID$+EC$[6](CAT_I,10),DOM=3710); REM "Position catalog
3710 DIM ECH$(60); READ (Z[15],END=3791)ECH$; IF ECH$(1,10)<>CATALOG_ID$ OR ECH$(11,10)<>EC$[6](CAT_I,10) THEN GOTO 3791
3712 DIM ECG$(100); READ (Z[14],KEY=ECH$(11,10),DOM=3710)ECG$
3714 CI$=CI_TEMPLATE$
3715 CI_INDEX=POS("?tf?"=CI$); IF CI_INDEX=0 THEN GOTO 3791
3716 CIEND_INDEX=POS("?"=CI$(CI_INDEX+4)),CI_TAG$=CI$(CI_INDEX+4,CIEND_INDEX-1),CI1$=CI$(1,CI_INDEX-1),CI2$=CI$(CI_INDEX+CIEND_INDEX+4),CI_POS=POS("<"+CI_TAG$+">"=CI_TAGS$); IF CI_POS=0 THEN CI$=CI1$+CI2$,CI_INDEX=0 ELSE CI_INDEX=NUM(CI_TAGS$(CI_POS-3,3))
3720 ON CI_INDEX GOTO 3789,3721,3722,3723,3724,3789
3721 CI$=CI1$+STP(ECG$(11,30),1)+CI2$; GOTO 3790; REM "category_desc
3722 CI$=CI1$+STP(ECG$(41,60),1)+CI2$; GOTO 3790; REM "category_addl_desc
3723 UM=0; GOSUB 3800; CI$=CI1$+CI_LIST$+CI2$; GOTO 3790; REM "category_item_list
3724 UM=1; GOSUB 3800; CI$=CI1$+CI_LIST$+CI2$; GOTO 3790; REM "catetory_item_um_list adds u/m to descriptions
3789 CI$=CI1$+CI2$; GOTO 3790; REM "tag not found
3790 GOTO 3715
3791 IF LEN(CAT_ITEM_SECTION$)+LEN(CI$)>64000 THEN PRINT (OUTPUT)CAT_ITEM_SECTION$,EOL$,; CAT_ITEM_SECTION$=""; REM "ssp# 130807
3792 CAT_ITEM_SECTION$=CAT_ITEM_SECTION$+CI$; NEXT CAT_I; REM "Add to cat item section, then get next category if any, moved from 3791 by ssp#130807
3795 RETURN 
3800 REM "Process list of items for a category, when we come in, ECH$ holds the first item for the list
3805 CI_LIST$="<option value="+QUO+QUO+">"
3809 CURR_CATEGORY$=ECH$(11,10); GOTO 3811; REM "First time thru, skip read we already have ECH$
3810 DIM ECH$(60); READ (Z[15],END=3830)ECH$; IF ECH$(1,10)<>CATALOG_ID$ OR ECH$(11,10)<>CURR_CATEGORY$ THEN GOTO 3830
3811 DIM FM1$(449),FM1[31]; FIND (Z[7],KEY=ECH$(41,20),DOM=3812)IOL=0370
3813 IF UM THEN CI_UM$=" - "+STP(FM1$(100,4),2)+"/"+STP(STR(FM1[4]:"#####"),2) ELSE CI_UM$=""
3815 CI_LIST$=CI_LIST$+"<option value="+QUO+FM1$(11,10)+QUO+">"+STP(ECH$(21,20),1)+"-"+STP(FM1$(42,40),1)+CI_UM$+"</option>"
3820 GOTO 3810
3830 REM "Clean up CI_LIST$, etc,
3832 CTMP=POS("</select>"=CI1$,-1); IF CTMP<>0 THEN CI_LIST$=CI_LIST$+"</select>"; IF CTMP=1 THEN CI1$="" ELSE CI1$=CI1$(1,CTMP-1)
3833 IF CI2$>"" THEN IF CI2$(1,1)=">" THEN CI2$=CI2$(2); REM "if token was part of a comment, then remove the end of the comment
3845 RETURN 
3850 REM "get line message section (linemessage_start)
3852 LINEMSG_SECTION$="",LM_TEMPLATE$=LS2$(2); IF LS1$(LEN(LS1$)-1,2)="<!" THEN LS1$=LS1$(1,LEN(LS1$)-2)
3853 LINEMSG_END=POS("<!?tf?linemessage_end"=LM_TEMPLATE$),LM_TEMPLATE$=LM_TEMPLATE$(1,LINEMSG_END-1)
3854 LINEMSG_END=POS("<!?tf?linemessage_end"=LS2$); IF LEN(LS2$)=LINEMSG_END+23 THEN LS2$="" ELSE LS2$=LS2$(LINEMSG_END+23); REM "strip out the line message section from LS2$
3860 CALL "EC3MG0",X3$,X4$,EC_PARM$,EC${ALL},LM_TEMPLATE$,ECE$,MESS_INFO${ALL},""; REM "process messages for line
3891 LINEMSG_SECTION$=LM_TEMPLATE$
3895 RETURN 
3900 REM "Get lotted lines section in LOT_TEMPLATE$ and generate LOT_SECTION$ containing an entry for each order line from ICF for the corresponding line section item
3903 REM "Setup LOT_TEMPLATE$
3904 LOT_TEMPLATE$=LS2$(2)
3905 LOT_END=POS("<!?tf?lotlineend"=LOT_TEMPLATE$),LOT_TEMPLATE$=LOT_TEMPLATE$(1,LOT_END-1)
3906 LS2$=LS2$(2); REM "get rid of trailing > from opening <!?tf?lotlinstart>
3907 LOT_END=POS("<!?tf?lotlineend"=LS2$); IF LEN(LS2$)=LOT_END+18 THEN LS2$="" ELSE LS2$=LS2$(LOT_END+18); REM "strip out the lot section from LS2$
3910 DIM ECR$(1000); FIND (Z[25],KEY=ECE$(29,20),DOM=3911)ECR$
3912 IF STP(ECR$(256,48),1)="" THEN WHSE_LIST$=EC$[11] ELSE WHSE_LIST$=STP(ECR$(256,48),1)
3920 REM "get lot records
3922 CALL "EC3IC1",X3$,X4$,EC_PARM$,EC${ALL},ECE$(29,20),WHSE_LIST$,ECE[0]*ECE[1],ECE[1],ICF_INFO${ALL},NEXT_ICF_INDEX,ECD$(235,8)
3925 REM "IF NEXT_ICF_INDEX=1 THEN LET LOT_TEMPLATE$=""; GOTO 03933; REM "NO LOT RECORDS
3930 REM "output lot section
3932 CALL "EC3IC2",X3$,X4$,EC_PARM$,EC${ALL},LOT_TEMPLATE$,ICF_INFO${ALL},NEXT_ICF_INDEX-1,""
3933 LOT_SECTION$=LOT_TEMPLATE$
3995 RETURN 
4000 REM "delete all message lines for order
4002 READ (Z[24],KEY=WORKSHEET$,DOM=4003)
4004 EC0_KEY$=KEY(Z[24],END=4005); IF EC0_KEY$(1,10)<>WORKSHEET$ THEN GOTO 4005 ELSE REMOVE (Z[24],KEY=EC0_KEY$); GOTO 4004
4045 RETURN 
4050 REM "remove single line message
4052 READ (Z[24],KEY=ECE$(1,10)+ECE$(25,3),DOM=4053)
4054 EC0_KEY$=KEY(Z[24],END=4005); IF EC0_KEY$(1,13)<>ECE$(1,10)+ECE$(25,3) THEN GOTO 4055 ELSE REMOVE (Z[24],KEY=EC0_KEY$); GOTO 4004
4095 RETURN 
7500 REM "If order has not been moved yet, then extract worksheet header and update the non-blank data
7505 ECD_ON_FILE=0; DIM ECD$(579),ECD[1],ORIGINAL_ECD_SHIPTO$(4); EXTRACT (Z[2],KEY=ECD_IN$(1,10),DOM=7506)IOL=0310; ECD_ON_FILE=1,ORIGINAL_ECD_SHIPTO$=ECD$(36,4); GOTO 7510
7506 REM "If not on file, default fields in ECD$
7507 ECD$(1,10)=ECD_IN$(1,10),ECD$(11,15)=EC$[1](8,15),ECD$(26,10)=EC$[2](51,10),ECD$(36,4)=EC$[2](61,4); GOSUB 8126; REM "Worksheet #,buyer id, customer code, location code
7508 ECD$(115,8)=EC$[1](8,15),ECD$(126,8)=DAY,ECD$(134,5)=STR(TIM:"00.00"); REM "login (1st 8), 1st day, 1st tim
7510 ECD$(139,8)=EC$[1](8,15),ECD$(150,8)=DAY,ECD$(158,5)=STR(TIM:"00.00"); REM "Last modified info
7512 IF ECD$(51,1)="Y" THEN GOTO 7545; REM "If moved to order file, then we can't change anything in the header
7513 IF ECD_ON_FILE=0 OR ECD_IN$(36,4)<>ECD$(36,4) AND ECD_IN$(36,4)<>DIM(4) OR STP(ECD$(243,87),3," ")="" THEN LOCATION_CHANGED=1 ELSE LOCATION_CHANGED=0
7515 REM "If field in ECD_IN$ is non-blank, then overwrite info in ECD$
7516 ISTR$="026010|036004|040010|058006|064030|094015|109006|163005|168020|188001|189001|190015|205030|235008|243030|273030|303016|319002|321009|330035|365010|375001|376035|"
7520 FOR II=1 TO LEN(ISTR$)-6 STEP 7
7522 XX=NUM(ISTR$(II,3)),YY=NUM(ISTR$(II+3,3)); IF STP(ECD_IN$(XX,YY),3," ")="" THEN GOTO 7524 ELSE ECD$(XX,YY)=ECD_IN$(XX,YY)
7524 NEXT II
7530 IF ECD_IN$(243,87)<>DIM(87) THEN ECD$(243,87)=ECD_IN$(243,87); REM "144949 - if manual shiptos then override here
7535 GOSUB 2100; REM "Reset location related fields
7540 WRITE (Z[2],KEY=ECD$(1,10))IOL=0310
7541 WRITE (Z[4],KEY=ECD$(26,10)+ECD$(11,15)+ECD$(1,10)); REM "ECF sort
7542 WRITE (Z[10],KEY=ECD$(11,15)+ECD$(40,10)+ECD$(163,5)+ECD$(1,10)); REM "ECJ sort by buyer id, customer req & worksheet number
7545 RETURN 
7550 REM "find FM1 and IC0 records, setup def_xx$ if needed for defaulting, use FM1 first then IC0 data
7553 DEF_UM$="",DEF_QTY_UM=1,DEF_DESC$=""
7554 IF ECE$(28,1)=" " THEN ECE$(28,1)="C"; REM "For now, if blank default to custom
7555 IF STP(ECE$(29,10),3," ")="" AND ECE$(28,1)="C" THEN ECE$(29,10)=ECD$(26,10)
7556 IF REAL_ITEM_KEY$<>"" THEN ECE$(29,20)=REAL_ITEM_KEY$; GOTO 7560 ELSE READ (Z[18],KEY=EC$[2](325,10)+ECE$(39,10),DOM=7557)
7557 IF EC$[14](441,1)="Y" THEN GOTO 7560 ELSE CKECI$=KEY(Z[18],END=7558); IF CKECI$(1,20)<>EC$[2](325,10)+ECE$(39,10) THEN GOTO 7558 ELSE ECE$(29,20)=CKECI$(31,20); GOTO 7560; REM "ssp 135970, if server doesn't use catalog then skip check
7558 ECE$(11,2)="02",MESSAGE_NO=2; MESS_INFO$[1]=STP(ECE$(39,10),2); GOTO 7595; REM "if not in Catalog then flag error
7560 DIM FM1$(449),FM1[31]; FIND (Z[7],KEY=ECE$(29,20),DOM=7565)IOL=0370
7561 SET_BY_FM1=1,DEF_DESC$=FM1$(42,40),DEF_UM$=FM1$(100,4),DEF_QTY_UM=FM1[4]
7562 IF STP(FM1$(238,4),3," ")="" THEN GOTO 7563 ELSE DEF_UM$=FM1$(238,4),DEF_QTY_UM=FM1[25]; REM "Use alternate unit of issue
7563 IF STP(FM1$(185,10),3," ")="" THEN GOTO 7564 ELSE ECE$(29,10)=FM1$(185,10); REM "ssp110406
7570 DIM IC0$(187),IC0[40]; FIND (Z[6],KEY=ECE$(29,20),DOM=7575)IOL=0360
7571 SET_BY_IC0=1; IF DEF_DESC$="" THEN DEF_DESC$=IC0$(21,40) END_IF ; IF DEF_UM$="" THEN DEF_UM$=IC0$(120,4),DEF_QTY_UM=IC0[14]
7580 IF SET_BY_FM1=0 AND SET_BY_IC0=1 THEN ECE$(11,2)="01",MESSAGE_NO=1; MESS_INFO$[1]=STP(ECE$(39,10),2); GOSUB 3000; GOTO 7595; REM "if not in FM1 or IC0 then flag error
7582 IF STP(ECE$(67,40),3," ")="" THEN ECE$(67,40)=DEF_DESC$
7583 IF STP(ECE$(107,4),3," ")="" THEN ECE$(107,4)=DEF_UM$,ECE[1]=DEF_QTY_UM
7584 IF ECE[1]=0 THEN ECE[1]=DEF_QTY_UM
7595 GOSUB 8400; RETURN 
7600 REM "Do calculations for worksheet line
7603 QTY_DIVISOR=1; GOTO 7645; REM "ECE[0] should be in the correct units already so we will just set QTY_DIVISOR to one
7604 REM "Set qty_divisor
7605 DIM UM$(22),UM[5]; FIND (Z[13],KEY="U/M"+ECE$(107,4),DOM=7606)IOL=0430
7607 IF UM$(20,1)="Y" OR UM$(21,1)="Y" OR ECE[1]=0 THEN QTY_DIVISOR=1 ELSE QTY_DIVISOR=ECE[1]
7645 RETURN 
7650 REM "Given VALUE$ set ship via code &description
7654 ECD_IN$(188,1)=" "
7655 VALUE$=STP(VALUE$,2); IF VALUE$="" THEN GOTO 7695 ELSE IF LEN(VALUE$)>1 THEN VALUE$=VALUE$(1,1)
7660 DIM FMPS$(20); FIND (Z[9],KEY="S"+VALUE$,DOM=7695)IOL=0390
7665 ECD_IN$(188,1)=VALUE$,ECD_IN$(94,15)=FMPS$(3,15)
7695 RETURN 
7700 REM "Given VALUE$ set how to ship code & description
7704 ECD_IN$(189,1)=" ",ECD_IN$(190,15)=""
7705 VALUE$=STP(VALUE$,2); IF VALUE$="" THEN GOTO 7745 ELSE IF LEN(VALUE$)>1 THEN VALUE$=VALUE$(1,1)
7710 DIM FMPH$(20); FIND (Z[9],KEY="H"+VALUE$,DOM=7745)IOL=0391
7715 ECD_IN$(189,1)=VALUE$,ECD_IN$(190,15)=FMPH$(3,15)
7745 RETURN 
7750 REM "Given VALUE$ fill in zip code, removing any dashes
7755 P=POS("-"=VALUE$); IF P>0 THEN IF P=LEN(VALUE$) THEN VALUE$=VALUE$(1,P-1); GOTO 7755 ELSE IF P=1 THEN VALUE$=VALUE$(2); GOTO 7755 ELSE IF P<>0 THEN VALUE$=VALUE$(1,P-1)+VALUE$(P+1)
7790 ECD_IN$(321,9)=VALUE$
7795 RETURN 
7800 REM "DELETE_ORDER worksheet, remove from ECD,ECE & ECF, if current worksheet then clear current worksheet info. if no worksheet # given, delete the current worksheet
7805 IF STP(ECD_IN$(1,10),3," ")="" THEN ECD_IN$(1,10)=EC$[1](97,10); REM "If worksheet blank, substitute current worksheet
7810 EXTRACT (Z[2],KEY=ECD_IN$(1,10),DOM=7835)IOL=0310; REM "If not found then make sure not in other files then leave
7830 REMOVE (Z[2],KEY=ECD_IN$(1,10),DOM=7831)
7831 GOSUB 8100
7832 GOSUB 4000; REM "clear message lines
7835 REM "Remove from other files
7836 REMOVE (Z[4],KEY=ECD$(26,10)+ECD$(11,15)+ECD$(1,10),DOM=7837)
7837 REMOVE (Z[4],KEY=ECD_IN$(26,10)+ECD_IN$(11,15)+ECD_IN$(1,10),DOM=7838); REM "Try with both ecd and ecd_in in case we didn't find ecd$
7838 READ (Z[3],KEY=ECD_IN$(1,10),DOM=7839)
7839 KEY_3$=KEY(Z[3],END=7840); IF KEY_3$(1,10)=ECD_IN$(1,10) THEN REMOVE (Z[3],KEY=KEY_3$,DOM=7839); GOTO 7839
7840 REMOVE (Z[10],KEY=ECD$(11,15)+ECD$(40,10)+ECD$(163,5)+ECD$(1,10),DOM=7841)
7841 REMOVE (Z[10],KEY=ECD_IN$(11,15)+ECD_IN$(40,10)+ECD_IN$(163,5)+ECD_IN$(1,10),DOM=7842); REM "try both in case we didn't find ECD record
7844 ECD_IN$(1)="",ECE_IN$(1)="",ECD$(1)="",ECE$(1)=""; REM "clear input buffers and records
7845 RETURN 
7850 REM "If worksheet # blank, but not customer req number blank then lookup worksheet number via ECJ
7855 BUYER_REQ$=EC$[1](8,15)+ECD_IN$(40,10)+ECD_IN$(163,5)
7860 READ (Z[10],KEY=BUYER_REQ$,DOM=7861)
7865 KEY_10$=KEY(Z[10],END=7895); IF KEY_10$(1,30)<>BUYER_REQ$ THEN GOTO 7895
7875 ECD_IN$(1,10)=KEY_10$(31,10); REM "Found matching req for this buyer, so use its worksheet number
7895 RETURN 
7900 REM "Convert to order using FM2RTO
7904 IF ECD$(235,8)<>DIM(8) THEN GOTO 7995; REM "ssp132511 If already purchased, then skip it, don't give a message, they probably just double clicked
7905 TMP$=FID(Z[11]); HDR_FILE$=TMP$(4,6)+ECD$(1,10),TMP$=FID(Z[12]),LINE_FILE$=TMP$(4,6)
7906 IF STP(ECD$(168,20),3," ")="" THEN ECD$(168,20)=EC$[1](8,15); REM "If ordered by not set, then put in buyer id
7907 IF STP(ECD$(40,10)+ECD$(163,5),3," ")="" THEN ECD$(40,10)=EC$[2](307,10),ECD$(163,5)=EC$[2](317,5); REM "If cust p/o blank add in default cust/po from buyer info ssp#124432
7908 ECD$(58,6)=X3$(15,6),ORIG_ECD$=ECD$,ECD$(40,10)=FN%CVT4$(ECD$(40,10)),ECD$(163,5)=FN%CVT4$(ECD$(163,5))
7910 HIGH$=ECD$(1,25),LINES_ON_ORDER=0; DIM A1$(386),A1[1]; A1$(1)=ECD$(26)
7911 WRITE (Z[11],KEY=A1$(1,24))A1$
7912 READ (Z[12],KEY=A1$(1,24),DOM=7913); REM "Remove any lines we might find out there for this order, there should be none
7913 K12$=KEY(Z[12],END=7914); IF K12$(1,24)=A1$(1,24) THEN REMOVE (Z[12],KEY=K12$,DOM=7913); GOTO 7913 ELSE GOTO 7914
7914 READ (Z[3],KEY=HIGH$(1,10),DOM=7915)
7915 READ RECORD (Z[3],END=7920)B$; IF B$(1,10)<>HIGH$(1,10) THEN GOTO 7920
7916 DIM B1$(639); B1$(1)=A1$(1,24)+B$(25),B1$(228,5)=B$(13,5),LINES_ON_ORDER=LINES_ON_ORDER+1; WRITE RECORD (Z[12],KEY=A1$(1,24)+B1$(25,3))B1$
7919 GOTO 7915
7920 IF EC_PARM$(708,1)="Y" THEN OPTIONS$=OPTIONS$+"G" ELSE IF EC$[7](233,1)="Y" THEN OPTIONS$=OPTIONS$+"W"; REM "other whse option
7948 IF EC$[2](338,1)="Y" THEN HDR_FILE$="9999zzzz"; GOTO 7951; REM "buyer set for testing
7950 CALL "FM2RTO",X3$,X4$,0,A1$,A1{ALL},HDR_FILE$,LINE_FILE$,OPTIONS$; REM "Order number returned in HDR_FILE$
7955 ORDER_INFO$="Y"+STR(LINES_ON_ORDER:"000"); ORDER_INFO$=GBL("ORDER_INFO",ORDER_INFO$); REM "set ORDER_INFO for server to see
7960 READ (Z[11],KEY=A1$(1,24))A1$; ECD$(26,LEN(A1$))=A1$,ECD$(235,8)=HDR_FILE$; WRITE (Z[2],KEY=ECD$(1,10))IOL=0310; REMOVE (Z[11],KEY=A1$(1,24),DOM=7961)
7965 READ (Z[12],KEY=A1$(1,24),DOM=7966)
7970 KEY_12$=KEY(Z[12],END=7971); IF KEY_12$(1,24)=A1$(1,24) THEN REMOVE (Z[12],KEY=KEY_12$,DOM=7970)
7975 REQUESTED_EMAIL_ACTION$="O"; GOSUB 8550; REM "Send 'O'rder emails if needed
7984 REM "Clear current worksheet # in session record on disk & in memory
7985 EC$[1](97,10)=""; EXTRACT RECORD (Z[5],KEY=EC$[1](1,7),DOM=7987)ECB$
7986 ECB$(97,10)=""; WRITE RECORD (Z[5],KEY=EC$[1](1,7))ECB$
7995 RETURN 
8000 REM "take Q$, try to figure out date and return in Q$
8001 REM "assume MM?DD?YY(YY) format where we don't care about ?'s. if only YY then pivot on 60
8004 IF LEN(Q$)=7 AND Q$(2,1)="/" THEN Q$="0"+Q$; REM "135234
8005 IF LEN(Q$)<6 THEN GOTO 8045 ELSE IF LEN(Q$)>=8 THEN Q$=Q$(1,2)+Q$(4,2)+Q$(7); IF LEN(Q$)>8 THEN Q$=Q$(1,8)
8009 REM "NOW in MMDDYY.. format
8010 IF LEN(Q$(5))>2 THEN YY$=Q$(5) ELSE IF Q$(5)<"60" THEN YY$="20"+Q$(5) ELSE YY$="19"+Q$(5)
8015 TMP$=Q$,Q$=DIM(6),Q$=CHR(NUM(YY$(1,3),ERR=8016)-125,ERR=8016)+YY$(4,1)+TMP$(1,4); REM "135884
8045 RETURN 
8050 REM "New order, get new worksheet number
8055 DIM ECTMP$(256); EXTRACT (Z[13],KEY=X3$(9,3)+"E/C",DOM=8056)ECTMP$
8057 IF STP(ECTMP$(115,10),3," ")="" THEN ECD_IN$(1,10)=DIM(9,"0")+"1",ECTMP$(115,10)=DIM(9,"0")+"2" ELSE ECD_IN$(1,10)=ECTMP$(115,10),ECTMP$(115,10)=STR(NUM(ECTMP$(115,10))+1:"0000000000"); WRITE (Z[13],KEY=X3$(9,3)+"E/C")ECTMP$
8060 FIND (Z[2],KEY=ECD_IN$(1,10),DOM=8061); GOTO 8055; REM "if already exists then try another number
8065 EC$[1](97,10)=ECD_IN$(1,10); EXTRACT RECORD (Z[5],KEY=EC$[1](1,7),DOM=8067)ECB$
8066 ECB$(97,10)=ECD_IN$(1,10); WRITE RECORD (Z[5],KEY=EC$[1](1,7))ECB$
8095 RETURN 
8100 REM "Clear current worksheet
8105 EC$[1](97,10)=""; EXTRACT RECORD (Z[5],KEY=EC$[1](1,7),DOM=8111)ECB$
8110 ECB$(97,10)=""; WRITE RECORD (Z[5],KEY=EC$[1](1,7))ECB$
8115 REM "Default values in ECD$ for display etc.
8120 DIM ECD$(579),ECD[1],ECE$(129),ECE[1]
8125 ECD$(26,14)=EC$[2](51,14); REM "Set customer & ship to from buyer
8126 DIM FMPD$(243); FIND (Z[9],KEY="D"+ECD$(26,10),DOM=8127)FMPD$
8127 IF STP(ECD$(36,4),3," ")="" THEN ECD$(36,4)=FMPD$(125,4); REM "if blank, default from customer default ship to removed check on manual shiptos allowed: IF EC$[7](232,1)<>"Y"
8130 DIM FM0$(521); READ (Z[8],KEY="C"+ECD$(26,14),DOM=8131)IOL=0380
8132 ECD$(243,87)=FM0$(51,87),ECD$(376,35)=FM0$(16,35)
8145 RETURN 
8150 REM "Send LINE$ to EC3BYB for generic fields processing
8160 CALL "EC3BYB",ERR=8161,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,LINE$,BYBINFO${ALL},BYBOPTIONS$
8195 RETURN 
8200 REM "DELETE_LINE, delete a single line given DEL_INDEX. We expect the corresponding line number in ECE_IN_DATA$[] array in (25,3).If line_number not given, don't delete anything.
8205 IF NUM(ECE_IN_DATA$[DEL_INDEX](25,3),ERR=8245)=0 THEN GOTO 8245
8206 IF STP(ECD_IN$(1,10),3," ")="" THEN ECD_IN$(1,10)=EC$[1](97,10); REM "If worksheet blank, substitute current worksheet
8210 REMOVE (Z[3],KEY=ECD_IN$(1,10)+ECE_IN_DATA$[DEL_INDEX](25,3),DOM=8211)
8215 WORKSHEET$=ECD_IN$(1,10); REM "Update worksheet number used in display
8245 RETURN 
8250 REM "Reads for a worksheet line
8265 DIM EC7$(200),EC7[1]; EC7$(1,13)=ECE$(1,10)+ECE$(25,3); REM "Worksheet #, line #
8270 FIND (Z[22],KEY=EC7$(1,13),DOM=8271)IOL=0420
8295 RETURN 
8300 REM "Retreive 1 or more values in VALUE$ place in VAL$[] and set VAL_COUNT-Values seperated by ', 's (that is comma + blank), current max of 200 values, 132667
8301 REM "We will add all values blank or not
8305 DIM VAL$[2000]; VAL_COUNT=0
8310 IF VAL_COUNT=2000 THEN GOTO 8340 ELSE VP=POS(", "=VALUE$); IF VP=0 THEN GOTO 8335
8315 VAL_COUNT=VAL_COUNT+1; IF VP=1 THEN VAL$[VAL_COUNT]="",VALUE$=VALUE$(3); GOTO 8310 ELSE VAL$[VAL_COUNT]=VALUE$(1,VP-1); IF VP=LEN(VALUE$) THEN VALUE$=""; GOTO 8340 ELSE VALUE$=VALUE$(VP+2); GOTO 8310
8335 REM "finish up last one
8337 VAL_COUNT=VAL_COUNT+1; VAL$[VAL_COUNT]=VALUE$
8340 IF VAL_COUNT>HIGHEST_VAL_COUNT THEN FOR TMP_INDEX=HIGHEST_VAL_COUNT+1 TO VAL_COUNT; ECE_IN_DATA$[TMP_INDEX]=DIM(LEN(ECE_IN$)); NEXT TMP_INDEX; HIGHEST_VAL_COUNT=VAL_COUNT; REM "If new higher val count value then initialize corresponding strings in ECE_IN_DATA$[]
8345 RETURN 
8350 REM "ck to see if worksheet line to be printed
8352 GOSUB 4050; ORDER_MESSAGE_NO=0; DIM ECX$(512); IF STP(ECE_IN$(11),3," ")="" THEN GOTO 8390 ELSE IF NUM(ECE$(11,2))=0 THEN GOTO 8380
8354 DIM MSGKEY$(15),MSGTMP$(512); MSGKEY$(1,10)="EC3WS0",MSGKEY$(11,5)=STR(NUM(ECE$(11,2)):"00000"); FIND (Z[17],KEY=MSGKEY$,DOM=8380)MSGTMP$
8356 IF MSGTMP$(290,1)="Y" THEN ORDER_MESSAGE_NO=MESSAGE_NO,ORDER_MESSSAGE$=MESSAGE$; GOTO 8370 ELSE ORDER_MESSAGE_NO=MESSAGE_NO,ORDER_MESSAGE$=MESSAGE$; GOTO 8380; REM "ck flag to prevent order line addition
8370 REMOVE (Z[3],KEY=ECE$(1,10)+ECE$(25,3),DOM=8390); GOTO 8390
8380 GOSUB 8500; WRITE (Z[3],KEY=ECE$(1,10)+ECE$(25,3))IOL=0330
8381 GOSUB 3000
8383 REM "write message to EC0 file
8384 IF ORDER_MESSAGE_NO=0 THEN GOTO 8390
8385 DIM EC0$(295); EC0$(1,10)=ECE$(1,10),EC0$(11,3)=ECE$(25,3),EC0$(14,3)="001",EC0$(17,10)="EC3WS0",EC0$(27,5)=STR(MESSAGE_NO:"00000")
8386 EC0$(32,240)=MESSAGE$,EC0$(272,1)=ECX$(16,1)
8387 WRITE (Z[24],KEY=EC0$(1,16),DOM=8388)EC0$; GOTO 8389
8388 EC0$(14,3)=STR(NUM(EC0$(14,3))+1:"000"); GOTO 8387
8390 ORDER_MESSAGE_NO=MESSAGE_NO,MESSAGE_NO=0,MESSAGE$=""
8395 RETURN 
8400 REM "ck other things about the product to see if message required
8401 IF MESSAGE_NO<>0 THEN GOTO 8490; REM "if message situation already exists (invalid item) then don't check for further situations
8402 DIM CHANNELS[4]; CHANNELS[1]=Z[19],CHANNELS[2]=Z[20],CHANNELS[3]=Z[21],CHANNELS[4]=Z[25]
8403 DIM OPTIONS$(20); OPTIONS$(1,2)="OI",OPTIONS$(4,1)=FM1$(105,1)
8404 IF STP(ECE$(39,10),3," ")="" THEN GOTO 8495; REM "no item code entered
8405 DIM IC1INFO[1],FM3[1],FM3ALL[1],FM4[1],FM4ALL[1],FORM_OTHER[1],FORM_OTHERALL[1]; REM "need to set dimensions to avoid err 42 on call - EC3IC0 dimensions to necessary sizes
8407 IC0_ITEM_KEY$=ECE$(29,20)
8410 CALL "EC3IC0",X3$,X4$,EC_PARM$,EC${ALL},IC0_ITEM_KEY$,USAGE_KEYS$,CHANNELS{ALL},IC1INFO{ALL},FM3{ALL},FM3ALL{ALL},FM4$,FM4{ALL},FM4{ALL},FORM_OTHER{ALL},FORM_OTHERALL{ALL},OPTIONS$
8414 REM "ck availability
8415 ON_HAND=IC1INFO[30],IC1_AVAIL=IC1INFO[31],IC1_BO=IC1INFO[11]; IF ECE[1]=0 THEN IC1_AVAIL_UM=IC_AVAIL ELSE IC1_AVAIL_UM=IC1_AVAIL/ECE[1]
8417 IF ECE[0]*ECE[1]<=IC1_AVAIL THEN GOTO 8425; REM "adequate stock
8418 IF IC1_AVAIL<=0 THEN ECE$(11,2)="03",MESSAGE_NO=3; MESS_INFO$[1]=ECE$(39,10); GOTO 8495; REM "no stock avail
8419 REM "IF here then ic1_avail>0 (or 8418 sends to 8495) and ece[0]*ece[1]>ic1_avail (or 8417 sends to 8495)
8420 INT_MASK$="#,###,###",DEC_MASK$="#,###,###.00"
8421 ECE$(11,2)="04",MESSAGE_NO=4; MESS_INFO$[1]=STP(ECE$(39,10),2),MESS_INFO$[2]=STP(STR(IC1_AVAIL:INT_MASK$),2),MESS_INFO$[3]=STP(STR(ECE[0]*ECE[1]:INT_MASK$),2),MESS_INFO$[4]=STP(STR(ECE[0]*ECE[1]-IC1_AVAIL:INT_MASK$),2),MESS_INFO$[5]=STP(ECE$(107,4),2),MESS_INFO$[6]=STP(STR(ECE[1]:INT_MASK$),2); REM "Set message, 1=itemcode, 2=qty avail/eaches 3=qty ordered eaches, 4=qty remaining eaches,5=u/m,6=qty per u /m
8422 IF FPT(IC1_AVAIL_UM)=0 THEN MESS_INFO$[7]=STP(STR(IC1_AVAIL_UM:INT_MASK$),2) ELSE MESS_INFO$[7]=STP(STR(IC1_AVAIL_UM:DEC_MASK$),2) END_IF ; MESS_INFO$[8]=STP(STR(ECE[0]:INT_MASK$),2); TMPQTY=ECE[0]-IC1_AVAIL_UM; IF FPT(TMPQTY)=0 THEN MESS_INFO$[9]=STP(STR(TMPQTY:DEC_MASK$),2) ELSE MESS_INFO$[9]=STP(STR(TMPQTY:DEC_MASK$),2) END_IF ; REM "7=qty avail/in um, 8=qty ordered in um, 9=calculated remaining in um
8424 GOTO 8495; REM "Done with setting messages for EC3WS0-00004 error, so leave
8425 REM "Pickup processing after qty avail check
8495 RETURN 
8500 REM "Update 3rd party info if needed
8505 IF P_ID$="" THEN GOTO 8545
8510 DIM EC7$(200),EC7[1]
8515 EC7$(1,13)=ECE$(1,10)+ECE$(25,3); REM "Worksheet #, line #
8517 EC7$(14,10)=P_ID$,EC7$(24,20)=P_INFO_1$,EC7$(44,20)=P_INFO_2$; REM "3p id, 3p info fields 1&2
8530 WRITE (Z[22],KEY=EC7$(1,13))IOL=0420
8545 RETURN 
8550 REM "Add email addresses, if any, to EC$[12]
8551 REM "REQUESTED_EMAIL_ACTION$ = this is the action to process
8555 CALL "ZZDISP","AX",ECD$(235,8),"O/P",X3$,ORDER_NO$,"",0,0,X4$
8560 FOR EI=0 TO 3; ON EI GOTO 8561,8562,8563,8564
8561 EMAIL_ADDR$=STP(EC$[2](109,60),2),EMAIL_ACTIONS$=STP(EC$[2](256,10),2); GOTO 8565
8562 EMAIL_ADDR$=STP(EC$[2](169,60),2),EMAIL_ACTIONS$=STP(EC$[2](266,10),2); GOTO 8565
8563 EMAIL_ADDR$=STP(EC$[2](340,60),2),EMAIL_ACTIONS$=STP(EC$[2](460,10),2); GOTO 8565
8564 EMAIL_ADDR$=STP(EC$[2](400,60),2),EMAIL_ACTIONS$=STP(EC$[2](470,10),2); GOTO 8565
8565 IF POS(REQUESTED_EMAIL_ACTION$=EMAIL_ACTIONS$)=0 THEN GOTO 8580; REM "If the action being requested is not in current email then skip
8567 IF EMAIL_ADDR$="" THEN GOTO 8580; REM "Skip if address blank
8570 ETMP$="{[email]"+EMAIL_ADDR$; REM "Email address
8572 CALL "EC3SEM",X3$,X4$,EC_PARM$,EC${ALL},"EMAILSUB_"+REQUESTED_EMAIL_ACTION$,ECD$(1,10),SUBJECT$; ETMP$=ETMP$+"[subject]"+SUBJECT$
8579 ETMP$=ETMP$+"}",EC$[12]=EC$[12]+ETMP$
8580 NEXT EI
8595 RETURN 
8600 REM "get emails
8700 REM "given VAL_INDEX, load from VAL$[VAL_INDEX] into ECE_IN_DATA[VAL_INDEX,ECE_BUCKET(will be 0 or 1 right now)] if VAL$[VAL_INDEX] is blank, then no value is loaded, otherwise load it (if it is numeric) and set ECE_SET_DATA[VAL_INDEX,ECE _BUCKET] to 1
8710 IF STP(VAL$[VAL_INDEX],3," ")="" OR VAL$[VAL_INDEX]="" THEN GOTO 8745
8715 ECE_IN_DATA[VAL_INDEX,ECE_BUCKET]=NUM(VAL$[VAL_INDEX],ERR=8716),ECE_SET_DATA[VAL_INDEX,ECE_BUCKET]=1
8745 RETURN 
8910 DEF FND$(Z9$)=Z9$(1*2+1,2)+"/"+Z9$(7-1*2,2)+"/"+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
8915 DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
8920 DEF FNR$(X$)=STR(10000000-NUM(STR(ASC(X$(1,1)))+X$(2)):"0000000")
8950 REM "This line here to avoid error 28 when exiting loops inside 1000's
8960 EXITTO 1090
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$); REM "131928
9090 GOTO 9900
9900 REM "End
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9950 EXIT 
9999 END 
