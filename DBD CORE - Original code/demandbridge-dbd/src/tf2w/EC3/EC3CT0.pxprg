0010 ! EC3CCV - Credit card authorization program
0035 REM "5.7 - 02/27/15 - 14.295 - jvv - SSP# 229993
0037 REM "229993-PCI/PA-DSS New CC Module                                    
0040 REM "Copyright 2015 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0042 CLEAR ; SETERR 0055; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0055 SETERR 9000
0060 ! 
0070 DIM Z[100]; Z$="01O CD0...  02O ECD...  03O GRB...  04O AR1...  05O PO3...  13O ZZPARM  "
0071 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,0; ON Z0 GOTO 0072,9900
0075 ! 
0080 ! WO215237, read the AR system parameters to see if there is a default merchant account, if so then use it, if not then read for the first record in CD0, that will be the default, then check for a possible customer specific merchant account
0085 DIM ARS$(255); READ (Z[13],KEY=X3$(9,3)+"A/R",DOM=*NEXT)ARS$(1); IF ARS$(244,10)<>DIM(10) THEN READ (Z[1],KEY=ARS$(244,10),DOM=*NEXT)CD0$; GOTO READ_CUST ! If default set in parameters then get the record and skip to check for customer setting, WO215237
0086 READ (Z[1],KEY="",DOM=*NEXT) ! reposition file to beginning in case we got the DOM, WO215237
0089 ! 
0090 READ (Z[1],ERR=9000)CD0$
0095 ! 
0100 READ_CUST:! WO215237, read customer record, if Merchant Account present, use it instead of the default
0110 DIM ECD$(1580); FIND (Z[2],KEY=EC$[1](97,10),DOM=*NEXT)ECD$(1); DIM AR1$(599); READ (Z[4],KEY=ECD$(26,10),DOM=*NEXT)AR1$(1); IF AR1$(484,10)<>DIM(10) THEN READ (Z[1],KEY=AR1$(484,10),DOM=*NEXT)CD0$ ! Read worksheet header to get customer code, read customer record, check for valid merchant account, WO215237
0130 ! 
0135 M0$="#########0.00"
0150 CC_CMD$="",CC_PARAMS$="",CC_EXP$="",REDIRECT_URL$="",SESSION_ID$="",P_RESPMSG$="",P_PNREF$=""
0151 ! 
0160 IF POS("T"=STP(CD0$(41,10)))>0 THEN {! Use SAGEPay provider
0170 CC_CMD$=" -provider T -url "+STP(CD0$(111,255))+" "+CC_CMD$; GOTO 0230
0180  } ELSE IF POS("V"=STP(CD0$(41,10)))>0 THEN {! Use Verisign provider
0190 CC_CMD$=" -provider V -certpath "+STP(CD0$(494,150))+" -host "+STP(CD0$(430,32))+" -port "+STP(CD0$(462,32))+" -vendor "+STP(CD0$(366,32))+" -partner "+STP(CD0$(398,32))+CC_CMD$; GOTO 0230
0195  } ELSE IF POS("U"=STP(CD0$(41,10)))>0 THEN {! Use CyberSource Tokenized Provider WO239471
0196 CC_CMD$=" -provider U -service PAC "+CC_CMD$; GOTO 0230 ! WO239471
0200  } ELSE {! Unknown provider, error
0210 GOTO 0810
0220  }
0230 IF POS("U"=STP(CD0$(41,10)))>0 THEN CC_CMD$=" -user "+STP(CD0$(51,30))+" -password "+"NONE"+" "+CC_CMD$ ELSE CC_CMD$=" -user "+STP(CD0$(51,30))+" -password "+STP(CD0$(81,30))+" "+CC_CMD$ ! WO239471
0240 GOSUB 2000; REM "Get invoice data
0245 IF CCVERR=1 THEN P_RESPMSG$="Error reading shopping cart information"; GOTO 0900
0300 ! Prepare command line param string; Gather other data
0305 FOR II=1 TO NUM_ENTRIES
0310 TAG$=DATA$[II,0],VALUE$=DATA$[II,1]
0315 SWITCH UCS(TAG$)
0320 CASE "REDIRECT"
0325 REDIRECT_URL$=VALUE$; BREAK
0330 CASE "SESSION_ID"
0335 SESSION_ID$=VALUE$; BREAK
0340 CASE "CC_GUID"
0345 CC_PARAMS$=CC_PARAMS$+"TF_VAULT_ID="+VALUE$+"&"; BREAK
0350 CASE "CC_NAME"
0355 CC_PARAMS$=CC_PARAMS$+"TF_NAME="+SUB(VALUE$," ","+")+"&"; GOSUB SET_FIRST_LAST_NAMES; BREAK ! WO239471
0356 CASE "CC_TYPE" ! WO239471
0357 CC_PARAMS$=CC_PARAMS$+"CC_TYPE="+STP(VALUE$,2)+"&"; BREAK ! WO239471
0360 CASE "CC_EXPIRE_MONTH"
0365 CC_EXP$=VALUE$+CC_EXP$; BREAK
0370 CASE "CC_EXPIRE_YEAR"
0375 CC_EXP$=CC_EXP$+VALUE$; BREAK
0380 CASE "CC_EXPIRE"
0385 CC_EXP$=STP(VALUE$,2); BREAK
0390 CASE "ADDRESS1","CC_BILL_ADDR1"
0395 CC_ADDR$=SUB(VALUE$+" "+STP(CC_ADDR$,2)," ","+"); BREAK
0400 CASE "ADDRESS2","CC_BILL_ADDR2"
0405 CC_ADDR$=SUB(STP(CC_ADDR$,2)+" "+VALUE$," ","+"); BREAK
0410 CASE "CITY","CC_BILL_CITY"
0415 CC_PARAMS$=CC_PARAMS$+"TF_CITY="+SUB(VALUE$," ","+")+"&"; BREAK
0420 CASE "STATE","CC_BILL_STATE"
0425 CC_PARAMS$=CC_PARAMS$+"TF_STATE="+SUB(VALUE$," ","+")+"&"; BREAK
0430 CASE "ZIP","CC_BILL_ZIP"
0435 CC_PARAMS$=CC_PARAMS$+"TF_ZIP="+SUB(VALUE$," ","+")+"&"; BREAK
0436 CASE "CC_CVV" ! WO227413
0437 CC_PARAMS$=CC_PARAMS$+"C_CVV="+STP(VALUE$,2)+"&"; BREAK ! WO227413
0440 DEFAULT 
0445 BREAK
0450 END SWITCH 
0455 NEXT II
0500 ! Additional command line params - no "&" appended to last param in list 
0505 CC_PARAMS$=CC_PARAMS$+"TF_ADDR="+CC_ADDR$+"&"; REM "Billing address 
0510 CC_PARAMS$=CC_PARAMS$+"TF_EMAIL="+EMAIL$+"&" ! WO239471
0515 CC_PARAMS$=CC_PARAMS$+"TF_EXPDATE="+CC_EXP$+"&"; REM "Credit card expiry date 
0520 CC_PARAMS$=CC_PARAMS$+"TF_AMOUNT="+FNN$(INV_TOTAL)+"&"; REM "Invoice total 
0530 CC_PARAMS$=CC_PARAMS$+"T_TAX="+FNN$(INV_TAX)+"&"; REM "Sales tax 
0540 CC_PARAMS$=CC_PARAMS$+"T_CUSTOMER_NUMBER="+SUB(INV_CUST_ID$," ","+")+"&"; REM "Customer id 
0550 CC_PARAMS$=CC_PARAMS$+"T_ORDERNUM="+SUB(INV_ORD_NUM$," ","+"); REM "Order number 
0610 ! Finish preparing the command line params
0620 CC_CMD$=CC_CMD$+" -params "+CC_PARAMS$
0621 ! Store this command line as input in a temp file
0630 TEMP_FILE$="ccauth.in."; GOSUB CREATE_UNIQUE_TEMP_FILE
0631 LOGMESG$="CREATED TEMP INPUT FILE|"+TEMP_FILE$; GOSUB 1400
0635 SLOT=HFN; OPEN LOCK (SLOT,ERR=0810)TEMP_FILE$; PRINT (SLOT)CC_CMD$; CLOSE (SLOT)
0659 ! 
0660 ! Execute the command line
0671 RESP$="",RETURN_CODE=-9999,TEMP_FILE1$=TEMP_FILE$
0680 CALL "ZZ2CMD",X3$,X4$,"{CC_AUTH_100}",TEMP_FILE1$,"NR",RETURN_CODE,RESP$
0690 RESP$=SUB(RESP$,SEP,"|")+"|"
0691 ! LOGMESG$="RETURN CODE: "+STR(RETURN_CODE)+" |RESPONSE:"+RESP$; GOSUB 1400
0780 ! Remove temporary input file
0785 ERASE TEMP_FILE$,ERR=0800
0790 ! 
0800 SUCCESS_YN=POS("Result :Approved"=RESP$,ERR=0810)
0801 IF SUCCESS_YN<>0 THEN GOTO 0815
0810 SUCCESS_YN=0
0819 LOGMESG$="SUCCESS : "+STR(SUCCESS_YN); GOSUB 1400
0820 ! Extract response message and reference code
0830 MSGBUF$=""
0840 INDEX=POS("Message :"=RESP$,ERR=0880); END_INDEX=POS("|"=RESP$(INDEX+9),ERR=0880)
0850 MSGBUF$=MSGBUF$+" : "+STR(INDEX)+", "+STR(END_INDEX)
0860 P_RESPMSG$=RESP$(INDEX+9,END_INDEX-1)
0880 ! Send back response HTML
0890 IF SUCCESS_YN<>0 THEN GOTO 1110 ! ELSE GOTO 0870
0900 ! HTML Response : Transaction NOT approved
0901 LOGMESG$="NOT APPROVED"; GOSUB 1400
0910 FOR IJ=1 TO NUM_ENTRIES
0920 TAG$=DATA$[IJ,0],VALUE$=DATA$[IJ,1]
0930 SWITCH UCS(TAG$)
0940 CASE "BASIC"
0950 DATA$[IJ,1]="EC3WS1"; BREAK
0960 CASE "TEMPLATE"
0970 DATA$[IJ,1]="ordconf.htm"; BREAK
0980 CASE "CCACTION"
0990 DATA$[IJ,1]="C"; BREAK
0991 CASE "CCTEMPLATE"
0992 CCTEMPLATE_YN=1; BREAK ! cctemplate is present
1000 DEFAULT 
1010 BREAK
1020 END SWITCH 
1030 NEXT IJ
1040 NUM_ENTRIES=NUM_ENTRIES+1
1050 DATA$[NUM_ENTRIES,0]="cc_aprvl_ref",DATA$[NUM_ENTRIES,1]=""
1055 NUM_ENTRIES=NUM_ENTRIES+1 ! WO215237
1056 DATA$[NUM_ENTRIES,0]="merch_acct",DATA$[NUM_ENTRIES,1]=CD0$(1,10) ! WO215237
1060 IF CCTEMPLATE_YN=0 THEN { NUM_ENTRIES=NUM_ENTRIES+1
1070 DATA$[NUM_ENTRIES,0]="cctemplate",DATA$[NUM_ENTRIES,1]="ordentcc.htm" }
1080 NUM_ENTRIES=NUM_ENTRIES+1
1090 DATA$[NUM_ENTRIES,0]="respmsg",DATA$[NUM_ENTRIES,1]="An error occurred: "+P_RESPMSG$
1100 GOTO 1285
1110 ! HTML Response : Transaction approved
1115 LOGMESG$="TRANSCTION APPROVED"; GOSUB 1400
1120 INDEX=POS("Reference :"=RESP$,ERR=1145); END_INDEX=POS("|"=RESP$(INDEX+11),ERR=1145)
1125 IF POS("C"=STP(CD0$(41,10)))>0 THEN P_SUBSCRID$=RESP$(INDEX+11,END_INDEX-1); INDEX=INDEX+17; END_INDEX=POS("|"=RESP$(INDEX+11),ERR=1145) ! WO239471
1130 MSGBUF$=MSGBUF$+STR(INDEX)+", "+STR(END_INDEX)
1140 P_PNREF$=RESP$(INDEX+11,END_INDEX-1)
1150 ! 
1160 FOR IK=1 TO NUM_ENTRIES
1170 TAG$=DATA$[IK,0],VALUE$=DATA$[IK,1]
1180 SWITCH UCS(TAG$)
1190 CASE "BASIC"
1200 DATA$[IK,1]="EC3WS1"; BREAK
1205 CASE "CCTEMPLATE"
1206 DATA$[IK,0]=" ",DATA$[IK,1]=" "; BREAK
1207 CASE "CC_NUMBER" ! WO239471
1208 IF POS("C"=STP(CD0$(41,10)))>0 THEN DATA$[IK,1]=P_SUBSCRID$; BREAK ! WO239471 - Replace raw cc number with the CyberSource subscription id
1210 DEFAULT 
1220 BREAK
1230 END SWITCH 
1240 NEXT IK
1250 ! 
1260 NUM_ENTRIES=NUM_ENTRIES+1
1270 DATA$[NUM_ENTRIES,0]="cc_aprvl_ref",DATA$[NUM_ENTRIES,1]=P_PNREF$
1275 NUM_ENTRIES=NUM_ENTRIES+1 ! WO215237
1276 DATA$[NUM_ENTRIES,0]="merch_acct",DATA$[NUM_ENTRIES,1]=CD0$(1,10) ! WO215237
1280 GOTO 1285
1290 ! After processing the transaction; next step, back to server
1300 %NEW_CALL_PROG=1
1310 GOTO 9900
1320 ! 
1330 CREATE_UNIQUE_TEMP_FILE:! take TEMP_FILE$ and make it unique and make it to use, we let caller make the temp_file name so we don't have to be operating system specific
1340 RND$=STR(INT(RND*1000):"0000")
1350 TST=HFN; OPEN (TST,ERR=1360)%SERVER_DIR$+TEMP_FILE$+RND$; CLOSE (TST); GOTO 1340 ! if opened then go get another random number
1360 TEMP_FILE$=%SERVER_DIR$+TEMP_FILE$+RND$; SERIAL TEMP_FILE$ ! name is unique, set it & create file to hold it
1370 RETURN 
1380 ! 
1400 WEBEC_LOG_MESG:! Log LOGMESG$ to the WebEC log file
1410 MESS$="SESSION ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|MESSAGE|CREDIT CARD AUTH|"+LOGMESG$
1420 MX=FN%_LOG_MESSAGE_WITH_FLUSH("MESG",MESS$)
1490 RETURN 
2000 REM "Get customer, order, invoice info
2005 IOL_GRB:IOLIST GRB$,GRB(0),GRB(1),GRB(2),GRB(3),GRB(4),GRB(5),GRB(6),GRB(7),GRB(8),GRB(9),GRB(10),GRB(11),GRB(12),GRB(13),GRB(14),GRB(15),GRB(16),GRB(17),GRB(18),GRB(19),GRB(20)
2010 FIND (Z[2],KEY=EC$[1](97,10),DOM=ERR_NO_REC)ECD$,ECD2$
2020 DIM GRB$(500),GRB(20); FIND (Z[3],KEY=ECD$(509,14),DOM=ERR_NO_REC)IOL=IOL_GRB
2025 DIM PO3$(428); READ (Z[5],KEY=GRB$(92,8)+DIM(5),DOM=*NEXT)PO3$(1) ! WO239471
2030 ! Assign variables
2031 INV_TAX=GRB(4)+GRB(6)+GRB(8); REM "invoice_sales_tax
2032 INV_FREIGHT=GRB(2)+FRT_INSALE; REM "invoice_freight
2033 INV_TOTAL=GRB(9); REM "invoice_total
2034 CALL "ZZDISP","AX",GRB$(15,10),"A/R",X3$,INV_CUST_ID$,"",0,0,X4$; REM "Customer Id
2035 CALL "ZZDISP","AX",GRB$(92,8),"O/P",X3$,INV_ORD_NUM$,"",0,0,X4$; REM "Order Number
2040 EMAIL$=STP(PO3$(299,40),3) ! WO239471, email address, strip all blank spaces
2080 GOTO 2095 ! Done setting reqd. variables
2085 ERR_NO_REC: CCVERR=1; LOGMESG$="Missing worksheet or invoice record"; GOSUB 1400
2095 RETURN 
2099 ! 
2100 SET_FIRST_LAST_NAMES:! WO239471, using cc_name, determine first and last names and set these into parameters list
2110 FULL_NAME$=STP(VALUE$,2),FIRST_NAME$=FULL_NAME$,LAST_NAME$=""
2115 P=POS(" "=FULL_NAME$); IF P=0 THEN GOTO SET_NAMES_INTO_PARAMS
2120 FIRST_NAME$=FULL_NAME$(1,P-1),LAST_NAME$=STP(FULL_NAME$(P+1),0)
2125 P=POS(" "=LAST_NAME$); IF P=0 THEN GOTO SET_NAMES_INTO_PARAMS ELSE FIRST_NAME$=FIRST_NAME$+DIM(1)+STP(LAST_NAME$(1,P-1),0),LAST_NAME$=STP(LAST_NAME$(P+1),0); GOTO *SAME
2175 SET_NAMES_INTO_PARAMS:
2180 CC_PARAMS$=CC_PARAMS$+"TF_FIRSTNAME="+SUB(FIRST_NAME$," ","+")+"&"
2185 CC_PARAMS$=CC_PARAMS$+"TF_LASTNAME="+LAST_NAME$+"&"
2190 RETURN 
2195 ! 
8700 DEF FNN$(N1)=STP(STR(N1:M0$),2)
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$); REM "131928
9090 GOTO 9900
9900 REM "End
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9950 EXIT 
9999 END 
56002 REM "199490-ALL DT : EC3CCV credit card program to be modified for page
56004 REM "200625-Credit Card Plus: Validation of card fails when billing addr
56006 REM "190790-Net1, wants to use Level II for a lower transaction rate
56008 REM "211130-Support for billing address entry in WebEC orders        
56010 REM "215237-Ability to use multiple Net1 merchant accounts in DemandBdge
56012 REM "227413-Credit card transactions need to support CVV security field
56014 REM "239471-Use of Cybersource's Simple Order and Silent POST APIs to
