0010 REM "EC Product Catalog Gateway Interface <EC3PCG>"
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 05/11/20 - 11.142222 - dmm - SSP# 307283
0037 REM "307283-DBD-112;EC3PCG/PC2UAA Add FM1 First Alt U/M and Qty per U/M 
0040 REM "Copyright 2020 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0100 SETERR 9000
0110 X0$="EC3PCG",X1$="EC Product Catalog Gateway Interface"
0120 EOL$=$0D0A$; REM EOL$=ATH(STP(EC_PARM$(57,8),1))
0127 HTML_TEXT$="Content-type: text/html"
0130 STATUS=0,STATUS_MSG$="OK",PCG_STATUS=0,PCG_STATUS_MSG$="OK" ! WO224917
0150 IF SSN>="07" THEN IN_MAX=8192 ELSE IN_MAX=1000 END_IF ; DIM PCG$[IN_MAX,1] ! WO224917
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))],BLGRBNKS$(100)
0510 Z$="01O FV8...  13O ZZPARM" ! SSP307244-DBD-88
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0900 PRINT_DOC=0
0950 CALL "ZZ2PRP","PC",PC_ENABLED$,""; IF PC_ENABLED$<>"Y" THEN GOTO 9900 ! If Product Catalog Gateway not enable, exit with error
1000 REM "Process DATA array
1005 DIM PC1$(1060),OPTIONS$(3); ITEM_LINE_BOUNDARY=1 ! WO224917, increased PC1$ from 794 to 815, SSP249773, increased PC1$ from 815 to 828, 828 to 840, SSP267980, 840 to 900, SSP268841, 900 to 903, SSP270603 903 to 920, SSP271414 920 to 926, WO273055 926 TO 1046, DBD-112-SSP307283 1046 TO 1060
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1020 T_IN=POS("."=TAG$); IF T_IN THEN TAG_PARM$=MID(TAG$,T_IN+1),TAG$=MID(TAG$,1,T_IN-1) ELSE TAG_PARM$=""
1025 SWITCH TAG$ ! 1385 end switch
1030 CASE "print_doc"; PRINT_DOC=1; BREAK
1035 CASE "template"; TEMPLATE$=VALUE$; BREAK
1040 CASE "opt_item_line"; IF VALUE$="Y" THEN IF ITEM_LINE_BOUNDARY THEN ITEM_LINE_BOUNDARY=0 ELSE GOSUB PROCESS_PC1; PC1$(1)=""; OPTIONS$(1)=""; END_IF END_IF ; BREAK
1042 CASE "opt_custom_form"; IF VALUE$="Y" THEN OPTIONS$(1,1)="Y"; END_IF ; BREAK
1044 CASE "opt_qty_times_unit"; IF VALUE$="Y" THEN OPTIONS$(2,1)="Y"; END_IF ; BREAK
1046 CASE "opt_comma_delimited"; IF VALUE$="Y" THEN OPTIONS$(3,1)="Y"; END_IF ; BREAK
1100 CASE "pcg_source"; PC1$(1,3)=VALUE$; BREAK
1102 CASE "pcg_version"; PC1$(4,3)=VALUE$; BREAK
1104 CASE "pcg_cust_number"; PC1$(7,10)=VALUE$; BREAK
1106 CASE "pcg_item_number"; PC1$(17,10)=VALUE$; BREAK
1108 CASE "pcg_description"; PC1$(27,40)=VALUE$; BREAK
1110 CASE "pcg_prod_code"; PC1$(67,3)=VALUE$; BREAK
1112 CASE "pcg_lr_dim"; PC1$(70,8)=VALUE$; BREAK
1114 CASE "pcg_tb_dim"; PC1$(78,8)=VALUE$; BREAK
1116 CASE "pcg_num_plys"; PC1$(86,2)=VALUE$; BREAK
1118 CASE "pcg_vendor"; PC1$(88,10)=VALUE$; BREAK
1120 CASE "pcg_vendor_plant"; PC1$(98,4)=VALUE$; BREAK
1122 CASE "pcg_date_last_sold"; Q$=VALUE$; GOSUB 8000; PC1$(102,6)=Q$; BREAK
1124 CASE "pcg_date_last_purchased"; Q$=VALUE$; GOSUB 8000; PC1$(108,6)=Q$; BREAK
1126 CASE "pcg_status_flag"; PC1$(114,1)=VALUE$; BREAK
1128 CASE "pcg_item_price_class"; PC1$(115,3)=VALUE$; BREAK
1130 CASE "pcg_lotted_flag"; PC1$(118,1)=VALUE$; BREAK
1132 CASE "pcg_qty_break_price_grp"; PC1$(119,3)=VALUE$; BREAK
1134 CASE "pcg_secure_form_flag"; PC1$(122,1)=VALUE$; BREAK
1136 CASE "pcg_selling_uom"; PC1$(126,4)=VALUE$; BREAK
1138 CASE "pcg_inv_uom"; PC1$(130,4)=VALUE$; BREAK
1140 CASE "pcg_2nd_description"; PC1$(134,40)=VALUE$; BREAK
1142 CASE "pcg_form_group"; PC1$(174,10)=VALUE$; BREAK
1144 CASE "pcg_pricing_features"; PC1$(184,10)=VALUE$; BREAK
1146 CASE "pcg_base_price"; PC1$(194,10)=VALUE$; BREAK
1148 CASE "pcg_qty_1_break"; PC1$(204,10)=VALUE$; BREAK
1150 CASE "pcg_qty_1_price"; PC1$(214,10)=VALUE$; BREAK
1152 CASE "pcg_qty_2_break"; PC1$(224,10)=VALUE$; BREAK
1154 CASE "pcg_qty_2_price"; PC1$(234,10)=VALUE$; BREAK
1156 CASE "pcg_qty_3_break"; PC1$(244,10)=VALUE$; BREAK
1158 CASE "pcg_qty_3_price"; PC1$(254,10)=VALUE$; BREAK
1160 CASE "pcg_qty_4_break"; PC1$(264,10)=VALUE$; BREAK
1162 CASE "pcg_qty_4_price"; PC1$(274,10)=VALUE$; BREAK
1164 CASE "pcg_qty_5_break"; PC1$(284,10)=VALUE$; BREAK
1166 CASE "pcg_qty_5_price"; PC1$(294,10)=VALUE$; BREAK
1168 CASE "pcg_qty_6_break"; PC1$(304,10)=VALUE$; BREAK
1170 CASE "pcg_qty_6_price"; PC1$(314,10)=VALUE$; BREAK
1172 CASE "pcg_avg_sales_price"; PC1$(324,10)=VALUE$; BREAK
1174 CASE "pcg_sell_qty_per_unit"; PC1$(334,10)=VALUE$; BREAK
1176 CASE "pcg_inv_qty_per_unit"; PC1$(344,10)=VALUE$; BREAK
1178 CASE "pcg_carton_weight"; PC1$(354,10)=VALUE$; BREAK
1180 CASE "pcg_last_pur_cost"; PC1$(364,10)=VALUE$; BREAK
1182 CASE "pcg_avg_cost"; PC1$(374,10)=VALUE$; BREAK
1184 CASE "pcg_carton_pack"; PC1$(384,10)=VALUE$; BREAK
1186 CASE "pcg_slsp_cost"; PC1$(394,10)=VALUE$; BREAK
1188 CASE "pcg_qty_7_break"; PC1$(404,10)=VALUE$; BREAK
1190 CASE "pcg_qty_7_price"; PC1$(414,10)=VALUE$; BREAK
1192 CASE "pcg_qty_8_break"; PC1$(424,10)=VALUE$; BREAK
1194 CASE "pcg_qty_8_price"; PC1$(434,10)=VALUE$; BREAK
1196 CASE "pcg_qty_9_break"; PC1$(444,10)=VALUE$; BREAK
1198 CASE "pcg_qty_9_price"; PC1$(454,10)=VALUE$; BREAK
1200 CASE "pcg_qty_10_break"; PC1$(464,10)=VALUE$; BREAK
1202 CASE "pcg_qty_10_price"; PC1$(474,10)=VALUE$; BREAK
1204 CASE "pcg_qty_11_break"; PC1$(484,10)=VALUE$; BREAK
1206 CASE "pcg_qty_11_price"; PC1$(494,10)=VALUE$; BREAK
1208 CASE "pcg_qty_12_break"; PC1$(504,10)=VALUE$; BREAK
1210 CASE "pcg_qty_12_price"; PC1$(514,10)=VALUE$; BREAK
1212 CASE "pcg_ic2_vendor"; PC1$(524,10)=VALUE$; BREAK
1214 CASE "pcg_ic2_vendor_plant"; PC1$(534,4)=VALUE$; BREAK
1216 CASE "pcg_ic2_vendor_item"; PC1$(538,20)=VALUE$; BREAK
1218 CASE "pcg_ic2_purch_uom"; PC1$(558,4)=VALUE$; BREAK
1220 CASE "pcg_ic2_date_lst_pur"; Q$=VALUE$; GOSUB 8000; PC1$(562,6)=Q$; BREAK
1222 CASE "pcg_ic2_base_cost"; PC1$(568,10)=VALUE$; BREAK
1224 CASE "pcg_ic2_qty_1_break"; PC1$(578,10)=VALUE$; BREAK
1226 CASE "pcg_ic2_qty_1_cost"; PC1$(588,10)=VALUE$; BREAK
1228 CASE "pcg_ic2_qty_2_break"; PC1$(598,10)=VALUE$; BREAK
1230 CASE "pcg_ic2_qty_2_cost"; PC1$(608,10)=VALUE$; BREAK
1232 CASE "pcg_ic2_qty_3_break"; PC1$(618,10)=VALUE$; BREAK
1234 CASE "pcg_ic2_qty_3_cost"; PC1$(628,10)=VALUE$; BREAK
1236 CASE "pcg_ic2_qty_4_break"; PC1$(638,10)=VALUE$; BREAK
1238 CASE "pcg_ic2_qty_4_cost"; PC1$(648,10)=VALUE$; BREAK
1240 CASE "pcg_ic2_qty_5_break"; PC1$(658,10)=VALUE$; BREAK
1242 CASE "pcg_ic2_qty_5_cost"; PC1$(668,10)=VALUE$; BREAK
1244 CASE "pcg_ic2_qty_6_break"; PC1$(678,10)=VALUE$; BREAK
1246 CASE "pcg_ic2_qty_6_cost"; PC1$(688,10)=VALUE$; BREAK
1248 CASE "pcg_ic2_last_cost"; PC1$(698,10)=VALUE$; BREAK
1250 CASE "pcg_ic2_qty_per_um"; PC1$(708,10)=VALUE$; BREAK
1252 CASE "pcg_ic2_carton_wgt"; PC1$(718,10)=VALUE$; BREAK
1254 CASE "pcg_ic2_carton_pack"; PC1$(728,10)=VALUE$; BREAK
1256 CASE "pcg_fm1_item_status_cd"; PC1$(738,1)=VALUE$; BREAK
1258 CASE "pcg_fm1_item_status_date"; Q$=VALUE$; GOSUB 8000; PC1$(739,6)=Q$; BREAK
1260 CASE "pcg_fm1_item_status_memo"; PC1$(745,30)=VALUE$; BREAK
1262 CASE "pcg_fm1_ro_pt_days"; PC1$(775,10)=VALUE$; BREAK
1264 CASE "pcg_fm1_ro_pt_qty"; PC1$(785,10)=VALUE$; BREAK
1266 CASE "pcg_fm1_cic"; PC1$(795,20)=VALUE$; BREAK ! WO224917
1268 CASE "pcg_fm1_art_status"; PC1$(815,1)=VALUE$; BREAK ! WO224917
1270 CASE "pcg_ecr_create_po"; PC1$(816,1)=UCS(VALUE$); BREAK ! SSP249773
1272 CASE "pcg_fm1_prev_job_num"; PC1$(817,12)=VALUE$; BREAK ! SSP249773
1274 CASE "pcg_fm1_function_code"; PC1$(829,12)=VALUE$; BREAK ! SSP249773
1276 CASE "pcg_fm1_tf_memo"; PC1$(841,60)=VALUE$; BREAK ! SSP267980
1278 CASE "pcg_fm1_cont_code"; PC1$(901,3)=UCS(VALUE$); BREAK ! SSP268841
1280 CASE "pcg_fm1_fms"; PC1$(904,1)=UCS(VALUE$); BREAK ! SSP270603
1281 CASE "pcg_fm1_fms_price"; PC1$(905,10)=(VALUE$); BREAK ! SSP270603
1282 CASE "pcg_fm1_fms_percent"; PC1$(915,6)=(VALUE$); BREAK ! SSP270603
1283 CASE "pcg_fm1_item_revision"; PC1$(921,6)=VALUE$; BREAK ! SSP271414
1284 CASE "pcg_ic2_qty_7_break"; PC1$(927,10)=VALUE$; BREAK ! WO273055
1285 CASE "pcg_ic2_qty_7_cost"; PC1$(937,10)=VALUE$; BREAK ! WO273055
1286 CASE "pcg_ic2_qty_8_break"; PC1$(947,10)=VALUE$; BREAK ! WO273055
1287 CASE "pcg_ic2_qty_8_cost"; PC1$(957,10)=VALUE$; BREAK ! WO273055
1288 CASE "pcg_ic2_qty_9_break"; PC1$(967,10)=VALUE$; BREAK ! WO273055
1289 CASE "pcg_ic2_qty_9_cost"; PC1$(977,10)=VALUE$; BREAK ! WO273055
1290 CASE "pcg_ic2_qty_10_break"; PC1$(987,10)=VALUE$; BREAK ! WO273055
1291 CASE "pcg_ic2_qty_10_cost"; PC1$(997,10)=VALUE$; BREAK ! WO273055
1292 CASE "pcg_ic2_qty_11_break"; PC1$(1007,10)=VALUE$; BREAK ! WO273055
1293 CASE "pcg_ic2_qty_11_cost"; PC1$(1017,10)=VALUE$; BREAK ! WO273055
1294 CASE "pcg_ic2_qty_12_break"; PC1$(1027,10)=VALUE$; BREAK ! WO273055
1295 CASE "pcg_ic2_qty_12_cost"; PC1$(1037,10)=VALUE$; BREAK ! WO273055
1296 CASE "item_spec_url"; ITEM_SPEC_URL$=STP(VALUE$,2); BREAK ! SSP307244-DBD-88
1297 CASE "pcg_fm1_alt_um_1"; PC1$(1047,4)=VALUE$; BREAK ! SSP307283-DBD-112
1298 CASE "pcg_fm1_alt_um_qty_per_1"; PC1$(1051,10)=VALUE$; BREAK ! SSP307283-DBD-112
1300 REM "Tags supporting division fields
1302 CASE "pcg_cust_div"; PC1$(7,2)=VALUE$; BREAK
1304 CASE "pcg_cust_code"; PC1$(9,8)=VALUE$; BREAK
1306 CASE "pcg_vendor_div"; PC1$(88,2)=VALUE$; BREAK
1308 CASE "pcg_vendor_code"; PC1$(90,8)=VALUE$; BREAK
1310 CASE "pcg_ic2_vendor_div"; PC1$(524,2)=VALUE$; BREAK
1312 CASE "pcg_ic2_vendor_code"; PC1$(526,8)=VALUE$; BREAK
1385 ! 
1386 END SWITCH ! 1050
1390 NEXT I
1395 ! ***********************************
1400 DIM BYBINFO$[5]; BYBINFO$[1]=PGN,BYBINFO$[2]="224917.20091022",BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1450 REM ' extract issue
1455 IF PRINT_DOC=0 THEN {! 1495 }
1460 GOSUB PROCESS_PC1
1495  }
1501 IF %BASIC2$<>"" THEN GOTO 2990
1505 IF PRINT_DOC=0 THEN CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1510 IF PRINT_DOC THEN READ DATA LINE$,ERR=2950 ELSE IF ISSDET=0 THEN READ (100,END=2950)LINE$; GOSUB BYB_PROCESSING
1515 CHKTAG=1
1520 WHILE CHKTAG ! 2800 wend
1522 P1=MSK(LINE$,"\?tf\?[^?]*\?"); IF P1=0 THEN CHKTAG=0; BREAK
1530 TAG$=LINE$(P1,MSL); LINE1$=LINE$(1,P1-1),LINE2$=MID(LINE$,P1+MSL)
1600 SWITCH TAG$ ! 2790 end switch
1610 CASE "?tf?status?"
1615 IF PRINT_DOC THEN TAGDESC$="Status code, 0=ok"; GOSUB 5000 ELSE LINE$=LINE1$+STR(STATUS)+LINE2$
1619 BREAK
1620 CASE "?tf?status_msg?"
1625 IF PRINT_DOC THEN TAGDESC$="Status message relating to status code"; GOSUB 5000 ELSE LINE$=LINE1$+FN%HTML_ESC$(STR(STATUS_MSG$))+LINE2$ ! SSP270992
1629 BREAK
1630 CASE "?tf?pcg_status?" ! WO224917
1635 IF PRINT_DOC THEN TAGDESC$="EC3PCG status code, 0=ok, 1=error"; GOSUB 5000 ELSE LINE$=LINE1$+STR(PCG_STATUS)+LINE2$ ! WO224917
1639 BREAK ! WO224917
1640 CASE "?tf?pcg_status_msg?" ! WO224917
1645 IF PRINT_DOC THEN TAGDESC$="EC3PCG status message"; GOSUB 5000 ELSE LINE$=LINE1$+PCG_STATUS_MSG$+LINE2$ ! WO224917
1649 BREAK ! WO224917
1650 CASE "?tf?item_start?" ! WO224917
1655 IF PRINT_DOC THEN TAGDESC$="Start item info loop"; GOSUB 5000 ELSE GOSUB ITEM_STATUS_INFO; LINE$=LINES_SECTION$ ! WO224917
1659 BREAK ! WO224917
2790 END SWITCH ! 1600
2800 WEND ! 1520
2805 DATA "?tf?status?","?tf?status_msg?"
2810 PRINT (OUTPUT)LINE$,EOL$, ! 269861
2900 GOTO 1510; REM next read
2990 GOTO 9900
2995 ! ***********************************
5000 REM print tag desc html
5010 LINE$=TAG$+" "+TAGDESC$
5090 RETURN 
5095 ! ***********************************
6000 PROCESS_PC1:! update the current PC1 record
6020 PCGERR$="",ITEM_COUNT+=1 ! WO224917
6055 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3PCG|CUST|"+PC1$(7,10)+"|ITEM|"+PC1$(17,10)+"|PROD CD|"+PC1$(67,3)+"|VENDOR|"+PC1$(88,10)+"|ITEM STATUS|"+PC1$(738,1)+"|DESC|"+PC1$(27,40)+"|CIC|"+PC1$(795,20)) ! SSP259249, add CIC
6060 PC2UAA_ERR$="",RET_Q1$="G"; CALL "PC2UAA",ERR=*NEXT,X3$,X4$,"["+OPTIONS$(1,3)+"]"+PC1$,RET_Q1$,PCGERR$; PC2UAA_ERR$=GBL("LAST_WEBEC_ERR",ERR=AFTER_ERROR_LOGIC); IF PC2UAA_ERR$>"" THEN STATUS=1,STATUS_MSG$=PC2UAA_ERR$; GOTO LOG_ERROR_MSG ELSE GOTO AFTER_ERROR_LOGIC ! WO224917 SSP270992, capture PC2UAA error
6065 STATUS=ERR,STATUS_MSG$=MSG(STATUS) ! Error occurred
6067 LOG_ERROR_MSG:! SSP270992
6068 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3PCG|STATUS|"+STR(STATUS)+"|MESSAGE|"+STATUS_MSG$)
6070 AFTER_ERROR_LOGIC:
6075 IF PCGERR$="" THEN PCG_MSG$="OK" ELSE PCG_MSG$=PCGERR$,PCG_STATUS=1,PCG_STATUS_MSG$="ERRORS" ! WO224917
6080 PCG$[ITEM_COUNT,0]=PC1$(17,10),PCG$[ITEM_COUNT,1]=PCG_MSG$ ! WO224917
6085 IF ITEM_SPEC_URL$>"" THEN GOSUB ITEM_SPEC_URL ! SSP307244-DBD-88
6095 RETURN 
6149 ! ***********************************
7100 GET_DATE:! Take date in YYYY-MM-DD and maybe time in HH:MM:SS and convert to match file requirements
7105 D_VALUE$=VALUE$,DATE$="",TIME$=""
7110 IF STP(VALUE$,3)="" THEN GOTO *RETURN
7115 P=POS("T"=VALUE$); IF P>0 THEN D_VALUE$=VALUE$(1,P-1),T_VALUE$=VALUE$(P+1); GOSUB GET_TIME
7120 IF LEN(D_VALUE$)>10 THEN DATE$=""; GOTO *RETURN
7125 P=POS("-"=D_VALUE$); IF P=0 THEN DATE$=PAD(D_VALUE$,8); GOTO *RETURN ELSE DATE$=D_VALUE$(1,P-1),D_VALUE$=D_VALUE$(P+1) ! Year
7130 P=POS("-"=D_VALUE$); IF P=0 THEN DATE$=PAD(DATE$+D_VALUE$,8); GOTO *RETURN ELSE DATE$=DATE$+STR(NUM(D_VALUE$(1,P-1),ERR=*RETURN):"00"),D_VALUE$=D_VALUE$(P+1) ! Month
7135 DATE$=DATE$+STR(NUM(D_VALUE$,ERR=*RETURN):"00") ! Day
7140 RETURN 
7145 ! 
7150 GET_TIME:
7155 TIME$=""
7160 IF POS("Z"=T_VALUE$) THEN ZULU=1 ELSE ZULU=0
7165 IF LEN(T_VALUE$)>8 THEN T_VALUE$=T_VALUE$(1,8)
7170 IF NOT(ZULU) THEN {
7172 TIME$=T_VALUE$(1,2)+T_VALUE$(4,2)
7175  } ELSE {
7177 HRS=NUM(T_VALUE$(1,2)); HRS+=TCB(44)/3600+TCB(45)
7180 TIME$=STR(HRS:"00")+T_VALUE$(4,2)
7185  }
7190 RETURN 
7195 ! 
7199 ! ***********************************
7200 GET_JULIAN_DATE:! take in julian based date yyyddd where yyy is # years since 1900, ddd is current day of the year, return DATE$
7205 D_VALUE$=VALUE$,DATE$="",TIME$=""
7210 IF LEN(STP(D_VALUE$))<4 THEN RETURN ! too short to have a valid date
7214 ! Convert year to num, add 1900 and get julian # (1970 based) for Jan 1, add julian date (-1 to adjust for jan 1) and then convert using DTE.
7215 DATE$=DTE(JUL(NUM(MID(D_VALUE$,1,3),ERR=*RETURN)+1900,1,1)+NUM(MID(D_VALUE$,4),ERR=*RETURN)-1:"%Y%Mz%Dz")
7245 RETURN 
7249 ! ***********************************
7500 XML_DATETIME:! process xml datetime field into the Date and Time fields
7504 ! Format must be: [-]YYYY-MM-DDTHH:MM:SS[.SS][Z][+-HH:MM]
7505 TPOS=POS("T"=VALUE$); IF TPOS=0 THEN RETURN ! invalid format
7510 TDATE$=MID(VALUE$,1,TPOS-1),TTIME$=MID(VALUE$,TPOS+1)
7515 IF LEN(TDATE$)<10 OR LEN(TDATE$)>12 THEN RETURN ELSE IF LEN(TDATE$)=11 THEN TDATE$=TDATE$(2)
7520 PC1$(223,8)=TDATE$(1,4)+TDATE$(6,2)+TDATE$(9,2) ! put into YYYYMMDD
7550 IF POS("Z"=TTIME$) THEN ZULU=1 ELSE ZULU=0
7555 IF LEN(TTIME$)>8 THEN TTIME$=TTIME$(1,8)
7560 IF NOT(ZULU) THEN {
7565 PC1$(231,4)=TTIME$(1,2)+TTIME$(4,2) ! If not Z on end then is actual time
7570  } ELSE {
7575 HRS=NUM(TTIME$(1,2)); HRS+=TCB(44)/3600+TCB(45) ! adjust for zulu, tcb(44)=#secs diff, tcb(45)=1 if daylight savings
7580 PC1$(231,4)=STR(HRS:"00")+TTIME$(4,2)
7585  }
7595 RETURN 
7599 ! ***********************************
8000 REM "take Q$, try to figure out date and return in Q$
8001 REM "assume MM?DD?YY(YY) format where we don't care about ?'s. if only YY then pivot on 60
8004 IF LEN(Q$)=7 AND Q$(2,1)="/" THEN Q$="0"+Q$; REM "135234
8005 IF LEN(Q$)<6 THEN GOTO 8045 ELSE IF LEN(Q$)>=8 THEN Q$=Q$(1,2)+Q$(4,2)+Q$(7); IF LEN(Q$)>8 THEN Q$=Q$(1,8)
8009 REM "NOW in MMDDYY.. format
8010 IF LEN(Q$(5))>2 THEN YY$=Q$(5) ELSE IF Q$(5)<"60" THEN YY$="20"+Q$(5) ELSE YY$="19"+Q$(5)
8015 TMP$=Q$,Q$=DIM(6),Q$=CHR(NUM(YY$(1,3),ERR=8016)-125,ERR=8016)+YY$(4,1)+TMP$(1,4); REM "135884
8045 RETURN 
8150 BYB_PROCESSING:! Send LINE$ to EC3BYB for generic fields processing
8160 CALL "EC3BYB",ERR=8161,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,LINE$,BYBINFO${ALL},BYBOPTIONS$
8195 RETURN 
8199 ! ***********************************
8200 ITEM_STATUS_INFO:! WO224917
8205 LINES_SECTION$="",LS_TAGS$="001<item_code>002<item_status>"
8206 LS_TEMPLATE$=LINE$
8207 READ (100,END=*NEXT)LINE$; GOSUB BYB_PROCESSING; LS_TEMPLATE$=LS_TEMPLATE$+LINE$+EOL$; IF POS("?tf?item_end?"=LINE$)=0 THEN GOTO *SAME
8210 FOR X=1 TO ITEM_COUNT
8211 ITEM_CODE$=PCG$[X,0],ITEM_STATUS$=PCG$[X,1]
8214 LS$=LS_TEMPLATE$
8215 LS_INDEX=POS("?tf?"=LS$); IF LS_INDEX=0 THEN GOTO 8291
8216 LSEND_INDEX=POS("?"=LS$(LS_INDEX+4)),LS_TAG$=LS$(LS_INDEX+4,LSEND_INDEX-1),LS1$=LS$(1,LS_INDEX-1),LS2$=LS$(LS_INDEX+LSEND_INDEX+4),LS_POS=POS("<"+LS_TAG$+">"=LS_TAGS$); IF LS_POS=0 THEN LS$=LS1$+LS2$,LS_INDEX=0 ELSE LS_INDEX=NUM(LS_TAGS$(LS_POS-3,3))
8220 ON LS_INDEX GOTO 8289,8221,8222,8289
8221 LS$=LS1$+FN%HTML_ESC$(ITEM_CODE$)+LS2$; GOTO 8290 ! item_code SSP296453
8222 LS$=LS1$+ITEM_STATUS$+LS2$; GOTO 8290 ! item_status
8290 GOTO 8215
8291 IF LEN(LINES_SECTION$)+LEN(LS$)>64000 THEN PRINT (OUTPUT)LINES_SECTION$,EOL$; LINES_SECTION$=""
8292 LINES_SECTION$=LINES_SECTION$+LS$
8293 NEXT X
8295 RETURN 
8299 ! 
8300 ITEM_SPEC_URL:! SSP307244-DBD-88
8310 IF STATUS>0 OR PCG_STATUS>0 THEN MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3PCG|HAVE ITEM_SPEC_URL BUT ERROR DURING PC2UAA SO NO WRITE TO FV8"); RETURN 
8315 ! 
8320 DIM FV8$(376); FV8$(1,20)=PC1$(7,20),FV8$(21,256)=ITEM_SPEC_URL$
8325 WRITE (Z[1],KEY=FV8$(1,20))FV8$
8330 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|EC3PCG|WROTE ITEM_SPEC_URL TO FV8 FOR ITEM "+PC1$(7,20))
8340 RETURN 
8345 ! 
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$); REM "131928
9090 GOTO 9900
9900 REM "End
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9950 EXIT 
9999 END 
56002 REM "201157-Create XML import for inventory file update
56004 REM "224917-Noosh - DB Distributor integration for item/order creation.
56006 REM "249773-Sourcing Bench Support; Add tags to EC3PCG, trigger to setup
56008 REM "259249-EC3PCG; add CIC to log message.                             
56010 REM "249773-SB; EC3PCG - FM1 Function Field
56012 REM "267980-SB; add tag to EC3PCG for FM1 memo (TF_MEMO) called         
56014 REM "268841-SB; EC3PCG tag for FM1 Item Contact code. XPA contains valid
56016 REM "270603-Sourcing Bench; Modify EC3PCG with fms and fms_price tags.  
56018 REM "270992-SB item creation error 0 PC2UAA 2040 looking up the vendor  
56020 REM "271414-Sourcing Bench; Modify EC3PCG with revision date tag.       
56022 REM "273055-Expand IC2 for 6 additional cost breaks, allow entry in GUI 
56024 REM "296453-FlowPoint; Noosh item xml errors - ampersand related in     
56026 REM "307244-DBD-88; Spec URL from DB/a support                          
56028 REM "307283-DBD-112;EC3PCG/PC2UAA Add FM1 First Alt U/M and Qty per U/M 
