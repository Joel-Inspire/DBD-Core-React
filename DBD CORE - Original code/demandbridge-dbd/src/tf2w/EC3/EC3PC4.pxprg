0010 REM "Webec search results <EC3PC4>
0020 SETESC 9300; SETERR 9000
0035 REM "5.6 - 02/07/09 - 0.260555 - crg - SSP# 227154
0037 REM "227154-Modify EC3BYB to support a condition tag : ?tf?if?[expr]    
0040 REM "Copyright 2009 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0100 SETERR 9000
0110 X0$="EC3PC4",X1$="Webec Parallel Item DB Search Results"
0120 EOL$=$0D0A$; EOL$=ATH(STP(EC_PARM$(57,8),1))
0320 IOLIST FM1$,FM1[0],FM1[1],FM1[2],FM1[3],FM1[4],FM1[5],FM1[6],FM1[7],FM1[8],FM1[9],FM1[10],FM1[11],FM1[12],FM1[13],FM1[14],FM1[15],FM1[16],FM1[17],FM1[18],FM1[19],FM1[20],FM1[21],FM1[22],FM1[23],FM1[24],FM1[25],FM1[26],FM1[27],FM1[28],FM1[29],FM1[30],FM1[31]
0330 IOLIST OS0$
0340 IOLIST ECG$
0350 IOLIST ECH$
0360 IOLIST ECR$
0380 IOLIST FM0$
0410 IOLIST IC0$,IC0[0],IC0[1],IC0[2],IC0[3],IC0[4],IC0[5],IC0[6],IC0[7],IC0[8],IC0[9],IC0[10],IC0[11],IC0[12],IC0[13],IC0[14],IC0[15],IC0[16],IC0[17],IC0[18],IC0[19],IC0[20],IC0[21],IC0[22],IC0[23],IC0[24],IC0[25],IC0[26],IC0[27],IC0[28],IC0[29],IC0[30],IC0[31],IC0[32],IC0[33],IC0[34],IC0[35],IC0[36],IC0[37],IC0[38],IC0[39],IC0[40]
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))]
0507 WORK_FILE$="W"+EC$[1](1,7); REM "work file is "W"+session id
0508 CLOSE (1001); OPEN (1001,ERR=0509)WORK_FILE$; CLOSE (1001); GOTO 0510
0509 DIRECT WORK_FILE$,60,0,2048,0,0; REM "create work file if it doesn't exist
0510 Z$="01O AR1... 020 FM1... 03O OS0... 04O ECG... 05O ECH... 06O ECR... 07O "+WORK_FILE$+" 08O FM0... 09O FM4... 10O EDE... 11O IC0... 13O ZZPARM 14O FMP... 15O EDI... 16O OS9... 17O OSL... 18O OSM... 19OSOS0... 20O OSD... "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0600 REM 'SET IMG SRC PREFIX/SUFFIX
0601 ITEM_SEARCH_ELEMENTS=8,ST_SEARCH_ELEMENTS=7
0602 DIM SI$[ITEM_SEARCH_ELEMENTS,4]; REM "item search elements (index 1=search text   2=<string>AAAABBBB  A=starting position B=length of fm1 field 2=<numeric>AAAA A=numeric element 3=S/N (string or numeric  <string processed unless set to N> 4=<string>AAAABBBB A/B=start position/length in IC0 (same as 2 for fm1
0603 DIM ST$[ST_SEARCH_ELEMENTS,3]; REM "shipto search elements (index 1=search text   2=<string>AAAABBBB  A=starting position B=length of fm1 field 2=<numeric>AAAA A=numeric element 3=S/N (string or numeric  <string processed unless set to N>
0610 IMGSRC_PREFIX$=STP(EC_PARM$(311,20),2),IMGSRC_ATTRIB$=" "+STP(EC_PARM$(331,60),2)+">",IMGSRC_SUFFIX$=STP(EC_PARM$(391,20),2)
0800 GOSUB 3000
1000 REM "Process DATA array
1005 DATA_TAGS$="001<template>002<user>003<password>004<maxrows>005<position_item>006<direction>007<session_id>008<category>009<new_search>010<search_type>011<item_code>"
1006 MAX_ROWS=NUM(EC_PARM$(258,3)),POSITION_ITEM$="",DIRECTION$="F"
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1018 DPOS=POS("<"+TAG$+">"=DATA_TAGS$); IF DPOS=0 THEN GOTO 1090 ELSE DINDEX=NUM(DATA_TAGS$(DPOS-3,3),ERR=1090)
1019 ON DINDEX GOTO 1090,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1090
1021 TEMPLATE$=VALUE$; GOTO 1090; REM "template
1022 USER$=VALUE$; GOSUB 3000; GOTO 1090; REM "user
1023 PASSWORD$=VALUE$; GOTO 1090; REM "password
1024 MAX_ROWS=NUM(VALUE$,ERR=1090); GOTO 1090; REM "maxrows OVERRIDENN TO 2000
1025 POSITION_ITEM$=VALUE$; GOTO 1090; REM "position_item NOT USED
1026 IF VALUE$="backward" THEN DIRECTION$="B"; GOTO 1090; REM "direction, only set if it is 'backward' NOT USED
1027 SESSION_ID$=VALUE$; GOTO 1090; REM "Get session id
1028 CATEGORY$=VALUE$; GOTO 1090; REM "single catalog category to display NOT  USED
1029 NEW_SEARCH$=VALUE$; GOTO 1090; REM "new search  (will init the search results file (ECT) NOT USED
1030 SEARCH_TYPE$=VALUE$; STYPE=INT(POS(SEARCH_TYPE$="I/CFM0ORD")/3); GOTO 1090; REM "search_type NOT USED
1031 GOSUB 8300; ITEMSTRING$="",IMAGESTRING$=""; IF VAL_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF STP(VAL$[VAL_INDEX,1],3," ")="" THEN NEXT VAL_INDEX ELSE ITEMSTRING$=ITEMSTRING$+PAD(UCS(VAL$[VAL_INDEX,1]),10),IMAGESTRING$=IMAGESTRING$+PAD(VAL$[VAL_INDEX,2],50); NEXT VAL_INDEX END_IF ; SEARCH_ITEM_CODE$=ITEMSTRING$,SI$[1,1]=ITEMSTRING$,SI$[1,2]="00110010",SI$[1,4]="00110010"; GOTO 1090; REM "search_item_code"
1090 NEXT I
1100 REM "preprocessing
1101 VERSION$="51.0000.148759.156580.20021219",PROGRAM$=PGN; DIM BYBINFO$[5]; BYBINFO$[1]=PROGRAM$,BYBINFO$[2]=VERSION$,BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1110 ENTRY_TAGS$="001<item_code>002<desc>003<um_ext>004<price>005<item_key_ue>006<user>007<password>008<session_id>009<image_us_thumb>010<um>011<qty_per_um>012<desc_ue>013<item_key>014<vendor>015<list_price>016<us_long_desc>017<desc_ext>018<cost>019<suggested_item_number>"
1125 REM 'CK FOR VALID MAXROWS
1126 MAX_ROWS=2000; REM "IF NUM(EC_PARM$(258,3))<>0 OR MAX_ROWS=0 THEN LET MAX_ROWS=NUM(EC_PARM$(258,3))
1500 REM "Use template$ to open file, read line by line and insert
1501 IF %BASIC2$<>"" THEN GOTO 1995; REM "156580
1505 CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1506 REM "Setup line_tags$
1507 LINE_TAGS$="001<user>002<cust_code>003<password>004<cust_name>005<ec_company>006<entrystart>007<buttonnext>008<buttonprev>009<session_id>010<buyer_id>011<buyer_name>012<date>013<time>014<categorystart>015<mousedbox1start>016<category_list>017<category_code>018<category_desc>019<category_addl>020<number_records_found>021<allorderstart>022<3porderstart>023<buttonallstart>"
1510 READ (100,END=1595)LINE$; GOSUB 7550
1515 INDEX=POS("?tf?"=LINE$); IF INDEX=0 THEN PRINT (OUTPUT)LINE$,EOL$,; GOTO 1510
1520 END_INDEX=POS("?"=LINE$(INDEX+4)),TAG$=LINE$(INDEX+4,END_INDEX-1),LINE1$=LINE$(1,INDEX-1),LINE2$=LINE$(INDEX+END_INDEX+4),LPOS=POS("<"+TAG$+">"=LINE_TAGS$); IF LPOS=0 THEN LINDEX=0 ELSE LINDEX=NUM(LINE_TAGS$(LPOS-3,3))
1530 GOSUB 2000; GOTO 1515
1995 GOTO 9900
1999 REM "Get tag value & substitute
2000 ON LINDEX GOTO 2090,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2090
2001 LINE$=LINE1$+USER$+LINE2$; GOTO 2095; REM "user
2002 LINE$=LINE1$+CUST_CODE$+LINE2$; GOTO 2095; REM "cust_code
2003 LINE$=LINE1$+PASSWORD$+LINE2$; GOTO 2095; REM "password
2004 LINE$=LINE1$+STP(EC$[1](23,35),1)+LINE2$; GOTO 2095; REM "cust_name
2005 LINE$=LINE1$+STP(EC_PARM$(7,50),1)+LINE2$; GOTO 2095; REM "ec_company
2006 GOSUB 3200; LINE$=TABLE$; GOTO 2095; REM "entrystart
2007 GOSUB 3500; LINE$=BUTTON$; GOTO 2095; REM "buttonnext
2008 GOSUB 3600; LINE$=BUTTON$; GOTO 2095; REM "buttonprev
2009 LINE$=LINE1$+STP(SESSION_ID$,1)+LINE2$; GOTO 2095; REM "session_id
2010 LINE$=LINE1$+STP(EC$[1](8,15),1)+LINE2$; GOTO 2095; REM "buyer_id
2011 LINE$=LINE1$+STP(EC$[2](16,35),1)+LINE2$; GOTO 2095; REM "buyer_name
2012 LINE$=LINE1$+EC$[4]+LINE2$; GOTO 2095; REM " date
2013 LINE$=LINE1$+EC$[5]+LINE2$; GOTO 2095; REM "time
2014 GOSUB 2200; GOTO 2095; REM "categorystart - store in CAT_TEMPLATE$
2015 GOSUB 3700; LINE$=MOUSEDBOX1$; GOTO 2095; REM "mousedbox1start - store in MOUSEDBOX1_TEMPLATE$
2016 GOSUB 2150; LINE$=LINE1$+CATEGORY_LIST$+LINE2$; GOTO 2095; REM "catalog category list
2017 LINE$=LINE1$+ECH$(11,10)+LINE2$; GOTO 2095; REM "category_code
2018 LINE$=LINE1$+STP(ECG$(11,30),2)+LINE2$; GOTO 2095; REM "category_desc
2019 LINE$=LINE1$+STP(ECG$(41,60),2)+LINE2$; GOTO 2095; REM "category additional
2020 FILE_SPEC$=FN%FIN$(Z(7),"NUMREC"),NUM_RECS=NUM(FILE_SPEC$),LINE$=LINE1$+STR(NUM_RECS:"##,##0")+LINE2$; GOTO 2095; REM "number_records_found
2021 GOSUB 3800; LINE$=TABLE$; GOTO 2095; REM "allorderstart
2022 GOSUB 3850; LINE$=TABLE$; GOTO 2095; REM "3porderstart
2023 GOSUB 3700; LINE$=ALLBUTTON$; GOTO 2095; REM "buttonallstart
2090 LINE$=LINE1$+"?"+LINE2$; GOTO 2095; REM "tag not found, replace with '?'
2095 RETURN 
2150 REM "Return CATEGORY_LIST$ as HTML for drop down list
2155 CATEGORY_LIST$="",PUBLISHED$=EC$[6]
2157 IF LEN(STP(PUBLISHED$,2))=0 THEN GOTO 2195
2159 FOR PP=0 TO LEN(PUBLISHED$)/10-1; CURRCAT$=PUBLISHED$(PP*10+1,10)
2160 READ (Z[4],KEY=CURRCAT$,DOM=2180)IOL=0340
2165 CATEGORY_LIST$=CATEGORY_LIST$+"<option selected value="+QUO+CURRCAT$+QUO; IF PP=0 THEN CATEGORY_LIST$=CATEGORY_LIST$+" SELECTED>"+ECG$(11,30)+"</option>" ELSE CATEGORY_LIST$=CATEGORY_LIST$+">"+ECG$(11,30)+"</option>"; REM "if first item in list (pp=0) then set to be SELECTED as the initial value in the dd list
2180 NEXT PP
2185 STMP=POS("</select>"=LINE1$,-1); IF STMP<>0 THEN CATEGORY_LIST$=CATEGORY_LIST$+"</select>"; IF STMP=1 THEN LINE1$="" ELSE LINE1$=LINE1$(1,STMP-1)
2186 IF LINE2$>"" THEN IF LINE2$(1,1)=">" THEN LINE2$=LINE2$(2); REM "if token was part of a comment, then remove the end of the comment.
2195 RETURN 
2200 REM "Store category header template into CAT_TEMPLATE$, it will be used in the entry section
2204 CAT_TEMPLATE$=LINE$,LINE$=""
2205 READ (100,END=2206)LINE$; GOSUB 7550
2206 IF POS("?tf?categoryend?"=LINE$)<>0 THEN GOTO 2209 END_IF ; INDEX=POS("?tf?"=LINE$); IF INDEX=0 THEN GOTO 2209; REM "searching for tags within the category heading section
2207 END_INDEX=POS("?"=LINE$(INDEX+4)),TAG$=LINE$(INDEX+4,END_INDEX-1),LINE1$=LINE$(1,INDEX-1),LINE2$=LINE$(INDEX+END_INDEX+4),LPOS=POS("<"+TAG$+">"=LINE_TAGS$); IF LPOS=0 THEN LINDEX=0 ELSE LINDEX=NUM(LINE_TAGS$(LPOS-3,3))
2208 GOSUB 2000; REM "process tags within the category section
2209 CAT_TEMPLATE$=CAT_TEMPLATE$+LINE$+EOL$; IF POS("?tf?categoryend?"=LINE$)=0 THEN GOTO 2205
2230 LINE$=""
2245 RETURN 
3000 REM "Read customer data into AR1$
3010 DIM AR1$(600); READ (Z[1],KEY=EC$[2](51,10),DOM=3011)AR1$
3015 CALL "ZZDISP","AX",EC$[2](51,10),"A/R",X3$,CUST_CODE$,"",0,0,X4$
3045 RETURN 
3200 REM "Output I/C type entries, using ENTRY_TEMPLATE$ to pass information, create TABLE$ to output
3202 REM "moved to 1110
3203 REM "Setup ENTRY_TEMPLATE$
3204 ENTRY_TEMPLATE$=LINE$,TABLE$="",PREV_CATEGORY$=""
3205 READ (100,END=3206)LINE$; GOSUB 7550; ENTRY_TEMPLATE$=ENTRY_TEMPLATE$+LINE$+EOL$; IF POS("?tf?entryend?"=LINE$)=0 THEN GOTO 3205
3209 REM "now read search file (ECT...)
3210 IF DIRECTION$="B" THEN START_PT=TOTAL_RECORDS,END_PT=1,STEP_SIZE=-1 ELSE START_PT=1,END_PT=TOTAL_RECORDS,STEP_SIZE=1
3211 IF TOTAL_RECORDS=0 THEN GOTO 3246
3212 FOR ENTRY_INDEX=START_PT TO END_PT STEP STEP_SIZE
3213 ON STYPE GOTO 3214,3217,3220
3214 DIM FM1[40],FM1$(550),IC0$(200),IC0[40]; IF DISPLAY$[ENTRY_INDEX](26,10)=DIM(10) THEN STOCK$="Y"; FIND (Z[7],KEY=DISPLAY$[ENTRY_INDEX],DOM=3245)ECT$,ECH$,IOL=0410 ELSE STOCK$="N"; FIND (Z[7],KEY=DISPLAY$[ENTRY_INDEX],DOM=3245)ECT$,ECH$,IOL=0320
3215 DIM ECR$(500); IF STOCK$="Y" THEN IK$=IC0$(1,20) ELSE IK$=FM1$(1,20) END_IF ; FIND (Z[6],KEY=IK$,DOM=3225)IOL=0360; GOTO 3225; REM "get webec form parmams
3217 DIM FM0$(600); FIND (Z[7],KEY=DISPLAY$[ENTRY_INDEX],DOM=3245)IOL=0380; GOTO 3225; REM "get customer shipto information
3220 REM "put in read for order information here!
3225 ENTRY$=ENTRY_TEMPLATE$
3230 GOSUB 3300
3235 IF LEN(TABLE$+ENTRY$)>25000 THEN PRINT (OUTPUT)TABLE$,EOL$,; TABLE$="" END_IF ; TABLE$=TABLE$+ENTRY$
3245 NEXT ENTRY_INDEX
3295 RETURN 
3300 REM "Given OS0$, create row in table
3305 EINDEX=POS("?tf?"=ENTRY$); IF EINDEX=0 THEN GOTO 3395
3306 EEND_INDEX=POS("?"=ENTRY$(EINDEX+4)),ETAG$=ENTRY$(EINDEX+4,EEND_INDEX-1),ENTRY1$=ENTRY$(1,EINDEX-1),ENTRY2$=ENTRY$(EINDEX+EEND_INDEX+4),EPOS=POS("<"+ETAG$+">"=ENTRY_TAGS$); IF EPOS=0 THEN EINDEX=0 ELSE EINDEX=NUM(ENTRY_TAGS$(EPOS-3,3))
3310 ON EINDEX GOTO 3389,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3389
3311 ENTRY$=ENTRY1$+STP(OS0$(548,20),1)+ENTRY2$; GOTO 3390; REM "item_code
3312 OS0$(37,40)=SUB(OS0$(37,40),QUO," ",0),OS0$(37,40)=SUB(OS0$(37,40),","," ",0),ENTRY$=ENTRY1$+STP(OS0$(37,40),2)+ENTRY2$; GOTO 3390; REM "desc
3313 ENTRY$=ENTRY1$+STP(OS0$(140,4),2)+"/"+STR(NUM(OS0$(354,10)):"##,##0")+ENTRY2$; GOTO 3390; REM "um_ext
3314 CPT$=STP(EC_PARM$(183,15),2); IF CPT$<>"" THEN CPT$=CPT$+": " END_IF ; IF EC_PARM$(552,1)<>"Y" AND UNIT_PRICE=NUM(OS0$(204,10)) THEN ENTRY$=ENTRY1$+ENTRY2$; GOTO 3390 ELSE ENTRY$=ENTRY1$+CPT$+STR(UNIT_PRICE:X3$(69,1)+"##,##0.00-")+ENTRY2$; GOTO 3390; REM "price"
3315 ITEMKEYIN$=OS0$(1,10); GOSUB 7700; ENTRY$=ENTRY1$+ITEM_KEY_UE$+ENTRY2$; GOTO 3390; REM "item_key_ue
3316 ENTRY$=ENTRY1$+USER$+ENTRY2$; GOTO 3390; REM "user
3317 ENTRY$=ENTRY1$+PASSWORD$+ENTRY2$; GOTO 3390; REM "password
3318 ENTRY$=ENTRY1$+SESSION_ID$+ENTRY2$; GOTO 3390; REM "session_id
3319 ENTRY$=ENTRY1$+IMGSRC_PREFIX$+STP(EC_PARM$(492,60),3)+CURR_IMAGE$+IMGSRC_ATTRIB$+IMGSRC_SUFFIX$+ENTRY2$; GOTO 3390; REM "image_us_thumb
3320 ENTRY$=ENTRY1$+STP(OS0$(140,4),2)+ENTRY2$; GOTO 3390; REM "um
3321 ENTRY$=ENTRY1$+STP(STP(OS0$(354,10),0,"0"),2)+ENTRY2$; GOTO 3390; REM "qty_per_um - SSP 218984
3322 ITEMKEYIN$=STP(OS0$(37,40),2); GOSUB 7700; ENTRY$=ENTRY1$+ITEM_KEY_UE$+ENTRY2$; GOTO 3390; REM "desc_ue
3323 ENTRY$=ENTRY1$+STP(OS0$(1,10),2)+ENTRY2$; GOTO 3390; REM "item_key
3324 ENTRY$=ENTRY1$+OS0$(98,10)+ENTRY2$; GOTO 3390; REM "vendor
3325 LPT$=STP(EC_PARM$(168,15),2); IF LPT$<>"" THEN LPT$=LPT$+": " END_IF ; ENTRY$=ENTRY1$+LPT$+STR(NUM(OS0$(204,10)):X3$(69,1)+"##,##0.00-")+ENTRY2$; GOTO 3390; REM "list_price
3326 OSITEM$=OS0$(1,10); GOSUB 7000; ENTRY$=ENTRY1$+EXTDESC$+ENTRY2$; GOTO 3390; REM "us_long_desc
3327 EXTDESC$=OS0$(37,40)+OS0$(144,40),EXTDESC$=STP(EXTDESC$,2); ENTRY$=ENTRY1$+EXTDESC$+ENTRY2$; GOTO 3390; REM "desc_ext
3328 ENTRY$=ENTRY1$+STR(UNIT_COST)+ENTRY2$; GOTO 3390; REM "cost
3329 GOSUB SUGGESTED_ITEM; ENTRY$=ENTRY1$+SUGG_ITMNR$+ENTRY2$; GOTO 3390; REM "suggested_item_number
3389 ENTRY$=ENTRY1$+ENTRY2$; GOTO 3390; REM "tag not found, take it out
3390 GOTO 3305
3395 RETURN 
3400 REM "Use Search Results file to build display array
3404 GOSUB 3450
3410 FIRST_ITEM$="",LAST_ITEM$="",TOTAL_RECORDS=0,INDEX=1; DIM DISPLAY$[MAX_ROWS]
3415 WHILE TOTAL_RECORDS<=LEN(ITEMSTRING$)/10-1
3416 CURRITEM$=ITEMSTRING$(TOTAL_RECORDS*10+1,10),TOTAL_RECORDS=TOTAL_RECORDS+1
3420 IF DIRECTION$="B" THEN ECTKEY$=KEP(Z[7],END=3435) ELSE ECTKEY$=KEY(Z[7],END=3435)
3425 IF ECTKEY$(1,25)<>HIKEY$ THEN GOTO 3435 ELSE READ (Z[7],KEY=ECTKEY$); DISPLAY$[INDEX]=ECTKEY$,TOTAL_RECORDS=TOTAL_RECORDS+1,INDEX=INDEX+1; IF MAX_ROWS<>0 AND TOTAL_RECORDS>=MAX_ROWS THEN GOTO 3435; REM "skip to correct place to exit
3430 GOTO 3420
3440 IF DIRECTION$="B" THEN FIRST_ITEM$=DISPLAY$[TOTAL_RECORDS],LAST_ITEM$=DISPLAY$[1] ELSE FIRST_ITEM$=DISPLAY$[1],LAST_ITEM$=DISPLAY$[TOTAL_RECORDS]
3445 RETURN 
3450 REM "Set VERY_FIRST_ITEM$ and VERY_LAST_ITEM$. These will be used to determine when to NOT show prev and next buttons
3455 VERY_FIRST_ITEM$="",VERY_LAST_ITEM$=""
3460 IF LEN(STP(ITEMSTRING$,3," "))=0 THEN GOTO 3495
3461 VERY_FIRST_ITEM$=ITEMSTRING$(1,10)
3462 XX=LEN(ITEMSTRING$),VERY_LAST_ITEM$=ITEMSTRING$(XX-10,10)
3495 RETURN 
3500 REM "Output next button, using BUTTON_NEXT_TEMPLATE$ to pass information, creating BUTTON$, if needed
3502 BUTTON$="",BUTTON_NEXT_TAGS$="001<position_item>002<user>003<password>004<session_id>005<category>"
3503 REM "Setup BUTTON_NEXT_TEMPLATE$
3505 READ (100,END=3506)LINE$; GOSUB 7550; BUTTON_NEXT_TEMPLATE$=BUTTON_NEXT_TEMPLATE$+LINE$+EOL$; IF POS("?tf?buttonnextend?"=LINE$)=0 THEN GOTO 3505
3510 IF LAST_ITEM$=VERY_LAST_ITEM$ THEN BUTTON$=""; GOTO 3595 ELSE BUTTON$=BUTTON_NEXT_TEMPLATE$
3515 BNINDEX=POS("?tf?"=BUTTON$); IF BNINDEX=0 THEN GOTO 3591
3516 BNEND_INDEX=POS("?"=BUTTON$(BNINDEX+4)),BNTAG$=BUTTON$(BNINDEX+4,BNEND_INDEX-1),BUTTON1$=BUTTON$(1,BNINDEX-1),BUTTON2$=BUTTON$(BNINDEX+BNEND_INDEX+4),BNPOS=POS("<"+BNTAG$+">"=BUTTON_NEXT_TAGS$); IF BNPOS=0 THEN BUTTON$=BUTTON1$+BUTTON2$,BNINDEX=0 ELSE BNINDEX=NUM(BUTTON_NEXT_TAGS$(BNPOS-3,3))
3520 ON BNINDEX GOTO 3590,3521,3522,3523,3524,3525,3590
3521 BUTTON$=BUTTON1$+LAST_ITEM$+BUTTON2$; GOTO 3590; REM "position_item
3522 BUTTON$=BUTTON1$+USER$+BUTTON2$; GOTO 3590; REM "User
3523 BUTTON$=BUTTON1$+PASSWORD$+BUTTON2$; GOTO 3590; REM "password
3524 BUTTON$=BUTTON1$+SESSION_ID$+BUTTON2$; GOTO 3590; REM "session_id
3525 BUTTON$=BUTTON1$+CATEGORY$+BUTTON2$; GOTO 3590; REM "category
3590 GOTO 3515
3595 RETURN 
3600 REM "Output previous button, using BUTTON_PREV_TEMPLATE$ to pass information, creating BUTTON$, if needed
3602 BUTTON$="",BUTTON_PREV_TAGS$="001<position_item>002<user>003<password>004<session_id>005<category>"
3605 READ (100,END=3606)LINE$; GOSUB 7550; BUTTON_PREV_TEMPLATE$=BUTTON_PREV_TEMPLATE$+LINE$+EOL$; IF POS("?tf?buttonprevend?"=LINE$)=0 THEN GOTO 3605
3610 IF FIRST_ITEM$=VERY_FIRST_ITEM$ THEN BUTTON$=""; GOTO 3695 ELSE BUTTON$=BUTTON_PREV_TEMPLATE$
3615 BNINDEX=POS("?tf?"=BUTTON$); IF BNINDEX=0 THEN GOTO 3691
3616 BNEND_INDEX=POS("?"=BUTTON$(BNINDEX+4)),BNTAG$=BUTTON$(BNINDEX+4,BNEND_INDEX-1),BUTTON1$=BUTTON$(1,BNINDEX-1),BUTTON2$=BUTTON$(BNINDEX+BNEND_INDEX+4),BNPOS=POS("<"+BNTAG$+">"=BUTTON_PREV_TAGS$); IF BNPOS=0 THEN BUTTON$=BUTTON1$+BUTTON2$,BNINDEX=0 ELSE BNINDEX=NUM(BUTTON_PREV_TAGS$(BNPOS-3,3))
3620 ON BNINDEX GOTO 3690,3621,3622,3623,3624,3625,3690
3621 BUTTON$=BUTTON1$+FIRST_ITEM$+BUTTON2$; GOTO 3690; REM "position_item
3622 BUTTON$=BUTTON1$+USER$+BUTTON2$; GOTO 3690; REM "User
3623 BUTTON$=BUTTON1$+PASSWORD$+BUTTON2$; GOTO 3690; REM "password
3624 BUTTON$=BUTTON1$+SESSION_ID$+BUTTON2$; GOTO 3690; REM "session_id
3625 BUTTON$=BUTTON1$+CATEGORY$+BUTTON2$; GOTO 3690; REM "category
3690 GOTO 3615
3695 RETURN 
3700 REM "buttonallstart/end
3702 ALLBUTTON$=""
3705 READ (100,END=3706)LINE$; GOSUB 7550; ALLBUTTON$=ALLBUTTON$+LINE$+EOL$; IF POS("?tf?buttonallend?"=LINE$)=0 THEN GOTO 3705
3707 IF ITEMALL_COUNT=0 THEN ALLBUTTON$=""
3709 RETURN 
3750 REM "Process DISPLAY$[X] and separate into ITEMALL$[X] and ITEM3P$[X] for separate section display
3751 IF SEPARATION_DONE$="Y" THEN GOTO 3795
3752 DIM ITEMALL$[MAX_ROWS],ITEM3P$[MAX_ROWS]; ITEMALL_COUNT=0,ITEM3P_COUNT=0
3753 SEPARATION_DONE$="Y"; IF TOTAL_RECORDS=0 THEN GOTO 3795
3755 FOR SI=1 TO TOTAL_RECORDS
3757 DIM ECR$(1000); FIND (Z[6],KEY=DISPLAY$[SI](26,20),DOM=3760)ECR$; IF ECR$(243,10)=DIM(10) THEN GOTO 3760 ELSE GOTO 3765
3760 REM "all item
3762 ITEMALL_COUNT=ITEMALL_COUNT+1,ITEMALL$[ITEMALL_COUNT]=DISPLAY$[SI]; GOTO 3769
3765 REM "3p item
3767 ITEM3P_COUNT=ITEM3P_COUNT+1,ITEM3P$[ITEM3P_COUNT]=DISPLAY$[SI]
3769 NEXT SI
3795 RETURN 
3800 REM "Output entries, using ENTRYALL_TEMPLATE$ to pass information, create TABLE$ to output
3802 REM "entry tags moved to line 1110
3803 REM "Setup ENTRYALL_TEMPLATE$
3804 ENTRYALL_TEMPLATE$=LINE$,TABLE$="",PREV_CATEGORY$=""
3805 READ (100,END=3806)LINE$; GOSUB 7550; ENTRYALL_TEMPLATE$=ENTRYALL_TEMPLATE$+LINE$+EOL$; IF POS("?tf?allorderend?"=LINE$)=0 THEN GOTO 3805
3809 REM "Now read catalog,if B direction do it backwards
3810 IF LEN(STP(ITEMSTRING$,3," "))=0 THEN GOTO 3849 ELSE START_PT=0,END_PT=LEN(ITEMSTRING$)/10-1,STEP_SIZE=1
3812 FOR ENTRY_INDEX=START_PT TO END_PT STEP STEP_SIZE
3813 CURR_ITEM$=ITEMSTRING$(ENTRY_INDEX*10+1,10),CURR_IMAGE$=STP(IMAGESTRING$(ENTRY_INDEX*50+1,50),3)
3814 DIM OS0$(600); FIND (Z(3),KEY=CURR_ITEM$,DOM=3845)IOL=0330
3823 REM "**
3825 ENTRY$=ENTRYALL_TEMPLATE$
3830 ACTIVETEMPLATE$=ENTRYALL_TEMPLATE$; GOSUB 8100; GOSUB 3300
3835 IF LEN(TABLE$+ENTRY$)>25000 THEN PRINT (OUTPUT)TABLE$,EOL$,; TABLE$="" END_IF ; TABLE$=TABLE$+ENTRY$
3845 NEXT ENTRY_INDEX
3849 RETURN 
3850 REM "Output entries, using ENTRY3P_TEMPLATE$ to pass information, create TABLE$ to output
3851 GOSUB 3750
3853 REM "Setup ENTRY3P_TEMPLATE$
3854 ENTRY3P_TEMPLATE$=LINE$,TABLE$="",PREV_CATEGORY$=""
3855 READ (100,END=3856)LINE$; GOSUB 7550; ENTRY3P_TEMPLATE$=ENTRY3P_TEMPLATE$+LINE$+EOL$; IF POS("?tf?3porderend?"=LINE$)=0 THEN GOTO 3855
3859 REM "Now read catalog,if B direction do it backwards
3860 IF DIRECTION$="B" THEN START_PT=ITEM3P_COUNT,END_PT=1,STEP_SIZE=-1 ELSE START_PT=1,END_PT=ITEM3P_COUNT,STEP_SIZE=1
3864 IF ITEM3P_COUNT=0 THEN GOTO 3899
3865 FOR ENTRY_INDEX=START_PT TO END_PT STEP STEP_SIZE
3867 IF ITEM3P$[ENTRY_INDEX](26,10)=DIM(10) THEN STOCK$="Y"; READ (Z[7],KEY=ITEM3P$[ENTRY_INDEX],DOM=3868)ECT$,ECH$,IOL=0410 ELSE STOCK$="N"; READ (Z[7],KEY=ITEM3P$[ENTRY_INDEX],DOM=3868)ECT$,ECH$,IOL=0320
3870 DIM ECR$(1000); FIND (Z[6],KEY=ITEM3P$[ENTRY_INDEX](26,20),DOM=3881)IOL=0360; REM "get form webec parms
3871 REM "**IF ECR$(181,6)<>DIM(6) THEN ECR$(181,6)>X3$(21,6) GOTO 3895 REM "IF EFFECTIVE DATE NOT YET REACHED THEN SKIP
3872 REM "**IF ECR$(187,6)<>DIM(6) THEN ECR$(187,6)<X3$(21,6) GOTO 3895 ; REM "IF EXPIRATION DATE HAS PASSED THEN SKIP
3873 REM "**
3875 ENTRY$=ENTRY3P_TEMPLATE$
3880 ACTIVETEMPLATE$=ENTRY3P_TEMPLATE$; GOSUB 3300
3885 IF LEN(TABLE$+ENTRY$)>62000 THEN PRINT (OUTPUT)TABLE$,EOL$,; TABLE$="" END_IF ; TABLE$=TABLE$+ENTRY$
3895 NEXT ENTRY_INDEX
3899 RETURN 
4000 REM "Category has changed, output a category header (if categorystart was supplied and we have html to do so), then update PREV_CATEGORY$
4002 CAT_TAGS$="001<category_code>002<category_desc>003<category_addl>"
4003 DIM ECG$(100); ECG$(1,10)=DISPLAY$[ENTRY_INDEX](1,10); FIND (Z[4],KEY=ECG$(1,10),DOM=4004)IOL=0340
4004 PREV_CATEGORY$=DISPLAY$[ENTRY_INDEX](1,10)
4005 IF CAT_TEMPLATE$="" THEN GOTO 4095 ELSE CAT$="",TMP_CAT$=CAT_TEMPLATE$; REM "Skip if no template supplied, else setup for starting
4006 CINDEX=POS("?tf?"=TMP_CAT$); IF CINDEX=0 THEN CAT$=CAT$+TMP_CAT$; GOTO 4093
4007 CEND_INDEX=POS("?"=TMP_CAT$(CINDEX+4)),CTAG$=TMP_CAT$(CINDEX+4,CEND_INDEX-1),CAT$=CAT$+TMP_CAT$(1,CINDEX-1),TMP_CAT$=TMP_CAT$(CINDEX+CEND_INDEX+4),CPOS=POS("<"+CTAG$+">"=CAT_TAGS$); IF CPOS=0 THEN CINDEX=0 ELSE CINDEX=NUM(CAT_TAGS$(CPOS-3,3))
4010 ON CINDEX GOTO 4089,4011,4012,4013,4089
4011 CAT$=CAT$+STP(ECG$(1,10),1); GOTO 4090; REM "category_code
4012 CAT$=CAT$+STP(ECG$(11,30),1); GOTO 4090; REM "category_desc
4013 CAT$=CAT$+STP(ECG$(41,60),1); GOTO 4090; REM "category_addl
4089 CAT$=CAT$+"?"; GOTO 4090; REM "tag not found, replace with '?'
4090 GOTO 4006
4093 TABLE$=TABLE$+CAT$
4095 RETURN 
4100 REM "quantity break pricing section (qtybreakstart)
4101 REM "Output entries, using QTYBREAK_TEMPLATE$ to pass information, create QTABLE$ to output
4102 REM "entry tags moved to line 1110
4103 REM "Setup QTYBREAK_TEMPLATE$
4104 QTYBREAK_TEMPLATE$=ACTIVETEMPLATE$,QTABLE$="",TMPENTRY$=ACTIVETEMPLATE$
4110 STARTQP=POS("<!?tf?qtybreakstart?>"=QTYBREAK_TEMPLATE$); IF STARTQP<>0 AND LEN(QTYBREAK_TEMPLATE$)<>STARTQP+21 THEN QTYBREAK_TEMPLATE$=QTYBREAK_TEMPLATE$(STARTQP+21)
4111 ENDQP=POS("<!?tf?qtybreakend?>"=QTYBREAK_TEMPLATE$); IF ENDQP<>0 THEN QTYBREAK_TEMPLATE$=QTYBREAK_TEMPLATE$(1,ENDQP-1)
4112 REM "strip out the qtybreakstart/end section from ENTRY2$ that is currently being processed
4115 ENDQP=POS("<!?tf?qtybreakend?>"=ENTRY2$); IF ENDQP=0 THEN GOTO 4116 ELSE ENTRY2$=ENTRY2$(ENDQP+21)
4116 IF LEN(ENTRY1$)<=2 THEN GOTO 4117 END_IF ; IF ENTRY1$(LEN(ENTRY1$)-1,2)="<!" THEN ENTRY1$=ENTRY1$(1,LEN(ENTRY1$)-2); REM "strip out page control tag <! that is left over with the processing of it as a simple data tag
4117 REM "PRINT 'CS',"ENTRY1: ",'LF',@(0),ENTRY1$,; INPUT *
4120 QBENTRY$=QTYBREAK_TEMPLATE$
4122 GOSUB 4200; QTYBREAK$=QBENTRY$
4149 RETURN 
4200 REM "Given item, create row in table
4202 QBENTRY_TAGS$="001<break_price1>002<break_price2>003<break_price3>004<break_price4>005<break_price5>006<break_price6>007<break_price7>008<break_price8>009<break_price9>010<break_price10>011<break_price11>012<break_price12>013<break_qty1>014<break_qty2>015<break_qty3>016<break_qty4>017<break_qty5>018<break_qty6>019<break_qty7>020<break_qty8>021<break_qty9>022<break_qty10>023<break_qty11>024<break_qty12>025<break1>026<break2>027<break3>028<break4>029<break5>030<break6>031<break7>032<break8>033<break9>034<break10>035<break11>036<break12>037<breakrange1>038<breakrange2>039<breakrange3>040<breakrange4>041<breakrange5>042<breakrange6>043<breakrange7>044<breakrange8>045<breakrange9>046<breakrange10>047<breakrange11>048<breakrange12>049<qtybreakstart>050<item_key>051<item_key_ue>"
4203 IF STOCK$<>"Y" THEN QBENTRY$=""; GOTO 4299
4205 QBEINDEX=POS("?tf?"=QBENTRY$); IF QBEINDEX=0 THEN GOTO 4299
4206 QBEEND_INDEX=POS("?"=QBENTRY$(QBEINDEX+4)),QBETAG$=QBENTRY$(QBEINDEX+4,QBEEND_INDEX-1),QBENTRY1$=QBENTRY$(1,QBEINDEX-1),QBENTRY2$=QBENTRY$(QBEINDEX+QBEEND_INDEX+4),QBEPOS=POS("<"+QBETAG$+">"=QBENTRY_TAGS$); IF QBEPOS=0 THEN QBEINDEX=0 ELSE QBEINDEX=NUM(QBENTRY_TAGS$(QBEPOS-3,3))
4209 REM "PRINT 'CS',@(0,0),"QBEINDEX: ",QBEINDEX," ",QBETAG$,; INPUT *,
4210 IF EC$[2](322,1)="Y" THEN QBENTRY$=QBENTRY1$+QBENTRY2$; GOTO 4295 ELSE ON QBEINDEX GOTO 4294,4211,4212,4213,4214,4215,4216,4217,4218,4219,4220,4221,4222,4223,4224,4225,4226,4227,4228,4229,4230,4231,4232,4233,4234,4235,4236,4237,4238,4239,4240,4241,4242,4243,4244,4245,4246,4247,4248,4249,4250,4251,4252,4253,4254,4255,4256,4257,4258,4259,4260,4261,4294
4211 BI=1; QBENTRY$=QBENTRY1$+BREAKPRICE$[BI]+QBENTRY2$; GOTO 4295; REM "break_price1
4212 BI=2; QBENTRY$=QBENTRY1$+BREAKPRICE$[BI]+QBENTRY2$; GOTO 4295; REM "break_price2
4213 BI=3; QBENTRY$=QBENTRY1$+BREAKPRICE$[BI]+QBENTRY2$; GOTO 4295; REM "break_price3
4214 BI=4; QBENTRY$=QBENTRY1$+BREAKPRICE$[BI]+QBENTRY2$; GOTO 4295; REM "break_price4
4215 BI=5; QBENTRY$=QBENTRY1$+BREAKPRICE$[BI]+QBENTRY2$; GOTO 4295; REM "break_price5
4216 BI=6; QBENTRY$=QBENTRY1$+BREAKPRICE$[BI]+QBENTRY2$; GOTO 4295; REM "break_price6
4217 BI=7; QBENTRY$=QBENTRY1$+BREAKPRICE$[BI]+QBENTRY2$; GOTO 4295; REM "break_price7
4218 BI=8; QBENTRY$=QBENTRY1$+BREAKPRICE$[BI]+QBENTRY2$; GOTO 4295; REM "break_price8
4219 BI=9; QBENTRY$=QBENTRY1$+BREAKPRICE$[BI]+QBENTRY2$; GOTO 4295; REM "break_price9
4220 BI=10; QBENTRY$=QBENTRY1$+BREAKPRICE$[BI]+QBENTRY2$; GOTO 4295; REM "break_price10
4221 BI=11; QBENTRY$=QBENTRY1$+BREAKPRICE$[BI]+QBENTRY2$; GOTO 4295; REM "break_price11
4222 BI=12; QBENTRY$=QBENTRY1$+BREAKPRICE$[BI]+QBENTRY2$; GOTO 4295; REM "break_price12
4223 BI=1; QBENTRY$=QBENTRY1$+BREAKQTY$[BI]+QBENTRY2$; GOTO 4295; REM "break_qty1
4224 BI=2; QBENTRY$=QBENTRY1$+BREAKQTY$[BI]+QBENTRY2$; GOTO 4295; REM "break_qty2
4225 BI=3; QBENTRY$=QBENTRY1$+BREAKQTY$[BI]+QBENTRY2$; GOTO 4295; REM "break_qty3
4226 BI=4; QBENTRY$=QBENTRY1$+BREAKQTY$[BI]+QBENTRY2$; GOTO 4295; REM "break_qty4
4227 BI=5; QBENTRY$=QBENTRY1$+BREAKQTY$[BI]+QBENTRY2$; GOTO 4295; REM "break_qty5
4228 BI=6; QBENTRY$=QBENTRY1$+BREAKQTY$[BI]+QBENTRY2$; GOTO 4295; REM "break_qty6
4229 BI=7; QBENTRY$=QBENTRY1$+BREAKQTY$[BI]+QBENTRY2$; GOTO 4295; REM "break_qty7
4230 BI=8; QBENTRY$=QBENTRY1$+BREAKQTY$[BI]+QBENTRY2$; GOTO 4295; REM "break_qty8
4231 BI=9; QBENTRY$=QBENTRY1$+BREAKQTY$[BI]+QBENTRY2$; GOTO 4295; REM "break_qty9
4232 BI=10; QBENTRY$=QBENTRY1$+BREAKQTY$[BI]+QBENTRY2$; GOTO 4295; REM "break_qty10
4233 BI=11; QBENTRY$=QBENTRY1$+BREAKQTY$[BI]+QBENTRY2$; GOTO 4295; REM "break_qty11
4234 BI=12; QBENTRY$=QBENTRY1$+BREAKQTY$[BI]+QBENTRY2$; GOTO 4295; REM "break_qty12
4235 BI=1; QBENTRY$=QBENTRY1$+BREAKALL$[BI]+QBENTRY2$; GOTO 4295; REM "break1
4236 BI=2; QBENTRY$=QBENTRY1$+BREAKALL$[BI]+QBENTRY2$; GOTO 4295; REM "break2
4237 BI=3; QBENTRY$=QBENTRY1$+BREAKALL$[BI]+QBENTRY2$; GOTO 4295; REM "break3
4238 BI=4; QBENTRY$=QBENTRY1$+BREAKALL$[BI]+QBENTRY2$; GOTO 4295; REM "break4
4239 BI=5; QBENTRY$=QBENTRY1$+BREAKALL$[BI]+QBENTRY2$; GOTO 4295; REM "break5
4240 BI=6; QBENTRY$=QBENTRY1$+BREAKALL$[BI]+QBENTRY2$; GOTO 4295; REM "break6
4241 BI=7; QBENTRY$=QBENTRY1$+BREAKALL$[BI]+QBENTRY2$; GOTO 4295; REM "break7
4242 BI=8; QBENTRY$=QBENTRY1$+BREAKALL$[BI]+QBENTRY2$; GOTO 4295; REM "break8
4243 BI=9; QBENTRY$=QBENTRY1$+BREAKALL$[BI]+QBENTRY2$; GOTO 4295; REM "break9
4244 BI=10; QBENTRY$=QBENTRY1$+BREAKALL$[BI]+QBENTRY2$; GOTO 4295; REM "break10
4245 BI=11; QBENTRY$=QBENTRY1$+BREAKALL$[BI]+QBENTRY2$; GOTO 4295; REM "break11
4246 BI=12; QBENTRY$=QBENTRY1$+BREAKALL$[BI]+QBENTRY2$; GOTO 4295; REM "break12
4247 BI=1; QBENTRY$=QBENTRY1$+BREAKRANGEALL$[BI]+QBENTRY2$; GOTO 4295; REM "breakrange1
4248 BI=2; QBENTRY$=QBENTRY1$+BREAKRANGEALL$[BI]+QBENTRY2$; GOTO 4295; REM "breakrange2
4249 BI=3; QBENTRY$=QBENTRY1$+BREAKRANGEALL$[BI]+QBENTRY2$; GOTO 4295; REM "breakrange3
4250 BI=4; QBENTRY$=QBENTRY1$+BREAKRANGEALL$[BI]+QBENTRY2$; GOTO 4295; REM "breakrange4
4251 BI=5; QBENTRY$=QBENTRY1$+BREAKRANGEALL$[BI]+QBENTRY2$; GOTO 4295; REM "breakrange5
4252 BI=6; QBENTRY$=QBENTRY1$+BREAKRANGEALL$[BI]+QBENTRY2$; GOTO 4295; REM "breakrange6
4253 BI=7; QBENTRY$=QBENTRY1$+BREAKRANGEALL$[BI]+QBENTRY2$; GOTO 4295; REM "breakrange7
4254 BI=8; QBENTRY$=QBENTRY1$+BREAKRANGEALL$[BI]+QBENTRY2$; GOTO 4295; REM "breakrange8
4255 BI=9; QBENTRY$=QBENTRY1$+BREAKRANGEALL$[BI]+QBENTRY2$; GOTO 4295; REM "breakrange9
4256 BI=10; QBENTRY$=QBENTRY1$+BREAKRANGEALL$[BI]+QBENTRY2$; GOTO 4295; REM "breakrange10
4257 BI=11; QBENTRY$=QBENTRY1$+BREAKRANGEALL$[BI]+QBENTRY2$; GOTO 4295; REM "breakrange11
4258 BI=12; QBENTRY$=QBENTRY1$+BREAKRANGEALL$[BI]+QBENTRY2$; GOTO 4295; REM "breakrange12
4259 GOSUB 7950; GOSUB 4100; QBENTRY$=QBENTRY1$+QTYBREAK$+QBENTRY2$; GOTO 4295; REM "qtybreakstart
4260 IF STOCK$<>"Y" THEN ITEMKEY$=FM1$(1,20) ELSE ITEMKEY$=IC0$(1,20) END_IF ; QBENTRY$=QBENTRY1$+ITEMKEY$+QBENTRY2$; GOTO 4295; REM "item_key - key to Form master
4261 ITEMKEYIN$=FM1$(1,20); GOSUB 7700; QBENTRY$=QBENTRY1$+ITEM_KEY_UE$+QBENTRY2$; GOTO 4295; REM "item_key_ue
4294 QBENTRY$=QBENTRY1$+""+QBENTRY2$; GOTO 4295; REM "tag not found, replace with '?'
4295 GOTO 4205
4299 RETURN 
5000 REM "Item Search
5002 HIKEY$=EC$[1](1,22)+SEARCH_TYPE$,FOUND=0
5004 IF NEW_SEARCH$<>"Y" THEN GOTO 5020
5006 CALL "ZZINIT",STR(Z[7]:"00")
5020 REM "process search type
5021 REM "I/C=form search    FM0=ship-to search    ORD=TF order number   P/O=customer p/o
5025 ON STYPE GOTO 5050,5200,5300
5050 REM "item search setup
5055 IF CATEGORY$="**********" THEN SEARCH_CATEGORY$=EDI_CATEGORY_LIST$ ELSE SEARCH_CATEGORY$=CATEGORY$
5100 REM "item searches
5102 FOR CATINDEX=0 TO LEN(SEARCH_CATEGORY$)/10-1; REM "get next category
5103 CURRCAT$=SEARCH_CATEGORY$(CATINDEX*10+1,10)
5104 IF CURRCAT$=EC$[2](483,10) THEN SEARCH_MYCATEGORY$="Y"; READ (Z[10],KEY=EC$[2](1,15),DOM=5105) ELSE SEARCH_MYCATEGORY$="N"; READ (Z[5],KEY=CATALOG$+CURRCAT$,DOM=5106)
5105 EDEKEY$=KEY(Z[10],END=5180); READ (Z[10],KEY=EDEKEY$)EDEREC$; DIM ECH$(60); ECH$(1,10)=EC$[2](325,10),ECH$(11,10)=EC$[2](483,10),ECH$(21,40)=EDEREC$(16,40); IF EDEKEY$(1,15)<>EC$[2](1,15) THEN GOTO 5180 ELSE GOTO 5108; REM "if my catagory being searched then check for break
5106 ECHKEY$=KEY(Z[5],END=5180); IF ECHKEY$(1,10)<>CATALOG$ THEN GOTO 5180 END_IF ; IF ECHKEY$(11,10)<>CURRCAT$ THEN GOTO 5180 END_IF ; REM "if end-of-catalog or end-of-category --> get next category to process
5107 READ (Z[5],KEY=ECHKEY$)IOL=0350; DIM ECR$(1000); FIND (Z[6],KEY=ECH$(41,20),DOM=5108)IOL=0360; GOSUB 8100; IF ITEM_OK$<>"Y" THEN GOTO 5160
5108 GOSUB SET_READONLY; DIM IC0$(200),IC0[40],FM1$(500),FM1[40]; IF ECH$(41,10)=DIM(10) THEN STOCK$="Y"; FIND (Z[11],KEY=ECH$(41,20),DOM=5160)IOL=0410; ITEMVAR$=IC0$ ELSE STOCK$="N"; FIND (Z[2],KEY=ECH$(41,20),DOM=5160)IOL=0320; ITEMVAR$=FM1$
5109 REPORT$="N",SINDEX=1
5110 IF EC$[2](339,1)<>"Y" THEN GOTO 5115 ELSE IF EC$[2](483,10)<>DIM(10) THEN GOTO 5112
5111 FIND (Z[9],KEY=ECH$(41,20)+EC$[2](61,4),DOM=5160); REM "if requiring activity at location - then skip if no FM4 record
5120 WHILE SINDEX<=ITEM_SEARCH_ELEMENTS AND REPORT$="N"; REM "set at 601
5121 IF LEN(STP(SI$[SINDEX,1],2))=0 THEN GOTO 5140; REM "no value requested for matching from the search request
5122 ITEMDONE$="N",ITEMINDEX=0; IF STOCK$<>"Y" THEN SECONDINDEX=2 ELSE SECONDINDEX=4
5123 WHILE ITEMDONE$<>"Y" AND ITEMINDEX<=LEN(SI$[SINDEX,1])/10-1; CKITEM$=SI$[SINDEX,1](ITEMINDEX*10+1,10),ITEMINDEX=ITEMINDEX+1; IF LEN(STP(CKITEM$,2))=0 THEN GOTO 5129
5124 PATTERN$="*"+STP(UCS(CKITEM$),3," ")+"*",ITEMVALUE$=STP(UCS(STP(ITEMVAR$(NUM(SI$[SINDEX,SECONDINDEX](1,4)),NUM(SI$[SINDEX,SECONDINDEX](5,4))),1)),0); REM "get ic0$/fm1$ value - convert to uppercase and strip leading/trailing blanks
5125 IF LEN(ITEMVALUE$)=0 THEN GOTO 5129
5128 IF ITEMVALUE$ LIKE PATTERN$ THEN ITEMDONE$="Y",REPORT$="Y"
5129 WEND ; REM "get next item code to check
5140 SINDEX=SINDEX+1; WEND ; REM "get next search element to check
5145 IF REPORT$="N" THEN GOTO 5160
5150 REM "item qualifies against search
5152 FOUND=FOUND+1; IF STOCK$<>"Y" THEN WRITE (Z[7],KEY=HIKEY$+ECH$(41,20))HIKEY$+ECH$,ECH$,IOL=0320 ELSE WRITE (Z[7],KEY=HIKEY$+ECH$(41,20))HIKEY$+ECH$,ECH$,IOL=0410
5160 GOSUB CLEAR_READONLY; IF SEARCH_MYCATALOG$<>"Y" THEN GOTO 5106 ELSE GOTO 5105; REM "get next catalog record
5180 NEXT CATINDEX
5190 GOTO 5990
5200 REM "customer ship-to searches
5216 READ (Z[8],KEY="C"+EC$[2](51,10),DOM=5220)
5220 FM0KEY$=KEY(Z[8],END=5280); IF FM0KEY$(1,11)<>"C"+EC$[2](51,10) THEN GOTO 5280
5224 READ (Z[8],KEY=FM0KEY$)IOL=0380
5232 REPORT$="N",SINDEX=1
5236 WHILE SINDEX<=ST_SEARCH_ELEMENTS AND REPORT$="N"; REM "set at 601
5240 ON POS(ST$[SINDEX,3]="SN") GOTO 5244,5244,5244
5244 IF LEN(STP(ST$[SINDEX,1],2))=0 THEN GOTO 5260; REM "no value requested for matching from the search request
5248 PATTERN$="*"+UCS(ST$[SINDEX,1])+"*",FM0VALUE$=STP(UCS(STP(FM0$(NUM(ST$[SINDEX,2](1,4)),NUM(ST$[SINDEX,2](5,4))),1)),0); REM "get fm0$ value - convert to uppercase and strip leading/trailing blanks
5252 IF LEN(FM0VALUE$)=0 THEN GOTO 5260
5256 IF FM0VALUE$ LIKE PATTERN$ THEN REPORT$="Y"
5260 SINDEX=SINDEX+1; WEND 
5264 IF REPORT$="N" THEN GOTO 5280
5268 REM "shipto qualifies against search
5272 WRITE (Z[7],KEY=HIKEY$+FM0KEY$)IOL=0380; FOUND=FOUND+1
5276 GOTO 5220; REM "get next catalog record
5280 GOTO 5990
5300 REM "tf order information search
5990 READ (Z[7],KEY="",DOM=5991)
5995 RETURN 
7000 REM "get extended description
7010 DIM EXTDESC$(2048); FIND (Z(16),KEY=OSITEM$,DOM=*NEXT)EXTDESC$
7020 EXTDESC$=EXTDESC$(11),EXTDESC$=STP(EXTDESC$,2)
7045 RETURN 
7400 SET_READONLY:
7410 SET_PARAM 'XI'
7420 SET_READONLY_END:RETURN 
7430 CLEAR_READONLY:
7435 SET_PARAM -'XI'
7440 CLEAR_READONLY_END:RETURN 
7550 REM "Send LINE$ to EC3BYB for generic fields processing
7560 CALL "EC3BYB",ERR=7561,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,LINE$,BYBINFO${ALL},BYBOPTIONS$,100 ! 227154
7595 RETURN 
7600 REM "3p_text handling, ENTRY2$ should have [x] in it
7605 REM "Extract [x] part from line2, if not found then ignore
7606 VAR_TEXT$=""
7610 IF LEN(ENTRY2$)<3 THEN GOTO 7611 ELSE BRACKET_POS=POS("]"=ENTRY2$); IF ENTRY2$(1,1)<>"[" OR BRACKET_POS=0 THEN GOTO 7611 ELSE VAR_CODE$=ENTRY2$(1,BRACKET_POS),ENTRY2$=ENTRY2$(BRACKET_POS+1); GOTO 7612
7611 VAR_TEXT$=""; GOTO 7645; REM "did not find var code part, so leave
7612 VAR_CODE$=VAR_CODE$(2,LEN(VAR_CODE$)-2); VAR_CODE$=STR(NUM(VAR_CODE$,ERR=7611):"00000")
7615 VAR_CODE_KEY$=ECR$(243,10)+VAR_CODE$; CALL "EC3BYC",X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,VAR_CODE_KEY$,VAR_TEXT${ALL}
7620 VAR_TEXT$=VAR_TEXT$[1]
7645 RETURN 
7700 REM "Netscape and other may require URL encoded item code to hide spaces, slashes, etc. we will encode the whole string rather than just the special chars, because its easier
7705 ITEM_KEY_UE$=""
7710 FOR JJ=1 TO LEN(ITEMKEYIN$); ITEM_KEY_UE$=ITEM_KEY_UE$+"%"+HTA(ITEMKEYIN$(JJ,1)); NEXT JJ
7745 RETURN 
7750 REM "URL encode the description
7755 DESC_UE$="",DESC$=STP(FM1$(42,40),1); IF DESC$="" THEN GOTO 7795
7760 FOR JJ=1 TO LEN(DESC$); DESC_UE$=DESC_UE$+"%"+HTA(DESC$(JJ,1)); NEXT JJ
7795 RETURN 
7800 REM "get active uom
7810 ON POS(ITEM_TYPE$="CI")-1 GOTO 7820,7840
7820 REM "C - items FM1
7830 IF STP(FM1$(238,4),3," ")="" OR FM1[25]=0 THEN UM$=STP(FM1$(100,4),1),PACK=FM1[4],EXT_UM$=UM$+"/"+STR(PACK:"###0"); GOTO 7860 ELSE UM$=STP(FM1$(238,4),1),PACK=FM1[25],EXTU$=UM$+"/"+STR(PACK:"###0"); GOTO 7860
7840 REM "I - items IC0
7850 UM$=STP(IC0$(120,4),1),PACK=IC0[14]
7860 EXT_UM$=UM$+"/"+STP(STR(PACK:"###0"),2),EXTUMS$=UM$+"es/"+STR(PACK:"###0"); IF IC0[14]=0 THEN SELLPACK=1 ELSE SELLPACK=IC0[14]
7870 RETURN 
7880 REM "price_in_alt_um
7881 IF EC$[2](322,1)="Y" THEN ENTRY$=ENTRY1$+ENTRY2$; GOTO 7895
7882 IF STOCK$<>"Y" THEN GOTO 7890 ELSE GOTO 7883
7885 ALT_PRICE=IC0[0]; ENTRY$=ENTRY1$+STR(ALT_PRICE:X3$(69,1)+"###,###.00")+ENTRY2$; GOTO 7895; REM "price_in_alt_um, calculated from sell price, sell u/m and alt iss #1 um
7890 IF FM1[25]=0 THEN ALT_PRICE=FM1[3] ELSE IF FM1[3]=0 OR FM1[4]=0 THEN ALT_PRICE=0 ELSE ALT_PRICE=FM1[3]*FM1[25]/FM1[4] END_IF END_IF ; ENTRY$=ENTRY1$+STR(ALT_PRICE:X3$(69,1)+"###,###.00")+ENTRY2$; GOTO 7895; REM "price_in_alt_um, calculated from sell price, sell u/m and alt iss #1 um
7895 RETURN 
7900 REM "URL encode anything
7902 REM "RTEXT passed in   UTEXT returned
7910 UTEXT$=""; IF RTEXT$="" THEN GOTO 7930
7920 FOR JJ=1 TO LEN(RTEXT$); UTEXT$=UTEXT$+"%"+HTA(RTEXT$(JJ,1)); NEXT JJ
7930 RETURN 
7950 REM "break variables
7951 REM "BI - passed in containing break level to process
7952 REM "returns the formatted tag values on line 7960
7953 REM "BREAKQTY$ = 10 BOX/50"
7954 REM "BREAKPRICE$ = $105.00 per BOX"
7955 REM "BREAKALL$ = "10 BOX/50 AT $105.00 PER BOX"
7956 REM "BREAKRANGE$ = "1 TO 10 BOX/50"
7957 REM "BREAKRANGEALL$ = "1 TO 10 BOX/50 AT $105.00 PER BOX"
7959 DIM BREAKQTY$[12],BREAKPRICE$[12],BREAKALL$[12],BREAKRANGE$[12],BREAKRANGEALL$[12]
7960 IF STOCK$<>"Y" THEN GOTO 7990
7961 IF IC0[14]=0 THEN BPACK=1 ELSE BPACK=IC0[14]
7965 CALL "EC3UTE",X3$,X4$,EC_PARM$,EC${ALL},Z[6],IC0$,IC0{ALL},AR1$(398,3),Q{ALL},P{ALL},""
7970 FOR BI=1 TO 12
7971 IF BI=1 THEN IF Q[BI,0]=0 THEN NOBKTXT$=STP(EC_PARM$(754,35),2),BREAKQTY$[BI]=NOBKTXT$,BREAKALL$[BI]=NOBKTXT$,BREAKRANGE$[BI]=NOBKTXT$,BREAKRANGEALL$[BI]=NOBKTXT$; GOTO 7987
7972 IF Q[BI,0]<>0 THEN BREAKQTY$[BI]=STP(STR(Q[BI,1]:"###,##0"),2)+" "+STP(IC0$(120,4),2)+"/"+STP(STR(BPACK:"###0"),2)
7974 IF P[BI]<>0 THEN BREAKPRICE$[BI]=X3$(69,1)+STP(STR(P[BI]:"###,##0.00"),2)+" per "+STP(IC0$(120,4),2)
7976 IF Q[BI,0]<>0 THEN BREAKALL$[BI]=STP(STR(Q[BI,1]:"###,##0"),2)+" "+STP(IC0$(120,4),2)+"/"+STP(STR(BPACK:"###0"),2)+" at "+BREAKPRICE$[BI]
7980 IF Q[BI,0]=0 THEN GOTO 7987
7982 IF BI=12 THEN TORANGE$=" and Over" ELSE IF Q[BI+1,0]<>0 THEN TORANGE$=" to "+STP(STR(INT(Q[BI+1,1]-1):"###,##0"),2) ELSE TORANGE$=" and Over"
7984 BREAKRANGE$[BI]=STP(STR(Q[BI,1]:"###,##0"),2)+TORANGE$+" "+STP(IC0$(120,4),2)+"/"+STP(STR(BPACK:"###0"),2)
7985 BREAKRANGEALL$[BI]=STP(STR(Q[BI,1]:"###,##0"),2)+TORANGE$+" "+STP(IC0$(120,4),2)+"/"+STP(STR(BPACK:"###0"),2)+" at "+BREAKPRICE$[BI]
7987 NEXT BI
7995 RETURN 
8000 REM "format zip code
8020 CALL "ZZDISP","A",ZIPIN$,"ZIP",X3$,ZIPOUT$,"",0,0,X4$
8030 REM "format phone
8032 CALL "ZZDISP","P",PIN$,"",X3$,POUT$,"",0,0,X4$
8034 RETURN 
8100 REM "get pricing
8101 UNIT_PRICE=0
8105 DIM IC0(40)
8110 DIM BB$(100); BB$(1,10)=EC$[2](51,10),BB$(16,6)=X3$(21,6)
8120 CALL "OS2OBC",X3$,X4$,OS0$(1,10),IC0{ALL},BB$,"EC3PC4",UNIT_PRICE,"",UNIT_COST,US_QTY
8130 IF UNIT_PRICE=0 THEN UNIT_PRICE=IC0[0]
8145 RETURN 
8300 REM "Retreive 1 or more values in VALUE$ place in VAL$[] and set VAL_COUNT-Values seperated by ', 's (that is comma + blank), current max of 200 values, 132667
8301 REM "We will add all values blank or not
8305 DIM VAL$[2000,2]; VAL_COUNT=0
8310 IF VAL_COUNT=2000 THEN GOTO 8340 ELSE VP=POS(", "=VALUE$); IF VP=0 THEN GOTO 8335
8315 VAL_COUNT=VAL_COUNT+1; IF VP=1 THEN VAL$[VAL_COUNT,1]="",VALUE$=VALUE$(3); GOTO 8310 ELSE VAL$[VAL_COUNT,1]=VALUE$(1,VP-1); IF VP=LEN(VALUE$) THEN VALUE$=""; GOTO 8340 ELSE VALUE$=VALUE$(VP+2); GOTO 8310
8335 REM "finish up last one
8337 VAL_COUNT=VAL_COUNT+1; VAL$[VAL_COUNT,1]=VALUE$
8340 REM "process through and split out image names
8341 FOR VI=1 TO VAL_COUNT
8342 V$=VAL$[VI,1]; VU=POS("_"=V$); IF VU=0 THEN GOTO 8345
8343 IC$=V$(1,VU-1); IF VU=LEN(V$) THEN IMAGE$=""; GOTO 8344 ELSE IMAGE$=V$(VU+1)
8344 IC$=STP(IC$,3,","),IMAGE$=STP(IMAGE$,3,","),VAL$[VI,1]=IC$,VAL$[VI,2]=IMAGE$
8345 NEXT VI
8349 RETURN 
8910 DEF FND$(Z9$)=Z9$(1*2+1,2)+"/"+Z9$(7-1*2,2)+"/"+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
8915 DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
8920 SUGGESTED_ITEM:
8921 SUGG_ITMNR$=""
8925 READ (Z[17],KEY=OS0$(548,20),KNO=1,DOM=*NEXT)
8927 K$=KEY(Z[17],END=*RETURN); IF MID(K$,1,20)<>OS0$(548,20) THEN GOTO *RETURN
8928 SUGG_ITMNR$=K$(31,20)
8930 READ (Z[20],KEY=SUGG_ITMNR$,DOM=*NEXT)
8933 K_OSD$=KEY(Z[20],END=*RETURN); READ (Z[20])OSD$
8935 IF MID(K_OSD$,1,LEN(SUGG_ITMNR$))<>SUGG_ITMNR$ THEN GOTO *RETURN
8937 SUGG_ITMNR$=K_OSD$(22,10)
8949 ! CC$=SUB(CUST_CODE$,"-",""); CALL "ZZWLKU;PARSE_CUST",CC$,DD$,BB$; GG$=DD$+BB$
8950 FIND (Z[18],KEY=EC$[2](51,10)+OS0$(548,20),DOM=*RETURN); SUGG_ITMNR$=""
8990 RETURN 
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$); REM "131928
9090 GOTO 9900
9900 REM "End
9905 REM FOR I=1 TO 20; IF Z[I]<>0 THEN CLOSE (Z[I]) FI; NEXT I
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9950 EXIT 
9999 END 
56002 REM "205460-Oracle - FIN(CHANNEL,"NUMREC") changed to use FN%FIN$()
56003 REM "218984-TOPS Favorites-3: Modify TOPS, display item images and U/M  
56004 REM "227154-Modify EC3BYB to support a condition tag : ?tf?if?[expr]    
