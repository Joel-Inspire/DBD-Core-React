0010 REM "EC Order Status <EC3OS1>
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 03/18/20 - 16.430555 - dmm - SSP# 307255
0037 REM "307255-DBD-101; DBSPT-80384/499 Order Acknowledgement/Shipment need
0040 REM "Copyright 2020 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0100 SETERR 9000
0110 X0$="EC3OS1",X1$="E/C Order Detail"
0120 EOL$=$0D0A$; EOL$=ATH(STP(EC_PARM$(57,8),1))
0130 NY$="NY"
0140 EO_MODE=0,MAX_ORD_LINES=205,MAX_SHIP_POINTS=35
0150 DIM ORD_STAT$[MAX_ORD_LINES,3] ! [X,Y] X=0:Ord Header, X=1-205:Ord Lines; Y=0:State Code, 1:State Desc, 2:Change code, 3:Change Mesg
0152 DIM SHIP_STAT$[MAX_ORD_LINES,MAX_SHIP_POINTS,3] ! [X,Y,Z] X,Y=0,0:General Shipping, X=1-205:Ord Lines,Y=1-35:Ship points; Z=0:State Code, 1:State Desc, 2:Change code, 3:Change Mesg
0160 MK1$="-#,###,###.00"
0199 ! 
0320 IOL_FS1:IOLIST FS1$,FS1[0],FS1[1],FS1[2],FS1[3],FS1[4],FS1[5],FS1[6],FS1[7],FS1[8],FS1[9],FS1[10],FS1[11],FS1[12],FS1[13]
0350 IOL_FS2:IOLIST FS2$(1),FS2[0],FS2[1],FS2[2],FS2[3],FS2[4],FS2[5],FS2[6],FS2[7],FS2[8],FS2[9],FS2[10],FS2[11],FS2[12],FS2[13],FS2[14],FS2[15],FS2[16],FS2[17],FS2[18],FS2[19],FS2[20],FS2[21],FS2[22],FS2[23],FS2[24],FS2[25],FS2[26],FS2[27],FS2[28],FS2[29]
0355 IOL_PO3:IOLIST PO3$,PO3{ALL}
0360 IOLIST SM4$,SM4[0],SM4[1],SM4[2],SM4[3]
0370 IOL_EDW:IOLIST EDW$,EDW[0]
0430 IOL_UOM:IOLIST UM$,UM[0],UM[1],UM[2],UM[3],UM[4],UM[5]
0440 IOL_FM1:IOLIST FM1$,FM1(0),FM1(1),FM1(2),FM1(3),FM1(4),FM1(5),FM1(6),FM1(7),FM1(8),FM1(9),FM1(10),FM1(11),FM1(12),FM1(13),FM1(14),FM1(15),FM1(16),FM1(17),FM1(18),FM1(19),FM1(20),FM1(21),FM1(22),FM1(23),FM1(24),FM1(25),FM1(26),FM1(27),FM1(28),FM1(29),FM1(30),FM1(31)
0450 IOLIST PO1$
0460 IOL_FM0:IOLIST FM0$
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="020 FS1... 03O FT3... 04O AR3... 05O FS2... 06O SM4... 07O FT4... 08O FS8... 09O FS6... 10O PO3... 11O FT5... 12O FMP... 13O ZZPARM 14O FM1... 15O ZY9  16O FTO...  18O EC9...  19O FM0...  20O ECR...  21O EC7...  22O EDW...  23O ECE...  24O EDV...  25OSFS2...  26OSFT4...  27O PO1...  28O FT8...  29O FMN...  30O AR1...  31O AR5...  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0525 GOSUB SET_READONLY
0535 READ (Z[13],KEY=X3$(9,3)+"A/R")ARPARM2$; READ (Z[13],KEY=X3$(9,3)+"AR3",DOM=*NEXT)ARPARM3$
0600 REM "Build search strings
0630 DIM M6[1]; CALL "IC2PRE",X3$,Z[13],M6$,M6{ALL},"",0,"",0
0910 CALL "ZZDISP","AX",EC$[2](51,10),"A/R",X3$,CUST_CODE$,"",0,0,X4$
0920 DIM FS2_IN$(356),FS2_IN[29],FS2_SET[29],FS2_IN_DATA$[MAX_ORD_LINES],FS2_IN_DATA[MAX_ORD_LINES,29],FS2_SET_DATA[MAX_ORD_LINES,29]
0922 DIM EDW_IN$(200),EDW_IN[0],EDW_SET[0],EDW_IN_DATA$[MAX_ORD_LINES],EDW_IN_DATA[MAX_ORD_LINES,0],EDW_SET_DATA[MAX_ORD_LINES,0]
0923 DIM FMN_IN$(510),FMN[10]
0925 PERFORM "EC3PO3;INIT" ! Initialize arrays variables required for special shipping change order data
1000 REM "Process DATA array
1005 DATA_TAGS$="001<template>002<display_order>003<session_id>004<ship_stat_msg_open>005<ship_stat_msg_partial>006<ship_stat_msg_shipped>007<send_data>008<url>009<3p_sender_id>010<3p_order_id>011<req_tf_order_no>012<order_line_number>013<line_unit_price>014<line_unit_cost>015<sell_um>016<sell_qty_per_um>017<cost_um>018<cost_qty_per_um>019<ss_order_line_number>020<ss_seq_number>021<ss_loc_type>022<ss_loc_code>023<ss_man_ship_cust>024<ss_attention>025<ss_man_ship_addr_1>026<ss_man_ship_addr_2>027<ss_man_ship_city>028<ss_man_ship_state>029<ss_man_ship_zip>030<ss_ship_via_code>031<ss_how_to_ship_code>032<ss_ship_with>033<ss_quantity>034<quantity>035<edw_order_line_number>036<edw_status>037<edw_status_id>038<edw_action>039<item_desc>040<order_cust_po>041<ordered_by>042<date_requested>043<fmn_note1>044<fmn_note2>045<fmn_note3>046<fmn_note4>047<fmn_note5>048<fmn_note6>049<fmn_note7>050<fmn_note8>051<fmn_note9>052<fmn_note10>053<loc_code>054<man_ship_cust>055<attention>056<man_ship_addr_1>057<man_ship_addr_2>058<man_ship_city>059<man_ship_state>060<man_ship_zip>061<ship_via_code>062<how_to_ship_code>063<ship_with>"
1006 DISPLAY_ORDER$=""
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1018 DPOS=POS("<"+TAG$+">"=DATA_TAGS$); IF DPOS=0 THEN GOTO 1090 ELSE DINDEX=NUM(DATA_TAGS$(DPOS-3,3),ERR=1090)
1019 ON DINDEX GOTO 1090,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1090
1021 TEMPLATE$=VALUE$; GOTO 1090; REM "template
1022 DISPLAY_ORDER$=VALUE$; GOTO 1090; REM "display_order
1023 SESSION_ID$=VALUE$; GOTO 1090; REM "Get session id
1024 SHIP_STAT_MSG_OPEN$=VALUE$; GOTO 1090 ! WO227326/227500, ship_stat_msg_open
1025 SHIP_STAT_MSG_PARTIAL$=VALUE$; GOTO 1090 ! WO227326/227500, ship_stat_msg_partial
1026 SHIP_STAT_MSG_SHIPPED$=VALUE$; GOTO 1090 ! WO227326/227500, ship_stat_msg_shipped
1027 SEND_DATA=0; IF STP(VALUE$,2)="Y" THEN SEND_DATA=1 END_IF ; GOTO 1090 ! WO233389, send_data
1028 URL$=STP(VALUE$); GOTO 1090 ! WO233389, url
1029 SENDER_ID_3P$=VALUE$; GOTO 1090 ! WO233389, 3p_sender_id
1030 ORDER_ID_3P$=VALUE$; GOTO 1090 ! WO233389, 3p_order_id
1031 VALUE$=STP(VALUE$,3,"-"); DISPLAY_ORDER$=VALUE$; REQ_TF_ORDER_NO$=VALUE$; EO_MODE=1; GOTO 1090; REM "req_tf_order_no
1032 GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO 1090 ELSE EO_MODE=1; CHG_MODE=1; FOR VAL_INDEX=1 TO VAL_COUNT; FS2_IN_DATA$[VAL_INDEX](6,3)=VAL$[VAL_INDEX]; NEXT VAL_INDEX; GOTO 1090 ! REM "order_line_number
1033 GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO 1090 ELSE EO_MODE=1; CHG_MODE=1; FOR VAL_INDEX=1 TO VAL_COUNT; IF NOT(NUL(VAL$[VAL_INDEX])) THEN FS2_IN_DATA[VAL_INDEX,4]=NUM(VAL$[VAL_INDEX],ERR=*PROCEED),FS2_SET_DATA[VAL_INDEX,4]=1 END_IF ; NEXT VAL_INDEX; GOTO 1090 ! REM "line_unit_price
1034 GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO 1090 ELSE EO_MODE=1; CHG_MODE=1; FOR VAL_INDEX=1 TO VAL_COUNT; IF NOT(NUL(VAL$[VAL_INDEX])) THEN FS2_IN_DATA[VAL_INDEX,1]=NUM(VAL$[VAL_INDEX],ERR=*PROCEED),FS2_SET_DATA[VAL_INDEX,1]=1 END_IF ; NEXT VAL_INDEX; GOTO 1090 ! REM "line_unit_cost
1035 GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO 1090 ELSE EO_MODE=1; CHG_MODE=1; FOR VAL_INDEX=1 TO VAL_COUNT; FS2_IN_DATA$[VAL_INDEX](124,4)=VAL$[VAL_INDEX]; NEXT VAL_INDEX; GOTO 1090 ! REM "sell_um
1036 GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO 1090 ELSE EO_MODE=1; CHG_MODE=1; FOR VAL_INDEX=1 TO VAL_COUNT; IF NOT(NUL(VAL$[VAL_INDEX])) THEN FS2_IN_DATA[VAL_INDEX,5]=NUM(VAL$[VAL_INDEX],ERR=*PROCEED),FS2_SET_DATA[VAL_INDEX,5]=1 END_IF ; NEXT VAL_INDEX; GOTO 1090 ! REM "sell_qty_per_um
1037 GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO 1090 ELSE EO_MODE=1; CHG_MODE=1; FOR VAL_INDEX=1 TO VAL_COUNT; FS2_IN_DATA$[VAL_INDEX](120,4)=VAL$[VAL_INDEX]; NEXT VAL_INDEX; GOTO 1090 ! REM "cost_um
1038 GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO 1090 ELSE EO_MODE=1; CHG_MODE=1; FOR VAL_INDEX=1 TO VAL_COUNT; IF NOT(NUL(VAL$[VAL_INDEX])) THEN FS2_IN_DATA[VAL_INDEX,2]=NUM(VAL$[VAL_INDEX],ERR=*PROCEED),FS2_SET_DATA[VAL_INDEX,2]=1 END_IF ; NEXT VAL_INDEX; GOTO 1090 ! REM "cost_qty_per_um
1039 PO3_FTYPE=0,PO3_OFFSET=7,PO3_FLDLEN=3,PO3_MASK$="000"; PERFORM "EC3PO3;SET_TAG_DATA"; GOTO 1090; REM "ss_order_line_number 
1040 PO3_FTYPE=0,PO3_OFFSET=10,PO3_FLDLEN=1,PO3_MASK$=""; PERFORM "EC3PO3;SET_TAG_DATA"; EO_MODE=1; CHG_MODE=1; SHIP_CHG_MODE=1; GOTO 1090; REM "ss_seq_number 
1041 PO3_FTYPE=0,PO3_OFFSET=11,PO3_FLDLEN=1,PO3_MASK$=""; PERFORM "EC3PO3;SET_TAG_DATA"; GOTO 1090; REM "ss_loc_type 
1042 PO3_FTYPE=0,PO3_OFFSET=12,PO3_FLDLEN=4,PO3_MASK$=""; PERFORM "EC3PO3;SET_TAG_DATA"; GOTO 1090; REM "ss_loc_code 
1043 PO3_FTYPE=0,PO3_OFFSET=225,PO3_FLDLEN=35,PO3_MASK$=""; PERFORM "EC3PO3;SET_TAG_DATA"; GOTO 1090; REM "ss_man_ship_cust 
1044 PO3_FTYPE=0,PO3_OFFSET=16,PO3_FLDLEN=30,PO3_MASK$=""; PERFORM "EC3PO3;SET_TAG_DATA"; GOTO 1090; REM "ss_attention 
1045 PO3_FTYPE=0,PO3_OFFSET=46,PO3_FLDLEN=30,PO3_MASK$=""; PERFORM "EC3PO3;SET_TAG_DATA"; GOTO 1090; REM "ss_man_ship_addr_1 
1046 PO3_FTYPE=0,PO3_OFFSET=76,PO3_FLDLEN=30,PO3_MASK$=""; PERFORM "EC3PO3;SET_TAG_DATA"; GOTO 1090; REM "ss_man_ship_addr_2 
1047 PO3_FTYPE=0,PO3_OFFSET=106,PO3_FLDLEN=16,PO3_MASK$=""; PERFORM "EC3PO3;SET_TAG_DATA"; GOTO 1090; REM "ss_man_ship_city 
1048 PO3_FTYPE=0,PO3_OFFSET=122,PO3_FLDLEN=2,PO3_MASK$=""; PERFORM "EC3PO3;SET_TAG_DATA"; GOTO 1090; REM "ss_man_ship_state 
1049 PO3_FTYPE=0,PO3_OFFSET=124,PO3_FLDLEN=9,PO3_MASK$="",PO3_STPCHAR$="- "; PERFORM "EC3PO3;SET_TAG_DATA"; GOTO 1090; REM "ss_man_ship_zip 
1050 PO3_FTYPE=0,PO3_OFFSET=150,PO3_FLDLEN=1,PO3_MASK$=""; PERFORM "EC3PO3;SET_TAG_DATA"; GOTO 1090; REM "ss_ship_via_code 
1051 PO3_FTYPE=0,PO3_OFFSET=134,PO3_FLDLEN=1,PO3_MASK$=""; PERFORM "EC3PO3;SET_TAG_DATA"; GOTO 1090; REM "ss_how_to_ship_code 
1052 PO3_FTYPE=0,PO3_OFFSET=151,PO3_FLDLEN=15,PO3_MASK$=""; PERFORM "EC3PO3;SET_TAG_DATA"; GOTO 1090; REM "ss_ship_with 
1053 PO3_FTYPE=1,PO3_OFFSET=0,PO3_FLDLEN=0,PO3_MASK$=""; PERFORM "EC3PO3;SET_TAG_DATA"; GOTO 1090; REM "ss_quantity 
1054 GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO 1090 ELSE EO_MODE=1; CHG_MODE=1; SHIP_CHG_MODE=1; FOR VAL_INDEX=1 TO VAL_COUNT; IF NOT(NUL(VAL$[VAL_INDEX])) THEN FS2_IN_DATA[VAL_INDEX,0]=NUM(VAL$[VAL_INDEX],ERR=*PROCEED),FS2_SET_DATA[VAL_INDEX,0]=1 END_IF ; NEXT VAL_INDEX; GOTO 1090 ! REM "quantity
1055 GOSUB PARSE_EDW_TAG; IF EDW_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO EDW_COUNT; EDW_IN_DATA$[VAL_INDEX](9,3)=VAL$[VAL_INDEX]; NEXT VAL_INDEX; GOTO 1090 ! REM "edw_order_line_number
1056 GOSUB PARSE_EDW_TAG; IF EDW_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO EDW_COUNT; EDW_IN_DATA$[VAL_INDEX](78,10)=VAL$[VAL_INDEX]; NEXT VAL_INDEX; GOTO 1090 ! REM "edw_status
1057 GOSUB PARSE_EDW_TAG; IF EDW_COUNT=0 THEN GOTO 1090 ELSE FOR VAL_INDEX=1 TO EDW_COUNT; EDW_IN_DATA$[VAL_INDEX](88,10)=VAL$[VAL_INDEX]; NEXT VAL_INDEX; GOTO 1090 ! REM "edw_status_id
1058 EDW_ACTION$=STP(UCS(VALUE$),2); GOTO 1090 ! REM "edw_action
1059 GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO 1090 ELSE EO_MODE=1; CHG_MODE=1; FOR VAL_INDEX=1 TO VAL_COUNT; FS2_IN_DATA$[VAL_INDEX](50,40)=VAL$[VAL_INDEX]; NEXT VAL_INDEX; GOTO 1090 ! REM "item_desc
1060 ORDER_CUST_PO_IN$=VALUE$; GOTO 1090; REM "order_cust_po
1061 ORDERED_BY_IN$=VALUE$; GOTO 1090; REM "ordered_by
1062 Q$=VALUE$; GOSUB 8000; DATE_REQUESTED_IN$=Q$; GOTO 1090; REM "date_requested, MMDDYYYY
1063 FMN_IN$(9,50)=VALUE$; FMN[1]=1; FMN[0]=1; GOTO 1090; REM "fmn_note1
1064 FMN_IN$(59,50)=VALUE$; FMN[2]=1; FMN[0]=1; GOTO 1090; REM "fmn_note2
1065 FMN_IN$(109,50)=VALUE$; FMN[3]=1; FMN[0]=1; GOTO 1090; REM "fmn_note3
1066 FMN_IN$(159,50)=VALUE$; FMN[4]=1; FMN[0]=1; GOTO 1090; REM "fmn_note4
1067 FMN_IN$(209,50)=VALUE$; FMN[5]=1; FMN[0]=1; GOTO 1090; REM "fmn_note5
1068 FMN_IN$(259,50)=VALUE$; FMN[6]=1; FMN[0]=1; GOTO 1090; REM "fmn_note6
1069 FMN_IN$(309,50)=VALUE$; FMN[7]=1; FMN[0]=1; GOTO 1090; REM "fmn_note7
1070 FMN_IN$(359,50)=VALUE$; FMN[8]=1; FMN[0]=1; GOTO 1090; REM "fmn_note8
1071 FMN_IN$(409,50)=VALUE$; FMN[9]=1; FMN[0]=1; GOTO 1090; REM "fmn_note9
1072 FMN_IN$(459,50)=VALUE$; FMN[10]=1; FMN[0]=1; GOTO 1090; REM "fmn_note10
1073 EO_MODE=1; CHG_MODE=1; GEN_SHIP_CHG_MODE=1; GEN_PO3_IN$(12,4)=VALUE$; GEN_PO3_IN$(11,1)="C"; GOTO 1090; REM "loc_code
1074 EO_MODE=1; CHG_MODE=1; GEN_SHIP_CHG_MODE=1; GEN_PO3_IN$(225,35)=VALUE$; GOTO 1090; REM "man_ship_cust
1075 EO_MODE=1; CHG_MODE=1; GEN_SHIP_CHG_MODE=1; GEN_PO3_IN$(16,30)=VALUE$; GOTO 1090; REM "attention
1076 EO_MODE=1; CHG_MODE=1; GEN_SHIP_CHG_MODE=1; GEN_PO3_IN$(46,30)=VALUE$; GOTO 1090; REM "man_ship_addr_1
1077 EO_MODE=1; CHG_MODE=1; GEN_SHIP_CHG_MODE=1; GEN_PO3_IN$(76,30)=VALUE$; GOTO 1090; REM "man_ship_addr_2
1078 EO_MODE=1; CHG_MODE=1; GEN_SHIP_CHG_MODE=1; GEN_PO3_IN$(106,16)=VALUE$; GOTO 1090; REM "man_ship_city
1079 EO_MODE=1; CHG_MODE=1; GEN_SHIP_CHG_MODE=1; GEN_PO3_IN$(122,2)=VALUE$; GOTO 1090; REM "man_ship_state
1080 EO_MODE=1; CHG_MODE=1; GEN_SHIP_CHG_MODE=1; GEN_PO3_IN$(124,9)=STP(VALUE$,3,"-"); GOTO 1090; REM "man_ship_zip
1081 EO_MODE=1; CHG_MODE=1; GEN_SHIP_CHG_MODE=1; GEN_PO3_IN$(150,1)=VALUE$; GOTO 1090; REM "ship_via_code
1082 EO_MODE=1; CHG_MODE=1; GEN_SHIP_CHG_MODE=1; GEN_PO3_IN$(134,1)=VALUE$; GOTO 1090; REM "how_to_ship_code
1083 EO_MODE=1; CHG_MODE=1; GEN_SHIP_CHG_MODE=1; GEN_PO3_IN$(151,15)=VALUE$; GOTO 1090; REM "ship_with
1090 NEXT I
1100 REM "Read in the order in DISPLAY_ORDER$
1101 VERSION$="234145.20091120",PROGRAM$=PGN; DIM BYBINFO$[5]; BYBINFO$[1]=PROGRAM$,BYBINFO$[2]=VERSION$,BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1103 USER$="",PASSWORD$="",SESSION_ID$=EC$[1](1,7); REM "2B easy will leave user and password in place, but blank out, session_id will be session id from EC$
1104 IF STP(DISPLAY_ORDER$,3)="" THEN IF STP(%DISPLAY_ORDER$,3)>"" THEN DISPLAY_ORDER$=STP(%DISPLAY_ORDER$,3); %DISPLAY_ORDER$="" ! WO168683
1105 IF EO_MODE THEN IF NOT(FN%HAS_MODULE("EO")) THEN EO_MODE=0 ! Disable extended order features if not activated
1115 GOSUB 3100 ! Used to be GOSUB 3200
1120 IF EO_MODE AND CHG_MODE THEN {
1122 GOSUB UPDATE_ORDER
1124 FOR OS_I=0 TO MAX_ORD_LINES
1125 IF NOT(NUL(ORD_STAT$[OS_I,3])) THEN MX=FN%_LOG_MESSAGE("MESG","CHANGE|ORDER|"+DISPLAY_ORDER$+"|"+TBL(OS_I>0,"HEADER  |","LINE "+STR(OS_I:"000")+"|")+ORD_STAT$[OS_I,3]+"|")
1126 FOR OS_S=0 TO 35; IF NOT(NUL(SHIP_STAT$[OS_I,OS_S,3])) THEN MX=FN%_LOG_MESSAGE("MESG","CHANGE|ORDER|"+DISPLAY_ORDER$+"|"+TBL(OS_I>0,"HEADER  |","LINE "+STR(OS_I:"000")+"|")+TBL(OS_I>0,"GENERAL SHIP|","SPECIAL SHIP|"+FNS$(STR(OS_S:"000"))+"|")+SHIP_STAT$[OS_I,OS_S,3]+"|") END_IF ; NEXT OS_S
1127 NEXT OS_I
1128  }
1150 GOSUB 7550; REM "159109
1200 IF EDW_ACTION$="U" THEN GOSUB UPDATE_EDW ! 267865
1500 REM "Use template$ to open file, read line by line and insert
1501 IF %BASIC2$<>"" THEN GOTO 1995; REM "156580
1503 %LOT_SELL_PRICE_TOTAL=0,%CUST_OWNED_LOT_SELL_PRICE_TOTAL=0 ! WO173708/WO175385
1505 CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1506 REM "Setup line_tags$, >100 is order detail section, handled in 3300
1507 LINE_TAGS$="001<user>002<cust_code>003<password>004<cust_name>005<ec_company>006<session_id>007<buyer_id>008<buyer_name>009<date>010<time>"
1508 LINE_TAGS$=LINE_TAGS$+"101<order_no>102<order_date>103<order_status>104<order_amount>105<order_cust_po>106<date_requested>107<deposit_ck_no>108<deposit_date>109<deposit_amount>110<csr_code>111<csr_abbr_name>112<sper_code>113<sper_abbr_name>114<GB_gold_rush>115<GB_sample_rebate>116<GB_no_overruns>117<GB_dist_samples>118<GB_sure_date>119<GB_imprint_color>120<linesstart>121<shipinfostart>122<shipheadingstart>123<addr_name>124<attention>125<addr_1>126<addr_2>127<addr_3>128<buyer_on_order>129<ordered_by>130<recv_dept>131<ship_via>132<mark_for>133<location_name>134<item_count>135<sell_price_total>136<buyer_on_order_name>137<lot_sell_price_total>138<cust_owned_lot_sell_price_total>139<order_total_value>140<3p_order_id>141<timestamp_order_date>142<location_desc>143<3p_sender_id>144<order_state_code>145<order_state_msg>146<order_change_status>147<order_change_status_msg>148<display_order>149<gslinestart>"
1510 READ (100,END=1595)LINE$; GOSUB 7650
1515 INDEX=POS("?tf?"=LINE$); IF INDEX=0 THEN PRINT (OUTPUT)LINE$,EOL$,; GOTO 1510
1520 END_INDEX=POS("?"=LINE$(INDEX+4)),TAG$=LINE$(INDEX+4,END_INDEX-1),LINE1$=LINE$(1,INDEX-1),LINE2$=LINE$(INDEX+END_INDEX+4),LPOS=POS("<"+TAG$+">"=LINE_TAGS$); IF LPOS=0 THEN LINDEX=0 ELSE LINDEX=NUM(LINE_TAGS$(LPOS-3,3))
1530 GOSUB 2000; GOTO 1515
1595 IF SEND_DATA THEN GOSUB SEND_XML_FILE ! WO233389
1995 GOTO 9900
1999 REM "Get tag value & substitute
2000 IF LINDEX>100 THEN GOSUB 3300; GOTO 2095 ELSE ON LINDEX GOTO 2090,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2090
2001 LINE$=LINE1$+FN%HTML_ESC$(USER$)+LINE2$; GOTO 2095; REM "user
2002 LINE$=LINE1$+FN%HTML_ESC$(CUST_CODE$)+LINE2$; GOTO 2095; REM "cust_code
2003 LINE$=LINE1$+FN%HTML_ESC$(PASSWORD$)+LINE2$; GOTO 2095; REM "password
2004 LINE$=LINE1$+FN%HTML_ESC$(STP(EC$[1](23,35),1))+LINE2$; GOTO 2095; REM "cust_name
2005 LINE$=LINE1$+FN%HTML_ESC$(STP(EC_PARM$(7,50),1))+LINE2$; GOTO 2095; REM "ec_company
2006 LINE$=LINE1$+FN%HTML_ESC$(STP(SESSION_ID$,1))+LINE2$; GOTO 2095; REM "session_id
2007 LINE$=LINE1$+FN%HTML_ESC$(STP(EC$[1](8,15),1))+LINE2$; GOTO 2095; REM "buyer_id
2008 LINE$=LINE1$+FN%HTML_ESC$(STP(EC$[2](16,35),1))+LINE2$; GOTO 2095; REM "buyer_name
2009 LINE$=LINE1$+FN%HTML_ESC$(EC$[4])+LINE2$; GOTO 2095; REM " date
2010 LINE$=LINE1$+FN%HTML_ESC$(EC$[5])+LINE2$; GOTO 2095; REM "time
2090 LINE$=LINE1$+"?"+LINE2$; GOTO 2095; REM "tag not found, replace with '?'
2095 RETURN 
2099 ! 
3100 REM "If Extended Order feature mode then use open order files only, not repeat order files.
3101 IF NOT(EO_MODE) THEN GOTO 3200 ! Not "EO" mode, revert to plain order status display functionality
3102 ORDERLINES$=""; READ (Z[5],KEY=DISPLAY_ORDER$,DOM=*NEXT,BSY=*NEXT)
3103 TEMPKEY$=KEY(Z[5],END=*NEXT); IF TEMPKEY$(1,LEN(DISPLAY_ORDER$))<>DISPLAY_ORDER$ THEN GOTO *NEXT ELSE ORDERLINES$=ORDERLINES$+TEMPKEY$(9,3); READ (Z[5]); GOTO *SAME; REM "build list of total lines on the order
3110 LINE_FILE=Z[5]; DIM FS1$(350),FS1[13],PO3$(301); FIND (Z[2],KEY=DISPLAY_ORDER$,DOM=ERR_NO_ORDER,BSY=*PROCEED)IOL=0320; LINE_FILE=Z[5]; FIND (Z[10],KEY=DISPLAY_ORDER$+DIM(5),DOM=ERR_NO_GEN_SHIP)PO3$
3120 GOSUB CHECK_ORDER_STATUS
3190 GOTO 3215
3195 ! Rejoin flow in the 3200s
3199 ! 
3200 REM "Read in order header information
3202 ORDERLINES$=""; READ (Z(7),KEY=DISPLAY_ORDER$,DOM=3203)
3203 TEMPKEY$=KEY(Z(7),END=3204); IF TEMPKEY$(1,LEN(DISPLAY_ORDER$))<>DISPLAY_ORDER$ THEN GOTO 3204 ELSE ORDERLINES$=ORDERLINES$+TEMPKEY$(9,3); READ (Z(7)); GOTO 3203; REM "build list of total lines on the order
3210 LINE_FILE=Z[5]; DIM FS1$(350),FS1[13],PO3$(301); FIND (Z[2],KEY=DISPLAY_ORDER$,DOM=3211)IOL=0320; LINE_FILE=Z[5]; FIND (Z[10],KEY=DISPLAY_ORDER$+DIM(5),DOM=3212)PO3$; GOTO 3212
3211 FIND (Z[3],KEY=DISPLAY_ORDER$,DOM=3245)IOL=0320; LINE_FILE=Z[7]; FIND (Z[11],KEY=DISPLAY_ORDER$+DIM(5),DOM=3212)PO3$
3222 DIM CSR$(255); FIND (Z[4],KEY=FS1$(89,4),DOM=3223)CSR$
3223 DIM SPER$(255); FIND (Z[4],KEY=FS1$(93,4),DOM=3224)SPER$
3245 DIM ADDR$[3]; LOC_ZIP$=""; CALL "ZZDISP","AX",PO3$(124,9),"ZIP",X3$,LOC_ZIP$,"",0,0,X4$; REM "define formatted address
3246 ADDRESS_INDEX=1; IF STP(PO3$(46,30),2)<>"" THEN ADDR$[ADDRESS_INDEX]=PO3$(46,30),ADDRESS_INDEX=ADDRESS_INDEX+1
3247 IF STP(PO3$(76,30),2)<>"" THEN ADDR$[ADDRESS_INDEX]=PO3$(76,30),ADDRESS_INDEX=ADDRESS_INDEX+1
3248 IF STP(PO3$(106,27),2)<>"" THEN CSZ$=STP(PO3$(106,16),2)+", "+PO3$(122,2)+" "+LOC_ZIP$,ADDR$[ADDRESS_INDEX]=CSZ$
3250 DIM FM0$(618); READ (Z[19],KEY="C"+FS1$(6,10)+PO3$(12,4),DOM=*NEXT)FM0$ ! WO168683
3295 RETURN 
3299 ! 
3300 REM "Given FS1$, handle entries > 100  in the order section
3305 EINDEX=LINDEX-100
3310 ON EINDEX GOTO 3389,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3344,3345,3346,3347,3348,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3389
3311 CALL "ZZDISP","AX",FS1$(118,8),"O/P",X3$,ORDER_NO$,"",0,0,X4$; LINE$=LINE1$+FN%HTML_ESC$(ORDER_NO$)+LINE2$; GOTO 3390; REM "order_no
3312 CALL "ZZDISP","DX",FS1$(16,6),"",X3$,DATE1$,"",0,0,X4$; LINE$=LINE1$+FN%HTML_ESC$(DATE1$)+LINE2$; GOTO 3390; REM "order_date
3313 GOSUB CHECK_OSTATUS_MSG; LINE$=LINE1$+FN%HTML_ESC$(SHIP_STATUS$)+LINE2$; GOTO 3390; REM "order_status, WO227326/227500
3314 LINE$=LINE1$+FN%HTML_ESC$(STR(FS1[6]:"-$###,###.00"))+LINE2$; GOTO 3390; REM "order_amount
3315 LINE$=LINE1$+FN%HTML_ESC$(STP(FS1$(28,15),1))+LINE2$; GOTO 3390; REM "order_cust_po
3316 CALL "ZZDISP","DX",FS1$(55,6),"",X3$,DATE1$,"",0,0,X4$; IF STP(DATE1$,3," ")="" THEN LINE$=LINE1$+LINE2$ ELSE LINE$=LINE1$+FN%HTML_ESC$(DATE1$)+LINE2$ END_IF ; GOTO 3390; REM "date_requested
3317 LINE$=LINE1$+FN%HTML_ESC$(STP(FS1$(64,6),1))+LINE2$; GOTO 3390; REM "deposit_ck_no
3318 CALL "ZZDISP","DX",FS1$(70,6),"",X3$,DATE1$,"",0,0,X4$; LINE$=LINE1$+FN%HTML_ESC$(DATE1$)+LINE2$; GOTO 3390; REM "deposit_date
3319 LINE$=LINE1$+FN%HTML_ESC$(STR(FS1[0]:"-$###,###.00"))+LINE2$; GOTO 3390; REM "deposit_amount
3320 LINE$=LINE1$+FN%HTML_ESC$(STP(FS1$(89,4),1))+LINE2$; GOTO 3390; REM "csr_code
3321 LINE$=LINE1$+FN%HTML_ESC$(STP(CSR$(149,20),1))+LINE2$; GOTO 3390; REM "csr_abbr_name
3322 LINE$=LINE1$+FN%HTML_ESC$(STP(FS1$(93,4),1))+LINE2$; GOTO 3390; REM "sper_code
3323 LINE$=LINE1$+FN%HTML_ESC$(STP(SPER$(149,20),1))+LINE2$; GOTO 3390; REM "sper_abbr_name
3324 LINE$=LINE1$+FN%HTML_ESC$(NY$(POS(FS1$(195,1)="Y")+1,1))+LINE2$; GOTO 3390; REM "GB_gold_rush
3325 LINE$=LINE1$+FN%HTML_ESC$(NY$(POS(FS1$(197,1)="Y")+1,1))+LINE2$; GOTO 3390; REM "GB_sample_rebate
3326 LINE$=LINE1$+FN%HTML_ESC$(NY$(POS(FS1$(198,1)="Y")+1,1))+LINE2$; GOTO 3390; REM "GB_no_overruns
3327 LINE$=LINE1$+FN%HTML_ESC$(STP(FS1$(223,3),1))+LINE2$; GOTO 3390; REM "GB_dist_samples
3328 LINE$=LINE1$+FN%HTML_ESC$(NY$(POS(FS1$(226,1)="Y")+1,1))+LINE2$; GOTO 3390; REM "GB_sure_date
3329 LINE$=LINE1$+FN%HTML_ESC$(STP(FS1$(203,20),1))+LINE2$; GOTO 3390; REM "GB_imprint_color
3330 GOSUB 3500; LINE$=LINES_SECTION$; GOTO 3390; REM "linesstart  add lines section
3331 GOSUB 3600; LINE$=SHIPINFO_SECTION$; GOTO 3390; REM "shipinfostart - add shipinfo section
3332 GOSUB 3700; REM "shipheadingstart (get tracking info heading - placed only if tracking info found in 3600)
3333 LINE$=LINE1$+FN%HTML_ESC$(STP(PO3$(225,35),2))+LINE2$; GOTO 3390; REM "addr_name
3334 LINE$=LINE1$+FN%HTML_ESC$(STP(PO3$(16,30),2))+LINE2$; GOTO 3390; REM "attention
3335 LINE$=LINE1$+FN%HTML_ESC$(ADDR$[1])+LINE2$; GOTO 3390; REM "addr_1
3336 LINE$=LINE1$+FN%HTML_ESC$(ADDR$[2])+LINE2$; GOTO 3390; REM "addr_2
3337 LINE$=LINE1$+FN%HTML_ESC$(ADDR$[3])+LINE2$; GOTO 3390; REM "addr_3
3338 LINE$=LINE1$+FN%HTML_ESC$(STP(FS1$(250,15),3," "))+LINE2$; GOTO 3390; REM "buyer_on_order 159208
3339 LINE$=LINE1$+FN%HTML_ESC$(STP(FS1$(129,20),3," "))+LINE2$; GOTO 3390; REM "ordered_by; REM "159208
3340 LINE$=LINE1$+FN%HTML_ESC$(STP(FM0$(382,20),1))+LINE2$; GOTO 3390 ! WO168683, recv_dept
3341 LINE$=LINE1$+FN%HTML_ESC$(STP(PO3$(210,15),1))+LINE2$; GOTO 3390 ! WO168683, ship_via
3342 LINE$=LINE1$+FN%HTML_ESC$(STP(PO3$(175,35),1))+LINE2$; GOTO 3390 ! WO168683, mark_for
3343 IF STP(FM0$(248,35),3," ")="" THEN LINE$=LINE1$+FN%HTML_ESC$(STP(FM0$(16,35),1))+LINE2$ ELSE LINE$=LINE1$+FN%HTML_ESC$(STP(FM0$(248,35),1))+LINE2$ END_IF ; GOTO 3390 ! WO168683, location_name
3344 LINE$=LINE1$+FN%HTML_ESC$(STP(STR(ITEM_COUNT:"##0"),1))+LINE2$; GOTO 3390 ! WO168683, item_count
3345 IF EC$[2](322,1)="Y" THEN LINE$=LINE1$+LINE2$; GOTO 3390 ELSE LINE$=LINE1$+FN%HTML_ESC$(STR(SELL_PRICE_TOTAL:"$###,###.00"))+LINE2$; GOTO 3390 ! WO168683, sell_price_total. SSP173363, don't show price if says so for buyer
3346 GOSUB 4650; LINE$=LINE1$+FN%HTML_ESC$(STP(ECA$(16,35),2))+LINE2$; GOTO 3390 ! SSP173133, buyer_on_order_name
3347 IF EC$[2](322,1)="Y" THEN LINE$=LINE1$+LINE2$; GOTO 3390 ELSE LINE$=LINE1$+FN%HTML_ESC$(STR(%LOT_SELL_PRICE_TOTAL:"###,###.00"))+LINE2$; GOTO 3390 ! WO173708, gets accumulated in EC3IC2. SSP175796, check buyer don't show price parm 
3348 IF EC$[2](322,1)="Y" THEN LINE$=LINE1$+LINE2$; GOTO 3390 ELSE LINE$=LINE1$+FN%HTML_ESC$(STR(%CUST_OWNED_LOT_SELL_PRICE_TOTAL:"###,###.00"))+LINE2$; GOTO 3390 ! WO175385, gets accumulated in EC3IC2.  SSP175796, check buyer don't show price parm    
3349 IF EC$[2](322,1)="Y" THEN LINE$=LINE1$+LINE2$; GOTO 3390 ELSE LINE$=LINE1$+FN%HTML_ESC$(STR(SELL_PRICE_TOTAL+%CUST_OWNED_LOT_SELL_PRICE_TOTAL:"###,###.00"))+LINE2$; GOTO 3390 ! WO176121, order_total_value     
3350 LINE$=LINE1$+FN%HTML_ESC$(ORDER_ID_3P$)+LINE2$; GOTO 3390 ! WO233389, 3p_order_id
3351 TS_OD$="null"; TS_OD$=DTE(FN%GET_DATETIME(FS1$(16,6),.0001),*:"%Y-%Mz-%DzT%Hz:%mz:%sz")+STR((TCB(44)/3600+TCB(45))*-100:"+00:00"); LINE$=LINE1$+FN%HTML_ESC$(TS_OD$)+LINE2$; GOTO 3390 ! WO233389, timestamp_order_date
3352 IF STP(FM0$(16,35),3," ")="" THEN LINE$=LINE1$+FN%HTML_ESC$(STP(FM0$(248,35),1))+LINE2$ ELSE LINE$=LINE1$+FN%HTML_ESC$(STP(FM0$(16,35),1))+LINE2$ END_IF ; GOTO 3390 ! 254077, location_desc
3353 LINE$=LINE1$+FN%HTML_ESC$(SENDER_ID_3P$)+LINE2$; GOTO 3390 ! 3p_sender_id, SSP234945
3354 LINE$=LINE1$+ORD_STAT$[0,0]+LINE2$; GOTO 3390 ! order_state_code
3355 LINE$=LINE1$+ORD_STAT$[0,1]+LINE2$; GOTO 3390 ! order_state_msg
3356 LINE$=LINE1$+ORD_STAT$[0,2]+LINE2$; GOTO 3390 ! order_change_status
3357 LINE$=LINE1$+ORD_STAT$[0,3]+LINE2$; GOTO 3390 ! order_change_status_msg
3358 LINE$=LINE1$+DISPLAY_ORDER$+LINE2$; GOTO 3390 ! display_order
3359 GOSUB 4050; LINE$=LINE1$+GENERAL_SHIP_SECTION$+LINE2$; GOTO 3390 ! gslinestart
3389 LINE$=LINE1$+"?"+LINE2$; GOTO 3390; REM "tag not found, replace with '?'
3395 RETURN 
3500 REM "Get lines section in LS_TEMPLATE$ and generate LINES_SECTION$ containing an entry for each order line from FS2
3502 LINES_SECTION$="",LS_TAGS$="001<fixed_price>002<line_number>003<shipping_whse>004<custom>005<item_code>006<full_item_code>007<left-right>008<top_bottom>009<desc>010<plys>011<starting_number>012<ending_number>013<reorder_date>014<sell_unit>015<sell_qty_per>016<sell_um>017<taxable>018<form_type>019<cust_code>020<job_number>021<job_date>022<carton_weight>023<carton_pack>024<quote_number>025<quote_line>026<sell_price>027<sell_total>028<qty_ordered>029<qty_backordered>030<qty_inv_todate>031<last_inv_info>032<last_inv_no>033<last_inv_date>034<qty_in_eaches>035<qty_ordered_extaltum>036<qty_ordered_extum>037<qty_backordered_extaltum>038<qty_backordered_extum>039<qty_inv_todate_extaltum>040<qty_inv_todate_extum>041<backordered_in_eaches>042<inv_todate_in_eaches>043<altum>044<cic_code>045<3pinfostart>046<lotlinestart>047<linemessage_start>048<po_schd_ship_date>049<sell_unit_two>050<ext_line_number>051<order_line_number>052<po_number>053<line_state_code>054<line_state_desc>055<line_change_status>056<line_change_status_msg>057<sslinestart>058<edw_status>059<edw_status_id>060<edw_status_date>061<edw_status_time>062<edw_rc_num>063<edw_ext_field_1>064<edw_ext_field_2>065<display_order>066<ext_ref1>"
3503 REM "Setup LS_TEMPLATE$
3504 LS_TEMPLATE$=LINE$; IF POS("?tf?linesend?"=LINE$)>0 THEN GOTO 3506 ! SSP190505, if we already have linesend in LINE$, don't read from the template, we already have this whole section (include file).
3505 READ (100,END=3506)LINE$; GOSUB 7650; LS_TEMPLATE$=LS_TEMPLATE$+LINE$+EOL$; IF POS("?tf?linesend?"=LINE$)=0 THEN GOTO 3505
3508 IF ORDERLINES$="" THEN GOTO 3595
3509 FOR GETNEXTLINE=0 TO LEN(ORDERLINES$)/3-1; CURRLINE$=ORDERLINES$(GETNEXTLINE*3+1,3)
3510 DIM FS2$(300),FS2[29]; OS_I=NUM(CURRLINE$,ERR=*PROCEED); READ (LINE_FILE,KEY=DISPLAY_ORDER$+CURRLINE$,DOM=3511,BSY=*PROCEED)IOL=0350; GOTO 3512 ! 272565
3511 READ (Z(7),KEY=DISPLAY_ORDER$+CURRLINE$,DOM=3593)IOL=0350; REM "if not found in default source then try in FT4 where it should always be
3512 IF EO_MODE THEN GOTO 3517 END_IF ; GOSUB 7800; IF SC_DISPLAY$<>"Y" THEN GOTO 3593 END_IF ; IF FS2$(155,1)=" " THEN GOTO 3513 ELSE IF POS(FS2$(155,1)=STP(EC_PARM$(709,5),2))<>0 THEN GOTO 3593; REM "do not display if order line type blocked 
3513 IF FS2$(9,1)=" " THEN GOTO *NEXT ELSE IF POS(FS2$(9,1)=STP(EC_PARM$(714,20),2))<>0 THEN GOTO 3593; REM "restrict display of specified po codes
3514 IF FS2$(230,3)<>DIM(3) AND FS2$(155,1)<>"M" THEN DONT_PRINT=0; GOSUB 7900; IF DONT_PRINT THEN GOTO 3593 ! SSP190529, if comp item line, then check to see if line should display
3517 GOSUB 7500; LS$=LS_TEMPLATE$; REM "159109
3518 LS_INDEX=POS("?tf?"=LS$); IF LS_INDEX=0 THEN GOTO 3591
3519 LSEND_INDEX=POS("?"=LS$(LS_INDEX+4)),LS_TAG$=LS$(LS_INDEX+4,LSEND_INDEX-1),LS1$=LS$(1,LS_INDEX-1),LS2$=LS$(LS_INDEX+LSEND_INDEX+4),LS_POS=POS("<"+LS_TAG$+">"=LS_TAGS$); IF LS_POS=0 THEN LS$=LS1$+LS2$,LS_INDEX=0 ELSE LS_INDEX=NUM(LS_TAGS$(LS_POS-3,3))
3520 ON LS_INDEX GOTO 3589,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3540,3541,3542,3543,3544,3545,3546,3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3574,3575,3576,3577,3578,3579,3580,3581,3582,3583,3584,3585,3586,3589
3521 LS$=LS1$+FN%HTML_ESC$(NY$(POS(FS2$(4,1)="Y")+1,1))+LS2$; GOTO 3590; REM "fixed_price
3522 LS$=LS1$+FN%HTML_ESC$(STR(NUM(FS2$(6,3))))+LS2$; GOTO 3590; REM "line_number
3523 LS$=LS1$+FN%HTML_ESC$(FS2$(10,4))+LS2$; GOTO 3590; REM "shipping_whse
3524 LS$=LS1$+FN%HTML_ESC$(NY$(POS(FS2$(14,1)="Y")+1,1))+LS2$; GOTO 3590; REM "custom
3525 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(19,10),1))+LS2$; GOTO 3590; REM "item_code
3526 LS$=LS1$+FN%HTML_ESC$(ITEM_CUST$+"-"+STP(FS2$(19,10),1))+LS2$; GOTO 3590; REM "full_item_code
3527 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(32,8),1))+LS2$; GOTO 3590; REM "left_right
3528 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(40,8),1))+LS2$; GOTO 3590; REM "top_bottom
3529 ITEM_COUNT=ITEM_COUNT+1; LS$=LS1$+FN%HTML_ESC$(STP(FS2$(50,40),1))+LS2$; GOTO 3590; REM "desc
3530 LS$=LS1$+FN%HTML_ESC$(FS2$(48,2))+LS2$; GOTO 3590; REM "plys
3531 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(104,9),1))+LS2$; GOTO 3590; REM "starting_number
3532 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(189,9),1))+LS2$; GOTO 3590; REM "ending_number
3533 CALL "ZZDISP","DX",FS2$(113,6),"",X3$,DATE1$,"",0,0,X4$; LS$=LS1$+FN%HTML_ESC$(DATE1$)+LS2$; GOTO 3590; REM "reorder_date
3534 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(124,4),1))+LS2$; GOTO 3590; REM "sell_unit
3535 LS$=LS1$+FN%HTML_ESC$(STR(FS2[5]:"##,###"))+LS2$; GOTO 3590; REM "sell_qty_per
3536 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(124,4),1)+"/"+STP(STR(FS2[5]:"##,###"),2))+LS2$; GOTO 3590; REM "sell_um
3537 LS$=LS1$+FN%HTML_ESC$(NY$(POS(FS2$(136,1)="Y")+1,1))+LS2$; GOTO 3590; REM "taxable
3538 LS$=LS1$+FN%HTML_ESC$(FORM_TYPE$)+LS2$; GOTO 3590; REM "form_type
3539 LS$=LS1$+FN%HTML_ESC$(ITEM_CUST$)+LS2$; GOTO 3590; REM "cust_code
3540 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(171,12),1))+LS2$; GOTO 3590; REM "job_number
3541 CALL "ZZDISP","DX",FS2$(183,6),"",X3$,DATE1$,"",0,0,X4$; LS$=LS1$+FN%HTML_ESC$(DATE1$)+LS2$; GOTO 3590; REM "job_date
3542 LS$=LS1$+FN%HTML_ESC$(STR(NUM(FS2$(198,7)):"##,###"))+LS2$; GOTO 3590; REM "carton weight
3543 LS$=LS1$+FN%HTML_ESC$(STR(FS2[12]:"##,###"))+LS2$; GOTO 3590; REM "carton_pack
3544 LS$=LS1$+FN%HTML_ESC$(STR(FS2[10]/SELL_DIVISOR:"#,###,###-"))+LS2$; GOTO 3590; REM "qty_ordered (in sell u/m)
3545 LS$=LS1$+FN%HTML_ESC$(STR(NUM(FS2$(15,3)):"###"))+LS2$; GOTO 3590; REM "quote_line
3546 IF EC$[2](322,1)="Y" THEN LS$=LS1$+LS2$; GOTO 3590 ELSE LS$=LS1$+FN%HTML_ESC$(STR(FS2[4]:"$-###,###.00"))+LS2$; GOTO 3590; REM "sell_price. SSP173363, don't show price if says so for buyer
3547 IF EC$[2](322,1)="Y" THEN LS$=LS1$+LS2$; GOTO 3590 ELSE LS$=LS1$+FN%HTML_ESC$(STR(FS2[6]:"-#,###,###.00"))+LS2$; SELL_PRICE_TOTAL+=FS2[6]; GOTO 3590; REM "sell_total. WO168683, calculate sell_price_total. SSP173363, don't show price if says so for buyer
3548 LS$=LS1$+FN%HTML_ESC$(STP(STR(FS2[10]/SELL_DIVISOR:"#,###,###-"),2))+LS2$; GOTO 3590; REM "qty_ordered (in sell u/m) WO233389, added STP
3549 LS$=LS1$+FN%HTML_ESC$(STR(FS2[8]/SELL_DIVISOR:"#,###,###-"))+LS2$; GOTO 3590; REM "qty_backordered (in sell u/m)
3550 ITPOS=POS(FS2$(6,3)=FS6LINE$,3); IF ITPOS=0 THEN IT=0 ELSE IT=FS6INV[(ITPOS+2)/3] END_IF ; LS$=LS1$+FN%HTML_ESC$(STR(IT/SELL_DIVISOR:"#,###,###-"))+LS2$; GOTO 3590; REM "qty_inv_todate (in sell u/m)
3551 GOSUB 7700; LS$=LS1$+FN%HTML_ESC$("Invoice # "+STP(LAST_INV$,2)+" on "+LAST_INV_DATE$)+LS2$; GOTO 3590; REM "last_inv_info
3552 GOSUB 7700; LS$=LS1$+FN%HTML_ESC$(STP(LAST_INV$,2))+LS2$; GOTO 3590; REM "last_inv_no
3553 GOSUB 7700; LS$=LS1$+FN%HTML_ESC$(LAST_INV_DATE$)+LS2$; GOTO 3590; REM "last_inv_date
3554 LS$=LS1$+FN%HTML_ESC$(STR(FS2[10]:"#,###,###-"))+LS2$; GOTO 3590; REM "qty_in_eaches
3555 LS$=LS1$+FN%HTML_ESC$(ALTUMEXT$)+LS2$; GOTO 3590; REM "qty_ordered_extaltum - prints using alternate unit of issue if avail - otherwise prints from the order (see 7528)
3556 LS$=LS1$+FN%HTML_ESC$(UMEXT$)+LS2$; GOTO 3590; REM "qty_ordered_extum - prints using order um exclusively (see lines 7520-7550)
3557 IF FS2(8)=0 THEN ALTUMEXTBO$="" END_IF ; LS$=LS1$+FN%HTML_ESC$(ALTUMEXTBO$)+LS2$; GOTO 3590; REM "qty_backordered_extaltum - prints using alternate unit of issue if avail - otherwise prints from the order (see 7528)
3558 IF FS2(8)=0 THEN UMEXTBO$="" END_IF ; LS$=LS1$+FN%HTML_ESC$(UMEXTBO$)+LS2$; GOTO 3590; REM "qty_backorded_extum - prints using order um exclusively (see lines 7520-7550)
3559 LS$=LS1$+FN%HTML_ESC$(ALTUMEXTINV$)+LS2$; GOTO 3590; REM "qty_inv_todate_extaltum - prints using alternate unit of issue if avail - otherwise prints from the order (see 7528)"/ 159109
3560 LS$=LS1$+FN%HTML_ESC$(UMEXTINV$)+LS2$; GOTO 3590; REM "qty_inv_todate_extum - prints using order um exclusively (see lines 7520-7550)
3561 LS$=LS1$+FN%HTML_ESC$(STP(STR(FS2(8):"#,###,###-"),2))+LS2$; GOTO 3590; REM "backordered_in_eaches
3562 LS$=LS1$+FN%HTML_ESC$(STP(STR(FS2(16):"#,###,###-"),2))+LS2$; GOTO 3590; REM "inv_todate_in_eaches
3563 LS$=LS1$+FN%HTML_ESC$(ALTUM$)+LS2$; GOTO 3590; REM "altum 159109
3564 LS$=LS1$+FN%HTML_ESC$(TBL(NUL(FM1$(350,20)),STP(FM1$(350,20),1),STP(FS2$(19,10),1)))+LS2$; GOTO 3590 ! cic_code SSP164819
3565 GOSUB 3950; LS$=LS1$+TPINFO_TEMPLATE$+LS2$; GOTO 3590 ! WO168683, 3pinfostart
3566 GOSUB 3900; LS$=LS1$+LOT_SECTION$+LS2$; GOTO 3590 ! WO168683, lotlinestart
3567 GOSUB 3850; LS$=LS1$+LINEMSG_SECTION$+LS2$; GOTO 3590 ! WO168683, linemessage_start
3568 GOSUB 4700; IF NOT(NUL(PO1$(291,6))) THEN CALL "ZZDISP","DX",PO1$(291,6),"",X3$,DATE1$,"",0,0,X4$; LS$=LS1$+FN%HTML_ESC$(DATE1$)+LS2$ ELSE LS$=LS1$+LS2$ END_IF ; GOTO 3590; REM "po_schd_ship_date - 209902
3569 LS$=LS1$+FN%HTML_ESC$(STP(FS2$(124,2),1))+LS2$; GOTO 3590 ! WO233389, sell_unit_two
3570 LS$=LS1$+FN%HTML_ESC$(STP(EDW$(35,3),1))+LS2$; GOTO 3590 ! WO233389, ext_line_number
3571 LS$=LS1$+FN%HTML_ESC$(FS2$(6,3))+LS2$; GOTO 3590; REM "order_line_number, 263664
3572 PO_NUMBER$=""; IF NOT(NUL(FS2$(9,1))) THEN PO_NUMBER$=FN%ZZDISP$(DISPLAY_ORDER$+FS2$(9,1),"P/O") END_IF ; LS$=LS1$+FN%HTML_ESC$(PO_NUMBER$)+LS2$; GOTO 3590 ! SSP263664, po_number
3573 LS$=LS1$+ORD_STAT$[OS_I,0]+LS2$; GOTO 3590 ! line_state_code
3574 LS$=LS1$+ORD_STAT$[OS_I,1]+LS2$; GOTO 3590 ! line_state_desc
3575 LS$=LS1$+ORD_STAT$[OS_I,2]+LS2$; GOTO 3590 ! line_change_status
3576 LS$=LS1$+ORD_STAT$[OS_I,3]+LS2$; GOTO 3590 ! line_change_status_msg
3577 GOSUB 4000; LS$=LS1$+SPECIAL_SHIP_SECTION$+LS2$; GOTO 3590 ! sslinestart
3578 LS$=LS1$+STP(MID(EDW$,78,10),2)+LS2$; GOTO 3590 ! edw_status
3579 LS$=LS1$+STP(MID(EDW$,88,10),2)+LS2$; GOTO 3590 ! edw_status_id
3580 TMP$=""; IF NOT(NUL(MID(EDW$,98,6))) THEN TMP$=FND$(MID(EDW$,98,6)) END_IF ; LS$=LS1$+TMP$+LS2$; GOTO 3590 ! edw_status_date
3581 TMP$=""; IF NOT(NUL(MID(EDW$,104,4))) THEN TMP$=FNT$(MID(EDW$,104,4)) END_IF ; LS$=LS1$+TMP$+LS2$; GOTO 3590 ! edw_status_time
3582 LS$=LS1$+STP(MID(EDW$,12,20),2)+LS2$; GOTO 3590 ! edw_rc_num
3583 LS$=LS1$+STP(MID(EDW$,38,10),2)+LS2$; GOTO 3590 ! edw_ext_field_1
3584 LS$=LS1$+STP(MID(EDW$,58,10),2)+LS2$; GOTO 3590 ! edw_ext_field_2
3585 LS$=LS1$+DISPLAY_ORDER$+LS2$; GOTO 3590 ! display_order
3586 LS$=LS1$+FN%HTML_ESC$(STP(MID(ECR$,577,20),2))+LS2$; GOTO 3590 ! SSP307255-DBD-101, ext_ref1
3589 LS$=LS1$+LS2$; GOTO 3590; REM "not found replace with a '?' WO233389, problem with "?" replacement when linesstart/linesend
3590 GOTO 3518
3591 LINES_SECTION$=LINES_SECTION$+LS$; REM "add to lines section, then get next line if any
3593 NEXT GETNEXTLINE
3595 RETURN 
3600 REM "Get shipinfo info in SI_TEMPLATE$ and generate SHIPINFO_SECTION$ containing an entry for each SM4 record, given FS1$
3602 SHIPINFO_SECTION$="",SI_TAGS$="001<order_no>002<order_line>003<shipto_point>004<seq_no>005<ship_date>006<ship_time>007<est_arrival>008<carrier_id>009<carrier_name>010<tracking_no>011<pickup_no>012<invoice_no>013<packer_id>014<lot_id>015<box_no>016<total_boxes>017<quantity>018<act_weight>019<ship_weight>020<ship_cost>021<3p_text>"
3603 REM "Setup SI_template$
3604 OUTPUT_SHIP_HEADING$="Y"; REM "set flag to output the shipping heading when first shipping line is generated
3607 READ (100,END=3608)LINE$; GOSUB 7650; SI_TEMPLATE$=SI_TEMPLATE$+LINE$+EOL$; IF POS("?tf?shipinfoend?"=LINE$)=0 THEN GOTO 3607
3609 READ (Z[6],KEY=FS1$(118,8),DOM=3610)
3610 DIM SM4$(700),SM4[15]; READ (Z[6],END=3695)IOL=0360; IF SM4$(1,8)<>FS1$(118,8) THEN GOTO 3695 ! 261000
3611 IF NUL(SM4$(49,20)) AND NUL(MID(SM4$,383,60)) THEN GOTO 3610 ! Ignore blank tracking lines - 211094, 261000
3612 IF OUTPUT_SHIP_HEADING$="Y" THEN SHIPINFO_SECTION$=SHIPINFO_SECTION$+SHIP_HEADING$,OUTPUT_SHIP_HEADING$="N"; REM "add heading for shipping section
3614 SI$=SI_TEMPLATE$
3615 SI_INDEX=POS("?tf?"=SI$); IF SI_INDEX=0 THEN GOTO 3691
3616 SIEND_INDEX=POS("?"=SI$(SI_INDEX+4)),SI_TAG$=SI$(SI_INDEX+4,SIEND_INDEX-1),SI1$=SI$(1,SI_INDEX-1),SI2$=SI$(SI_INDEX+SIEND_INDEX+4),SI_POS=POS("<"+SI_TAG$+">"=SI_TAGS$); IF SI_POS=0 THEN SI$=SI1$+SI2$,SI_INDEX=0 ELSE SI_INDEX=NUM(SI_TAGS$(SI_POS-3,3))
3620 ON SI_INDEX GOTO 3689,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3689
3621 CALL "ZZDISP","AX",SM4$(1,8),"O/P",X3$,TMP$,"",0,0,X4$; SI$=SI1$+FN%HTML_ESC$(TMP$)+SI2$; GOTO 3690; REM "order_no
3622 SI$=SI1$+FN%HTML_ESC$(STR(NUM(SM4$(10,3))))+SI2$; GOTO 3690; REM "order_line
3623 SI$=SI1$+FN%HTML_ESC$(SM4$(13,1))+SI2$; GOTO 3690; REM "shipto_point
3624 SI$=SI1$+FN%HTML_ESC$(SM4$(14,1))+SI2$; GOTO 3690; REM "seq_no
3625 CALL "ZZDISP","DX",SM4$(15,6),"",X3$,DATE1$,"",0,0,X4$; SI$=SI1$+FN%HTML_ESC$(DATE1$)+SI2$; GOTO 3690; REM "ship_date
3626 SI$=SI1$+FN%HTML_ESC$(FNT$(SM4$(21,4)))+SI2$; GOTO 3690; REM "ship_time
3627 SI$=SI1$+FN%HTML_ESC$(SM4$(25,6))+SI2$; GOTO 3690; REM "est_arrival
3628 SI$=SI1$+FN%HTML_ESC$(STP(SM4$(31,6),1))+SI2$; GOTO 3690; REM "carrier_id
3629 IF STP(SM4$(37,12),3," ")="" THEN CN$=SM4$(31,6) ELSE CN$=SM4$(37,12) END_IF ; SI$=SI1$+FN%HTML_ESC$(STP(CN$,1))+SI2$; GOTO 3690; REM "carrier_name
3630 IF NUL(MID(SM4$,383,60)) THEN TMP_TRACKNO$=SM4$(49,20) ELSE TMP_TRACKNO$=MID(SM4$,383,60) END_IF ; SI$=SI1$+FN%HTML_ESC$(STP(TMP_TRACKNO$,1))+SI2$; GOTO 3690; REM "tracking_no, 261000
3631 SI$=SI1$+FN%HTML_ESC$(STP(SM4$(69,16),1))+SI2$; GOTO 3690; REM "pickup_no
3632 CALL "ZZDISP","AX",SM4$(101,8),"AR6",X3$,TMP$,"",0,0,X4; SI$=SI1$+FN%HTML_ESC$(TMP$)+SI2$; GOTO 3690; REM "invoice_no
3633 SI$=SI1$+FN%HTML_ESC$(STP(SM4$(109,3),1))+SI2$; GOTO 3690; REM "packer_id
3634 SI$=SI1$+FN%HTML_ESC$(STP(SM4$(112,12),1))+SI2$; GOTO 3690; REM "lot_id
3635 SI$=SI1$+FN%HTML_ESC$(STR(NUM(SM4$(124,3)):"###"))+SI2$; GOTO 3690; REM "box_no
3636 SI$=SI1$+FN%HTML_ESC$(STR(NUM(SM4$(127,3)):"###-"))+SI2$; GOTO 3690; REM "total_boxes
3637 SI$=SI1$+FN%HTML_ESC$(STR(SM4[0]:"#,###,###-"))+SI2$; GOTO 3690; REM "quantity
3638 SI$=SI1$+FN%HTML_ESC$(STR(SM4[1]:"##,###.00"))+SI2$; GOTO 3690; REM "act_weight
3639 SI$=SI1$+FN%HTML_ESC$(STR(SM4[2]:"##,###.00"))+SI2$; GOTO 3690; REM "ship_weight
3640 SI$=SI1$+FN%HTML_ESC$(STR(SM4[3]:"$###,###.00"))+SI2$; GOTO 3690; REM "ship_cost
3641 GOSUB 7600; SI$=SI1$+VAR_TEXT$+SI2$; GOTO 3690; REM " SSP# 152902
3689 SI$=SI1$+"?"+SI2$; GOTO 3690; REM "not found, replace with a '?'
3690 GOTO 3615
3692 IF LEN(SHIPINFO_SECTION$)+LEN(SI$)<=50000 THEN SHIPINFO_SECTION$=SHIPINFO_SECTION$+SI$; GOTO 3610 ELSE PRINT (OUTPUT)SHIPINFO_SECTION$,EOL$,; SHIPINFO_SECTION$=""; GOTO 3692; REM "add to shipinfo section, then get next ship infor record if any
3695 RETURN 
3700 REM "process <shipheadingstart>
3705 SHIP_HEADING$=""
3710 READ (100,END=3711)LINE$; GOSUB 7650; SHIP_HEADING$=SHIP_HEADING$+LINE$+EOL$; IF POS("?tf?shipheadingend?"=LINE$)=0 THEN GOTO 3710
3720 RETURN 
3850 REM "get line message section (linemessage_start).  Copied from EC3WS1, WO168683.
3852 LINEMSG_SECTION$="",LM_TEMPLATE$=LS2$(2); IF LS1$(LEN(LS1$)-1,2)="<!" THEN LS1$=LS1$(1,LEN(LS1$)-2)
3853 LINEMSG_END=POS("<!?tf?linemessage_end"=LM_TEMPLATE$),LM_TEMPLATE$=LM_TEMPLATE$(1,LINEMSG_END-1)
3854 LINEMSG_END=POS("<!?tf?linemessage_end"=LS2$); IF LEN(LS2$)=LINEMSG_END+23 THEN LS2$="" ELSE LS2$=LS2$(LINEMSG_END+23); REM "strip out the line message section from LS2$
3855 DIM ECE$(500); READ (Z[23],KEY=FS1$(289,10)+EDW$(32,3),DOM=*NEXT)ECE$
3858 DIM OPTIONS$(20); REM "OPTIONS$(1,1)=ORDER_REVIEW$
3860 CALL "EC3MG0",X3$,X4$,EC_PARM$,EC${ALL},LM_TEMPLATE$,ECE$,MESS_INFO${ALL},OPTIONS$; REM "process messages for line
3891 LINEMSG_SECTION$=LM_TEMPLATE$
3895 RETURN 
3900 REM "Get lotted lines section in LOT_TEMPLATE$ and generate LOT_SECTION$ containing an entry for each order line from ICF for the corresponding line section item.  Code copied from EC3WS1, WO168683.
3903 REM "Setup LOT_TEMPLATE$
3904 LOT_TEMPLATE$=LS2$(2)
3905 LOT_END=POS("<!?tf?lotlineend"=LOT_TEMPLATE$),LOT_TEMPLATE$=LOT_TEMPLATE$(1,LOT_END-1)
3906 LS2$=LS2$(2); REM "get rid of trailing > from opening <!?tf?lotlinstart>
3907 LOT_END=POS("<!?tf?lotlineend"=LS2$); IF LEN(LS2$)=LOT_END+18 THEN LS2$="" ELSE LS2$=LS2$(LOT_END+18); REM "strip out the lot section from LS2$
3910 DIM ECR$(1000); FIND (Z[20],KEY=FORMCODE$,DOM=3911)ECR$
3912 IF STP(ECR$(256,48),1)="" THEN WHSE_LIST$=EC$[11] ELSE WHSE_LIST$=STP(ECR$(256,48),1)
3920 REM "get lot records
3922 CALL "EC3IC1",X3$,X4$,EC_PARM$,EC${ALL},FORMCODE$,WHSE_LIST$,FS2[0],FS2[5],ICF_INFO${ALL},NEXT_ICF_INDEX,FS1$(118,8)+FS2$(6,3)
3925 REM "IF NEXT_ICF_INDEX=1 THEN LET LOT_TEMPLATE$=""; GOTO 03933; REM "NO LOT RECORDS
3930 REM "output lot section
3932 CALL "EC3IC2",X3$,X4$,EC_PARM$,EC${ALL},LOT_TEMPLATE$,ICF_INFO${ALL},NEXT_ICF_INDEX-1,""
3933 IF FS2$(9,1)=" " THEN LOT_SECTION$=LOT_TEMPLATE$ ELSE LOT_SECTION$=""; REM "if po being issued then eliminate lot section completely
3940 RETURN 
3950 REM "Get lines section in TPINFO_TEMPLATE$ and generate TPINFO_SECTION$ containing an entry for each order line from FS2.  Code copied in from EC3WS1, WO168683.
3951 IF LEN(LS1$)<=2 THEN LS1$="" ELSE LS1$=LS1$(1,LEN(LS1$)-2); REM "get rid of <!
3952 TPINFO_SECTION$="",TPINFO_TAGS$="001<3p_info_1>002<3p_info_2>003<3p_text>004<3p_info_3>"
3953 REM "Setup TPINFO_TEMPLATE$
3954 TPINFO_TEMPLATE$=LS2$(2)
3955 TPINFO_END=POS("<!?tf?3pinfoend"=TPINFO_TEMPLATE$),TPINFO_TEMPLATE$=TPINFO_TEMPLATE$(1,TPINFO_END-1)
3956 LS2$=LS2$(2); REM "get rid of trailing > from opening <!?tf?3pinfostart>
3957 TPINFO_END=POS("<!?tf?3pinfoend"=LS2$); IF LEN(LS2$)=TPINFO_END+17 THEN LS2$="" ELSE LS2$=LS2$(TPINFO_END+17); REM "strip out the lot section from LS2$
3958 DIM ECR$(1000); READ (Z[20],KEY=FORMCODE$,DOM=*NEXT)ECR$ ! WO168683
3959 DIM EC7$(200); READ (Z[21],KEY=FS1$(289,10)+EDW$(32,3),DOM=*NEXT)EC7$ ! WO168683
3960 IF NUL(MID(ECR$,243,10)) AND NUL(MID(EC7$,14,10)) THEN TPINFO_TEMPLATE$=""; GOTO 3995; REM "if no 3pinfo in both ECR AND EC7 record, eliminate section; used to be, check only ECR and eliminate section
3965 TPINFO_INDEX=POS("?tf?"=TPINFO_TEMPLATE$); IF TPINFO_INDEX=0 THEN GOTO 3991
3966 TPINFOEND_INDEX=POS("?"=TPINFO_TEMPLATE$(TPINFO_INDEX+4)),TPINFO_TAG$=TPINFO_TEMPLATE$(TPINFO_INDEX+4,TPINFOEND_INDEX-1),TP1$=TPINFO_TEMPLATE$(1,TPINFO_INDEX-1),TP2$=TPINFO_TEMPLATE$(TPINFO_INDEX+TPINFOEND_INDEX+4),TPINFO_POS=POS("<"+TPINFO_TAG$+">"=TPINFO_TAGS$); IF TPINFO_POS=0 THEN TPINFO_TEMPLATE$=TP1$+TP2$,TPINFO_INDEX=0 ELSE TPINFO_INDEX=NUM(TPINFO_TAGS$(TPINFO_POS-3,3))
3970 ON TPINFO_INDEX GOTO 3989,3971,3972,3973,3974,3989
3971 TPINFO_TEMPLATE$=TP1$+FN%HTML_ESC$(STP(EC7$(24,20),1))+TP2$; GOTO 3990; REM "3p_info_1
3972 TPINFO_TEMPLATE$=TP1$+FN%HTML_ESC$(STP(EC7$(24,20),2))+TP2$; GOTO 3990; REM "3p_info_2
3973 GOSUB 4350; TPINFO_TEMPLATE$=TP1$+VAR_TEXT$+TP2$; GOTO 3990; REM "3p_text 166342
3974 TPINFO_TEMPLATE$=TP1$+FN%HTML_ESC$(STP(EC7$(64,50),2))+TP2$; GOTO 3990 ! WO178946, 3p_info_3
3989 TPINFO_TEMPLATE$=TP1$+"?"+TP2$; GOTO 3990; REM "not found replace with a '?'
3990 GOTO 3965
3995 RETURN 
4000 REM "Get special shipping section; only if line has special shipping
4005 SPECIAL_SHIP_SECTION$="",SS_TEMPLATE$=LS2$
4010 SS_END=POS("?tf?sslineend?"=SS_TEMPLATE$); SS_TEMPLATE$="?tf?sslinestart?"+SS_TEMPLATE$(1,SS_END+14); LS2$=LS2$(SS_END+15)
4015 IF NOT(EO_MODE) OR FS2$(18,1)<>"Y" OR FS2$(155,1)="M" THEN SS_TEMPLATE$=""; GOTO 4040 ! If line does not have special shipping, or is a "M" type line, or EO mode not enabled, skip section
4025 PO3_KEY$=FS2$(147,8)+" "+FS2$(6,3),OPTIONS$=""; CALL "EC3PO3",X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},PO3_KEY$,OPTIONS$,"?tf?sslinestart?",SS_TEMPLATE$,"?tf?sslineend?",SHIP_STAT${ALL}; REM "process special ship records for line
4040 SPECIAL_SHIP_SECTION$=SS_TEMPLATE$
4045 RETURN 
4049 ! 
4050 REM "Get general shipping section
4055 GENERAL_SHIP_SECTION$="",GS_TEMPLATE$=LINE$
4060 GS_TEMPLATE$+=LINE$+EOL$; IF POS("?tf?gslineend?"=LINE$)=0 THEN READ (100,END=*NEXT)LINE$; GOSUB 7650; GOTO *SAME
4065 ! SSP307255-DBD-101 ALLOW USE FOR GENERAL SHIPPING INFO IF NOT(EO_MODE) THEN GS_TEMPLATE$=""; GOTO 4090 ! If EO mode not enabled, skip section
4075 PO3_KEY$=DISPLAY_ORDER$+DIM(4),OPTIONS$=""; CALL "EC3PO3",X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},PO3_KEY$,OPTIONS$,"?tf?gslinestart?",GS_TEMPLATE$,"?tf?gslineend?",SHIP_STAT${ALL}; REM "process general shipping for order
4090 GENERAL_SHIP_SECTION$=GS_TEMPLATE$
4095 RETURN 
4099 ! 
4350 REM "3p_text handling, TP2$ should have [x] in it
4355 REM "Extract [x] part from TP2, if not found then ignore
4360 VAR_TEXT$=""
4365 BRACKET_POS=POS("]"=TP2$); IF MID(TP2$,1,1)<>"[" OR BRACKET_POS=0 THEN RETURN ELSE VAR_CODE$=TP2$(1,BRACKET_POS),TP2$=TP2$(BRACKET_POS+1)
4370 VAR_CODE$=VAR_CODE$(2,LEN(VAR_CODE$)-2); VAR_CODE$=STR(NUM(VAR_CODE$,ERR=4368):"00000")
4375 VAR_CODE_KEY$=EC7$(14,10)+VAR_CODE$; CALL "EC3BYC",X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,VAR_CODE_KEY$,VAR_TEXT${ALL}
4380 VAR_TEXT$=VAR_TEXT$[1]
4385 RETURN 
4390 ! 
4650 ! Get buyer record for buyer from FS1, SSP173133, code brought in from EC3WS1
4660 DIM ECA$(1540); ECAFSLOT=FN%FFN("ECA"+X3$(9,3)); IF ECAFSLOT<0 THEN GOTO 4690 ! 205455
4665 READ (ECAFSLOT,KEY=FS1$(250,15),DOM=4690)ECA$
4690 RETURN 
4695 ! 
4700 ! Get PO header associated with current line
4701 DIM PO1$(383)
4705 IF NUL(FS2$(9,1)) THEN GOTO 4745 ! Order line not on a PO!SSP#235533
4710 PO1_KEY$=FS2$(147,8)+FS2$(9,1)
4720 FIND (Z[27],KEY=PO1_KEY$,DOM=*NEXT)PO1$; GOTO 4745
4730 FIND (Z[28],KEY=PO1_KEY$,DOM=*NEXT)PO1$; GOTO 4745
4745 RETURN 
4749 ! 
5000 UPDATE_ORDER:
5005 IF NOT(EO_MODE) THEN RETURN 
5010 DIM FS1$(350),FS1[13]; EXTRACT (Z[2],KEY=DISPLAY_ORDER$,ERR=ERR_ORDER_EXTRACT)IOL=IOL_FS1 ! Get exclusive access to order first
5013 IF ORD_STAT$[0,0]<>"0" THEN ORD_STAT$[0,2]="1",ORD_STAT$[0,3]="Order is not open for change"; GOTO 5085
5015 CALL "FM2ODH",X3$,-1,FS1$,FS1{ALL}
5020 GOSUB UPDATE_ORDER_HEADER
5022 GOSUB UPDATE_ORDER_NOTEPAD
5029 IF HIGHEST_VAL_COUNT=0 THEN GOTO 5043
5030 FOR I=1 TO HIGHEST_VAL_COUNT
5035 LINE_NUM$=FS2_IN_DATA$[I](6,3); OS_I=NUM(LINE_NUM$,ERR=ERR_NO_ORDER_LINE)
5037 IF ORD_STAT$[OS_I,0]<>"0" THEN ORD_STAT$[OS_I,2]="1",ORD_STAT$[OS_I,3]="Order line is not open for change"; CONTINUE
5040 GOSUB UPDATE_ORDER_LINE
5042 NEXT I
5043 ! 
5044 IF PO3_VAL_COUNT=0 THEN GOTO 5061
5045 FOR I=1 TO PO3_VAL_COUNT
5047 PO3_LINE_NUM$=PO3_IN_DATA$[I](7,3); PO3_SEQ_NUM$=PO3_IN_DATA$[I](10,1)
5048 SS_I=NUM(PO3_LINE_NUM$,ERR=ERR_NO_SHIP_LINE); SS_S=NUM(FNN$(PO3_SEQ_NUM$),ERR=ERR_NO_SHIP_LINE)
5050 IF ORD_STAT$[SS_I,0]<>"0" THEN SHIP_STAT$[SS_I,SS_S,2]="1",SHIP_STAT$[SS_I,SS_S,3]="Order line is not open for change"; CONTINUE
5055 GOSUB UPDATE_SPECIAL_SHIPPING
5060 NEXT I
5061 ! 
5065 IF GEN_SHIP_CHG_MODE THEN {
5067 SHIP_CHG_MODE=1,I=0,PO3_LINE_NUM$=DIM(3),PO3_SEQ_NUM$=DIM(1),SS_I=0,SS_S=0,PO3_IN_DATA$[I]=GEN_PO3_IN$
5069 DIM PO3$(430),PO3[3]; READ (Z[10],KEY=DISPLAY_ORDER$+" "+PO3_LINE_NUM$+PO3_SEQ_NUM$,DOM=*RETURN)IOL=IOL_PO3
5073 GOSUB UPDATE_SHIPPING
5075  }
5083 CALL "FM2ODH",X3$,1,FS1$,FS1{ALL}
5085 READ (Z[2],KEY=DISPLAY_ORDER$,ERR=*NEXT)IOL=IOL_FS1 ! Release exclusive access lock on order
5095 RETURN 
5099 ! 
5100 UPDATE_ORDER_LINE:
5120 DIM FS2$(356),FS2[29]; READ (Z[5],KEY=DISPLAY_ORDER$+LINE_NUM$,DOM=*RETURN)IOL=IOL_FS2
5130 DIM FMPX$(61),FMPX[3]; IF FS2$(155,1)="S" THEN FIND (Z[12],KEY="X"+FS2$(19,10),DOM=ERR_SPCHG_INVALID)FMPX$,FMPX{ALL}
5179 ! 
5180 IF NOT(NUL(FS2_IN_DATA$[I](50,40))) THEN FS2$(50,40)=FS2_IN_DATA$[I](50,40); ORD_STAT$[OS_I,2]="0",ORD_STAT$[OS_I,3]+="Item Description changed;" ! Item description
5199 ! 
5200 REM "Sell u/m and qty per u/m
5201 IF NOT(NUL(FS2_IN_DATA$[I](124,4))) OR FS2_SET_DATA[I,5] THEN {
5202 DIM UM$(22),UM[5]; IF NOT(NUL(FS2_IN_DATA$[I](124,4))) THEN UM$(1,7)="U/M"+FS2_IN_DATA$[I](124,4) ELSE UM$(1,7)="U/M"+FS2$(124,4)
5203 FIND (Z[13],KEY=UM$(1,7),DOM=ERR_UOM_INVALID)IOL=IOL_UOM
5204 IF FS2$(155,1)<>"M" THEN {
5205 FROM_VALUE$="["+STP(FS2$(124,4),2)+"/"+STR(FS2[5])+"]"; FS2$(124,4)=UM$(4,4)
5206 UM[4]=FS2[5]; IF FS2_SET_DATA[I,5] THEN FS2[5]=FS2_IN_DATA[I,5]
5207 IF MID(UM$,21,1)="Y" THEN FS2[4]=0
5208 IF MID(UM$,20,1)<>"Y" THEN UM[2]=FS2[5] ELSE UM[2]=UM[1]; IF UM[0]<>0 THEN FS2[5]=UM[0] ELSE FS2[5]=UM[1]
5209 IF UM[2]<>UM[3] THEN IF UM[2]=0 THEN UM[2]=1
5210 IF UM[4]<>FS2[5] THEN IF UM[4]<>0 THEN PRECISION M6[1]; FS2[4]=FS2[4]*FS2[5]/UM[4]; PRECISION 2
5211 IF FS2$(155,1)<>"S" OR (FS2$(155,1)="S" AND MID(FMPX$,61,1)<>"Y") THEN {
5212 IF UM[2]=0 THEN UM[2]=1
5213 IF MID(UM$,21,1)<>"Y" THEN FS2[6]=FS2[0]/UM[2]*FS2[4]; IF UM[0]<>0 THEN FS2[6]=FS2[6]/UM[0]
5214  }
5215 TO_VALUE$="["+STP(FS2$(124,4),2)+"/"+STR(FS2[5])+"]"
5216 ORD_STAT$[OS_I,2]="0",ORD_STAT$[OS_I,3]+="Sell U/M changed from "+FROM_VALUE$+" to "+TO_VALUE$+";"; FROM_VALUE$="",TO_VALUE$=""
5217  }
5218  }
5219 ! 
5230 REM "Cost u/m and qty per u/m
5231 IF NOT(NUL(FS2_IN_DATA$[I](120,4))) OR FS2_SET_DATA[I,2] THEN {
5232 DIM UM$(22),UM[5]; IF NOT(NUL(FS2_IN_DATA$[I](120,4))) THEN UM$(1,7)="U/M"+FS2_IN_DATA$[I](120,4) ELSE UM$(1,7)="U/M"+FS2$(120,4)
5233 FIND (Z[13],KEY=UM$(1,7),DOM=ERR_UOM_INVALID)IOL=IOL_UOM
5234 IF FS2$(155,1)<>"M" THEN {
5235 FROM_VALUE$="["+STP(FS2$(120,4),2)+"/"+STR(FS2[2])+"]"; FS2$(120,4)=UM$(4,4)
5236 UM[4]=FS2[2]; IF FS2_SET_DATA[I,2] THEN FS2[2]=FS2_IN_DATA[I,2]
5237 IF MID(UM$,21,1)="Y" THEN FS2[1]=0
5238 IF MID(UM$,20,1)<>"Y" THEN UM[2]=FS2[2] ELSE UM[2]=UM[1]; IF UM[0]<>0 THEN FS2[2]=UM[0] ELSE FS2[2]=UM[1]
5239 IF UM[2]<>UM[3] THEN IF UM[2]=0 THEN UM[2]=1
5240 IF UM[4]<>FS2[2] THEN IF UM[4]<>0 THEN PRECISION M6[1]; FS2[1]=FS2[1]*FS2[2]/UM[4]; PRECISION 2
5241 IF FS2$(155,1)<>"S" OR (FS2$(155,1)="S" AND MID(FMPX$,61,1)<>"Y") THEN {
5242 IF UM[2]=0 THEN UM[2]=1
5243 IF MID(UM$,21,1)<>"Y" THEN FS2[3]=FS2[0]/UM[2]*FS2[1]; IF UM[0]<>0 THEN FS2[3]=FS2[3]/UM[0]
5244  }
5245 TO_VALUE$="["+STP(FS2$(120,4),2)+"/"+STR(FS2[2])+"]"
5246 ORD_STAT$[OS_I,2]="0",ORD_STAT$[OS_I,3]+="Cost U/M changed from "+FROM_VALUE$+" to "+TO_VALUE$+";"; FROM_VALUE$="",TO_VALUE$=""
5247  }
5248  }
5249 ! 
5250 REM "Cost and cost extension
5251 IF FS2_SET_DATA[I,1] AND FS2$(155,1)<>"M" THEN {
5253 FROM_VALUE$=STR(FS2[1]:MK1$); FS2[1]=FS2_IN_DATA[I,1]; TO_VALUE$=STR(FS2[1]:MK1$)
5255 J0=FS2[2],J1=FS2[0],J2=FS2[1]; CALL "FM2EXT",Z[13],0,FS2$(120,4),J0,J1,J2,J3,0; FS2[3]=J3
5257 IF FS2$(155,1)="S" AND MID(FMPX$,61,1)="Y" THEN FS2[3]=FS2[1],FS2[1]=0
5258 ORD_STAT$[OS_I,2]="0",ORD_STAT$[OS_I,3]+="Unit cost changed from "+FROM_VALUE$+" to "+TO_VALUE$+";"; FROM_VALUE$="",TO_VALUE$=""
5259  }
5260 REM "Sell and sell extension
5261 IF FS2_SET_DATA[I,4] AND FS2$(155,1)<>"M" THEN {
5263 FROM_VALUE$=STR(FS2[4]:MK1$); FS2[4]=FS2_IN_DATA[I,4]; TO_VALUE$=STR(FS2[4]:MK1$)
5265 J0=FS2[5],J1=FS2[0],J2=FS2[4]; CALL "FM2EXT",Z[13],0,FS2$(124,4),J0,J1,J2,J3,0; FS2[6]=J3
5267 IF FS2$(155,1)="S" AND MID(FMPX$,61,1)="Y" THEN FS2[6]=FS2[4],FS2[4]=0
5268 ORD_STAT$[OS_I,2]="0",ORD_STAT$[OS_I,3]+="Unit sell changed from "+FROM_VALUE$+" to "+TO_VALUE$+";"; FROM_VALUE$="",TO_VALUE$=""
5269  }
5270 REM "Quantity
5271 IF FS2$(155,1)<>"M" AND SHIP_CHG_MODE AND FS2_SET_DATA[I,0] THEN {
5272 UM$=FS2$(124,4),QTY_PER_UM=FS2[5],ORIG_QTY=FS2_IN_DATA[I,0],FROM_VALUE$=STR(FS2[0])
5274 GOSUB GET_QTY_IN_EACHES
5275 FS2[0]=EACHES_QTY,FS2[10]=EACHES_QTY; TO_VALUE$=STR(FS2[0])
5277 J0=FS2[2],J1=FS2[0],J2=FS2[1]; CALL "FM2EXT",Z[13],0,FS2$(120,4),J0,J1,J2,J3,0; FS2[3]=J3 ! Cost extension
5278 J0=FS2[5],J1=FS2[0],J2=FS2[4]; CALL "FM2EXT",Z[13],0,FS2$(124,4),J0,J1,J2,J3,0; FS2[6]=J3 ! Sell extension
5280 ORD_STAT$[OS_I,2]="0",ORD_STAT$[OS_I,3]+="Quantity changed from "+FROM_VALUE$+" to "+TO_VALUE$+";"; FROM_VALUE$="",TO_VALUE$=""
5285  }
5470 WRITE (Z[5],KEY=DISPLAY_ORDER$+LINE_NUM$,ERR=ERR_LINE_WRITE)IOL=IOL_FS2
5495 RETURN 
5499 ! 
5700 UPDATE_SPECIAL_SHIPPING:! Entry point for changes to PO3 shipping records
5705 DIM PO3$(430),PO3[3]; READ (Z[10],KEY=DISPLAY_ORDER$+" "+PO3_LINE_NUM$+PO3_SEQ_NUM$,DOM=*RETURN)IOL=IOL_PO3
5710 DIM FS2$(356),FS2[29]; READ (Z[5],KEY=DISPLAY_ORDER$+PO3_LINE_NUM$,DOM=*RETURN)IOL=IOL_FS2
5720 REM "Special ship quantity
5721 IF FS2$(155,1)<>"M" AND SHIP_CHG_MODE AND PO3_SET_DATA[I,0] THEN {
5722 UM$=FS2$(124,4),QTY_PER_UM=FS2[5],ORIG_QTY=PO3_IN_DATA[I,0],FROM_VALUE$=STR(PO3[0])
5725 GOSUB GET_QTY_IN_EACHES
5730 PO3[0]=EACHES_QTY; TO_VALUE$=STR(PO3[0])
5735 SHIP_STAT$[SS_I,SS_S,2]="0",SHIP_STAT$[SS_I,SS_S,3]+="Quantity changed from "+FROM_VALUE$+" to "+TO_VALUE$+";"; FROM_VALUE$="",TO_VALUE$=""
5740  }
5743 UPDATE_SHIPPING:! Entry point for shipping changes that do not involve quantity changes; for general shipping changes this is the required entry point
5745 REM "Location
5747 STAX_LOOKUP_REQD=0
5750 IF SHIP_CHG_MODE AND NOT(NUL(PO3_IN_DATA$[I](11,1))) AND NOT(NUL(PO3_IN_DATA$[I](12,4))) THEN {
5755 FROM_VALUE$=PO3$(11,5); TO_VALUE$=PO3_IN_DATA$[I](11,5)
5760 PO3$(11,5)=PO3_IN_DATA$[I](11,5); GOSUB UPDATE_FROM_FM0
5765 SHIP_STAT$[SS_I,SS_S,2]="0",SHIP_STAT$[SS_I,SS_S,3]+="Ship-to Location changed from "+FROM_VALUE$+" to "+TO_VALUE$+";"; FROM_VALUE$="",TO_VALUE$=""
5767 STAX_LOOKUP_REQD=1
5770  }
5775 REM "Address
5780 IF SHIP_CHG_MODE AND NOT(NUL(PO3_IN_DATA$[I](46,87))) THEN {
5785 PO3$(46,87)=PO3_IN_DATA$[I](46,87)
5790 SHIP_STAT$[SS_I,SS_S,2]="0",SHIP_STAT$[SS_I,SS_S,3]+="Address changed;"
5793 STAX_LOOKUP_REQD=1
5795  }
5797 IF STAX_LOOKUP_REQD THEN GOSUB STAX_LOOKUP; STAX_LOOKUP_REQD=0
5801 IF SHIP_CHG_MODE AND NOT(NUL(PO3_IN_DATA$[I](225,35))) THEN PO3$(225,35)=PO3_IN_DATA$[I](225,35); SHIP_STAT$[SS_I,SS_S,2]="0",SHIP_STAT$[SS_I,SS_S,3]+="Ship-to Cust Name changed;"; REM "Manual Ship-to Cust Name
5802 IF SHIP_CHG_MODE AND NOT(NUL(PO3_IN_DATA$[I](16,30))) THEN PO3$(16,30)=PO3_IN_DATA$[I](16,30); SHIP_STAT$[SS_I,SS_S,2]="0",SHIP_STAT$[SS_I,SS_S,3]+="Attention changed;"; REM "Attention
5803 IF SHIP_CHG_MODE AND NOT(NUL(PO3_IN_DATA$[I](150,1))) THEN PO3$(150,1)=PO3_IN_DATA$[I](150,1); SHIP_STAT$[SS_I,SS_S,2]="0",SHIP_STAT$[SS_I,SS_S,3]+="Ship Via Code changed;"; GOSUB GET_SHIP_VIA_DESC; REM "Ship Via Code SSP272145, get/change ship via desc
5804 IF SHIP_CHG_MODE AND NOT(NUL(PO3_IN_DATA$[I](134,1))) THEN PO3$(134,1)=PO3_IN_DATA$[I](134,1); SHIP_STAT$[SS_I,SS_S,2]="0",SHIP_STAT$[SS_I,SS_S,3]+="How To Ship Code changed;"; REM "How To Ship Code
5805 IF SHIP_CHG_MODE AND NOT(NUL(PO3_IN_DATA$[I](151,15))) THEN PO3$(151,15)=PO3_IN_DATA$[I](151,15); SHIP_STAT$[SS_I,SS_S,2]="0",SHIP_STAT$[SS_I,SS_S,3]+="Ship With changed;"; REM "Ship With
5880 WRITE (Z[10],KEY=DISPLAY_ORDER$+" "+PO3_LINE_NUM$+PO3_SEQ_NUM$,ERR=ERR_SHIPLINE_WRITE)IOL=IOL_PO3
5895 RETURN 
5899 ! 
6000 CHECK_ORDER_STATUS:
6005 ORD_STAT$[0,0]="0",ORD_STAT$[0,1]="Open"
6006 FOR OS_I=1 TO MAX_ORD_LINES; ORD_STAT$[OS_I,0]="0",ORD_STAT$[OS_I,1]="Open"; NEXT OS_I
6020 GOSUB CHECK_ORDER_HEADER
6021 MX=FN%_LOG_MESSAGE("MESG","STATUS|ORDER|"+DISPLAY_ORDER$+"|HEADER  |"+ORD_STAT$[0,0]+" - "+ORD_STAT$[0,1])
6025 IF ORD_STAT$[0,0]="9" THEN GOTO 6090 ! Order is temporarily busy, skip the rest 
6028 IF NUL(ORDERLINES$) THEN GOTO 6090
6030 FOR I=0 TO LEN(ORDERLINES$)/3-1
6035 LINE_NUM$=ORDERLINES$(I*3+1,3); OS_I=NUM(LINE_NUM$,ERR=ERR_NO_ORDER_LINE)
6040 GOSUB CHECK_ORDER_LINE
6041 MX=FN%_LOG_MESSAGE("MESG","STATUS|ORDER|"+DISPLAY_ORDER$+"|LINE "+LINE_NUM$+"|"+ORD_STAT$[OS_I,0]+" - "+ORD_STAT$[OS_I,1])
6080 NEXT I
6090 READ (Z[2],KEY=DISPLAY_ORDER$,ERR=*NEXT) ! Clear any locks before we go on
6095 RETURN 
6099 ! 
6100 CHECK_ORDER_HEADER:
6105 DIM FS1$(350),FS1[13]; EXTRACT (Z[2],KEY=DISPLAY_ORDER$,BSY=*NEXT,ERR=ERR_NO_ORDER)IOL=IOL_FS1; GOTO 6110
6107 ORD_STAT$[0,0]="9",ORD_STAT$[0,1]="Order cannot be accessed! Currently in use "+FN%TCB87$("by %u and process %p")+"."; GOTO 6195 ! If ERR 0, then let them know
6110 ON POS(FS1$(63,1)="YSP") GOTO 6115,6111,6113,6113,6115 ! Check invoicing flag: Y-Invoicing, S=WMS Pick, P=Pick Hold
6111 ORD_STAT$[0,0]="1",ORD_STAT$[0,1]="Access denied! Order is being invoiced."; GOTO 6195
6113 ORD_STAT$[0,0]="2",ORD_STAT$[0,1]="Access denied! Order is being picked."; GOTO 6195
6115 GOSUB CHECK_PO_RECEIVING; IF NEW_FTO$="Y" AND VAL_BATCH$="Y" THEN ORD_STAT$[0,0]="3",ORD_STAT$[0,1]="Access denied! Order is being PO received in batch "+FTO$(10,4)+" by "+FTO$(14,3)+"."; GOTO 6195
6195 RETURN 
6199 ! 
6200 CHECK_ORDER_LINE:
6205 DIM FS2$(356),FS2[29]; READ (Z[5],KEY=DISPLAY_ORDER$+LINE_NUM$,ERR=ERR_NO_ORDER_LINE)IOL=IOL_FS2
6230 IF FS2[8]<>0 THEN ORD_STAT$[OS_I,0]="1",ORD_STAT$[OS_I,1]="Access denied! PO receiving already initiated for this order line."
6295 RETURN 
6299 ! 
6500 UPDATE_ORDER_HEADER:
6510 IF NOT(NUL(ORDER_CUST_PO_IN$)) THEN FS1$(28,15)=ORDER_CUST_PO_IN$; ORD_STAT$[0,2]="0",ORD_STAT$[0,3]+="Cust PO changed;" ! Cust PO
6515 IF NOT(NUL(ORDERED_BY_IN$)) THEN FS1$(129,20)=ORDERED_BY_IN$; ORD_STAT$[0,2]="0",ORD_STAT$[0,3]+="Ordered By changed;" ! Ordered By
6520 IF NOT(NUL(DATE_REQUESTED_IN$)) THEN FS1$(55,6)=DATE_REQUESTED_IN$; ORD_STAT$[0,2]="0",ORD_STAT$[0,3]+="Date Requested changed;" ! Date Requested
6580 IF NOT(NUL(ORD_STAT$[0,3])) THEN {
6585 WRITE (Z[2],KEY=DISPLAY_ORDER$,ERR=*NEXT)IOL=IOL_FS1 ! Update order
6587 EXTRACT (Z[2],KEY=DISPLAY_ORDER$,ERR=ERR_ORDER_EXTRACT)IOL=IOL_FS1 ! Get exclusive access to order after write
6590  }
6595 RETURN 
6599 ! 
6600 UPDATE_ORDER_NOTEPAD:
6605 IF NOT(FMN[0]) THEN RETURN 
6610 DIM FMN$(510); FMN$(1,8)=DISPLAY_ORDER$; READ (Z[29],KEY=FMN$(1,8),DOM=*NEXT)FMN$
6615 FOR TMPJ=1 TO 10; IF FMN[TMPJ] THEN FMN$(9+(TMPJ-1)*50,50)=FMN_IN$(9+(TMPJ-1)*50,50) END_IF ; NEXT TMPJ
6620 WRITE (Z[29],KEY=FMN$(1,8))FMN$
6622 ORD_STAT$[0,2]="0",ORD_STAT$[0,3]+="Order Notepad changed;" ! Order notepad
6625 RETURN 
6629 ! 
6630 UPDATE_FROM_FM0:
6632 DIM FM0$(618); IF PO3_IN_DATA$[I](11,1)="C" THEN FM0_KEY$="C"+FS1$(6,10)+PO3_IN_DATA$[I](12,4) ELSE FM0_KEY$="D"+DIM(10)+PO3_IN_DATA$[I](12,4) END_IF ; READ (Z[19],KEY=FM0_KEY$,DOM=*RETURN)IOL=IOL_FM0
6634 PO3$(46,87)=FM0$(51,87) ! Ship-to Address
6636 IF NUL(FM0$(248,35)) THEN PO3$(225,35)=FM0$(16,35) ELSE PO3$(225,35)=FM0$(248,35) ! Ship-to Customer Name
6637 FIND (Z[30],KEY=FS1$(6,10),DOM=*NEXT)AR1$
6648 RETURN 
6649 ! 
6650 REM "Convert quantity to eaches
6655 GET_QTY_IN_EACHES:
6660 UM$=PAD(UM$,4),THOUSANDS$="M   ",EACHES_QTY=0; IF STP(EC_PARM$(1089,4),3)>"" THEN THOUSANDS$=EC_PARM$(1089,4)
6665 DIM M$(21),M[1]; FIND (Z[13],KEY="U/M"+UM$,DOM=*NEXT)M$,M[0],M[1]
6670 IF M$(20,1)="Y" AND M[1]<>0 AND UM$<>THOUSANDS$ AND UM$<>"C   " THEN QTY_PER_UM=M[1]; REM " If fixed unit of measure then fix it.  SSP171511, for Hundreds, act like we do for thousands and don't stop from converting.  This is opposite of how it works in manual order entry.  We may need a parameter in EC like we do for thousands at some point.
6675 REM " Multiply out unless we are expecting the amount in eaches
6680 IF UM$=THOUSANDS$ AND EC_PARM$(948,1)="Y" THEN EACHES_QTY=ORIG_QTY; GOTO *RETURN
6685 EACHES_QTY=ORIG_QTY*QTY_PER_UM
6695 RETURN 
6699 ! 
6700 STAX_LOOKUP:
6705 IF NOT(NUL(FM0$(224,10))) THEN FS1$(76,10)=FM0$(224,10)
6710 IF (POS(X3$(9,3)="101118590",3)>0 OR MID(ARPARM3$,9,1)="Y") AND MID(FM0$,224,7)=PO3$(122,7) THEN GOTO STAX_DONE; REM "Sales taxcode - SSP 230142 - additionally flag it to not be overridden (goes with taxcode logic related to 212287), WO232721, if stax code sent in, don't override with FM0 code SSP 235445, 252208
6715 IF ARPARM2$(134,1)<>"Y" THEN GOTO STAX_DONE ! SSP 218603 - If Sales Tax Interface is not enabled then stop
6720 IF EC_PARM$(1178,1)="Y" THEN IF (NOT(NUL(PO3$(122,7))) AND MID(STP(PO3$(122,11),3),1,7)=FM0$(127,7)) OR (NUL(FM0$(51,87)) AND NOT(NUL(FM0$(224,10)))) THEN GOTO STAX_DONE; REM " SSP 218603 -  For veratax type lookup, both these conditions must be true: manual addr state+zip must not match ship-to state+zip and if ship-to address is blank, it must not also have a sales tax code set.
6725 READ (Z[31],KEY=MID(AR1$,235,10),KNO=0,DOM=*NEXT)CUST_TAX$; IF MID(CUST_TAX$,182,1)="Y" THEN GOTO STAX_DONE
6730 READ (Z[31],KEY=MID(FM0$,224,10),KNO=0,DOM=*NEXT)SHIP_TAX$; IF MID(SHIP_TAX$,182,1)="Y" THEN GOTO STAX_DONE
6735 IF NUL(PO3$(122,7)) THEN FS1$(76,10)=MID(AR1$,235,10); GOTO STAX_DONE; REM " 167855 IF shipping information has NO state/zip default to cust master
6750 REM "245342-Lookup tax code using city, state and zip using called program
6755 DIM G$(190); CALL "TW2FUN;LOOKUP_TAX_CODE",ERR=*NEXT,X3$,X4$,PO3$(122,2),PO3$(124,5),PO3$(106,16),"",T$,T{ALL}; G$(1)=T$(1); GOTO STAX_FOUND ! 245342 !SSP#258039
6760 FS1$(76,10)=MID(AR1$,235,10) ! If by this time, no sales tax found, default to AR1 default sales tax
6765 STAX_FOUND:
6770 FS1$(76,10)=G$(1,10); IF POS(X3$(9,3)="101")<>0 AND FS1$(6,2)="13" AND G$(1,10)="IL"+DIM(8) THEN FS1$(76,10)="ILCH"+DIM(6); REM SSP 207882
6780 STAX_DONE:
6790 PO3$(269,11)=FS1$(76,11); REM "Tax code & flag
6795 RETURN 
6799 ! 
7300 SEND_XML_FILE:
7310 FILE_TO_SEND$=PTH(OUTPUT); CLOSE (OUTPUT)
7315 COMMAND_CODE$=PAD("ORD_CONF_"+SENDER_ID_3P$,20)
7320 CALL "ZZ2CMD",ERR=*NEXT,X3$,X4$,"{"+COMMAND_CODE$+"}",URL$+SEP+FILE_TO_SEND$+SEP+"Content-type=text/xml","NR",RET_CODE,RESP$
7330 MX=FN%_LOG_MESSAGE("MESG","SESSION_ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|"+PGN+"|SEND_XML_FILE|"+FILE_TO_SEND$+"|RESPCODE|"+STR(RET_CODE)+"|RESPONSE|"+RESP$)
7340 RETURN 
7349 ! 
7400 SET_READONLY:
7410 SET_PARAM 'XI'
7420 SET_READONLY_END:RETURN 
7430 CLEAR_READONLY:
7435 SET_PARAM -'XI'
7440 CLEAR_READONLY_END:RETURN 
7500 REM "Set values from FS2$ that need calculations, etc
7503 DIM ECR$(1000) ! SSP307255-DBD-101
7504 DIM EDW$(200); READ (Z[22],KEY=DISPLAY_ORDER$+CURRLINE$,DOM=*NEXT)EDW$ ! WO168683
7505 CALL "ZZDISP","AX",FS2$(161,10),"A/R",X3$,ITEM_CUST$,"",0,0,X4$
7507 CALL "ZZDISP","AX",FS2$(221,8),"O/P",X3$,QUOTE_NUMBER$,"",0,0,X4$
7510 FORM_TYPE$=""; ON POS(FS2$(155,1)="NECSB") GOTO FORM_TYPE_END,7511,7512,7513,7514,7515,FORM_TYPE_END
7511 FORM_TYPE$="New"; GOTO FORM_TYPE_END
7512 FORM_TYPE$="Exact Repeat"; GOTO FORM_TYPE_END
7513 FORM_TYPE$="Copy Change"; GOTO FORM_TYPE_END
7514 FORM_TYPE$="Spec Change"; GOTO FORM_TYPE_END
7515 FORM_TYPE$="Spec & Copy Change"; GOTO FORM_TYPE_END
7516 FORM_TYPE_END:
7520 REM "Set SELL_DIVISOR from sell unit of measure
7521 MASK5$="##,##0-",MASK7$="#,###,##0-"
7522 DIM UM$(22),UM[5]; FIND (Z[13],KEY="U/M"+FS2$(124,4),DOM=7523)IOL=0430
7523 IF UM$(20,1)="Y" OR UM$(21,1)="Y" OR FS2[5]=0 THEN SELL_DIVISOR=1 ELSE SELL_DIVISOR=FS2(5) END_IF ; UMEXT$=STP(STR(FS2(10)/SELL_DIVISOR:MASK7$),2)+" "+STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):MASK5$),2),UMEXTBO$=STP(STR(FS2(8)/SELL_DIVISOR:MASK7$),2)+" "+STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):MASK5$),2); REM "159109
7524 DIM FM1(31),FM1$(500); FORMCODE$=FS2$(161,10)+FS2$(19,10); IF FORMCODE$(1,10)=DIM(10) THEN ALT_SELL_DIVISOR=SELL_DIVISOR,ALTUM$=STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):"##,##0-"),2),ALTUMEXT$=STP(STR(FS2(10)/ALT_SELL_DIVISOR:"#,###,##0-"),2)+" "+STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):"##,##0-"),2),ALTUMEXTBO$=STP(STR(FS2(8)/ALT_SELL_DIVISOR:MASK7$),2)+" "+STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):MASK5$),2); GOTO 7545 ! SSP168892, if no cust code then still need to set altum tags
7525 FIND (Z(14),KEY=FORMCODE$,DOM=7526)IOL=0440; GOTO 7527
7526 ALT_SELL_DIVISOR=SELL_DIVISOR; REM "159109  ; GOTO 7545
7528 IF FM1(25)=0 OR FM1$(238,4)=DIM(4) THEN ALT_SELL_DIVISOR=SELL_DIVISOR,ALTUM$=STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):"##,##0-"),2),ALTUMEXT$=STP(STR(FS2(10)/ALT_SELL_DIVISOR:"#,###,##0-"),2)+" "+STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):"##,##0-"),2),ALTUMEXTBO$=STP(STR(FS2(8)/ALT_SELL_DIVISOR:MASK7$),2)+" "+STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):MASK5$),2) ELSE ALT_SELL_DIVISOR=FM1(25),ALTUM$=STP(FM1$(238,4),2)+"/"+STP(STR(FM1(25):"##,##0-"),2),ALTUMEXT$=STP(STR(FS2(10)/ALT_SELL_DIVISOR:"#,###,##0-"),2)+" "+STP(FM1$(238,4),2)+"/"+STP(STR(FM1(25):"##,##0-"),2),ALTUMEXTBO$=STP(STR(FS2(8)/ALT_SELL_DIVISOR:MASK7$),2)+" "+STP(FM1$(238,4),2)+"/"+STP(STR(FM1(25):MASK5$),2); REM "159109
7530 ITPOS=POS(FS2$(6,3)=FS6LINE$,3),ALTUMEXTINV$="",UMEXTINV$=""; IF ITPOS=0 THEN IT=0 ELSE IT=FS6INV[(ITPOS+2)/3] END_IF ; IF IT=0 THEN GOTO 7536; REM "159109
7532 IF FM1(25)=0 OR FM1$(238,4)=DIM(4) THEN ALTUMEXTINV$=STP(STR(IT/ALT_SELL_DIVISOR:MASK7$),2)+" "+STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):MASK5$),2) ELSE ALTUMEXTINV$=STP(STR(IT/ALT_SELL_DIVISOR:MASK7$),2)+" "+STP(FM1$(238,4),2)+"/"+STP(STR(FM1(25):MASK5$),2); REM "159109
7534 IF UM$(20,1)="Y" OR UM$(21,1)="Y" OR FS2[5]=0 THEN SELL_DIVISOR=1 ELSE SELL_DIVISOR=FS2(5) END_IF ; UMEXTINV$=STP(STR(IT/SELL_DIVISOR:MASK7$),2)+" "+STP(FS2$(124,4),2)+"/"+STP(STR(FS2(5):MASK5$),2); REM "159109"
7540 DIM ECR$(1000); FIND (Z[20],KEY=FORMCODE$,DOM=*NEXT)ECR$(1) ! SSP307255-DBD-101
7545 RETURN 
7550 REM "Use FS8 and customer code + order number to look into FS6 records. Set ship status based on lines being invoiced. SHIP_STATUS$="OPEN","SHIPPED", or "PARTIAL SHIPPED"
7551 REM "build fs6line$ (list of lines found), fs6inv$(corr to lines found, each entry=1,8 last inv#, 9,6=last inv date, and fs6inv[](corr to lines found, is qty inv to date
7554 FS6LINE$="",FS6INV$=""; DIM FS6INV[200]
7555 SHIP_STATUS$="Open",O_LINES=0,S_LINES=0; READ (Z[8],KEY=EC$[2](51,10)+FS1$(118,8),DOM=7556)
7560 KEY8$=KEY(Z[8],END=7585); READ (Z[8]); IF KEY8$(1,18)<>EC$[2](51,10)+FS1$(118,8) THEN GOTO 7585 ELSE DIM FS6[7]; READ (Z[9],KEY=KEY8$(1,10)+KEY8$(19,11)+KEY8$(11,8)+KEY8$(30,1),DOM=7560)FS6$,FS6[0],FS6[1],FS6[2],FS6[3],FS6[4],FS6[5],FS6[6],FS6[7]
7565 IF STP(FS6$(40,8),3," ")="" THEN O_LINES=O_LINES+1 ELSE S_LINES=S_LINES+1
7567 REM "Update fs6inv info
7568 ASCFS6=ASC(FS6$(30,1))-48; IF ASCFS6>=100 THEN ASCFS6-=10 END_IF ; LINE_NO$=STR(ASCFS6:"000"); FS6LINE$=FS6LINE$+LINE_NO$,LINE_INDEX=LEN(FS6LINE$)/3 ! 236557
7569 FS6INV$=FS6INV$+FS6$(40,14),FS6INV[LINE_INDEX]=FS6[5]
7580 GOTO 7560
7590 IF S_LINES=0 THEN SHIP_STATUS$="Open" ELSE IF O_LINES>0 THEN SHIP_STATUS$="Partial Ship" ELSE SHIP_STATUS$="Shipped"
7595 RETURN 
7600 REM "3p_text handling, SI2$ should have [x] in it                       
7605 REM "Extract [x] part from line2, if not found then ignore                 
7606 VAR_TEXT$=""
7610 IF LEN(SI2$)<3 THEN GOTO 7611 ELSE BRACKET_POS=POS("]"=SI2$); IF SI2$(1,1)<>"[" OR BRACKET_POS=0 THEN GOTO 7611 ELSE VAR_CODE$=SI2$(1,BRACKET_POS),SI2$=SI2$(BRACKET_POS+1); GOTO 7612
7611 VAR_TEXT$=""; GOTO 7645; REM "did not find var code part, so leave         
7612 VAR_CODE$=VAR_CODE$(2,LEN(VAR_CODE$)-2); VAR_CODE$=STR(NUM(VAR_CODE$,ERR=7611):"00000")
7613 FIND (Z[18],KEY=PAD(SM4$(31,6),10)+VAR_CODE$,DOM=7614)EC9$; GOTO 7615 ! 206208
7614 FIND (Z[18],KEY=SM4$(37,10)+VAR_CODE$,DOM=7611)EC9$
7615 VAR_CODE_KEY$=EC9$(1,10)+VAR_CODE$; CALL "EC3BYC",X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,VAR_CODE_KEY$,VAR_TEXT${ALL}
7620 VAR_TEXT$=VAR_TEXT$[1]
7645 RETURN 
7650 REM "Send LINE$ to EC3BYB for generic fields processing
7660 CALL "EC3BYB",ERR=7661,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,LINE$,BYBINFO${ALL},BYBOPTIONS$,100 ! 227154
7695 RETURN 
7700 REM "given FS2$ return last_inv$ and last_inv_date$ as pre-formatted values based on fs6line$ and fs6inv$ (set in 7560's)
7705 LAST_INV$="",LAST_INV_DATE$="",LI=POS(FS2$(6,3)=FS6LINE$); IF LI=0 THEN GOTO 7745
7710 LI$=FS6INV$(((LI+2)/3-1)*14+1,14)
7715 CALL "ZZDISP","AX",LI$(1,8),"AR6",X3$,LAST_INV$,"",0,0,X4$
7720 CALL "ZZDISP","DX",LI$(9,6),"",X3$,LAST_INV_DATE$,"",0,0,X4$
7745 RETURN 
7800 REM "ck if special charge displaying
7801 SC_DISPLAY$="Y"
7802 IF FS2$(155,1)<>"S" THEN GOTO 7890
7805 IF X3$(9,3)="130" THEN SC_DISPLAY$="N"; GOTO 7890
7806 IF POS("S"=STP(EC_PARM$(709,5),2))<>0 THEN SC_DISPLAY$="N"; GOTO 7890
7810 DIM SCC$(200); FIND (Z[12],KEY="X"+FS2$(19,10),DOM=7890)SCC$
7812 SCC$=PAD(SCC$,200)
7814 IF SCC$(62,1)="Y" THEN SC_DISPLAY$="N"; GOTO 7890
7816 IF SCC$(63,10)=DIM(10) THEN GOTO 7890
7818 FS2$(19,10)=SCC$(63,10); DIM SCC$(200); FIND (Z[12],KEY="X"+FS2$(19,10),DOM=7819)SCC$
7819 FS2$(50,40)=SCC$(12,40)
7890 REM " 'CS',FS2$(9,1)," ",FS2$(155,1)," ",SC_DISPLAY$," ",FS2$(19,10),; INPUT *,
7895 RETURN 
7900 ! Order line is a companion item line, see if comp item record says don't print, if so then don't print here either, SSP190529
7905 IF LINE_FILE=Z[5] THEN COMP_LINE_FILE=Z[25] ELSE IF LINE_FILE=Z[7] THEN COMP_LINE_FILE=Z[26] ELSE GOTO *RETURN
7910 FIND (COMP_LINE_FILE,KEY=DISPLAY_ORDER$+FS2$(230,3),DOM=*RETURN)COMP_LINE$
7915 READ (Z[24],KEY=COMP_LINE$(161,10)+COMP_LINE$(19,10),DOM=*NEXT)
7920 COMP_KEY$=KEY(Z[24],END=*RETURN); READ (Z[24],KEY=COMP_KEY$)EDV$
7925 IF EDV$(1,20)<>COMP_LINE$(161,10)+COMP_LINE$(19,10) THEN GOTO *RETURN
7930 IF EDV$(35,1)<>FS2$(155,1) THEN GOTO 7920 ! Line type
7935 IF FS2$(155,1)="S" AND EDV$(48,10)=FS2$(19,10) THEN IF EDV$(168,1)<>"Y" THEN DONT_PRINT=1; GOTO *RETURN ELSE GOTO *RETURN ! Special charge type, and a match, check whether to print
7940 IF POS(FS2$(155,1)="CI")>0 AND EDV$(38,20)=FS2$(161,10)+FS2$(19,10) THEN IF EDV$(168,1)<>"Y" THEN DONT_PRINT=1; GOTO *RETURN ELSE GOTO *RETURN ! C or I type, and a match, check whether to print
7945 GOTO 7920
7990 RETURN 
7995 ! 
8000 REM "take Q$, try to figure out date and return in Q$
8001 REM "assume MM?DD?YY(YY) format where we don't care about ?'s. if only YY then pivot on 60
8004 IF LEN(Q$)=7 AND Q$(2,1)="/" THEN Q$="0"+Q$; REM "135234
8005 IF LEN(Q$)<6 THEN GOTO 8045 ELSE IF LEN(Q$)>=8 THEN Q$=Q$(1,2)+Q$(3,2)+Q$(7); IF LEN(Q$)>8 THEN Q$=Q$(1,8)
8009 REM "NOW in MMDDYY.. format
8010 IF LEN(Q$(5))>2 THEN YY$=Q$(5) ELSE IF Q$(5)<"60" THEN YY$="20"+Q$(5) ELSE YY$="19"+Q$(5)
8015 TMP$=Q$,Q$=DIM(6),Q$=CHR(NUM(YY$(1,3),ERR=8016)-125,ERR=8016)+YY$(4,1)+TMP$(1,4); REM "135884
8045 RETURN 
8049 ! 
8100 CHECK_OSTATUS_MSG:! SSP227326/227500
8110 IF SHIP_STATUS$="Open" THEN GOTO 8130 ELSE IF SHIP_STATUS$="Partial Ship" THEN GOTO 8140 ELSE IF SHIP_STATUS$="Shipped" THEN GOTO 8150 ELSE GOTO *RETURN
8130 IF STP(SHIP_STAT_MSG_OPEN$,2)>"" THEN SHIP_STATUS$=STP(SHIP_STAT_MSG_OPEN$,2) END_IF ; GOTO *RETURN
8140 IF STP(SHIP_STAT_MSG_PARTIAL$,2)>"" THEN SHIP_STATUS$=STP(SHIP_STAT_MSG_PARTIAL$,2) END_IF ; GOTO *RETURN
8150 IF STP(SHIP_STAT_MSG_SHIPPED$,2)>"" THEN SHIP_STATUS$=STP(SHIP_STAT_MSG_SHIPPED$,2) END_IF ; GOTO *RETURN
8190 RETURN 
8195 ! 
8200 REM "Check if at least one PO in this order is being PO received
8201 CHECK_PO_RECEIVING:
8205 NEW_FTO$="N"; DIM FTO$(60); READ (Z[16],KEY=FS1$(118,8),DOM=*NEXT)
8210 DIM FTO$(60); READ (Z[16],END=*NEXT)FTO$; IF FTO$(1,8)<>FS1$(118,8) THEN GOTO 8215 ELSE GOSUB 8220; NEW_FTO$="Y"; IF VAL_BATCH$="Y" THEN GOTO *NEXT
8215 RETURN 
8219 ! 
8220 VAL_BATCH$="N"
8225 READ (Z[15],KEY=FTO$(10,4),DOM=*NEXT)
8230 READ (Z[15],END=*NEXT)ZY9$; IF ZY9$(1,4)=FTO$(10,4) AND ZY9$(6,6)="PO2MAG" THEN VAL_BATCH$="Y"; GOTO 8245 ELSE GOTO *SAME
8235 REMOVE (Z[16],KEY=FTO$(1,9)); REM "Invalid FTO record, remove and return
8245 RETURN 
8249 ! 
8300 REM "Retreive 1 or more values in VALUE$ place in VAL$[] and set VAL_COUNT-Values seperated by ', 's (that is comma + blank), current max of MAX_ORD_LINES values
8301 REM "We will add all values blank or not
8305 PARSE_DATA_TAG:
8307 DIM VAL$[MAX_ORD_LINES]; VAL_COUNT=0
8310 IF VAL_COUNT=MAX_ORD_LINES THEN GOTO 8340 ELSE VP=POS(", "=VALUE$); IF VP=0 THEN GOTO 8335
8315 VAL_COUNT=VAL_COUNT+1; IF VP=1 THEN VAL$[VAL_COUNT]="",VALUE$=VALUE$(3); GOTO 8310 ELSE VAL$[VAL_COUNT]=VALUE$(1,VP-1); IF VP=LEN(VALUE$) THEN VALUE$=""; GOTO 8340 ELSE VALUE$=VALUE$(VP+2); GOTO 8310
8335 REM "finish up last one
8337 VAL_COUNT=VAL_COUNT+1; VAL$[VAL_COUNT]=VALUE$
8340 IF VAL_COUNT>HIGHEST_VAL_COUNT THEN FOR TMP_INDEX=HIGHEST_VAL_COUNT+1 TO VAL_COUNT; FS2_IN_DATA$[TMP_INDEX]=DIM(LEN(FS2_IN$)); NEXT TMP_INDEX; HIGHEST_VAL_COUNT=VAL_COUNT; REM "If new higher val count value then initialize data array
8345 RETURN 
8349 ! 
8400 REM "Retreive 1 or more values in VALUE$ place in VAL$[] and set EDW_COUNT-Values seperated by ', 's (that is comma + blank), current max of MAX_ORD_LINES values
8401 REM "We will add all values blank or not
8405 PARSE_EDW_TAG:
8407 DIM VAL$[MAX_ORD_LINES]; EDW_COUNT=0
8410 IF EDW_COUNT=MAX_ORD_LINES THEN GOTO 8440 ELSE VP=POS(", "=VALUE$); IF VP=0 THEN GOTO 8435
8415 EDW_COUNT=EDW_COUNT+1; IF VP=1 THEN VAL$[EDW_COUNT]="",VALUE$=VALUE$(3); GOTO 8410 ELSE VAL$[EDW_COUNT]=VALUE$(1,VP-1); IF VP=LEN(VALUE$) THEN VALUE$=""; GOTO 8440 ELSE VALUE$=VALUE$(VP+2); GOTO 8410
8435 REM "finish up last one
8437 EDW_COUNT=EDW_COUNT+1; VAL$[EDW_COUNT]=VALUE$
8440 IF EDW_COUNT>HIGHEST_EDW_COUNT THEN FOR TMP_INDEX=HIGHEST_EDW_COUNT+1 TO EDW_COUNT; EDW_IN_DATA$[TMP_INDEX]=DIM(LEN(EDW_IN$)); NEXT TMP_INDEX; HIGHEST_EDW_COUNT=EDW_COUNT; REM "If new higher val count value then initialize data array
8445 RETURN 
8449 ! 
8450 UPDATE_EDW:
8453 Z0$=DAY,Z0$=Z0$(7,2)+Z0$(1,2)+Z0$(4,2),Z0$=FNM$(Z0$)
8456 Z1$=STR(INT(TIM):"00")+STR(100*FPT(TIM):"00")
8460 FOR TMPI=1 TO EDW_COUNT
8470 IF NUL(MID(EDW_IN_DATA$[TMPI],9,3)) OR NUL(MID(EDW_IN_DATA$[TMPI],12)) THEN GOTO *CONTINUE ! Skip if no input data or blanks sent in, also skip if no key portion
8480 DIM EDW$(200),EDW[0]; EDW$(1,8)=DISPLAY_ORDER$,EDW$(9,3)=MID(EDW_IN_DATA$[TMPI],9,3); READ (Z[22],KEY=EDW$(1,11),DOM=*NEXT)IOL=IOL_EDW ! Read for existing EDW records
8490 IF NOT(NUL(MID(EDW_IN_DATA$[TMPI],78,10))) THEN EDW$(78,10)=MID(EDW_IN_DATA$[TMPI],78,10) ! edw_status
8491 IF NOT(NUL(MID(EDW_IN_DATA$[TMPI],88,10))) THEN EDW$(88,10)=MID(EDW_IN_DATA$[TMPI],88,10) ! edw_status_id
8500 EDW$(98,6)=Z0$,EDW$(104,4)=Z1$ ! Status date and time
8530 WRITE (Z[22],KEY=EDW$(1,11))IOL=IOL_EDW
8535 MX=FN%_LOG_MESSAGE("MESG","EDW UPDATE|ORDER|"+DISPLAY_ORDER$+"|LINE|"+EDW$(9,3)+"|"+EDW$(78,10)+"|"+EDW$(88,10)+"|")
8540 NEXT TMPI
8545 RETURN 
8549 ! 
8550 GET_SHIP_VIA_DESC:! SSP272145, ship via code changed, get desc
8560 DIM FMPS$(20); FIND (Z[12],KEY="S"+PO3$(150,1),DOM=*RETURN)FMPS$(1)
8565 PO3$(210,15)=FMPS$(3,15)
8590 RETURN 
8595 ! 
8700 REM "Error listing
8710 ERR_NO_ORDER: ERRMSG$="Order not found: "+DISPLAY_ORDER$; GOTO 8795
8711 ERR_NO_ORDER_LINE: ERRMSG$="Order line not found: "+DISPLAY_ORDER$+" "+LINE_NUM$; GOTO 8795
8712 ERR_ORDER_EXTRACT:IF ERR=0 THEN ERRMSG$="Order cannot be accessed! Currently in use "+FN%TCB87$("by %u and process %p"); GOTO 8795 ELSE GOTO 9000 ! If ERR 0 let them know else let it be handled in err handler section
8713 ERR_UOM_INVALID: ERRMSG$="Unit of measure is invalid: "+MID(UM$,4,4); GOTO 8795
8714 ERR_SPCHG_INVALID: ERRMSG$="Special charge is invalid: "+MID(FS2$,19,10); GOTO 8795
8715 ERR_NO_SHIP_LINE: ERRMSG$="Special shipping line not found: "+DISPLAY_ORDER$+" "+PO3_LINE_NUM$+" "+PO3_SEQ_NUM$; GOTO 8795
8720 ERR_LINE_WRITE: ERRMSG$="Could not update order line:"+DISPLAY_ORDER$+" "+LINE_NUM$; GOTO 8795
8725 ERR_SHIPLINE_WRITE: ERRMSG$="Could not update special shipping line:"+DISPLAY_ORDER$+" "+PO3_LINE_NUM$+" "+PO3_SEQ_NUM$; GOTO 8795
8740 ERR_NO_GEN_SHIP: ERRMSG$="Order does not have general shipping"; GOTO 8795
8795 LOG_ERR: ERRMSG$=GBL("LAST_WEBEC_ERR",ERRMSG$); GOTO 9900
8799 ! 
8910 DEF FND$(Z9$)=Z9$(1*2+1,2)+"/"+Z9$(7-1*2,2)+"/"+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
8915 DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
8920 DEF FNM$(X$)=CHR(ASC("K")+INT(NUM(X$(1,2))/10))+STR(MOD(NUM(X$(1,2)),10))+X$(3,4)
8925 DEF FNS$(Z9$)=TBL(NUM(Z9$)<10,CHR(ASC("A")+NUM(Z9$)-10),STR(NUM(Z9$):"0")) ! CHAR(3) SEQ# (1-35) => CHAR(1) SEQ# (1-9,A-Z)
8930 DEF FNN$(Z9$)=TBL(Z9$<"A",STR(ASC(Z9$)-ASC("A")+10:"000"),STR(NUM(Z9$):"000")) ! CHAR(1) SEQ# (1-9,A-Z) => CHAR(3) SEQ# (1-35)
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9005 GOSUB CLEAR_READONLY
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$); REM "131928
9090 GOTO 9900
9900 REM "End
9905 GOSUB CLEAR_READONLY
9906 %LOT_SELL_PRICE_TOTAL=0,%CUST_OWNED_LOT_SELL_PRICE_TOTAL=0 ! WO173708/WO175385
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9950 EXIT 
9999 END 
53031 REM "235533-Order Status issue on Web EC                                
56000 ! Program changes starting 12/13/05
56010 REM "190505-Trying to use include file for ordconf page, using the
56015 REM "190529-Using EC3OS1 for order conf, companion lines set to not
56017 REM "206208-Tracking buttons missing from order status page             
56019 REM "205455-Oracle - FFN usage in ZZFLES to be replaced with FN%FFN     
56021 REM "211094-Issue with orders showing multiple blank tracking lines
56022 REM "209902-Tag to display the sch'd shipping date from po header
56023 REM "227154-Modify EC3BYB to support a condition tag : ?tf?if?[expr]    
56026 ! 227326/227500-New tags to designate Open/Partial/Shipped 
56028 REM "233389-XML Order Confirmation for H&R Block
56030 REM "234145-Add HTML ESC function to EC3OS1
56031 REM "236557-On the order status page, the qty shipped is blank on some  
56032 REM "261000-Tracking number expansion related issue
56034 REM "234945-DB Flowpoint - need 3p_sender_id output tag
56036 ! 234945-Found many GOTO 3390 that should be GOTO 3390, changed them
56037 REM "263664-WMX; Change order/PO and cancel order/PO ability            
56038 REM "269047-SB Change Order API Next Phase : Ref 263664                 
56040 REM "272145-DBC-2595; SB Ship via code changed but desc isn't changing. 
56041 REM "272565-EC3OS1 - ERR 0 at 3510 when SB requests order status        
56042 REM "284595-Comp 080 DB/a SPT-34271:  Purchase Order change failed      
56043 REM "289039-Third party artwork URLs not displayed through standard 3p  
56044 REM "307255-DBD-101; DBSPT-80384/499 Order Acknowledgement EC3OS1 tags  
