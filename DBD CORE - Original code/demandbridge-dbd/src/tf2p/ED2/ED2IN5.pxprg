0010 REM "<ED2IN5> EDI Purchase Order Import
0020 SETESC 9300; SETERR 9000
0035 REM "5.3 - 11/08/04 - 14.607777 - jme - SSP# 177423
0040 REM "Copyright 2004 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 IF %GUI=0 THEN SETERR 9000
0110 X0$="ED2IN5",X1$="EDI Purchase Order Import"
0120 DIM Z0$(80,"-"),FILE$[150]
0130 K0=20,K1=1
0135 C9=-1
0200 REM "
0240 IF %GUI=0 THEN CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0300 REM "IOLISTS
0310 IOLIST A$; REM "EM1
0320 IOLIST B$
0330 IOLIST C$
0420 IOLIST I$
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0509 REM "Slot 1 used for ED0 file opened in 1000's, slot 2 used for text file created in 700's to write to
0510 Z$="03O EM1...  04O PO2...  05O ICD...  13O ZZPARM  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0600 REM "
0610 IF %GUI=0 THEN GOSUB 6000
0620 PARM$=X3$(9,3)+"E/M"
0640 REM "IF Q1$="" THEN CALL "ZZPROM",".Y",X3$,Z,"PROCEED?","","",0; ON Z GOTO 00641,09900
0700 NAME_1$="RP1.",EXT_1=1
0705 TEXT$=NAME_1$+STR(EXT_1:"000")
0710 SERIAL TEXT$,0,0,ERR=0711; GOTO 0712; REM "Create text file to write to
0711 EXT_1=EXT_1+1; GOTO 0705
0720 Z$="02CU 02O "+TEXT$+" "
0730 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0731,9900
0740 CLOSE (Z[2]); OPEN LOCK (Z[2],OPT="TEXT")TEXT$; REM "Re-open as a text file
0800 REM "Set Prefix
0900 REM "Read ZZPARM file for DIRectory and hex codes
0910 DIM I$(384); READ (Z[13],KEY=PARM$,DOM=0911)IOL=0420
0915 ELEMENT_SEPARATOR$=ATH("2A"),SEGMENT_TERMINATOR$=ATH("5E"); REM "Setup for original values:  * and ^ respectively
0920 IF I$(309,2)<>"  " THEN ELEMENT_SEPARATOR$=ATH(I$(309,2))
0925 IF I$(311,2)<>"  " THEN SEGMENT_TERMINATOR$=ATH(I$(311,2))
1000 REM "Get list of .exp files to process
1005 I=-1,J=0
1010 IMPORT_PATH$=STP(I$(182,30),1)
1015 SELECT AT$ FROM IMPORT_PATH$
1030 IF AT$<>"." AND AT$<>".." THEN FILE$[I+1]=IMPORT_PATH$+AT$; I=I+1
1035 NEXT RECORD 
1036 SLOT=UNT
1060 CLOSE (SLOT); OPEN LOCK (SLOT,OPT="TEXT",ERR=5000)FILE$[J]; REM "Open for reading raw file
1065 CLOSE (13); OPEN (13)"ZZPARM"; REM "Re-open ZZPARM closed in ZZ2BLS
1075 IF Q1$<>"" AND %GUI=0 THEN PRINT @(15,15),'CE',"Processing: "+FILE$[J]
1080 GOSUB 8100; GOSUB 8150
1100 REM "Process the file
1102 DIM INV_REC$(240); INV_REC$=PAD(INV_REC$,240)
1105 C=0,SEGMENT$=""
1110 READ (SLOT,END=1900)SEGMENT$
1120 C=C+1; IF MOD(C,T0)=1 THEN GOSUB 8150
1130 GOSUB BUILD_ARRAY
1140 ELEMENT$[1]=PAD(ELEMENT$[1],3)
1145 ON INT((POS(ELEMENT$[1]="ISAGS ST BIGNTEREFN1 N4 ITDFOBIT1IT3CTPTDSSACCTTSE GE IEA",3)+2)/3) GOSUB DONT_NEED,EL_ISA,EL_GS,EL_ST,EL_BIG,EL_NTE,EL_REF,EL_N1,DONT_NEED,EL_ITD,EL_FOB,EL_IT1,DONT_NEED,DONT_NEED,EL_TDS,EL_SAC,DONT_NEED,DONT_NEED,DONT_NEED,DONT_NEED
1150 GOTO 1110
1200 BUILD_ARRAY:REM "Break segment into it's elements, [0] is unaltered segment, [1] & so on are the elements
1201 REM "Assume < 50 elements for now
1205 DIM ELEMENT$[50]; ELEMENT$[0]=SEGMENT$,EL_INDEX=0
1220 P=POS(ELEMENT_SEPARATOR$=SEGMENT$),EL_INDEX=EL_INDEX+1
1225 IF P=0 THEN IF SEGMENT$(LEN(SEGMENT$),1)=SEGMENT_TERMINATOR$ THEN SEGMENT$=SEGMENT$(1,LEN(SEGMENT$)-1) END_IF ; ELEMENT$[EL_INDEX]=SEGMENT$; GOTO BUILD_ARRAY_END; REM "We have all the elements for this segment
1230 IF P=1 THEN ELEMENT$[EL_INDEX]=" ",SEGMENT$=SEGMENT$(P+1); GOTO 1220; REM "Blank element, set to one blank space
1235 ELEMENT$[EL_INDEX]=SEGMENT$(1,P-1),SEGMENT$=SEGMENT$(P+1); GOTO 1220
1295 BUILD_ARRAY_END:RETURN 
1600 GOTO 1110
1900 REM "End of file
1930 REM "Remove the file
1931 CLOSE (SLOT,ERR=1932)
1935 ERASE FILE$[J],ERR=1936
1985 J=J+1
1995 GOTO 1060
2000 DONT_NEED:REM "Don't need this segment, go get another one
2045 DONT_NEED_END:RETURN 
2050 EL_ISA:REM "ISA element, we need trading partner ID
2052 DIM SOURCE$(3),VER$(3),VEND$(10),LOC$(4),ORD_BY$(20),REQ$(15),ATTN$(30),DT_REQ$(6),DT_ORD$(8),VIACODE$(1),VIADESC$(15),HOWCODE$(1),INSIDE$(15),WITH$(15),ADDR1$(30),ADDR2$(30),CITY$(16),STATE$(2),ZIP$(9),MARKFOR$(35),SALESTAX$(10),TAXABLE$(1),HEADWHSE$(4),SHIPNAME$(35)
2055 DIM SENDER$(15); SENDER$(1)=ELEMENT$[7],FO1_HEADER$="",FO1_LINE$="",FO1_REC$=""
2060 DIM A$(255); FIND (Z[3],KEY=SENDER$,DOM=2061)IOL=0310
2065 SOURCE$="EDI",VER$="101"; IF I$(306,3)<>"   " THEN VER$=I$(306,3); REM "WO119820, allow use of versions other than 101
2070 IF POS(" "<>A$(61,10))>0 THEN VEND$=A$(61,10) ELSE VEND$=SENDER$(1,10)
2080 INV_REC$(1)=SOURCE$; INV_REC$(4)=VER$
2095 EL_ISA_END:RETURN 
2100 EL_GS:REM "GS element, we need functional identifier code
2105 IF ELEMENT$[2]<>"IN" THEN S$="File: "+F1$+" contains a non IN transaction, need to check archive"; S1$="echo "+QUO+S$+QUO+" >> "+HWD+DLM+"EDI_LOG"; INVOKE S1$; EXITTO 1950
2145 EL_GS_END:RETURN 
2150 EL_ST:REM "Need transaction set identifier code
2160 IF ELEMENT$[2]<>"810" THEN S$="File: "+F1$+" contains a non 810 transaction, need to check archive"; S1$="echo "+QUO+S$+QUO+" >> "+HWD+DLM+"EDI_LOG"; INVOKE S1$; EXITTO 1950
2195 EL_ST_END:RETURN 
2200 EL_BIG:REM "
2205 DIM INV_NUM$(10),INV_DATE$(8),PO_NUM$(9)
2210 POL=POL+1
2220 INV_NUM$=PAD(ELEMENT$[3],10),INV_DATE$=PAD(ELEMENT$[2],8),PO_NUM$=PAD(STP(ELEMENT$[5],3,"-"),9,0,"0")
2230 INV_REC$(7,9)=PO_NUM$; INV_REC$(25)=INV_NUM$; INV_REC$(35)=INV_DATE$
2245 EL_BIG_END:RETURN 
2250 EL_FOB:REM "Shipping info, not used at this time
2295 EL_FOB_END:RETURN 
2300 EL_N1:REM "Ship to/from identifier                                             
2345 EL_N1_END:RETURN 
2350 EL_ITD:REM "Terms of sale                                                                      
2395 EL_ITD_END:RETURN 
2400 EL_IT1:REM "Baseline Item Data                                   
2405 DIM QTY_REC$(7),UM$(4),UNIT_COST$(10),EXT_COST$(10),ITEM_CODE$(20),PO_LINE$(3)
2407 IF ELEMENT$[4]=" " THEN GOTO EL_IT1_END
2410 QTY_REC$=PAD(ELEMENT$[3],7); UM$=PAD(ELEMENT$[4],4); UNIT_COST$=PAD(ELEMENT$[5],10); ITEM_CODE$=PAD(ELEMENT$[10],20)
2415 GOSUB 7600
2420 QTY_REC=NUM(QTY_REC$); UNIT_COST=NUM(UNIT_COST$)
2425 EXT_COST=QTY_REC*UNIT_COST; EXT_COST$=PAD(STR(EXT_COST),10)
2430 INV_LINE$=INV_LINE$+QTY_REC$+UNIT_COST$+EXT_COST$
2435 INV_REC$(87)=UM$; INV_REC$(98)=QTY_REC$; INV_REC$(127)=UNIT_COST$; INV_REC$(137)=EXT_COST$; INV_REC$(16,3)=PO_LINE$
2440 PRINT (Z[2])INV_REC$
2445 EL_IT1_END:RETURN 
2450 EL_NTE:REM "Note/Special Instructions
2495 EL_NTE_END:RETURN 
2500 EL_TDS:REM "Invoice Totals     
2510 DIM INV_TOT$(10),DISC_AMT$(10)
2520 INV_TOT$=PAD(ELEMENT$[2],10); DISC_AMT$=PAD(ELEMENT$[4],10)
2530 INV_TRAIL$=INV_TRAIL$+INV_TOT$+DISC_AMT$
2595 EL_TDS_END:RETURN 
2600 EL_SAC:REM "Allowance or Charge                                  
2610 DIM FREIGHT_AMT$(8)
2620 IF ELEMENT$[2]="C" THEN FREIGHT_AMT$=PAD(ELEMENT$[4],10) ELSE FREIGHT_AMT$="0" END_IF 
2630 INV_REC$(119)=FREIGHT_AMT$
2640 REM PRINT (Z[2])INV_REC$
2695 EL_SAC_END:RETURN 
2700 EL_REF:REM "Reference Numbers                       
2750 EL_REF_END:RETURN 
3000 REM "Override Customer Code with 4th segment of N1 record; SSP#108980
3010 CUST_OVR$=FN%CVT4$(ELEMENT$[4])
3015 IF CUST_OVR$<>"" THEN CUST$=PAD(CUST_OVR$,10,"0")
3040 RETURN 
5000 REM "EOJ
5001 XFD$=FN%XFD$(Z[2],0),TOT_REC=DEC(XFD$(38,4))
5003 CLOSE (Z[2],ERR=5004)
5004 IF TOT_REC=0 THEN ERASE TEXT$; GOTO 5012
5005 NAME_2$="FO1.",EXT_2=1
5007 GOR$=NAME_2$+STR(EXT_2:"000")
5010 REM RENAME TEXT$,GOR$,ERR=5011; GOTO 5012; REM "Rename the ED1 file we wrote to, to an FO1 file to be used in the Order Requisition Gateway
5011 REM EXT_2=EXT_2+1; GOTO 5007
5015 C=T; GOSUB 8150
5020 REM "IF Q1$="" THEN CALL "ZZPROM",".4",X3$,Z,"PROCESS COMPLETE!!","","",0
5040 GOTO 9900
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6016)'SB',
6020 PRINT @(0,4),"Translating Incoming EDI Purchase Order Records"
6165 PRINT (0,ERR=6166)'SF',
6190 RETURN 
7500 REM "Convert date q$ into q0$
7501 REM "Q$ in YYYYMMDD format or YYMMDD
7505 Q0$=""
7506 IF STP(Q$,3," ")="" THEN GOTO 7545
7510 IF LEN(Q$)=8 THEN GOTO 7520 ELSE IF LEN(Q$)=6 THEN D1$=STR(NUM(Q$(1,2)):"00") ELSE GOTO 7545
7515 IF D1$<"50" THEN Q$="20"+Q$ ELSE Q$="19"+Q$
7520 Q0$=CHR(NUM(Q$(1,3),ERR=7521)-125)+Q$(4,1)+Q$(5,2)+Q$(7,2)
7545 RETURN 
7600 REM ITEM CODE CROSS REFERENCE LOOK-UP
7610 REM =================================
7615 DIM C$(168)
7620 K$=KEY(Z[5],END=7700)
7630 READ (Z[5],KEY=K$,DOM=7700)
7640 IF K$(1,10)<>VEND$ THEN GOTO 7620
7645 IF K$(15,20)<>ITEM_CODE$ THEN GOTO 7620
7660 READ (Z[4],KEY=PO_NUM$+"   ",DOM=7620)IOL=0330
7670 IF C$(101,10)<>K$(45,10) THEN GOTO 7660
7680 PO_LINE$=PAD(C$(7,3),3,0,"0")
7700 IF PO_LINE$="   " THEN PO_LINE$=PAD(ELEMENT$[2],3,0,"0")
7710 RETURN 
8100 REM "GOSUB here, once, at the beginning, after the background is set and before the Proceed? question. Set T to total # to do (by calling ZZINFO) and T0 to the reporting interval (report every T0 number of records) this is typically 2% of total; This also prints a message (@8115),so adjust accordingly
8110 T=0; CALL "ZZ2FNC;SERIALRECCNT",SLOT,T
8115 IF %GUI=0 THEN PRINT @(0,7),"There are "+STR(T)+" records to process"
8129 REM "Set T0, we make sure T0 is > 1, because later on we MOD and look for avalue of 1. IF T0 is 1, then nothing would get reported. We look for a result of 1 because this causes the first record to automatically start the reporting instead of waiting until the T0'th record to get the first report
8130 T0=INT(T*.02); IF T0<=1 THEN T0=2
8145 RETURN 
8150 REM "Call this each time to update the bar graph. Display horiz. bar graph given total #, T and current #, C, and time counter T1 (T1 is init'ed here and used here, just don't use it somewhere else)
8155 CALL "ZZBARG",X3$,"HG",19,10,50,T1,T,C
8195 RETURN 
8950 DEF FNS$(Z9$)=Z9$(1,POS("     "=Z9$+"     ")-1)
9000 REM "ERROR PROCESSING
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9900 REM "END PROGRAM
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9945 EXIT 
9950 RUN "ZMENU"
9999 END 
