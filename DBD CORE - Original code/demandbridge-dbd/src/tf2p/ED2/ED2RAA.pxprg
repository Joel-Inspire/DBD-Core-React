0010 REM "<ED2RAA> EDI File Processing Report
0020 SETESC 9300; SETERR 9000
0035 REM "5.3 - 11/08/04 - 11.867222 - jme - SSP# 177423
0040 REM "Copyright 2004 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000
0110 X0$="ED2RAA",X1$="EDI File Processing Report"
0120 DIM Z0$(80,"-"),FILE$[150],Z1$(15," ")
0130 K0=20,K1=1,DT$=DAY,DT$=DT$(7,2)+DT$(1,2)+DT$(4,2)
0135 C9=-1
0170 IF POS("MS"=UCS(SYS)) THEN ISWIN=1 ELSE ISWIN=0
0200 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9900
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0300 REM "IOLISTS
0320 IOLIST EM1$
0420 IOLIST I$
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="02O EM1...  030 EM9...  13O ZZPARM  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0600 REM "
0610 IF Q1$<>"G" THEN GOSUB 6000
0620 PARM$=X3$(9,3)+"E/M"
0640 IF Q1$="" THEN CALL "ZZPROM",".Y",X3$,Z,"Proceed?","","",0; ON Z GOTO 0641,9900
0800 REM "Set Prefix
0900 REM "Read ZPARM file DIR DIRectory
0910 READ (Z[13],KEY=PARM$)IOL=0420
0915 ELEMENT_SEPARATOR$=ATH("2A"),SEGMENT_TERMINATOR$=ATH("5E"); REM "Setup for original values:  * and ^ respectively
0920 IF I$(309,2)<>"  " THEN ELEMENT_SEPARATOR$=ATH(I$(309,2))
0925 IF I$(311,2)<>"  " THEN SEGMENT_TERMINATOR$=ATH(I$(311,2))
1000 REM "Get list of files to process
1005 I=-1,J=-1
1010 IMPORT_PATH$=STP(I$(182,30),1)
1015 SELECT A$ FROM IMPORT_PATH$
1030 IF A$<>"." AND A$<>".." THEN FILE$[I+1]=STP(I$(182,30),1)+A$; I=I+1
1035 NEXT RECORD 
1040 IF I=-1 THEN IF Q1$<>"G" THEN CALL "ZZPROM",".4",X3$,0,"There are no files to process","","",0; GOTO 9900 ELSE MSGBOX "","There are no files to process"; CMD_STR$="END"; GOTO WRAPUP
1050 REM "Open text file
1060 J=J+1; IF J>I THEN GOTO 5000 ELSE CLOSE (32001); OPEN LOCK (32001,OPT="TEXT",ERR=1050)FILE$[J]; REM "Can't use ZZFLES to open because text files names can be longer than 8
1065 CLOSE (13); OPEN (13)"ZZPARM"; REM "Re-open ZZPARM closed in ZZ2BLS
1100 REM "Process the file
1105 C=0,SEGMENT$=""
1110 READ (32001,END=1050)SEGMENT$
1120 C=C+1
1130 GOSUB 1200; REM "Break segment into elements
1140 ELEMENT$[1]=PAD(ELEMENT$[1],3)
1145 ON INT((POS(ELEMENT$[1]="GS ST BIGBEG",3)+2)/3) GOSUB DONT_NEED,EL_GS,EL_ST,EL_BIG,EL_BEG
1150 GOTO 1110
1200 REM "Break segment into it's elements
1201 REM "Assume < 50 elements for now
1205 DIM ELEMENT$[50]; ELEMENT$[0]=SEGMENT$,EL_INDEX=0
1220 P=POS(ELEMENT_SEPARATOR$=SEGMENT$),EL_INDEX=EL_INDEX+1
1225 IF P=0 THEN IF SEGMENT$(LEN(SEGMENT$),1)=SEGMENT_TERMINATOR$ THEN SEGMENT$=SEGMENT$(1,LEN(SEGMENT$)-1) END_IF ; ELEMENT$[EL_INDEX]=SEGMENT$; GOTO BUILD_ARRAY_END; REM "We have all the elements for this segment
1230 IF P=1 THEN ELEMENT$[EL_INDEX]=" ",SEGMENT$=SEGMENT$(P+1); GOTO 1220; REM "Blank element, set to one blank space
1235 ELEMENT$[EL_INDEX]=SEGMENT$(1,P-1),SEGMENT$=SEGMENT$(P+1); GOTO 1220
1295 BUILD_ARRAY_END:RETURN 
2000 DONT_NEED:REM "Don't need this segment, go get another one
2045 DONT_NEED_END:RETURN 
2150 EL_ST:REM "Need transaction set identifier code
2160 IF ELEMENT$[2]="850" THEN PO=PO+1 ELSE IF ELEMENT$[2]="869" THEN OSI=OSI+1 ELSE IF ELEMENT$[2]="810" THEN INV=INV+1
2170 DOC_TYPE$=ELEMENT$[2]
2195 EL_ST_END:RETURN 
2200 EL_GS:REM "Need to get customer code to write to file if it is a valid file type
2205 DIM EM1$(255)
2210 ID$=ELEMENT$[3]; ID$=ID$+Z1$(1,15-LEN(ID$)); FIND (Z[2],KEY=ID$,DOM=2211)IOL=0320
2220 EL_GS_END:RETURN 
2250 EL_BIG:REM "Need to get invoice number
2260 DOC_NUM$=ELEMENT$[2]; DOC_NUM$=DOC_NUM$+Z1$(1,15-LEN(DOC_NUM$))
2265 IF ISWIN THEN S2$="copy "+HWD+DLM+"import"+DLM+FILE$[J]+" "+HWD+DLM+"editmp"+DLM; CALL "ZZ2CMD",X3$,X4$,S2$,"","IN",COMM_CODE,COMM_CODE$; GOTO 2271; REM "If NT, call command processor so command will happen on server
2270 S2$="cp "+FILE$[J]+" "+HWD+DLM+"editmp"+DLM; INVOKE S2$
2280 WRITE (Z[3],KEY=DOC_TYPE$+DT$+EM1$(61,10)+DOC_NUM$)FILE$[J]
2290 EXITTO 1050
2300 EL_BEG:REM "Need to get PO Number
2310 DOC_NUM$=ELEMENT$[4]; DOC_NUM$=DOC_NUM$+Z1$(1,15-LEN(DOC_NUM$))
2315 IF ISWIN THEN S2$="copy "+FILE$[J]+" "+HWD+DLM+"editmp"+DLM; CALL "ZZ2CMD",X3$,X4$,S2$,"","IN",COMM_CODE,COMM_CODE$; GOTO 2321; REM "If NT, call command processor so command will happen on server
2320 S2$="cp "+FILE$[J]+" "+HWD+DLM+"editmp"+DLM; INVOKE S2$
2330 WRITE (Z[3],KEY=DOC_TYPE$+DT$+MID(EM1$,51,10)+DOC_NUM$)FILE$[J]
2340 EXITTO 1050
5000 REM "EOJ
5001 CLOSE (32001,ERR=5002)
5004 TOT_REC=PO+OSI+INV
5010 IF Q1$="G" THEN GOTO PROCEED_END
5015 GOSUB 6200
5020 IF Q1$="" THEN CALL "ZZPROM","X0ED2RAA",X3$,Z,"Enter Transaction Set to Process","","",0
5040 IF Z=3 THEN CALL "ED2POI",X3$,X4$; CALL "ED2ORI",X3$,X4$; CALL "ED2IN5",X3$,X4$
5050 IF Z=4 THEN CALL "ED2POI"
5060 IF Z=5 THEN CALL "ED2ORI",X3$,X4$
5070 IF Z=6 THEN CALL "ED2IN5",X3$,X4$
5090 GOTO 9900
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6016)'SB',
6020 PRINT @(23,4),"Read to See How Many Files to Process"
6030 PRINT @(7,8),"Number of Purchase Orders to Process:"
6040 PRINT @(0,10),"Number of Order Status Inquiries to Process:"
6045 PRINT @(14,12),"Number of Invoices to Process:"
6050 PRINT @(9,14),"Total Number of Records to Process:"
6180 PRINT (0)'SF',
6190 RETURN 
6200 REM "Print Data
6210 PRINT @(46,8),PO:"#####0"
6220 PRINT @(46,10),OSI:"#####0"
6225 PRINT @(46,12),INV:"#####0"
6230 PRINT @(46,13),"------"
6240 PRINT @(46,14),TOT_REC:"#####0"
8100 REM "GOSUB here, once, at the beginning, after the background is set and before the Proceed? question. Set T to total # to do (by calling ZZINFO) and T0 to the reporting interval (report every T0 number of records) this is typically 2% of total; This also prints a message (@8115),so adjust accordingly
8110 CALL "ZZINFO",Z[1],T9,X3$,T,T0,K,B,D,S0,S1,F$
8115 REM "PRINT @(0,7),"THERE ARE "+STR(T)+" RECORDS TO PROCESS"
8129 REM "Set T0, we make sure T0 is > 1, because later on we MOD and look for avalue of 1. IF T0 is 1, then nothing would get reported. We look for a result of 1 because this causes the first record to automatically start the reporting instead of waiting until the T0'th record to get the first report
8130 T0=INT(T*.02); IF T0<=1 THEN T0=2
8145 RETURN 
8150 REM "Call this each time to update the bar graph. Display horiz. bar graph given total #, T and current #, C, and time counter T1 (T1 is init'ed here and used here, just don't use it somewhere else)
8155 CALL "ZZBARG",X3$,"HG",19,10,50,T1,T,C
8195 RETURN 
8950 DEF FNS$(Z9$)=Z9$(1,POS("     "=Z9$+"     ")-1)
9000 REM "ERROR PROCESSING
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9900 REM "END PROGRAM
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
20000 ! 100 - Initialization
20010 INIT:
20015 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; IF X1>0 THEN CMD_STR$="END"; GOSUB WRAPUP; GOTO *RETURN
20020 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
20025 DIM Z0$(80,"-"),FILE$[150],Z1$(15," ")
20027 IF POS("MS"=UCS(SYS)) THEN ISWIN=1 ELSE ISWIN=0
20030 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
20055 CALL "ZZ2PRP","OS",RESULT$,DATE$; IF RESULT$<>"Y" THEN MSGBOX "","TOPS Module is not installed"; CMD_STR$="END"; GOSUB WRAPUP; GOTO *RETURN
20082 DIM Z[NUM(X3$(60,3))]
20085 Z$="02O EM1...  030 EM9...  13O ZZPARM  "
20087 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; IF Z0>0 THEN GOTO OPEN_ERR
20090 RETURN 
20100 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
20110 CMD_STR$="END"
20120 RETURN 
20130 ! 300 - Set up the message library
20140 SETUP_LIBRARY:
20150 _SV_MSGLIB$=MSG(*)
20160 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
20170 MESSAGE_LIB "*tfmsglib."+_LANG$,ERR=*NEXT; GOTO 20190
20180 MESSAGE_LIB "*tfmsglib.en"
20190 SET_MSG:GOSUB SETUP_MESSAGES
20200 RETURN 
20210 ! 400 - Set up key information
20220 SETUP_KEYS:
20230 _NUMKEYS=1
20240 DIM _KEYS$[1:1]; _KEYS$[1]="ERROR_CODE$"
20250 _KEY1=1
20260 RETURN 
20270 ! 500 - Main panel post_display logic
20280 MAIN_POST_DISPLAY:
20290 MESSAGE_LIB _SV_MSGLIB$
20300 GOSUB CLEAR_REC
20310 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
20320 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
20330 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
20340 RETURN 
20350 ! 900 - Wrapup
20360 WRAPUP:
20400 MESSAGE_LIB _SV_MSGLIB$
20410 SET_PARAM 'KR'=_SV_KR
20415 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
20420 RETURN 
20430 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
20440 FIND_REC:
20450 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
20460 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
20470 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
20480 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
20490 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
20500 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
20510 GOSUB PROCESS_READ
20520 GOSUB NUM_TO_STR
20530 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
20540 EXIT 
20550 ! 1200 - New RECORD check
20560 NEW_RECORD:
20570 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
20580 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
20590 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
20600 RETURN 
20610 ! 1400 - Add RECORD
20620 WRITE_REC:
20630 GOSUB STR_TO_NUM
20640 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
20650 GOSUB REVIEW_WRITE
20660 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20670 CHANGE_FLG=0
20680 NEXT_ID=_FIRST_KEY
20690 EXIT 
20700 ! 1600 - Delete
20710 DELETE_REC:
20720 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
20730 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
20740 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
20750 IF _X$<>"YES" THEN RETURN 
20760 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
20770 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20780 CHANGE_FLG=0
20790 NEXT_ID=_FIRST_KEY
20800 EXIT 
20810 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
20820 ! 1800 - Clear record
20830 CLEAR_REC:
20840 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
20850 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
20860 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20870 CHANGE_FLG=0
20880 RETURN 
20890 ! 2000 - Browsing mode
20900 ! - Next
20910 NEXT_REC:
20920 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
20930 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
20940 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
20950 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
20960 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
20970 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
20980 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
20990 ! 2200 - Prior record
21000 PRIOR_REC:
21010 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21020 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
21030 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
21040 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
21050 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
21060 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
21070 ! 2400 - First record
21080 FIRST_REC:
21090 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21100 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
21110 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
21120 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
21130 ! 2600 - Last record
21140 LAST_REC:
21150 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21160 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
21170 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
21180 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
21190 ! 3000 - Subroutines
21200 ! Processing required by READ
21210 PROCESS_READ:
21220 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
21230 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
21240 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
21250 CHANGE_FLG=0
21260 RETURN 
21270 ! 3200 - Review record for changes before WRITE
21280 REVIEW_WRITE:
21290 _CHG1$="",_CHG2$=""
21300 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
21310 GOSUB DETERMINE_CHGS
21320 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
21330 IF _CHG1$="" THEN GOTO CHK2
21340 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
21350 IF _YESNO$="NO" THEN GOTO *RETURN
21360 IF _CHG2$="" THEN GOTO WRT
21370 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
21380 GOSUB INCORPORATE_CHGS
21390 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
21400 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
21410 GOSUB NUM_TO_STR
21420 REFRESH_FLG=1
21430 RETURN 
21440 WRITE_ERROR:
21450 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
21460 RETURN 
21470 ! 3500 - Display a record
21480 DISP_REC:
21490 GOSUB NUM_TO_STR
21500 REFRESH_FLG=1
21510 RETURN 
21520 ! 3600 - Busy Record display
21530 BUSY_CHK:
21540 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
21550 IF _D$="NO" THEN EXIT 
21560 RETURN 
21570 ! 3790 - See if changes are to be written
21580 CHECK_CHANGES:
21590 IF _FIRST_KEY=0 THEN _FIRST_KEY=ERROR_CODE.CTL,_FIRST_FIELD=DESC_1.CTL
21600 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
21610 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
21620 IF _YESNO$="YES" THEN GOTO WRITE_REC
21630 CHANGE_FLG=0
21640 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
21650 RETURN 
21660 ! 4000 - Get the current key segment number
21670 GET_CURKEY:
21680 FOR _CURKEY=1 TO _NUMKEYS
21690 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
21700 NEXT _CURKEY
21710 RETURN 
21720 ! 9000 - Retrieve messages from the *msglib.xxx library
21730 SETUP_MESSAGES:
21740 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
21750 _MSG_DIRECTORY$=MSG("DIRECTORY")
21760 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
21770 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
21780 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
21790 _MSG_MANDATORY$=MSG("MANDATORY")
21800 _MSG_NEXT$=MSG("NEXT")
21810 _MSG_NON_NUMER$=MSG("NON_NUMER")
21820 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
21830 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
21840 _MSG_PRECEDING$=MSG("PRECEDING")
21850 _MSG_PREFIX$=MSG("PREFIX")
21860 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
21870 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
21880 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
21890 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
21900 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
21910 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
21920 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
21930 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
21940 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
21950 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
21960 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
21970 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
21980 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
21990 _MSG_START_FILE$=MSG("START_FILE")
22000 _MSG_UPDATE$=MSG("UPDATE")
22010 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
22020 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
22030 _MSG_UPD_SAME$=MSG("UPD_SAME")
22040 _MSG_WARNING$=MSG("WARNING")
22050 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
22060 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
22070 RETURN 
30000 ! 10000 - Convert numeric values to string
30010 NUM_TO_STR:
30020 RETURN 
31000 ! 11000 - Convert numeric strings to number
31010 STR_TO_NUM:
31020 RETURN 
31030 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
31040 NEXT_ID=_X
31050 EXIT 
32000 ! 12000 - Check if the required fields have data
32010 CHECK_REQD_FLDS:
32020 _W_FLG=1
32030 RETURN 
33000 ! 13000 - Clear the record fields
33010 CLEAR_FIELDS:
33020 IF _CLR_FLG$="R" THEN ERROR_CODE$=""
33030 DESC_1$=""
33040 DESC_2$=""
33050 ERROR_TYPE$=""
33060 OS3_UNUSED_1$=""
33070 GOSUB NUM_TO_STR
33080 REFRESH_FLG=1
33090 RETURN 
34000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
34010 ENABLE_GROUPS:
34030 CALL "*wingrp;Disable",BUTTONS.GRP$
34040 CALL "*wingrp;Enable",FIELDS.GRP$
34050 RETURN 
35000 ! 15000 - Determine the changes that have been made before writing
35010 DETERMINE_CHGS:
35020 DIM _CHG_VAR$(5,"N")
35030 IF _ORIG.ERROR_CODE$=_CUR.ERROR_CODE$ OR ERROR_CODE$=_CUR.ERROR_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ERROR_CODE$=ERROR_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ERROR_CODE")+" = "+_CUR.ERROR_CODE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ERROR_CODE")+" = "+_CUR.ERROR_CODE$
35040 IF _ORIG.DESC_1$=_CUR.DESC_1$ OR DESC_1$=_CUR.DESC_1$ THEN GOTO *NEXT ELSE IF _ORIG.DESC_1$=DESC_1$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC")+" = "+_CUR.DESC_1$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC")+" = "+_CUR.DESC_1$
35050 IF _ORIG.DESC_2$=_CUR.DESC_2$ OR DESC_2$=_CUR.DESC_2$ THEN GOTO *NEXT ELSE IF _ORIG.DESC_2$=DESC_2$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC")+" = "+_CUR.DESC_2$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC")+" = "+_CUR.DESC_2$
35060 IF _ORIG.ERROR_TYPE$=_CUR.ERROR_TYPE$ OR ERROR_TYPE$=_CUR.ERROR_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.ERROR_TYPE$=ERROR_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("ERR_TYPE")+" = "+_CUR.ERROR_TYPE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ERR_TYPE")+" = "+_CUR.ERROR_TYPE$
35070 IF _ORIG.OS3_UNUSED_1$=_CUR.OS3_UNUSED_1$ OR OS3_UNUSED_1$=_CUR.OS3_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.OS3_UNUSED_1$=OS3_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.OS3_UNUSED_1$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.OS3_UNUSED_1$
35080 RETURN 
36000 ! 16000 - Incorporate changes made by another user into the record
36010 INCORPORATE_CHGS:
36020 IF _CHG_VAR$(1,1)="Y" THEN ERROR_CODE$=_CUR.ERROR_CODE$
36030 IF _CHG_VAR$(2,1)="Y" THEN DESC_1$=_CUR.DESC_1$
36040 IF _CHG_VAR$(3,1)="Y" THEN DESC_2$=_CUR.DESC_2$
36050 IF _CHG_VAR$(4,1)="Y" THEN ERROR_TYPE$=_CUR.ERROR_TYPE$
36060 IF _CHG_VAR$(5,1)="Y" THEN OS3_UNUSED_1$=_CUR.OS3_UNUSED_1$
36070 RETURN 
36100 PROCEED:
36110 PRINT 'DIALOGUE'(0,15,70,5,203,OPT="ch^&")
36115 PRINT (0,ERR=*NEXT)"Now Processing Files..."
36150 Q1$="G"
36160 GOTO 0600
36170 PROCEED_END:
36175 CALL "ZZGMSG","D","",""
36180 OSGRAA_PO$=STR(PO:"#####0"),OSGRAA_OSI$=STR(OSI:"#####0"),OSGRAA_INV$=STR(INV:"#####0"),OSGRAA_TOT_REC$=STR(TOT_REC:"#####0")
36185 GOSUB ENABLE_GROUPS
36190 RETURN 
36200 STATUS:
36210 Q1$="G"
36220 CALL "ED2ORI",X3$,X4$,Q0$,Q1$
36280 CMD_STR$="END"
36290 RETURN 
36300 CALL_PO:
36310 Q1$="G"
36320 CALL "ED2POI",X3$,X4$,Q0$,Q1$
36380 CMD_STR$="END"
36390 RETURN 
36400 CALL_INV:
36410 Q1$="G"
36420 CALL "ED2IN5",X3$,X4$,Q0$,Q1$
36480 CMD_STR$="END"
36490 RETURN 
36500 CALL_ALL:
36510 Q1$="G"
36520 CALL "ED2POI",X3$,X4$,Q0$,Q1$
36540 Q1$="G"; CALL "ED2ORI",X3$,X4$,Q0$,Q1$
36550 Q1$="G"; CALL "ED2IN5",X3$,X4$,Q0$,Q1$
36580 CMD_STR$="END"
36590 RETURN 
