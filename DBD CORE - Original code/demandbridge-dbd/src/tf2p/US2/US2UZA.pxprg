0010 REM "<US2UZA> Import Product Catalog Gateway (UNITED STATIONER'S)
0012 ESCAPE ; REM " ***** DON'T RUN
0014 RUN "ZMENU"
0020 SETESC 9300; SETERR 9000
0035 REM "5.0 - 02/19/02 - 11.488333 - dmm - SSP# 146139
0040 REM "Copyright 2002 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0094 REM "Copied from FC2UAA--FMS count entry gateway,5/21/97
0095 REM "Called from FO2RAS Q0$="", Q1$="*"
0096 REM "Called from FO2GST Q1$="G"
0100 SETERR 9000
0110 X0$="PC2UAA",X1$="Import Product Catalog Gateway"
0120 DIM Z0$(80,"-")
0130 K0=20,K1=1
0135 C9=-1
0140 L0=737; REM "Record should be 737 long, for version 1.00, will adjust at 1140 if another version
0145 M0$="000"
0150 COUNT=0; REM "Req count to send back to ghost task
0160 BAD_REC_COUNT=0; REM "Count of records not processed, see 7800's
0170 NEW_COUNT=0; REM "Count of new records set up, see 7900's
0180 UPDATE_COUNT=0; REM "Count of records updated
0200 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0300 REM "IOLISTS
0310 IOLIST IC0$,IC0[0],IC0[1],IC0[2],IC0[3],IC0[4],IC0[5],IC0[6],IC0[7],IC0[8],IC0[9],IC0[10],IC0[11],IC0[12],IC0[13],IC0[14],IC0[15],IC0[16],IC0[17],IC0[18],IC0[19],IC0[20],IC0[21],IC0[22],IC0[23],IC0[24],IC0[25],IC0[26],IC0[27],IC0[28],IC0[29],IC0[30],IC0[31],IC0[32],IC0[33],IC0[34],IC0[35],IC0[36],IC0[37],IC0[38],IC0[39],IC0[40]
0320 IOLIST IC2$,IC2[0],IC2[1],IC2[2],IC2[3],IC2[4],IC2[5],IC2[6],IC2[7],IC2[8],IC2[9],IC2[10],IC2[11],IC2[12],IC2[13],IC2[14],IC2[15],IC2[16]
0330 IOLIST IC1$,IC1[0],IC1[1],IC1[2],IC1[3],IC1[4],IC1[5],IC1[6],IC1[7],IC1[8],IC1[9],IC1[10],IC1[11],IC1[12],IC1[13],IC1[14],IC1[15],IC1[16],IC1[17],IC1[18],IC1[19],IC1[20]
0331 IOLIST IC1$,IC1[0],STR(IC1[1]),STR(IC1[2]),IC1[3],IC1[4],IC1[5],IC1[6],IC1[7],IC1[8],IC1[9],IC1[10],IC1[11],IC1[12],IC1[13],IC1[14],IC1[15],IC1[16],IC1[17],IC1[18],IC1[19],IC1[20]
0340 IOLIST AR1$,AR1[0],AR1[1],AR1[2],AR1[3],AR1[4],AR1[5],AR1[6],AR1[7],AR1[8],AR1[9],AR1[10],AR1[11],AR1[12],AR1[13],AR1[14],AR1[15]
0350 IOLIST FM8$
0360 IOLIST FM4$,FM4_OBS$,FM4[0],FM4[1],FM4[2],FM4[3],FM4[4],FM4[5],FM4[6],FM4[7],FM4[8],FM4[9],FM4[10],FM4[11],FM4[12],FM4[13],FM4[14],FM4[15]
0370 IOLIST LAST_UM$,LAST_UM[0],LAST_UM[1]
0380 IOLIST COUNT1_UM$,COUNT1_UM[0],COUNT1_UM[1]
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0509 REM "Slot 1 used for import file opened in 1000's
0510 Z$="02O IC0... 03O AP4... 04O FM0... 05O FMP... 06O IC2... 07O IC4... 08O IC5...  09O ICD...  10O IC1...  11O IC6...  13O ZZPARM "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0600 REM "
0605 IF Q1$<>"G" THEN GOSUB 6000
0610 FIND (Z[13],KEY=X3$(9,3)+"I/C")P0$
0615 DIM M5[1]; M5$="###,###.00 ",M5[0]=621,M5[1]=2; IF P0$(45,1)>"2" THEN DIM M5$(11,"0"); M5[1]=NUM(P0$(45,1)),M5$(1,10-M5[1])="##########",M5$(POS("0"=M5$),1)=".",M5[0]=(10-M5[1])*100+M5[1]*10
0640 IF Q1$="" THEN CALL "ZZPROM",".Y",X3$,Z,"Proceed?","","",0; ON Z GOTO 0641,9900
1000 REM "Get list of PC1 files to process
1010 CALL "ZZ2BLS","D0:PC1*","S",F$
1012 IF X3$(77,1)="U" THEN CALL "ZZ2BLS","D0:pc1*","S",F_LOWER$; F$=F$+F_LOWER$
1015 P=POS(":"=F$); IF P=0 THEN GOTO 5000
1020 F1$=F$(P+1); P1=POS(":"=F1$); IF P1>0 THEN F$=F1$(P1-2),F1$=F1$(1,P1-3) ELSE F$=""
1050 Z$="01CU 01O "+F1$+" "
1055 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 1056,1995
1060 CLOSE (Z[1]); OPEN LOCK (Z[1],OPT="TEXT")F1$; REM "Open for reading raw file
1065 CLOSE (13); OPEN (13)"ZZPARM"; REM "Re-open ZZPARM closed in ZZ2BLS
1075 IF Q1$<>"G" THEN PRINT @(15,15),'CE',"Processing: "+F1$,
1080 IF Q1$<>"G" THEN GOSUB 8100; GOSUB 8150
1100 REM "Process the file
1105 I9=0,PC1$="",REC_COUNT$=""; DIM REC_COUNT[50]
1110 READ (Z[1],END=7750)PC1$; I9=I9+1,COUNT=COUNT+1,L2=0,S1$="0"; REM "S1$ is status code
1115 P=POS(PC1$(1,3)=REC_COUNT$,3); IF P=0 THEN REC_COUNT$=REC_COUNT$+PC1$(1,3); GOTO 1115; REM "Used to write to /usr/lib/pvx/GW_LOG
1120 P1=(P+2)/3; REC_COUNT[P1]=REC_COUNT[P1]+1
1125 IF Q1$<>"G" THEN IF MOD(I9,T0)=1 THEN GOSUB 8150
1130 REM PRINT @(0,3),'CE',@(0,4),PC1$; INPUT *
1140 REM "IF PC1$(4,3)="101" THEN LET L0=310; REM "HEADER OF VERSION 1.01 FILE IS 310 LONG
1145 IF LEN(PC1$)<L0 THEN I9$=PC1$; DIM PC1$(L0); PC1$(1)=I9$,REASON$="Record is short"; GOSUB BAD_RECORD; GOTO 1110; REM "Short record, don't process
1150 IF STP(PC1$(7,20),3," ")="" THEN REASON$="Item code is blank"; GOSUB BAD_RECORD; GOTO 1110
1160 DIM IC0$(187),IC0[40]; EXTRACT (Z[2],KEY=PC1$(7,20),DOM=1161)IOL=0310; GOSUB UPDATE_RECORD; GOTO 1110; REM "Existing item, update information
1165 GOSUB NEW_RECORD; GOTO 1110; REM "Not found, create new item
1900 REM "End of file
1901 REM "Close & Rename to PC4 for archiving. Erase an existing PC4 file, if same name
1905 Z$="01CU"+F1$+" "
1906 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
1910 F2$=F1$; IF F2$ LIKE "[Pp][Cc]1*" THEN F2$(1,3)="PC4" ELSE GOTO 1995
1919 REM "Get disk DIRectory of data files
1925 J$=%DATAPATH$
1930 REM "Move the file
1935 ERASE J$+DLM+F2$,ERR=*PROCEED; RENAME J$+DLM+F1$ TO J$+DLM+F2$
1995 GOTO 1015
2000 NEW_RECORD:REM "Create a new IC0 record
2015 IC0$(1,20)=PC1$(7,20)
2025 IC0$(61,3)=PC1$(67,3)
2027 IF STP(IC0$(61,3),3," ")="" THEN REASON$="New item, product code is blank"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2030 READ (Z[5],KEY="T"+IC0$(61,3),DOM=2031); GOTO 2035
2031 REASON$="New item, product code is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2035 IC0$(82,10)=PC1$(88,10)
2037 IF STP(IC0$(82,10),3," ")="" THEN REASON$="New item, primary vendor code is blank"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2040 READ (Z[3],KEY=IC0$(82,10),DOM=2041); GOTO 2045
2041 REASON$="New item, primary vendor code is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2045 IC0$(92,4)=PC1$(98,4)
2047 IF POS(" "<>IC0$(92,4))>0 THEN READ (Z[4],KEY="P"+IC0$(82,14),DOM=2048); GOTO 2050 ELSE GOTO 2050
2048 REASON$="New item, plant code is not valid for primary vendor"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2050 IC0$(108,1)="A"; REM "Status flag
2052 IF POS(" "<>PC1$(115,3))>0 THEN READ (Z[5],KEY="I"+PC1$(115,3),DOM=2053); IC0$(109,3)=PC1$(115,3); GOTO 2055 ELSE GOTO 2055; REM "Item price class, was on line 2325, this is a validated field
2053 REASON$="New item, item price class is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2055 IC0$(124,4)=PC1$(130,4)
2057 IF STP(IC0$(124,4),3," ")="" THEN REASON$="New item, unit of measure is blank"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2060 READ (Z[13],KEY="U/M"+IC0$(124,4),DOM=2061); GOTO 2065
2061 REASON$="New item, unit of measure is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2065 IF STP(PC1$(126,4),3," ")="" THEN IC0$(120,4)=IC0$(124,4) ELSE IC0$(120,4)=PC1$(126,4)
2067 READ (Z[13],KEY="U/M"+IC0$(120,4),DOM=2068); GOTO 2070
2068 REASON$="New item, unit of measure is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2070 IF STP(PC1$(344,10),3," ")="" THEN REASON$="New item, quantity per unit is blank"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2072 IC0[15]=NUM(PC1$(344,10),ERR=2073); GOTO 2075
2073 REASON$="New item, quantity per unit is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2075 IF STP(PC1$(334,10),3," ")="" THEN IC0[14]=IC0[15]; GOTO 2078 ELSE IC0[14]=NUM(PC1$(334,10),ERR=2076); GOTO 2078
2076 REASON$="New item, quantity per unit is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2078 IC0[19]=IC0[15]; REM "Carton pack
2080 GOSUB IC0_FIELDS; NEW_COUNT=NEW_COUNT+1
2082 DIM IC2$(65),IC2[16]
2085 IF STP(PC1$(524,10),3," ")="" THEN GOTO NEW_RECORD_END ELSE READ (Z[3],KEY=PC1$(524,10),DOM=2086); IC2$(1,20)=IC0$(1,20),IC2$(21,10)=PC1$(524,10); GOTO 2087
2086 REASON$="New supplier pricing, vendor not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2088 IF POS(" "<>PC1$(534,4))>0 THEN READ (Z[4],KEY="P"+IC2$(21,10)+PC1$(534,4),DOM=2089); IC2$(31,4)=PC1$(534,4); GOTO 2090 ELSE GOTO 2090
2089 REASON$="New supplier pricing, plant not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2090 IC2$(35,20)=PC1$(538,20); REM "Supplier item number
2092 IF STP(PC1$(558,4),3," ")="" THEN REASON$="New supplier pricing, U/M is blank"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2093 READ (Z[13],KEY="U/M"+PC1$(558,4),DOM=2094); IC2$(55,4)=PC1$(558,4); GOTO 2095
2094 REASON$="New supplier pricing, U/M is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2095 IC2[14]=NUM(PC1$(708,10),ERR=2096); IC2[16]=IC2[14]; GOTO 2097
2096 REASON$="New supplier pricing, qty/unit is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2097 GOSUB IC2_FIELDS
2099 NEW_RECORD_END:RETURN 
2100 UPDATE_RECORD:REM "Update an existing IC0 record
2105 IF IC0$(108,1)="I" THEN GOTO UPDATE_RECORD_END; REM "Marked as inactive, don't update
2110 A2$=IC0$(61,3)+IC0$(1,20),A3$=IC0$(82,14)+IC0$(61,3)+IC0$(1,20),A4$=IC0$(61,3),O1=IC0[15]; REM "IC5 & IC4 sort records may need to be removed, also IC6, similar to 6700's and 7400's in IC2MAB, also IC1, similar to 3400's and 7700's in IC2MAB
2115 IF POS(" "<>PC1$(67,3))>0 AND PC1$(67,3)<>IC0$(61,3) THEN READ (Z[5],KEY="T"+PC1$(67,3),DOM=2116); IC0$(61,3)=PC1$(67,3); GOTO 2120 ELSE GOTO 2120
2116 REASON$="Update, product code is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2120 IF POS(" "<>PC1$(88,10))>0 AND PC1$(88,10)<>IC0$(82,10) THEN READ (Z[3],KEY=PC1$(88,10),DOM=2121); IC0$(82,10)=PC1$(88,10); GOTO 2125 ELSE GOTO 2125
2121 REASON$="Update, primary vendor code is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2125 IF POS(" "<>PC1$(98,4))>0 AND PC1$(98,4)<>IC0$(92,4) THEN READ (Z[4],KEY="P"+IC0$(82,10)+PC1$(98,4),DOM=2126); IC0$(92,4)=PC1$(98,4); GOTO 2127 ELSE GOTO 2127
2126 REASON$="Update, plant for primary vendor code is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2127 IF POS(" "<>PC1$(115,3))>0 AND PC1$(115,3)<>IC0$(109,3) THEN READ (Z[5],KEY="I"+PC1$(115,3),DOM=2128); IC0$(109,3)=PC1$(115,3); GOTO 2130 ELSE GOTO 2130
2128 REASON$="Update, item price class is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2130 IF POS(" "<>PC1$(130,4))>0 AND PC1$(130,4)<>IC0$(124,4) THEN READ (Z[13],KEY="U/M"+PC1$(130,4),DOM=2131); IC0$(124,4)=PC1$(130,4); GOTO 2135 ELSE GOTO 2135
2131 REASON$="Update, unit of measure is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2135 IF POS(" "<>PC1$(126,4))>0 AND PC1$(126,4)<>IC0$(120,4) THEN READ (Z[13],KEY="U/M"+PC1$(126,4),DOM=2136); IC0$(120,4)=PC1$(126,4); GOTO 2140 ELSE GOTO 2140
2136 REASON$="Update, unit of measure is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2140 IF POS(" "<>PC1$(344,10))>0 AND IC0[15]<>NUM(PC1$(344,10),ERR=2141) THEN IC0[15]=NUM(PC1$(344,10)); GOTO 2145 ELSE GOTO 2145
2141 REASON$="Update, quantity per unit is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2145 IF POS(" "<>PC1$(334,10))>0 AND IC0[14]<>NUM(PC1$(334,10),ERR=2146) THEN IC0[14]=NUM(PC1$(334,10)); GOTO 2150 ELSE GOTO 2150
2146 REASON$="Update, quantity per unit is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2150 GOSUB IC0_FIELDS; UPDATE_COUNT=UPDATE_COUNT+1
2152 IF IC0$(61,3)+IC0$(1,20)<>A2$ THEN REMOVE (Z[8],KEY=A2$,DOM=2153)
2154 IF IC0$(82,14)+IC0$(61,3)+IC0$(1,20)<>A3$ THEN REMOVE (Z[7],KEY=A3$,DOM=2155)
2155 IF IC0$(61,3)<>A4$ THEN GOSUB 7400; REM "Go thru IC1, change IC6 sort
2157 IF IC0[15]<>O1 THEN GOSUB 7600; REM "Qty per unit changed, change costs
2160 IF STP(PC1$(524,10),3," ")="" THEN GOTO UPDATE_RECORD_END; REM "Vendor for pricing is blank, all done
2161 DIM IC2$(65),IC2[16]
2162 READ (Z[3],KEY=PC1$(524,10),DOM=2163); IC2$(1,30)=IC0$(1,20)+PC1$(524,10); GOTO 2165
2163 REASON$="Update supplier, vendor code is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2165 IF POS(" "<>PC1$(534,4))>0 THEN READ (Z[4],KEY="P"+IC2$(21,10)+PC1$(534,4),DOM=2166); IC2$(31,4)=PC1$(534,4); GOTO 2168 ELSE GOTO 2168
2166 REASON$="Update supplier, plant code is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2168 READ (Z[6],KEY=IC2$(1,34),DOM=2169)IOL=0320; IF PC1$(538,20)<>IC2$(35,20) THEN REMOVE (Z[9],KEY=IC2$(21,34)+IC2$(1,20),DOM=2169)
2170 IC2$(35,20)=PC1$(538,20)
2173 IF POS(" "<>PC1$(558,4))>0 THEN READ (Z[13],KEY="U/M"+PC1$(558,4),DOM=2174); IC2$(55,4)=PC1$(558,4); GOTO 2175 ELSE GOTO 2175
2174 REASON$="Update supplier, unit of measure is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2175 IF POS(" "<>PC1$(708,10))>0 THEN IC2[14]=NUM(PC1$(708,10),ERR=2176); GOTO 2180 ELSE GOTO 2180
2176 REASON$="Update supplier, qty per unit is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2180 GOSUB IC2_FIELDS
2195 UPDATE_RECORD_END:RETURN 
2300 IC0_FIELDS:REM "Set remaining IC0 fields if not blank for both new and updated items, write IC0, IC5, and IC4 files
2310 IF POS(" "<>PC1$(27,40))>0 THEN IC0$(21,40)=PC1$(27,40); REM "Description
2312 IF POS(" "<>PC1$(70,8))>0 THEN IC0$(64,8)=PC1$(70,8); REM "L/R dimensions
2315 IF POS(" "<>PC1$(78,8))>0 THEN IC0$(72,8)=PC1$(78,8); REM "T/B dimensions
2317 IF POS(" "<>PC1$(86,2))>0 THEN IC0$(80,2)=PC1$(86,2); REM "Plys
2320 IF POS(" "<>PC1$(102,6))>0 THEN IC0$(96,6)=PC1$(102,6); REM "Last sold
2322 IF POS(" "<>PC1$(108,6))>0 THEN IC0$(102,6)=PC1$(108,6); REM "Last purchased
2325 REM IF POS(" "<>PC1$(115,3))>0 THEN LET IC0$(109,3)=PC1$(115,3); REM " Item price class, moved to lines 2052,2053,2127,2128, needs to be validated
2327 IF POS(" "<>PC1$(118,1))>0 THEN IF P0$(44,1)="Y" THEN IF PC1$(118,1)="Y" OR PC1$(118,1)="N" THEN IC0$(112,1)=PC1$(118,1); REM "Lot inventory?
2330 IF POS(" "<>PC1$(119,3))>0 THEN IF P0$(50,1)="Y" THEN IC0$(113,3)=PC1$(119,3); REM "Quantity break price group
2332 IF POS(" "<>PC1$(122,1))>0 THEN IF PC1$(122,1)="Y" OR PC1$(122,1)="N" THEN IC0$(116,1)=PC1$(122,1); REM "Secure item?
2340 IF POS(" "<>PC1$(134,40))>0 THEN IF P0$(47,1)="Y" THEN IC0$(128,40)=PC1$(134,40); REM "Second description line
2342 IF POS(" "<>PC1$(174,10))>0 THEN IF P0$(46,1)="Y" THEN IC0$(168,10)=PC1$(174,10); REM "Item group
2345 IF POS(" "<>PC1$(184,10))>0 THEN IF P0$(46,1)="Y" THEN IF POS(" "<>IC0$(168,10))>0 THEN IC0$(178,10)=PC1$(184,10); REM "Pricing features
2347 IF POS(" "<>PC1$(194,10))>0 THEN IC0[0]=NUM(PC1$(194,10),ERR=2348); REM "Base price
2350 IF POS(" "<>PC1$(204,10))>0 THEN IC0[1]=NUM(PC1$(204,10),ERR=2351); REM "Quantity 1 break
2352 IF POS(" "<>PC1$(214,10))>0 THEN IC0[2]=NUM(PC1$(214,10),ERR=2353); REM "Quantity 1 price
2355 IF POS(" "<>PC1$(224,10))>0 THEN IC0[3]=NUM(PC1$(224,10),ERR=2356); REM "Quantity 2 break
2357 IF POS(" "<>PC1$(234,10))>0 THEN IC0[4]=NUM(PC1$(234,10),ERR=2358); REM "Quantity 2 price
2360 IF POS(" "<>PC1$(244,10))>0 THEN IC0[5]=NUM(PC1$(244,10),ERR=2361); REM "Quantity 3 break
2362 IF POS(" "<>PC1$(254,10))>0 THEN IC0[6]=NUM(PC1$(254,10),ERR=2363); REM "Quantity 3 price
2365 IF POS(" "<>PC1$(264,10))>0 THEN IC0[7]=NUM(PC1$(264,10),ERR=2366); REM "Quantity 4 break
2367 IF POS(" "<>PC1$(274,10))>0 THEN IC0[8]=NUM(PC1$(274,10),ERR=2368); REM "Quantity 4 price
2370 IF POS(" "<>PC1$(284,10))>0 THEN IC0[9]=NUM(PC1$(284,10),ERR=2371); REM "Quantity 5 break
2372 IF POS(" "<>PC1$(294,10))>0 THEN IC0[10]=NUM(PC1$(294,10),ERR=2373); REM "Quantity 5 price
2375 IF POS(" "<>PC1$(304,10))>0 THEN IC0[11]=NUM(PC1$(304,10),ERR=2376); REM "Quantity 6 break
2377 IF POS(" "<>PC1$(314,10))>0 THEN IC0[12]=NUM(PC1$(314,10),ERR=2378); REM "Quantity 6 price
2380 IF POS(" "<>PC1$(324,10))>0 THEN IC0[13]=NUM(PC1$(324,10),ERR=2381); REM "Avg sales price for F/M
2382 IF POS(" "<>PC1$(354,10))>0 THEN IC0[16]=NUM(PC1$(354,10),ERR=2383); REM "Carton weight
2385 IF POS(" "<>PC1$(364,10))>0 THEN IC0[17]=NUM(PC1$(364,10),ERR=2386); REM "Last purchase cost
2387 IF POS(" "<>PC1$(374,10))>0 THEN IC0[18]=NUM(PC1$(374,10),ERR=2388); REM "Average cost
2390 IF POS(" "<>PC1$(384,10))>0 THEN IC0[19]=NUM(PC1$(384,10),ERR=2391); REM "Carton pack
2392 IF POS(" "<>PC1$(394,10))>0 THEN IC0[20]=NUM(PC1$(394,10),ERR=2393); REM "Salesperson unit ocst
2395 IF POS(" "<>PC1$(404,10))>0 THEN IC0[21]=NUM(PC1$(404,10),ERR=2396); REM "Quantity 7 break
2400 IF POS(" "<>PC1$(414,10))>0 THEN IC0[22]=NUM(PC1$(414,10),ERR=2401); REM "Quantity 7 price
2402 IF POS(" "<>PC1$(424,10))>0 THEN IC0[23]=NUM(PC1$(424,10),ERR=2403); REM "Quantity 8 break
2405 IF POS(" "<>PC1$(434,10))>0 THEN IC0[24]=NUM(PC1$(434,10),ERR=2406); REM "Quantity 8 price
2407 IF POS(" "<>PC1$(444,10))>0 THEN IC0[25]=NUM(PC1$(444,10),ERR=2408); REM "Quantity 9 break
2410 IF POS(" "<>PC1$(454,10))>0 THEN IC0[26]=NUM(PC1$(454,10),ERR=2411); REM "Quantity 9 price
2412 IF POS(" "<>PC1$(464,10))>0 THEN IC0[27]=NUM(PC1$(464,10),ERR=2413); REM "Quantity 10 break
2415 IF POS(" "<>PC1$(474,10))>0 THEN IC0[28]=NUM(PC1$(474,10),ERR=2416); REM "Quantity 10 price
2417 IF POS(" "<>PC1$(484,10))>0 THEN IC0[29]=NUM(PC1$(484,10),ERR=2418); REM "Quantity 11 break
2420 IF POS(" "<>PC1$(494,10))>0 THEN IC0[30]=NUM(PC1$(494,10),ERR=2421); REM "Quantity 11 price
2422 IF POS(" "<>PC1$(504,10))>0 THEN IC0[31]=NUM(PC1$(504,10),ERR=2423); REM "Quantity 12 break
2425 IF POS(" "<>PC1$(514,10))>0 THEN IC0[32]=NUM(PC1$(514,10),ERR=2426); REM "Quantity 12 price
2475 WRITE (Z[2],KEY=IC0$(1,20))IOL=0310
2480 WRITE (Z[8],KEY=IC0$(61,3)+IC0$(1,20)); REM "IC5, items by product code sort
2485 WRITE (Z[7],KEY=IC0$(82,10)+IC0$(92,4)+IC0$(61,3)+IC0$(1,20)); REM "IC4, item sort by vendor, product code
2495 IC0_FIELDS_END:RETURN 
2500 IC2_FIELDS:REM "Set remaining IC2 fields if not blank for both new and updated items, write out IC2 & ICD files
2510 IF POS(" "<>PC1$(562,6))>0 THEN IC2$(59,6)=PC1$(562,6); REM "Date last purchased
2512 IF POS(" "<>PC1$(568,10))>0 THEN IC2[0]=NUM(PC1$(568,10),ERR=2513); REM "Base cost
2515 IF POS(" "<>PC1$(578,10))>0 THEN IC2[1]=NUM(PC1$(578,10),ERR=2516); REM "Quantity 1 break
2517 IF POS(" "<>PC1$(588,10))>0 THEN IC2[2]=NUM(PC1$(588,10),ERR=2518); REM "Quantity 1 cost
2520 IF POS(" "<>PC1$(598,10))>0 THEN IC2[3]=NUM(PC1$(598,10),ERR=2521); REM "Quantity 2 break
2522 IF POS(" "<>PC1$(608,10))>0 THEN IC2[4]=NUM(PC1$(608,10),ERR=2523); REM "Quantity 2 cost
2525 IF POS(" "<>PC1$(618,10))>0 THEN IC2[5]=NUM(PC1$(618,10),ERR=2526); REM "Quantity 3 break
2527 IF POS(" "<>PC1$(628,10))>0 THEN IC2[6]=NUM(PC1$(628,10),ERR=2528); REM "Quantity 3 cost
2530 IF POS(" "<>PC1$(638,10))>0 THEN IC2[7]=NUM(PC1$(638,10),ERR=2531); REM "Quantity 4 break
2532 IF POS(" "<>PC1$(648,10))>0 THEN IC2[8]=NUM(PC1$(648,10),ERR=2533); REM "Quantity 4 cost
2535 IF POS(" "<>PC1$(658,10))>0 THEN IC2[9]=NUM(PC1$(658,10),ERR=2536); REM "Quantity 5 break
2537 IF POS(" "<>PC1$(668,10))>0 THEN IC2[10]=NUM(PC1$(668,10),ERR=2538); REM "Quantity 5 cost
2540 IF POS(" "<>PC1$(678,10))>0 THEN IC2[11]=NUM(PC1$(678,10),ERR=2541); REM "Quantity 6 break
2542 IF POS(" "<>PC1$(688,10))>0 THEN IC2[12]=NUM(PC1$(688,10),ERR=2543); REM "Quantity 6 cost
2545 IF POS(" "<>PC1$(698,10))>0 THEN IC2[13]=NUM(PC1$(698,10),ERR=2546); REM "Last cost
2547 IF POS(" "<>PC1$(718,10))>0 THEN IC2[15]=NUM(PC1$(718,10),ERR=2548); REM "Carton weight
2550 IF POS(" "<>PC1$(728,10))>0 THEN IC2[16]=NUM(PC1$(728,10),ERR=2551); REM "Carton pack
2580 WRITE (Z[6],KEY=IC2$(1,34))IOL=0320
2585 WRITE (Z[9],KEY=IC2$(21,34)+IC2$(1,20)); REM "ICD, Supplier item number sort
2595 IC2_FIELDS_END:RETURN 
5000 REM "EOJ
5010 END_MESSAGE$=FN%CDS$+", "+STR(COUNT:"0000")+" records processed"
5020 GOSUB SYSTEM_CALL
5040 IF NEW_COUNT<>0 THEN END_MESSAGE$=STR(NEW_COUNT:"0000")+" new records were added to IC0 file"; GOSUB SYSTEM_CALL
5045 IF UPDATE_COUNT<>0 THEN END_MESSAGE$=STR(UPDATE_COUNT:"0000")+" IC0 records were updated"; GOSUB SYSTEM_CALL
5050 IF BAD_REC_COUNT<>0 THEN END_MESSAGE$=STR(BAD_REC_COUNT:"0000")+" records were not processed"; GOSUB SYSTEM_CALL
5070 IF Q1$<>"G" THEN PRINT @(0,15),'CE',
5080 IF Q1$="" THEN CALL "ZZPROM",".4",X3$,Z,"Process complete!!","","",0
5090 GOTO 9900
5100 SYSTEM_CALL:REM "Write out to FMS Count Entry Gateway Log
5120 SYS_CALL$="echo "+QUO+END_MESSAGE$+QUO+" >> "+HWD+DLM+"GPC_LOG"
5130 INVOKE SYS_CALL$
5140 SYSTEM_CALL_END:RETURN 
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6016)'SB',
6020 PRINT @(10,5),"Importing Product Catalog Gateway Records"
6165 PRINT (0,ERR=6166)'SF',
6190 RETURN 
7400 REM "Product code changed, go through IC1 and change IC6 sort
7410 READ (Z[10],KEY=IC0$(1,20),DOM=7411)
7420 READ (Z[10],END=7450)J$
7425 IF J$(1,20)<>IC0$(1,20) THEN GOTO 7450
7430 REMOVE (Z[11],KEY=J$(21,4)+A4$+J$(1,20),DOM=7431)
7440 WRITE (Z[11],KEY=J$(21,4)+IC0$(61,3)+J$(1,20))
7445 GOTO 7420
7490 RETURN 
7500 REM "Convert date Q$ into D0$
7501 REM "Q$ in YYMMDD format
7505 D0$=""
7506 IF STP(Q$,3," ")="" THEN GOTO 7545
7510 IF LEN(Q$)<6 THEN GOTO 7545 ELSE D1$=Q$(1,2)
7515 IF D1$<"50" THEN D1$="20"+D1$ ELSE D1$="19"+D1$
7520 D0$=CHR(NUM(D1$(1,3),ERR=7521)-125)+D1$(4,1)+Q$(3,2)+Q$(5,2)
7545 RETURN 
7600 REM "Quantity per unit changed, change last/avg costs in IC0 & IC1
7610 IF O1=0 THEN RETURN 
7612 EXTRACT (Z[2],KEY=IC0$(1,20))IOL=0310
7615 PRECISION M5[1]; IC0[17]=IC0[17]*IC0[15]/O1,IC0[18]=IC0[18]*IC0[15]/O1; PRECISION 2
7620 WRITE (Z[2],KEY=IC0$(1,20))IOL=0310
7630 DIM IC1[20]; READ (Z[10],KEY=IC0$(1,20),DOM=7631)
7640 J$=KEY(Z[10],END=7690)
7650 IF IC0$(1,20)<>J$(1,20) THEN GOTO 7690
7660 EXTRACT (Z[10],KEY=J$)IOL=0330
7670 PRECISION M5[1]; IC1[1]=IC1[1]*IC0[15]/O1,IC1[2]=IC1[2]*IC0[15]/O1; PRECISION 2
7680 WRITE (Z[10],KEY=J$)IOL=0331
7685 GOTO 7640
7690 RETURN 
7750 REM "End of file
7754 IF LEN(REC_COUNT$)<=0 THEN GOTO 7795
7755 FOR X=1 TO LEN(REC_COUNT$)-2 STEP 3
7756 S$="GPC|STAT|"+FN%CDS$+"|"+X3$(40,3)+"|"+X3$(9,3)+"|"+FID(0)+"|"+F1$+"|"+REC_COUNT$(X,3)+"|"+STR(REC_COUNT[(X+2)/3]:"0000")
7757 S2$="echo "+QUO+S$+QUO+" >> "+HWD+DLM+"GW_LOG"
7758 INVOKE S2$
7759 NEXT X
7795 GOTO 1900
7800 BAD_RECORD:REM "Write message to GPC_LOG, couldn't process this record
7805 BAD_REC_COUNT=BAD_REC_COUNT+1
7810 MESSAGE$="File: "+F1$+" Reason: "+REASON$
7820 BAD_REC$=PC1$(7,20)+"|"+PC1$(67,3)+"|"+PC1$(88,10)+"|"+PC1$(126,4)+"|"+PC1$(130,4)+"|"+PC1$(344,10)+"|"+PC1$(538,20)
7830 S2$="echo "+QUO+S$+QUO+" >> "+HWD+DLM+"GW_LOG"
7835 INVOKE SYS_CALL$
7840 SYS_CALL$="echo "+QUO+BAD_REC$+QUO+" >> "+HWD+DLM+"GPC_LOG"
7845 INVOKE SYS_CALL$
7890 BAD_RECORD_END:RETURN 
8100 REM "GOSUB here, once, at the beginning, after the background is set and before the Proceed? question. Set T to total # to do (by calling ZZINFO) and T0 to the reporting interval (report every T0 number of records) this is typically 2% of total; This also prints a message (@8115),so adjust accordingly
8107 T=0
8113 CALL "ZZ2FNC;SerialRecCnt",Z[1],T
8115 PRINT @(0,7),"There are "+STR(T)+" records to process"
8130 T0=INT(T*.02); IF T0<=1 THEN T0=2
8135 T1=0
8145 RETURN 
8150 REM "Call this each time to update the bar graph. Display horiz. bar graph given total #, T and current #, C, and time counter T1 (T1 is init'ed here and used here, just don't use it somewhere else)
8155 CALL "ZZBARG",X3$,"HG",19,10,50,T1,T,I9
8195 RETURN 
8910 DEF FNS$(Z9$)=Z9$(1,POS("     "=Z9$+"      ")-1)
9000 REM "ERROR PROCESSING
9001 IF Q1$<>"G" THEN PRINT @(4,15),ERR,"  ",TCB(5); INPUT *
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1150,2040
9900 REM "END PROGRAM
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; IF Q1$="G" THEN Q0$=STR(COUNT) ELSE Q1$=A1$
9935 EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
