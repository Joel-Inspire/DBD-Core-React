0010 REM "Read DBF Files <CA2RDB>
0020 SETESC 9300; SETERR 9000
0035 REM "5.2 - 08/20/03 - 11.819166 - dmm - SSP# 163697
0040 REM "Copyright 2003 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 REM "OPT$, R=return raw record read in R$,G=do not display graph
0055 REM "COMM$, O=open file, R=Read
0060 REM "RET_CODE = 2 means end of file
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,CA0$,CA1${ALL},COMM$,OPT$,MEM${ALL},R$,RET_CODE
0100 SETERR 9000
0110 X0$="CA2RDB",X1$="Read DBF Files"
0120 RET_CODE=0
0200 REM "If MEM$[] not initialized, then init it, ELSE SKIP all initing it has already been done
0205 IF FN%NEA("MEM$",0)=0 THEN DIM MEM$[10] ELSE GOTO 0300
0206 REM "MEM$[] usage
0207 REM "0=file slot of open file, 1=total bytes, 2=bytes processed, 3=start time for ZZBARG, 4=current block of read in data,5=next percent to display at,6=number of items in CA1$[]
0220 DIM CA1$[100]; REM "Start at fifty add fields as needed
0225 GOSUB 8000; REM "Read CA1 records
0295 GOTO 0350; REM "If 1st time then no values to load from MEM$ so don't contaminate any set here, skip load logic
0299 REM "End of initialization logic
0300 REM "Load values from MEM$ array
0310 IN_FILE=NUM(MEM$[0]),TOT_BYTES=NUM(MEM$[1]),BYTES_DONE=NUM(MEM$[2]),T1=NUM(MEM$[3]),NEXT_PERCENT=NUM(MEM$[5]),INDEX=NUM(MEM$[6])
0349 REM "End of loading logic
0900 REM "Process options
0950 ON POS(COMM$="OR") GOTO 9900,1000,1500,9900
1000 REM "Open file and initialize graph
1005 FILE_NAME$=STP(CA0$(5,20),1)
1010 IN_FILE=UNT; OPEN (IN_FILE,ERR=1011,ISZ=512)FILE_NAME$; GOTO 1015
1011 TMP$="Error ["+STR(ERR)+"] on open of file ["+FILE_NAME$+"]! "; CALL "ZZPROM",".4",X3$,TMP$,"","",0; GOTO 9900
1015 TMP$=FN%XFD$(IN_FILE,0); TOT_BYTES=DEC($00$+TMP$(38,4))
1016 REM 'SET CONVERSION PASS TYPE USING CA0$ INFORMATION
1017 IF CA0$(62,1)="I" THEN TMPPREFIX$="**INITIAL PASS!!: " ELSE IF CA0$(62,1)="S" THEN TMPPREFIX$="**SECONDARY SOURCE!!: " ELSE TMPPREFIX$="APPENDING PASS: "
1020 GOSUB 8150; TMP$=TMPPREFIX$+FILE_NAME$+" - "+STP(STR(TOT_BYTES:"###,###,###"),0); PRINT @(35-INT(LEN(TMP$)/2),20),TMP$,
1050 REM "Skip db definition at beginning and leave 1st part of data in MEM$[4] where it will be passed in and out of the routine
1060 READ RECORD (IN_FILE,END=5000)TMP$; TMP$=TMP$(33); REM "fist 32 not needed here
1065 READ RECORD (IN_FILE)X$; TMP$=TMP$+X$; P=POS($0D$=TMP$,32); IF P=0 THEN GOTO 1065 ELSE MEM$[4]=TMP$(P+2); REM "read in until $0D$ in 32nd position then set MEM$[4] starting after that
1095 GOTO 9900
1500 REM "Read next record and update graph if needed
1504 REC_LEN=NUM(CA0$(28,4)),SKIP=0
1505 IF LEN(MEM$[4])<REC_LEN THEN READ RECORD (IN_FILE,END=5000)TMP$; MEM$[4]=MEM$[4]+TMP$; GOTO 1505
1520 RIN$=MEM$[4](1,REC_LEN),BYTES_DONE=BYTES_DONE+REC_LEN,MEM$[4]=MEM$[4](REC_LEN+1)
1525 IF INT(100*BYTES_DONE/TOT_BYTES)>NEXT_PERCENT THEN GOSUB 8150; NEXT_PERCENT=NEXT_PERCENT+2
1545 IF POS("R"=OPT$)<>0 THEN R$=RIN$; GOTO 1590
1550 REM "Decipher record based on CA1$[] info
1552 FOR II=1 TO INDEX; RSTART=NUM(CA1$[II](16,4)),RLEN=NUM(CA1$[II](20,4)),FSTART=NUM(CA1$[II](8,4)),FLEN=NUM(CA1$[II](12,4))
1555 IF FSTART<>0 AND FLEN<>0 AND RSTART<>0 AND RLEN<>0 THEN GOTO LOAD_FIELD ELSE IF RSTART<>0 AND RLEN<>0 THEN GOTO DEFAULT ELSE GOTO SKIP_CONTROL
1556 LOAD_FIELD:
1557 R$(RSTART,RLEN)=RIN$(FSTART,FLEN)
1559 REM 'CK FOR DUPLICATE FIELD LOGIC
1561 IF POS("dup"=CA1$[II](56,30))<>1 THEN GOTO SKIP_CONTROL
1562 DUPS$=STP(CA1$[II](59,27),1)
1564 FOR VV=0 TO LEN(DUPS$)/8-1; RDSTART=NUM(DUPS$(VV*8+1,4)),RDLEN=NUM(DUPS$(VV*8+5,4))
1566 R$(RDSTART,RDLEN)=R$(RSTART,RLEN)
1568 NEXT VV
1569 GOTO SKIP_CONTROL
1570 REM 'SET DEFAULT
1571 DEFAULT:
1572 IF POS("skip"=CA1$[II](56,30))<>0 THEN GOTO SKIP_CONTROL ELSE IF POS("get"=CA1$[II](56,30))<>0 THEN GOTO GET_CONTROL ELSE GOTO 1574
1574 R$(RSTART,RLEN)=CA1$[II](56,RLEN); GOTO NEXTREC
1575 SKIP_CONTROL:
1576 IF POS("skip"=CA1$[II](56,30))<>1 THEN GOTO GET_CONTROL ELSE SSTRING$=STP(CA1$[II](60,26),1),VV=0
1577 IF SSTRING$(VV*FLEN+1,FLEN)=RIN$(FSTART,FLEN) THEN SKIP=1; GOTO NEXTREC
1578 VV=VV+1; IF VV<=LEN(SSTRING$)/FLEN-1 THEN GOTO 1577
1579 GOTO NEXTREC
1580 GET_CONTROL:
1582 IF POS("get"=CA1$[II](56,30))<>1 THEN GOTO NEXTREC ELSE GSTRING$=STP(CA1$[II](59,27),1),VV=0,SKIP=1
1584 IF GSTRING$(VV*FLEN+1,FLEN)=RIN$(FSTART,FLEN) THEN SKIP=0
1586 VV=VV+1; IF VV<=LEN(GSTRING$)/FLEN-1 THEN GOTO 1584
1588 GOTO NEXTREC
1595 NEXTREC:
1596 IF SKIP=1 THEN EXITTO 1500
1599 NEXT II
1600 FIXER$="CA2F"+X3$(9,3); CALL FIXER$,ERR=1601,X3$,X4$,CA0$,R$,SKIP; IF SKIP THEN GOTO 1500
1800 GOTO 9900
5000 REM "End of file, set RET_CODE to 2 then leave
5005 BYTES_DONE=TOT_BYTES; GOSUB 8150
5010 RET_CODE=2; GOTO 9900
8000 REM "Load ca1 values into CA1$ array, in order starting at 1. The field number will not necessarily match the index in the CA1$ array, but should in most cases
8005 F=UNT; OPEN (F,ERR=8006)"CA1"+X3$(9,3); GOTO 8007
8006 OPEN (F,ERR=9000)"CA1"
8010 INDEX=0
8015 READ (F,KEY=CA0$(1,4),DOM=8016)
8020 READ (F,END=8035)CA1$; IF CA1$(1,4)<>CA0$(1,4) THEN GOTO 8035 ELSE INDEX=INDEX+1; IF INDEX=FN%NEA("CA1$",1) THEN CALL "INSERT_ARRAY;STRING",CA1${ALL},1,100; END_IF ; CA1$[INDEX]=PAD(CA1$,200); GOTO 8020
8025 IF INDEX=0 THEN TMP$="No CA1 records found for "+STP(CA0$(1,4),1)+" conversion file type!"; CALL "ZZPROM",".4",X3$,Z,TMP$,"","",0
8045 RETURN 
8150 REM "Call this each time to update the bar graph. Display horiz. bar graph given total #, T and current #, C, and time counter T1 (T1 is init'ed here and used here, just don't use it somewhere else)
8155 CALL "ZZBARG",X3$,"HG",19,10,50,T1,TOT_BYTES,BYTES_DONE
8195 RETURN 
8900 REM '
8910 PRINT @(0,20),'CE','RB',"A fixer program is missing and needs to be created (CA2F"+X3$(9,3)+")",; INPUT (0,LEN=1)*
9000 REM "ERROR PROCESSING
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9900 REM "END PROGRAM
9910 REM "Load values into MEM$ for saving
9915 MEM$[0]=STR(IN_FILE),MEM$[1]=STR(TOT_BYTES),MEM$[2]=STR(BYTES_DONE),MEM$[3]=STR(T1),MEM$[5]=STR(NEXT_PERCENT),MEM$[6]=STR(INDEX)
9930 SETERR 9940; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
