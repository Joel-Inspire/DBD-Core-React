0010 REM "Kit Component Conversion <KT2CNV>
0020 SETESC 9300; SETERR 9000
0035 REM "5.0 - 02/19/02 - 11.484722 - dmm - SSP# 146151
0040 REM "Copyright 2002 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000
0110 X0$="KT2CNV",X1$="Kit Component Conversion",K9$="",K9=0
0120 DIM Z0$(80,"-")
0125 V8$="000811152999"
0130 K0=20,K1=1
0135 C9=-1
0140 M0$="###,###,##0",M2$="###,##0"
0165 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0295 DIM Z0$(80,X3$(235,1)); Z0$=ESC+"BG"+Z0$+ESC+"EG"
0300 REM "IOLISTS
0310 IOLIST A$(1),A[0],A[1],A[2],A[3]
0320 IOLIST B$,B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15],B[16],B[17],B[18],B[19],B[20],B[21],B[22],B[23],B[24],B[25],B[26],B[27],B[28],B[29],B[30],B[31],B[32],B[33],B[34],B[35],B[36],B[37],B[38],B[39],B[40]
0325 IOLIST B1$,B1[0],B1[1],B1[2],B1[3],B1[4],B1[5],B1[6],B1[7],B1[8],B1[9],B1[10],B1[11],B1[12],B1[13],B1[14],B1[15],B1[16],B1[17],B1[18],B1[19],B1[20],B1[21],B1[22],B1[23],B1[24],B1[25],B1[26],B1[27],B1[28],B1[29],B1[30],B1[31],B1[32],B1[33],B1[34],B1[35],B1[36],B1[37],B1[38],B1[39],B1[40]
0370 IOLIST I$,I[0],I[1]
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01X KT0...  02O IC0...  03O FM0...  04O KT3...  10O AR1...  13O ZZPARM  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0530 CLOSE (Z[4]); OPEN LOCK (Z[4],OPT="TEXT")"KT3"; REM "Close and reopen as text file
0550 FIND (Z[13],KEY=X3$(9,3)+"KIT")P1$
0560 FIND (Z[13],KEY=X3$(9,3)+"I/C")P0$
0600 REM "
0615 DIM M5[1]; M5$="###,###.00 ",M5[0]=621,M5[1]=2; IF P0$(45,1)>"2" THEN DIM M5$(11,"0"); M5[1]=NUM(P0$(45,1)),M5$(1,10-M5[1])="##########",M5$(POS("0"=M5$),1)=".",M5[0]=(10-M5[1])*100+M5[1]*10
0620 V1=2
1000 REM "
1010 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,X2
1070 GOSUB 6000
1080 GOSUB 8100
1095 IF Q1$="" THEN CALL "ZZPROM",".Y",X3$,Z,"Proceed?","","",0; ON Z GOTO 1096,9900
1100 REM "Process the KT3 file
1105 I9=0,L0=68,I9$="",END_MESSAGE$=FN%CDS$+", Starting KIT Conversion program KT2CNV"; GOSUB 8000
1110 READ (Z[4],END=7900)KT3$
1120 I9=I9+1; IF MOD(I9,T0)=1 THEN GOSUB 8150
1125 DIM A$(80),A[3],B$(187),B[40],B1$(187),B1[40],I$(21),I[1]; BAD_IC0_UM$="N"
1140 IF LEN(KT3$)<L0 THEN I9$=KT3$; DIM KT3$(L0); KT3$(1)=I9$,REASON$="Record is short"; GOSUB BAD_RECORD; GOTO 1110
1200 REM "Kit item code
1220 FIND (Z[2],KEY=KT3$(1,20),DOM=1221)IOL=0320; GOTO 1225
1221 REASON$="Kit item code not found in IC0"; GOSUB BAD_RECORD; GOTO 1110
1225 IF B$(112,1)<>"Y" THEN REASON$="Kit item code is not lotted"; GOSUB BAD_RECORD; GOTO 1110
1240 A$(1,20)=KT3$(1,20)
1250 REM "Component Item Code
1265 IF KT3$(21,20)=KT3$(1,20) THEN REASON$="Component's Item Code cannot be the same as its Kit"; GOSUB BAD_RECORD; GOTO 1110
1270 FIND (Z[2],KEY=KT3$(21,20),DOM=1271)IOL=0325; GOTO 1275
1271 REASON$="Component item code not found in IC0"; GOSUB BAD_RECORD; GOTO 1110
1275 FIND (Z[13],KEY="U/M"+B1$(124,4),DOM=1276)IOL=0370; GOTO 1280
1276 BAD_IC0_UM$="Y"
1290 A$(21,20)=KT3$(21,20)
1300 REM "Optional component unit of measure
1310 IF KT3$(41,4)=DIM(4) THEN IF BAD_IC0_UM$<>"Y" THEN A$(41,4)=B1$(124,4); GOTO 1330 ELSE REASON$="Component's IC0 U/M is not valid"; GOSUB BAD_RECORD; GOTO 1110
1320 DIM I$(21),I[2]; READ (Z[13],KEY="U/M"+KT3$(41,4),DOM=1321)IOL=0370; GOTO 1325
1321 REASON$="Component U/M is not valid"; GOSUB BAD_RECORD; GOTO 1110
1325 A$(41,4)=KT3$(41,4)
1400 REM "Optional warehouse code
1410 IF KT3$(45,4)=DIM(4) THEN IF P1$(7,4)<>DIM(4) THEN A$(45,4)=P1$(7,4); GOTO 1430 ELSE GOTO 1430
1415 DIM Q$(11); Q$(1,1)="D"
1420 FIND (Z[3],KEY=Q$+KT3$(45,4),DOM=1421); GOTO 1425
1421 REASON$="Warehouse code is not valid"; GOSUB BAD_RECORD; GOTO 1110
1425 A$(45,4)=KT3$(45,4)
1450 REM "Optional quantity per unit of measure
1460 IF I$(20,1)="Y" THEN IF I[0]<>0 THEN A[0]=I[0] ELSE A[0]=I[1]; GOTO 1470
1465 IF KT3$(49,10)=DIM(10) THEN A[0]=B1[15]; GOTO 1470 ELSE A[0]=NUM(KT3$(49,10),ERR=1466); GOTO 1470
1466 REASON$="Quantity per unit is not valid"; GOSUB BAD_RECORD; GOTO 1110
1470 IF A[0]=0 THEN REASON$="Quantity per unit is zero"; GOSUB BAD_RECORD; GOTO 1110
1500 REM "Quantity required
1510 A[1]=NUM(KT3$(59,10),ERR=1511); GOTO 1520
1511 REASON$="Quantity required is not valid"; GOSUB BAD_RECORD; GOTO 1110
1520 IF A[1]=0 THEN REASON$="Quantity required is zero"; GOSUB BAD_RECORD; GOTO 1110
1530 GOSUB 7500
1800 REM "Set key and read for existing record, if found do extract then write, otherwise just write it
1810 A1$=A$(1,40)
1820 READ (Z[1],KEY=A1$,DOM=2000)
1830 UPDATE_COUNT=UPDATE_COUNT+1
1850 REM "MODIFY
1860 EXTRACT (Z[1],KEY=A1$,DOM=1870)
1870 GOTO 6700
2000 REM "Writing new record
2010 NEW_COUNT=NEW_COUNT+1
2020 GOTO 6700
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6006)'SB'
6070 PRINT @(0,3),"The KIT Master Conversion program will read the KT3 text file located in the"+'LF'+"TopForm data directory and after validating the data will create new or update"+'LF'+"existing KIT Master records (KT0 file).  If any records are not processed, the"+'LF'+"reason will be written to the "+HWD+DLM+"KIT_LOG file.  When processing is"+'LF'+"complete, the KT3 file will be renamed KT4.  Record counts will be written to"+'LF'+"the KIT_LOG file.  This file should be checked for errors.  Also, you should"+'LF'+"print the Kit Component Listing (KIT,R1) to verify all kits were"+'LF'+"created/updated properly.",
6165 PRINT (0,ERR=6166)'SF'
6190 RETURN 
6700 REM "ADD ENTRY
6710 WRITE (Z[1],KEY=A1$)IOL=0310
6790 GOTO 1110
7500 REM "Calculate quantity required in eaches
7510 IF I$(20,1)="Y" THEN A[2]=A[1] ELSE A[2]=A[1]*A[0]
7540 RETURN 
7800 BAD_RECORD:REM "Write message to GPC_LOG, couldn't process this record
7805 BAD_REC_COUNT=BAD_REC_COUNT+1
7810 MESSAGE$="Bad record, Reason: "+REASON$
7820 BAD_REC$="Record: "+KT3$
7830 SYS_CALL$="echo "+QUO+MESSAGE$+QUO+" >> "+HWD+DLM+"KIT_LOG"
7835 INVOKE SYS_CALL$
7840 SYS_CALL$="echo "+QUO+BAD_REC$+QUO+" >> "+HWD+DLM+"KIT_LOG"
7845 INVOKE SYS_CALL$
7890 BAD_RECORD_END:RETURN 
7900 REM "Close and rename KT3 file and write counts to log file
7910 CLOSE (Z[4])
7915 ERASE "KT4",ERR=7916; GOTO 7915
7920 RENAME 0,"KT3","KT4"
7930 END_MESSAGE$=FN%CDS$+", "+STR(I9:"0000")+" records read from the KT3 file"
7935 GOSUB 8000
7940 IF NEW_COUNT<>0 THEN END_MESSAGE$=STR(NEW_COUNT:"0000")+" new records were added to KT0 file"; GOSUB 8000
7945 IF UPDATE_COUNT<>0 THEN END_MESSAGE$=STR(UPDATE_COUNT:"0000")+" KT0 records were updated"; GOSUB 8000
7950 IF BAD_REC_COUNT<>0 THEN END_MESSAGE$=STR(BAD_REC_COUNT:"0000")+" records were not processed"; GOSUB 8000
7980 PRINT @(0,15),'CE',
7985 IF Q1$="" THEN CALL "ZZPROM",".4",X3$,Z,"Process complete!!","","",0
7990 GOTO 9900
8000 REM "Write out to KIT Log
8020 SYS_CALL$="echo "+QUO+END_MESSAGE$+QUO+" >> "+HWD+DLM+"KIT_LOG"
8030 INVOKE SYS_CALL$
8040 RETURN 
8100 REM "GOSUB here, once, at the beginning, after the background is set and before the Proceed? question. Set T to total # to do (by calling ZZINFO) and T0 to the reporting interval (report every T0 number of records) this is typically 2% of total; This also prints a message (@8115),so adjust accordingly
8105 REM "CALL "ZZINFO",Z[4],T9,X3$,T,T0,K,B,D,S0,S1,F2$
8106 REM "LET T=T0
8107 T=0
8110 REM CLOSE (14); OPEN (14)"D0"
8111 DIR_PATH$=%DATAPATH$
8112 FULL_PATH$=DIR_PATH$+DLM+"KT3"
8113 CALL "ZZ2FNC;SerialRecCnt",Z[4],T ! CLOSE (14); OPEN (14)"< cat "+FULL_PATH$+" | wc -l"; READ (14)NUM_REC$
8114 ! T=NUM(NUM_REC$,ERR=8130)
8115 PRINT @(0,12),"There are "+STR(T)+" records to process"
8130 T0=INT(T*.02); IF T0<=1 THEN T0=2
8135 T1=0
8145 RETURN 
8150 REM "Call this each time to update the bar graph. Display horiz. bar graph given total #, T and current #, C, and time counter T1 (T1 is init'ed here and used here, just don't use it somewhere else)
8155 CALL "ZZBARG",X3$,"HG",19,10,50,T1,T,I9
8195 RETURN 
9000 REM "ERROR PROCESSING
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9800 REM "EXIT PROGRAM
9900 REM "END PROGRAM
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
