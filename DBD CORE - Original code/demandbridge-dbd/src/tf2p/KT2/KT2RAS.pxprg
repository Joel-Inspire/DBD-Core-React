0010 REM "Kit Component Listing <KT2RAS>
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 09/20/10 - 12.405277 - tma - SSP# 241161
0037 REM "241161-In the Kit Component Listing, don't get standard message    
0040 REM "Copyright 2010 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000
0110 X0$="KT2RAS",X1$="Kit Component Listing"
0120 DIM Z0$(80,"-")
0130 K0=12,K1=1
0135 C9=-1
0200 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0250 X2=2
0285 L0$="IC0   "
0290 K9$="KT2RAA",K9=LEN(K9$)
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0300 REM "IOLISTS
0310 IOLIST A$(1)
0490 IOLIST R0$,W$,W[0],W[1],W[2],W[3],W[4]
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01X ZZS...  13O ZZPARM  "
0515 Z$=Z$+"07O ZZP...  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0590 READ (Z[1],KEY=K9$,DOM=0591)
0600 REM "
0605 DIM A$(65+K9)
0610 A$(1,LEN(K9$))=K9$
0615 A$(65+K9,1)="1",C9=0
0620 READ (Z[1],KEY=A$(1,12+K9),DOM=0621)A$
0625 T9$="123456789",T0=NUM(A$(65+K9,1)),T9$=T9$(1,LEN(L0$)/6)
0630 T0$=L0$((T0-1)*6+1,6),T0$="ZZX"+T0$(1,3)
0640 ADDR T0$,ERR=0641
0690 GOSUB 6000
1000 REM "
1010 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,X2
1030 DIM W[4]
1035 DIM A$(200)
1045 A$(1)=A1$; IF A1$="" THEN A$(1)=K9$
1060 PRINT 'CF',
1070 GOSUB 6450
1100 REM "KEY SEQ
1105 IF X2=3 THEN GOTO 1500
1110 X0=-1,C0=0,X1=0,C9=0,Z9=0
1120 C0=ABS(C0),X$=""; IF C0=2 AND X0>0 THEN X0=X0-1 ELSE IF C0<>2 THEN X0=X0+1; IF C0=4 THEN GOTO 9800
1140 ON X0 GOTO 1200,1500
1200 REM "Selection Code
1210 CALL "ZZENTR","SXUX",A{ALL},A$,X4$,X3$,11,3,1+K9,12,C0,"","{1"+X$,K9$,"KT2RAS00","ZZS","",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 1210,1211
1215 IF C0<0 THEN ON INT(ABS(C0)-2) GOTO 1210,6800,9800,6970
1240 GOTO 1120
1500 REM "
1505 Z9=-1,A2$="",A3$="",A4$="",A5$=""
1510 A1$=A$(1,K9+12)
1520 READ (Z[1],KEY=A1$,DOM=1600)IOL=0310,IOL=0490
1525 Z9=0
1530 IF A$(65+K9,1)<>STR(T0) THEN GOSUB 6900
1590 GOTO 1700
1600 REM "
1605 A$(65+K9,1)=STR(T0)
1610 IF POS(" "<>A1$(7))=0 THEN GOSUB 6450; GOTO 1650
1620 CALL "ZZPROM","2",X3$,Z,"","","",0; ON Z GOTO 1650,1630
1630 GOTO 1000
1690 GOTO 2000
1700 REM "
1790 GOSUB 6200
1800 REM "
1820 CALL "ZZPROM","3",X3$,Z,"","","V",X0
1825 ON Z+1 GOTO 1850,1830,1850,1830,1830,1830,7100,6500,1000,4900
1830 IF Z=2 THEN GOSUB 6700; GOTO 1800
1835 GOSUB 7000
1840 ON Z GOTO 5000,1850,1000,9800,1000,6500
1850 REM "MODIFY
1855 X0=X0-1; IF Z9=1 THEN GOTO 1880 ELSE IF Z9=0 THEN Z9=1
1860 EXTRACT (Z[1],ERR=7200,KEY=A1$,DOM=1870)IOL=0310,IOL=0490
1865 C9=1
1870 GOSUB 6200
1890 IF Z<0 THEN GOTO 2040 ELSE GOTO 2000
2000 REM "DATA SEQ
2010 C0=0,X0=-1,X1=1
2020 C9=1,X$="",C0=ABS(C0),X0=X0+1; IF C0=2 THEN IF X0>0 THEN X0=X0-2
2025 IF C0>3 OR X0<0 THEN GOTO 1800
2040 ON X0 GOTO 2100,2150,2200,2250,1800
2100 REM "Report Sub-Title
2110 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,38,3,13+K9,40,C0,"","{3"+X$,"","KT2RAS02","","",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 2110,2111
2140 GOTO 2020
2150 REM "Options
2160 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,11,4,53+K9,12,C0,"","{3"+X$,"","KT2RAS04","","",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 2160,2161
2170 IF POS(" "<>A$(59,12))=0 THEN PRINT @(11,4),"( Normal )",
2190 GOTO 2020
2200 REM "Report Sequence
2205 T$=A$(65+K9,1); IF LEN(L0$)=6 THEN GOTO 2240
2210 CALL "ZZENTR","ZRU",A{ALL},A$,X4$,X3$,38,4,65+K9,1,C0,"","{3"+X$,T9$,"KT2RAS06","","",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 2210,2211
2225 IF T$<>A$(65+K9,1) THEN GOSUB 6900
2240 GOTO 2020
2255 IF C0<>2 THEN L9=0
2260 CALL T0$,ERR=2261,X3$,X4$,Y0$,W$,W{ALL},0,C0,L9
2270 IF ABS(C0)>4 THEN GOSUB 6400; GOTO 2260
2290 GOTO 2020
4910 IF R0$>"" THEN R0$(1,7)="IT",R0$(8,1)="N" ELSE DIM R0$(30); R0$(1,7)="IT",R0$(8,1)="N",R0$(8,9)="NNN    66"; GOSUB 6700
5000 REM "Write Print Data
5010 IF R0$="" THEN CALL "ZZRPTO",X3$,X4$,Y0$,R0$,R{ALL},4,C0,X0
5020 T1$=L0$((T0-1)*6+1,6),K$=X3$(1,8)
5025 IF R0$(1,1)<>"Q" THEN GOTO 5040 ELSE Z$="07C         07O ZZQ     ",K9$="",K$=DAY,K$=K$(7,2)+K$(1,2)+K$(4,2),K$=R0$(2,6)+X3$(162,1)+R0$(17,1)+K$+STR(TIM*100:"0000")+" "+A$(1,6)+X3$(9,3)+X3$(40,3); IF R0$(2,1)="U" THEN K$(1,2)=X3$(172,2)
5030 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,0; ON Z0 GOTO 5031,9900
5035 ON POS(R0$(1,1)="IQS") GOTO 5090,5040,5065,5080
5040 IF R0$(8,1)="G" THEN GOSUB 5100
5045 WRITE (Z[7],KEY=K$)X3$,X4$,T1$,R0$,W$,IOL=0310; GOTO 5080
5070 WRITE (Z[7],KEY=K$(1,19),DOM=5075)K$,X3$,X4$,T1$,R0$,W$,IOL=0310; GOTO 5090
5075 K$(19,1)=CHR(ASC(K$(19,1))+1); GOTO 5070
5080 IF R0$(8,1)="G" THEN GOSUB 5150
5090 GOTO 9900
5100 REM "GHOST TASK
5110 CALL "ZZGHST",X3$,"?","",G0$,X0
5120 IF X0<>0 THEN CALL "ZZPROM","G1",X3$,S3,"","","",0; ON S3 GOTO 5110,1800
5130 K$(1,LEN(G0$))=G0$; WRITE (Z[13],KEY=K$(1,8))K$+X3$(LEN(K$)+1),X4$
5140 RETURN 
5150 REM "START GHOST
5160 START 30,ERR=5170,K9$,G0$
5165 K9$=""; RETURN 
5170 Q$="+ ( !"+STR(ERR)+")"; CALL "ZZPROM","G2",X3$,S3,Q$,"","",0
5180 EXITTO 1800
5190 RETURN 
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6016)'SB',
6010 GOSUB 6600
6020 CALL T0$,ERR=6021,X3$,X4$,Y0$,W$,W{ALL},2,0,L0
6165 PRINT (0,ERR=6166)'SF',
6190 RETURN 
6200 REM "DISPLAY DATA
6215 GOSUB 6450
6220 PRINT @(38,3),A$(13+K9,40),@(11,4),A$(53+K9,12),@(38,4),A$(65+K9,1),
6225 IF POS(" "<>A$(59,12))=0 THEN PRINT @(11,4),"( Normal )", ELSE PRINT @(11,4),A$(59,12),
6230 IF K=1 THEN RETURN ELSE CALL T0$,ERR=6231,X3$,X4$,Y0$,W$,W{ALL},1,0,L0
6390 RETURN 
6400 REM "WHOLE SCREEN
6405 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,0
6420 GOSUB 6000
6430 IF C9>=0 THEN GOSUB 6200 ELSE GOSUB 6450
6440 IF ABS(C0)>4 THEN C0=ABS(C0)-5
6445 RETURN 
6450 REM "DISPLAY KEYS
6455 IF C9<0 THEN GOTO 6445
6460 PRINT @(11,3),A$(1+K9,12),
6485 IF POS(" "<>A$(7,12))=0 THEN PRINT @(11,3),"(Standard)" ELSE PRINT @(11,3),A$(7,12),
6490 RETURN 
6500 REM "DELETE
6510 REMOVE (Z[1],KEY=A1$,DOM=6511)
6590 GOTO 1630
6600 REM "ALT KEY DATA READS
6620 PRINT @(0,3+V0),"Selection:",@(25,3+V0),"Description:",@(2,4+V0),"Options:",@(28,4+V0),"Sequence:",@(0,5+V0),Z0$,
6630 PRINT 
6690 RETURN 
6700 REM "ADD ENTRY
6705 IF Z9=0 THEN GOTO 6790
6710 WRITE (Z[1],KEY=A1$)IOL=0310,IOL=0490
6790 Z9=2; RETURN 
6800 REM "NEXT ENTRY IN FILE
6805 ON 10*FPT(C0)+2 GOTO 6850,6806
6810 A1$=KEY(Z[1],END=6895)
6820 IF A1$(1,LEN(K9$))<>K9$ THEN GOTO 6895
6825 A$(1,LEN(A1$))=A1$
6830 GOSUB 6600
6835 GOSUB 6450
6840 GOTO 1515
6850 REM PRIOR ENTRY
6855 CALL "ZZKEYP",ERR=6856,Z[1],A1$; GOTO 6820
6860 CALL "ZZKEYL",ERR=6861,Z[1],A1$; GOTO 6820
6870 GOTO 6895
6890 GOTO 1515
6895 PRINT 'RB',; READ (Z[1],KEY=K9$,DOM=1140); GOTO 1140
6900 REM "
6905 IF T0$<>"" THEN DROP T0$,ERR=6906; GOTO 6905
6910 T0=NUM(A$(65+K9,1))
6915 T0$=L0$((T0-1)*6+1,6),T0$="ZZX"+T0$(1,3)
6920 IF Z9<>0 THEN W$=""
6925 ADDR T0$,ERR=6926
6930 PRINT @(0,6),'CE',; GOSUB 6020; GOSUB 6200
6940 RETURN 
7000 REM "UPDATE
7010 S3=0; IF Z9=1 THEN CALL "ZZPROM","R1",X3$,S3,"","","",0 ELSE IF Z9<0 THEN CALL "ZZPROM","R2",X3$,S3,"","","",0
7080 IF S3=0 THEN GOSUB 6700
7090 RETURN 
7100 REM "OPTIONS
7110 PRINT @(0,3),'CE',
7120 CALL "ZZRPTO",X3$,X4$,Y0$,R0$,R{ALL},4,C0,X0
7125 PRINT @(0,3),'CE',
7130 GOSUB 6400
7140 Z9=1
7190 GOTO 1800
8910 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
9000 REM "ERROR PROCESSING
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9800 REM "
9820 K9$="ZMENU"
9900 REM "END PROGRAM
9905 IF T0$<>"" THEN DROP T0$,ERR=9906; GOTO 9905
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9920 IF K9$>"" THEN RUN K9$
9925 SETERR 9940
9930 Q1$=A1$; EXIT 
9940 BEGIN ; SETESC 9350
9950 RUN "ZMENU"
9999 END 
20000 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
20010 ! 
20020 ! 100 - Initialization
20030 INIT:
20040 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
20050 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
20060 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
20070 GOSUB SETUP_KEYS
20080 _FILE_NAME$="ZZS"+%C$
20090 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
20100 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
20110 _ZZPARM=HFN; OPEN (_ZZPARM)"ZZPARM"
20120 RETURN 
20130 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
20140 CMD_STR$="END"
20150 RETURN 
20160 ! 300 - Set up the message library
20170 SETUP_LIBRARY:
20180 _SV_MSGLIB$=MSG(*)
20190 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
20200 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 20220
20210 MESSAGE_LIB "*msglib.en"
20220 SET_MSG:GOSUB SETUP_MESSAGES
20230 RETURN 
20240 ! 400 - Set up key information
20250 SETUP_KEYS:
20260 _NUMKEYS=1
20270 DIM _KEYS$[1:1]; _KEYS$[1]="PRG_NAME$"
20280 _KEY1=1
20290 RETURN 
20300 ! 500 - Main panel post_display logic
20310 MAIN_POST_DISPLAY:
20320 MESSAGE_LIB _SV_MSGLIB$
20330 GOSUB CLEAR_REC
20340 ARG_1$="KT2RAA"+"            ",%K9$="KT2RAA"
20350 DIM RNG(4)
20360 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
20370 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT)A$,R0$,W$,RNG{ALL}; GOTO 20390
20380 DIM A$(128),R0$(128),W$(71),RNG(4)
20390 ! _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
20400 NXT_OPTION:
20410 EXECUTE "nxt_folder=FLDR."+_F_OBJ$[NUM(RPT_SEQ$)]+".CTL,REFRESH_FLG=1"
20420 NEXT_ID=RPT_VEIW.CTL,REFRESH_FLG=1,RPT_SEQ=NUM(A$(71,1))
20430 REFRESH_FLG=1
20440 GOSUB ASSIGN_LIB
20450 RETURN 
20460 ! 900 - Wrapup
20470 WRAPUP:
20480 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
20490 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
20500 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
20510 IF _ZZPARM<>0 THEN CLOSE (_ZZPARM); _ZZPARM=0
20520 MESSAGE_LIB _SV_MSGLIB$
20530 SET_PARAM 'KR'=_SV_KR
20540 RETURN 
20550 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
20560 FIND_REC:
20570 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
20580 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
20590 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
20600 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$; _KEY$=STP(_KEY$,1)
20610 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
20620 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
20630 GOSUB PROCESS_READ
20640 GOSUB NUM_TO_STR
20650 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
20660 EXIT 
20670 ! 1200 - New RECORD check
20680 NEW_RECORD:
20690 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
20700 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
20710 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
20720 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
20730 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
20740 RETURN 
20750 ! 1400 - Add RECORD
20760 WRITE_REC:
20770 GOSUB STR_TO_NUM
20780 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
20790 GOSUB REVIEW_WRITE
20800 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20810 CHANGE_FLG=0
20820 NEXT_ID=_FIRST_KEY
20830 EXIT 
20840 ! 1600 - Delete
20850 DELETE_REC:
20860 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$; _KEY$=STP(_KEY$,1)
20870 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
20880 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
20890 IF _X$<>"YES" THEN RETURN 
20900 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
20910 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
20920 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20930 CHANGE_FLG=0
20940 NEXT_ID=_FIRST_KEY
20950 EXIT 
20960 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
20970 ! 1800 - Clear record
20980 CLEAR_REC:
20990 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21000 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
21010 CHANGE_FLG=0
21020 RETURN 
21030 ! 2000 - Browsing mode
21040 ! - Next
21050 NEXT_REC:
21060 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21070 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
21080 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
21090 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
21100 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
21110 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
21120 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
21130 ! 2200 - Prior record
21140 PRIOR_REC:
21150 T1$="IC6"
21160 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21170 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
21180 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
21190 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
21200 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
21210 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
21220 T1$="IC1   "
21230 ! 2400 - First record
21240 FIRST_REC:
21250 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21260 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
21270 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
21280 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
21290 ! 2600 - Last record
21300 LAST_REC:
21310 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21320 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
21330 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
21340 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
21350 ! 3000 - Subroutines
21360 ! Processing required by READ
21370 PROCESS_READ:
21380 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
21390 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
21400 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
21410 CHANGE_FLG=0
21420 RETURN 
21430 ! 3200 - Review record for changes before WRITE
21440 REVIEW_WRITE:
21450 _CHG1$="",_CHG2$=""
21460 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
21470 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
21480 IF _CHG1$="" THEN GOTO CHK2
21490 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
21500 IF _YESNO$="NO" THEN GOTO *RETURN
21510 IF _CHG2$="" THEN GOTO WRT
21520 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
21530 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=*NEXT)A$,R0$,W$,RNG{ALL}; GOTO 21570
21540 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
21550 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
21560 GOSUB NUM_TO_STR
21570 REFRESH_FLG=1
21580 RETURN 
21590 WRITE_ERROR:
21600 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
21610 RETURN 
21620 ! 3500 - Display a record
21630 DISP_REC:
21640 GOSUB NUM_TO_STR
21650 REFRESH_FLG=1
21660 RETURN 
21670 ! 3600 - Busy Record display
21680 BUSY_CHK:
21690 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
21700 IF _D$="NO" THEN EXIT 
21710 RETURN 
21720 ! 3790 - See if changes are to be written
21730 CHECK_CHANGES:
21740 IF _FIRST_KEY=0 THEN _FIRST_KEY=PRG_NAME.CTL,_FIRST_FIELD=RPT_SELEC.CTL
21750 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
21760 MSGBOX MSG("UPD_RPT_1")+SEP+MSG("UPD_RPT_2"),MSG("CONFIRM"),"?,YESNO",_YESNO$ ! SSP#241161
21770 IF _YESNO$="YES" THEN GOSUB ASSIGN_PRG; GOTO WRT
21780 CHANGE_FLG=0
21790 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
21800 RETURN 
21810 ! 4000 - Get the current key segment number
21820 GET_CURKEY:
21830 FOR _CURKEY=1 TO _NUMKEYS
21840 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
21850 NEXT _CURKEY
21860 RETURN 
21870 ! 9000 - Retrieve messages from the *msglib.xxx library
21880 SETUP_MESSAGES:
21890 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
21900 _MSG_DIRECTORY$=MSG("DIRECTORY")
21910 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
21920 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
21930 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
21940 _MSG_MANDATORY$=MSG("MANDATORY")
21950 _MSG_NEXT$=MSG("NEXT")
21960 _MSG_NON_NUMER$=MSG("NON_NUMER")
21970 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
21980 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
21990 _MSG_PRECEDING$=MSG("PRECEDING")
22000 _MSG_PREFIX$=MSG("PREFIX")
22010 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
22020 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
22030 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
22040 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
22050 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
22060 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
22070 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
22080 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
22090 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
22100 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
22110 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
22120 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
22130 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
22140 _MSG_START_FILE$=MSG("START_FILE")
22150 _MSG_UPDATE$=MSG("UPDATE")
22160 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
22170 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
22180 _MSG_UPD_SAME$=MSG("UPD_SAME")
22190 _MSG_WARNING$=MSG("WARNING")
22200 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
22210 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
22220 RETURN 
22230 END 
30000 ! 10000 - Convert numeric values to string
30010 NUM_TO_STR:
30020 RPT_NUM1$=STR(RPT_NUM1)
30030 RPT_NUM2$=STR(RPT_NUM2)
30040 RETURN 
30050 ! 11000 - Convert numeric strings to number
30060 STR_TO_NUM:
30070 _X$="RPT_NUM1",_X=RPT_NUM1.CTL,RPT_NUM1=NUM(RPT_NUM1$,ERR=NON_NUMERIC)
30080 _X$="RPT_NUM2",_X=RPT_NUM2.CTL,RPT_NUM2=NUM(RPT_NUM2$,ERR=NON_NUMERIC)
30090 RETURN 
30100 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
30110 NEXT_ID=_X
30120 EXIT 
30130 ! 12000 - Check if the required fields have data
30140 CHECK_REQD_FLDS:
30150 _W_FLG=1
30160 RETURN 
30170 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
30180 ENABLE_GROUPS:
30190 IF _ENABLE_FLG=0 THEN GOTO *RETURN
30200 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
30210 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
30220 RETURN 
40000 VIEW_REPORT:
40010 PRINT_REPORT:
40020 ! View Report Routine.
40030 IOLIST A$
40040 IOLIST R0$,W$
40050 ZZPARM=HFN; OPEN (ZZPARM)"ZZPARM"; READ (ZZPARM,KEY=FID(0)+"      ")X3$,*,X4$; READ (ZZPARM,KEY="STATI/C")T1$,F0
40060 ZZP=HFN; OPEN (ZZP)"ZZP"
40070 ! 
40080 GOSUB SEL_DATE; GOSUB ASSIGN_PRG; GOSUB WRT
40090 PRINT 'CURSOR'(1)
40100 A$(1,6)="KTGRAS"
40110 K$=X3$(1,8),%GUI=1
40120 %B_WINDATE_FMT$=%WINDATE_FMT$,%WINDATE_FMT$="YYYYMMDD",JJ$=DTE(0:"%Yl%Mz%Dz"); CALL "ZZWDTE;VALIDATE",JJ$,JJJ$,JJJJ$; X3$(21,6)=JJ$ ! SSP 199835
40130 WRITE (ZZP,KEY=K$)X3$,X4$,T1$,R0$,W$,A$
40140 WIN_D$=FIN(0),WIN_CURR=DEC(WIN_D$(10,1))
40150 CALL "KT2RAA"
40160 ! ESCAPE ; IF %WIN_ID_GUI THEN PRINT (0)'DROP'(%WIN_ID_GUI)
40170 CMD_STR$="END"
40180 PRINT 'CURSOR'(0)
40190 EXIT 
40200 ! 25000,10
40210 ASSIGN_LIB:
40220 ! Output Option
40230 IF NUM(A$(71,1))=0 THEN A$(71,1)="1"
40240 PRT_MODE$=R0$(1,1),RPT_OUTDEV$=R0$(2,2)
40250 RPT_VERT$=R0$(9,1),RPT_HORIZ$=R0$(10,1)
40260 RPT_AUX1$=R0$(11,1),RPT_AUX2$=R0$(12,1)
40270 RPT_LINES$=R0$(15,2),RPT_FORMCODE$=R0$(17,1)
40280 RPT_JOBCARD$=MID(R0$,65,60),RPT_JOBCARD_FLG$=MID(R0$,125,1)
40290 RPT_AUX3$=R0$(13,1),RPT_AUX4$=R0$(14,1)
40300 ! Selection Options
40310 RPT_SELEC$=A$(7,12),RPT_DESC$=A$(19,40),RPT_OPT$=A$(59,12),RPT_SEQ$=A$(71,1)
40320 IF STP(RPT_OPT$)="" THEN RPT_OPT$=""
40330 IF STP(RPT_SELEC$)="" THEN RPT_SELEC$=""
40350 SET_FIELDS:
40357 REFRESH_FLG=1; DIM S$(10,"~")
40358 SWITCH RPT_SEQ$
40360 CASE "5"
40370 DIM W$(74,"~")
40380 W$(1,10)=VEND_START$; IF VEND_END$<>"" THEN W$(15,10)=VEND_END$
40390 W$(11,4)=PLANT_START$; IF PLANT_END$<>"" THEN W$(25,4)=PLANT_END$
40400 W$(29,3)=ML_PROD_START$; IF ML_PROD_END$<>"" THEN W$(32,3)=ML_PROD_END$
40410 W$(35,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(55,10)=ML_CUST_END$
40420 W$(45,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(65,10)=ML_ITEM_END$
40430 BREAK
40440 CASE "2"
40450 DIM W$(47,"~")
40460 W$(1,4)=ML_PROD_START$; IF ML_PROD_END$<>"" THEN W$(4,3)=ML_PROD_END$
40470 W$(7,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(27,10)=ML_CUST_END$
40480 W$(17,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(37,10)=ML_ITEM_END$
40490 T1$="IC5   "
40500 BREAK
40510 CASE "3"
40520 DIM W$(55,"~")
40530 W$(1,4)=ML_LOC_START$; IF ML_LOC_END$<>"" THEN W$(5,4)=ML_LOC_END$
40540 W$(9,3)=ML_PROD_START$; IF ML_PROD_END$<>"" THEN W$(12,3)=ML_PROD_END$
40550 W$(15,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(25,10)=ML_CUST_END$
40560 W$(35,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(45,10)=ML_ITEM_END$
40570 BREAK
40580 CASE "1"
40590 ML_CUST_START$=STP(W$(1,10)); IF W$(21,10)<>S$ THEN ML_CUST_END$=W$(21,10)
40600 ML_ITEM_START$=STP(W$(11,10)); IF W$(31,10)<>S$ THEN ML_ITEM_END$=W$(31,10) ELSE ML_ITEM_END$="" ! SSP 208675
40610 ! W$(41,4)=ML_LOC_START$; IF ML_LOC_END$<>"" THEN W$(45,4)=ML_LOC_END$
40620 T1$="IC0   "
40630 BREAK
40640 CASE "4"
40650 DIM W$(56,"~")
40660 W$(29,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(39,10)=ML_ITEM_END$
40670 W$(9,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(19,10)=ML_CUST_END$
40680 W$(1,4)=ML_SALESMAN_START$; IF ML_SALESMAN_END$<>"" THEN W$(5,4)=ML_SALESMAN_END$
40690 W$(49,4)=ML_LOC_START$; IF ML_LOC_END$<>"" THEN W$(53,4)=ML_LOC_END$
40700 A$(80,3)=MAIL_CODE_1$,A$(83,7)=NOT_USED$,T1$="ARU   "
40710 BREAK
40720 END SWITCH 
40730 RETURN 
40740 RETURN 
40750 ASSIGN_PRG:
40760 A$(1,6)=ARG_1$,A$(7,12)=RPT_SELEC$,A$(19,40)=RPT_DESC$,A$(59,12)=RPT_OPT$,A$(71,1)=RPT_SEQ$
40770 A$(59,12)=RPT_OPT$; A$(71,1)=RPT_SEQ$
40780 ! 
40790 R0$(1,1)=PRT_MODE$,R0$(2,6)=RPT_OUTDEV$(1,2)+"    ",R0$(9,1)=RPT_VERT$,R0$(10,1)=RPT_HORIZ$
40795 IF NOT(NUL(VIEW$)) THEN R0$(2,2)=VIEW$
40800 R0$(11,1)=RPT_AUX1$,R0$(12,1)=RPT_AUX2$,R0$(13,1)=RPT_AUX3$,R0$(14,1)=RPT_AUX4$
40810 R0$(15,2)=RPT_LINES$,R0$(17,1)=RPT_FORMCODE$,R0$(65,60)=RPT_JOBCARD$
40820 R0$(125,1)=RPT_JOBCARD_FLG$; DIM W$(71,"~")
40830 SWITCH RPT_SEQ$
40840 CASE "5"
40850 DIM W$(74,"~")
40860 W$(1,10)=VEND_START$; IF VEND_END$<>"" THEN W$(15,10)=VEND_END$
40870 W$(11,4)=PLANT_START$; IF PLANT_END$<>"" THEN W$(25,4)=PLANT_END$
40880 W$(29,3)=ML_PROD_START$; IF ML_PROD_END$<>"" THEN W$(32,3)=ML_PROD_END$
40890 W$(35,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(55,10)=ML_CUST_END$
40900 W$(45,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(65,10)=ML_ITEM_END$
40910 BREAK
40920 CASE "2"
40930 DIM W$(47,"~")
40940 W$(1,4)=ML_PROD_START$; IF ML_PROD_END$<>"" THEN W$(4,3)=ML_PROD_END$
40950 W$(7,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(27,10)=ML_CUST_END$
40960 W$(17,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(37,10)=ML_ITEM_END$
40970 T1$="IC5   "
40980 BREAK
40990 CASE "3"
41000 DIM W$(55,"~")
41010 W$(1,4)=ML_LOC_START$; IF ML_LOC_END$<>"" THEN W$(5,4)=ML_LOC_END$
41020 W$(9,3)=ML_PROD_START$; IF ML_PROD_END$<>"" THEN W$(12,3)=ML_PROD_END$
41030 W$(15,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(25,10)=ML_CUST_END$
41040 W$(35,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(45,10)=ML_ITEM_END$
41050 BREAK
41060 CASE "1"
41070 DIM W$(41,"~")
41080 W$(1,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(21,10)=ML_CUST_END$
41090 W$(11,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(31,10)=ML_ITEM_END$
41100 ! W$(41,4)=ML_LOC_START$; IF ML_LOC_END$<>"" THEN W$(45,4)=ML_LOC_END$
41110 T1$="IC0   "
41120 BREAK
41130 CASE "4"
41140 DIM W$(56,"~")
41150 W$(29,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(39,10)=ML_ITEM_END$
41160 W$(9,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(19,10)=ML_CUST_END$
41170 W$(1,4)=ML_SALESMAN_START$; IF ML_SALESMAN_END$<>"" THEN W$(5,4)=ML_SALESMAN_END$
41180 W$(49,4)=ML_LOC_START$; IF ML_LOC_END$<>"" THEN W$(53,4)=ML_LOC_END$
41190 A$(80,3)=MAIL_CODE_1$,A$(83,7)=NOT_USED$,T1$="ARU   "
41200 BREAK
41210 END SWITCH 
41220 RETURN 
41230 RETURN 
41240 SEL_DATE:
41250 RETURN 
41260 IF LEN(START_FISCAL$)>4 THEN YEAR$=%CR_YEAR$ ELSE YEAR$=START_FISCAL$
41270 IF LEN(START_ACCTPD$)>2 THEN PER$=%CR_PD$ ELSE PER$=START_ACCTPD$
41280 FIND (_ZZPARM,KEY=%C$+"G/LYE"+YEAR$)REC_DAT$; REC_DAT$=REC_DAT$(21)
41290 DIM CUR_DATE$[12]
41300 FOR XX=1 TO 12; CUR_DATE$[XX]=FND$(REC_DAT$(XX*6-5,6)); NEXT XX
41310 ML_ENDING_PERIOD$=CUR_DATE$[NUM(PER$)]
41320 REFRESH_FLG=1
41330 RETURN 
41400 POST_ML_CUST_START:
41410 IF POS("FIRST"=UCS(ML_CUST_START$))<>0 THEN ML_CUST_START$=""
41415 ML_CUST_START$=PAD(ML_CUST_START$,10)
41416 IF STP(ML_CUST_START$)="" THEN ML_CUST_START$=""
41420 GOSUB ASSIGN_PRG
41445 RETURN 
41450 POST_ML_CUST_END:
41460 IF POS("LAST"=UCS(ML_CUST_END$))<>0 THEN ML_CUST_END$=PAD("~",10)
41465 ML_CUST_END$=PAD(ML_CUST_END$,10)
41466 IF STP(ML_CUST_END$)="" THEN ML_CUST_END$=""
41470 GOSUB ASSIGN_PRG
41490 RETURN 
41500 POST_ML_ITEM_START:
41510 IF POS("FIRST"=UCS(ML_ITEM_START$))<>0 THEN ML_ITEM_START$=""
41520 ML_ITEM_START$=PAD(ML_ITEM_START$,10)
41530 GOSUB ASSIGN_PRG
41535 IF ML_ITEM_START$=DIM(10) THEN ML_ITEM_START$=""
41545 RETURN 
41560 POST_ML_ITEM_END:
41570 IF STP(ML_ITEM_END$)="" THEN ML_ITEM_END$=DIM(10,"~")
41580 ML_ITEM_END$=PAD(ML_ITEM_END$,10)
41585 GOSUB ASSIGN_PRG
41587 IF ML_ITEM_END$=DIM(10,"~") THEN ML_ITEM_END$=""
41590 RETURN 
56000 ! "199835-Program KTGRAS Kit Component Listing. Report will print with
56001 ! "208675-Kit Module - Allow processing of items not in inventory     
56002 REM "241161-In the Kit Component Listing, don't get standard message    
60000 SELECT_SELECTION:
60010 _KEY$="KT2RAA"+RPT_SELEC$,_KEY$=PAD(_KEY$,18," ")
60020 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD1)A$,R0$,W$,RNG{ALL}
60030 GOTO NXT_OPTION
60500 NEW_RECORD1:
60510 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
60520 IF _YESNO$="NO" THEN GOSUB MAIN_POST_DISPLAY; EXIT 
60530 DIM A$(128),R0$(128),W$(71),RNG(4)
60540 A$(71,1)="1",A$(1,6)="KT2RAA",A$(7,LEN(RPT_SELEC$))=RPT_SELEC$
60550 WRITE (_FIL_NO,KEY=_KEY$)A$,R0$,W$,RNG{ALL}
60560 GOTO NXT_OPTION
