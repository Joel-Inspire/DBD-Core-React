0010 REM "Kit Production Audit Report Selection <KT2RBS>
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 01/14/10 - 13.961944 - jvv - SSP# 216198
0037 REM "216198-Need to add Kit Production report to Image Library          
0040 REM "Copyright 2010 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000
0110 X0$="KT2RBS",X1$="Kit Production Audit Report"
0120 DIM Z0$(80,"-")
0130 K0=12,K1=1
0135 C9=-1
0200 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0250 X2=2
0285 L0$="      "
0290 K9$="KT2RBA",K9=LEN(K9$)
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0300 REM "IOLISTS
0310 IOLIST A$(1)
0490 IOLIST R0$,W$,W[0],W[1],W[2],W[3],W[4]
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01X ZZS...  13O ZZPARM  "
0515 Z$=Z$+"07O ZZP...  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0590 READ (Z[1],KEY=K9$,DOM=0591)
0600 REM "
0605 DIM A$(65+K9)
0610 A$(1,LEN(K9$))=K9$
0615 A$(65+K9,1)="1",C9=0
0620 READ (Z[1],KEY=A$(1,12+K9),DOM=0621)A$
0625 T9$="123456789",T0=NUM(A$(65+K9,1)),T9$=T9$(1,LEN(L0$)/6)
0630 T0$=L0$((T0-1)*6+1,6),T0$="ZZX"+T0$(1,3)
0640 ADDR T0$,ERR=0641
0690 GOSUB 6000
1000 REM "
1010 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,X2
1030 DIM W[4]
1035 DIM A$(200)
1045 A$(1)=A1$; IF A1$="" THEN A$(1)=K9$
1060 PRINT 'CF',
1070 GOSUB 6450
1100 REM "KEY SEQ
1105 IF X2=3 THEN GOTO 1500
1110 X0=-1,C0=0,X1=0,C9=0,Z9=0
1120 C0=ABS(C0),X$=""; IF C0=2 AND X0>0 THEN X0=X0-1 ELSE IF C0<>2 THEN X0=X0+1; IF C0=4 THEN GOTO 9800
1140 ON X0 GOTO 1200,1500
1200 REM "Selection Code
1210 CALL "ZZENTR","SXUX",A{ALL},A$,X4$,X3$,11,3,1+K9,12,C0,"","{1"+X$,K9$,"KT2RBS00","ZZS","",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 1210,1211
1215 IF C0<0 THEN ON INT(ABS(C0)-2) GOTO 1210,6800,9800,6970
1240 GOTO 1120
1500 REM "
1505 Z9=-1,A2$="",A3$="",A4$="",A5$=""
1510 A1$=A$(1,K9+12)
1520 READ (Z[1],KEY=A1$,DOM=1600)IOL=0310,IOL=0490
1525 Z9=0
1530 IF A$(65+K9,1)<>STR(T0) THEN GOSUB 6900
1590 GOTO 1700
1600 REM "
1605 A$(65+K9,1)=STR(T0)
1610 IF POS(" "<>A1$(7))=0 THEN GOSUB 6450; GOTO 1650
1620 CALL "ZZPROM","2",X3$,Z,"","","",0; ON Z GOTO 1650,1630
1630 GOTO 1000
1690 GOTO 2000
1700 REM "
1790 GOSUB 6200
1800 REM "
1819 IF %HAS_IMAGE_LIB THEN %IL_IMAGE_TYPE$="RH",%IL_IMAGE_KEY$=STP(X3$(178,6)) ! SSP 216198
1820 CALL "ZZPROM","3",X3$,Z,"","","V",X0
1821 %IL_IMAGE_TYPE$="",%IL_IMAGE_KEY$="" ! SSP 216198
1825 ON Z+1 GOTO 1850,1830,1850,1830,1830,1830,7100,6500,1000,4900
1830 IF Z=2 THEN GOSUB 6700; GOTO 1800
1835 GOSUB 7000
1840 ON Z GOTO 5000,1850,1000,9800,1000,6500
1850 REM "MODIFY
1855 X0=X0-1; IF Z9=1 THEN GOTO 1880 ELSE IF Z9=0 THEN Z9=1
1860 EXTRACT (Z[1],ERR=7200,KEY=A1$,DOM=1870)IOL=0310,IOL=0490
1865 C9=1
1870 GOSUB 6200
1890 IF Z<0 THEN GOTO 2040 ELSE GOTO 2000
2000 REM "DATA SEQ
2010 C0=0,X0=-1,X1=1
2020 C9=1,X$="",C0=ABS(C0),X0=X0+1; IF C0=2 THEN IF X0>0 THEN X0=X0-2
2025 IF C0>3 OR X0<0 THEN GOTO 1800
2040 ON X0 GOTO 2100,2150,2200,2250,2350,2400,2450,1800
2100 REM "Report Sub-Title
2110 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,38,3,13+K9,40,C0,"","{3"+X$,"","KT2RBS02","","",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 2110,2111
2140 GOTO 2020
2150 REM "Options
2160 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,11,4,53+K9,12,C0,"","{3"+X$,"","KT2RBS04","","",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 2160,2161
2170 IF POS(" "<>A$(59,12))=0 THEN PRINT @(11,4),"( Normal )",
2190 GOTO 2020
2200 REM "Report Sequence
2205 T$=A$(65+K9,1); IF LEN(L0$)=6 THEN GOTO 2240
2210 CALL "ZZENTR","ZRU",A{ALL},A$,X4$,X3$,38,4,65+K9,1,C0,"","{3"+X$,T9$,"KT2RBS06","","",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 2210,2211
2225 IF T$<>A$(65+K9,1) THEN GOSUB 6900
2240 GOTO 2020
2255 IF C0<>2 THEN L9=0
2260 CALL T0$,ERR=2261,X3$,X4$,Y0$,W$,W{ALL},0,C0,L9
2270 IF ABS(C0)>4 THEN GOSUB 6400; GOTO 2260
2290 GOTO 2020
2350 REM "Fiscal Year
2360 CALL "ZZENTR","SX",A{ALL},A$,X4$,X3$,35,7+L0,73,4,C0,"","{3"+X$,"","KT2RBS14","ZZPA","",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 2370,2371
2380 READ (Z[13],KEY=X3$(9,3)+"G/LYE"+A$(73,4),DOM=2360)B$
2390 GOTO 2020
2410 CALL "ZZENTR","Z",A{ALL},A$,X4$,X3$,51,7+L0,77,2,C0,"","{3"+X$,"","KT2RBS12","","",""
2420 IF A$(77,2)<"01" OR A$(77,2)>B$(13,2) THEN GOTO 2410
2425 A$(79,6)=B$(NUM(A$(77,2))*6+15,6)
2430 PRINT @(65,7+L0),FND$(A$(79,6)),
2431 IF ABS(C0)>3 THEN X0=2; GOTO 2020
2432 FLAG$=""
2433 IF C0<>0 THEN CALL "AR2DTE",X3$,X4$,A$(73,6),FLAG$
2434 IF FLAG$="*" THEN GOTO 2410
2440 GOTO 2020
2450 REM " PRINT THE BIN NUMBER OF EACH COMPONENT PART LOT - SSP 159017
2460 CALL "ZZENTR","Y",A{ALL},A$,X4$,X3$,60,8,85,1,C0,"","{3"+X$,"","FM2MPC10","","",""
3590 GOTO 2020
4910 IF R0$>"" THEN R0$(1,7)="IT",R0$(8,1)="N" ELSE DIM R0$(30); R0$(1,7)="IT",R0$(8,1)="N",R0$(8,9)="NNN    66"; GOSUB 6700
5000 REM "Write Print Data
5001 FLAG$=""
5003 CALL "AR2DTE",X3$,X4$,A$(73,6),FLAG$
5004 IF FLAG$="*" THEN K9$=""; GOTO 9900
5010 IF R0$="" THEN CALL "ZZRPTO",X3$,X4$,Y0$,R0$,R{ALL},4,C0,X0
5020 T1$=L0$((T0-1)*6+1,6),K$=X3$(1,8)
5025 IF R0$(1,1)<>"Q" THEN GOTO 5040 ELSE Z$="07C         07O ZZQ     ",K9$="",K$=DAY,K$=K$(7,2)+K$(1,2)+K$(4,2),K$=R0$(2,6)+X3$(162,1)+R0$(17,1)+K$+STR(TIM*100:"0000")+" "+A$(1,6)+X3$(9,3)+X3$(40,3); IF R0$(2,1)="U" THEN K$(1,2)=X3$(172,2)
5030 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,0; ON Z0 GOTO 5031,9900
5035 ON POS(R0$(1,1)="IQS") GOTO 5090,5040,5065,5080
5040 IF R0$(8,1)="G" THEN GOSUB 5100
5045 WRITE (Z[7],KEY=K$)X3$,X4$,T1$,R0$,W$,IOL=0310; GOTO 5080
5070 WRITE (Z[7],KEY=K$(1,19),DOM=5075)K$,X3$,X4$,T1$,R0$,W$,IOL=0310; GOTO 5090
5075 K$(19,1)=CHR(ASC(K$(19,1))+1); GOTO 5070
5080 IF R0$(8,1)="G" THEN GOSUB 5150
5090 GOTO 9900
5100 REM "GHOST TASK
5110 CALL "ZZGHST",X3$,"?","",G0$,X0
5120 IF X0<>0 THEN CALL "ZZPROM","G1",X3$,S3,"","","",0; ON S3 GOTO 5110,1800
5130 K$(1,LEN(G0$))=G0$; WRITE (Z[13],KEY=K$(1,8))K$+X3$(LEN(K$)+1),X4$
5140 RETURN 
5150 REM "START GHOST
5160 START 30,ERR=5170,K9$,G0$
5165 K9$=""; RETURN 
5170 Q$="+ ( !"+STR(ERR)+")"; CALL "ZZPROM","G2",X3$,S3,Q$,"","",0
5180 EXITTO 1800
5190 RETURN 
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6016)'SB',
6010 GOSUB 6600
6020 CALL T0$,ERR=6021,X3$,X4$,Y0$,W$,W{ALL},2,0,L0
6060 PRINT @(12,7+L0),"Print for Fiscal Year:",@(43,7+L0),"Period:",@(57,7+L0),"Ending:",
6070 PRINT @(16,8+L0),"Print the Bin Number of Each Component Lot?",; REM " SSP# 159017
6165 PRINT (0,ERR=6166)'SF',
6190 RETURN 
6200 REM "DISPLAY DATA
6215 GOSUB 6450
6220 PRINT @(38,3),A$(13+K9,40),@(11,4),A$(53+K9,12),@(38,4),A$(65+K9,1),
6225 IF POS(" "<>A$(59,12))=0 THEN PRINT @(11,4),"( Normal )", ELSE PRINT @(11,4),A$(59,12),
6230 IF K=1 THEN RETURN ELSE CALL T0$,ERR=6231,X3$,X4$,Y0$,W$,W{ALL},1,0,L0
6250 PRINT @(35,9+L0),A$(72,1),@(35,7+L0),A$(73,4),@(51,7+L0),A$(77,2),@(65,7+L0),FND$(A$(79,6)),
6260 PRINT @(60,8),A$(85,1); REM " SSP# 159017
6390 RETURN 
6400 REM "WHOLE SCREEN
6405 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,0
6420 GOSUB 6000
6430 IF C9>=0 THEN GOSUB 6200 ELSE GOSUB 6450
6440 IF ABS(C0)>4 THEN C0=ABS(C0)-5
6445 RETURN 
6450 REM "DISPLAY KEYS
6455 IF C9<0 THEN GOTO 6445
6460 PRINT @(11,3),A$(1+K9,12),
6485 IF POS(" "<>A$(7,12))=0 THEN PRINT @(11,3),"(Standard)" ELSE PRINT @(11,3),A$(7,12),
6490 RETURN 
6500 REM "DELETE
6510 REMOVE (Z[1],KEY=A1$,DOM=6511)
6590 GOTO 1630
6600 REM "ALT KEY DATA READS
6620 PRINT @(0,3+V0),"Selection:",@(25,3+V0),"Description:",@(2,4+V0),"Options:",@(28,4+V0),"Sequence:",@(0,5+V0),Z0$,
6630 PRINT 
6690 RETURN 
6700 REM "ADD ENTRY
6705 IF Z9=0 THEN GOTO 6790
6710 WRITE (Z[1],KEY=A1$)IOL=0310,IOL=0490
6790 Z9=2; RETURN 
6800 REM "NEXT ENTRY IN FILE
6805 ON 10*FPT(C0)+2 GOTO 6850,6806
6810 A1$=KEY(Z[1],END=6895)
6820 IF A1$(1,LEN(K9$))<>K9$ THEN GOTO 6895
6825 A$(1,LEN(A1$))=A1$
6830 GOSUB 6600
6835 GOSUB 6450
6840 GOTO 1515
6850 REM PRIOR ENTRY
6855 CALL "ZZKEYP",ERR=6856,Z[1],A1$; GOTO 6820
6860 CALL "ZZKEYL",ERR=6861,Z[1],A1$; GOTO 6820
6870 GOTO 6895
6890 GOTO 1515
6895 PRINT 'RB',; READ (Z[1],KEY=K9$,DOM=1140); GOTO 1140
6900 REM "
6905 IF T0$<>"" THEN DROP T0$,ERR=6906; GOTO 6905
6910 T0=NUM(A$(65+K9,1))
6915 T0$=L0$((T0-1)*6+1,6),T0$="ZZX"+T0$(1,3)
6920 IF Z9<>0 THEN W$=""
6925 ADDR T0$,ERR=6926
6930 PRINT @(0,6),'CE',; GOSUB 6020; GOSUB 6200
6940 RETURN 
7000 REM "UPDATE
7010 S3=0; IF Z9=1 THEN CALL "ZZPROM","R1",X3$,S3,"","","",0 ELSE IF Z9<0 THEN CALL "ZZPROM","R2",X3$,S3,"","","",0
7080 IF S3=0 THEN GOSUB 6700
7090 RETURN 
7100 REM "OPTIONS
7110 PRINT @(0,3),'CE',
7120 CALL "ZZRPTO",X3$,X4$,Y0$,R0$,R{ALL},4,C0,X0
7125 PRINT @(0,3),'CE',
7130 GOSUB 6400
7140 Z9=1
7190 GOTO 1800
8910 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
9000 REM "ERROR PROCESSING
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9800 REM "
9820 K9$="ZMENU"
9900 REM "END PROGRAM
9905 IF T0$<>"" THEN DROP T0$,ERR=9906; GOTO 9905
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9920 IF K9$>"" THEN RUN K9$
9925 SETERR 9940
9930 Q1$=A1$; EXIT 
9940 BEGIN ; SETESC 9350
9950 RUN "ZMENU"
9999 END 
20000 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
20010 ! 
20020 ! 100 - Initialization
20030 INIT:
20040 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
20050 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
20060 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
20070 GOSUB SETUP_KEYS
20080 _FILE_NAME$="ZZS"+%C$
20090 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
20100 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
20110 _ZZPARM=HFN; OPEN (_ZZPARM)"ZZPARM"; FIND (_ZZPARM,KEY=FID(0)+"      ")X3$,*,X4$
20120 X3$(174,4)=""; CALL "ZGBATC",X3$,X4$,"KT2DAA  ",X9; IF X9=1 THEN CMD_STR$="END"; EXIT ELSE IF X3$(174,4)<>"    " THEN ML_BATCH$=" - Batch No: "+X3$(174,4)
20130 %KTGRBS$=MSG("KTGRBS")+ML_BATCH$
20140 RETURN 
20150 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
20160 CMD_STR$="END"
20170 RETURN 
20180 ! 300 - Set up the message library
20190 SETUP_LIBRARY:
20200 _SV_MSGLIB$=MSG(*)
20210 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
20220 MESSAGE_LIB "*tfmsglib."+_LANG$,ERR=*NEXT; GOTO 20240
20230 MESSAGE_LIB "*tfmsglib.en"
20240 SET_MSG:GOSUB SETUP_MESSAGES
20250 RETURN 
20260 ! 400 - Set up key information
20270 SETUP_KEYS:
20280 _NUMKEYS=1
20290 DIM _KEYS$[1:1]; _KEYS$[1]="PRG_NAME$"
20300 _KEY1=1
20310 RETURN 
20320 ! 500 - Main panel post_display logic
20330 MAIN_POST_DISPLAY:
20340 MESSAGE_LIB _SV_MSGLIB$
20350 GOSUB CLEAR_REC
20360 ARG_1$="KT2RBA"+"            "
20370 DIM RNG(4)
20380 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
20390 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT)A$,R0$,W$,RNG{ALL}; GOTO 20410
20400 DIM A$(200),R0$(128),W$(71),RNG(4)
20410 ! _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
20420 ! EXECUTE "nxt_folder=FLDR."+_F_OBJ$[NUM(RPT_SEQ$)]+".CTL,REFRESH_FLG=1" SSP 203134
20430 NEXT_ID=RPT_VEIW.CTL,REFRESH_FLG=1,RPT_SEQ=NUM(A$(71,1))
20440 GOSUB ASSIGN_LIB
20450 B_START_FISCAL$=START_FISCAL$,B_START_ACCTPD$=START_ACCTPD$; ONLY_OPEN$="1"; PERFORM "GLGMDA;LOAD_FISCAL_YEAR"
20460 IF B_START_FISCAL$<>"" THEN START_FISCAL$=B_START_FISCAL$
20470 IF B_START_ACCTPD$<>"" THEN START_ACCTPD$=B_START_ACCTPD$
20480 REFRESH_FLG=1
20490 GOSUB SEL_DATE; GOSUB ASSIGN_LIB
20500 RETURN 
20510 ! 900 - Wrapup
20520 WRAPUP:
20530 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
20540 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
20550 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
20560 IF _ZZPARM<>0 THEN CLOSE (_ZZPARM); _ZZPARM=0
20570 MESSAGE_LIB _SV_MSGLIB$
20580 SET_PARAM 'KR'=_SV_KR
20590 RETURN 
20600 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
20610 FIND_REC:
20620 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
20630 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
20640 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
20650 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$; _KEY$=STP(_KEY$,1)
20660 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
20670 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
20680 GOSUB PROCESS_READ
20690 GOSUB NUM_TO_STR
20700 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
20710 EXIT 
20720 ! 1200 - New RECORD check
20730 NEW_RECORD:
20740 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
20750 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
20760 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
20770 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
20780 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
20790 RETURN 
20800 ! 1400 - Add RECORD
20810 WRITE_REC:
20820 GOSUB STR_TO_NUM
20830 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
20840 GOSUB REVIEW_WRITE
20850 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20860 CHANGE_FLG=0
20870 NEXT_ID=_FIRST_KEY
20880 EXIT 
20890 ! 1600 - Delete
20900 DELETE_REC:
20910 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$; _KEY$=STP(_KEY$,1)
20920 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
20930 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
20940 IF _X$<>"YES" THEN RETURN 
20950 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
20960 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
20970 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20980 CHANGE_FLG=0
20990 NEXT_ID=_FIRST_KEY
21000 EXIT 
21010 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
21020 ! 1800 - Clear record
21030 CLEAR_REC:
21040 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21050 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
21060 CHANGE_FLG=0
21070 RETURN 
21080 ! 2000 - Browsing mode
21090 ! - Next
21100 NEXT_REC:
21110 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21120 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
21130 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
21140 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
21150 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
21160 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
21170 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
21180 ! 2200 - Prior record
21190 PRIOR_REC:
21200 T1$="IC6"
21210 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21220 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
21230 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
21240 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
21250 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
21260 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
21270 T1$="IC1   "
21280 ! 2400 - First record
21290 FIRST_REC:
21300 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21310 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
21320 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
21330 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
21340 ! 2600 - Last record
21350 LAST_REC:
21360 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21370 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
21380 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
21390 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
21400 ! 3000 - Subroutines
21410 ! Processing required by READ
21420 PROCESS_READ:
21430 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
21440 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
21450 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
21460 CHANGE_FLG=0
21470 RETURN 
21480 ! 3200 - Review record for changes before WRITE
21490 REVIEW_WRITE:
21500 _CHG1$="",_CHG2$=""
21510 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
21520 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
21530 IF _CHG1$="" THEN GOTO CHK2
21540 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
21550 IF _YESNO$="NO" THEN GOTO *RETURN
21560 IF _CHG2$="" THEN GOTO WRT
21570 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
21580 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=*NEXT)A$,R0$,W$,RNG{ALL}; GOTO 21620
21590 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
21600 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
21610 GOSUB NUM_TO_STR
21620 REFRESH_FLG=1
21630 RETURN 
21640 WRITE_ERROR:
21650 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
21660 RETURN 
21670 ! 3500 - Display a record
21680 DISP_REC:
21690 GOSUB NUM_TO_STR
21700 REFRESH_FLG=1
21710 RETURN 
21720 ! 3600 - Busy Record display
21730 BUSY_CHK:
21740 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
21750 IF _D$="NO" THEN EXIT 
21760 RETURN 
21770 ! 3790 - See if changes are to be written
21780 CHECK_CHANGES:
21790 GOSUB ASSIGN_PRG; GOTO WRT
21800 IF _FIRST_KEY=0 THEN _FIRST_KEY=PRG_NAME.CTL,_FIRST_FIELD=RPT_SELEC.CTL
21810 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
21820 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
21830 IF _YESNO$="YES" THEN GOTO WRITE_REC
21840 CHANGE_FLG=0
21850 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
21860 RETURN 
21870 ! 4000 - Get the current key segment number
21880 GET_CURKEY:
21890 FOR _CURKEY=1 TO _NUMKEYS
21900 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
21910 NEXT _CURKEY
21920 RETURN 
21930 ! 9000 - Retrieve messages from the *msglib.xxx library
21940 SETUP_MESSAGES:
21950 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
21960 _MSG_DIRECTORY$=MSG("DIRECTORY")
21970 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
21980 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
21990 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
22000 _MSG_MANDATORY$=MSG("MANDATORY")
22010 _MSG_NEXT$=MSG("NEXT")
22020 _MSG_NON_NUMER$=MSG("NON_NUMER")
22030 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
22040 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
22050 _MSG_PRECEDING$=MSG("PRECEDING")
22060 _MSG_PREFIX$=MSG("PREFIX")
22070 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
22080 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
22090 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
22100 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
22110 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
22120 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
22130 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
22140 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
22150 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
22160 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
22170 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
22180 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
22190 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
22200 _MSG_START_FILE$=MSG("START_FILE")
22210 _MSG_UPDATE$=MSG("UPDATE")
22220 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
22230 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
22240 _MSG_UPD_SAME$=MSG("UPD_SAME")
22250 _MSG_WARNING$=MSG("WARNING")
22260 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
22270 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
22280 RETURN 
22290 END 
30000 ! 10000 - Convert numeric values to string
30010 NUM_TO_STR:
30020 RPT_NUM1$=STR(RPT_NUM1)
30030 RPT_NUM2$=STR(RPT_NUM2)
30040 RETURN 
30050 ! 11000 - Convert numeric strings to number
30060 STR_TO_NUM:
30070 _X$="RPT_NUM1",_X=RPT_NUM1.CTL,RPT_NUM1=NUM(RPT_NUM1$,ERR=NON_NUMERIC)
30080 _X$="RPT_NUM2",_X=RPT_NUM2.CTL,RPT_NUM2=NUM(RPT_NUM2$,ERR=NON_NUMERIC)
30090 RETURN 
30100 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
30110 NEXT_ID=_X
30120 EXIT 
30130 ! 12000 - Check if the required fields have data
30140 CHECK_REQD_FLDS:
30150 _W_FLG=1
30160 RETURN 
30170 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
30180 ENABLE_GROUPS:
30190 IF _ENABLE_FLG=0 THEN GOTO *RETURN
30200 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
30210 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
30220 RETURN 
40000 VIEW_REPORT:
40010 PRINT_REPORT:
40020 ! View Report Routine.
40030 IOLIST A$
40040 IOLIST R0$,W$
40050 ZZPARM=HFN; OPEN (ZZPARM)"ZZPARM"; READ (ZZPARM,KEY=FID(0)+"      ")X3$,*,X4$; READ (ZZPARM,KEY="STATI/C")T1$,F0
40060 ZZP=HFN; OPEN (ZZP)"ZZP"
40070 DIM P0$(128) ! SSP#205962
40080 ! 
40090 IOLIST:IOLIST X3$,M1$,X4$,D0$,X$,A9$
40100 GOSUB SEL_DATE; GOSUB ASSIGN_PRG; GOSUB WRT
40110 A$(1,6)="KT2RBA"
40120 K$=X3$(1,8),%GUI=1
40130 %B_WINDATE_FMT$=%WINDATE_FMT$,%WINDATE_FMT$="YYYYMMDD",JJ$=DTE(0:"%Yl%Mz%Dz"); CALL "ZZWDTE;VALIDATE",JJ$,JJJ$,JJJJ$; X3$(21,6)=JJ$,X3$(15,6)=JJ$ ! SSP#205962
40140 Q$="KT2DAA",X3$(146,6)=Q$; CALL "ZZAUDT",X3$,Q$+P0$(78),_ZZPARM,X9; X3$(185,1)="A",X3$(188,9)=P0$(23,9); WRITE (_ZZPARM,KEY=X3$(1,8))IOL=IOLIST ! SSP#205962
40150 WRITE (ZZP,KEY=K$)X3$,X4$,T1$,R0$,W$,A$
40160 WIN_D$=FIN(0),WIN_CURR=DEC(WIN_D$(10,1))
40170 CALL "KT2RBA"
40180 FIND RECORD (_ZZPARM,KEY=FID(0)+"      ")X3$; X3$(174,4)="",X3$(178,6)="",X3$(185,1)=""; WRITE RECORD (_ZZPARM,KEY=FID(0)+"      ")X3$
40190 CMD_STR$="END"
40200 EXIT 
40210 ! 25000,10
40220 ASSIGN_LIB:
40230 ! Output Option
40240 IF NUM(A$(71,1))=0 THEN A$(71,1)="1"
40250 PRT_MODE$=R0$(1,1),RPT_OUTDEV$=R0$(2,2)
40260 RPT_VERT$=R0$(9,1),RPT_HORIZ$=R0$(10,1)
40270 RPT_AUX1$=R0$(11,1),RPT_AUX2$=R0$(12,1)
40280 RPT_LINES$=R0$(15,2),RPT_FORMCODE$=R0$(17,1)
40290 RPT_JOBCARD$=MID(R0$,65,60),RPT_JOBCARD_FLG$=MID(R0$,125,1)
40300 RPT_AUX3$=R0$(13,1),RPT_AUX4$=R0$(14,1)
40310 ! Selection Options
40320 RPT_SELEC$=A$(7,12),RPT_DESC$=A$(19,40),RPT_OPT$=A$(59,12),RPT_SEQ$=A$(71,1)
40325 IF NUM(A$(77,2))=0 THEN A$(77,2)="01"
40330 START_FISCAL$=A$(73,4),START_ACCTPD$=A$(77,2)
40335 PRT_BIN$=A$(85,1)
40340 IF STP(RPT_OPT$)="" THEN RPT_OPT$=""
40350 IF STP(RPT_SELEC$)="" THEN RPT_SELEC$=""
40360 REFRESH_FLG=1; DIM S$(10,"~")
40370 RETURN 
40380 SWITCH RPT_SEQ$
40390 CASE "5"
40400 DIM W$(74,"~")
40410 W$(1,10)=VEND_START$; IF VEND_END$<>"" THEN W$(15,10)=VEND_END$
40420 W$(11,4)=PLANT_START$; IF PLANT_END$<>"" THEN W$(25,4)=PLANT_END$
40430 W$(29,3)=ML_PROD_START$; IF ML_PROD_END$<>"" THEN W$(32,3)=ML_PROD_END$
40440 W$(35,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(55,10)=ML_CUST_END$
40450 W$(45,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(65,10)=ML_ITEM_END$
40460 BREAK
40470 CASE "2"
40480 DIM W$(47,"~")
40490 W$(1,4)=ML_PROD_START$; IF ML_PROD_END$<>"" THEN W$(4,3)=ML_PROD_END$
40500 W$(7,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(27,10)=ML_CUST_END$
40510 W$(17,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(37,10)=ML_ITEM_END$
40520 T1$="IC5   "
40530 BREAK
40540 CASE "3"
40550 DIM W$(55,"~")
40560 W$(1,4)=ML_LOC_START$; IF ML_LOC_END$<>"" THEN W$(5,4)=ML_LOC_END$
40570 W$(9,3)=ML_PROD_START$; IF ML_PROD_END$<>"" THEN W$(12,3)=ML_PROD_END$
40580 W$(15,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(25,10)=ML_CUST_END$
40590 W$(35,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(45,10)=ML_ITEM_END$
40600 BREAK
40610 CASE "1"
40620 ML_CUST_START$=STP(W$(1,10)); IF W$(21,10)<>S$ THEN ML_CUST_END$=W$(21,10)
40630 ML_ITEM_START$=STP(W$(11,10)); IF W$(31,10)<>S$ THEN ML_ITEM_END$=W$(31,10)
40640 ! W$(41,4)=ML_LOC_START$; IF ML_LOC_END$<>"" THEN W$(45,4)=ML_LOC_END$
40650 T1$="IC0   "
40660 BREAK
40670 CASE "4"
40680 DIM W$(56,"~")
40690 W$(29,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(39,10)=ML_ITEM_END$
40700 W$(9,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(19,10)=ML_CUST_END$
40710 W$(1,4)=ML_SALESMAN_START$; IF ML_SALESMAN_END$<>"" THEN W$(5,4)=ML_SALESMAN_END$
40720 W$(49,4)=ML_LOC_START$; IF ML_LOC_END$<>"" THEN W$(53,4)=ML_LOC_END$
40730 A$(80,3)=MAIL_CODE_1$,A$(83,7)=NOT_USED$,T1$="ARU   "
40740 BREAK
40750 END SWITCH 
40760 RETURN 
40770 RETURN 
40780 ASSIGN_PRG:
40790 A$(1,6)=ARG_1$,A$(7,12)=RPT_SELEC$,A$(19,40)=RPT_DESC$,A$(59,12)=RPT_OPT$,A$(71,1)=RPT_SEQ$
40800 A$(59,12)=RPT_OPT$; A$(71,1)=RPT_SEQ$
40810 ! 
40820 R0$(1,1)=PRT_MODE$,R0$(2,6)=RPT_OUTDEV$(1,2)+"    ",R0$(9,1)=RPT_VERT$,R0$(10,1)=RPT_HORIZ$
40825 IF NOT(NUL(VIEW$)) THEN R0$(2,2)=VIEW$
40830 R0$(11,1)=RPT_AUX1$,R0$(12,1)=RPT_AUX2$,R0$(13,1)=RPT_AUX3$,R0$(14,1)=RPT_AUX4$
40840 R0$(15,2)=RPT_LINES$,R0$(17,1)=RPT_FORMCODE$,R0$(65,60)=RPT_JOBCARD$
40850 R0$(125,1)=RPT_JOBCARD_FLG$; DIM W$(71,"~")
40860 A$(73,4)=START_FISCAL$,A$(77,2)=START_ACCTPD$,A$(79,6)=REC_DAT$(NUM(START_ACCTPD$)*6-5,6)
40865 A$(85,1)=PRT_BIN$
40870 IF ID$="RPT_VEIW" THEN R0$(2,2)="PV"
40880 RETURN 
40890 SWITCH RPT_SEQ$
40900 CASE "5"
40910 DIM W$(74,"~")
40920 W$(1,10)=VEND_START$; IF VEND_END$<>"" THEN W$(15,10)=VEND_END$
40930 W$(11,4)=PLANT_START$; IF PLANT_END$<>"" THEN W$(25,4)=PLANT_END$
40940 W$(29,3)=ML_PROD_START$; IF ML_PROD_END$<>"" THEN W$(32,3)=ML_PROD_END$
40950 W$(35,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(55,10)=ML_CUST_END$
40960 W$(45,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(65,10)=ML_ITEM_END$
40970 BREAK
40980 CASE "2"
40990 DIM W$(47,"~")
41000 W$(1,4)=ML_PROD_START$; IF ML_PROD_END$<>"" THEN W$(4,3)=ML_PROD_END$
41010 W$(7,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(27,10)=ML_CUST_END$
41020 W$(17,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(37,10)=ML_ITEM_END$
41030 T1$="IC5   "
41040 BREAK
41050 CASE "3"
41060 DIM W$(55,"~")
41070 W$(1,4)=ML_LOC_START$; IF ML_LOC_END$<>"" THEN W$(5,4)=ML_LOC_END$
41080 W$(9,3)=ML_PROD_START$; IF ML_PROD_END$<>"" THEN W$(12,3)=ML_PROD_END$
41090 W$(15,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(25,10)=ML_CUST_END$
41100 W$(35,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(45,10)=ML_ITEM_END$
41110 BREAK
41120 CASE "1"
41130 DIM W$(41,"~")
41140 W$(1,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(21,10)=ML_CUST_END$
41150 W$(11,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(31,10)=ML_ITEM_END$
41160 ! W$(41,4)=ML_LOC_START$; IF ML_LOC_END$<>"" THEN W$(45,4)=ML_LOC_END$
41170 T1$="IC0   "
41180 BREAK
41190 CASE "4"
41200 DIM W$(56,"~")
41210 W$(29,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(39,10)=ML_ITEM_END$
41220 W$(9,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(19,10)=ML_CUST_END$
41230 W$(1,4)=ML_SALESMAN_START$; IF ML_SALESMAN_END$<>"" THEN W$(5,4)=ML_SALESMAN_END$
41240 W$(49,4)=ML_LOC_START$; IF ML_LOC_END$<>"" THEN W$(53,4)=ML_LOC_END$
41250 A$(80,3)=MAIL_CODE_1$,A$(83,7)=NOT_USED$,T1$="ARU   "
41260 BREAK
41270 END SWITCH 
41280 RETURN 
41290 RETURN 
41300 SEL_DATE:
41310 IF LEN(START_FISCAL$)>4 OR STP(START_FISCAL$)="" THEN YEAR$=%CR_YEAR$ ELSE YEAR$=START_FISCAL$
41320 IF LEN(START_ACCTPD$)>2 OR STP(START_ACCTPD$)="" THEN PER$=%CR_PD$ ELSE PER$=START_ACCTPD$
41330 FIND (_ZZPARM,KEY=%C$+"G/LYE"+YEAR$)REC_DAT$; REC_DAT$=REC_DAT$(21)
41340 DIM CUR_DATE$[12]
41350 FOR XX=1 TO 12; CUR_DATE$[XX]=FND$(REC_DAT$(XX*6-5,6)); NEXT XX
41360 ML_ENDING_PERIOD$=CUR_DATE$[NUM(PER$)]
41370 REFRESH_FLG=1
41380 RETURN 
56000 ! "203134-Error in Kit Module Posting                                 
56001 REM "205962-Kit_Production_Audit_Report_030711768728.PDF                
56002 REM "216198-Need to add Kit Production report to Image Library          
