0010 REM "Inventory Kit Component Setup <KT2MAA>
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 11/13/17 - 13.883611 - tma - SSP# 291708
0037 REM "291708-In the KIT Component setup for special charge, why does     
0040 REM "Copyright 2017 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000
0110 X0$="KT2MAA",X1$="Inventory Kit Component Setup",K9$="",K9=0
0120 DIM Z0$(80,"-")
0125 V8$="000811152999"
0130 K0=20,K1=1
0135 C9=-1
0140 M0$="###,###,##0",M2$="###,##0",M3$="###,###.00"
0165 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0300 REM "IOLISTS
0310 IOLIST A$(1),A[0],A[1],A[2],A[3],A[4]
0320 IOLIST B$,B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15],B[16],B[17],B[18],B[19],B[20],B[21],B[22],B[23],B[24],B[25],B[26],B[27],B[28],B[29],B[30],B[31],B[32],B[33],B[34],B[35],B[36],B[37],B[38],B[39],B[40]
0325 IOLIST B1$,B1[0],B1[1],B1[2],B1[3],B1[4],B1[5],B1[6],B1[7],B1[8],B1[9],B1[10],B1[11],B1[12],B1[13],B1[14],B1[15],B1[16],B1[17],B1[18],B1[19],B1[20],B1[21],B1[22],B1[23],B1[24],B1[25],B1[26],B1[27],B1[28],B1[29],B1[30],B1[31],B1[32],B1[33],B1[34],B1[35],B1[36],B1[37],B1[38],B1[39],B1[40]
0370 IOLIST I$,I[0],I[1]
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01X KT0...  02O IC0...  03O FM0...  10O AR1...  11O FMP...  13O ZZPARM  16O ARV...  17O AR3...  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0550 FIND (Z[13],KEY=X3$(9,3)+"KIT")P1$
0560 FIND (Z[13],KEY=X3$(9,3)+"I/C")P0$
0590 READ (Z[1],KEY=K9$,DOM=0591)
0600 REM "
0615 DIM M5[1]; M5$="###,###.00 ",M5[0]=621,M5[1]=2; IF P0$(45,1)>"2" THEN DIM M5$(11,"0"); M5[1]=NUM(P0$(45,1)),M5$(1,10-M5[1])="##########",M5$(POS("0"=M5$),1)=".",M5[0]=(10-M5[1])*100+M5[1]*10
0620 V1=2
1000 REM "
1010 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,X2
1035 DIM A$(80),A[4],B$(187),B[40],B1$(187),B1[40],I[1]
1070 GOSUB 6000; GOSUB 6450
1100 REM "KEY SEQ
1110 X0=-1,C0=0,X1=0,C9=0,Z9=0
1120 C0=ABS(C0),X$=""; IF C0=2 AND X0>0 THEN X0=X0-1 ELSE IF C0<>2 THEN X0=X0+1; IF C0=4 THEN GOTO 9900
1140 ON X0 GOTO 1200,CREATE_PO,LINE_TYPE,1250,1500
1200 REM "Item code
1205 IF ABS(C0)<>2 AND LEN(A1$)>1 THEN B$(1,20)=A1$(1,20),C0=1; GOSUB 7600; GOTO 1120
1208 A0=2,N0=X0
1210 CALL "IC2ICE",X3$,X4$,B$,B[15],A0,Z[2],Z[10],C0,X0,P0$(38,1); IF ABS(C0)>4 THEN GOSUB 6400; GOTO 1210
1215 X0=N0; IF C0<0 THEN ON INT(ABS(C0)-2) GOTO 1210,6800,9700,6970
1220 FIND (Z[2],KEY=B$(1,20),DOM=1200)IOL=0320
1240 GOTO 1120
1250 REM "Component Item Code
1252 IF A$(50,1)="S" THEN GOTO SPECIAL_CHARGE
1258 A0=2
1260 Q$=P0$(38,1)+"10",N0=X0; CALL "IC2ICE",X3$,X4$,B1$,B1[15],A0,Z[2],Z[10],C0,X0,Q$; X0=N0; IF ABS(C0)>4 THEN GOSUB 6400; GOTO 1260
1261 IF ABS(C0)=2 THEN GOTO 1120
1262 IF C0<0 THEN ON INT(ABS(C0)-2) GOTO 1260,6800,9700,6970
1265 IF B1$(1,20)=B$(1,20) THEN CALL "ZZPROM",".4",X3$,0,"Component's Item Code cannot be the same as its Kit","","",0; GOTO 1250
1270 FIND (Z[2],KEY=B1$(1,20),DOM=1250)IOL=0325
1275 FIND (Z[13],KEY="U/M"+B1$(124,4),DOM=1276)IOL=0370
1290 GOTO 1120
1500 REM "
1505 Z9=-1
1510 A1$=B$(1,20)+B1$(1,20),A$(1,LEN(A1$))=A1$
1520 READ (Z[1],KEY=A1$,DOM=1600)IOL=0310
1525 Z9=0
1540 GOSUB 6600
1590 GOTO 1700
1600 REM "
1620 CALL "ZZPROM","2",X3$,Z,"","","",0; ON Z GOTO 1650,1630
1630 GOTO 1000
1660 A$(41,4)=B1$(124,4),A[0]=B1[15]
1665 IF POS(" "<>P1$(7,4))>0 THEN A$(45,4)=P1$(7,4)
1667 IF A$(50,1)="S" THEN A$(45,4)=DIM(4)
1670 GOSUB 6250
1690 GOTO 2000
1700 REM "
1790 GOSUB 6200
1800 REM "
1820 CALL "ZZPROM",STR(6+C9),X3$,Z,"","","V",X0; ON Z GOTO 1850,6500,1630,6700
1830 GOTO 2000
1850 REM "MODIFY
1855 X0=X0-1; IF Z9=1 THEN GOTO 1880 ELSE IF Z9=0 THEN Z9=1
1860 EXTRACT (Z[1],KEY=A1$,DOM=1870)IOL=0310
1865 C9=1
1870 GOSUB 6200
1890 IF Z<0 THEN GOTO 2035 ELSE GOTO 2000
2000 REM "DATA SEQ
2010 C0=0,X0=-1,X1=1
2020 C9=1,X$="",C0=ABS(C0),X0=X0+1; IF C0=2 THEN IF X0>0 THEN X0=X0-2
2025 IF INT(C0)=3 THEN GOSUB 7300 ELSE IF C0>3 OR X0<0 THEN GOTO 1800
2040 ON X0 GOTO 2250,2100,2150,2200,CSR,1800
2100 REM "U/M
2101 IF A$(50,1)="S" THEN A$(41,4)=_FMP$(55,4); PRINT @(12,18),_FMP$(55,4),; GOTO 2120
2110 CALL "ZZENTR","SU",A{ALL},A$,X4$,X3$,12,18,41,4,C0,"","{3"+X$,"U/M","KT2MAA02","U/M","ZZ2MUA",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 2110,2111
2120 FIND (Z[13],KEY="U/M"+A$(41,4),DOM=2110)IOL=0370
2130 GOSUB 7500
2140 GOTO 2020
2150 REM "Qty/UM
2152 IF I$(20,1)<>"Y" THEN GOTO 2160
2154 IF I[0]<>0 THEN A[0]=I[0] ELSE A[0]=I[1]
2156 PRINT @(22,18),A[0]:M2$,; GOTO 2180
2160 CALL "ZZENTR","N&",A{ALL},A$,X4$,X3$,22,18,0,600,C0,M2$,"{3"+X$,"","KT2MAA04","","",""
2180 GOSUB 7500
2190 GOTO 2020
2200 REM "Quantity Required
2205 IF MID(_FMP$,61,1)="Y" AND A$(50,1)="S" THEN A(1)=1; PRINT @(35,18),A(1):M0$; GOSUB 7500; GOTO 2020
2210 CALL "ZZENTR","N&",A{ALL},A$,X4$,X3$,35,18,1,920,C0,M0$,"{3"+X$,"","IC2MAB06","","",""
2220 GOSUB 7500
2240 GOTO 2020
2250 REM "Warehouse Location
2255 X$="If not entered, then the warehouse of the item being produced will be used"; DIM Q$(11); Q$(1,1)="D"
2256 IF A$(50,1)="S" THEN GOTO 2020
2260 CALL "ZZENTR","SZU",A{ALL},A$,X4$,X3$,3,18,45,4,C0,"","{3"+X$,Q$,"KT2MAA12","FM0D","",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 2260,2261
2270 IF POS(" "<>A$(45,4))>0 THEN FIND (Z[3],KEY=Q$+A$(45,4),DOM=2260)
2290 GOTO 2020
2300 CREATE_PO:
2305 A$(1,20)=B$(1,20)
2310 CALL "ZZENTR","Y",A{ALL},A$,X4$,X3$,14,8,49,1,C0,"","{3"+X$,"","FM2SHA12","","",""
2320 GOTO 1120
2400 LINE_TYPE:
2410 X$="I=Inventory / S=Special Charge",A$(50,1)="I"
2420 CALL "ZZENTR","SZXUR",A{ALL},A$,X4$,X3$,32,8,50,1,C0,"","{3"+X$,"IS","FM2SHA12","","",""
2430 GOTO 1120
2500 SPECIAL_CHARGE:
2510 PRINT 'SB',@(0,13),"Sp Charge",'SF'
2550 CALL "ZZENTR","SUX",A{ALL},A$,X4$,X3$,0,14,31,10,C0,"","{2"+X$,"X","","FMPX","",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 2550,2551
2551 B1$(11,10)=A$(31,10)
2552 FIND (Z(11),KEY="X"+A$(31,10),DOM=2510)_FMP$,FMPX_SELL_QTY,FMPX_PRICE,FMPX_COST
2553 PRINT @(11,14),_FMP$(52,3),@(40,14),_FMP$(12,40),@(59,13),_FMP$(55,4)
2555 IF A$(50,1)="S" THEN GOSUB 34006
2558 GOTO 1120
2560 PRINT @(0,3),'CE','SB',; GOSUB 6000; GOSUB 6200; GOSUB 6450
2570 PRINT 'SB',@(0,13),"Sp Charge",'SF'
2580 READ (Z[11],KEY="X"+A$(31,10),DOM=2510)_FMP$
2600 CSR:
2601 IF A$(50,1)="S" THEN GOTO 2640
2610 CALL "ZZENTR","SU",A{ALL},A$,X4$,X3$,72,18,51,4,C0,"","{3"+X$,"","KT2MAA02","AR3","ZZ2MUA",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 2610,2611
2615 FIND (Z[17],KEY=A$(51,4),DOM=2610)
2620 IF A$(50,1)="S" THEN GOTO 2640
2630 GOTO 2020
2640 PRICES:
2645 IF _FMP$(61,1)="Y" THEN GOTO 2680
2650 PRINT @(0,20),"  Cost: ", ! ssp#291708
2660 CALL "ZZENTR","N&",A{ALL},A$,X4$,X3$,7,20,3,922,C0,M3$,"{3"+X$,"","KT2MAA04","","",""
2662 A(4)=A(2)*A(3)
2665 PRINT @(0,21),"  Ext.:",A(4):M3$,
2670 GOTO 2020
2680 EXTENSION:
2690 PRINT @(0,21),"  Ext.: ",
2700 CALL "ZZENTR","N&",A{ALL},A$,X4$,X3$,7,21,4,922,C0,M3$,"{3"+X$,"","KT2MAA04","","",""
2710 GOTO 2020
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6016)'SB',
6060 CALL "IC2ICE",X3$,X4$,"",0,0,0,0,0,0,P0$(38,1)
6065 PRINT @(1,8),"Create P/O ? ",@(20,8),"Line Type :",
6070 PRINT @(0,9),Z0$,@(30,9),"Components Specified Below",@(0,10),Z0$,
6080 Q$=P0$(38,1)+"10"; CALL "IC2ICE",X3$,X4$,"",0,0,0,0,0,0,Q$
6090 PRINT @(3,16),"Whse",@(12),"U/M",@(23),"Qty/UM",@(32),"Quantity Required",@(72),"CSR",@(58),"= Pieces",@(0,17),Z0$,
6190 RETURN 
6200 REM "DISPLAY DATA
6215 GOSUB 6450
6250 PRINT @(3,18),A$(45,4),@(12,18),A$(41,4),@(22,18),A[0]:M2$,@(35,18),A[1]:M0$,@(72,18),MID(A$,51,4),@(14,8),A$(49,1),@(32,8),A$(50,1) ! SSP#218894
6260 GOSUB 7520
6270 IF A$(50,1)="S" THEN PRINT @(0,20),"  Cost:",A(3):M3$,@(0,21),"  Ext.:",A(4):M3$ ! ssp#291708
6390 RETURN 
6400 REM "WHOLE SCREEN
6405 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,0
6420 GOSUB 6000
6430 IF C9>=0 THEN GOSUB 6200 ELSE GOSUB 6450
6440 IF ABS(C0)>4 THEN C0=ABS(C0)-5
6445 RETURN 
6450 REM "DISPLAY KEYS
6455 IF C9<0 THEN GOTO 6445
6465 CALL "IC2ICE",X3$,X4$,B$,B[15],1,Z[2],Z[10],0,0,P0$(38,1)
6470 Q$=P0$(38,1)+"10"; CALL "IC2ICE",X3$,X4$,B1$,B1[15],1,Z[2],Z[10],0,0,Q$
6471 IF STP(_FMP$)="" THEN READ (Z[11],KEY="X"+A$(31,10),DOM=*NEXT)_FMP$
6475 IF A$(50,1)="S" THEN PRINT @(0,14),MID(_FMP$,2,10),@(11,14),MID(_FMP$,52,3),@(40,14),MID(_FMP$,12,40),@(59,13),MID(_FMP$,55,4)
6490 RETURN 
6500 REM "DELETE
6520 REMOVE (Z[1],KEY=A1$,DOM=6521)
6590 GOTO 1630
6600 REM "ALT KEY DATA READS
6610 FIND (Z[13],KEY="U/M"+A$(41,4),DOM=6611)IOL=0370
6620 FIND (Z[2],KEY=A1$(1,20),DOM=6621)IOL=0320
6630 FIND (Z[2],KEY=A1$(21,20),DOM=6631)IOL=0325
6690 RETURN 
6700 REM "ADD ENTRY
6710 WRITE (Z[1],KEY=A1$)IOL=0310
6790 GOTO 1630
6800 REM "NEXT ENTRY IN FILE
6805 ON 10*FPT(C0)+2 GOTO 6850,6806
6810 A1$=KEY(Z[1],END=6895)
6820 IF A1$(1,LEN(K9$))<>K9$ THEN GOTO 6895
6825 A$(1,LEN(A1$))=A1$
6830 GOSUB 6600
6835 GOSUB 6450
6840 GOTO 1515
6850 REM PRIOR ENTRY
6855 CALL "ZZKEYP",ERR=6856,Z[1],A1$; GOTO 6820
6860 CALL "ZZKEYL",ERR=6861,Z[1],A1$; GOTO 6820
6870 GOTO 6895
6890 GOTO 1515
6895 PRINT 'RB',; READ (Z[1],KEY=K9$,DOM=1140); GOTO 1140
7300 REM 
7310 ON FPT(C0)*10 GOTO 7390,7325,7330,7390
7325 IF V8$="" THEN X0=X0+4; GOTO 7390 ELSE X0=NUM(V8$(POS(STR(X0:"00")<=V8$,2),2)); GOTO 7390
7330 IF V8$="" THEN X0=X0-6; GOTO 7335 ELSE X0=POS(STR(X0-1:"00")<=V8$,2)-2; IF X0<0 THEN X0=0; GOTO 7390 ELSE X0=NUM(V8$(X0,2)); GOTO 7390
7335 IF X0<0 THEN X0=0; GOTO 7390
7390 C0=3; RETURN 
7500 REM "CALC AND PRINT #PIECES
7510 IF I$(20,1)="Y" THEN A[2]=A[1] ELSE A[2]=A[1]*A[0]
7520 PRINT @(55,18),A[2]:M0$,
7540 RETURN 
7600 REM "
7610 FIND (Z[2],KEY=B$(1,20),DOM=7611)IOL=0320
7620 CALL "IC2ICE",X3$,X4$,B$,B[15],1,Z[2],Z[10],0,0,P0$(38,1)
7640 RETURN 
9000 REM "ERROR PROCESSING
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9800 REM "EXIT PROGRAM
9900 REM "END PROGRAM
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
15500 PO:! 15500,10
15510 %PO_NUM$=SUB(PO_NUMBER$,"-",""),%NO_DELETE=1,_SAVE_CUSTOMER$=%CUSTOMER$
15520 %KT2DAA=1; PROCESS "POGMAA.OR","../POG/PO.EN"; %KT2DAA=0
15530 %PO_NUM$="",%NO_DELETE=0
15540 %CUSTOMER$=_SAVE_CUSTOMER$
15890 RETURN 
20000 ! 100 - Initialization
20020 INIT:
20040 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
20060 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
20080 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
20100 GOSUB SETUP_KEYS
20120 _FILE_NAME$="KT0"+%C$
20140 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
20160 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
20180 _FILE_NAME$="IC0"+%C$,_IC0=HFN; OPEN (_IC0,IOL=*,REC=_IC0$,ERR=OPEN_ERR)_FILE_NAME$
20200 _FILE_NAME$="FMP"+%C$,_FMP=HFN; OPEN (_FMP,ERR=OPEN_ERR)_FILE_NAME$
20220 _FILE_NAME$="FM0"+%C$,_FM0=HFN; OPEN (_FM0,IOL=*,REC=_FM0$,ERR=OPEN_ERR)_FILE_NAME$
20240 _FILE_NAME$="AR1"+%C$,_AR1=HFN; OPEN (_AR1,IOL=*,REC=_AR1$,ERR=OPEN_ERR)_FILE_NAME$
20250 _FILE_NAME$="IC1"+%C$,_IC1=HFN; OPEN (_IC1,IOL=*,REC=_IC1$,ERR=OPEN_ERR)_FILE_NAME$ ! SSP 208675
20260 _FILE_NAME$="ZZPARM",_ZZP=HFN; OPEN (_ZZP,ERR=OPEN_ERR)_FILE_NAME$; READ (_ZZP,KEY=FID(0)+"      ")X3$,*,X4$; READ (_ZZP,KEY=X3$(9,3)+"KIT")P1$; READ (_ZZP,KEY=X3$(9,3)+"I/C")P0$
20270 _ARV=HFN; OPEN (_ARV)"ARV"+%C$
20280 RETURN 
20300 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
20320 CMD_STR$="END"
20340 RETURN 
20360 ! 300 - Set up the message library
20380 SETUP_LIBRARY:
20400 _SV_MSGLIB$=MSG(*)
20420 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
20440 MESSAGE_LIB "*tfmsglib."+_LANG$,ERR=*NEXT; GOTO 20480
20460 MESSAGE_LIB "*tfmsglib.en"
20480 SET_MSG:GOSUB SETUP_MESSAGES
20500 RETURN 
20520 ! 400 - Set up key information
20540 SETUP_KEYS:
20560 _NUMKEYS=6
20580 DIM _KEYS$[1:6]; _KEYS$[1]="CUST_DIV$",_KEYS$[2]="CUST_CODE$",_KEYS$[3]="KIT_ITEM_CODE$",_KEYS$[4]="CUST_DIV_2$",_KEYS$[5]="CUST_CODE_2$",_KEYS$[6]="COMPONENT_ITEM_CODE$"
20600 _KEY1=1
20620 RETURN 
20640 ! 500 - Main panel post_display logic
20660 MAIN_POST_DISPLAY:
20680 MESSAGE_LIB _SV_MSGLIB$
20700 GOSUB CLEAR_REC
20720 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
20740 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
20760 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
20780 RETURN 
20800 ! 900 - Wrapup
20820 WRAPUP:
20840 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
20860 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
20880 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
20900 MESSAGE_LIB _SV_MSGLIB$
20920 SET_PARAM 'KR'=_SV_KR
20940 RETURN 
20960 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
20980 FIND_REC:
21000 _KCNT=7,_KEY$=CUSTOMER$+KIT_ITEM_CODE$+CUSTOMER2$+COMPONENT_ITEM_CODE$
21020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
21040 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
21060 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; IF ID$="SPECIAL_CHARGE" THEN CALL "*WINGRP;ENABLE",FIELDS.GRP$; CALL "*WINGRP;ENABLE",BUTTONS.GRP$ END_IF ; RETURN ! If multiple key segments, enable the _KCNT segment
21080 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
21100 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
21120 YES=0; READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT); YES=1
21140 GOSUB PROCESS_READ
21160 GOSUB NUM_TO_STR
21180 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
21200 EXIT 
21220 ! 1200 - New RECORD check
21240 NEW_RECORD:
21260 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
21280 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
21300 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
21320 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
21340 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
21360 QTY_REQ_UM$=INVENTORY_UM1$,UM_DESC2$=UM_DESC1$,QTY_REQ_QTY_PER$=INVENTORY_QTY_PER1$,REFRESH_FLG=1
21380 IF STP(USE_WHSE_LOC$)="" THEN ML_LOC_DESC$=""
21400 RETURN 
21420 ! 1400 - Add RECORD
21440 WRITE_REC:
21460 GOSUB STR_TO_NUM
21480 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
21500 GOSUB REVIEW_WRITE
21520 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
21540 CHANGE_FLG=0
21560 NEXT_ID=COMPONENT_ITEM_CODE.CTL; GOSUB CLEAR_COMPONENTS
21565 CREATE_PO$="N",LINE_TYPE$="I" ! SSP218894
21580 EXIT 
21600 ! 1600 - Delete
21620 DELETE_REC:
21640 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
21660 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
21680 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
21700 IF _X$<>"YES" THEN RETURN 
21720 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
21740 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
21760 CHANGE_FLG=0
21780 GOSUB CLEAR_REC; NEXT_ID=KIT_ITEM_CODE.CTL,LINE_TYPE$="I"
21800 EXIT 
21820 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
21840 ! 1800 - Clear record
21860 CLEAR_REC:
21880 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21900 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
21920 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
21940 CHANGE_FLG=0,YES=0
21960 RETURN 
21980 ! 2000 - Browsing mode
22000 ! - Next
22020 NEXT_REC:
22040 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
22060 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
22080 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
22100 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
22120 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
22140 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
22160 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
22180 ! 2200 - Prior record
22200 PRIOR_REC:
22220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
22240 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
22260 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
22280 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
22300 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
22320 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
22340 ! 2400 - First record
22360 FIRST_REC:
22380 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
22400 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
22420 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
22440 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
22460 ! 2600 - Last record
22480 LAST_REC:
22500 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
22520 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
22540 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
22560 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
22580 ! 3000 - Subroutines
22600 ! Processing required by READ
22620 PROCESS_READ:
22640 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
22660 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
22680 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
22700 CHANGE_FLG=0,CUSTOMER$=CUST_DIV$+CUST_CODE$,CUSTOMER2$=CUST_DIV_2$+CUST_CODE_2$
22710 SPECIAL_CHARGE$=COMPONENT_ITEM_CODE$,ITEM$=SPECIAL_CHARGE$
22715 IF CREATE_PO$=" " THEN CREATE_PO$="N"
22720 GOSUB PROCESS_KIT_ITEM; GOSUB PROCESS_COMP_ITEM; GOSUB PROCESS_CUST; GOSUB PROCESS_CUST2
22740 GOSUB PROCESS_WHSE; GOSUB PROCESS_UM
22750 YES=1
22755 IF STP(PO_NUMBER$)<>"" THEN PO_BUTTON.CTL'TEXT$=MSG("PO_NUM")+" : "+FN%ZZDISP$(PO_NUMBER$,"P/O")
22760 RETURN 
22780 ! 3200 - Review record for changes before WRITE 
22800 REVIEW_WRITE:
22820 _CHG1$="",_CHG2$=""
22840 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT,ERR=*NEXT)
22860 GOSUB DETERMINE_CHGS
22880 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
22900 IF _CHG1$="" THEN GOTO CHK2
22920 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
22940 IF _YESNO$="NO" THEN GOTO *RETURN
22960 IF _CHG2$="" THEN GOTO WRT
22980 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
23000 GOSUB INCORPORATE_CHGS
23020 WRT: _KEY$=CUSTOMER$+KIT_ITEM_CODE$+CUSTOMER2$+COMPONENT_ITEM_CODE$
23025 WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
23040 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
23060 GOSUB NUM_TO_STR
23080 REFRESH_FLG=1
23090 YES=0
23100 RETURN 
23120 WRITE_ERROR:
23140 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
23160 RETURN 
23180 ! 3500 - Display a record
23200 DISP_REC:
23220 GOSUB NUM_TO_STR
23240 REFRESH_FLG=1
23260 RETURN 
23280 ! 3600 - Busy Record display
23300 BUSY_CHK:
23320 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
23340 IF _D$="NO" THEN EXIT 
23360 RETURN 
23380 ! 3790 - See if changes are to be written
23400 CHECK_CHANGES:
23410 IF STP(_KEY$)="" THEN GOTO *RETURN ! ssp#219518
23420 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUST_DIV.CTL,_FIRST_FIELD=QTY_REQ_UM.CTL
23440 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
23460 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
23480 IF _YESNO$="YES" THEN GOTO WRITE_REC
23500 CHANGE_FLG=0
23520 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
23540 RETURN 
23560 ! 4000 - Get the current key segment number
23580 GET_CURKEY:
23600 FOR _CURKEY=1 TO _NUMKEYS
23620 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
23640 NEXT _CURKEY
23660 RETURN 
23680 ! 9000 - Retrieve messages from the *msglib.xxx library
23700 SETUP_MESSAGES:
23720 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
23740 _MSG_DIRECTORY$=MSG("DIRECTORY")
23760 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
23780 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
23800 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
23820 _MSG_MANDATORY$=MSG("MANDATORY")
23840 _MSG_NEXT$=MSG("NEXT")
23860 _MSG_NON_NUMER$=MSG("NON_NUMER")
23880 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
23900 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
23920 _MSG_PRECEDING$=MSG("PRECEDING")
23940 _MSG_PREFIX$=MSG("PREFIX")
23960 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
23980 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
24000 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
24020 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
24040 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
24060 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
24080 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
24100 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
24120 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
24140 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
24160 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
24180 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
24200 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
24220 _MSG_START_FILE$=MSG("START_FILE")
24240 _MSG_UPDATE$=MSG("UPDATE")
24260 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
24280 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
24300 _MSG_UPD_SAME$=MSG("UPD_SAME")
24320 _MSG_WARNING$=MSG("WARNING")
24340 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
24360 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
24380 RETURN 
24400 END 
30000 ! 10000 - Convert numeric values to string
30020 NUM_TO_STR:
30040 QTY_REQ_QTY_PER$=STR(QTY_REQ_QTY_PER)
30060 QTY_REQ$=STR(QTY_REQ)
30080 QTY_REQ_PIECES$=STR(QTY_REQ_PIECES)
30100 RETURN 
30120 ! 11000 - Convert numeric strings to number
30140 STR_TO_NUM:
30160 _X$="QTY_REQ_QTY_PER",_X=QTY_REQ_QTY_PER.CTL,QTY_REQ_QTY_PER=NUM(QTY_REQ_QTY_PER$,ERR=NON_NUMERIC)
30180 _X$="QTY_REQ",_X=QTY_REQ.CTL,QTY_REQ=NUM(QTY_REQ$,ERR=NON_NUMERIC)
30200 _X$="QTY_REQ_PIECES",_X=QTY_REQ_PIECES.CTL,QTY_REQ_PIECES=NUM(QTY_REQ_PIECES$,ERR=NON_NUMERIC)
30220 RETURN 
30240 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
30260 NEXT_ID=_X
30280 EXIT 
30300 ! 12000 - Check if the required fields have data
30320 CHECK_REQD_FLDS:
30340 _W_FLG=1
30360 RETURN 
30380 ! 13000 - Clear the record fields
30400 CLEAR_FIELDS:
30420 IF _CLR_FLG$="R" THEN CUST_DIV$=""
30440 IF _CLR_FLG$="R" THEN CUST_CODE$=""
30460 IF _CLR_FLG$="R" THEN KIT_ITEM_CODE$=""
30480 IF _CLR_FLG$="R" THEN CUST_DIV_2$=""
30500 IF _CLR_FLG$="R" THEN CUST_CODE_2$=""
30520 IF _CLR_FLG$="R" THEN COMPONENT_ITEM_CODE$=""
30540 ITEM_DESC$="",PROD_CODE$="",INVENTORY_QTY_PER$="",UM_DESC$="",INVENTORY_UM$="",PROD_CODE_DESC$=""
30560 QTY_REQ_UM$=""
30580 ITEM_DESC1$="",PROD_CODE1$="",INVENTORY_QTY_PER1$="",UM_DESC1$="",INVENTORY_UM1$="",PROD_CODE_DESC$="",PROD_CODE_DESC1$="",ML_LOC_DESC$="",UM_DESC$="",UM_DESC1$="",UM_DESC2$="",LEFT_RIGHT$="",LEFT_RIGHT1$="",TOP_BOTTOM$="",TOP_BOTTOM1$="",PLYS$="",PLYS1$=""
30600 USE_WHSE_LOC$="",CUSTOMER$="",%CUST_NAME$="",ITEM_DESC$="",CUSTOMER2$="",%CUST_NAME1$=""
30605 IF POS(" "<>P1$(7,4))>0 THEN USE_WHSE_LOC$=P1$(7,4)
30620 KT0_UNUSED_1$=""
30640 QTY_REQ_QTY_PER=0
30660 QTY_REQ=0
30680 QTY_REQ_PIECES=0
30690 CSR$="",EXTENSION=0,SPECIAL_CHARGE$=""
30700 GOSUB NUM_TO_STR
30720 REFRESH_FLG=1
30740 RETURN 
30760 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
30780 ENABLE_GROUPS:
30800 IF _ENABLE_FLG=0 THEN GOTO *RETURN
30820 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUST_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
30840 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=KIT_ITEM_CODE.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
30860 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=CUST_DIV_2.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
30880 IF _ENABLE_FLG=5 THEN CALL "*wingrp;Enable",KEY5.GRP$; NEXT_ID=CUST_CODE_2.CTL ELSE CALL "*wingrp;Disable",KEY5.GRP$
30900 IF _ENABLE_FLG=6 THEN CALL "*wingrp;Enable",KEY6.GRP$; NEXT_ID=COMPONENT_ITEM_CODE.CTL ELSE CALL "*wingrp;Disable",KEY6.GRP$
30920 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
30940 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
30960 RETURN 
30980 ! 15000 - Determine the changes that have been made before writing
31000 DETERMINE_CHGS:
31020 DIM _CHG_VAR$(12,"N")
31040 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
31060 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
31080 IF _ORIG.KIT_ITEM_CODE$=_CUR.KIT_ITEM_CODE$ OR KIT_ITEM_CODE$=_CUR.KIT_ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.KIT_ITEM_CODE$=KIT_ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("KIT_I_C")+" = "+_CUR.KIT_ITEM_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("KIT_I_C")+" = "+_CUR.KIT_ITEM_CODE$
31100 IF _ORIG.CUST_DIV_2$=_CUR.CUST_DIV_2$ OR CUST_DIV_2$=_CUR.CUST_DIV_2$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV_2$=CUST_DIV_2$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV_2")+" = "+_CUR.CUST_DIV_2$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV_2")+" = "+_CUR.CUST_DIV_2$
31120 IF _ORIG.CUST_CODE_2$=_CUR.CUST_CODE_2$ OR CUST_CODE_2$=_CUR.CUST_CODE_2$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE_2$=CUST_CODE_2$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_C_2")+" = "+_CUR.CUST_CODE_2$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_C_2")+" = "+_CUR.CUST_CODE_2$
31140 IF _ORIG.COMPONENT_ITEM_CODE$=_CUR.COMPONENT_ITEM_CODE$ OR COMPONENT_ITEM_CODE$=_CUR.COMPONENT_ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.COMPONENT_ITEM_CODE$=COMPONENT_ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("COMP_I_C")+" = "+_CUR.COMPONENT_ITEM_CODE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMP_I_C")+" = "+_CUR.COMPONENT_ITEM_CODE$
31160 IF _ORIG.QTY_REQ_UM$=_CUR.QTY_REQ_UM$ OR QTY_REQ_UM$=_CUR.QTY_REQ_UM$ THEN GOTO *NEXT ELSE IF _ORIG.QTY_REQ_UM$=QTY_REQ_UM$ THEN _CHG2$=_CHG2$+SEP+MSG("QTY_REQ_UM")+" = "+_CUR.QTY_REQ_UM$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_REQ_UM")+" = "+_CUR.QTY_REQ_UM$
31180 IF _ORIG.USE_WHSE_LOC$=_CUR.USE_WHSE_LOC$ OR USE_WHSE_LOC$=_CUR.USE_WHSE_LOC$ THEN GOTO *NEXT ELSE IF _ORIG.USE_WHSE_LOC$=USE_WHSE_LOC$ THEN _CHG2$=_CHG2$+SEP+MSG("USE_W_L")+" = "+_CUR.USE_WHSE_LOC$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("USE_W_L")+" = "+_CUR.USE_WHSE_LOC$
31200 IF _ORIG.KT0_UNUSED_1$=_CUR.KT0_UNUSED_1$ OR KT0_UNUSED_1$=_CUR.KT0_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.KT0_UNUSED_1$=KT0_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.KT0_UNUSED_1$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.KT0_UNUSED_1$
31220 IF _ORIG.QTY_REQ_QTY_PER=_CUR.QTY_REQ_QTY_PER OR QTY_REQ_QTY_PER=_CUR.QTY_REQ_QTY_PER THEN GOTO *NEXT ELSE IF _ORIG.QTY_REQ_QTY_PER=QTY_REQ_QTY_PER THEN _CHG2$=_CHG2$+SEP+MSG("QTY_R_Q_P")+" = "+STR(_CUR.QTY_REQ_QTY_PER),_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_R_Q_P")+" = "+STR(_CUR.QTY_REQ_QTY_PER)
31240 IF _ORIG.QTY_REQ=_CUR.QTY_REQ OR QTY_REQ=_CUR.QTY_REQ THEN GOTO *NEXT ELSE IF _ORIG.QTY_REQ=QTY_REQ THEN _CHG2$=_CHG2$+SEP+MSG("QTY_REQ")+" = "+STR(_CUR.QTY_REQ),_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_REQ")+" = "+STR(_CUR.QTY_REQ)
31260 IF _ORIG.QTY_REQ_PIECES=_CUR.QTY_REQ_PIECES OR QTY_REQ_PIECES=_CUR.QTY_REQ_PIECES THEN GOTO *NEXT ELSE IF _ORIG.QTY_REQ_PIECES=QTY_REQ_PIECES THEN _CHG2$=_CHG2$+SEP+MSG("QTY_RQ_P")+" = "+STR(_CUR.QTY_REQ_PIECES),_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_RQ_P")+" = "+STR(_CUR.QTY_REQ_PIECES)
31280 RETURN 
31300 ! 16000 - Incorporate changes made by another user into the record
31320 INCORPORATE_CHGS:
31340 IF _CHG_VAR$(1,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
31360 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
31380 IF _CHG_VAR$(3,1)="Y" THEN KIT_ITEM_CODE$=_CUR.KIT_ITEM_CODE$
31400 IF _CHG_VAR$(4,1)="Y" THEN CUST_DIV_2$=_CUR.CUST_DIV_2$
31420 IF _CHG_VAR$(5,1)="Y" THEN CUST_CODE_2$=_CUR.CUST_CODE_2$
31440 IF _CHG_VAR$(6,1)="Y" THEN COMPONENT_ITEM_CODE$=_CUR.COMPONENT_ITEM_CODE$
31460 IF _CHG_VAR$(7,1)="Y" THEN QTY_REQ_UM$=_CUR.QTY_REQ_UM$
31480 IF _CHG_VAR$(8,1)="Y" THEN USE_WHSE_LOC$=_CUR.USE_WHSE_LOC$
31500 IF _CHG_VAR$(9,1)="Y" THEN KT0_UNUSED_1$=_CUR.KT0_UNUSED_1$
31520 IF _CHG_VAR$(10,1)="Y" THEN QTY_REQ_QTY_PER=_CUR.QTY_REQ_QTY_PER
31540 IF _CHG_VAR$(11,1)="Y" THEN QTY_REQ=_CUR.QTY_REQ
31560 IF _CHG_VAR$(12,1)="Y" THEN QTY_REQ_PIECES=_CUR.QTY_REQ_PIECES
31580 RETURN 
31600 READ_FM0:READ (_FM0,KEY="D          "+LOC$,ERR=*RETURN); RETURN 
31620 READ_AR1:READ (_AR1,KEY=CUST$,ERR=*RETURN); RETURN 
31640 READ_IC0: NO_IC0=0; IF POS("I"=LINE_TYPE$)<>0 THEN READ (_IC0,KEY=CUST$+ITEM$,ERR=NO_IC0); RETURN ELSE READ (_FMP,KEY="X"+ITEM$,ERR=NO_IC0)FMPX$,FMPX_SELL_QTY,FMPX_PRICE,FMPX_COST; RETURN 
31660 NO_IC0: NO_IC0=1; IF LINE_TYPE$="S" THEN NEXT_ID=SPECIAL_CHARGE.CTL,QTY_REQ$=STR(QTY_REQ); EXIT ELSE RETURN 
31680 READ_UM:DIM _UM$(100); READ (_ZZP,KEY="U/M"+UM$,ERR=*RETURN)_UM$,_UM0,_UM1; RETURN 
31700 READ_FMP:READ (_FMP,KEY="T"+PC$,ERR=*RETURN)_FMP$; RETURN 
31720 PROCESS_KIT_ITEM: REFRESH_FLG=1
31740 KIT_ITEM_CODE$=PAD(KIT_ITEM_CODE$,10," "); IF STP(KIT_ITEM_CODE$)="" THEN NEXT_ID=KIT_ITEM_CODE.CTL; RETURN 
31760 IF STP(CUSTOMER$)="" THEN CUSTOMER$="          "
31780 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$
31785 IF STP(LINE_TYPE$)="" THEN LINE_TYPE$="I"
31800 CUST$=CUSTOMER$,ITEM$=KIT_ITEM_CODE$; GOSUB READ_IC0; IF LINE_TYPE$<>"S" AND NO_IC0 THEN KIT_ITEM_CODE$="",NEXT_ID=KIT_ITEM_CODE.CTL; RETURN 
31820 UM$=_IC0.INVENTORY_UM$; GOSUB READ_UM; PC$=_IC0.PROD_CODE$; GOSUB READ_FMP
31840 ITEM_DESC$=_IC0.ITEM_DESC$,PROD_CODE$=_IC0.PROD_CODE$,INVENTORY_QTY_PER$=STR(_IC0.INVENTORY_QTY_PER),UM_DESC$=_UM$(8,12),INVENTORY_UM$=UM$,PROD_CODE_DESC$=MID(_FMP$,5,15)
31860 LEFT_RIGHT$=_IC0.LEFT_RIGHT$,TOP_BOTTOM$=_IC0.TOP_BOTTOM$,PLYS$=_IC0.PLYS$
31880 RETURN 
31900 PROCESS_COMP_ITEM: REFRESH_FLG=1
31920 IF STP(CUSTOMER2$)="" THEN CUSTOMER2$="          "
31925 IF STP(CREATE_PO$)="" THEN CREATE_PO$="N",B_CREATE_PO$="N" ! SSP218894
31930 IF STP(LINE_TYPE$)="" THEN LINE_TYPE$="I",B_LINE_TYPE$="I"
31940 CALL "ZZWLKU;PARSE_CUST",CUSTOMER2$,CUST_DIV_2$,CUST_CODE_2$
31960 COMPONENT_ITEM_CODE$=PAD(COMPONENT_ITEM_CODE$,10," "); IF STP(COMPONENT_ITEM_CODE$)="" THEN NEXT_ID=COMPONENT_ITEM_CODE.CTL; RETURN 
31980 IF CUSTOMER$+KIT_ITEM_CODE$=CUSTOMER2$+COMPONENT_ITEM_CODE$ THEN MSGBOX MSG("KTGMAA_01"),MSG("WARNING"),"!"; COMPONENT_ITEM_CODE$="",NEXT_ID=COMPONENT_ITEM_CODE.CTL; RETURN 
32000 CUST$=CUSTOMER2$,ITEM$=COMPONENT_ITEM_CODE$; GOSUB READ_IC0; IF NO_IC0 THEN NEXT_ID=COMPONENT_ITEM_CODE.CTL,COMPONENT_ITEM_CODE$=""; RETURN 
32010 IF LINE_TYPE$="S" THEN UM$=FMPX$(55,4); GOSUB READ_UM; PC$=FMPX$(52,3),PROD_CODE1$=PC$,INVENTOORY_QTY_PER1$=STR(FMPX_SELL_QTY); GOSUB READ_FMP; LOC$=USE_WHSE_LOC$,PROD_CODE_DESC1$=MID(_FMP$,5,15),SPECIAL_DESC$=FMPX$(12,30),INVENTORY_QTY_PER1$=STR(FMPX_SELL_QTY),QTY_REQ_QTY_PER$=STR(FMPX_SELL_QTY),INVENTORY_UM1$=UM$,UM_DESC1$=_UM$(8,12),PROD_CODE_DESC1$=MID(_FMP$,5,15),LEFT_RIGT1$="",TOP_BOTTOM1$="",PLY1$=""; REFRESH_FLG=1; CALL "*WINGRP;ENABLE",FIELDS.GRP$; CALL "*WINGRP;ENABLE",BUTTONS.GRP$; GOSUB CHECK_ARV; GOSUB SEL_PIECES; GOTO *RETURN
32020 UM$=_IC0.INVENTORY_UM$; GOSUB READ_UM; PC$=_IC0.PROD_CODE$; GOSUB READ_FMP; LOC$=USE_WHSE_LOC$; GOSUB READ_FM0; ML_LOC_DESC$=_FM0.LOC_DESC$
32040 ITEM_DESC1$=_IC0.ITEM_DESC$,PROD_CODE1$=_IC0.PROD_CODE$,INVENTORY_QTY_PER1$=STR(_IC0.INVENTORY_QTY_PER),UM_DESC1$=_UM$(8,12),INVENTORY_UM1$=UM$
32060 LEFT_RIGHT1$=_IC0.LEFT_RIGHT$,TOP_BOTTOM1$=_IC0.TOP_BOTTOM$,PLYS1$=_IC0.PLYS$,PROD_CODE_DESC1$=MID(_FMP$,5,15)
32080 RETURN 
32100 SEL_QTY_REQ_UM: QTY_REQ_UM$=PAD(QTY_REQ_UM$,4," ")
32120 UM$=QTY_REQ_UM$; GOSUB READ_UM
32140 IF STP(_UM$(8,12))="" THEN NEXT_ID=QTY_REQ_UM.CTL,QTY_REQ_UM$=""; RETURN 
32160 UM_DESC2$=_UM$(8,12)
32180 IF _UM0<>0 THEN QTY_REQ_QTY_PER$=STR(_UM0) ELSE QTY_REQ_QTY_PER$=STR(_UM1) ! SSP#262378
32185 REFRESH_FLG=1; IF MID(_UM$,20,1)="Y" THEN CALL "*wingrp;DISABLE",QTYPER.GRP$,NEXT_ID=QTY_REQ.CTL ELSE CALL "*wingrp;ENABLE",QTYPER.GRP$ ! SSP#262378
32200 REFRESH_FLG=1
32220 RETURN 
32240 SEL_PIECES:
32260 IF _UM$(20,1)="Y" THEN QTY_REQ_PIECES$=QTY_REQ$ ELSE QTY_REQ_PIECES$=STR(NUM(QTY_REQ_QTY_PER$)*NUM(QTY_REQ$)),REFRESH_FLG=1
32280 REFRESH_FLG=1
32285 GOSUB CHECK_INVENTORY ! SSP 208675
32300 RETURN 
32320 PROCESS_QUERY:
32340 PROCESS "QRY_KT0","../KTG/KT.EN",RE$; IF RE$="" THEN GOTO *RETURN
32360 _KEY$=RE$
32380 READ (_FIL_NO,KEY=_KEY$,ERR=*RETURN)
32400 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
32420 CALL "*WINGRP;ENABLE",FIELDS.GRP$
32440 NEXT_ID=USE_WHSE_LOC.CTL,REFRESH_FLG=1
32460 RETURN 
32480 PROCESS_WHSE:
32490 IF STP(USE_WHSE_LOC$,3)="" THEN ML_LOC_DESC$="",REFRESH_FLG=1; GOTO *RETURN
32500 USE_WHSE_LOC$=PAD(USE_WHSE_LOC$,4,0,"0"),LOC$=USE_WHSE_LOC$; GOSUB READ_FM0
32520 ML_LOC_DESC$=_FM0.LOC_DESC$,USE_WHSE_LOC$=_FM0.LOC_CODE$
32540 REFRESH_FLG=1
32560 RETURN 
32580 PROCESS_UM:
32600 UM$=QTY_REQ_UM$; GOSUB READ_UM; UM_DESC2$=_UM$(8,12),QTY_REQ_UM$=_UM$(4,4),REFRESH_FLG=1
32620 IF STP(QTY_REQ_UM$)="" THEN NEXT_ID=QTY_REQ_UM.CTL,UM_DESC2$=""
32640 RETURN 
32660 PROCESS_CUST: %CUST_NAME$=""
32680 IF STP(CUSTOMER$)="" THEN CUSTOMER$="          "
32700 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$
32720 CUST$=CUSTOMER$; GOSUB READ_AR1; %CUST_NAME$=_AR1.CUST_NAME$
32740 RETURN 
32760 PROCESS_CUST2: %CUST_NAME1$=""
32780 IF STP(CUSTOMER2$)="" THEN CUSTOMER2$="          "
32800 CALL "ZZWLKU;PARSE_CUST",CUSTOMER2$,CUST_DIV_2$,CUST_CODE_2$
32820 CUST$=CUSTOMER2$; GOSUB READ_AR1; %CUST_NAME1$=_AR1.CUST_NAME$,CUST_DIV_2$=_AR1.CUST_DIV$,CUST_CODE_2$=_AR1.CUST_CODE$,REFRESH_FLG=1
32840 IF STP(CUSTOMER2$)="" THEN %CUST_NAME1$=""
32860 RETURN 
32880 CLEAR_COMPONENTS:
32900 COMPONENT_ITEM_CODE$="",ITEM_DESC1$="",PROD_CODE1$="",PROD_CODE_DESC1$="",LEFT_RIGHT1$="",TOP_BOTTOM1$="",PLYS1$="",INVENTORY_UM1$="",UM_DESC1$="",INVENTORY_QTY_PER1$="",USE_WHSE_LOC$="",ML_LOC_DESC$="",QTY_REQ_UM$="",UM_DESC2$="",QTY_REQ_QTY_PER$="",QTY_REQ$="",QTY_REQ_PIECES$="",REFRESH_FLG=1,SPECIAL_CHARGE$="",CSR$="",PRICE=0,EXTENSION=0
32920 RETURN 
33000 CHECK_INVENTORY:! SSP 208675
34000 CHECK_ARV:
34005 IF ID$<>"SPECIAL_CHARGE" THEN RETURN 
34006 _ARV=FFN("ARV"+%C$); IF _ARV<=0 THEN _ARV=HFN; OPEN (_ARV)"ARV"+%C$
34007 XXX=NUM(_FMP$(24,9),ERR=*NEXT); IF XXX>0 THEN GOTO 34010
34008 _SFMP$=_FMP$; READ (Z[11],KEY="T"+_FMP$(52,3),DOM=*RETURN)_FMP$
34010 READ (_ARV,KEY=_FMP$(24,9),DOM=*RETURN)ARV$
34020 IF STP(MID(ARV$,226,12))="" THEN MSGBOX "You have to setup Sales Distribution G/L Interface for Kit Production (Special Charge)",MSG("WARNING"),"STOP,TIM=8"
34025 IF _SFMP$<>"" THEN _FMP$=_SFMP$
34030 RETURN 
56000 ! "208675-Kit Module - Allow processing of items not in inventory     
56001 REM "218894-Since the new release the "Create PO" box for KITS is       
56002 REM "219518- KIT-GUI Creating short record in KT0
56003 REM "291708-In the KIT Component setup for special charge, why does     
