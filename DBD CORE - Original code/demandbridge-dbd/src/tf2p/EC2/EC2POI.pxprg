0010 REM "<EC2POI> Electronic Commerce 850 import
0020 SETESC 9300; SETERR 9000
0035 REM "5.0 - 02/19/02 - 11.731944 - plh - SSP# 142887 - DMM
0040 REM "Copyright 2002 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0080 CURR_DIR$=LWD
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000
0110 X0$="EC2POI",X1$="EC Purchase Order Import"
0120 DIM Z0$(80,"-"),FILE$[10]
0130 K0=20,K1=1
0135 C9=-1
0200 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0300 REM "IOLISTS
0310 IOLIST A$; REM "EM1
0320 IOLIST B$
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0509 REM "Slot 1 used for ED0 file opened in 1000's, slot 2 used for text file created in 700's to write to
0510 Z$="13O ZZPARM  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0560 READ (Z[13],KEY=X3$(9,3)+"E/C")EC_PARM$
0600 REM "
0610 GOSUB 6000
0640 REM "IF Q1$="" THEN CALL "ZZPROM",".Y",X3$,Z,"PROCEED?","","",0; ON Z GOTO 00641,09900
0650 REM "Set name of command to run, get DIRectory from Disk 1 add EC2 and then use ec_850_in
0655 CLOSE (14); OPEN (14)"D1"; TMP$=FN%XFD$(14,6); CLOSE (14)
0660 TRANSLATE_COMMAND$=TMP$(9)+DLM+"EC2"+DLM+"ec_850_in"
0700 NAME_1$="EC1.",EXT_1=1
0705 TEXT$=NAME_1$+STR(EXT_1:"000")
0710 SERIAL TEXT$,0,0,ERR=0711; GOTO 0712; REM "Create text file to write to
0711 EXT_1=EXT_1+1; GOTO 0705
0720 Z$="02CU 02O "+TEXT$+" "
0730 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0731,9900
0740 CLOSE (Z[2]); OPEN LOCK (Z[2],OPT="TEXT")TEXT$; REM "Re-open as a text file
0800 REM "Set Prefix
0810 CWDIR STP(EC_PARM$(159,40),1),ERR=0811
1000 REM "Get list of .exp files to process
1005 I=-1,J=0
1010 IF X3$(77,10)="D" THEN TYPE$="DIR ",DIR_SEP$="\" ELSE TYPE$="ls ",DIR_SEP$="/"
1012 DIR$="< "+TYPE$+STP(EC_PARM$(159,40),1)+DIR_SEP$+"*.[eE][Dd][Ii]"
1015 CLOSE (14); OPEN (14)DIR$
1020 READ (14,END=1031)AT$
1030 FILE$[I+1]=AT$; I=I+1; GOTO 1020
1040 INFILE=UNT,LAST_FILE=I
1060 REM "Setup command to run file thru ec_850_in and read the resulting output from the shell command
1062 COMMAND$=TRANSLATE_COMMAND$+" "+FILE$[J]
1065 IF J>LAST_FILE THEN GOTO 5000 ELSE CLOSE (INFILE); OPEN (INFILE,OPT="SHELL",ERR=5000)COMMAND$; REM "Open to read output of formatting command
1075 IF Q1$<>"G" THEN PRINT @(5,15),'CE',"Processing: "+FILE$[J]
1080 IF Q1$<>"G" THEN GOSUB 8150
1100 REM "Process the file
1105 SEGMENT$=""
1110 READ (INFILE,END=1900)SEGMENT$
1130 GOSUB BUILD_ARRAY
1140 ELEMENT$[1]=PAD(ELEMENT$[1],3)
1145 ON INT((POS(ELEMENT$[1]="ISAGS ST BEGTAXFOBN1 REFDTMTD5PO1SE ",3)+2)/3) GOSUB DONT_NEED,EL_ISA,EL_GS,EL_ST,EL_BEG,EL_TAX,EL_FOB,EL_N1,EL_REF,EL_DTM,EL_TD5,EL_PO1,EL_SE
1150 GOTO 1110
1200 BUILD_ARRAY:REM "Break segment into it's elements, [0] is unaltered segment, [1] & so on are the elements
1201 REM "Assume < 200 elements for now
1205 DIM ELEMENT$[200]; ELEMENT$[0]=SEGMENT$,EL_INDEX=0
1220 P=POS("*"=SEGMENT$),EL_INDEX=EL_INDEX+1
1225 IF P=0 THEN ELEMENT$[EL_INDEX]=SEGMENT$; GOTO BUILD_ARRAY_END; REM "We have all the elements for this segment
1230 IF P=1 THEN ELEMENT$[EL_INDEX]=" ",SEGMENT$=SEGMENT$(P+1); GOTO 1220; REM "Blank element, set to one blank space
1235 ELEMENT$[EL_INDEX]=SEGMENT$(1,P-1),SEGMENT$=SEGMENT$(P+1); GOTO 1220
1295 BUILD_ARRAY_END:RETURN 
1600 GOTO 1110
1900 REM "End of file
1930 REM "Remove the file
1935 ERASE HWD+DLM+"import"+DLM+FILE$[J],ERR=*NEXT
1985 J=J+1
1995 GOTO 1060
2000 DONT_NEED:REM "Don't need this segment, go get another one
2045 DONT_NEED_END:RETURN 
2050 EL_ISA:REM "ISA element, we need trading partner ID
2052 DIM SOURCE$(3),VER$(3),CUST$(10),LOC$(4),ORD_BY$(20),REQ$(15),ATTN$(30),DT_REQ$(6),DT_ORD$(6),VIACODE$(1),VIADESC$(15),HOWCODE$(1),INSIDE$(15),WITH$(15),ADDR1$(30),ADDR2$(30),CITY$(16),STATE$(2),ZIP$(9),MARKFOR$(35),SALESTAX$(10),TAXABLE$(1),HEADWHSE$(4),SHIPNAME$(35)
2055 DIM SENDER$(15); SENDER$=ELEMENT$[7],FO1_HEADER$="",FO1_LINE$="",FO1_REC$=""
2060 REM DIM A$(72); FIND (Z[3],KEY=SENDER$,DOM=02061) IOL=00310
2065 SOURCE$="WEB",VER$="101"
2095 EL_ISA_END:RETURN 
2100 EL_GS:REM "GS element, we need functional identifier code
2105 IF ELEMENT$[2]<>"PO" THEN S$="File: "+F1$+" contains a non PO transaction, need to check archive"; S1$="echo "+QUO+S$+QUO+" >> "+HWD+DLM+"EDI_LOG"; INVOKE S1$; EXITTO 1950
2145 EL_GS_END:RETURN 
2150 EL_ST:REM "Need transaction set identifier code
2160 IF ELEMENT$[2]<>"850" THEN S$="File: "+F1$+" contains a non 850 transaction, need to check archive"; S1$="echo "+QUO+S$+QUO+" >> "+HWD+DLM+"EDI_LOG"; INVOKE S1$; EXITTO 1950
2195 EL_ST_END:RETURN 
2200 EL_BEG:REM "
2205 REQ$=PAD(FN%CVT4$(ELEMENT$[4]),15),DT_ORD$=ELEMENT$[6]
2245 EL_BEG_END:RETURN 
2250 EL_FOB:REM "Shipping info, not used at this time
2295 EL_FOB_END:RETURN 
2300 EL_N1:REM "We need ship-to so only keep the N1 with the ST entity identifier code
2305 IF ELEMENT$[2]="BT" THEN CUST$=PAD(ELEMENT$[5],10); IF LEN(ELEMENT$[5])>10 THEN LOC$=PAD(ELEMENT$[5](11),4,0,"0") END_IF ; GOTO EL_N1_END; REM "If BT type (billto) it really contains the customer code & ship to location
2310 IF ELEMENT$[2]<>"ST" THEN GOTO EL_N1_END
2320 IF STP(LOC$,3)="" THEN LOC$=PAD(STP(ELEMENT$[5],3),4)
2325 SHIPNAME$=PAD(FN%CVT4$(ELEMENT$[3]),35)
2330 READ (INFILE,END=1900)SEGMENT$; GOSUB BUILD_ARRAY; ELEMENT$[1]=PAD(ELEMENT$[1],3)
2335 IF ELEMENT$[1]="N2 " THEN ATTN$=PAD(FN%CVT4$(ELEMENT$[2]),30); GOTO 2330
2337 IF ELEMENT$[1]="N3 " THEN ADDR1$=PAD(FN%CVT4$(ELEMENT$[2]),30),ADDR2$=PAD(FN%CVT4$(ELEMENT$[3]),30); GOTO 2330
2340 IF ELEMENT$[1]="N4 " THEN CITY$=PAD(FN%CVT4$(ELEMENT$[2]),16),STATE$=PAD(FN%CVT4$(ELEMENT$[3]),2),ZIP$=PAD(FN%CVT4$(ELEMENT$[4]),9); GOTO EL_N1_END
2342 EXITTO 1145
2345 EL_N1_END:RETURN 
2350 EL_DTM:REM "Date/Time reference, we only need the 002 one which is the delivery requested date
2360 IF ELEMENT$[2]="002" THEN DT_REQ$=PAD(FN%CVT4$(ELEMENT$[3]),6)
2395 EL_DTM_END:RETURN 
2400 EL_TD5:REM "Carrier Details, we need the ship via description
2410 VIADESC$=PAD(FN%CVT4$(ELEMENT$[4]),15)
2445 EL_TD5_END:RETURN 
2450 EL_TAX:REM "Tax Reference
2460 SALESTAX$=PAD(FN%CVT4$(ELEMENT$[2]),10)
2470 IF PAD(FN%CVT4$(ELEMENT$[13]),1)="1" THEN TAXABLE$="N"
2495 EL_TAX_END:RETURN 
2500 EL_PO1:REM "These are the PO lines
2510 DIM FIRSTTEN$(10),ITEM$(10),WHSE$(4),UM$(4),QTYPER$(6),QUANTITY$(7)
2515 QUANTITY$=PAD(FN%CVT4$(ELEMENT$[3]),7)
2520 ITEM$=PAD(FN%CVT4$(ELEMENT$[8]),20),UM$=PAD(STP(ELEMENT$[4],1),4)
2550 FO1_LINE$=FO1_LINE$+ITEM$+WHSE$+UM$+QTYPER$+QUANTITY$
2595 EL_PO1_END:RETURN 
2600 EL_SE:REM "Interchange Control Trailer, we are done with this one
2610 FO1_HEADER$=SOURCE$+VER$+CUST$+LOC$+ORD_BY$+REQ$+ATTN$+DT_REQ$+VIACODE$+VIADESC$+HOWCODE$+INSIDE$+WITH$+ADDR1$+ADDR2$+CITY$+STATE$+ZIP$+MARKFOR$+SALESTAX$+TAXABLE$+HEADWHSE$+SHIPNAME$
2620 FO1_REC$=FO1_HEADER$+FO1_LINE$
2630 WRITE (Z[2])FO1_REC$
2680 IF A$(72,1)="Y" THEN CALL "EC2POA",X3$,X4$,SOURCE$,VER$,SENDER$,CUST$,LOC$,ORD_BY$,REQ$,ATTN$,DT_REQ$,DT_ORD$,VIACODE$,VIADESC$,HOWCODE$,INSIDE$,WITH$,ADDR1$,ADDR2$,CITY$,STATE$,ZIP$,MARKFOR$,SALESTAX$,TAXABLE$,HEADWHSE$,SHIPNAME$,FO1_LINE$
2690 FO1_LINE$=""
2695 EL_SE_END:RETURN 
2700 EL_REF:REM "NEED TO GET SHIP-TO FOR AUTOZONE
2710 IF ELEMENT$[2]<>"ST" THEN GOTO 2750
2720 LOC$=PAD(FN%CVT4$(ELEMENT$[3]),4)
2750 EL_REF_END:RETURN 
5000 REM "EOJ
5001 XFD$=FN%XFD$(Z[2],0),TOT_REC=DEC(XFD$(38,4))
5003 CLOSE (Z[2])
5004 IF TOT_REC=0 THEN ERASE TEXT$; GOTO 5012
5005 NAME_2$="FO1.",EXT_2=1
5007 GOR$=NAME_2$+STR(EXT_2:"000")
5010 RENAME TEXT$,GOR$,ERR=5011; GOTO 5012; REM "Rename the EC1 file we wrote to, to an FO1 file to be used in the Order Requisition Gateway 
5011 EXT_2=EXT_2+1; GOTO 5007
5015 J=I; GOSUB 8150
5020 REM "IF Q1$="" THEN CALL "ZZPROM",".4",X3$,Z,"PROCESS COMPLETE!!","","",0
5040 GOTO 9900
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6016)'SB',
6020 PRINT @(0,4),"Importing Orders from WebEC"
6165 PRINT (0,ERR=6166)'SF',
6190 RETURN 
8100 REM "GOSUB here, once, at the beginning, after the background is set and before the Proceed? question. Set T to total # to do (by calling ZZINFO) and T0 to the reporting interval (report every T0 number of records) this is typically 2% of total; This also prints a message (@8115),so adjust accordingly
8110 CALL "ZZINFO",Z[1],T9,X3$,T,T0,K,B,D,S0,S1,F1$
8115 REM "PRINT @(0,7),"THERE ARE "+STR(T)+" RECORDS TO PROCESS"
8129 REM "Set T0, we make sure T0 is > 1, because later on we MOD and look for avalue of 1. IF T0 is 1, then nothing would get reported. We look for a result of 1 because this causes the first record to automatically start the reporting instead of waiting until the T0'th record to get the first report
8130 T0=INT(T*.02); IF T0<=1 THEN T0=2
8145 RETURN 
8150 REM "Call this each time to update the bar graph. Display horiz. bar graph given total #, T and current #, C, and time counter T1 (T1 is init'ed here and used here, just don't use it somewhere else)
8155 CALL "ZZBARG",X3$,"HG",19,10,50,T1,I+1,J+1
8195 RETURN 
8950 DEF FNS$(Z9$)=Z9$(1,POS("     "=Z9$+"     ")-1)
9000 REM "ERROR PROCESSING
9001 ESCAPE 
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9900 REM "END PROGRAM
9905 CWDIR CURR_DIR$,ERR=9906
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9945 ESCAPE 
9950 RUN "ZMENU"
9999 END 
