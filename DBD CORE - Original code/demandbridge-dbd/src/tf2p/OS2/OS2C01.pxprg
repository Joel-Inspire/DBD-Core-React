0010 REM "Send United Stationer's Data to United - Interlink <OS2C01>
0035 REM "5.7 - 01/26/22 - 10.65111 - crg - SSP# 307390
0037 REM "307390-DBD-242 Essendant order transmission failing due to SSL conn
0040 REM "Copyright 2022 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 SETERR 0055; ENTER Q0$; CALLED$="Y"; GOTO 0090
0055 IF %GUI THEN GOTO 0090
0060 BEGIN 
0090 SETERR 9000
0095 PRECISION 14; T2=TIM; PRECISION 2
0105 SETERR 9000; SETESC 9300
0110 X0$="OS2C01",X1$="United Interlink Send"
0120 DIM A$(0),B$(228),B[27],C$(512),C[9],E[3],S$(40),J$(345),J[12]
0140 Z0$="-###,###.00",Z1$="##,##0",Z2$="###,##0-",M4$="-00000000.00",M4=LEN(M4$),M5$="#####",Z3$="-###,###",Z4$="-####.00",Z5$="-#####.00",Z6$="-###.0",M0$="-###"
0165 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
0170 DEF FNE$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+Z9$(1,2)
0180 DEF FNS$(Z9$)=Z9$(1,POS("   "=Z9$+"   ")-1)
0190 DEF FNR$(Z9$)=Z9$(POS(" "<>Z9$))
0210 T=1,T0=1,T1=1
0220 W3=85,P0=1
0225 REPRINT_HEADER$=""; REM "Used in 8200's to make sure A$(1,1) only gets incremented once per order
0230 DIM T1$(W3,"-"),T2$(W3,"="),T3$(W3,"*"),Y5$(W3),Y6$(W3),W[4]
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,"",-1,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0260 REM CALL "ZZRPTP",X3$,X0$,X1$,V9$,V0,Q0$,Q1$,Q2$,Q3$,Q4$,Q5$,Q6$
0300 REM "I/O lists
0305 REM "IOLIST FOR FS1 - Sales order header
0310 IOLIST A$
0315 REM "IOLIST FOR FS2 - Sales order detail
0320 IOLIST B$,B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15],B[16],B[17],B[18],B[19],B[20],B[21],B[22],B[23],B[24],B[25],B[26],B[27]
0335 REM "IOLIST FOR AR1 - Customer Masterfile
0340 IOLIST D$
0345 REM "IOLIST FOR PO3- Shipping Information Masterfile
0350 IOLIST E$,E[0],E[1],E[2],E[3]
0355 REM "IOLIST FOR OFFICE SUPPLY PARAMETERS (OS2MPA - KEY = X3$(9,3) + 'OSP'
0360 IOLIST C$,C[0],C[1],C[2],C[3],C[4],C[5],C[6],C[7],C[8],C[9]
0365 REM "IOLIST FOR OS3 - Error Code Description File
0370 IOLIST R1$
0375 REM "IOLIST FOR OS4 - Transmission Error Report File
0380 IOLIST O$
0385 REM "IOLIST FOR SM7 - CIG Plus Gateway Information (SM0)
0390 IOLIST J$,J[0],J[1],J[2],J[3],J[4],J[5],J[6],J[7],J[8],J[9],J[10],J[11],J[12]
0400 IOLIST IC0$,IC0[0],IC0[1],IC0[2],IC0[3],IC0[4],IC0[5],IC0[6],IC0[7],IC0[8],IC0[9],IC0[10],IC0[11],IC0[12],IC0[13],IC0[14],IC0[15],IC0[16],IC0[17],IC0[18],IC0[19],IC0[20],IC0[21],IC0[22],IC0[23],IC0[24],IC0[25],IC0[26],IC0[27],IC0[28],IC0[29],IC0[30],IC0[31],IC0[32],IC0[33],IC0[34],IC0[35],IC0[36],IC0[37],IC0[38],IC0[39],IC0[40]
0450 REM "Intialize logging
0460 LOG_OPTIONS$="A"; CALL "ZZ2LOG;OPEN_LOG",ERR=*NEXT,X3$,X4$,"OS2C01"+"."+FID(0)+".log",LOG_OPTIONS$,LOG_CHANNEL ! 252868
0470 CALL "ZZ2LOG;LOG_MSG",ERR=*NEXT,X3$,X4$,LOG_CHANNEL,"START|",%LOG_INFO ! 252868
0500 REM "Files
0505 DIM Z[NUM(X3$(60,3))]; REM "GOSUB 7400
0509 REM "Don't use 15,16,17, used on 4105
0510 Y$="01O PO6...  02O FS1...  03O FS2...  05O SM7...  06O PO3...  07O FM0...  09O OS2...  10O OS3...  11O OS4...  25O PC3...  26O PC6...  27O OS8...  28O PO1...  29O PO2...  30O IC0...  31O OSA...  32O EDW...  33OSPO6...  13O ZZPARM  "
0520 GOSUB 9750
0525 READ (Z[13],KEY=X3$(9,3)+"I/C")P8$
0526 READ (Z[13],KEY="CMP"+X3$(9,3),DOM=*NEXT)COMPANY$; REM SSP 189386
0530 DIM G9$(200); READ (Z[7],KEY="D"+S$(1,10)+"0001",DOM=0531)G9$
0535 READ (Z[13],KEY=X3$(9,3)+"F/M")FM_PARM$
0540 READ (Z[13],KEY=X3$(9,3)+"A/R")P9$
0550 READ (Z[13],KEY=X3$(9,3)+"AR1")P5$
0552 READ (Z[13],KEY=X3$(9,3)+"G/B",DOM=0553)GB$; GB$="Y"
1000 REM "GET FIRST 'V' RECORD
1011 REC$=""
1020 READ (Z[1],KEY="V",DOM=1021)
1030 REC$=KEY(Z[1],END=5000); READ (Z[1],KEY=REC$)
1040 IF REC$(2,6)<>X0$ THEN GOTO 5000
1050 ORD$=REC$(10,9); REM " PURCHASE ORDER NUMBER
1051 CALL "ZZ2LOG;LOG_MSG",ERR=*NEXT,X3$,X4$,LOG_CHANNEL,"ORDER|"+ORD$+"|",%LOG_INFO ! 252868
1055 READ RECORD (Z[2],KEY=ORD$(1,8),DOM=1056)FS1$; GOTO 1060; REM IF YOU CAN'T READ THE FS1 HEADER RECORD, REMOVE FROM PO6 AND GOTO NEXT RECORD
1056 REMOVE (Z[33],KEY=REC$,DOM=*NEXT); REM REMOVE PO6 RECORD
1057 CALL "ZZ2LOG;LOG_MSG",ERR=*NEXT,X3$,X4$,LOG_CHANNEL,"ORDER|"+ORD$+"|CANNOT READ FROM FS1|REMOVING PO6 ENTRY|",%LOG_INFO ! 252868
1058 GOTO 1030; REM GOTO NEXT RECORD
1060 READ (Z[1],KEY=REC$)
1070 READ (Z[13],KEY=X3$(9,3)+"OSP")IOL=0360
1074 WILL_CALL$=C$(26,1); REM " SET FROM PARAMETERS - MAY BE CHANGED BY SHIP TO
1075 C[2]=C[2]+1; REM "Increment Transmission number
1076 SHIP_LABEL$=C$(57,1); REM " SET FROM PARAMETERS - MAY BE CHANGED BY SHIP TO
1080 WRITE (Z[13],KEY=X3$(9,3)+"OSP")IOL=0360
1085 CALL "ZZ2LOG;LOG_MSG",ERR=*NEXT,X3$,X4$,LOG_CHANNEL,"ORDER|"+ORD$+"|NEXT TRANSMISSION NUMBER|"+STR(C[2]:"00000")+"|",%LOG_INFO ! 252868
1100 REM "Get record"
1110 READ (Z[28],KEY=ORD$,DOM=1030)IOL=0310; REM " READ ORDER HEADER
1115 REM "EXTRACT (Z[28],KEY=ORD$,DOM=1116)IOL=0310; REM " EXTRACT PO HEADER - HANGING ON CC ORDERS BECAUSE THEY'RE IN INVOICING
1120 READ (Z[29],KEY=ORD$,DOM=1121); REM " POSITION TO 1ST LINE ON ORDER DETAIL
1130 IT$=""; REM "CLEAR FOR EACH ORDER 
1150 DAY_FORMAT "YYYY-MM-DD"
1155 DATE$=DAY,D1$=DATE$(1,4)+DATE$(6,2)+DATE$(9,2),Q$=D1$(3)
1160 DAY_FORMAT 
1165 TIME$=DTE(0:"%hz:%mz:%sz")
1170 GOSUB 2500; REM " GET ADDRESS INFO
1180 GOSUB 3000; REM " BUILD TRANSMISSION HEADER - HEAD$
1190 GOSUB 3100; REM " BUILD 'OS' RECORD
1200 IF SHIP_LABEL$<>" " THEN GOSUB 3200; REM " BUILD 'A1' RECORD
1205 GOSUB 3500; REM " BUILD 'PI' RECORD - SSP 229660
1210 REM "GOSUB 3300; REM " BUILD 'IT' RECORD ---- SEE 1400 ROUTINE         
1220 GOSUB 3400; REM " BUILD 'ST' RECORD
1300 REM "Read other data
1320 Y$="07C FM0...  12C AR4...  07O AR1...  12O FSV...  "; GOSUB 9750
1330 DIM D$(599); FIND (Z[7],KEY=A$(6,10),DOM=1331)IOL=0340
1370 Y$="07C AR1...  12C FSV...  07O FM0...  12O AR4...  "; GOSUB 9750
1400 REM "Get line detail information
1420 LINE$=KEY(Z[29],END=4000); REM "KEY TO ORDER DETAIL FILE - AFTER LAST LINE OR THE ENDOF THE FILE THEN GOTO 4000 TO SEND RECORD TO UNITED STATIONERS
1430 IF LINE$(1,9)<>ORD$ THEN GOTO 4000; REM "SEND TO UNITED STATIONERS
1440 READ (Z[29],KEY=LINE$)IOL=0320
1441 READ (Z[3],KEY=LINE$(1,8)+LINE$(10,3))FS2$
1442 IF FS2$(155,1)<>"I" THEN GOTO 1420; REM SSP 192628    
1445 IF FS2$(94,10)<>C$(58,10) THEN GOTO 1400; REM " NOT RIGHT VENDOR CODE - COMPARED TO PARAMETER
1447 REM "IF B$(9,1)=DIM(1) THEN GOTO 1400; REM " NO PO
1449 I1=I1+1
1450 DIM H$(128)
1460 READ (Z[9],KEY=B$(101,10),DOM=1461)H$
1465 DIM RC$(200); READ (Z[32],KEY=LINE$(1,8)+LINE$(10,3),DOM=1470)RC$,RC0,RC1
1470 GOSUB 3300; REM "BUILD 'IT' RECORDS
1480 GOSUB 2600; REM " BUILD 'LT' RECORD
1490 GOTO 1420; REM "GET NEXT LINE
2100 DEF FN%URLENCODE$(LOCAL DAT$)
2105 LOCAL X,ODAT$
2110 IF LEN(DAT$)=0 THEN RETURN ""
2115 FOR X=1 TO LEN(DAT$)
2120 IF POS(DAT$(X,1)=" 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$-_.+!*'(),",1)=0 THEN ODAT$+="%"+HTA(DAT$(X,1)) ELSE ODAT$+=DAT$(X,1)
2125 NEXT 
2130 TRANSLATE ODAT$," "+$01$+"+"
2135 RETURN ODAT$
2140 END DEF
2500 REM "Print lines from P2$ for spec instr."
2510 DIM E$(394),OSA$(125),SHIP_ACT$(6),PSW$(8),CON_ID$(4),ORD_TKR$(3)
2511 READ (Z[6],KEY=A$(306,8)+"     ",DOM=2590)IOL=0350
2512 IF LEN(E$)<=339 THEN GOTO 2521; REM "IF E$(341,6)=DIM(6) THEN GOTO 2521
2513 READ (Z[31],KEY=MID(E$,341,6),DOM=2521)OSA$
2514 SHIP_ACT$=OSA$(1,6),PSW$=OSA$(37,8),CON_ID$=OSA$(45,4),ORD_TKR$=OSA$(49,3)
2521 WILL_CALL$=C$(26,1)
2522 IF LEN(E$)=339 THEN GOTO 2526
2525 IF MID(E$,340,1)<>DIM(1) THEN WILL_CALL$=E$(340,1)
2526 SHIP_LABEL$=E$(339,1)
2527 IF SHIP_LABEL$=DIM(1) THEN SHIP_LABEL$=C$(57,1)
2528 IF SHIP_LABEL$="M" THEN SHIP_LABEL$="W"; REM IF THEY PUT IN A MULTI WRAP AND LABEL CHANGE IT TO A SINGLE...WE DON'T SUPPORT THE MULTI RIGHT NOW
2529 IF SHIP_LABEL$="S" THEN SHIP_LABEL$=" "; REM WE WANT IT TO BE BLANK
2530 REM "Get additional 4 lines of ship-to address
2540 SHIP_TO$=""; FIND (Z[7],KEY="C"+A$(179,10)+E$(12,4),DOM=2590)SHIP_TO$
2550 F5$=""
2560 FOR INDEX=0 TO 3
2570 IF POS(" "<>MID(SHIP_TO$,402+INDEX*30,30))>0 THEN F5$=F5$+MID(SHIP_TO$,402+INDEX*30,30)
2580 NEXT INDEX
2590 RETURN 
2600 REM "WRITE THE 'LT' RECOD
2610 DIM LT$(183); LT$(1,105)=I$(1,105)+DIM(78); LT$(1,2)="LT"
2620 IF MID(C$,460,1)="R" THEN LT$(106,20)=RC$(12,20)
2640 WRITE_SEQ$=STR(1:"000")
2650 WRITE (Z[27],KEY=ORD$+WRITE_SEQ$+"4LT"+B$(7,3),DOM=2655)ORD$+WRITE_SEQ$+"4LT"+B$(7,3)+LT$+B$(101,10)+DIM(209); GOTO 2680
2655 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
2660 GOTO 2650
2680 IT$=IT$+LT$
2699 RETURN 
3000 REM " BUILD TRANSMISSION HEADER
3004 DIM HEAD$(80)
3005 HEAD$(1,4)="OE01"
3010 HEAD$(5,4)=C$(15,4) REM "COMES FROM THE OFFICE SUPPLY PARAMETERS
3015 HEAD$(9,12)=""; REM " RESERVED FOR FUTURE USE
3020 HEAD$(21,1)="D"; REM " VALUE ALSWAYS 'D' FOR NOW
3025 HEAD$(22,1)="L"; REM " POSITION INDICATOR - 'L' FOR LAST (SEND 1 ORDER AT A TIME
3030 HEAD$(23,10)=DATE$
3035 HEAD$(33,8)=TIME$
3040 HEAD$(41,4)="0001"
3045 HEAD$(45,5)=""; REM "DATA LENGTH - MUST GET FOR TOTAL LENGTH OF RECORD
3050 HEAD$(50,6)=STR(C[0]:"000000"); REM " SIGN ON ACCOUNT NUMBER FROM USSCo   
3051 IF SHIP_ACT$<>DIM(6) THEN HEAD$(50,6)=SHIP_ACT$; REM " SSP 
3055 HEAD$(56,3)=""; REM " RESERVED FOR FUTURE USE
3060 HEAD$(59,5)=STR(C[2]:"00000"); REM " INCREMENTED TRANSMISSION NUMBER FROM OFFICE SUPPLY PARAMETER FILE 'OS2MPA' 'OSP' 
3065 HEAD$(64,8)=C$(7,8); REM " ASSIGNED PASSWORD - COMES FROM THE OFFICE SUPPLY PARAMETER FILE 'OSP' 'OS2MPA'
3066 IF PSW$<>DIM(8) THEN HEAD$(64,8)=PSW$; REM " SSP 
3070 HEAD$(72,8)=""; REM " REQUESTOR ID - NOT USED BY USSCo
3075 HEAD$(80,1)="A"; REM " ALWAYS AN 'A'
3076 IF SHIP_ACT$<>DIM(6) THEN HEAD$(50,6)=SHIP_ACT$; REM " SSP 
3077 WRITE_SEQ$=STR(1:"000")
3080 WRITE (Z[27],KEY=ORD$+WRITE_SEQ$+"0OE01"+DIM(1),DOM=3081)ORD$+WRITE_SEQ$+"0OE01"+DIM(1)+HEAD$+DIM(412); GOTO 3090
3081 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
3083 GOTO 3080
3090 RETURN 
3100 REM " BUILD 'OS' RECORD
3105 DIM OS$(157)
3110 OS$(1,2)="OS"; REM " ALWAYS 'OS' FOR THE TYPE OF RECORD
3115 OS$(3,6)=STR(C[0]:"000000"); REM "COMES FROM OFFICE SUPPLY PARAMETER FILE FOR  DEALER SHIPPING ACCOUNT NUMBER
3120 OS$(9,3)=""; REM "RESERVED FOR FUTURE USE
3125 OS$(12,22)=A$(297,9); REM "PO from PO1
3130 OS$(34,1)=WILL_CALL$; REM "'S' FOR SHIP OUT or 'W' FOR WILL CALL - FROM O/S PARAMETER FILE
3135 OS$(35,3)=""; REM "FACILITY OVERRIDE - USED TO SPECIFY THE FACILTIY THE ORDER IS TO BE FILLED FROM = DON'T THINK THE DEALER WILL KNOW THIS
3140 OS$(38,22)=""; REM "RESERVED FOR FUTURE USE
3145 OS$(60,3)=C$(19,3); REM "ASSIGNED ORDERING ACCOUNT PASSWORD - COMES FROM O/S PARAMETER FILE 'OSP' 
3146 IF SHIP_ACT$<>DIM(6) THEN OS$(3,6)=SHIP_ACT$; REM " SSP 
3147 IF ORD_TKR$<>DIM(3) THEN OS$(60,3)=ORD_TKR$; REM " SSP
3150 OS$(63,5)=""; REM "RESERVED FOR FUTURE USE
3155 OS$(68,1)=C$(22,1); REM "REJECT DUPLICATE PO - (Y/N) - COMES FROM O/S PARAMETER FILE 'OSP'
3160 OS$(69,1)=SHIP_LABEL$; REM "COULD POSSIBLY COME FROM CUST SHIP-TO OR PO3 - VALUES BELOW
3161 REM 'D' FOR DROP/SHIP ORDER
3162 REM 'W' FOR SINGLE WRAP-AND-LABEL-ORDER
3163 REM 'M' FOR MULTI WRAP-AND-LABEL-ORDER
3164 REM 'F' FOR FURNITURE ORDER WITH SET UP
3165 IF C$(220,1)="Y" AND SHIP_LABEL$="D" THEN OS$(70,5)=E$(124,5) ELSE OS$(70,5)=DIM(5); REM "ZIP CODE SSP 171218..PER Jodie at United only used Zip code routing with Drop Ships!!                                                
3170 OS$(75,66)=""; REM "RESERVED FOR FUTURE USE
3175 OS$(141,8)=""; REM "BLANKS DEFAULT TO CUSTOMER/DEALER SETUP
3180 OS$(149,9)=""; REM "LEAVE BLANK ON 'OS' RECORD
3181 WRITE_SEQ$=STR(1:"000")
3185 WRITE (Z[27],KEY=ORD$+WRITE_SEQ$+"1OS"+DIM(3),DOM=3186)ORD$+WRITE_SEQ$+"1OS"+DIM(3)+OS$+DIM(335); GOTO 3190
3186 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
3187 GOTO 3185
3190 RETURN 
3200 REM "SETUP 'A1' RECORD
3205 DIM A1$(316)
3210 A1$(1,2)="A1"; REM "ALWAYS 'A1' FOR THE TYPE OF RECORD
3215 A1$(3,10)=""; REM "UNITED ORDER KEY - WILL RETURN WITH UNITED'S ORDER #
3220 A1$(13,6)=STR(C[0]:"000000"); REM " USE SHIPPING ACCOUNT NUMBER FROM O/S PARAMETER FILE 
3221 IF SHIP_ACT$<>DIM(6) THEN A1$(13,6)=SHIP_ACT$; REM " SSP 
3225 A1$(19,3)=""; REM "USED FOR FUTURE USE
3230 A1$(22,22)=A$(297,9)+DIM(13," "); REM " P.O. NUMBER
3235 A1$(44,1)=WILL_CALL$; REM "WILL CALL/ SHIP OUT- USUALLY 'S' FOR SHIP OUT FROM O/S PARAMETER FILE
3240 A1$(45,3)=""; REM "ORDERS FILLING FACILITY
3245 A1$(48,41)=""; REM "USED FOR FUTURE USE
3250 A1$(89,8)=""; REM "W&L SHIPPING LABEL FORMAT OVERRIDE
3255 A1$(97,9)=""; REM " FOR MULTI-WRAP ORDERS, NUMBER EACH 'A1' RECORD
3260 A1$(106,1)=SHIP_LABEL$; REM "WRAP/LABEL OR DROP-SHIP - VALUES ARE:
3261 REM "'D' FOR DROP/SHIP ORDER
3262 REM "'W' FOR SINGLE WRAP-AND-LABEL-ORDER -  '''' COULD COME FROM A FILE
3263 REM "'M' FOR MULTI WRAP-AND-LABEL-ORDER  -  '''' COULD COME FROM A FILE
3264 REM "'F' FOR FURNITURE ORDER WITH SET-UP
3265 IF A1$(106,1)=" " THEN GOTO 3294
3268 A1$(107,35)=E$(225,35); REM "REQUIRED FOR DROP SHIP ADDRESS 1 - COMP NAME
3269 IF A1$(107,35)=DIM(35) THEN A1$(107,35)="N/A"+DIM(32)
3270 A1$(142,35)=E$(16,30); REM "ADDRESS LINE 2 FOR DROP SHIP - Attn:
3271 IF A1$(142,35)=DIM(35) THEN A1$(142,35)="N/A"+DIM(32)
3275 A1$(177,35)=E$(46,30); REM "ADDRESS LINE 3 FOR DROP SHIP - ADDR LINE #1
3280 A1$(212,35)=E$(76,30); REM "ADDRESS LINE 4 FOR DROP SHIP - ADDR LINE #2
3281 IF A1$(212,35)=DIM(35) THEN A1$(212,35)=MID(SHIP_TO$,200,14)
3282 A1$(247,30)=E$(106,16); REM "SHIP-TO CITY
3284 A1$(277,1)=""; REM "FILLER
3286 A1$(278,2)=E$(122,2); REM "SHIP TO STATE
3288 A1$(280,2)=""; REM "FILLER
3290 A1$(282,15)=E$(124,9); REM "SHIP-TO POSTAL CODE REQUIRED FOR DROP-SHIP
3292 A1$(297,20)=""; REM "FILLER
3294 REM "************ ADDRESS INFO IS COMING FROM PO3 PER KEITH ******** E$
3295 WRITE_SEQ$=STR(1:"000")
3296 WRITE (Z[27],KEY=ORD$+WRITE_SEQ$+"2A1"+DIM(3),DOM=3297)ORD$+WRITE_SEQ$+"1A1"+DIM(3)+A1$+DIM(176); GOTO 3299
3297 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
3298 GOTO 3296
3299 RETURN 
3300 REM "BUILD 'IT' RECORDS 
3305 DIM I$(152)
3310 I$(1,2)="IT"; REM "ALWAYS 'IT' FOR RECORD TYPE
3315 I$(3,10)=""; REM "ALWAYS BLANK GOING IN AND RETURNS W/USSCo ORDER #
3320 I$(13,6)=STR(C[0]:"000000"); REM "FROM O/S PARAMETER DATA FILE WITH SHIPPING ACCNT # FROM USSCo 'OSP' 
3321 SHIP_ACT$=OSA$(1,6),PSW$=OSA$(37,8),CON_ID$=OSA$(45,4),ORD_TKR$=OSA$(49,3)
3322 IF SHIP_ACT$<>DIM(6) THEN I$(13,6)=SHIP_ACT$; REM " SSP 
3325 I$(19,3)=""; REM "FOR FUTURE USE
3330 I$(22,22)=A$(297,9); REM "REPLACE W/P.O. # FROM TOPFORM
3335 I$(44,1)=WILL_CALL$; REM "WILL CALL / SHIP OUT - USUALLY ALWAYS 'S' - COMES FROM O/S PARAMETER FILE 'OSP'
3340 I$(45,3)=""; REM "FACILITY OVERRIDE - NOT CURRENTLY USED IN 'IT' RECORDS
3345 I$(48,41)=""; REM "FOR FUTURE USE
3350 I$(89,8)=""; REM "SHIPPING LABEL OVERRIDE
3355 I$(97,9)=""; REM "WRAP AND LABEL NUMBER - SAME AS IN 'A1' RECORD
3360 I$(106,3)=H$(11,3); REM " FS2 = B$(19,3); REM "ITEM PREFIX - OS2=H$
3365 I$(109,12)=H$(14,12); REM " FS2 =  B$(22,7); REM "STOCK NUMBER - OS2 = H$                        
3366 REM "PREFIX + STOCK NUMBER = COMPLETE ITEM # - I$(106,15) _
3368 DIM IC0[40]; READ (Z[30],KEY=DIM(10)+B$(101,10),DOM=*NEXT)IOL=0400
3370 IF B[2]<>100 THEN I$(121,7)=STR(B[1]/B[2]:"0000000") ELSE I$(121,7)=STR(B[1]:"0000000"); REM "ORDER QUANTITY
3371 REM "GOSUB 6000; REM " GET CORRECT UNIT OF MEASURE
3372 I$(128,2)=H$(59,2); REM "UOM$; REM " FS2 = B$(120,2); REM "ITEM'S RETAIL U/M - OS2=H$
3374 I$(130,2)=C$(24,2); REM "BACK ORDER DISPOSITION - 'FP'-FILL PARTIALLY OR 'TM' FOR FILL TOTAL MERCHANDISE OR NOTHING - COMES FROM O/S PARAMETER FILE 'OSP'
3376 I$(132,1)=C$(23,1); REM "'ADOT' INDICATOR (Automatic Dealer Order Transfer) - COMES FROM O/S PARAMETER FILE 'OSP'
3377 REM "ADOT OPTIONS ARE: 'S' SPLIT, WILL SPLIT ORDERS BETWEEN FACILITIES IF NEEDED
3378 OPTION$="T{60}"; REM " RESONSE TIME RAISED TO 60 SECONDS
3379 REM "ADOT OPTIONS ARE: 'N' DON'T 'ADOT', SEARCH PRIMARY FACIITY ONLY
3380 I$(133,6)=""; REM "ADD'L LINE ITEM COMMENTS THAT PRINT ON THE PACKING LIST
3382 I$(139,2)=""; REM "FOR FUTURE USE
3383 PRICE=NUM(H$(27,9))
3384 I$(141,9)=STP(STR(PRICE:"#######.00"),3,".")
3385 REM "I$(141,9)=H$(27,9); REM "LIST PRICE FROM OS2                                                  
3386 I$(150,3)=""; REM "FILLER
3387 WRITE_SEQ$=STR(1:"000")
3390 WRITE (Z[27],KEY=ORD$+WRITE_SEQ$+"3IT"+B$(7,3),DOM=3391)ORD$+WRITE_SEQ$+"3IT"+B$(7,3)+I$+B$(101,10)+DIM(209); GOTO 3393
3391 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
3392 GOTO 3390
3393 PO$=PO$+B$(7,3)
3394 REM "DIM LT$(183); LT$(1,105)=I$(1,105)+DIM(78); LT$(1,2)="LT"
3395 REM "IF C$(460,1)="R" THEN LT$(106,20)=RC$(12,20)
3398 IT$=IT$+I$
3399 RETURN 
3400 REM "BUILD 'ST' RECORDS 
3405 DIM ST$(106)
3410 ST$(1,2)="ST"; REM "ALWAYS 'ST' FOR THE TYPE OF RECORD
3415 ST$(3,10)=""; REM "BLANK GOING OUT FOR USSCo ORDER #; COMES BACK W/ORDER#
3420 ST$(13,6)=STR(C[0]:"000000"); REM " SHIPPING ACCOUNT # - COMES FROM A O/S PARAMETER FILE - 'OSP'
3421 IF SHIP_ACT$<>DIM(6) THEN ST$(13,6)=SHIP_ACT$; REM " SSP 
3425 ST$(19,3)=""; REM "RESERVED FOR FUTURE USE
3430 ST$(22,22)=A$(297,9)+DIM(13," "); REM "P.O. #
3435 ST$(44,1)=WILL_CALL$; REM "WILL CALL / SHIP OUT - VALUES 'W' OR 'S' - COMES FROM O/S PARAMETER FILE 
3440 ST$(45,3)=""; REM "ORDERS FILLING FACILITY / FACILITY OVERRIDE
3445 ST$(48,41)=""; REM "RESERVED FOR FUTURE USE
3450 ST$(89,8)=""; REM "SHIPPING LABEL FORMAT OVERRIDE
3451 ST$(106,1)="R"; REM " REQUEST FOR PRODUCT TO BE RELEASED
3455 ST$(97,9)=""; REM "LEAVE BLANK - WRAP AND LABEL NUMBER
3456 WRITE_SEQ$=STR(1:"000")
3460 WRITE (Z[27],KEY=ORD$+WRITE_SEQ$+"5ST"+DIM(3),DOM=3461)ORD$+WRITE_SEQ$+"5ST"+DIM(3)+ST$+DIM(386); GOTO 3490
3470 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
3475 GOTO 3460
3490 RETURN 
3500 REM "BUILD 'PI' RECORDS - End Consumer PO Info - SSP 229660
3505 DIM PI$(145)
3510 PI$(1,2)="PI"; REM "ALWAYS 'PI' FOR THE TYPE OF RECORD
3515 PI$(3,10)=""; REM "UNITED ORDER KEY - WILL RETURN WITH UNITED'S ORDER #
3520 PI$(13,6)=STR(C[0]:"000000"); REM " USE SHIPPING ACCOUNT NUMBER FROM O/S PARAMETER FILE 
3525 PI$(19,3)=""; REM "RESERVED FOR FUTURE USE
3530 PI$(22,22)=A$(297,9)+DIM(13," "); REM "P.O. #
3535 PI$(44,1)=WILL_CALL$; REM "WILL CALL / SHIP OUT - VALUES 'W' OR 'S' - COMES FROM O/S PARAMETER FILE 
3540 PI$(45,3)=""; REM "ORDERS FILLING FACILITY / FACILITY OVERRIDE
3545 PI$(48,41)=""; REM "RESERVED FOR FUTURE USE
3550 PI$(89,8)=""; REM "SHIPPING LABEL FORMAT OVERRIDE
3555 PI$(97,9)=""; REM "LEAVE BLANK - WRAP AND LABEL NUMBER
3557 PI$(106,22)=PAD(MID(FS1$,28,15),22); REM "PI data - Customer PO Number
3558 PI$(136,5)="CPO#:"; REM "PI tag - Label, defaults to "CPO#:" 
3560 PI$(128,8)=""; REM "RESERVED FOR FUTURE USE
3565 PI$(141,5)=""; REM "RESERVED FOR FUTURE USE
3595 WRITE_SEQ$=STR(1:"000")
3596 WRITE (Z[27],KEY=ORD$+WRITE_SEQ$+"2PI"+DIM(3),DOM=*NEXT)ORD$+WRITE_SEQ$+"2PI"+DIM(3)+PI$+DIM(347); GOTO 3599
3597 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
3598 GOTO 3596
3599 RETURN 
4000 REM "SENT RECORD TO UNITED USING TCP/IP
4001 REM "USE DATA SENT BACK TO FILL WHAT IS GOING TO BE SHIPPED
4002 REM " IF I1>0 THEN THERE ARE LINES TO SEND ELSE GOTO 4090 - LINE COUNTER INCREMENTED AT 1440
4004 WINDX$="" ! "[WDX]" ! DBD-242
4005 S1=LEN(HEAD$+OS$+A1$+PI$+IT$+ST$),HEAD$(45,5)=STR(S1-49:"00000") ! SSP 229660
4010 SEND$=HEAD$+OS$+A1$+PI$+IT$+ST$; REM " COMPLETE STRING TO SEND - SSP 229660
4015 SEND$=FN%URLENCODE$(SEND$)
4020 URL$=STP(C$(98,120),3," "); REM " SEE 4021
4021 REM "URL$="https://stage-elink2.unitedstationers.com/iLink2/interlinkdirect.asp"
4023 IF MID(COMPANY$,196,1)="Y" THEN TMP$="/tmp/"+"CO"+X3$(9,3)+ORD$ ELSE TMP$="/tmp/TOPS"+ORD$
4026 SERIAL WINDX$+TMP$,ERR=*PROCEED
4029 CONTENT$="requesttransmission="+SEND$+"&requesttype=3"
4030 CON_LEN=LEN(CONTENT$)
4031 TMP_CHAN=HFN; OPEN PURGE (TMP_CHAN,ERR=*NEXT)WINDX$+TMP$
4032 WRITE_CON$=CONTENT$
4035 FOR I=0 TO CON_LEN/1000
4036 IF LEN(WRITE_CON$(I*1000+1))<1000 THEN PRINT (TMP_CHAN)(WRITE_CON$(I*1000+1)); EXITTO 4047
4038 PRINT (TMP_CHAN)WRITE_CON$(I*1000+1,1000),; GOTO 4040
4040 NEXT I
4047 CLOSE (TMP_CHAN,ERR=*NEXT)
4049 PROXY$=STP(C$(27,30),3," "); REM "10.6.72.18"
4050 REM "URL$=URL$+"?" REM "+CONTENT$; REM ,CONTENT$=""
4060 CALL "ZZ2LOG;LOG_MSG",ERR=*NEXT,X3$,X4$,LOG_CHANNEL,"ORDER|"+ORD$+"|TRANSMITTING ORDER REQUEST|",%LOG_INFO ! 252868
4078 REM "%ZZ2CMD_DEBUG=1
4079 GOSUB DO_WINDX
4080 RETURN$=R$
4081 REM "CALL "EC3SND",X3$,X4$,URL$,CONTENT$,PROXY$,OPTION$,RETURN$
4082 %ZZ2CMD_DEBUG=0
4083 IF LEN(RETURN$)=0 THEN GOTO 1030
4084 WRITE_SEQ$=STR(1:"000")
4085 WRITE (Z[27],KEY=ORD$+WRITE_SEQ$+"5RET"+DIM(2),DOM=4086)ORD$+WRITE_SEQ$+"5RET"+DIM(2)+RETURN$(2,3)+DIM(489); GOTO 4090
4086 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
4087 GOTO 4085
4090 RETURN1$=RETURN$; REM "SAVE IN RETURN1$ FOR POTENTIAL FUTURE USE
4100 REM "DETERMINE RESULTS SENT BACK IN RETURN$ FROM USSCo
4105 ERASE WINDX$+TMP$,ERR=*NEXT
4106 ERASE WINDX$+TEMP_FILE$,ERR=*NEXT
4110 IF RETURN$(1,3)="800" THEN REC2$=REC$; GOSUB 6100; GOTO 4980
4111 REM IF RETURN$(1,3)="800" THEN REC2$=REC$; REC2$(7,1)="4"; WRITE (Z[1],KEY=REC2$); GOSUB 6100; GOTO 4980
4120 REM "ERASE WINDX$+TMP$,ERR=*NEXT
4121 IF POS(RETURN$(1,3)="220160")>0 THEN GOSUB 7300; GOTO 4980
4122 REM "IF RETURN$(1,3)<>"000" THEN REC2$=REC$; REC2$(7,1)="4"; WRITE (Z[1],KEY=REC2$); GOTO 4980
4125 REM "S2$="cp "+TMP$+".out"+" "+DLM+"editmp"+DLM; INVOKE S2$
4130 U=POS("&||&"=RETURN$),RETURN$=RETURN$(U+4); REM "U+4= START OF TRANSMISSION HEADER REPLY
4140 GOSUB 5300; REM "TRANSMISSION ERROR IN SENT RECORD
4145 REM "IF CONTINUE$="NO" THEN CONTINUE$=""; GOTO 4980
4150 RETURN$=RETURN$(72),RETURN1$=RETURN$; REM "STRIP OFF HEADER REPLY AND SAVE RETURN$ AS RETURN1$ FOR POSSIBLE FUTURE USE
4160 OSR$=RETURN$(1,143); REM " 'OS' REPLY RECORD
4170 GOSUB 5400; REM " ERROR IN 'OS' RECORD
4175 IF CONTINUE$="NO" THEN GOTO 4980
4180 UON$=OSR$(5,10); REM "UNITED'S ORDER NUMBER 
4190 RETURN$=RETURN$(144)
4200 REM "PROCESS 'A1' RECORD - ADDRESS INFORMATION
4201 IF RETURN$(1,2)<>"A1" THEN GOTO 4250
4202 IF LEN(RETURN$)<107 THEN GOTO 4990
4210 AIR$=RETURN1$(1,107); REM " 'A1' RECORD REPLY
4220 REM " CAN SEE NO OTHER USEFUL 'A1' INFO HERE
4230 GOSUB 5500; REM " ERROR IN 'A1' RECORD - ADDRESS INFO RECORD
4245 RETURN$=MID(RETURN$,108)
4250 REM "PROCESS 'PI' RECORD - ADDRESS INFORMATION
4260 IF RETURN$(1,2)<>"PI" THEN GOTO 4299
4270 IF LEN(RETURN$)<107 THEN GOTO 4990
4280 PIR$=RETURN1$(1,107); REM " 'PI' RECORD REPLY
4285 GOSUB 6200; REM " PROCESS ERROR IN 'PI' RECORD
4290 RETURN$=MID(RETURN$,108)
4299 LN1=0; REM " LN1 IS LINE COUNTER
4300 REM "PROCESS 'IT' RECORD - LINE ITEM
4310 ITR$=MID(RETURN$,1,275)
4320 LN1=LN1+1; REM " INCREMENT LINE COUNTER
4325 REM "UPDATE SM7 WITH ORDER #, LINE #, QTY, B/O QTY, VENDOR INVOICE NUMBER WILL BE THE UNITED ORDER # (UON$)
4329 GOTO 4370
4330 IF NUM(ITR$(3,2))<51 THEN GOTO 4331 ELSE GOTO 4370
4340 DIM J$(345),J[12]
4350 J$(1,9)=ORD$,J$(10,3)=STR(LN1:"000"),J$(266,10)=ITR$(5,10)
4355 D0$=CHR(NUM(D1$(1,3),ERR=4356)-125)+D1$(4,1)+Q$(3,2)+Q$(5,2)
4360 J$(276,6)=D0$
4362 QT1=NUM(MID(ITR$,153,9))/100,J[0]=QT1
4365 REM "WRITE (Z[5],KEY=J$(1,12)+" "+J$(10,3))IOL=0390
4370 GOSUB 5700; REM " ERROR IN 'IT' RECORD - LINE ITEM RECORD
4380 RETURN$=MID(RETURN$,276)
4385 IF MID(RETURN$,1,2)="LT" THEN GOSUB 5900; RETURN$=RETURN$(108)
4390 IF MID(RETURN$,1,2)="IT" THEN GOTO 4300; REM "PROCESS ANOTHER 'IT' RECORD
4400 REM "PROCESS 'ST' RECORD - STATUS UPDATE
4410 REM LENGTH OF RETURN$ S/B 108
4420 STR$=RETURN$
4430 GOSUB 5800; REM " ERROR IN 'ST' RECORD - STATUS CHANGE RECORD
4431 REM "IF MID(STR$,3,2)<>"00" THEN GOSUB 5800; REM " ERROR IN 'ST' RECORD - STATUS CHANGE RECORD
4470 REM " RETURN$(108,1) S/B STATUS; R-RELEASE, U-UNFINISHED,C-CANCELLED,H-HOLD
4976 REM " IF TRANSMISSION DIDN'T GO - CHANGE KEY TO NEW PROGRAM NAME AND WRITE ELSE REMOVE
4980 REMOVE (Z[1],KEY=REC$,DOM=4981)
4981 IF MID(RETURN$,1,3)="220" OR LEN(RETURN$)=0 THEN GOTO 4990
4982 EXTRACT (Z[28],KEY=ORD$)IOL=0310; REM SSP 209077
4983 A$(353,5)=HEAD$(59,5); REM " TRANSMISSION NUMBER SSP 209077
4985 IF MID(REC2$,7,1)="4" THEN A$(352,1)="C" ELSE A$(352,1)="A"; REM " FLAG TO SAY PO ALREADY SENT OR TO SEND A RE-CONFIRMATION REQUEST
4986 WRITE (Z[28],KEY=ORD$)IOL=0310; REM "WRITE PO BACK
4987 PO$=""
4990 GOTO 1030; REM "SEE IF ANOTHER ORDER IS READY TO SEND
5000 REM "End of Print
5005 REM "IF E8$<>"END" THEN E8$="END"; GOTO 1100
5010 REM "IF Q5=1 THEN GOTO 9920
5020 REM "IF W8=0 THEN GOTO 5200
5030 T0$="END"
5090 GOTO 9900
5200 REM "READ REPLY TRANSMISSION ERROR
5210 R$=PAD(RETURN$(1,3),6,1," "); REM 'PAD ERR TO 6 TO READ IN OS3
5220 DIM R1$(128)
5230 READ (Z[10],KEY=R$,DOM=5231)IOL=0370
5240 DIM O$(254)
5250 O$(20,60)=R1$(7,60); O$(80,10)=DATE$; O$(90,8)=TIME$
5252 O$(98,6)=R$
5257 WRITE_SEQ$=STR(1:"000")
5260 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"0OE01"+DIM(1),DOM=*NEXT)ORD$+WRITE_SEQ$+"0OE01"+DIM(1)+O$(17)+DIM(255); GOTO 5290
5261 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
5262 GOTO 5260
5290 RETURN 
5300 REM "ERROR IN TRANSMISSION HEADER - PROCESS ERROR
5310 R$=PAD(RETURN$(1,4),6,1," "); REM 'PAD ERR TO 6 TO READ IN OS3
5320 DIM R1$(128)
5330 READ (Z[10],KEY=R$,DOM=5331)IOL=0370
5340 DIM O$(254)
5345 O$(167,6)=R$
5350 O$(20,60)=R1$(7,60); O$(173,10)=TIME$; O$(183,8)=TIME$
5357 WRITE_SEQ$=STR(1:"000")
5360 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"0OE01"+DIM(1),DOM=*NEXT)ORD$+WRITE_SEQ$+"0OE01"+DIM(1)+O$(17)+DIM(255); GOTO 5390
5361 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
5362 GOTO 5360
5370 REM "CONTINUE$="NO"
5390 RETURN 
5400 REM "ERROR IN 'OS' ORDER START RECORD - PROCESS ERROR
5410 R$="OS"+PAD(OSR$(3,2),4,1," "); REM 'PAD ERR TO 6 TO READ IN OS3
5420 DIM R1$(128)
5430 READ (Z[10],KEY=R$,DOM=5431)IOL=0370
5440 DIM O$(123)
5450 O$(20,60)=R1$(7,60); O$(80,10)=DATE$; O$(90,8)=TIME$
5456 O$(98,6)=R$
5458 WRITE_SEQ$=STR(1:"000")
5460 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"1OS"+DIM(3),DOM=*NEXT)ORD$+WRITE_SEQ$+"1OS"+DIM(7)+O$(20)+OSR$; GOTO 5470
5461 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
5462 GOTO 5460
5470 REM "CONTINUE$="NO"
5490 RETURN 
5500 REM "ERROR IN 'A1' RECORD - ADDRESS INFO RECORD - PROCESS ERROR
5510 R$="OS"+PAD(AIR$(3,2),4,1," "); REM 'PAD ERR TO 6 TO READ IN OS3
5520 DIM R1$(128)
5530 READ (Z[10],KEY=R$,DOM=5531)IOL=0370
5540 DIM O$(123)
5550 O$(20,60)=R1$(7,60); O$(80,10)=DATE$; O$(90,8)=TIME$
5551 O$(98,6)=R$
5559 WRITE_SEQ$=STR(1:"000")
5560 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"2A1"+DIM(3),DOM=*NEXT)ORD$+WRITE_SEQ$+"2A1"+DIM(7)+O$(20)+AIR$; GOTO 5590
5561 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
5562 GOTO 5560
5590 RETURN 
5600 REM "Get name to print on shipto
5605 IF E$(11,1)="C" THEN GOSUB 5650 ELSE IF A1<>0 THEN GOSUB 5661
5610 IF LEN(E$)>=259 AND POS(" "<>E$(259))<>0 THEN E9$=E$(225,35); GOTO 5645 ELSE E9$=D$(11,35)
5615 ON POS(E$(11,1)="CPD") GOTO 5645,5620,5625,5630
5620 FIND (Z[7],KEY=E$(11,1)+D$(1,10)+E$(12,4),DOM=5645)E1$; GOTO 5635
5625 FIND (Z[7],KEY=E$(11,1)+A$(7,10)+E$(12,4),DOM=5645)E1$; GOTO 5635
5630 FIND (Z[7],KEY=E$(11,1)+Y6$(1,10)+E$(12,4),DOM=5645)E1$; GOTO 5635
5635 E9$=E1$(16,35); IF E$(11,1)="C" THEN SHIP_TO_ZIP$=E1$(129,9) ELSE SHIP_TO_ZIP$=""
5645 RETURN 
5700 REM "ERROR IN 'IT' RECORD - ITEM INFO RECORD - PROCESS ERROR
5710 R$="OS"+PAD(ITR$(3,2),4,1," "); REM 'PAD ERR TO 6 TO READ IN OS3
5720 DIM R1$(128)
5730 READ (Z[10],KEY=R$,DOM=5731)IOL=0370
5740 DIM O$(123)
5750 O$(20,60)=R1$(7,60); REM "O$(80,10)=ITR$(5,10); O$(90,5)=DIM(5); O$(95,3)=ITR$(5,3); O$(99,60)=MID(ITR$,104,60); O$(159,7)=MID(ITR$,269,7)
5753 O$(98,6)=R$
5754 O$(80,10)=DATE$; O$(90,8)=TIME$
5755 REM "IF LEN(PO$)=0 THEN GOTO 5760
5756 PO1=NUM(PO$(1,3),ERR=*NEXT); IF LEN(PO$)>3 THEN PO$=PO$(4) ELSE PO$=PO$
5758 REM "O$(200,14)=ITR$(24,14)
5759 WRITE_SEQ$=STR(1:"000")
5760 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"3IT"+STR(PO1:"000"),DOM=*NEXT)ORD$+WRITE_SEQ$+"3IT"+STR(PO1:"000")+O$(17)+ITR$; GOTO 5790
5761 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
5762 GOTO 5760
5790 RETURN 
5800 REM "ERROR IN 'ST' RECORD - ORDER STATUS CHANGE RECORD - PROCESS ERROR
5805 IF LEN(STR$)=0 THEN GOTO 5890
5810 R$="OS"+PAD(STR$(3,2),4,1," "); REM 'PAD ERR TO 6 TO READ IN OS3
5820 DIM R1$(128)
5830 READ (Z[10],KEY=R$,DOM=5831)IOL=0370
5840 DIM O$(123)
5850 O$(20,60)=R1$(7,60); O$(80,10)=DATE$; O$(90,8)=TIME$; REM "O$(98,1)=STR$(108,1); O$(167,6)=R$
5856 REM "O$(173,10)=DATE$; O$(183,8)=TIME$
5857 O$(98,6)=R$
5858 WRITE_SEQ$=STR(1:"000")
5860 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"5ST"+DIM(3),DOM=*NEXT)ORD$+WRITE_SEQ$+"5ST"+DIM(7)+O$(20)+STR$(1,107); GOTO 5890
5861 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
5862 GOTO 5860
5890 RETURN 
5900 REM " Process the LT Record
5910 IF LEN(RETURN$)=0 THEN GOTO 5999
5920 R$="LT"+PAD(RETURN$(3,2),4,1," "); REM 'PAD ERR TO 6 TO READ IN OS3
5930 DIM R1$(128)
5940 READ (Z[10],KEY=R$,DOM=5941)IOL=0370
5950 DIM L$(123)
5960 L$(20,60)=R1$(7,60); L$(80,10)=DATE$; L$(90,8)=TIME$; REM "O$(98,1)=STR$(108,1); O$(167,6)=R$
5967 L$(98,6)=R$
5968 WRITE_SEQ$=STR(1:"000")
5970 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"4LT"+DIM(3),DOM=*NEXT)ORD$+WRITE_SEQ$+"4LT"+DIM(7)+L$(20)+RETURN$(1,107); GOTO 5999
5971 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
5972 GOTO 5970
5999 RETURN 
6000 REM " GET THE FOUR CHARACTER UNIT OF MEASURE FROM PL3                      
6005 READ (Z[26],KEY=C$(58,10)+H$(36,4),DOM=6006)
6006 PC6_KEY$=KEY(Z[26])
6007 IF PC6_KEY$(1,14)<>C$(58,10)+H$(36,4) THEN RETURN 
6010 DIM PC3$(64); READ (Z[25],KEY=PC6_KEY$(1,10)+PC6_KEY$(15,10),DOM=6030)PC3$
6020 DIM UOM$(2); UOM$=PC3$(11,2)
6030 RETURN 
6100 REM "WRITE OUT THE 800 RECORD
6110 R$=PAD(RETURN$(1,3),6,1," "); REM 'PAD ERR TO 6 TO READ IN OS3             
6120 DIM R1$(128)
6130 READ (Z[10],KEY=R$,DOM=6131)IOL=0370
6140 DIM O$(254)
6145 O$(1,9)=ORD$; REM TEST
6150 O$(20,60)=R1$(7,60); O$(80,10)=DATE$; O$(90,8)=TIME$
6152 O$(98,6)=R$
6153 O$(101,6)="800"; REM WAS 101,6
6154 REM "O$(99,6)="800"; REM WAS 101,6
6157 WRITE_SEQ$=STR(1:"000")
6160 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"5OE01"+DIM(1),DOM=*NEXT)ORD$+WRITE_SEQ$+"5OE01"+DIM(1)+O$(17)+DIM(252); GOTO 6190
6161 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000 ")
6162 GOTO 6168
6199 RETURN 
6200 REM "ERROR IN 'PI' RECORD - END CONSUMER PO RECORD - PROCESS ERROR
6210 R$="OS"+PAD(PIR$(3,2),4,1," "); REM 'PAD ERR TO 6 TO READ IN OS3
6220 DIM R1$(128)
6230 READ (Z[10],KEY=R$,DOM=6231)IOL=0370
6240 DIM O$(123)
6250 O$(20,60)=R1$(7,60); O$(80,10)=DATE$; O$(90,8)=TIME$
6251 O$(98,6)=R$
6259 WRITE_SEQ$=STR(1:"000")
6260 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"2PI"+DIM(3),DOM=*NEXT)ORD$+WRITE_SEQ$+"2PI"+DIM(7)+O$(20)+PIR$; GOTO 6290
6261 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
6262 GOTO 6260
6290 RETURN 
7000 DO_WINDX:! Process command intended to be run on client                   
7001 REM "ENV_TEMP$="C:\TEMP"
7003 ! CALL "[WDX]*Windx.utl;Get_Val","ENV("+QUO+"TEMP"+QUO+")",ENV_TEMP$; CALL "[WDX]*Windx.utl;Get_Val","ENV("+QUO+"COMSPEC"+QUO+")",ENV_COMSPEC$ ! Get e nv values we need
7004 ENV_TEMP$="/tmp" ! "C:\WGET" ! DBD-242
7005 R$="",END_MARK$="--"+FID(0)+FID(0)+FID(0)+"--"; TEMP_FILE$=ENV_TEMP$+"/"+"commout"+FID(0); MAX_TIME=ALLOWED_TIME; IF NUM(ZC0$(71,3),ERR=*NEXT)>0 THEN MAX_TIME=NUM(ZC0$(71,3),ERR=*NEXT)
7007 GOSUB CREATE_UNIQUE_TEMP_FILE
7010 ! DOIT$=WINDX$+ENV_COMSPEC$+" /c /tmp/wget.exe --post-file="+TMP$+" -q -O- "+URL$+">> "+TEMP_FILE$+" && echo "+END_MARK$+" >> "+TEMP_FILE$
7012 DOIT$="curl -s --data "+QUO+"@"+TMP$+QUO+" "+QUO+URL$+QUO+" -o "+TEMP_FILE$ ! DBD-242
7020 CALL "ZZ2LOG;LOG_MSG",ERR=*NEXT,X3$,X4$,LOG_CHANNEL,"ORDER|"+ORD$+"|TRANSMISSION COMMAND|"+DOIT$,%LOG_DEBUG ! 252868
7050 INVOKE DOIT$ ! DBD-242
7051 WAIT 30; REM " NEED LONGER WAIT FOR UN 
7060 SLOT=HFN; OPEN (SLOT,ISZ=5000)WINDX$+TEMP_FILE$
7061 WAIT 1
7065 READ (SLOT,SIZ=1,END=7070)R_IN$; R$=R$+R_IN$; GOTO 7065
7066 REM "IF STP(R_IN$,1)=END_MARK$ THEN GOTO 7070 ! If w e find the end mark we are done
7068 R$=R$+SEP+R_IN$
7069 GOTO 7065
7070 CLOSE (SLOT)
7077 REM "EM=POS(END_MARK$=R$); IF EM<>0 THEN R$=MID(R$,1,EM-1)
7080 REM "ERASE WINDX$+TEMP_FILE$,ERR=*NEXT
7100 CALL "ZZ2LOG;LOG_MSG",ERR=*NEXT,X3$,X4$,LOG_CHANNEL,"ORDER|"+ORD$+"|RESPONSE|"+R$,%LOG_DEBUG ! 252868
7299 RETURN 
7300 REM "ERROR 220
7310 R$=PAD(RETURN$(1,3),6,1," ")
7315 DIM R1$(128)
7320 READ (Z[10],KEY=R$,DOM=7321)IOL=0370
7325 DIM O$(254)
7330 O$(167,6)=R$; O$(20,60)=R1$(7,60); O$(173,10)=TIME$; O$(183,8)=TIME$
7335 WRITE_SEQ$=STR(1:"000")
7340 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"88888"+DIM(1),DOM=*NEXT)ORD$+WRITE_SEQ$+"88888"+DIM$(1)+O$(17)+DIM(255); GOTO 7399
7345 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
7350 GOTO 7340
7399 RETURN 
7650 CREATE_UNIQUE_TEMP_FILE:! take TEMP_FILE$ and make it unique and make it  to use, we let caller make the temp_file name so we don't have to be opera ting system specific 
7655 RND$=STR(INT(RND*1000):"0000")
7660 TST=HFN; OPEN (TST,ERR=7665)WINDX$+TEMP_FILE$+RND$; CLOSE (TST); GOTO 7655 ! if opened then go get another random number
7665 TEMP_FILE$+=RND$; SERIAL WINDX$+TEMP_FILE$ ! name is unique, set it & crea te file to hold it 
7699 RETURN 
9000 REM "ERROR PROCESSING
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 1000
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000
9520 ON C9 GOTO 1140,2040
9750 REM 
9760 CALL "ZZFLES",X3$,Y1$,Y0$,Y$,Z{ALL},Z0,Z1; ON Z0 GOTO 9761,9900
9790 RETURN 
9900 REM "End program
9909 REM "IF V8$="A" THEN V3$(2,6)="AUTO"+V7$
9910 REM "CALL "ZZERPT",X3$,X4$,X0$,Y3$,Y4$,W9,W2,W5,W,W0,W8,T3,V3$
9912 CALL "ZZ2LOG;LOG_MSG",ERR=*NEXT,X3$,X4$,LOG_CHANNEL,"END|",%LOG_INFO ! 252868
9915 CALL "ZZ2LOG;CLOSE_LOG",ERR=*NEXT,X3$,X4$,LOG_CHANNEL ! 252868
9920 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9921 Y4$="ZZ2PGC"
9922 IF %GUI THEN CALL Y4$,ERR=*NEXT
9923 IF %GUI THEN EXIT 
9930 IF Y4$<>"" THEN RUN Y4$,ERR=9931
9940 RUN "ZMENU"
9999 END 
56000 REM "191375-Modify United shipping type to be S instead of  
56001 REM "194096-List of Issues with importing Invoices from United 
56002 REM "229660-TOPS - customer po is not printing on the packing list and  
56003 REM "252868-Office Products - United - issue processing orders          
56004 REM "307390-DBD-242 Essendant order transmission failing due to SSL conn
