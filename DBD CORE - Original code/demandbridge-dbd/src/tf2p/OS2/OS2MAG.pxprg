0010 REM "Error Description Maintenance  <OS2MAG>
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 11/02/09 - 14.640555 - tma - SSP# 233911
0037 REM "233911-GUI Office Products - Error Description Maintenance allows  
0040 REM "Copyright 2009 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000
0110 X0$="OS2MAG",X1$="Error Description Maintenance"; K9$="",K9=0
0120 DIM E$(200)
0130 K0=3,K1=1
0135 C9=-1,V9=-2
0140 M0$="###,###.00-"
0200 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0299 CALL "ZZ2PRP","OS",RESULT$,DATE$; IF RESULT$<>"Y" THEN CALL "ZZPROM",".4",X3$,Z,"ACCESS DENIED! The Office Supply Interface System is not an installed module.","","",0; RUN "ZMENU"
0300 REM "IOLISTS
0310 IOLIST A$(1)
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01X OS3...  13O ZZPARM  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0540 FIND (Z[13],KEY=X3$(9,3)+"F/M",DOM=0541)P$
0550 DIM SEC$(255); READ (Z[13],KEY="osec"+X3$(40,3),DOM=0551)SEC$
0600 REM "
0620 GOSUB 6000
0700 REM "
0710 CALL "ZZDISP","AX","XXXXXXXXX","ARV",X3$,Q$,"",0,0,X4$
0720 J0=22+LEN(Q$)
0990 READ (Z[1],KEY=K9$,DOM=0991)
1000 REM "
1010 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,X2
1030 DIM B$(202)
1035 DIM A$(128+K9),A[1]
1045 A$(1,0+K9)=K9$+A1$
1060 PRINT (0,ERR=1070)'CF',; GOSUB 6450; GOTO 1100
1070 GOSUB 6000; GOSUB 6450
1100 REM "KEY SEQ
1110 X0=-1,C0=0,X1=0,C9=0,Z9=0
1120 C0=ABS(C0),X$=""; IF C0=2 AND X0>0 THEN X0=X0-1 ELSE IF C0<>2 THEN X0=X0+1; IF C0=4 THEN GOTO 9900
1140 ON X0 GOTO 1200,1500
1200 REM "Item Number
1210 CALL "ZZENTR","AXUX",A{ALL},A$,X4$,X3$,25,3+V0,1+K9,6,C0,"","{1"+X$,K9$,"FM2SAA00","OS3","",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 1210,1211
1215 IF C0<0 THEN ON INT(ABS(C0)-2) GOTO 1210,6800,9800,6970
1240 GOTO 1120
1500 REM "
1505 Z9=-1
1510 A1$=K9$+A$(LEN(K9$)+1,6),A$(1,LEN(K9$))=K9$
1520 READ (Z[1],KEY=A1$,DOM=1600)IOL=0310
1525 Z9=0
1530 GOSUB 6600
1590 GOTO 1700
1600 REM "
1620 CALL "ZZPROM","2",X3$,Z,"","","",0; ON Z GOTO 1650,1630,6975
1630 GOTO 1000
1660 IF V9>=0 THEN GOSUB 6200
1690 GOTO 2000
1700 REM "
1790 GOSUB 6200
1800 REM "
1820 CALL "ZZPROM",STR(6+C9),X3$,Z,"","","V",X0; ON Z GOTO 1850,6500,1630,6700
1830 GOTO 2000
1850 REM "MODIFY
1855 X0=X0-1; IF Z9=1 THEN GOTO 1880 ELSE IF Z9=0 THEN Z9=1
1860 EXTRACT (Z[1],KEY=A1$,DOM=1870)IOL=0310
1865 C9=1
1870 GOSUB 6200
1890 IF Z<0 THEN GOTO 2035 ELSE GOTO 2000
2000 REM "DATA SEQ
2010 C0=0,X0=-1,X1=1
2020 C9=1,X$="",C0=ABS(C0),X0=X0+1; IF C0=2 THEN IF X0>0 THEN X0=X0-2
2025 IF C0>3 OR X0<0 THEN GOTO 1800
2035 IF X0*6+11<LEN(V9$) THEN IF V9$(X0*6+11,1)="2" THEN GOTO 2020
2040 ON X0 GOTO 2100,2150,2200,1800
2100 REM "Error Description
2110 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,18,5+V0,7+K9,60,C0,"","{3"+X$,"","OS2MAG02","","",""
2140 GOTO 2020
2150 REM "Error Description - 2
2160 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,18,8+V0,67+K9,60,C0,"","{3"+X$,"","OS2MAG04","","",""
2190 GOTO 2020
2200 REM " TYPE OF ERROR - F=FATAL,W=WARNING
2205 X$="A=OK,H=Help Desk,C=Cust Serv,I=Info,D=Check Data,N=Not Processed,T=Call TopForm"
2210 CALL "ZZENTR","SRU",A{ALL},A$,X4$,X3$,18,10+V0,127+K9,1,C0,"","{3"+X$,"HCIDNAT ","OS2MAG02","","",""
2220 IF A$(127+K9,1)="H" THEN DESC$="Call Help Desk" ELSE IF A$(127+K9,1)="C" THEN DESC$="Call Customer Service" ELSE IF A$(127+K9,1)="I" THEN DESC$="Info Only" ELSE IF A$(127+K9,1)="D" THEN DESC$="Check Data" ELSE IF A$(127+K9,1)="A" THEN DESC$="ACCEPTED" ELSE IF A$(127+K9,1)="N" THEN DESC$="Not Processed" ELSE IF A$(127+K9,1)="T" THEN DESC$="Call Topform"
2230 PRINT @(21,10+V0),DESC$,'CL',
2240 GOTO 2020
2250 REM "
2260 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,25,11+V0,35+K9,2,C0,"","{3"+X$,"MDGCS ","OS2MAG04","","",""
2290 GOTO 2020
2300 REM "
2310 CALL "ZZENTR","AU",A{ALL},A$,X4$,X3$,21,11+V0,37+K9,11,C0,"ARV","{3"+X$,"","OS2MAG12","","",""
2340 GOTO 2020
2350 REM "
2360 CALL "ZZENTR","SRU",A{ALL},A$,X4$,X3$,21,12+V0,38+K9,1,C0,"","{3"+X$,"","OS2MAG10","","",""
2390 GOTO 2020
2400 REM "
2410 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,26,13+V0,39+K9,3,C0,"","{1"+X$,"","OS2MAG22","","",""
2440 GOTO 2020
2450 REM "
2460 CALL "ZZENTR","SZU",A{ALL},A$,X4$,X3$,26,14+V0,40,2,C0,"","{1"+X$,"","FM2SAA24","","",""
2490 GOTO 2020
2500 REM "
2510 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,26,15+V0,41,5,C0,"","{3"+X$,"","OS2MAG10","","",""
2540 GOTO 2020
2550 REM "
2552 X$="For future use"
2560 CALL "ZZENTR","Z",A{ALL},A$,X4$,X3$,26,16+V0,42,1,C0,"","{3"+X$,"","FM2SAA12","","",""
2590 GOTO 2020
3000 REM "
3005 X$="For reorder purposes, the average days to produce after order is placed"
3010 CALL "ZZENTR","N.&",A{ALL},A$,X4$,X3$,58,17+V0,43,1,C0,M0$,"{3"+X$,"","AR2MAC22","","",""
3040 GOTO 2020
3050 REM "
3055 X$="For reorder grouping report"
3060 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,58,17,44,1,C0,M0$,"{3"+X$,"","OS2MAG24","","",""
3090 GOTO 2020
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6016)'SB',
6060 PRINT @(11,3+V0),"Error Code :",@(0,4+V0),Z0$,
6070 PRINT @(1,5+V0),"Description : ",@(0,8+V0),"Description 2 :",
6080 PRINT @(3,10+V0),"Error Type :",
6165 PRINT (0,ERR=6166)'SF',
6190 RETURN 
6200 REM "DISPLAY DATA
6215 GOSUB 6450
6220 PRINT @(18,5+V0),A$(7+K9,60),
6240 PRINT @(18,8+V0),A$(67+K9,60),
6250 PRINT @(18,10+V0),A$(127+K9,1),
6261 IF A$(127+K9,1)="H" THEN DESC$="Call Help Desk" ELSE IF A$(127+K9,1)="C" THEN DESC$="Call Customer Service" ELSE IF A$(127+K9,1)="I" THEN DESC$="Info Only" ELSE IF A$(127+K9,1)="D" THEN DESC$="Check Data" ELSE IF A$(127+K9,1)="A" THEN DESC$="ACCEPTED" ELSE IF A$(127+K9,1)="N" THEN DESC$="Not Processed" ELSE IF A$(127+K9,1)="T" THEN DESC$="Call Topform"
6265 PRINT @(21,10+V0),DESC$,'CL',
6390 RETURN 
6400 REM "WHOLE SCREEN
6405 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,0
6420 GOSUB 6000
6430 IF C9>=0 THEN GOSUB 6200 ELSE GOSUB 6450
6440 IF ABS(C0)>4 THEN C0=ABS(C0)-5
6445 RETURN 
6450 REM "DISPLAY KEYS
6455 IF C9<0 THEN GOTO 6445
6460 PRINT @(25,3+V0),A$(1+K9,6),
6490 RETURN 
6500 REM "DELETE
6510 REMOVE (Z[1],KEY=A1$,DOM=6511)
6590 GOTO 1630
6600 REM "ALT KEY DATA READS
6690 RETURN 
6700 REM "ADD ENTRY
6705 IF Z9=0 THEN GOTO 6790
6710 WRITE (Z[1],KEY=A1$)IOL=0310
6790 GOTO 1630
6800 REM "NEXT ENTRY IN FILE
6805 ON 10*FPT(C0)+2 GOTO 6850,6806
6810 A1$=KEY(Z[1],END=6895)
6820 A$(1,LEN(A1$))=A1$
6825 IF A1$(1,LEN(K9$))<>K9$ THEN GOTO 6895
6830 GOSUB 6600
6835 GOSUB 6450
6840 GOTO 1515
6850 REM PRIOR ENTRY
6855 CALL "ZZKEYP",ERR=6856,Z[1],A1$; GOTO 6820
6860 CALL "ZZKEYL",ERR=6861,Z[1],A1$; GOTO 6820
6870 GOTO 6895
6890 GOTO 1515
6896 PRINT 'RB',; READ (Z[1],KEY=K9$,DOM=1000); GOTO 1000
7500 REM "CUSTOM PROGRAMMING ROUTINES
9000 REM "ERROR PROCESSING
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CON™ROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9800 REM "EXIT PROGRAM
9900 REM "END PROGRAM
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9920 SETERR 9940
9930 Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
20000 ! 100 - Initialization
20010 INIT:
20015 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; IF X1>0 THEN CMD_STR$="END"; GOSUB WRAPUP; GOTO *RETURN
20020 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
20030 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
20040 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
20050 GOSUB SETUP_KEYS
20055 CALL "ZZ2PRP","OS",RESULT$,DATE$; IF RESULT$<>"Y" THEN MSGBOX "","TOPS Module is not installed"; CMD_STR$="END"; GOSUB WRAPUP; GOTO *RETURN
20060 _FILE_NAME$="OS3"+%C$
20070 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
20080 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
20082 DIM Z[NUM(X3$(60,3))]
20085 Z$="01X OS3...  13O ZZPARM  "
20087 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; IF Z0>0 THEN GOTO OPEN_ERR
20090 RETURN 
20100 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
20110 CMD_STR$="END"
20120 RETURN 
20130 ! 300 - Set up the message library
20140 SETUP_LIBRARY:
20150 _SV_MSGLIB$=MSG(*)
20160 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
20170 MESSAGE_LIB "*tfmsglib."+_LANG$,ERR=*NEXT; GOTO 20190
20180 MESSAGE_LIB "*tfmsglib.en"
20190 SET_MSG:GOSUB SETUP_MESSAGES
20200 RETURN 
20210 ! 400 - Set up key information
20220 SETUP_KEYS:
20230 _NUMKEYS=1
20240 DIM _KEYS$[1:1]; _KEYS$[1]="ERROR_CODE$"
20250 _KEY1=1
20260 RETURN 
20270 ! 500 - Main panel post_display logic
20280 MAIN_POST_DISPLAY:
20290 MESSAGE_LIB _SV_MSGLIB$
20300 GOSUB CLEAR_REC
20310 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
20320 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
20330 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
20340 RETURN 
20350 ! 900 - Wrapup
20360 WRAPUP:
20370 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
20380 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
20390 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
20400 MESSAGE_LIB _SV_MSGLIB$
20410 SET_PARAM 'KR'=_SV_KR
20415 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
20420 RETURN 
20430 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
20440 FIND_REC:
20450 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
20460 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
20470 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
20480 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
20490 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
20500 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
20510 GOSUB PROCESS_READ
20520 GOSUB NUM_TO_STR
20530 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
20540 EXIT 
20550 ! 1200 - New RECORD check
20560 NEW_RECORD:
20572 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",ANSWER$ ! SSP#233911   
20575 IF ANSWER$="NO" THEN GOTO CLEAR_REC ! SSP#233911                         
20579 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS ! SSP#233911
20580 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
20590 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
20600 RETURN 
20610 ! 1400 - Add RECORD
20620 WRITE_REC:
20630 GOSUB STR_TO_NUM
20640 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
20650 GOSUB REVIEW_WRITE
20660 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20670 CHANGE_FLG=0
20680 NEXT_ID=_FIRST_KEY
20685 GOSUB CLEAR_REC
20690 EXIT 
20700 ! 1600 - Delete
20710 DELETE_REC:
20720 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
20730 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
20740 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
20750 IF _X$<>"YES" THEN RETURN 
20760 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
20770 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20780 CHANGE_FLG=0
20785 CHANGE_FLG=0; _CLR_FLG$="R"; GOSUB CLEAR_REC ! SSP#233220
20790 NEXT_ID=_FIRST_KEY
20800 EXIT 
20810 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
20820 ! 1800 - Clear record
20830 CLEAR_REC:
20840 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
20850 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
20860 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20870 CHANGE_FLG=0
20875 DROP_BOX LOAD 10004,DIM(10)+"/"; DROP_BOX LOAD 10004,MSG("AHCIDNT") ! SSP#233220
20879 NEXT_ID=ERROR_CODE.CTL ! SSP#233911
20880 RETURN 
20890 ! 2000 - Browsing mode
20900 ! - Next
20910 NEXT_REC:
20920 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
20930 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
20940 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
20950 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
20960 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
20970 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
20980 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
20990 ! 2200 - Prior record
21000 PRIOR_REC:
21010 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21020 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
21030 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
21040 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
21050 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
21060 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
21070 ! 2400 - First record
21080 FIRST_REC:
21090 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21100 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
21110 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
21120 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
21130 ! 2600 - Last record
21140 LAST_REC:
21150 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21160 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
21170 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
21180 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
21190 ! 3000 - Subroutines
21200 ! Processing required by READ
21210 PROCESS_READ:
21220 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
21230 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
21240 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
21250 CHANGE_FLG=0
21260 RETURN 
21270 ! 3200 - Review record for changes before WRITE
21280 REVIEW_WRITE:
21290 _CHG1$="",_CHG2$=""
21300 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
21310 GOSUB DETERMINE_CHGS
21320 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
21330 IF _CHG1$="" THEN GOTO CHK2
21340 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
21350 IF _YESNO$="NO" THEN GOTO *RETURN
21360 IF _CHG2$="" THEN GOTO WRT
21370 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
21380 GOSUB INCORPORATE_CHGS
21390 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
21400 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
21410 GOSUB NUM_TO_STR
21420 REFRESH_FLG=1
21430 RETURN 
21440 WRITE_ERROR:
21450 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
21460 RETURN 
21470 ! 3500 - Display a record
21480 DISP_REC:
21490 GOSUB NUM_TO_STR
21500 REFRESH_FLG=1
21510 RETURN 
21520 ! 3600 - Busy Record display
21530 BUSY_CHK:
21540 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
21550 IF _D$="NO" THEN EXIT 
21560 RETURN 
21570 ! 3790 - See if changes are to be written
21580 CHECK_CHANGES:
21590 IF _FIRST_KEY=0 THEN _FIRST_KEY=ERROR_CODE.CTL,_FIRST_FIELD=DESC_1.CTL
21600 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
21610 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
21620 IF _YESNO$="YES" THEN GOTO WRITE_REC
21630 CHANGE_FLG=0
21640 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
21650 RETURN 
21660 ! 4000 - Get the current key segment number
21670 GET_CURKEY:
21680 FOR _CURKEY=1 TO _NUMKEYS
21690 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
21700 NEXT _CURKEY
21710 RETURN 
21720 ! 9000 - Retrieve messages from the *msglib.xxx library
21730 SETUP_MESSAGES:
21740 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
21750 _MSG_DIRECTORY$=MSG("DIRECTORY")
21760 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
21770 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
21780 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
21790 _MSG_MANDATORY$=MSG("MANDATORY")
21800 _MSG_NEXT$=MSG("NEXT")
21810 _MSG_NON_NUMER$=MSG("NON_NUMER")
21820 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
21830 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
21840 _MSG_PRECEDING$=MSG("PRECEDING")
21850 _MSG_PREFIX$=MSG("PREFIX")
21860 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
21870 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
21880 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
21890 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
21900 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
21910 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
21920 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
21930 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
21940 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
21950 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
21960 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
21970 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
21980 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
21990 _MSG_START_FILE$=MSG("START_FILE")
22000 _MSG_UPDATE$=MSG("UPDATE")
22010 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
22020 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
22030 _MSG_UPD_SAME$=MSG("UPD_SAME")
22040 _MSG_WARNING$=MSG("WARNING")
22050 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
22060 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
22070 RETURN 
30000 ! 10000 - Convert numeric values to string
30010 NUM_TO_STR:
30020 RETURN 
31000 ! 11000 - Convert numeric strings to number
31010 STR_TO_NUM:
31020 RETURN 
31030 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
31040 NEXT_ID=_X
31050 EXIT 
32000 ! 12000 - Check if the required fields have data
32010 CHECK_REQD_FLDS:
32020 _W_FLG=1
32030 RETURN 
33000 ! 13000 - Clear the record fields
33010 CLEAR_FIELDS:
33020 IF _CLR_FLG$="R" THEN ERROR_CODE$=""
33030 DESC_1$=""
33040 DESC_2$=""
33050 ERROR_TYPE$=""
33060 OS3_UNUSED_1$=""
33070 GOSUB NUM_TO_STR
33080 REFRESH_FLG=1
33090 RETURN 
34000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
34010 ENABLE_GROUPS:
34020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
34030 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
34040 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
34050 RETURN 
35000 ! 15000 - Determine the changes that have been made before writing
35010 DETERMINE_CHGS:
35020 DIM _CHG_VAR$(5,"N")
35030 IF _ORIG.ERROR_CODE$=_CUR.ERROR_CODE$ OR ERROR_CODE$=_CUR.ERROR_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ERROR_CODE$=ERROR_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ERROR_CODE")+" = "+_CUR.ERROR_CODE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ERROR_CODE")+" = "+_CUR.ERROR_CODE$
35040 IF _ORIG.DESC_1$=_CUR.DESC_1$ OR DESC_1$=_CUR.DESC_1$ THEN GOTO *NEXT ELSE IF _ORIG.DESC_1$=DESC_1$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC")+" = "+_CUR.DESC_1$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC")+" = "+_CUR.DESC_1$
35050 IF _ORIG.DESC_2$=_CUR.DESC_2$ OR DESC_2$=_CUR.DESC_2$ THEN GOTO *NEXT ELSE IF _ORIG.DESC_2$=DESC_2$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC")+" = "+_CUR.DESC_2$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC")+" = "+_CUR.DESC_2$
35060 IF _ORIG.ERROR_TYPE$=_CUR.ERROR_TYPE$ OR ERROR_TYPE$=_CUR.ERROR_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.ERROR_TYPE$=ERROR_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("ERR_TYPE")+" = "+_CUR.ERROR_TYPE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ERR_TYPE")+" = "+_CUR.ERROR_TYPE$
35070 IF _ORIG.OS3_UNUSED_1$=_CUR.OS3_UNUSED_1$ OR OS3_UNUSED_1$=_CUR.OS3_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.OS3_UNUSED_1$=OS3_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.OS3_UNUSED_1$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.OS3_UNUSED_1$
35080 RETURN 
36000 ! 16000 - Incorporate changes made by another user into the record
36010 INCORPORATE_CHGS:
36020 IF _CHG_VAR$(1,1)="Y" THEN ERROR_CODE$=_CUR.ERROR_CODE$
36030 IF _CHG_VAR$(2,1)="Y" THEN DESC_1$=_CUR.DESC_1$
36040 IF _CHG_VAR$(3,1)="Y" THEN DESC_2$=_CUR.DESC_2$
36050 IF _CHG_VAR$(4,1)="Y" THEN ERROR_TYPE$=_CUR.ERROR_TYPE$
36060 IF _CHG_VAR$(5,1)="Y" THEN OS3_UNUSED_1$=_CUR.OS3_UNUSED_1$
36070 RETURN 
56001 REM "233220-GUI - Issue with Error Description Maintenance Panel in     
