0010 REM "Pricing Table Setup  - OS1 -<OS2MFA>
0015 REM "Prog Type: IP-3.0A    
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 01/13/11 - 10.57 - tma - SSP# 243181
0037 REM "243181-Office Products - Pricing Table - various issue with the    
0040 REM "Copyright 2011 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0042 REM "If 45,1=N means variable u/m then if qty/unit=1 use selling qty/unit
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000; SETESC 9300
0110 X0$="OS2MFA",X1$="Pricing Table Setup"
0120 DIM Z0$(80,"-")
0130 K0=7,K1=2
0135 C9=-1
0140 M0$="###,###,##0",M1$="###.00",M2$="####0-",M3$="###,###.00"
0200 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(65,1)>"2" THEN PRECISION NUM(X3$(65,1),ERR=0246)
0290 K9=14
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0299 CALL "ZZ2PRP","OS",RESULT$,DATE$; IF RESULT$<>"Y" THEN CALL "ZZPROM",".4",X3$,Z,"ACCESS DENIED! The Office Supply Interface System is not an i n stalled module.","","",0; RUN "ZMENU"
0300 REM "IOLISTS
0310 IOLIST A$(1)
0320 IOLIST B$
0330 IOLIST C$
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01X OS1...  02OSOS1...  03O OS0...  04O OS5...  05O OS7...  13O ZZPARM  "
0520 GOSUB 9750; ON Z0 GOTO 0521,9900
0600 REM "
0610 READ (Z[13],KEY=X3$(9,3)+"OSP")OSP_PARMS$
0680 GOSUB 6000
1000 REM "
1010 Y8=1; CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,X2
1015 DIM V7$(7); V7$(2,1)="1",V7$(3,1)="1"
1030 DIM B$(60),C$(60)
1032 DIM P[1]
1035 DIM A$(250)
1045 A$(1,LEN(A1$))=A1$; IF A1$="" THEN A$(1,LEN(K9$))=K9$
1060 PRINT (0,ERR=1070)'CF',; GOSUB 6450; GOTO 1100
1070 GOSUB 6000; GOSUB 6450
1100 REM "KEY SEQ
1110 X0=-1,C0=0,X1=0,C9=0,Z9=0
1120 SETERR 9000; C0=ABS(C0),X$=""; IF C0=2 AND X0>0 THEN X0=X0-1 ELSE IF C0<>2 THEN X0=X0+1; IF C0=4 THEN GOTO 9900
1140 ON X0 GOTO 1200,1250,1500
1200 REM "
1205 IF LEN(A1$)>1 THEN A$(2,3)=A1$(2,3); GOTO 1220
1210 CALL "ZZENTR","AXUX",A{ALL},A$,X4$,X3$,27,3,1,10,C0,"","{1"+X$,"","OS2MFA00","OSD","",""; IF C0=4 THEN GOTO 9900 ELSE IF ABS(C0)>4 THEN GOSUB 6400; REM C0=1
1212 IF INT(ABS(C0))=3 THEN C0=-ABS(C0); READ (Z[3],KEY=A$(1,10),DOM=1213)
1215 IF C0<0 THEN ON INT(ABS(C0)-2) GOTO 1210,6800,9800,6970
1220 IF V9<>-2 THEN FIND (Z[3],KEY=A$(1,10),DOM=1210)IOL=0320
1230 PRINT @(40,3),B$(37,40),
1240 GOTO 1120
1260 CALL "ZZENTR","SZXUX",A{ALL},A$,X4$,X3$,27,4,11,6,C0,"","{2"+X$,"","OS2MFA02","OS5","",""; IF C0=6 THEN GOSUB 6400; C0=1; REM SSP 222704
1261 IF ABS(C0)=2 AND LEN(A1$)>0 THEN A1$=A1$(1,0) ELSE IF ABS(C0)=4 THEN GOTO 9900
1262 IF INT(ABS(C0))=3 THEN GOTO 6800 ELSE IF ABS(C0)=4 THEN GOTO 9900 ELSE IF ABS(C0)=2 THEN GOTO 1120
1263 FIND (Z[4],KEY=A$(11,6),DOM=1260)PRICE_PLAN$
1264 PRINT @(35,4),PRICE_PLAN$(7,30)
1265 FIND (Z[4],KEY=PRICE_PLAN$(53,6),DOM=*NEXT)COST_PRICE_PLAN$
1266 IF LEN(COST_PRICE_PLAN$)=0 THEN DIM COST_PRICE_PLAN$(55); COST_PRICE_PLAN$(52,1)=OSP_PARMS$(225,1); REM " SSP# 170200
1270 FIND (Z[2],KEY=A$(1,16),DOM=1500)IOL=0330
1271 REM "IF V9<>-2 THEN FIND (Z[2],KEY=A$(1,16),DOM=1260)IOL=0330
1280 REM "PRINT @(31,4),C$(5,30),
1290 GOTO 1120
1500 REM "
1505 Z9=-1,C9=0,A2$="",A3$="",A4$="",A5$=""
1510 A1$=A$(1,16)
1520 READ (Z[1],ERR=7200,KEY=A1$,DOM=1600)IOL=0310
1522 READ (Z[5],KEY=A$(1,10)+PRICE_PLAN$(53,6),DOM=1523)OS7$
1525 Z9=0,V7$=""; GOSUB 5800
1590 GOTO 1700
1600 REM "
1620 CALL "ZZPROM","2",X3$,Z,"","","",0; ON Z GOTO 1650,1630
1630 GOTO 1000
1680 GOSUB 7450
1685 IF PRICE_PLAN$(59,1)="F" THEN PRINT @(46,8+V0),"Flyer", ELSE IF PRICE_PLAN$(59,1)="C" THEN PRINT @(46,8+V0),"Catalog", ELSE IF PRICE_PLAN$(59,1)="M" THEN PRINT @(46,8+V0),"Matrix", ELSE IF PRICE_PLAN$(59,1)="U" THEN PRINT @(46,8+V0),"User Defined", ELSE PRINT @(46,8+V0),'CL',; REM SSP 216627
1690 GOTO 2000
1700 REM "
1790 GOSUB 6200
1800 REM "
1820 CALL "ZZPROM",STR(6+C9),X3$,Z,"","","V",X0; ON Z GOTO 1850,6500,1630,6700,1821
1825 GOTO 6700
1830 GOTO 2000
1850 REM "MODIFY
1855 X0=X0-1; IF Z9=1 THEN GOTO 1880 ELSE IF Z9=0 THEN Z9=1
1860 GOSUB 7400
1870 GOSUB 6200
1890 IF Z<0 THEN GOTO 2035 ELSE GOTO 2000
2000 REM "DATA SEQ
2010 C0=0,X0=-1,X1=1
2020 SETERR 9000; X$="",Q$="",C0=ABS(C0),X0=X0+1; IF C0=2 THEN IF X0>0 THEN X0=X0-2
2025 IF INT(C0)=3 THEN GOSUB 7300 ELSE IF C0>3 OR X0<0 THEN GOTO 1800
2038 IF X0<LEN(V7$) THEN V7$(X0+1,1)=""
2040 ON X0 GOTO 2100,2150,2250,2350,2450,1800
2100 REM " Start Date
2110 CALL "ZZENTR","D",A{ALL},A$,X4$,X3$,20,6,25,6,C0,"","{3"+X$,"","OS2MFA04","","",""
2140 GOTO 2020
2150 REM " End Date
2160 CALL "ZZENTR","D",A{ALL},A$,X4$,X3$,46,6,31,6,C0,"","{3"+X$,"MDGS","OS2MFA06","","",""
2190 GOTO 2020
2200 REM "QUANTITY 1
2210 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,24,9,37,10,C0,"","{3"+X$,"","OS2MFA08","","",""
2240 GOTO 2020
2250 REM "PRICE 1
2260 CALL "ZZENTR","S",J{ALL},A$,X4$,X3$,37,9,47,10,C0,M3$,"{3"+X$,"","OS2MFA10","","",""
2265 PRINT @(37,9),NUM(A$(47,10)):M3$,
2270 GOTO 2020
2300 REM "QUANTITY 2
2310 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,24,10,57,10,C0,M1$,"{3"+X$,"","OS2MFA12","","",""
2340 GOTO 2020
2350 REM "COST   
2351 IF LEN(OS7$)=0 THEN GOTO 2360
2352 IF LEN(COST_PRICE_PLAN$)=0 THEN DIM COST_PRICE_PLAN$(55); COST_PRICE_PLAN$(52,1)=OSP_PARMS$(225,1)
2354 PLAN=NUM(COST_PRICE_PLAN$(52,1))
2355 IF PLAN=1 THEN A$(57,10)=OS7$(27,10)
2356 IF PLAN=2 THEN A$(57,10)=OS7$(47,10)
2358 IF PLAN=3 THEN A$(57,10)=OS7$(67,10)
2360 CALL "ZZENTR","S",J{ALL},A$,X4$,X3$,37,11,57,10,C0,M3$,"{3"+X$,"","OS2MFA10","","",""
2365 PRINT @(37,11),NUM(A$(57,10)):M3$,
2370 GOTO 2020
2400 REM "QUANTITY 3
2410 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,24,11,77,10,C0,M1$,"{3"+X$,"","OS2MFA12","","",""
2440 GOTO 2020
2450 REM "BENCHMARK COST
2460 CALL "ZZENTR","S",J{ALL},A$,X4$,X3$,37,12,37,10,C0,M3$,"{3"+X$,"","OS2MFA10","","",""
2465 PRINT @(37,12),NUM(A$(37,10)):M3$,
2470 GOTO 2020
2500 REM "QUANTITY 4
2510 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,24,12,97,10,C0,M1$,"{3"+X$,"","OS2MFA12","","",""
2540 GOTO 2020
2550 REM "PRICE 4
2560 CALL "ZZENTR","S",J{ALL},A$,X4$,X3$,37,12,107,10,C0,M3$,"{3"+X$,"","OS2MFA10","","",""
2565 PRINT @(37,12),NUM(A$(107,10)):M3$,
2570 GOTO 2020
3250 REM "Selling U/M
3260 CALL "ZZENTR","SU",A{ALL},A$,X4$,X3$,74,6,40+K9,4,C0,"","{3"+X$,"U/M","IC2MAB48","U/M","ZZ2MUA",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 3260,3261
3265 FIND (Z[13],KEY="U/M"+A$(40+K9,4),DOM=3260)IOL=0390
3290 GOTO 2020
3300 REM "Selling pack"
3302 IF ABS(C0)=2 THEN O1$=A$(40+K9,4),O5=A[0]
3306 IF P[0]<>0 THEN A[0]=P[0] ELSE A[0]=P[1]
3308 PRINT @(73,7),A[0]:M2$,; GOTO 3311
3310 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,73,7,0,501,C0,M2$,"{3"+X$,"","IC2MAB50","","",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 3310,3311
3315 IF A[0]=0 THEN GOTO 3310
3320 IF O1$<>A$(40+K9,4) OR O5<>A[0] THEN GOSUB 7900
3340 GOTO 2020
5800 REM "Alt sort keys
5890 RETURN 
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6016)'SB',
6060 PRINT @(9,3+V0),"Item Number:",@(5,4+V0),"Price Plan Code:",@(0,5+V0),Z0$,
6065 PRINT @(60,6+V0),"Base :",
6070 PRINT @(7,6+V0),"Start Date :",@(34,6+V0),"End Date :",@(0,7+V0),Z0$,
6080 PRINT @(5,9+V0),"Calculated Price:",@(17,11+V0),"Cost:",
6081 REM "FOR I=1 TO 4; PRINT @(8,8+I),I,; NEXT I
6082 PRINT @(5,12+V0),"Benchmark  Price:",
6083 PRINT @(34,8+V0),"Plan Type: "; REM 216627
6165 PRINT (0,ERR=6166)'SF',
6190 RETURN 
6200 REM "DISPLAY DATA
6202 PRINT @(60,4),'CL',@(46,8),'CL'; REM SSP 216627
6203 IF A$(18,1)="F" THEN PRINT @(46,8+V0),"Flyer", ELSE IF A$(18,1)="C" THEN PRINT @(46,8+V0),"Catalog", ELSE IF A$(18,1)="M" THEN PRINT @(46,8+V0),"Matrix", ELSE IF A$(18,1)="U" THEN PRINT @(46,8+V0),"User Defined", ELSE PRINT @(46,8+V0),'CL',; REM SSP 216627
6205 IF A$(17,1)="L" THEN PRINT @(60,4),"LOADED PRICE" ELSE IF A$(17,1)="C" THEN PRINT @(60,4),"CALCULATED PRICE", ELSE IF A$(17,1)=" " THEN PRINT @(60,4),"CONTRACT PRICE",
6210 CALL "ZZDISP","D",A$(25,6),"",X3$,"","",20,6+V0,X4$
6211 CALL "ZZDISP","D",A$(31,6),"",X3$,"","",46,6+V0,X4$
6215 GOSUB 6450
6222 PRINT @(37,9),NUM(A$(47,10)):M3$,@(37,12),NUM(A$(37,10)):M3$,
6223 GOSUB 7900; F9$=M1$; REM "IF A$(38,1)="S" THEN F9$=M3$
6224 REM "FOR X=0 TO 2; PRINT @(37,10+X),NUM(A$(X*20+67,10)):M3$,
6225 PRINT @(67,6+V0),NUM(A$(237,10)):M3$,
6226 PRINT @(37,11),NUM(A$(57,10)):M3$,
6228 REM "NEXT X
6232 PRINT 
6390 RETURN 
6400 REM "WHOLE SCREEN
6405 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,0
6420 GOSUB 6000
6430 IF C9>0 THEN GOSUB 6200 ELSE GOSUB 6450
6440 IF ABS(C0)>4 THEN C0=ABS(C0)-5
6445 RETURN 
6450 REM "DISPLAY KEYS
6455 IF C9<0 THEN GOTO 6445
6457 FIND (Z[3],KEY=A$(1,10),DOM=6458)IOL=0320
6458 IF LEN(B$)>500 THEN PRINT @(40,3),B$(548,20),'CL'
6460 PRINT @(27,3),A$(1,10),@(27,4),A$(11,6),
6490 RETURN 
6500 REM "DELETE
6510 REMOVE (Z[1],KEY=A1$,DOM=6511)
6590 GOTO 1630
6600 REM "ALT KEY DATA READS
6605 FIND (Z[2],KEY="I"+A$(2,3),DOM=6606)IOL=0320
6610 FIND (Z[2],KEY="C"+A$(5,3),DOM=6611)IOL=0330
6612 FIND (Z[4],KEY=A$(11,6),DOM=1000)PRICE_PLAN$
6690 RETURN 
6700 REM "ADD ENTRY
6701 IF A$(18,1)=DIM(1) THEN A$(18,1)=PRICE_PLAN$(59,1)
6705 IF Z9=0 THEN GOTO 6790 ELSE IF V7$>"" THEN X0=POS(" "<>V7$); IF X0>0 THEN X0=X0-1; GOTO 2038
6710 WRITE (Z[1],KEY=A1$)IOL=0310
6790 C9=0; IF Z=6 OR K1=0 THEN GOTO 9900 ELSE IF Z<4 THEN GOTO 1000 ELSE C0=-(3.1+(Z-4)/10); GOTO 6800
6800 REM "NEXT ENTRY IN FILE
6805 ON 10*FPT(C0)+2 GOTO 6850,6806
6807 IF POS(" "<>A1$)=0 THEN A1$=A$; READ (Z(1),KEY=A1$(1,10),DOM=*NEXT)
6810 A1$=KEY(Z[1],END=6895)
6820 IF A1$="" THEN GOTO 6800 ELSE IF A1$(1,LEN(K9$))<>K9$ THEN GOTO 6895
6825 A$(1,LEN(A1$))=A1$
6830 GOSUB 6600
6835 GOSUB 6450
6840 GOTO 1515
6850 REM "PRIOR ENTRY
6855 CALL "ZZKEYP",ERR=6856,Z[1],A1$; GOTO 6820
6860 PRINT 'RB',; CALL "ZZKEYL",ERR=6861,Z[1],A1$; GOTO 6820
6865 GOTO 1100
6870 GOTO 6895
6890 GOTO 1515
6895 IF A1$="" THEN GOTO 6860 ELSE PRINT 'RB',; READ (Z[1],KEY=K9$,DOM=6896)
6898 ON S9 GOTO 6810,1100
7200 REM "Forced read 
7210 IF ERR<>0 THEN GOTO 9000
7220 CALL "ZZREAD",Z[1],A1$,A$,A{ALL},S8; ON S8 GOTO 7221,1630
7230 GOSUB 6200
7240 CALL "ZZPROM","E0",X3$,0,"","","",0; GOTO 7290
7250 CALL "ZZPROM","E0A",X3$,0,"","","",0; GOTO 7290
7290 GOTO 1630
7300 REM 
7310 ON FPT(C0)*10 GOTO 7390,7325,7330,7390
7325 IF V8$="" THEN X0=X0+4; GOTO 7390 ELSE X0=NUM(V8$(POS(STR(X0:"00")<=V8$,2),2)); GOTO 7390
7330 IF V8$="" THEN X0=X0-6; GOTO 7335 ELSE X0=POS(STR(X0-1:"00")<=V8$,2)-2; IF X0<0 THEN X0=0; GOTO 7390 ELSE X0=NUM(V8$(X0,2)); GOTO 7390
7335 IF X0<0 THEN X0=0; GOTO 7390
7390 IF X0>0 THEN X0=X0-0
7395 C0=3; RETURN 
7400 REM "EXTRACT
7410 EXTRACT (Z[1],ERR=7200,KEY=A1$,DOM=7440)IOL=0310
7420 C9=1,Z9=1; GOSUB 5800
7440 RETURN 
7450 REM "EXTRACT NEW ENTRY
7460 WRITE (Z[1],KEY=A1$,DOM=7250)IOL=0310; GOTO 7400
7490 RETURN 
7500 REM 
7590 RETURN 
7900 REM "RE-DISPLAY
7901 RETURN 
7920 FOR X=0 TO 11
7930 IF A[X*2+1]<>0 THEN PRINT @(16,10+X),A[1+X*2]/Q5:M0$,
7940 NEXT X
7995 RETURN 
8905 DEF FNP$(Z9$)="("+Z9$(1,3)+") "+Z9$(4,3)+"-"+Z9$(7,4)+" Ext: "+Z9$(11,4)
8910 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
8915 DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
8960 DEF FNZ(X)=INT(X-5)*2+1
9000 REM "ERROR PROCESSING
9010 Y5=ERR,Y6=TCB(5); IF Y5=68 OR Y5=69 THEN GOTO 9500
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9120 ON Y8 GOTO 9900,0990,9920
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)<>"1" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; SETESC 9300; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9740 RETURN 
9750 REM "FILES
9760 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
9790 RETURN 
9800 REM "EXIT PROGRAM
9900 REM "END PROGRAM
9905 Y8=2
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
10000 ! 100 - Initialization
10010 INIT:
10015 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; IF X1>0 THEN CMD_STR$="END"; GOSUB WRAPUP; GOTO *RETURN
10020 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
10030 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
10040 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
10050 GOSUB SETUP_KEYS
10055 CALL "ZZ2PRP","OS",RESULT$,DATE$; IF RESULT$<>"Y" THEN MSGBOX "","TOPS Module is not installed"; CMD_STR$="END"; GOSUB WRAPUP; GOTO *RETURN
10060 _FILE_NAME$="OS1"+%C$
10070 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
10080 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
10082 DIM Z[NUM(X3$(60,3))]
10085 Z$="03O OS0...  04O OS5...  05O OS7...  13O ZZPARM  "
10087 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; IF Z0>0 THEN GOTO OPEN_ERR
10090 RETURN 
10100 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
10110 CMD_STR$="END"
10120 RETURN 
10130 ! 300 - Set up the message library
10140 SETUP_LIBRARY:
10150 _SV_MSGLIB$=MSG(*)
10160 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
10170 MESSAGE_LIB "*tfmsglib."+_LANG$,ERR=*NEXT; GOTO 10190
10180 MESSAGE_LIB "*tfmsglib.en"
10190 SET_MSG:GOSUB SETUP_MESSAGES
10200 RETURN 
10210 ! 400 - Set up key information
10220 SETUP_KEYS:
10230 _NUMKEYS=2
10240 DIM _KEYS$[1:2]; _KEYS$[1]="ITEM_CODE$",_KEYS$[2]="PRICE_PLAN_CODE$"
10250 _KEY1=1
10260 RETURN 
10270 ! 500 - Main panel post_display logic
10280 MAIN_POST_DISPLAY:
10290 MESSAGE_LIB _SV_MSGLIB$
10300 GOSUB CLEAR_REC
10310 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
10320 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
10330 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
10340 RETURN 
10350 ! 900 - Wrapup
10360 WRAPUP:
10370 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
10380 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
10390 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
10395 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
10400 MESSAGE_LIB _SV_MSGLIB$
10410 SET_PARAM 'KR'=_SV_KR
10420 RETURN 
11000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
11010 FIND_REC:
11020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
11025 IF STP(EVS(_KEYS$[_CURKEY]),3)="" THEN RETURN 
11030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
11035 FIND (Z[3],KEY=ITEM_CODE$,DOM=*NEXT)OS0$; %OS_ITEM_DESC$=OS0$(37,40),SUPP_ITEM_NUM$=OS0$(548,20); REFRESH_FLG=1 ! SSP#240510
11040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
11050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
11060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
11062 PRICE_PLAN_CODE$=STR(NUM(PRICE_PLAN_CODE$,ERR=*NEXT):"000000"); GOTO 11064; REM SSP222704
11063 PRICE_PLAN_CODE$=PAD(PRICE_PLAN_CODE$,6," "); REM SSP 222704                 
11064 PRICE_PLAN_CODE.CTL'VALUE$=PRICE_PLAN_CODE$; REM SSP 222704                
11065 _KEY$(11,6)=PRICE_PLAN_CODE$; REM SSP 222704
11066 REFRESH_FLG=1; REM SSP 222704
11070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
11080 GOSUB PROCESS_READ
11090 GOSUB NUM_TO_STR
11095 IF FLYER_PRICE$="F" THEN PLAN_TYPE$="Flyer" ELSE IF FLYER_PRICE$="C" THEN PLAN_TYPE$="Catalog" ELSE IF FLYER_PRICE$="M" THEN PLAN_TYPE$="Matrix" ELSE IF FLYER_PRICE$="U" THEN PLAN_TYPE$="User Defined" ELSE PRICE_PLAN$=""; REFRESH_FLG=1; REM SSP 216627
11100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
11110 EXIT 
11120 ! 1200 - New RECORD check
11130 NEW_RECORD:
11140 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
11150 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
11160 IF _YESNO$="NO" THEN GOSUB CLEAR_REC; REFRESH_FLG=1; NEXT_ID=ITEM_CODE.CTL,CHANGE_FLG=0; RETURN ! SSP#243181 
11170 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
11180 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=START_DATE.CTL ! SSP#243181
11190 RETURN 
11200 ! 1400 - Add RECORD
11210 WRITE_REC:
11220 GOSUB STR_TO_NUM
11230 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
11240 GOSUB REVIEW_WRITE
11250 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
11260 CHANGE_FLG=0
11270 NEXT_ID=_FIRST_KEY
11275 GOSUB CLEAR_REC
11280 EXIT 
11290 ! 1600 - Delete
11300 DELETE_REC:
11310 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
11320 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
11330 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
11340 IF _X$<>"YES" THEN RETURN 
11350 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
11360 GOSUB CLEAR_REC; REFRESH_FLG=1 ! SSP# 243181
11370 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
11380 CHANGE_FLG=0
11390 NEXT_ID=ITEM_CODE.CTL ! SSP#243181
11400 EXIT 
11410 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
11420 ! 1800 - Clear record
11430 CLEAR_REC:
11440 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
11450 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
11460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
11470 CHANGE_FLG=0
11480 RETURN 
11500 GET_COST:
11505 COST_PRICE_PLAN$=""
11510 READ RECORD (Z[4],KEY=PRICE_PLAN_CODE$,DOM=11590)PRICE_PLAN$; REM SSP 216627
11511 FLYER_PRICE$=PRICE_PLAN$(59,1); REM SSP 216627
11520 IF LEN(PRICE_PLAN$)>=58 THEN READ (Z[4],KEY=PRICE_PLAN$(53,6),DOM=*NEXT)COST_PRICE_PLAN$
11530 IF COST_PRICE_PLAN$="" THEN DIM COST_PRICE_PLAN$(55); READ (Z[13],KEY=X3$(9,3)+"OSP",ERR=11590)OSP_PARMS$; COST_PRICE_PLAN$(52,1)=OSP_PARMS$(225,1)
11535 READ (Z[5],KEY=ITEM_CODE$+PRICE_PLAN_CODE$,DOM=11590)OS7$
11540 PLAN=NUM(COST_PRICE_PLAN$(52,1),ERR=11590)
11560 IF PLAN=1 THEN COST$=OS7$(27,10)
11570 IF PLAN=2 THEN COST$=OS7$(47,10)
11580 IF PLAN=3 THEN COST$=OS7$(67,10)
11585 REFRESH_FLG=1
11590 RETURN 
12000 ! 2000 - Browsing mode
12010 ! - Next
12020 NEXT_REC:
12030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
12040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
12045 FIND (Z[3],KEY=_KEY$(1,10),DOM=*NEXT)OS0$; %OS_ITEM_DESC$=OS0$(37,40),SUPP_ITEM_NUM$=OS0$(548,20) ! SSP#240510
12050 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
12060 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
12070 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
12080 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
12090 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
12100 ! 2200 - Prior record
12110 PRIOR_REC:
12120 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
12130 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
12140 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
12150 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
12160 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
12170 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
12180 ! 2400 - First record
12190 FIRST_REC:
12200 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
12210 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
12220 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
12230 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
12240 ! 2600 - Last record
12250 LAST_REC:
12260 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
12270 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
12280 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
12290 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
13000 ! 3000 - Subroutines
13010 ! Processing required by READ
13020 PROCESS_READ:
13030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
13040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
13050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
13060 CHANGE_FLG=0
13070 RETURN 
13080 ! 3200 - Review record for changes before WRITE 
13090 REVIEW_WRITE:
13100 _CHG1$="",_CHG2$=""
13110 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
13120 GOSUB DETERMINE_CHGS
13130 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
13140 IF _CHG1$="" THEN GOTO CHK2
13150 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
13160 IF _YESNO$="NO" THEN GOTO *RETURN
13170 IF _CHG2$="" THEN GOTO WRT
13180 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
13190 GOSUB INCORPORATE_CHGS
13200 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
13210 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
13220 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
13230 GOSUB NUM_TO_STR
13240 REFRESH_FLG=1
13250 RETURN 
13260 WRITE_ERROR:
13270 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
13280 RETURN 
13290 ! 3500 - Display a record
13300 DISP_REC:
13310 GOSUB NUM_TO_STR
13315 IF FLYER_PRICE$="F" THEN PLAN_TYPE$="Flyer" ELSE IF FLYER_PRICE$="C" THEN PLAN_TYPE$="Catalog" ELSE IF FLYER_PRICE$="M" THEN PLAN_TYPE$="Matrix" ELSE IF FLYER_PRICE$="U" THEN PLAN_TYPE$="User Defined" ELSE PRICE_PLAN$=""; REFRESH_FLG=1; REM SSP 216627
13320 REFRESH_FLG=1
13330 RETURN 
13340 ! 3600 - Busy Record display
13350 BUSY_CHK:
13360 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
13370 IF _D$="NO" THEN EXIT 
13380 RETURN 
13390 ! 3790 - See if changes are to be written
13400 CHECK_CHANGES:
13410 IF _FIRST_KEY=0 THEN _FIRST_KEY=ITEM_CODE.CTL,_FIRST_FIELD=HOW_PRICED.CTL
13420 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
13430 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
13440 IF _YESNO$="YES" THEN GOTO WRITE_REC
13450 CHANGE_FLG=0
13460 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
13470 RETURN 
14000 ! 4000 - Get the current key segment number
14010 GET_CURKEY:
14020 FOR _CURKEY=1 TO _NUMKEYS
14030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
14040 NEXT _CURKEY
14050 RETURN 
19000 ! 9000 - Retrieve messages from the *msglib.xxx library
19010 SETUP_MESSAGES:
19020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
19030 _MSG_DIRECTORY$=MSG("DIRECTORY")
19040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
19050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
19060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
19070 _MSG_MANDATORY$=MSG("MANDATORY")
19080 _MSG_NEXT$=MSG("NEXT")
19090 _MSG_NON_NUMER$=MSG("NON_NUMER")
19100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
19110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
19120 _MSG_PRECEDING$=MSG("PRECEDING")
19130 _MSG_PREFIX$=MSG("PREFIX")
19140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
19150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
19160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
19170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
19180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
19190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
19200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
19210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
19220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
19230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
19240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
19250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
19260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
19270 _MSG_START_FILE$=MSG("START_FILE")
19280 _MSG_UPDATE$=MSG("UPDATE")
19290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
19300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
19310 _MSG_UPD_SAME$=MSG("UPD_SAME")
19320 _MSG_WARNING$=MSG("WARNING")
19330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
19340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
19350 RETURN 
20015 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; IF X1>0 THEN CMD_STR$="END"; GOSUB WRAPUP; GOTO *RETURN
30000 ! 10000 - Convert numeric values to string
30010 NUM_TO_STR:
30020 RETURN 
31000 ! 11000 - Convert numeric strings to number
31010 STR_TO_NUM:
31020 RETURN 
31030 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
31040 NEXT_ID=_X
31050 EXIT 
32000 ! 12000 - Check if the required fields have data
32010 CHECK_REQD_FLDS:
32020 _W_FLG=1
32030 RETURN 
33000 ! 13000 - Clear the record fields
33010 CLEAR_FIELDS:
33020 IF _CLR_FLG$="R" THEN ITEM_CODE$=""
33030 IF _CLR_FLG$="R" THEN PRICE_PLAN_CODE$=""
33040 HOW_PRICED$=""
33050 FLYER_PRICE$=""
33060 OS1_UNUSED_1$=""
33070 START_DATE$=""
33080 END_DATE$=""
33090 BENCHMARK$=""
33100 CALC_PRICE$=""
33110 TF_COST$=""; REM SSP 216627 - really an Oracle change
33120 OS1_UNUSED_3$=""
33130 BASE_PRICE$=""
33135 PLAN_TYPE$="",FLYER_PRICE$=""; REM SSP 216627
33140 OS1_UNUSED_4$=""
33150 OS1_UNUSED_5$=""
33155 %OS_ITEM_DESC$=""
33157 SUPP_ITEM_NUM$="" ! SSP#240510
33160 GOSUB NUM_TO_STR
33170 REFRESH_FLG=1
33180 RETURN 
34000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
34010 ENABLE_GROUPS:
34020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
34030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=PRICE_PLAN_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
34040 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
34050 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
34060 RETURN 
35000 ! 15000 - Determine the changes that have been made before writing
35010 DETERMINE_CHGS:
35020 DIM _CHG_VAR$(14,"N")
35030 IF _ORIG.ITEM_CODE$=_CUR.ITEM_CODE$ OR ITEM_CODE$=_CUR.ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CODE$=ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$
35040 IF _ORIG.PRICE_PLAN_CODE$=_CUR.PRICE_PLAN_CODE$ OR PRICE_PLAN_CODE$=_CUR.PRICE_PLAN_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PRICE_PLAN_CODE$=PRICE_PLAN_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("P_P_CODE")+" = "+_CUR.PRICE_PLAN_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("P_P_CODE")+" = "+_CUR.PRICE_PLAN_CODE$
35050 IF _ORIG.HOW_PRICED$=_CUR.HOW_PRICED$ OR HOW_PRICED$=_CUR.HOW_PRICED$ THEN GOTO *NEXT ELSE IF _ORIG.HOW_PRICED$=HOW_PRICED$ THEN _CHG2$=_CHG2$+SEP+MSG("HOW_PRICED")+" = "+_CUR.HOW_PRICED$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("HOW_PRICED")+" = "+_CUR.HOW_PRICED$
35060 IF _ORIG.FLYER_PRICE$=_CUR.FLYER_PRICE$ OR FLYER_PRICE$=_CUR.FLYER_PRICE$ THEN GOTO *NEXT ELSE IF _ORIG.FLYER_PRICE$=FLYER_PRICE$ THEN _CHG2$=_CHG2$+SEP+MSG("DOWN_F_P")+" = "+_CUR.FLYER_PRICE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DOWN_F_P")+" = "+_CUR.FLYER_PRICE$
35070 IF _ORIG.OS1_UNUSED_1$=_CUR.OS1_UNUSED_1$ OR OS1_UNUSED_1$=_CUR.OS1_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.OS1_UNUSED_1$=OS1_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.OS1_UNUSED_1$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.OS1_UNUSED_1$
35080 IF _ORIG.START_DATE$=_CUR.START_DATE$ OR START_DATE$=_CUR.START_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.START_DATE$=START_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("START_DATE")+" = "+_CUR.START_DATE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("START_DATE")+" = "+_CUR.START_DATE$
35090 IF _ORIG.END_DATE$=_CUR.END_DATE$ OR END_DATE$=_CUR.END_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.END_DATE$=END_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("END_DATE")+" = "+_CUR.END_DATE$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("END_DATE")+" = "+_CUR.END_DATE$
35100 IF _ORIG.BENCHMARK$=_CUR.BENCHMARK$ OR BENCHMARK$=_CUR.BENCHMARK$ THEN GOTO *NEXT ELSE IF _ORIG.BENCHMARK$=BENCHMARK$ THEN _CHG2$=_CHG2$+SEP+MSG("COMPARE")+" = "+_CUR.BENCHMARK$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMPARE")+" = "+_CUR.BENCHMARK$
35110 IF _ORIG.CALC_PRICE$=_CUR.CALC_PRICE$ OR CALC_PRICE$=_CUR.CALC_PRICE$ THEN GOTO *NEXT ELSE IF _ORIG.CALC_PRICE$=CALC_PRICE$ THEN _CHG2$=_CHG2$+SEP+MSG("CALC_P")+" = "+_CUR.CALC_PRICE$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CALC_P")+" = "+_CUR.CALC_PRICE$
35120 IF _ORIG.COST$=_CUR.COST$ OR COST$=_CUR.COST$ THEN GOTO *NEXT ELSE IF _ORIG.COST$=COST$ THEN _CHG2$=_CHG2$+SEP+MSG("COST")+" = "+_CUR.COST$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COST")+" = "+_CUR.COST$
35130 IF _ORIG.OS1_UNUSED_3$=_CUR.OS1_UNUSED_3$ OR OS1_UNUSED_3$=_CUR.OS1_UNUSED_3$ THEN GOTO *NEXT ELSE IF _ORIG.OS1_UNUSED_3$=OS1_UNUSED_3$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.OS1_UNUSED_3$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.OS1_UNUSED_3$
35140 IF _ORIG.BASE_PRICE$=_CUR.BASE_PRICE$ OR BASE_PRICE$=_CUR.BASE_PRICE$ THEN GOTO *NEXT ELSE IF _ORIG.BASE_PRICE$=BASE_PRICE$ THEN _CHG2$=_CHG2$+SEP+MSG("BASE_PRICE")+" = "+_CUR.BASE_PRICE$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BASE_PRICE")+" = "+_CUR.BASE_PRICE$
35150 IF _ORIG.OS1_UNUSED_4$=_CUR.OS1_UNUSED_4$ OR OS1_UNUSED_4$=_CUR.OS1_UNUSED_4$ THEN GOTO *NEXT ELSE IF _ORIG.OS1_UNUSED_4$=OS1_UNUSED_4$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.OS1_UNUSED_4$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.OS1_UNUSED_4$
35160 IF _ORIG.OS1_UNUSED_5$=_CUR.OS1_UNUSED_5$ OR OS1_UNUSED_5$=_CUR.OS1_UNUSED_5$ THEN GOTO *NEXT ELSE IF _ORIG.OS1_UNUSED_5$=OS1_UNUSED_5$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.OS1_UNUSED_5$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.OS1_UNUSED_5$
35170 RETURN 
36000 ! 16000 - Incorporate changes made by another user into the record
36010 INCORPORATE_CHGS:
36020 IF _CHG_VAR$(1,1)="Y" THEN ITEM_CODE$=_CUR.ITEM_CODE$
36030 IF _CHG_VAR$(2,1)="Y" THEN PRICE_PLAN_CODE$=_CUR.PRICE_PLAN_CODE$
36040 IF _CHG_VAR$(3,1)="Y" THEN HOW_PRICED$=_CUR.HOW_PRICED$
36050 IF _CHG_VAR$(4,1)="Y" THEN FLYER_PRICE$=_CUR.FLYER_PRICE$
36060 IF _CHG_VAR$(5,1)="Y" THEN OS1_UNUSED_1$=_CUR.OS1_UNUSED_1$
36070 IF _CHG_VAR$(6,1)="Y" THEN START_DATE$=_CUR.START_DATE$
36080 IF _CHG_VAR$(7,1)="Y" THEN END_DATE$=_CUR.END_DATE$
36090 IF _CHG_VAR$(8,1)="Y" THEN BENCHMARK$=_CUR.BENCHMARK$
36100 IF _CHG_VAR$(9,1)="Y" THEN CALC_PRICE$=_CUR.CALC_PRICE$
36110 IF _CHG_VAR$(10,1)="Y" THEN COST$=_CUR.COST$
36120 IF _CHG_VAR$(11,1)="Y" THEN OS1_UNUSED_3$=_CUR.OS1_UNUSED_3$
36130 IF _CHG_VAR$(12,1)="Y" THEN BASE_PRICE$=_CUR.BASE_PRICE$
36140 IF _CHG_VAR$(13,1)="Y" THEN OS1_UNUSED_4$=_CUR.OS1_UNUSED_4$
36150 IF _CHG_VAR$(14,1)="Y" THEN OS1_UNUSED_5$=_CUR.OS1_UNUSED_5$
36160 RETURN 
37000 SEL_PRICE_PLAN_CODE:; REM SSP 222704
37005 EXECUTE "PRICE_PLAN$="+ID$+"$"
37006 IF _EOM$=$00$ THEN IF QRY_VAL$="" THEN EXIT ! SSP#240510
37010 PRICE_PLAN$=STR(NUM(PRICE_PLAN$,ERR=*NEXT):"000000"); GOTO 37030; REM SSP 222704
37020 PRICE_PLAN$=PAD(PRICE_PLAN$,6," "); REM SSP 222704
37030 ID'VALUE$=PRICE_PLAN$; REM SSP 222704
37040 READ (Z[4],KEY=PRICE_PLAN$,DOM=NO_REC)OS5$; REM SSP 222704
37042 EXECUTE ID$+"$=PRICE_PLAN$,%PRICE_PLAN_DESC"+ID$(LEN(ID$))+"$=OS5$(7,30)"
37050 EXIT ; REM SSP 222704
37060 NO_REC:; REM SSP 222704
37070 MSGBOX "Price Plan Not Found.","Input validation failure","!"; PRICE_PLAN$="",REFRESH_FLG=1,NEXT_ID=ID,CHANGE_FLG=0; REM SSP 222704
37080 EXECUTE ID$+"$="+QUO+QUO
37090 EXIT 
56000 REM "216627-Voicemail from Mark - question about TOPS pricing
56001 REM "222704-Office Supply inputs for Price Plan differ between gui and    
56002 REM "240510-Display Uniteds item code along with description            
