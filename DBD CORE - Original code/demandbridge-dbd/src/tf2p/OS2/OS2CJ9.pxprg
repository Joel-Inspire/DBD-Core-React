0010 REM "Send SPR Stationer's Data to SPR - Interlink <OS2C09>
0035 REM "5.5 - 02/08/07 - 10.005555 - jvv - SSP# 203458
0037 REM "203458-Addition of S.P. Richards to TOPS module                    
0040 REM "Copyright 2007 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 SETERR 0055; ENTER Q0$; CALLED$="Y"; GOTO 0090
0055 IF %GUI THEN GOTO 0090
0060 BEGIN 
0090 SETERR 9000
0095 PRECISION 14; T2=TIM; PRECISION 2
0105 SETERR 9000; SETESC 9300
0110 X0$="OS2C09",X1$="SPR Interlink Send"
0120 DIM A$(0),B$(228),B[27],C$(512),C[9],E[3],S$(40),J$(345),J[12]
0140 Z0$="-###,###.00",Z1$="##,##0",Z2$="###,##0-",M4$="-00000000.00",M4=LEN(M4$),M5$="#####",Z3$="-###,###",Z4$="-####.00",Z5$="-#####.00",Z6$="-###.0",M0$="-###"
0165 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
0170 DEF FNE$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+Z9$(1,2)
0180 DEF FNS$(Z9$)=Z9$(1,POS("   "=Z9$+"   ")-1)
0190 DEF FNR$(Z9$)=Z9$(POS(" "<>Z9$))
0210 T=1,T0=1,T1=1
0220 W3=85,P0=1
0222 CHKWRD$="000000"
0223 CID$="WP"
0225 REPRINT_HEADER$=""; REM "Used in 8200's to make sure A$(1,1) only gets incremented once per order
0230 DIM T1$(W3,"-"),T2$(W3,"="),T3$(W3,"*"),Y5$(W3),Y6$(W3),W[4]
0232 TSEND_PATH$="/usr/sprich/sparco/spr/send/"
0234 TRECV_PATH$="/usr/sprich/sparco/spr/recv/"
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,"",-1,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0260 REM CALL "ZZRPTP",X3$,X0$,X1$,V9$,V0,Q0$,Q1$,Q2$,Q3$,Q4$,Q5$,Q6$
0300 REM "I/O lists
0305 REM "IOLIST FOR FS1 - Sales order header
0310 IOLIST A$
0315 REM "IOLIST FOR FS2 - Sales order detail
0320 IOLIST B$,B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15],B[16],B[17],B[18],B[19],B[20],B[21],B[22],B[23],B[24],B[25],B[26],B[27]
0335 REM "IOLIST FOR AR1 - Customer Masterfile
0340 IOLIST D$
0345 REM "IOLIST FOR PO3- Shipping Information Masterfile
0350 IOLIST E$,E[0],E[1],E[2],E[3]
0355 REM "IOLIST FOR OFFICE SUPPLY PARAMETERS (OS2MPA - KEY = X3$(9,3) + 'OSP'
0360 IOLIST C$,C[0],C[1],C[2],C[3],C[4],C[5],C[6],C[7],C[8],C[9]
0365 REM "IOLIST FOR OS3 - Error Code Description File
0370 IOLIST R1$
0375 REM "IOLIST FOR OS4 - Transmission Error Report File
0380 IOLIST O$
0385 REM "IOLIST FOR SM7 - CIG Plus Gateway Information (SM0)
0390 IOLIST J$,J[0],J[1],J[2],J[3],J[4],J[5],J[6],J[7],J[8],J[9],J[10],J[11],J[12]
0400 IOLIST IC0$,IC0[0],IC0[1],IC0[2],IC0[3],IC0[4],IC0[5],IC0[6],IC0[7],IC0[8],IC0[9],IC0[10],IC0[11],IC0[12],IC0[13],IC0[14],IC0[15],IC0[16],IC0[17],IC0[18],IC0[19],IC0[20],IC0[21],IC0[22],IC0[23],IC0[24],IC0[25],IC0[26],IC0[27],IC0[28],IC0[29],IC0[30],IC0[31],IC0[32],IC0[33],IC0[34],IC0[35],IC0[36],IC0[37],IC0[38],IC0[39],IC0[40]
0500 REM "Files
0505 DIM Z[NUM(X3$(60,3))]; REM "GOSUB 7400
0506 ! PEN LOCK (12)"SP9500"; Z[27]=12
0509 REM "Don't use 15,16,17, used on 4105
0510 Y$="01O PO6...  02O FS1...  03O FS2...  05O SM7...  06O PO3...  07O FM0...  09O OS2...  10O OS3...  11O OS4...  25O PC3...  26O PC6...  27O SP8...  28O PO1...  29O PO2...  30O IC0...  31O OSA...  32O EDW...  33OSPO6...  13O ZZPARM  "
0520 GOSUB 9750
0525 READ (Z[13],KEY=X3$(9,3)+"I/C")P8$
0526 READ (Z[13],KEY="CMP"+X3$(9,3),DOM=*NEXT)COMPANY$; REM SSP 189386
0530 DIM G9$(200); READ (Z[7],KEY="D"+S$(1,10)+"0001",DOM=0531)G9$
0535 READ (Z[13],KEY=X3$(9,3)+"F/M")FM_PARM$
0540 READ (Z[13],KEY=X3$(9,3)+"A/R")P9$
0550 READ (Z[13],KEY=X3$(9,3)+"AR1")P5$
0552 READ (Z[13],KEY=X3$(9,3)+"G/B",DOM=0553)GB$; GB$="Y"
1000 REM "GET FIRST 'V' RECORD
1011 REC$=""
1020 READ (Z[1],KEY="V"+X0$,DOM=1021)
1030 REC$=KEY(Z[1],END=5000); READ (Z[1],KEY=REC$)
1040 IF REC$(2,6)<>X0$ THEN GOTO 5000
1050 ORD$=REC$(10,9); REM " PURCHASE ORDER NUMBER
1055 READ RECORD (Z[2],KEY=ORD$(1,8),DOM=1056)FS1$; GOTO 1060; REM IF YOU CAN'T READ THE FS1 HEADER RECORD, REMOVE FROM PO6 AND GOTO NEXT RECORD
1056 REMOVE (Z[33],KEY=REC$,DOM=*NEXT); REM REMOVE PO6 RECORD
1058 GOTO 1030; REM GOTO NEXT RECORD
1060 READ (Z[1],KEY=REC$)
1070 READ (Z[13],KEY=X3$(9,3)+"OSP")IOL=0360
1072 TPFX$=STP(C$(583,5),2),TSEND_PATH$=STP(C$(588,30),2),TRECV_PATH$=STP(C$(618,30),2)
1074 WILL_CALL$=C$(26,1); REM " SET FROM PARAMETERS - MAY BE CHANGED BY SHIP TO
1075 C[2]=C[2]+1; REM "Increment Transmission number
1076 SHIP_LABEL$=C$(57,1); REM " SET FROM PARAMETERS - MAY BE CHANGED BY SHIP TO
1078 ! SHIP_ACT$=STR(C[1]:"000000000")
1079 SHIP_ACT$="089941700"
1080 WRITE (Z[13],KEY=X3$(9,3)+"OSP")IOL=0360
1082 GOSUB CREATE_UNIQUE_TEMP_FILE
1083 GOTO 1100
1085 TDTE$="0208"
1090 FILE_NAME$=CID$+"."+TDTE$+"."+ORD$+"."+STR(C[2]:"0000000")
1092 FILE_PATH$="/tmp/"
1093 FILE_NAME$="ftptest.0220.001"
1095 TFILE_NAME$=FILE_PATH$+FILE_NAME$
1098 SERIAL TFILE_NAME$; TCH=HFN; OPEN LOCK (TCH)TFILE_NAME$
1100 REM "Get record"
1110 READ (Z[28],KEY=ORD$,DOM=1030)IOL=0310; REM " READ ORDER HEADER
1115 REM "EXTRACT (Z[28],KEY=ORD$,DOM=1116)IOL=0310; REM " EXTRACT PO HEADER - HANGING ON CC ORDERS BECAUSE THEY'RE IN INVOICING
1120 READ (Z[29],KEY=ORD$,DOM=1121); REM " POSITION TO 1ST LINE ON ORDER DETAIL
1130 IT$=""; REM "CLEAR FOR EACH ORDER 
1150 DAY_FORMAT "YYYY-MM-DD"
1155 DATE$=DAY,D1$=DATE$(1,4)+DATE$(6,2)+DATE$(9,2),Q$=D1$(3)
1160 DAY_FORMAT 
1165 TIME$=DTE(0:"%hz:%mz:%sz")
1170 GOSUB 2500; REM " GET ADDRESS INFO
1180 GOSUB 3000; REM " BUILD MAIN TRANSMISSION HEADER H0
1190 GOSUB 3100; REM " BUILD TRANSMISSION HEADER H1
1200 GOSUB 3200; REM " BUILD TRANSMISSION HEADER H4
1210 IF SHIP_LABEL$<>" " THEN GOSUB 3500; REM " BUILD SHIP TO REC S1,S2,S4
1300 REM "Read other data
1320 Y$="07C FM0...  12C AR4...  07O AR1...  12O FSV...  "; GOSUB 9750
1330 DIM D$(599); FIND (Z[7],KEY=A$(6,10),DOM=1331)IOL=0340
1370 Y$="07C AR1...  12C FSV...  07O FM0...  12O AR4...  "; GOSUB 9750
1400 REM "Get line detail information
1420 LINE$=KEY(Z[29],END=4000); REM "KEY TO ORDER DETAIL FILE - AFTER LAST LINE OR THE ENDOF THE FILE THEN GOTO 4000 TO SEND RECORD TO SPR STATIONERS
1430 IF LINE$(1,9)<>ORD$ THEN GOTO 4000; REM "SEND TO UNITED STATIONERS
1440 READ (Z[29],KEY=LINE$)IOL=0320
1441 READ (Z[3],KEY=LINE$(1,8)+LINE$(10,3))FS2$
1442 IF FS2$(155,1)<>"I" THEN GOTO 1420; REM SSP 192628    
1445 IF FS2$(94,10)<>C$(58,10) THEN GOTO 1400; REM " NOT RIGHT VENDOR CODE - COMPARED TO PARAMETER
1447 REM "IF B$(9,1)=DIM(1) THEN GOTO 1400; REM " NO PO
1449 I1=I1+1
1450 DIM H$(128)
1460 READ (Z[9],KEY=B$(101,10),DOM=1461)H$
1465 DIM RC$(200); READ (Z[32],KEY=LINE$(1,8)+LINE$(10,3),DOM=1470)RC$,RC0,RC1
1470 GOSUB 3300; REM "BUILD 'IT' RECORDS
1480 REM "GOSUB 2600; REM " BUILD TRANSMISSION DETAIL D1
1490 GOTO 1420; REM "GET NEXT LINE
2100 DEF FN%URLENCODE$(LOCAL DAT$)
2105 LOCAL X,ODAT$
2110 IF LEN(DAT$)=0 THEN RETURN ""
2115 FOR X=1 TO LEN(DAT$)
2120 IF POS(DAT$(X,1)=" 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$-_.+!*'(),",1)=0 THEN ODAT$+="%"+HTA(DAT$(X,1)) ELSE ODAT$+=DAT$(X,1)
2125 NEXT 
2130 TRANSLATE ODAT$," "+$01$+"+"
2135 RETURN ODAT$
2140 END DEF
2500 REM "Print lines from P2$ for spec instr."
2505 DIM E$(394),OSA$(125),PSW$(8),CON_ID$(4),ORD_TKR$(3)
2510 ! IM E$(394),OSA$(125),SHIP_ACT$(6),PSW$(8),CON_ID$(4),ORD_TKR$(3)
2511 READ (Z[6],KEY=A$(306,8)+"     ",DOM=2590)IOL=0350
2512 IF LEN(E$)<=339 THEN GOTO 2521; REM "IF E$(341,6)=DIM(6) THEN GOTO 2521
2513 READ (Z[31],KEY=MID(E$,341,6),DOM=2521)OSA$
2514 SHIP_ACT$=OSA$(1,6),PSW$=OSA$(37,8),CON_ID$=OSA$(45,4),ORD_TKR$=OSA$(49,3)
2521 WILL_CALL$=C$(26,1)
2522 IF LEN(E$)=339 THEN GOTO 2526
2525 IF MID(E$,340,1)<>DIM(1) THEN WILL_CALL$=E$(340,1)
2526 SHIP_LABEL$=E$(339,1)
2527 IF SHIP_LABEL$=DIM(1) THEN SHIP_LABEL$=C$(57,1)
2528 IF SHIP_LABEL$="M" THEN SHIP_LABEL$="W"; REM IF THEY PUT IN A MULTI WRAP AND LABEL CHANGE IT TO A SINGLE...WE DON'T SUPPORT THE MULTI RIGHT NOW
2529 IF SHIP_LABEL$="S" THEN SHIP_LABEL$=" "; REM WE WANT IT TO BE BLANK
2530 REM "Get additional 4 lines of ship-to address
2538 REM "Get additional 4 lines of ship-to address
2540 SHIP_TO$=""; FIND (Z[7],KEY="C"+A$(179,10)+E$(12,4),DOM=2590)SHIP_TO$
2550 F5$=""
2560 FOR INDEX=0 TO 3
2570 IF POS(" "<>MID(SHIP_TO$,402+INDEX*30,30))>0 THEN F5$=F5$+MID(SHIP_TO$,402+INDEX*30,30)
2580 NEXT INDEX
2590 RETURN 
2600 REM "WRITE THE 'LT' RECOD
2610 DIM LT$(183); LT$(1,105)=I$(1,105)+DIM(78); LT$(1,2)="LT"
2620 IF MID(C$,460,1)="R" THEN LT$(106,20)=RC$(12,20)
2640 WRITE_SEQ$=STR(1:"000")
2650 WRITE (Z[27],KEY=ORD$+WRITE_SEQ$+"4LT"+B$(7,3),DOM=2655)ORD$+WRITE_SEQ$+"4LT"+B$(7,3)+LT$+B$(101,10)+DIM(209); GOTO 2680
2655 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
2660 GOTO 2650
2680 IT$=IT$+LT$
2699 RETURN 
3000 REM " BUILD TRANSMISSION HEADER - H0
3004 DIM OREC$(80)
3005 OREC$(1,2)="H0"
3010 OREC$(3,9)=SHIP_ACT$; REM "COMES FROM THE OFFICE SUPPLY PARAMETERS
3015 OREC$(12,2)="68"; REM " SPR DISTRIBUTION CENTER
3020 OREC$(14,10)="WHTE PAPER"; REM "USER ID
3025 OREC$(24,10)="EZPO"
3030 OREC$(34,1)=""
3035 OREC$(35,1)="Y"; REM " TEST FLAG
3040 OREC$(36,8)=""
3045 OREC$(44,1)=""
3050 OREC$(45,3)=""; REM SPR DC
3055 OREC$(48,8)=""; REM "ENDING VALUE
3060 OREC$(56,1)=""
3065 OREC$(57,1)=""; REM " AUTO SPLIT OF EZPO 'r' or 'N'- do not split (default)
3070 OREC$(58,1)=""; REM "
3075 OREC$(59,1)="N"; REM "
3076 OREC$(60,15)=DIM(15)
3080 GOSUB WRITE_OREC
3090 RETURN 
3100 REM " BUILD TRANSMISSION RECORD H1
3105 DIM OREC$(80)
3108 SOURCECQ$=""
3110 OREC$(1,2)="H1"; REM " ALWAYS 'H1' FOR THE TYPE OF RECORD
3115 OREC$(3,9)=SHIP_ACT$; REM "COMES FROM OFFICE SUPPLY PARAMETER FILE FOR  DEALER SHIPPING ACCOUNT NUMBER
3120 OREC$(12,10)=A$(297,9); REM "CUSTOMER PO
3125 IF WILL_CALL$="W" THEN SHIP_CODE$="1" ELSE SHIP_CODE$="0"
3130 OREC$(22,1)=SHIP_CODE$; REM "'S/0FOR SHIP OUT or 'W/1' FOR WILL CALL - FROM O/S PARAMETER FILE
3132 SRCC$=C$(583,1); REM "SOURCE COMPLETE
3135 OREC$(23,1)=""; REM "SHOW DEALER COST ON PICKING TICKET
3140 OREC$(24,2)=" "; REM "RESERVED FOR FUTURE USE
3142 DROPSH$="N",WRAPLBL$="N"
3144 IF SHIP_LABEL$="D" THEN DROPSH$="Y"
3145 IF SHIP_LABEL$="W" THEN WRAPLBL$="Y"
3146 OREC$(26,1)=DROPSHP$
3147 OREC$(27,1)=WRAPLBL$
3148 OREC$(28,2)="NN"; REM " SSP
3150 OREC$(30,1)=""; REM "RESERVED FOR FUTURE USE
3155 OREC$(31,1)="L"; REM "USE LIST OR COST TO VERIFY QUANTITY
3160 OREC$(32,1)="N"; REM "WRAP & PACK PO 
3162 OREC$(33,1)="N"; REM "SHIP FROM ALTERNATE WAREHOUSE
3164 OREC$(34,1)="Y"; REM "SEND ACK IF SHIP FROM ALTERNATE WAREHOUSE
3165 ! F C$(220,1)="Y" AND SHIP_LABEL$="D" THEN OREC$(70,5)=E$(124,5) ELSE OREC$(70,5)=DIM(5); REM "ZIP CODE SSP 171218..PER Jodie at SPR only used Zip code routing with Drop Ships!!
3170 OREC$(35,10)=""; REM "PO PLACED BY 
3175 OREC$(45,30)=""; REM "COMMENTS
3185 GOSUB WRITE_OREC
3190 RETURN 
3200 REM "SETUP 'H4' RECORD
3205 DIM OREC$(80)
3210 OREC$(1,2)="H4"; REM "ALWAYS 'H4' FOR THE TYPE OF RECORD
3215 OREC$(3,20)=""; REM "DEALER DELIVERY ROUTE INFO
3220 OREC$(23,5)=""; REM " FUTURE USE
3225 OREC$(28,20)=""; REM "DEALER DELIVERY REFERENCE NUMBER
3230 REM "'D' FOR DROP/SHIP ORDER
3232 REM "'W' FOR SINGLE WRAP-AND-LABEL-ORDER -  '''' COULD COME FROM A FILE
3234 REM "'M' FOR MULTI WRAP-AND-LABEL-ORDER  -  '''' COULD COME FROM A FILE
3235 OREC$(49,1)=""; REM "ROUTE TABLE
3236 REM "'F' FOR FURNITURE ORDER WITH SET-UP
3240 OREC$(50,1)=""; REM "PRINT PRICED PACKING SLIPS
3245 OREC$(51,1)=""; REM "CANCEL NON UPS ITEMS
3250 OREC$(52,1)=""; REM "CROSS ZONES
3255 OREC$(53,1)=""; REM " ACKNOWLEDGE WAREHOUSE ZONE
3258 AUTOPO$=C$(220,1); IF AUTOPO$<>"Y" THEN AUTOPO$="N"
3260 IF SRCC$<>" " THEN AUTOPO$=SRCC$; REM "SOURCE COMPLETE 'C' OR 'Q'
3265 OREC$(54,1)=AUTOPO$; REM "Y=AUTOROUTE,N=NO AUTROUTE,C=SOURCE COMPLETE,Q=SC QUICK
3268 OREC$(55,1)="N"; REM "ACKNOWLEDGE LIST PRICE
3270 OREC$(56,1)="Y"; REM "SHOW LIST PRICE ON PICKING TICKET
3280 OREC$(55,1)="N"; REM "ACKNOWLEDGE LIST PRICE
3282 OREC$(56,1)="Y"; REM "SHOW LIST PRICE ON PICKING TICKET
3284 OREC$(58,18)=""
3294 REM "************ ADDRESS INFO IS COMING FROM PO3 PER KEITH ******** E$
3296 GOSUB WRITE_OREC
3299 RETURN 
3300 REM "BUILD DETAIL TRANSMISSION RECORDS D1
3305 DIM OREC$(80)
3310 OREC$(1,2)="D1"; REM "ALWAYS 'D1' FOR RECORD TYPE
3315 OREC$(3,15)=H$(11,15); REM " MFG ID & STOCK NUMBER
3320 OREC$(18,2)=H$(59,2); REM "UOM
3368 DIM IC0[40]; READ (Z[30],KEY=DIM(10)+B$(101,10),DOM=*NEXT)IOL=0400
3370 IF B[2]<>100 THEN OQTY$=STR(B[1]/B[2]:"000000") ELSE OQTY$=STR(B[1]:"000000"); REM "ORDER QUANTITY
3372 OREC$(20,6)=OQTY$
3374 PRICE=NUM(H$(27,9)),OREC$(26,7)=STR(PRICE*1000:"0000000")
3375 REM "I$(130,2)=C$(24,2); REM "BACK ORDER DISPOSITION - 'FP'-FILL PARTIALLY OR 'TM' FOR FILL TOTAL MERCHANDISE OR NOTHING - COMES FROM O/S PARAMETER FILE 'OSP'
3376 REM "I$(132,1)=C$(23,1); REM "'ADOT' INDICATOR (Automatic Dealer Order Transfer) - COMES FROM O/S PARAMETER FILE 'OSP'
3377 REM "ADOT OPTIONS ARE: 'S' SPLIT, WILL SPLIT ORDERS BETWEEN FACILITIES IF NEEDED
3378 OPTION$="T{60}"; REM " RESONSE TIME RAISED TO 60 SECONDS
3379 REM "ADOT OPTIONS ARE: 'N' DON'T 'ADOT', SEARCH PRIMARY FACIITY ONLY
3385 GOSUB WRITE_OREC
3393 PO$=PO$+B$(7,3)
3394 REM "DIM LT$(183); LT$(1,105)=I$(1,105)+DIM(78); LT$(1,2)="LT"
3395 REM "IF C$(460,1)="R" THEN LT$(106,20)=RC$(12,20)
3398 IT$=IT$+I$
3399 RETURN 
3400 REM "BUILD 'ST' RECORDS 
3405 DIM ST$(106)
3410 ST$(1,2)="ST"; REM "ALWAYS 'ST' FOR THE TYPE OF RECORD
3415 ST$(3,10)=""; REM "BLANK GOING OUT FOR USSCo ORDER #; COMES BACK W/ORDER#
3420 ST$(13,6)=STR(C[0]:"000000"); REM " SHIPPING ACCOUNT # - COMES FROM A O/S PARAMETER FILE - 'OSP'
3421 IF SHIP_ACT$<>DIM(6) THEN ST$(13,6)=SHIP_ACT$; REM " SSP 
3425 ST$(19,3)=""; REM "RESERVED FOR FUTURE USE
3430 ST$(22,22)=A$(297,9)+DIM(13," "); REM "P.O. #
3435 ST$(44,1)=WILL_CALL$; REM "WILL CALL / SHIP OUT - VALUES 'W' OR 'S' - COMES FROM O/S PARAMETER FILE 
3440 ST$(45,3)=""; REM "ORDERS FILLING FACILITY / FACILITY OVERRIDE
3445 ST$(48,41)=""; REM "RESERVED FOR FUTURE USE
3450 ST$(89,8)=""; REM "SHIPPING LABEL FORMAT OVERRIDE
3451 ST$(106,1)="R"; REM " REQUEST FOR PRODUCT TO BE RELEASED
3455 ST$(97,9)=""; REM "LEAVE BLANK - WRAP AND LABEL NUMBER
3456 WRITE_SEQ$=STR(1:"000")
3460 WRITE (Z[27],KEY=ORD$+WRITE_SEQ$+"5ST"+DIM(3),DOM=3461)ORD$+WRITE_SEQ$+"5ST"+DIM(3)+ST$+DIM(386); GOTO 3490
3470 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
3475 GOTO 3460
3490 RETURN 
3500 REM "SETUP SHIPPING RECORDS S1,S2,S4 IF DROPSHIP/WRAP LABEL
3505 DIM OREC$(80)
3510 OREC$(1,2)="S1"; REM "ALWAYS 'S1' FOR THE TYPE OF RECORD
3515 OREC$(3,27)=E$(225,27); REM "SHIP TO COMPANY NAME
3520 OREC$(30,27)=E$(46,27); REM "ADDRESS LINE 1
3530 GOSUB WRITE_OREC
3550 ADDRESS2$=E$(76,30); REM "ADDRESS LINE 2 FOR DROP SHIP - Attn:
3560 ! ADDRESS3$=E$(46,30); REM "ADDRESS LINE 3 FOR DROP SHIP - ADDR LINE #1
3570 IF ADDRESS2$<>"" OR ADDRESS3$<>"" THEN GOTO 3580 ELSE GOTO 3600
3580 DIM OREC$(80)
3585 OREC$(1,2)="S2"; REM "ALWAYS 'S2' FOR THE TYPE OF RECORD
3588 OREC$(3,27)=ADDRESS2$; REM "ADDRESS LINE
3590 OREC$(30,27)=ADDRESS3$; REM "ADDRESS LINE 3
3595 GOSUB WRITE_OREC
3600 REM "P O SHIPPING RECORD S4
3605 DIM OREC$(80)
3610 OREC$(1,2)="S4"; REM "ALWAYS 'S4' FOR THE TYPE OF RECORD
3650 OREC$(3,20)=E$(106,16); REM "SHIP-TO CITY
3655 OREC$(23,2)=E$(122,2); REM "SHIP TO STATE
3660 OREC$(25,9)=E$(124,9); REM "SHIP-TO POSTAL CODE REQUIRED FOR DROP-SHIP
3670 GOSUB WRITE_OREC
3680 RETURN 
3800 REM "WRITE SERIAL FILE
3805 WRITE_OREC:
3810 OREC$(75,6)=CHKWRD$
3825 PRINT (TCH)OREC$
3840 WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"0000"); IF WRITE_SEQ$="9999" THEN ESCAPE 
3845 WRITE_TYPE$=OREC$(1,2)
3850 WRITE (Z[27],KEY=ORD$+WRITE_SEQ$+WRITE_TYPE$+DIM(3),DOM=3840)OREC$
3890 RETURN 
4000 REM "SEND FILE TO SPR FOR PROCESSING
4001 REM "USE DATA SENT BACK TO FILL WHAT IS GOING TO BE SHIPPED
4002 REM " IF I1>0 THEN THERE ARE LINES TO SEND ELSE GOTO 4090 - LINE COUNTER INCREMENTED AT 1440
4005 ! TSEND_PATH$="/usr/sprich/sparco/spr/send/"
4008 TFILE$=TPFX$+".022607."+ORD$+"."+RND$
4009 ESCAPE 
4010 TFILE_SEND$=TSEND_PATH$+TFILE$
4012 CLOSE (TCH)
4013 S2$="cp "+TEMP_FILE$+" "+"/tmp/"+TFILE$; INVOKE S2$
4014 RENAME TEMP_FILE$ TO TSEND_PATH$+TFILE$
4015 ! S2$="rename "+TEMP_FILE$+" "+TSEND_PATH$+TFILE$; INVOKE S2$
4016 ! 2$="cp "+TEMP_FILE$+" "+TSEND_PATH$+TFILE$; INVOKE S2$
4020 ! S2$="rename "+TEMP_FILE$+" "+TFILE_SEND$; INVOKE S2$
4022 GOTO 4079
4023 IF MID(COMPANY$,196,1)="Y" THEN TMP$="c:\wget\"+"CO"+X3$(9,3)+ORD$ ELSE TMP$="c:\wget\TOPS"+ORD$
4026 SERIAL WINDX$+TMP$,ERR=*PROCEED
4029 CONTENT$="requesttransmission="+SEND$+"&requesttype=3"
4030 CON_LEN=LEN(CONTENT$)
4031 TMP_CHAN=HFN; OPEN PURGE (TMP_CHAN,ERR=*NEXT)WINDX$+TMP$
4032 WRITE_CON$=CONTENT$
4035 FOR I=0 TO CON_LEN/1000
4036 IF LEN(WRITE_CON$(I*1000+1))<1000 THEN PRINT (TMP_CHAN)(WRITE_CON$(I*1000+1)); EXITTO 4047
4038 PRINT (TMP_CHAN)WRITE_CON$(I*1000+1,1000),; GOTO 4040
4040 NEXT I
4047 CLOSE (TMP_CHAN,ERR=*NEXT)
4049 PROXY$=STP(C$(27,30),3," "); REM "10.6.72.18"
4050 REM "URL$=URL$+"?" REM "+CONTENT$; REM ,CONTENT$=""
4078 GOSUB DO_WINDX
4079 GOSUB 7200
4080 ! RETURN$=R$
4081 REM "CALL "EC3SND",X3$,X4$,URL$,CONTENT$,PROXY$,OPTION$,RETURN$
4082 %ZZ2CMD_DEBUG=0
4083 IF LEN(RETURN$)=0 THEN GOTO 1030
4084 GOTO 4100; REM "WRITE_SEQ$=STR(1:"000")
4085 WRITE (Z[27],KEY=ORD$+WRITE_SEQ$+"5RET"+DIM(2),DOM=4086)ORD$+WRITE_SEQ$+"5RET"+DIM(2)+RETURN$(2,3)+DIM(489); GOTO 4090
4086 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
4087 GOTO 4085
4090 RETURN1$=RETURN$; REM "SAVE IN RETURN1$ FOR POTENTIAL FUTURE USE
4100 REM "DETERMINE RESULTS SENT BACK BY SPR
4102 RDATA$="",PLIST$="",RORDER$=""
4105 READ RECORD (RCH,END=4200)RREC$
4110 IF RREC$(1,2)="H4" THEN GOTO 4140
4120 IF RREC$(1,2)="D1" OR RREC$(1,2)="D2" THEN GOTO 4150
4130 GOTO 4105
4140 REM "GET PICKING TICKET NUMBER FROM 'H4' RECORD
4145 PTICKET$="",PTICKET$=RREC$(59,6),SLOC$=RREC$(57,2)
4148 GOTO 4180
4150 REM "ACKNOWLEDGEMENT FROM 'D1' AND 'D2'(IF APPLICABLE FROM ALT WAREHOUSE)
4160 GOSUB 5300
4180 RDATA$="Y"
4190 GOTO 4105
4200 REM "ASSESS ORDER STATUS
4210 IF ORDSENT$<>"Y" THEN GOTO 1030
4220 REMOVE (Z[1],KEY=REC$,DOM=4230)
4240 WRITE (Z[28],KEY=ORD$)IOL=0310
4290 GOTO 1030
4300 REM "PROCESS 'IT' RECORD - LINE ITEM
4310 ITR$=MID(RETURN$,1,275)
4320 LN1=LN1+1; REM " INCREMENT LINE COUNTER
4325 REM "UPDATE SM7 WITH ORDER #, LINE #, QTY, B/O QTY, VENDOR INVOICE NUMBER WILL BE THE UNITED ORDER # (UON$)
4329 GOTO 4370
4330 IF NUM(ITR$(3,2))<51 THEN GOTO 4331 ELSE GOTO 4370
4340 DIM J$(345),J[12]
4350 J$(1,9)=ORD$,J$(10,3)=STR(LN1:"000"),J$(266,10)=ITR$(5,10)
4355 D0$=CHR(NUM(D1$(1,3),ERR=4356)-125)+D1$(4,1)+Q$(3,2)+Q$(5,2)
4360 J$(276,6)=D0$
4362 QT1=NUM(MID(ITR$,153,9))/100,J[0]=QT1
4365 REM "WRITE (Z[5],KEY=J$(1,12)+" "+J$(10,3))IOL=0390
4370 GOSUB 5700; REM " ERROR IN 'IT' RECORD - LINE ITEM RECORD
4380 RETURN$=MID(RETURN$,276)
4385 IF MID(RETURN$,1,2)="LT" THEN GOSUB 5900; RETURN$=RETURN$(108)
4390 IF MID(RETURN$,1,2)="IT" THEN GOTO 4300; REM "PROCESS ANOTHER 'IT' RECORD
4400 REM "PROCESS 'ST' RECORD - STATUS UPDATE
4410 REM LENGTH OF RETURN$ S/B 108
4420 STR$=RETURN$
4430 GOSUB 5800; REM " ERROR IN 'ST' RECORD - STATUS CHANGE RECORD
4431 REM "IF MID(STR$,3,2)<>"00" THEN GOSUB 5800; REM " ERROR IN 'ST' RECORD - STATUS CHANGE RECORD
4470 REM " RETURN$(108,1) S/B STATUS; R-RELEASE, U-UNFINISHED,C-CANCELLED,H-HOLD
4976 REM " IF TRANSMISSION DIDN'T GO - CHANGE KEY TO NEW PROGRAM NAME AND WRITE ELSE REMOVE
4980 REMOVE (Z[1],KEY=REC$,DOM=4981)
4981 IF MID(RETURN$,1,3)="220" OR LEN(RETURN$)=0 THEN GOTO 4990
4982 A$(353,5)=OREC$(59,5); REM " TRANSMISSION NUMBER
4985 IF MID(REC2$,7,1)="4" THEN A$(352,1)="C" ELSE A$(352,1)="A"; REM " FLAG TO SAY PO ALREADY SENT OR TO SEND A RE-CONFIRMATION REQUEST
4986 WRITE (Z[28],KEY=ORD$)IOL=0310; REM "WRITE PO BACK
4987 PO$=""
4990 GOTO 1030; REM "SEE IF ANOTHER ORDER IS READY TO SEND
5000 REM "End of Print
5005 REM "IF E8$<>"END" THEN E8$="END"; GOTO 1100
5010 REM "IF Q5=1 THEN GOTO 9920
5020 REM "IF W8=0 THEN GOTO 5200
5030 T0$="END"
5090 GOTO 9900
5200 REM "READ REPLY TRANSMISSION ERROR
5210 R$=PAD(RETURN$(1,3),6,1," "); REM 'PAD ERR TO 6 TO READ IN OS3
5220 DIM R1$(128)
5230 READ (Z[10],KEY=R$,DOM=5231)IOL=0370
5240 DIM O$(254)
5250 O$(20,60)=R1$(7,60); O$(80,10)=DATE$; O$(90,8)=TIME$
5252 O$(98,6)=R$
5257 WRITE_SEQ$=STR(1:"000")
5260 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"0OE01"+DIM(1),DOM=*NEXT)ORD$+WRITE_SEQ$+"0OE01"+DIM(1)+O$(17)+DIM(255); GOTO 5290
5261 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
5262 GOTO 5260
5290 RETURN 
5300 REM "PROCESS ACKNOWLEDGEMENT STATUS
5310 QORDRD=NUM(RREC$(20,6))
5315 QSHPPD=NUM(RREC$(26,6))
5320 QONSWI=NUM(RREC$(32,6))
5325 DLRNET=NUM(RREC$(38,7))
5330 ASTAT$=RREC$(45,1)
5335 RDESC$=RREC$(46,12)
5350 MFRORD$=RREC$(60,3)
5355 STKORD$=RREC$(63,12)
5360 IF ASTAT$="A" THEN GOTO 5500
5370 REM "CONTINUE$="NO"
5390 RETURN 
5400 REM "ACK STATUS = 'A' = ORDER ACCEPTED
5410 R$="OS"+PAD(OSR$(3,2),4,1," "); REM 'PAD ERR TO 6 TO READ IN OS3
5420 DIM R1$(128)
5430 READ (Z[10],KEY=R$,DOM=5431)IOL=0370
5440 DIM O$(123)
5450 O$(20,60)=R1$(7,60); O$(80,10)=DATE$; O$(90,8)=TIME$
5456 O$(98,6)=R$
5458 WRITE_SEQ$=STR(1:"000")
5460 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"1OS"+DIM(3),DOM=*NEXT)ORD$+WRITE_SEQ$+"1OS"+DIM(7)+O$(20)+OSR$; GOTO 5470
5461 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
5462 GOTO 5460
5470 REM "CONTINUE$="NO"
5490 RETURN 
5500 REM "ACK STATUS = 'A' = ORDER ACCEPTED
5510 A$(535,5)="00001"; REM "TRANSMISSION NUMBER
5520 A$(352,1)="A"
5530 READ (Z[10],KEY=R$,DOM=5531)IOL=0370
5540 DIM O$(123)
5550 O$(20,60)=R1$(7,60); O$(80,10)=DATE$; O$(90,8)=TIME$
5551 O$(98,6)=R$
5559 WRITE_SEQ$=STR(1:"000")
5560 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"2A1"+DIM(3),DOM=*NEXT)ORD$+WRITE_SEQ$+"2A1"+DIM(7)+O$(20)+AIR$; GOTO 5590
5561 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
5562 GOTO 5560
5590 RETURN 
5600 REM "Get name to print on shipto
5605 IF E$(11,1)="C" THEN GOSUB 5650 ELSE IF A1<>0 THEN GOSUB 5661
5610 IF LEN(E$)>=259 AND POS(" "<>E$(259))<>0 THEN E9$=E$(225,35); GOTO 5645 ELSE E9$=D$(11,35)
5615 ON POS(E$(11,1)="CPD") GOTO 5645,5620,5625,5630
5620 FIND (Z[7],KEY=E$(11,1)+D$(1,10)+E$(12,4),DOM=5645)E1$; GOTO 5635
5625 FIND (Z[7],KEY=E$(11,1)+A$(7,10)+E$(12,4),DOM=5645)E1$; GOTO 5635
5630 FIND (Z[7],KEY=E$(11,1)+Y6$(1,10)+E$(12,4),DOM=5645)E1$; GOTO 5635
5635 E9$=E1$(16,35); IF E$(11,1)="C" THEN SHIP_TO_ZIP$=E1$(129,9) ELSE SHIP_TO_ZIP$=""
5645 RETURN 
5700 REM "ERROR IN 'IT' RECORD - ITEM INFO RECORD - PROCESS ERROR
5710 R$="OS"+PAD(ITR$(3,2),4,1," "); REM 'PAD ERR TO 6 TO READ IN OS3
5720 DIM R1$(128)
5730 READ (Z[10],KEY=R$,DOM=5731)IOL=0370
5740 DIM O$(123)
5750 O$(20,60)=R1$(7,60); REM "O$(80,10)=ITR$(5,10); O$(90,5)=DIM(5); O$(95,3)=ITR$(5,3); O$(99,60)=MID(ITR$,104,60); O$(159,7)=MID(ITR$,269,7)
5753 O$(98,6)=R$
5754 O$(80,10)=DATE$; O$(90,8)=TIME$
5755 REM "IF LEN(PO$)=0 THEN GOTO 5760
5756 PO1=NUM(PO$(1,3),ERR=*NEXT); IF LEN(PO$)>3 THEN PO$=PO$(4) ELSE PO$=PO$
5758 REM "O$(200,14)=ITR$(24,14)
5759 WRITE_SEQ$=STR(1:"000")
5760 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"3IT"+STR(PO1:"000"),DOM=*NEXT)ORD$+WRITE_SEQ$+"3IT"+STR(PO1:"000")+O$(17)+ITR$; GOTO 5790
5761 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
5762 GOTO 5760
5790 RETURN 
5800 REM "ERROR IN 'ST' RECORD - ORDER STATUS CHANGE RECORD - PROCESS ERROR
5805 IF LEN(STR$)=0 THEN GOTO 5890
5810 R$="OS"+PAD(STR$(3,2),4,1," "); REM 'PAD ERR TO 6 TO READ IN OS3
5820 DIM R1$(128)
5830 READ (Z[10],KEY=R$,DOM=5831)IOL=0370
5840 DIM O$(123)
5850 O$(20,60)=R1$(7,60); O$(80,10)=DATE$; O$(90,8)=TIME$; REM "O$(98,1)=STR$(108,1); O$(167,6)=R$
5856 REM "O$(173,10)=DATE$; O$(183,8)=TIME$
5857 O$(98,6)=R$
5858 WRITE_SEQ$=STR(1:"000")
5860 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"5ST"+DIM(3),DOM=*NEXT)ORD$+WRITE_SEQ$+"5ST"+DIM(7)+O$(20)+STR$(1,107); GOTO 5890
5861 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
5862 GOTO 5860
5890 RETURN 
5900 REM " Process the LT Record
5910 IF LEN(RETURN$)=0 THEN GOTO 5999
5920 R$="LT"+PAD(RETURN$(3,2),4,1," "); REM 'PAD ERR TO 6 TO READ IN OS3
5930 DIM R1$(128)
5940 READ (Z[10],KEY=R$,DOM=5941)IOL=0370
5950 DIM L$(123)
5960 L$(20,60)=R1$(7,60); L$(80,10)=DATE$; L$(90,8)=TIME$; REM "O$(98,1)=STR$(108,1); O$(167,6)=R$
5967 L$(98,6)=R$
5968 WRITE_SEQ$=STR(1:"000")
5970 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"4LT"+DIM(3),DOM=*NEXT)ORD$+WRITE_SEQ$+"4LT"+DIM(7)+L$(20)+RETURN$(1,107); GOTO 5999
5971 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
5972 GOTO 5970
5999 RETURN 
6000 REM " GET THE FOUR CHARACTER UNIT OF MEASURE FROM PL3                      
6005 READ (Z[26],KEY=C$(58,10)+H$(36,4),DOM=6006)
6006 PC6_KEY$=KEY(Z[26])
6007 IF PC6_KEY$(1,14)<>C$(58,10)+H$(36,4) THEN RETURN 
6010 DIM PC3$(64); READ (Z[25],KEY=PC6_KEY$(1,10)+PC6_KEY$(15,10),DOM=6030)PC3$
6020 DIM UOM$(2); UOM$=PC3$(11,2)
6030 RETURN 
6100 REM "WRITE OUT THE 800 RECORD
6110 R$=PAD(RETURN$(1,3),6,1," "); REM 'PAD ERR TO 6 TO READ IN OS3             
6120 DIM R1$(128)
6130 READ (Z[10],KEY=R$,DOM=6131)IOL=0370
6140 DIM O$(254)
6145 O$(1,9)=ORD$; REM TEST
6150 O$(20,60)=R1$(7,60); O$(80,10)=DATE$; O$(90,8)=TIME$
6152 O$(98,6)=R$
6153 O$(101,6)="800"; REM WAS 101,6
6154 REM "O$(99,6)="800"; REM WAS 101,6
6157 WRITE_SEQ$=STR(1:"000")
6160 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"5OE01"+DIM(1),DOM=*NEXT)ORD$+WRITE_SEQ$+"5OE01"+DIM(1)+O$(17)+DIM(252); GOTO 6190
6161 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000 ")
6162 GOTO 6168
6199 RETURN 
7000 DO_WINDX:! Process command intended to be run on client                   
7001 REM "ENV_TEMP$="C:\TEMP"
7003 CALL "[WDX]*Windx.utl;Get_Val","ENV("+QUO+"TEMP"+QUO+")",ENV_TEMP$; CALL "[WDX]*Windx.utl;Get_Val","ENV("+QUO+"COMSPEC"+QUO+")",ENV_COMSPEC$ ! Get e nv values we need
7004 ENV_TEMP$="C:\WGET"
7005 R$="",END_MARK$="--"+FID(0)+FID(0)+FID(0)+"--"; TEMP_FILE$=ENV_TEMP$+"\"+"commout"+FID(0); MAX_TIME=ALLOWED_TIME; IF NUM(ZC0$(71,3),ERR=*NEXT)>0 THEN MAX_TIME=NUM(ZC0$(71,3),ERR=*NEXT)
7007 GOSUB CREATE_UNIQUE_TEMP_FILE
7010 DOIT$=WINDX$+ENV_COMSPEC$+" /c c:\wget\wget.exe --post-file="+TMP$+" -q -O- "+URL$+">> "+TEMP_FILE$+" && echo "+END_MARK$+" >> "+TEMP_FILE$
7050 INVOKE HIDE DOIT$
7051 WAIT 30; REM " NEED LONGER WAIT FOR UN 
7060 SLOT=HFN; OPEN (SLOT,ISZ=5000)WINDX$+TEMP_FILE$
7061 WAIT 1
7065 READ (SLOT,SIZ=1,END=7070)R_IN$; R$=R$+R_IN$; GOTO 7065
7066 REM "IF STP(R_IN$,1)=END_MARK$ THEN GOTO 7070 ! If w e find the end mark we are done
7068 R$=R$+SEP+R_IN$
7069 GOTO 7065
7070 CLOSE (SLOT)
7077 REM "EM=POS(END_MARK$=R$); IF EM<>0 THEN R$=MID(R$,1,EM-1)
7080 REM "ERASE WINDX$+TEMP_FILE$,ERR=*NEXT
7100 RETURN 
7200 REM "READ RECEIVED FILE FROM SPR
7205 ! TRECV_PATH$="/usr/sprich/sparco/spr/recv/"
7210 TFILE_RECV$=TRECV_PATH$+TFILE$
7215 TFILE_RECVERR$=TRECV_PATH$+TFILE$+".er"
7218 WAIT 30
7220 RCH=HFN; OPEN LOCK (RCH,ERR=7230)TFILE_RECVERR$; RETURN$="ERR"; GOTO 7299
7225 CLOSE (RCH); RCH=HFN; OPEN LOCK (RCH,ERR=7230)TFILE_RECV$; GOTO 7240
7228 RCH=HFN; OPEN LOCK (RCH,ERR=7230)TFILE_RECV$; GOTO 7240
7230 WAIT 30; GOTO 7225
7240 RETURN$="OK"
7299 RETURN 
7300 REM "ERROR 220
7310 R$=PAD(RETURN$(1,3),6,1," ")
7315 DIM R1$(128)
7320 READ (Z[10],KEY=R$,DOM=7321)IOL=0370
7325 DIM O$(254)
7330 O$(167,6)=R$; O$(20,60)=R1$(7,60); O$(173,10)=TIME$; O$(183,8)=TIME$
7335 WRITE_SEQ$=STR(1:"000")
7340 WRITE (Z[11],KEY=ORD$+WRITE_SEQ$+"88888"+DIM(1),DOM=*NEXT)ORD$+WRITE_SEQ$+"88888"+DIM$(1)+O$(17)+DIM(255); GOTO 7399
7345 IF WRITE_SEQ$="999" THEN ESCAPE ELSE WRITE_SEQ$=STR(NUM(WRITE_SEQ$)+1:"000")
7350 GOTO 7340
7399 RETURN 
7650 CREATE_UNIQUE_TEMP_FILE:! take TEMP_FILE$ and make it unique and make it  to use, we let caller make the temp_file name so we don't have to be opera ting system specific 
7655 TEMP_FILE$=TSEND_PATH$+"SPR",RND$=STR(INT(RND*1000):"0000")
7660 TCH=HFN; OPEN (TCH,ERR=7665)TEMP_FILE$+RND$; CLOSE (TCH); GOTO 7655 ! if opened then go get another random number
7665 TEMP_FILE$+=RND$; SERIAL TEMP_FILE$ ! name is unique, set it & crea te file to hold it 
7670 OPEN LOCK (TCH)TEMP_FILE$
7699 RETURN 
9000 REM "ERROR PROCESSING
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 1000
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000
9520 ON C9 GOTO 1140,2040
9750 REM 
9760 CALL "ZZFLES",X3$,Y1$,Y0$,Y$,Z{ALL},Z0,Z1; ON Z0 GOTO 9761,9900
9790 RETURN 
9900 REM "End program
9909 REM "IF V8$="A" THEN V3$(2,6)="AUTO"+V7$
9910 REM "CALL "ZZERPT",X3$,X4$,X0$,Y3$,Y4$,W9,W2,W5,W,W0,W8,T3,V3$
9915 REM "IF V8$="A" OR (Y4$<>X0$ AND V3$(2,1)<>"T") THEN GOSUB 5300
9920 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9921 Y4$="ZZ2PGC"
9922 IF %GUI THEN CALL Y4$,ERR=*NEXT
9923 IF %GUI THEN EXIT 
9930 IF Y4$<>"" THEN RUN Y4$,ERR=9931
9940 RUN "ZMENU"
9999 END 
56000 REM "191375-Modify SPR shipping type to be S instead of
