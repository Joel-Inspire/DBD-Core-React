0010 REM "Price Check           <OS2TAA>
0015 REM "Prog Type: I -3.1.2
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 10/13/09 - 12.373888 - tma - SSP# 233218
0037 REM "233218-GUI issue with the Price Check Panel                        
0040 REM "Copyright 2009 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0110 X0$="OS2TAA",X1$="Price Check "
0120 DIM S$(20)
0130 K0=28,K1=3
0135 C9=-1,V9=-2
0136 DIM BLANK$(100," "); REM SSP 219413
0140 M0$="-#####,##0"
0200 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(65,1)>"2" THEN PRECISION NUM(X3$(65,1),ERR=0246)
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0300 REM "IOLISTS
0310 IOLIST A$(1),A[0],A[1]
0320 IOLIST B$,B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15]
0330 IOLIST C$,C[0],C[1],C[2],C[3],C[4],C[5],C[6],C[7],C[8],C[9],C[10],C[11],C[12],C[13],C[14],C[15],C[16],C[17],C[18],C[19],C[20],C[21],C[22],C[23],C[24],C[25],C[26],C[27],C[28],C[29],C[30],C[31]
0340 IOLIST D$
0350 IOLIST E$
0360 IOLIST F$
0370 IOLIST G$,G[0],G[1],G[2],G[3],G[4],G[5],G[6],G[7],G[8],G[9],G[10],G[11],G[12],G[13],G[14],G[15],G[16],G[17],G[18],G[19],G[20],G[21],G[22],G[23],G[24],G[25],G[26],G[27],G[28],G[29],G[30],G[31],G[32],G[33],G[34],G[35],G[36],G[37],G[38],G[39],G[40]
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01X ZZPARM  02O AR1...  03O FM1...  04O OS0... 05O FS1... 06O FS2... 07O IC0... 20O OS6...  25O OS1...  13O ZZPARM  "
0520 GOSUB 9750; ON Z0 GOTO 0521,9900
0585 RT_PARM$=""; CALL "RT2PRM",ERR=0586,X3$,X4$,RT_PARM$
0590 READ (Z[1],KEY=K9$,DOM=0591)
0600 REM "
0680 GOSUB 6000
1000 REM "
1010 Y8=1; CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,X2
1020 READ (Z[1],KEY=X3$(9,3)+"OSP")OSP_PARMS$
1025 PTYPE$=OSP_PARMS$(219,1)
1030 DIM B$(400),B[15],C$(325),C[31],G[40]
1035 DIM A$(800)
1040 IF V9<>-1 THEN GOSUB 6900
1045 A$(1,LEN(A1$))=A1$; IF A1$="" THEN A$(1,LEN(K9$))=K9$
1060 PRINT (0,ERR=1070)'CF',; GOSUB 6450; GOTO 1100
1070 GOSUB 6000; GOSUB 6450
1100 REM "KEY SEQ
1110 X0=-1,C0=0,X1=0,C9=0,Z9=0
1120 SETERR 9000; C0=ABS(C0),X$=""; IF C0=2 AND X0>0 THEN X0=X0-1 ELSE IF C0<>2 THEN X0=X0+1; IF C0=4 THEN GOTO 9900
1140 ON X0 GOTO 1250,1300,1500
1200 REM "
1205 IF LEN(A1$)>0 THEN A$(1,8)=A1$(1,8); GOTO 1220
1210 CALL "ZZENTR","AUX",A{ALL},A$,X4$,X3$,67,3,1,8,C0,"O/P","{1"+X$,K9$,"IC2TAA00","FS1","",""; IF C0=6 THEN GOSUB 6400; C0=1
1215 IF ABS(C0)=4 THEN GOTO 9900
1220 IF A$(1,8)<>S$(1,8) THEN GOSUB 7600
1240 GOTO 1120
1255 IF LEN(A1$)>0 THEN A$(1,10)=A1$(1,10); GOTO 1270
1256 PRINT @(26,3),BLANK$(1,35),; REM SSP 219413
1257 X$="F1 to Search or F4 to End"
1260 A$(1,10)="",A1$=""; CALL "ZZENTR","AUX",A{ALL},A$,X4$,X3$,15,3,1,10,C0,"A/R","{8"+X$,"","IC2TAA02","AR1","AR2MAA",""; IF C0=6 THEN GOSUB 6400; C0=1; REM SSP 219413
1261 IF ABS(C0)=2 AND LEN(A1$)>0 THEN A1$=A1$(1,0); GOTO 1120
1262 IF ABS(C0)=2 THEN GOTO 1120
1263 IF INT(ABS(C0))=3 THEN GOTO 1257
1270 DIM B$(200); IF A$(1,10)<>S$(1,10) THEN IF V9<>-2 THEN FIND (Z[2],KEY=A$(1,10),DOM=1260)IOL=0320
1275 PRINT @(26,3),B$(11,35),
1276 Q$=A$(1,10); REM SSP 219413
1277 IF C0=-2 THEN Q$=""; REM SSP 219413
1290 GOTO 1120
1305 Q$=A$(1,10)
1306 IF C0=-2 THEN X0=1; A1$=""; GOTO 1120; REM SSP 219413
1307 X$="F1 to Search or F4 to End"
1310 A$(11,10)=DIM(10); CALL "ZZENTR","SUUX",A{ALL},A$,X4$,X3$,15,4,11,10,C0,"","{8"+X$,"","IC2TAA04","OSD","",""; IF INT(ABS(C0))=4 THEN GOTO 9900 ELSE FIND (Z[4],KEY=A$(11,10),DOM=1300); IF C0=6 THEN GOSUB 6400; C0=1; REM SSP 219413
1311 IF ABS(C0)=2 THEN A1$=""; REM SSP 219413
1312 IF ABS(C0)=2 THEN X0=1; A1$=""; GOTO 1120
1313 IF ABS(C0)=4 THEN GOTO 9900
1315 IF INT(ABS(C0))=3 THEN GOTO 1310 ELSE IF ABS(C0)=4 THEN GOTO 9900
1320 REM "DIM C$(200); IF V9<>-2 THEN FIND (Z[3],KEY=A$(9,10)+A$(19,10),DOM=1321)IOL=0330
1325 PRINT @(26,4),C$(42,40),
1330 REM "IF A$(1,10)=S$(1,10) THEN DIM G$(187),G[40]; FIND (Z[7],KEY=A$(9,10)+A$(19,10),DOM=1331)IOL=0370
1340 GOTO 1120
1500 REM "
1505 Z9=-1,Z8=0,C9=0,A2$="",A3$="",A4$="",A5$=""
1510 A1$=A$(1,20)
1520 GOSUB 8000; GOTO 1800
1525 Z9=0,V7$=""; GOSUB 5800
1590 GOTO 1700
1600 REM "
1615 IF X3$(185,1)="I" THEN CALL "ZZPROM","2A",X3$,0,"","","",0; GOTO 1630
1620 CALL "ZZPROM","2",X3$,Z,"","","",0; ON Z GOTO 1650,1630
1630 IF Z8=1 THEN REMOVE (Z[1],KEY=A1$,DOM=1000); GOTO 1000 ELSE GOTO 1000
1655 Z8=1
1660 IF V9>=0 THEN GOSUB 6200
1680 GOSUB 7450
1690 GOTO 2000
1700 REM "
1790 GOSUB 6200
1800 REM "
1810 IF C$="" AND D$="" THEN GOTO 1000
1820 CALL "ZZPROM","4",X3$,Z,"","","",0; ON Z GOTO 6700,2000
1825 GOTO 6700
1830 GOTO 2000
1850 REM "MODIFY
1855 Z9=1
1890 IF Z<0 THEN GOTO 2035 ELSE GOTO 2000
2000 REM "DATA SEQ
2010 C0=0,X0=-1,X1=1
2020 SETERR 9000; X$="",Q$="",C0=ABS(C0),X0=X0+1; IF C0=2 THEN IF X0>0 THEN X0=X0-2
2025 IF C0>3 OR X0<0 THEN GOTO 1800
2035 IF V9<>-2 THEN IF 6*(X0+K1)+5<LEN(V9$) THEN IF V9$((X0+K1)*6+5,1)="3" THEN GOTO 2020 ELSE IF V9$((X0+K1)*6+5,1)="2" AND C0<>2 THEN GOTO 2020
2038 IF X0<LEN(V7$) THEN V7$(X0+1,1)=""
2040 ON X0 GOTO 2100,2150,1800
2105 IF D$="" THEN GOTO 2020
2110 CALL "ZZENTR","SU",A{ALL},A$,X4$,X3$,15,10,29,10,C0,"","{3"+X$,"","IC2TAA06","","",""
2140 GOTO 2020
2160 CALL "ZZENTR","N&.",A{ALL},A$,X4$,X3$,15,12,0,601,C0,M0$,"{3"+X$,"","IC2TAA08","","",""
2190 GOTO 2020
5800 REM "Alt sort keys
5890 RETURN 
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6016)'SB',
6060 PRINT @(0,3+V0),"Customer code:",@(4,4+V0),"Item code:",; REM '@(0,5+V0),Z0$,
6070 PRINT @(2,10+V0),"List Price: ",
6080 PRINT @(0,12+V0),"Pricing Type:",
6100 PRINT @(41,5+V0),"Priorities",@(55,5+V0),"Price",@(68,5+V0),"Cost",
6101 PRINT @(40,6+V0)," 1:",
6102 PRINT @(40,7+V0)," 2:",
6103 PRINT @(40,8+V0)," 3:",
6104 PRINT @(40,9+V0)," 4:",
6105 PRINT @(40,10+V0)," 5:",
6106 PRINT @(40,11+V0)," 6:",
6107 PRINT @(40,12+V0)," 7:",
6108 PRINT @(40,13+V0)," 8:",
6109 PRINT @(40,14+V0)," 9:",
6110 PRINT @(40,15+V0),"10:",
6111 PRINT @(40,16+V0),"11:",
6112 PRINT @(40,17+V0),"12:",
6113 PRINT @(40,18+V0),"13:",
6114 PRINT @(40,19+V0),"14:",
6115 PRINT @(40,20+V0),"15:",
6116 PRINT @(40,21+V0),"16:",
6165 PRINT (0,ERR=6166)'SF',
6185 PRINT (0,ERR=6166)'SF',
6190 RETURN 
6200 REM "DISPLAY DATA
6215 GOSUB 6450
6220 REM "PRINT @(15,10),A$(29,16),
6228 PRINT 
6230 REM "PRINT @(57,6+V0),"U/M",@(62,6+V0),"Carton Wt",
6240 PRINT @(26,4+V0),D$(548,20),@(1,5+V0),D$(37,40),; REM +D$(144,40),@(57,7+V0),
6241 REM "PRINT @(25,6+V0),D$(548,20),@(15,7+V0),D$(37,40),@(57,7+V0),D$(140,4),@(62,7+V0),NUM(D$(364,10)):"####.00"," lb",
6242 REM "PRINT @(0,5),Z0$,
6243 IF D$(124,1)="D" THEN PRINT @(55,3+V0),"***Item Discontinued***" ELSE IF D$(124,1)="I" THEN PRINT @(55,3+V0),"***Item Inactive***",
6244 REM "IF POS(D$(144,2)="1646")>0 THEN RECOMMEND$="New Item: " ELSE IF D$(144,2)="26" THEN RECOMMEND$="Substitute"
6245 IF RECOMMEND$="" THEN GOTO 6250
6246 REM "IF D$(124,1)="D" THEN PRINT @(55,4+V0),RECOMMEND$+D$(146,38) ELSE IF D$(124,1)="I" THEN PRINT @(55,4+V0),RECOMMEND$+D$(146,38),
6250 PRINT @(13,10+V0),NUM(D$(204,10)):"###,###.00",
6260 REM "READ PRICE PRIORITIES
6261 READ (Z[20],KEY=A$(1,10),DOM=*NEXT)OS6$
6262 IF LEN(OS6$)<>0 THEN PTYPE$=OS6$(11,1)
6263 IF PTYPE$="B" THEN PRICING_TYPE$="Best/Flyers/no Mat" ELSE IF PTYPE$="O" THEN PRICING_TYPE$="List Order" ELSE IF PTYPE$="C" THEN PRICING_TYPE$="Cust Best no Flyer" ELSE IF PTYPE$="L" THEN PRICING_TYPE$="List" ELSE IF PTYPE$="P" THEN PRICING_TYPE$="Cust Best/Flyer" ELSE IF PTYPE$="V" THEN PRICING_TYPE$="Very Best-Matrix/Flyers"; REM ssp 220569
6264 PRINT @(14,12+V0),PTYPE$,"  ",PRICING_TYPE$,
6265 DIM I[20]
6267 DIM B$(100); B$(1,10)=A$(1,10); B$(16,6)=X3$(21,6)
6299 PROGRAM$="OS2TAA"
6300 CALL "OS2OBC",X3$,X4$,A$(11,10),I{ALL},B$,PROGRAM$,PRICE,PTYPE$,COST,1
6302 PLAN$=PROGRAM$
6304 READ (Z[25],KEY=A$(11,10)+PLAN$,DOM=6305)OS1$; IF OS1$(18,1)="F" THEN PRINT @(7,16+V0),"F", ELSE IF OS1$(18,1)="M" THEN PRINT @(7,16+V0),"M",
6305 IF PRICING_TYPE$="List" THEN PLAN$="LIST"
6306 IF PLAN$="" THEN PLAN$="LIST"
6308 PRINT @(1,14+V0),"Plan",@(13,14+V0),"Price",@(27,14+V0),"Cost",
6310 PRINT @(1,16+V0),PLAN$,@(8,16+V0),I[0]:"###,###.00",@(21,16+V0),I[17]:"###,###.00",
6320 IF LEN(OS6$)=0 THEN GOTO 6380
6340 FOR I=0 TO 15
6351 IF OS6$(22+I*6,6)<>DIM(6) THEN PRINT @(43,I+6),OS6$(22+I*6,6),
6353 READ (Z[25],KEY=A$(11,10)+OS6$(22+I*6,6),DOM=6370)OS1$
6354 IF OS1$(12,1)="" THEN OS1$(12,1)="N"; PRINT @(10,5),OS1$(12,1),
6355 PRINT @(50,I+6),NUM(OS1$(47,10)):"###,###.00",@(63,I+6),NUM(OS1$(57,10)):"###,###.00",
6356 IF OS1$(31,6)<X3$(21,6) THEN PRINT @(75,I+6),"*EXP*",
6370 NEXT I
6380 REM "CALL "OS2DAJ",X3$,X4$,A$(11,10),FLAG1,19
6390 RETURN 
6400 REM "WHOLE SCREEN
6402 IF C9=0 THEN IF ABS(C0)=17 THEN GOTO 6970
6405 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,0
6420 GOSUB 6000
6430 IF C9>0 THEN GOSUB 6200 ELSE GOSUB 6450
6440 IF ABS(C0)>4 THEN C0=ABS(C0)-5
6445 RETURN 
6450 REM "DISPLAY KEYS
6455 IF C9<0 THEN GOTO 6445
6460 PRINT 
6464 REM "CALL "ZZDISP","AU  ",A$(1,8),"O/P",X3$,"","",67,3,X4$
6468 PRINT 
6472 CALL "ZZDISP","A   ",A$(1,10),"A/R",X3$,"","",15,3,X4$
6476 IF C$>"" THEN PRINT @(26,3),B$(11,35),@(15,4),A$(11,10),@(26,4),C$(42,40),; REM SSP 219413
6490 RETURN 
6500 REM "DELETE
6510 REMOVE (Z[1],KEY=A1$,DOM=6511)
6590 A1$=""; GOTO 1630
6600 REM "ALT KEY DATA READS
6605 FIND (Z[2],KEY=A$(9,10),DOM=6606)IOL=0320
6610 FIND (Z[3],KEY=A$(9,10)+A$(19,10),DOM=6611)IOL=0330
6690 RETURN 
6700 REM "ADD ENTRY
6705 C0=C[0]
6710 REM "IF D$>"" THEN IF D$(35,10)<>A$(29,10) THEN D$(35,10)=A$(29,16); WRITE (Z[4],KEY=D$(1,24))IOL=0340; IF RT_PARM$>"" THEN IF RT_PARM$(7,1)="H" THEN CUST$=D$(1,10); CALL "RT2WOC",ERR=6711,X3$,X4$,CUST$,"IC1...","U",D$(1,24)
6715 REM "IF A$(9,10)=S$(1,10) AND C[0]<>A[0] AND POS(" "<>G$(11,10))<>0 THEN G[19]=A[0]; WRITE (Z[7],KEY=G$(1,20))IOL=0370
6720 REM "IF C$>"" THEN IF C[0]<>A[0] THEN C[0]=A[0]; WRITE (Z[3],KEY=C$(1,20))IOL=0330; IF RT_PARM$<>"" THEN CUST$=C$(1,10); CALL "RT2WOC",ERR=6721,X3$,X4$,CUST$,"FM1...","U",C$(1,20)
6725 REM "IF A$(9,10)=S$ AND C[0]<>A[0] THEN G[19]=A[0]
6730 REM "IF C$="" OR C0=A[0] THEN GOTO 6780
6740 REM "DIM G[40]; EXTRACT (Z[7],KEY=C$(1,20),DOM=6731)IOL=0370; G[19]=A[0]; WRITE (Z[7])IOL=0370; IF RT_PARM$>"" THEN IF RT_PARM$(7,1)="H" THEN CUST$=C$(1,10); CALL "RT2WOC",ERR=6741,X3$,X4$,CUST$,"IC0...","U",C$(1,20)
6790 GOTO 1000
6800 REM "NEXT ENTRY IN FILE
6805 ON 10*FPT(C0)+2 GOTO 6850,6806
6810 A1$=KEY(Z[25],END=6895)
6813 REM "A1$=DIM(10)+A1$(1,10)
6820 IF A1$="" THEN GOTO 6800 ELSE IF A1$(1,LEN(K9$))<>K9$ THEN GOTO 6895
6825 A$(1,LEN(A1$))=A1$
6830 GOSUB 6600
6835 GOSUB 6450
6840 GOTO 1515
6850 REM "PRIOR ENTRY
6855 CALL "ZZKEYP",ERR=6856,Z[1],A1$; GOTO 6820
6856 CALL "ZZPROM","K0",X3$,S3,"","","",0; ON S3 GOTO 6857,9900
6860 PRINT 'RB',; CALL "ZZKEYL",ERR=6861,Z[1],A1$; GOTO 6820
6865 GOTO 1100
6870 GOTO 6895
6890 GOTO 1515
6895 CALL "ZZPROM","K1",X3$,S3,"","","",0; IF S3=1 THEN GOTO 9900 ELSE IF A1$="" THEN GOTO 6860 ELSE PRINT 'RB',; READ (Z[1],KEY=K9$,DOM=6896)
6898 ON S9 GOTO 6810,1100
6900 REM "GET DEFAULTS
6902 V9$="6703  1503  1506  1510  1512  "
6910 IF V9>=0 THEN READ (Z[13],IND=V9)V9$,IOL=0310; GOTO 6930 ELSE V9=-1
6920 EXTRACT (Z[13],KEY=X0$+"DFLT",DOM=6921)V9$,IOL=0310; V9=IND(Z[13]); READ (Z[13])
6930 RETURN 
6940 V9=-1; REMOVE (Z[13],KEY=X0$+"DFLT",DOM=1000); GOTO 1000
6950 REM "WRITE DEFAULT
6955 REM "WRITE (Z[13],KEY=X0$+"DFLT")V9$,IOL=0310
6960 GOSUB 6920; GOTO 1630
6970 REM "ENTER DEFAULT VALUES AND SETTINGS
6975 A$(1,K0+K9)=""; GOSUB 6200; V9=-2,Q$=""; GOTO 2000
6980 FOR X=1+K1*6 TO LEN(V9$) STEP 6
6982 PRINT @(NUM(V9$(X,2)),NUM(V9$(X+2,2))),; IF V9=-2 THEN PRINT V9$(X+4,1), ELSE READ RECORD (0,SIZ=1)Q$; IF POS(Q$="1234+-"+$0D$)=0 THEN PRINT 'RB'; GOTO 6982
6990 IF Q$="+" THEN EXITTO 6950 ELSE IF Q$="-" THEN GOTO 6940 ELSE IF Q$<>$0D$ THEN V9$(X+4,LEN(Q$))=Q$
6992 NEXT X
6995 V9=0; GOTO 6980
7200 REM "Forced read
7210 IF ERR<>0 THEN GOTO 9000
7220 CALL "ZZREAD",Z[1],A1$,A$,A{ALL},S8; ON S8 GOTO 7221,1630
7230 GOSUB 6200
7240 CALL "ZZPROM","E0",X3$,0,"","","",0; GOTO 7290
7250 CALL "ZZPROM","E0A",X3$,0,"","","",0; GOTO 7290
7290 GOTO 1630
7390 IF X0>0 THEN X0=X0-0
7400 REM "EXTRACT
7410 EXTRACT (Z[1],ERR=7200,KEY=A1$,DOM=7440)IOL=0310
7420 C9=1,Z9=1; GOSUB 5800
7440 RETURN 
7450 REM "EXTRACT NEW ENTRY
7460 REM "WRITE (Z[1],KEY=A1$,DOM=7250)IOL=0310; GOTO 7400
7490 RETURN 
7500 REM "GET DATA
7510 REM "C$=""; EXTRACT (Z[3],KEY=A$(9,20),DOM=7511)IOL=0330
7520 D$=""; EXTRACT (Z[4],KEY=A$(11,10),DOM=7521)IOL=0340
7525 X$=KEY(Z[4],END=7580); IF X$(1,10)<>A$(1,10) THEN GOTO 7580
7530 DIM D$(0); EXTRACT (Z[4],KEY=X$)IOL=0340
7590 RETURN 
7600 REM "GET ORDER DATA
7610 READ (Z[5],KEY=A$(1,8),DOM=7690)IOL=0350
7620 A$(9,10)=E$(6,10)
7630 GOSUB 7700
7640 GOSUB 6600
7650 GOSUB 6450
7695 RETURN 
7700 REM "GET FIRST CUSTOM FORM
7720 READ (Z[6],KEY=A$(1,8),DOM=7721)
7730 F0$=KEY(Z[6],END=7790); READ (Z[6],END=7790)IOL=0360; IF F0$(1,8)<>A$(1,8) THEN F0$=""; GOTO 7790
7735 IF F$(9,1)=" " THEN GOTO 7730
7740 A$(19,10)=F$(19,10)
7795 RETURN 
7900 REM "GET FIRST WAREHOUSE
8000 REM "SET A$, A(ALL)
8005 GOSUB 7500
8080 GOSUB 6200
8090 RETURN 
8905 DEF FNP$(Z9$)="("+Z9$(1,3)+") "+Z9$(4,3)+"-"+Z9$(7,4)+" Ext: "+Z9$(11,4)
8910 DEF FND$(Z9$)=Z9$(3,2)+"/"+Z9$(5,2)+"/"+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
8915 DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
8920 DEF FNB$(Z9$)=X3$(214-6*NUM(Z9$),1)
9000 REM "ERROR PROCESSING
9010 Y5=ERR,Y6=TCB(5); IF Y5=68 OR Y5=69 THEN GOTO 9500
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9120 ON Y8 GOTO 9900,0990,9920
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)<>"1" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; SETESC 9300; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9740 RETURN 
9750 REM "FILES
9760 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
9790 RETURN 
9800 REM "EXIT PROGRAM
9900 REM "END PROGRAM
9905 Y8=2
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
20000 ! 100 - Initialization
20010 INIT:
20015 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; IF X1>0 THEN CMD_STR$="END"; GOSUB WRAPUP; GOTO *RETURN
20020 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
20030 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
20040 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
20050 GOSUB SETUP_KEYS
20055 CALL "ZZ2PRP","OS",RESULT$,DATE$; IF RESULT$<>"Y" THEN MSGBOX "","TOPS Module is not installed"; CMD_STR$="END"; GOSUB WRAPUP; GOTO *RETURN
20060 _FILE_NAME$="OS6"+%C$
20070 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
20080 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
20082 DIM Z[NUM(X3$(60,3))]
20085 Z$="01X ZZPARM  02O AR1...  03O FM1...  04O OS0... 05O FS1... 06O FS2... 07O IC0... 20O OS6...  25O OS1...  13O ZZPARM  "
20087 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; IF Z0>0 THEN GOTO OPEN_ERR
20090 RETURN 
20100 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
20110 CMD_STR$="END"
20120 RETURN 
20130 ! 300 - Set up the message library
20140 SETUP_LIBRARY:
20150 _SV_MSGLIB$=MSG(*)
20160 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
20170 MESSAGE_LIB "*tfmsglib."+_LANG$,ERR=*NEXT; GOTO 20190
20180 MESSAGE_LIB "*tfmsglib.en"
20190 SET_MSG:GOSUB SETUP_MESSAGES
20200 RETURN 
20210 ! 400 - Set up key information
20220 SETUP_KEYS:
20230 _NUMKEYS=1
20240 DIM _KEYS$[1:1]; _KEYS$[1]="CUSTOMER$"
20250 _KEY1=1
20260 RETURN 
20270 ! 500 - Main panel post_display logic
20280 MAIN_POST_DISPLAY:
20290 MESSAGE_LIB _SV_MSGLIB$
20300 GOSUB CLEAR_REC
20310 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
20320 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
20330 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
20340 RETURN 
20350 ! 700 - Set up tabbing between folders
20360 INIT_FOLDER:
20370 GOSUB ENABLE_GROUPS
20380 IF _ENABLE_FLG<>_KEY1 THEN IF TAB_FLG$="<" THEN NEXT_ID=_LAST_TAB ELSE NEXT_ID=_FIRST_TAB
20390 EXIT 
20400 ! 900 - Wrapup
20410 WRAPUP:
20420 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
20430 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
20440 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
20445 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
20450 MESSAGE_LIB _SV_MSGLIB$
20460 SET_PARAM 'KR'=_SV_KR
20470 RETURN 
20480 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
20490 FIND_REC:
20495 QRY_VAL$=STP(QRY_VAL$,3,"-"); IF STP(QRY_VAL$)<>"" AND ID$="CUSTOMER" THEN CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$; QRY_VAL$=CUSTOMER$ ! SSP#233218
20500 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
20510 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
20520 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
20530 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$; CUSTOMER$=CUST_DIV$+CUST_CODE$
20540 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
20550 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
20560 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
20565 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=ITEM_CODE.CTL ! SSP#233218
20570 GOSUB PROCESS_READ
20580 GOSUB NUM_TO_STR
20590 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=ITEM_CODE.CTL ! SSP#233218
20600 EXIT 
20610 ! 1200 - New RECORD check
20620 NEW_RECORD:
20625 READ (Z[1],KEY=X3$(9,3)+"OSP")OSP_PARMS$
20627 PRICE_TYPE$=OSP_PARMS$(219,1)
20630 REM _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
20640 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
20650 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
20660 NEXT_FOLDER=_FIRST_FOLDER
20670 RETURN 
20680 ! 1400 - Add RECORD
20690 WRITE_REC:
20700 GOSUB STR_TO_NUM
20710 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
20720 GOSUB REVIEW_WRITE
20730 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20740 CHANGE_FLG=0
20750 NEXT_ID=_FIRST_KEY
20760 EXIT 
20770 ! 1600 - Delete
20780 DELETE_REC:
20790 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
20800 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
20810 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
20820 IF _X$<>"YES" THEN RETURN 
20830 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
20840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20850 CHANGE_FLG=0
20860 NEXT_ID=_FIRST_KEY
20870 EXIT 
20880 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
20890 ! 1800 - Clear record
20900 CLEAR_REC:
20910 REM IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
20920 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
20930 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20940 CHANGE_FLG=0
20950 RETURN 
20960 ! 2000 - Browsing mode
20970 ! - Next
20980 NEXT_REC:
20990 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21000 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
21010 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
21020 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
21030 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
21040 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
21050 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
21060 ! 2200 - Prior record
21070 PRIOR_REC:
21080 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21090 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
21100 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
21110 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
21120 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
21130 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
21140 ! 2400 - First record
21150 FIRST_REC:
21160 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21170 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
21180 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
21190 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
21200 ! 2600 - Last record
21210 LAST_REC:
21220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21230 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
21240 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
21250 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
21260 ! 3000 - Subroutines
21270 ! Processing required by READ
21280 PROCESS_READ:
21290 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
21300 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
21310 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
21320 CHANGE_FLG=0
21330 CUSTOMER$=CUST_DIV$+CUST_CODE$
21340 RETURN 
21350 ! 3200 - Review record for changes before WRITE
21360 REVIEW_WRITE:
21370 _CHG1$="",_CHG2$=""
21380 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
21390 GOSUB DETERMINE_CHGS
21400 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
21410 IF _CHG1$="" THEN GOTO CHK2
21420 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
21430 IF _YESNO$="NO" THEN GOTO *RETURN
21440 IF _CHG2$="" THEN GOTO WRT
21450 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
21460 GOSUB INCORPORATE_CHGS
21470 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
21480 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
21490 GOSUB NUM_TO_STR
21500 REFRESH_FLG=1
21510 RETURN 
21520 WRITE_ERROR:
21530 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
21540 RETURN 
21550 ! 3500 - Display a record
21560 DISP_REC:
21570 GOSUB NUM_TO_STR
21580 REFRESH_FLG=1
21590 RETURN 
21600 ! 3600 - Busy Record display
21610 BUSY_CHK:
21620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
21630 IF _D$="NO" THEN EXIT 
21640 RETURN 
21650 ! 3790 - See if changes are to be written
21660 CHECK_CHANGES:
21670 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUST_DIV.CTL,_FIRST_FIELD=ITEM_CODE.CTL,_FIRST_FOLDER=FLDR.OSGTAA.1.CTL
21680 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
21690 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
21700 IF _YESNO$="YES" THEN GOTO WRITE_REC
21710 CHANGE_FLG=0
21720 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
21730 RETURN 
21740 ! 4000 - Get the current key segment number
21750 GET_CURKEY:
21760 FOR _CURKEY=1 TO _NUMKEYS
21770 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
21780 NEXT _CURKEY
21790 RETURN 
21800 ! 9000 - Retrieve messages from the *msglib.xxx library
21810 SETUP_MESSAGES:
21820 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
21830 _MSG_DIRECTORY$=MSG("DIRECTORY")
21840 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
21850 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
21860 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
21870 _MSG_MANDATORY$=MSG("MANDATORY")
21880 _MSG_NEXT$=MSG("NEXT")
21890 _MSG_NON_NUMER$=MSG("NON_NUMER")
21900 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
21910 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
21920 _MSG_PRECEDING$=MSG("PRECEDING")
21930 _MSG_PREFIX$=MSG("PREFIX")
21940 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
21950 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
21960 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
21970 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
21980 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
21990 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
22000 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
22010 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
22020 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
22030 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
22040 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
22050 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
22060 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
22070 _MSG_START_FILE$=MSG("START_FILE")
22080 _MSG_UPDATE$=MSG("UPDATE")
22090 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
22100 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
22110 _MSG_UPD_SAME$=MSG("UPD_SAME")
22120 _MSG_WARNING$=MSG("WARNING")
22130 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
22140 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
22150 RETURN 
22200 FIND_ITEM_REC:
22201 IF _EOM$=$00$ AND QRY_VAL$="" THEN RETURN 
22210 DIM OS0$(800); READ (Z[4],KEY=ITEM_CODE$,ERR=*RETURN)OS0$
22215 LIST_PRICE$=OS0$(204,10)
22220 %SUPP_ITEM_NUM$=OS0$(548,20)
22230 IF OS0$(124,1)="D" THEN %SUPP_ITEM_NUM$="***ITEM DISCONTINUED***" ELSE IF OS0$(124,1)="I" THEN %SUPP_ITEM_NUM$="***ITEM INACTIVE***"
22235 BASE_PRICE$=OS0$(204,10)
22240 IF PRICE_TYPE$="B" THEN %PRICING_DESC$="Best/Flyers/no Mat" ELSE IF PRICE_TYPE$="O" THEN %PRICING_DESC$="List Order" ELSE IF PRICE_TYPE$="C" THEN %PRICING_DESC$="Cust Best no Flyer" ELSE IF PRICE_TYPE$="L" THEN %PRICING_DESC$="List" ELSE IF PRICE_TYPE$="P" THEN %PRICING_DESC$="Cust Best/Flyer" ELSE IF PRICE_TYPE$="V" THEN %PRICING_DESC$="Very Best/Matrix and Flyers"; REM ssp 220569
22250 DIM I[20],B$(100); B$(1,10)=CUSTOMER$; B$(16,6)=X3$(21,6)
22255 PROGRAM$="OS2TAA"
22257 PTYPE$=PRICE_TYPE$
22260 CALL "OS2OBC",X3$,X4$,ITEM_CODE$,I{ALL},B$,PROGRAM$,PRICE,PTYPE$,COST,1
22275 PRICE$=STR(I[0]:"###,###.00"),COST$=STR(I[17]:"###,###.00"),TF_COST$=COST$; REM SSP 215256 - variable changed because of Oracle Changes
22300 PLAN$=PROGRAM$
22310 %FLIER_PRICE$=""; READ (Z[25],KEY=ITEM_CODE$+PLAN$,DOM=*NEXT)OS1$; IF OS1$(18,1)="F" THEN %FLIER_PRICE$="F" ELSE IF OS1$(18,1)="M" THEN %FLIER_PRICE$="M"
22315 IF PLAN$="" THEN PLAN$="LIST"
22318 GOSUB CLEAR_EXPIRED ! [207836]-clear the expired fields
22320 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_1$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_1 ! [207836]-moved code to subroutine 
22325 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_2$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_2 ! [207836]-moved code to subroutine
22330 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_3$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_3 ! [207836]-moved code to subroutine
22332 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_4$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_4 ! [207836]-moved code to subroutine
22334 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_5$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_5 ! [207836]-moved code to subroutine
22336 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_6$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_6 ! [207836]-moved code to subroutine
22338 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_7$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_7 ! [207836]-moved code to subroutine
22340 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_8$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_8 ! [207836]-moved code to subroutine
22342 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_9$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_9 ! [207836]-moved code to subroutine
22344 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_10$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_10 ! [207836]-moved code to subroutine
22346 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_11$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_11 ! [207836]-moved code to subroutine
22348 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_12$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_12 ! [207836]-moved code to subroutine
22349 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_13$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_13 ! [207836]-moved code to subroutine
22350 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_14$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_14 ! [207836]-moved code to subroutine
22351 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_15$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_15 ! [207836]-moved code to subroutine
22352 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_16$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_16 ! [207836]-moved code to subroutine
22353 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_17$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_17 ! [207836]-moved code to subroutine REM SSP 210735
22354 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_18$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_18 ! [207836]-moved code to subroutine REM SSP 210735
22355 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_19$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_19 ! [207836]-moved code to subroutine REM SSP 210735
22356 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_20$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_20 ! [207836]-moved code to subroutine REM SSP 210735
22357 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_21$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_21 ! [207836]-moved code to subroutine REM SSP 210735
22358 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_22$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_22 ! [207836]-moved code to subroutine REM SSP 210735
22359 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_23$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_23 ! [207836]-moved code to subroutine REM SSP 210735
22360 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_24$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_24 ! [207836]-moved code to subroutine REM SSP 210735
22361 READ (Z[25],KEY=ITEM_CODE$+PRIORITY_25$,DOM=*NEXT)OS1$; GOSUB PRICE_GROUP_25 ! [207836]-moved code to subroutine REM SSP 210735
22380 REFRESH_FLG=1
22385 NEXT_ID=BUTTON_8
22390 RETURN 
30000 ! 10000 - Convert numeric values to string
30010 NUM_TO_STR:
30020 RETURN 
31000 ! 11000 - Convert numeric strings to number
31010 STR_TO_NUM:
31020 RETURN 
31030 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
31040 NEXT_ID=_X
31050 EXIT 
32000 ! 12000 - Check if the required fields have data
32010 CHECK_REQD_FLDS:
32020 _W_FLG=1
32030 RETURN 
33000 ! 13000 - Clear the record fields
33010 CLEAR_FIELDS:
33015 %PRICING_DESC$="",PLAN$="",PRICE$="",COST$="",LIST_PRICE$=""
33020 IF _CLR_FLG$="R" THEN CUST_DIV$=""
33030 IF _CLR_FLG$="R" THEN CUST_CODE$="",CUSTOMER$="" ! SSP#233218
33035 IF _CLR_FLG$="R" THEN ITEM_CODE$="" ! SSP#233218
33040 PRICE_TYPE$="",%FLIER_PRICE$=""
33050 OS6_UNUSED_1$=""
33060 PRIORITY_1$="",PRICE_1$="",COST_1$=""
33070 PRIORITY_2$="",PRICE_2$="",COST_2$=""
33080 PRIORITY_3$="",PRICE_3$="",COST_3$=""
33090 PRIORITY_4$="",PRICE_4$="",COST_4$=""
33100 PRIORITY_5$="",PRICE_5$="",COST_5$=""
33110 PRIORITY_6$="",PRICE_6$="",COST_6$=""
33120 PRIORITY_7$="",PRICE_7$="",COST_7$=""
33130 PRIORITY_8$="",PRICE_8$="",COST_8$=""
33140 PRIORITY_9$="",PRICE_9$="",COST_9$=""
33150 PRIORITY_10$="",PRICE_10$="",COST_10$=""
33160 PRIORITY_11$="",PRICE_11$="",COST_11$=""
33170 PRIORITY_12$="",PRICE_12$="",COST_12$=""
33175 PRIORITY_13$="",PRICE_13$="",COST_13$="",PRIORITY_14$="",PRICE_14$="",COST_14$="",PRIORITY_15$="",PRICE_15$="",COST_15$="",PRIORITY_16$="",PRICE_16$="",COST_16$="",PRIORITY_17$="",PRICE_17$="",COST_17$="",PRIORITY_18$="",PRICE_18$="",COST_18$="",PRIORITY_19$="",PRICE_19$="",COST_19$="",PRIORITY_20$="",PRICE_20$="",COST_20$="",PRIORITY_21$="",PRICE_21$="",COST_21$="",PRIORITY_22$="",PRICE_22$="",COST_22$="",PRIORITY_23$="",PRICE_23$="",COST_23$="",PRIORITY_24$="",PRICE_24$="",COST_24$="",PRIORITY_25$="",PRICE_25$="",COST_25$="" ! SSP#233218
33180 OS6_UNUSED_2$="",TF_COST$="" ! SSP#233218
33185 %SUPP_ITEM_NUM$=""; %OS_ITEM_DESC$="",BASE_PRICE$=""
33190 GOSUB CLEAR_EXPIRED ! [207836]
33191 GOSUB NUM_TO_STR
33200 REFRESH_FLG=1
33210 RETURN 
34000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
34010 ENABLE_GROUPS:
34020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
34030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUST_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
34040 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
34050 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
34060 RETURN 
35000 ! 15000 - Determine the changes that have been made before writing
35010 DETERMINE_CHGS:
35020 DIM _CHG_VAR$(17,"N")
35030 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
35040 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
35050 IF _ORIG.PRICE_TYPE$=_CUR.PRICE_TYPE$ OR PRICE_TYPE$=_CUR.PRICE_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.PRICE_TYPE$=PRICE_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("PRICE_TYPE")+" = "+_CUR.PRICE_TYPE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRICE_TYPE")+" = "+_CUR.PRICE_TYPE$
35060 IF _ORIG.OS6_UNUSED_1$=_CUR.OS6_UNUSED_1$ OR OS6_UNUSED_1$=_CUR.OS6_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.OS6_UNUSED_1$=OS6_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.OS6_UNUSED_1$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.OS6_UNUSED_1$
35070 IF _ORIG.PRIORITY_1$=_CUR.PRIORITY_1$ OR PRIORITY_1$=_CUR.PRIORITY_1$ THEN GOTO *NEXT ELSE IF _ORIG.PRIORITY_1$=PRIORITY_1$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_1$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_1$
35080 IF _ORIG.PRIORITY_2$=_CUR.PRIORITY_2$ OR PRIORITY_2$=_CUR.PRIORITY_2$ THEN GOTO *NEXT ELSE IF _ORIG.PRIORITY_2$=PRIORITY_2$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_2$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_2$
35090 IF _ORIG.PRIORITY_3$=_CUR.PRIORITY_3$ OR PRIORITY_3$=_CUR.PRIORITY_3$ THEN GOTO *NEXT ELSE IF _ORIG.PRIORITY_3$=PRIORITY_3$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_3$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_3$
35100 IF _ORIG.PRIORITY_4$=_CUR.PRIORITY_4$ OR PRIORITY_4$=_CUR.PRIORITY_4$ THEN GOTO *NEXT ELSE IF _ORIG.PRIORITY_4$=PRIORITY_4$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_4$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_4$
35110 IF _ORIG.PRIORITY_5$=_CUR.PRIORITY_5$ OR PRIORITY_5$=_CUR.PRIORITY_5$ THEN GOTO *NEXT ELSE IF _ORIG.PRIORITY_5$=PRIORITY_5$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_5$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_5$
35120 IF _ORIG.PRIORITY_6$=_CUR.PRIORITY_6$ OR PRIORITY_6$=_CUR.PRIORITY_6$ THEN GOTO *NEXT ELSE IF _ORIG.PRIORITY_6$=PRIORITY_6$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_6$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_6$
35130 IF _ORIG.PRIORITY_7$=_CUR.PRIORITY_7$ OR PRIORITY_7$=_CUR.PRIORITY_7$ THEN GOTO *NEXT ELSE IF _ORIG.PRIORITY_7$=PRIORITY_7$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_7$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_7$
35140 IF _ORIG.PRIORITY_8$=_CUR.PRIORITY_8$ OR PRIORITY_8$=_CUR.PRIORITY_8$ THEN GOTO *NEXT ELSE IF _ORIG.PRIORITY_8$=PRIORITY_8$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_8$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_8$
35150 IF _ORIG.PRIORITY_9$=_CUR.PRIORITY_9$ OR PRIORITY_9$=_CUR.PRIORITY_9$ THEN GOTO *NEXT ELSE IF _ORIG.PRIORITY_9$=PRIORITY_9$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_9$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_9$
35160 IF _ORIG.PRIORITY_10$=_CUR.PRIORITY_10$ OR PRIORITY_10$=_CUR.PRIORITY_10$ THEN GOTO *NEXT ELSE IF _ORIG.PRIORITY_10$=PRIORITY_10$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_10$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_10$
35170 IF _ORIG.PRIORITY_11$=_CUR.PRIORITY_11$ OR PRIORITY_11$=_CUR.PRIORITY_11$ THEN GOTO *NEXT ELSE IF _ORIG.PRIORITY_11$=PRIORITY_11$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_11$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_11$
35180 IF _ORIG.PRIORITY_12$=_CUR.PRIORITY_12$ OR PRIORITY_12$=_CUR.PRIORITY_12$ THEN GOTO *NEXT ELSE IF _ORIG.PRIORITY_12$=PRIORITY_12$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_12$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIORITY")+" = "+_CUR.PRIORITY_12$
35190 IF _ORIG.OS6_UNUSED_2$=_CUR.OS6_UNUSED_2$ OR OS6_UNUSED_2$=_CUR.OS6_UNUSED_2$ THEN GOTO *NEXT ELSE IF _ORIG.OS6_UNUSED_2$=OS6_UNUSED_2$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.OS6_UNUSED_2$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.OS6_UNUSED_2$
35200 RETURN 
36000 ! 16000 - Incorporate changes made by another user into the record
36010 INCORPORATE_CHGS:
36020 IF _CHG_VAR$(1,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
36030 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
36040 IF _CHG_VAR$(3,1)="Y" THEN PRICE_TYPE$=_CUR.PRICE_TYPE$
36050 IF _CHG_VAR$(4,1)="Y" THEN OS6_UNUSED_1$=_CUR.OS6_UNUSED_1$
36060 IF _CHG_VAR$(5,1)="Y" THEN PRIORITY_1$=_CUR.PRIORITY_1$
36070 IF _CHG_VAR$(6,1)="Y" THEN PRIORITY_2$=_CUR.PRIORITY_2$
36080 IF _CHG_VAR$(7,1)="Y" THEN PRIORITY_3$=_CUR.PRIORITY_3$
36090 IF _CHG_VAR$(8,1)="Y" THEN PRIORITY_4$=_CUR.PRIORITY_4$
36100 IF _CHG_VAR$(9,1)="Y" THEN PRIORITY_5$=_CUR.PRIORITY_5$
36110 IF _CHG_VAR$(10,1)="Y" THEN PRIORITY_6$=_CUR.PRIORITY_6$
36120 IF _CHG_VAR$(11,1)="Y" THEN PRIORITY_7$=_CUR.PRIORITY_7$
36130 IF _CHG_VAR$(12,1)="Y" THEN PRIORITY_8$=_CUR.PRIORITY_8$
36140 IF _CHG_VAR$(13,1)="Y" THEN PRIORITY_9$=_CUR.PRIORITY_9$
36150 IF _CHG_VAR$(14,1)="Y" THEN PRIORITY_10$=_CUR.PRIORITY_10$
36160 IF _CHG_VAR$(15,1)="Y" THEN PRIORITY_11$=_CUR.PRIORITY_11$
36170 IF _CHG_VAR$(16,1)="Y" THEN PRIORITY_12$=_CUR.PRIORITY_12$
36180 IF _CHG_VAR$(17,1)="Y" THEN OS6_UNUSED_2$=_CUR.OS6_UNUSED_2$
36190 RETURN 
40000 PRICE_GROUP_1:! [207836]-added routine (lines 40000-40045)
40002 REM "Moved the setting of the price and cost to this routine to be
40004 REM "able to add the code for expired prices
40010 PRICE_1$=OS1$(47,10)
40020 COST_1$=OS1$(57,10)
40030 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_1$="*EXP*"
40045 RETURN 
40050 PRICE_GROUP_2:! [207836]-added routine (lines 40000-40045)
40052 REM "Moved the setting of the price and cost to this routine to be
40054 REM "able to add the code for expired prices
40060 PRICE_2$=OS1$(47,10)
40070 COST_2$=OS1$(57,10)
40080 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_2$="*EXP*"
40095 RETURN 
40100 PRICE_GROUP_3:! [207836]-added routine (lines 40000-40045)
40102 REM "Moved the setting of the price and cost to this routine to be
40104 REM "able to add the code for expired prices
40110 PRICE_3$=OS1$(47,10)
40120 COST_3$=OS1$(57,10)
40130 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_3$="*EXP*"
40145 RETURN 
40150 PRICE_GROUP_4:! [207836]-added routine (lines 40000-40045)
40152 REM "Moved the setting of the price and cost to this routine to be
40154 REM "able to add the code for expired prices
40160 PRICE_4$=OS1$(47,10)
40170 COST_4$=OS1$(57,10)
40180 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_4$="*EXP*"
40195 RETURN 
40200 PRICE_GROUP_5:! [207836]-added routine (lines 40000-40045)
40202 REM "Moved the setting of the price and cost to this routine to be
40204 REM "able to add the code for expired prices
40210 PRICE_5$=OS1$(47,10)
40220 COST_5$=OS1$(57,10)
40230 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_5$="*EXP*"
40245 RETURN 
40250 PRICE_GROUP_6:! [207836]-added routine (lines 40000-40045)
40252 REM "Moved the setting of the price and cost to this routine to be
40254 REM "able to add the code for expired prices
40260 PRICE_6$=OS1$(47,10)
40270 COST_6$=OS1$(57,10)
40280 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_6$="*EXP*"
40295 RETURN 
40300 PRICE_GROUP_7:! [207836]-added routine (lines 40000-40045)
40302 REM "Moved the setting of the price and cost to this routine to be
40304 REM "able to add the code for expired prices
40310 PRICE_7$=OS1$(47,10)
40320 COST_7$=OS1$(57,10)
40330 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_7$="*EXP*"
40345 RETURN 
40350 PRICE_GROUP_8:! [207836]-added routine (lines 40000-40045)
40352 REM "Moved the setting of the price and cost to this routine to be
40354 REM "able to add the code for expired prices
40360 PRICE_8$=OS1$(47,10)
40370 COST_8$=OS1$(57,10)
40380 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_8$="*EXP*"
40395 RETURN 
40400 PRICE_GROUP_9:! [207836]-added routine (lines 40000-40045)
40402 REM "Moved the setting of the price and cost to this routine to be
40404 REM "able to add the code for expired prices
40410 PRICE_9$=OS1$(47,10)
40420 COST_9$=OS1$(57,10)
40430 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_9$="*EXP*"
40445 RETURN 
40450 PRICE_GROUP_10:! [207836]-added routine (lines 40000-40045)
40452 REM "Moved the setting of the price and cost to this routine to be
40454 REM "able to add the code for expired prices
40460 PRICE_10$=OS1$(47,10)
40470 COST_10$=OS1$(57,10)
40480 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_10$="*EXP*"
40495 RETURN 
40500 PRICE_GROUP_11:! [207836]-added routine (lines 40000-40045)
40502 REM "Moved the setting of the price and cost to this routine to be
40504 REM "able to add the code for expired prices
40510 PRICE_11$=OS1$(47,10)
40520 COST_11$=OS1$(57,10)
40530 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_11$="*EXP*"
40545 RETURN 
40550 PRICE_GROUP_12:! [207836]-added routine (lines 40000-40045)
40552 REM "Moved the setting of the price and cost to this routine to be
40554 REM "able to add the code for expired prices
40560 PRICE_12$=OS1$(47,10)
40570 COST_12$=OS1$(57,10)
40580 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_12$="*EXP*"
40595 RETURN 
40600 PRICE_GROUP_13:! [207836]-added routine (lines 40000-40045)
40602 REM "Moved the setting of the price and cost to this routine to be
40604 REM "able to add the code for expired prices
40610 PRICE_13$=OS1$(47,10)
40620 COST_13$=OS1$(57,10)
40630 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_13$="*EXP*"
40645 RETURN 
40650 PRICE_GROUP_14:! [207836]-added routine (lines 40000-40045)
40652 REM "Moved the setting of the price and cost to this routine to be
40654 REM "able to add the code for expired prices
40660 PRICE_14$=OS1$(47,10)
40670 COST_14$=OS1$(57,10)
40680 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_14$="*EXP*"
40695 RETURN 
40700 PRICE_GROUP_15:! [207836]-added routine (lines 40000-40045)
40702 REM "Moved the setting of the price and cost to this routine to be
40704 REM "able to add the code for expired prices
40710 PRICE_15$=OS1$(47,10)
40720 COST_15$=OS1$(57,10)
40730 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_15$="*EXP*"
40745 RETURN 
40750 PRICE_GROUP_16:! [207836]-added routine (lines 40000-40045)
40752 REM "Moved the setting of the price and cost to this routine to be
40754 REM "able to add the code for expired prices
40760 PRICE_16$=OS1$(47,10)
40770 COST_16$=OS1$(57,10)
40780 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_16$="*EXP*"
40795 RETURN 
40800 PRICE_GROUP_17:! [207836]-added routine (lines 40000-40045)
40802 REM "Moved the setting of the price and cost to this routine to be
40804 REM "able to add the code for expired prices
40810 PRICE_17$=OS1$(47,10)
40820 COST_17$=OS1$(57,10)
40830 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_17$="*EXP*"
40845 RETURN 
40850 PRICE_GROUP_18:! [207836]-added routine (lines 40000-40045)
40852 REM "Moved the setting of the price and cost to this routine to be
40854 REM "able to add the code for expired prices
40860 PRICE_18$=OS1$(47,10)
40870 COST_18$=OS1$(57,10)
40880 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_18$="*EXP*"
40895 RETURN 
40900 PRICE_GROUP_19:! [207836]-added routine (lines 40000-40045)
40902 REM "Moved the setting of the price and cost to this routine to be
40904 REM "able to add the code for expired prices
40910 PRICE_19$=OS1$(47,10)
40920 COST_19$=OS1$(57,10)
40930 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_19$="*EXP*"
40945 RETURN 
40950 PRICE_GROUP_20:! [207836]-added routine (lines 40000-40045)
40952 REM "Moved the setting of the price and cost to this routine to be
40954 REM "able to add the code for expired prices
40960 PRICE_20$=OS1$(47,10)
40970 COST_20$=OS1$(57,10)
40980 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_20$="*EXP*"
40995 RETURN 
41000 PRICE_GROUP_21:! [207836]-added routine (lines 40000-40045)
41002 REM "Moved the setting of the price and cost to this routine to be
41004 REM "able to add the code for expired prices
41010 PRICE_21$=OS1$(47,10)
41020 COST_21$=OS1$(57,10)
41030 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_21$="*EXP*"
41045 RETURN 
41050 PRICE_GROUP_22:! [207836]-added routine (lines 40000-40045)
41052 REM "Moved the setting of the price and cost to this routine to be
41054 REM "able to add the code for expired prices
41060 PRICE_22$=OS1$(47,10)
41070 COST_22$=OS1$(57,10)
41080 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_22$="*EXP*"
41095 RETURN 
41100 PRICE_GROUP_23:! [207836]-added routine (lines 40000-40045)
41102 REM "Moved the setting of the price and cost to this routine to be
41104 REM "able to add the code for expired prices
41110 PRICE_23$=OS1$(47,10)
41120 COST_23$=OS1$(57,10)
41130 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_23$="*EXP*"
41145 RETURN 
41150 PRICE_GROUP_24:! [207836]-added routine (lines 40000-40045)
41152 REM "Moved the setting of the price and cost to this routine to be
41154 REM "able to add the code for expired prices
41160 PRICE_24$=OS1$(47,10)
41170 COST_24$=OS1$(57,10)
41180 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_24$="*EXP*"
41195 RETURN 
41200 PRICE_GROUP_25:! [207836]-added routine (lines 40000-40045)
41202 REM "Moved the setting of the price and cost to this routine to be
41204 REM "able to add the code for expired prices
41210 PRICE_25$=OS1$(47,10)
41220 COST_25$=OS1$(57,10)
41230 IF OS1$(31,6)<X3$(21,6) THEN EXPIRED_25$="*EXP*"
41245 RETURN 
42000 CLEAR_EXPIRED:! [207836]-added routine (lines 42000-42095)
42010 EXPIRED_1$=""
42012 EXPIRED_2$=""
42014 EXPIRED_3$=""
42016 EXPIRED_4$=""
42018 EXPIRED_5$=""
42020 EXPIRED_6$=""
42022 EXPIRED_7$=""
42024 EXPIRED_8$=""
42026 EXPIRED_9$=""
42028 EXPIRED_10$=""
42030 EXPIRED_11$=""
42032 EXPIRED_12$=""
42034 EXPIRED_13$=""
42036 EXPIRED_14$=""
42038 EXPIRED_15$=""
42040 EXPIRED_16$=""
42042 EXPIRED_17$=""
42044 EXPIRED_18$=""
42046 EXPIRED_19$=""
42048 EXPIRED_20$=""
42050 EXPIRED_21$=""
42052 EXPIRED_22$=""
42054 EXPIRED_23$=""
42056 EXPIRED_24$=""
42058 EXPIRED_25$=""
42095 RETURN 
56000 REM "198283-program exception in TOPS price check
56001 REM "210735-Tops Update Price Plan Priorities (OSGUTL) was not changed
56002 REM "215256-TOPS issues because of variable name changes with Oracle
56004 REM "207836-TOPS in GUI doesn't show EXP beside expired prices in the
56005 REM "220569-Request for change to TOPS pricing to make maintenance of      
56006 REM "219413-On a Tops Price Check, if you back up and change customers,    
56007 REM "233218-GUI issue with the Price Check Panel                        
