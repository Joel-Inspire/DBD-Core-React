0010 REM "Download United Stationers/SPR Data File <OS2ZAA>
0015 REM "Prog Type: IP-2.9
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 11/04/09 - 8.403333 - tma - SSP# 233835
0037 REM "233835-Office supply screen O/S-P5 isn't displaying properly       
0040 REM "Copyright 2009 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000; SETESC 9300
0200 GOSUB SETUP; IF X1>0 THEN GOTO 9920
0210 IF RESULT$<>"Y" THEN CALL "ZZPROM",".4",X3$,Z,"ACCESS DENIED! The Office Supply Interface System is not an installed module.","","",0; RUN "ZMENU"
0220 IF Z0>0 THEN GOTO 9900
0299 REM "WINCHECK=TCB(88); IF WINCHECK=0 THEN CALL "ZZPROM",".4",X3$,Z,"ACCESS DENIED! This Program Can only be run using WindX.","","",0; RUN "ZMENU"
0300 REM "IOLISTS
0310 IOLIST A$(1),A[0],A[1]
0320 IOLIST B$,B[0],B[1]
0330 IOLIST C$,C[0],C[1]
0340 IOLIST D$,D[0],D[1]
0350 IOLIST E$,E[0],E[1]
0600 REM "
0680 GOSUB 6000
0701 REM "SETERR 9000
1000 REM "
1010 GOSUB GET_DEFAULT
1015 REM "DIM V7$(10); V7$(1,1)="1",V7$(5,1)="1",V7$(6,1)="1"
1060 PRINT (0,ERR=1070)'CF',; GOSUB 6450; GOTO 1100
1070 GOSUB 6000; GOSUB 6450
1100 REM "KEY SEQ
1110 X0=-1,C0=0,X1=0,C9=0,Z9=0
1120 SETERR 9000; C0=ABS(C0),X$=""; IF C0=2 AND X0>0 THEN X0=X0-1 ELSE IF C0<>2 THEN X0=X0+1; IF C0=4 THEN GOTO 9900
1140 ON X0 GOTO 1500
1200 REM "
1215 IF C0<0 THEN ON INT(ABS(C0)-2) GOTO 1210,6800,9800,6970
1500 REM "
1505 Z9=-1,C9=0,A2$="",A3$="",A4$="",A5$=""
1510 A1$=K9$
1520 READ (Z[1],ERR=7200,KEY=A1$,DOM=1600)IOL=0310
1521 REM "$="" THEN REMOVE (Z[1],KEY=X3$(9,3)+A1$,DOM=1600); GOTO 1600; REM "IF Z(5 IS EMPTY (F1$="") THEN WE SHOULD NOT HAVE PARAM RECORD, REMOVE IT AND GOTO 1600 AS IF IT WAS NOT HERE
1522 REM "IF POS(" "<>S9$(8,24))>0 AND POS(A$(10,4)=S9$(8,24),4)=0 THEN GOSUB 8040; GOTO 6500
1525 Z9=0; REM ",V7$=""; GOSUB 5800
1590 GOTO 1700
1600 REM "
1620 CALL "ZZPROM","2",X3$,Z,"","","",0; ON Z GOTO 1650,9900
1630 GOTO 9900
1660 IF V9>=0 THEN GOSUB 6200
1680 GOSUB 7450
1690 GOTO 2000
1700 REM "
1790 GOSUB 6200
1795 REM "GOSUB 8000
1800 REM "
1805 REM "GOTO 6710
1810 IF V9=-2 THEN IF ABS(C0)=4 THEN PRINT 'CF',; GOTO 6980 ELSE GOTO 2000
1820 CALL "ZZPROM","X0OS2ZAA",X3$,Z,"","","V",X0
1822 IF Z=3 THEN GOTO 9900
1824 IF Z=0 THEN WRITE (Z[1],KEY=A1$)IOL=0310; GOTO 9900; REM " F10 TO START DOWNLOAD...RUN OTHER PROGRAM
1825 IF Z=2 THEN GOTO 6700
1826 IF Z=6 THEN GOTO 6500
1830 GOTO 2000
1850 REM "MODIFY
1855 X0=X0-1; IF Z9=1 THEN GOTO 1880 ELSE IF Z9=0 THEN Z9=1
1860 GOSUB 7400
1870 GOSUB 6200
1890 IF Z<0 THEN GOTO 2035 ELSE GOTO 2000
2000 REM "DATA SEQ
2010 C0=0,X0=-1,X1=1
2020 SETERR 9000; X$="",Q$="",C0=ABS(C0),X0=X0+1; IF C0=2 THEN IF X0>0 THEN X0=X0-2
2025 IF INT(C0)=3 THEN GOSUB 7300 ELSE IF C0>3 OR X0<0 THEN GOTO 1800
2035 IF V9<>-2 THEN IF 6*(X0+K1)+5<LEN(V9$) THEN IF V9$((X0+K1)*6+5,1)="3" THEN GOTO 2020 ELSE IF V9$((X0+K1)*6+5,1)="2" AND C0<>2 THEN GOTO 2020
2038 IF X0<LEN(V7$) THEN V7$(X0+1,1)=""
2040 IF POS(VDCDE$="SC")<>0 THEN GOTO 2042 ELSE ON X0 GOTO 2200,2500,2550,2300,2350,2400,2450,1800
2042 ON X0 GOTO 2200,2600,2650,2500,2550,2300,2350,2400,2450,1800
2100 REM "List to process
2110 CALL "ZZENTR","SUZX",A{ALL},A$,X4$,X3$,29,4,10,4,C0,"","{3"+X$,"","ZP2ZAA00","ZP0","ZP2MAA",""; IF C0=6 THEN GOSUB 6400; C0=1
2115 IF POS(" "<>S9$(8,24))>0 AND POS(A$(10,4)=S9$(8,24),4)=0 THEN GOTO 2110
2120 IF V9<>-2 THEN FIND (Z[2],KEY=A$(10,4),DOM=2110)IOL=0320
2125 PRINT @(35,4),B$(5,40),
2140 GOTO 2020
2150 REM "Minimum follow-up date
2160 CALL "ZZENTR","D^",A{ALL},A$,X4$,X3$,64,6,14,6,C0,"","{3"+X$,"","ZP2ZAA02","","",""
2190 GOTO 2020
2200 REM "Import all price plans?
2210 CALL "ZZENTR","Y",A{ALL},A$,X4$,X3$,30,4,7,1,C0,"","{3"+X$,"","ZP2ZAA04","","",""
2211 IF A$(7,1)="Y" THEN A$(48,72)=DIM(72); PRINT @(29,7),'CL',@(29,8),'CL',
2240 GOTO 2020
2250 REM "SIC code or all
2260 CALL "ZZENTR","SZ^",A{ALL},A$,X4$,X3$,64,8,36,5,C0,"","{3"+X$,"","ZP2ZAA06","","",""
2290 GOTO 2020
2300 REM "IMPORT FILE NAME
2310 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,19,10+V0,388,60,C0,"","{3"+X$,J$,"IC2MAD12","","",""
2340 GOTO 2020
2350 REM "Default Product Code
2360 CALL "ZZENTR","SZU",A{ALL},A$,X4$,X3$,30,12,9,3,C0,"","{3"+X$,"T","IC2MAB04","FMPP","FM2SAA",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 2360,2361
2370 FIND (Z[2],KEY="T"+A$(9,3),DOM=2360)IOL=0320
2380 PRINT @(35,12),"Product code: ",A$(9,3)," - ",B$(5,15),
2390 GOTO 2020
2400 REM "CLEAR ITEMS?
2410 CALL "ZZENTR","Y",A{ALL},A$,X4$,X3$,55,13,12,1,C0,"","{3"+X$,"","ZP2ZAA04","","",""
2440 GOTO 2020
2450 REM "CLEAR PRICES/COSTS
2460 CALL "ZZENTR","Y",A{ALL},A$,X4$,X3$,55,14,13,1,C0,"","{3"+X$,"","ZP2ZAA04","","",""
2490 GOTO 2020
2500 REM "Price Plans to include
2501 IF A$(7,1)="Y" THEN GOTO 2540
2505 X$="Enter the United Price Plan"
2510 CALL "ZZENTR","SZXUX",A{ALL},A$,X4$,X3$,29,7,48,3,C0,"","{3"+X$,"","ZP2ZAA16","","","11H1"; REM SSP 222704
2540 GOTO 2020
2550 REM "Price Plans to exclude
2551 IF A$(7,1)="Y" THEN GOTO 2590
2555 X$="Enter the United Price Plan"
2560 CALL "ZZENTR","SZXUX",A{ALL},A$,X4$,X3$,29,8,84,3,C0,"","{3"+X$,"","ZP2ZAA18","","","11H1"; REM SSP 222704
2590 GOTO 2020
2600 REM "Plan Start Date (SPR only)
2610 CALL "ZZENTR","D",A{ALL},A$,X4$,X3$,50,4,120,6,C0,"","{3"+X$,"czlCZL","ZP2ZAA20","","",""
2640 GOTO 2020
2650 REM "Plan End Date (SPR Only)
2660 CALL "ZZENTR","D",A{ALL},A$,X4$,X3$,70,4,126,6,C0,"","{3"+X$,"","ZP2ZAA01","","",""
2690 GOTO 2020
2700 REM "Consumer plan to use for flyer
2705 IF A$(122,1)<>"Y" THEN A$(124,1)=" "; PRINT @(67,14+V0),'CL',; GOTO 2740
2710 CALL "ZZENTR","SRU",A{ALL},A$,X4$,X3$,67,14+V0,124,1,C0,"","{3"+X$,"1234","OS2SAA04","","",""
2740 GOTO 2020
2750 REM "Flag as Catalog
2760 CALL "ZZENTR","Y",A{ALL},A$,X4$,X3$,39,16,125,1,C0,"","{3"+X$,"","ZP2ZAA58","","",""
2790 GOTO 2020
2800 REM "Consumer plan to use for matrix
2805 IF A$(123,1)<>"Y" THEN A$(126,1)=" "; PRINT @(67,15+V0),'CL',; GOTO 2840
2810 CALL "ZZENTR","SRU",A{ALL},A$,X4$,X3$,67,15+V0,126,1,C0,"","{3"+X$,"1234","OS2SAA04","","",""
2840 GOTO 2020
2850 REM "Consumer plan to use for CATALOG                                        
2855 IF A$(125,1)<>"Y" THEN A$(127,1)=" "; PRINT @(67,16+V0),'CL',; GOTO 2890
2860 CALL "ZZENTR","SRU",A{ALL},A$,X4$,X3$,67,16+V0,127,1,C0,"","{3"+X$,"1234","OS2SAA04","","",""
2890 GOTO 2020
2900 REM "Download United Stationers Data File <OS2ZAA>
2905 IF POS(" "<>A$(175,6))=0 THEN A$(181,6)=""; PRINT @(33,16),A$(175,10); GOTO 2020
2910 CALL "ZZENTR","D",A{ALL},A$,X4$,X3$,33,16,181,6,C0,"","{3"+X$,"","ZP2ZAA64","","",""
2940 GOTO 2020
3000 REM "FROM LAST CONTACT DATE
3010 CALL "ZZENTR","D^",A{ALL},A$,X4$,X3$,20,17,187,6,C0,"","{3"+X$,"","ZP2ZAA66","","",""
3040 GOTO 2020
3050 REM "TO LAST CONTACT DATE
3055 IF POS(" "<>A$(187,6))=0 THEN A$(193,6)=""; PRINT @(33,17),A$(187,10); GOTO 2020
3060 CALL "ZZENTR","D",A{ALL},A$,X4$,X3$,33,17,193,6,C0,"","{3"+X$,"","ZP2ZAA68","","",""
3090 GOTO 2020
3100 REM "TO BAROMETER LEVEL
3105 IF POS(" "<>A$(47,1))=0 THEN A$(199,1)=""; PRINT @(33,18),A$(47,1); GOTO 2020
3110 CALL "ZZENTR","Z",A{ALL},A$,X4$,X3$,33,18,199,1,C0,"","{3"+X$,"","ZP2ZAA70","","",""
3140 GOTO 2020
3200 REM "Restrict to T/M Category Set
3210 CALL "ZZENTR","SZU",A{ALL},A$,X4$,X3$,70,17,200,2,C0,"","{3"+X$,"","ZP2ZAA40","","",""
3240 GOTO 2020
3250 REM "Restrict to State Set
3260 CALL "ZZENTR","SZU",A{ALL},A$,X4$,X3$,70,18,202,2,C0,"","{3"+X$,"","ZP2ZAA42","","",""
3290 GOTO 2020
5800 REM "Alt sort keys
5890 RETURN 
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6016)'SB',
6062 PRINT @(5,4),"Import All Price Plans?",
6063 IF POS(VDCDE$="SC")<>0 THEN PRINT @(34,4),"Plan Start Date: ",@(61,4),"End Date:"
6064 PRINT @(0,5),Z0$(1,80),
6068 PRINT @(0,9),Z0$(1,80),
6165 PRINT @(5,7),"Price Plans to Include:",
6167 PRINT @(5,8),"Price Plans to Include:",
6170 PRINT @(0,10),"Import File Name:",
6171 PRINT @(7,12),"Default Product Code:",
6172 PRINT @(1,13),"Clear All Items From Parallel File before Proceeding?",
6173 PRINT @(11,14),"Clear All Non-Contract Cost/Price Records?",
6174 REM "PRINT @(17,14),"Flag as Flyer Prices?",@(44,14),"Consumer Price to Use:",
6177 REM "PRINT @(16,15),"Flag as Matrix Prices?",@(44,15),"Consumer Price to Use:",
6179 REM "PRINT @(15,16),"Flag as Catalog Prices?",@(44,16),"Consumer Price to Use:",
6190 RETURN 
6195 PRINT (0,ERR=6166)'SF',
6200 REM "DISPLAY DATA
6215 GOSUB 6450
6240 PRINT @(30,4),A$(7,1),
6260 PRINT @(29,7),A$(48,3),@(33,7),A$(51,3),@(37,7),A$(54,3),@(41,7),A$(57,3),@(45,7),A$(60,3),@(49,7),A$(63,3),@(53,7),A$(66,3),@(57,7),A$(69,3),@(61,7),A$(72,3),@(65,7),A$(75,3),@(69,7),A$(78,3),@(73,7),A$(81,3),
6261 PRINT @(55,13),A$(12,1),@(55,14),A$(13,1),
6270 PRINT @(29,8),A$(84,3),@(33,8),A$(87,3),@(37,8),A$(90,3),@(41,8),A$(93,3),@(45,8),A$(96,3),@(49,8),A$(99,3),@(53,8),A$(102,3),@(57,8),A$(105,3),@(61,8),A$(108,3),@(65,8),A$(111,3),@(69,8),A$(114,3),@(73,8),A$(117,3),
6272 IF POS(VDCDE$="SC")=0 THEN GOTO 6280
6274 CALL "ZZDISP","D",A$(120,6),"",X3$,"","",50,4,X4$
6276 CALL "ZZDISP","D",A$(126,6),"",X3$,"","",70,4,X4$
6280 PRINT @(30,12),A$(9,3),
6281 REM "PRINT @(39,13),A$(22,1),
6282 FIND (Z[2],KEY="T"+A$(9,3),DOM=6283)IOL=0320
6284 PRINT @(35,12),"Product code: ",A$(9,3)," - ",B$(5,15),
6286 REM "PRINT @(39,14),A$(122,1),@(39,15),A$(123,1),
6288 REM "PRINT @(67,15),A$(126,1),@(39,16),A$(125,1),@(67,14),A$(124,1),@(67,16),A$(127,1),
6289 PRINT @(19,10+V0),A$(388,60),
6390 RETURN 
6400 REM "WHOLE SCREEN
6402 IF C9=0 THEN IF ABS(C0)=17 THEN GOTO 6970
6405 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,0
6420 GOSUB 6000
6430 IF C9>0 THEN GOSUB 6200 ELSE GOSUB 6450
6440 IF ABS(C0)>4 THEN C0=ABS(C0)-5
6445 RETURN 
6450 REM "DISPLAY KEYS
6455 IF C9<0 THEN GOTO 6445
6490 RETURN 
6500 REM "DELETE
6510 REMOVE (Z[1],KEY=A1$,DOM=6511)
6511 A$=""
6590 GOTO 1000
6591 REM "GOTO 1630
6600 REM "ALT KEY DATA READS
6690 RETURN 
6700 REM "ADD ENTRY                      
6705 REM "IF Z9=0 THEN GOTO 6790
6710 WRITE (Z[1],KEY=A1$)IOL=0310
6740 Z=0
6750 REM "GOTO 7500
6790 GOTO 1800
6791 REM "GOTO 1630
6800 REM "NEXT ENTRY IN FILE
6805 ON 10*FPT(C0)+2 GOTO 6850,6806
6810 A1$=KEY(Z[1],END=6895)
6820 IF A1$="" THEN GOTO 6800 ELSE IF A1$(1,LEN(K9$))<>K9$ THEN GOTO 6895
6825 A$(1,LEN(A1$))=A1$
6830 GOSUB 6600
6835 GOSUB 6450
6840 GOTO 1515
6850 REM "PRIOR ENTRY
6855 CALL "ZZKEYP",ERR=6856,Z[1],A1$; GOTO 6820
6860 PRINT 'RB',; CALL "ZZKEYL",ERR=6861,Z[1],A1$; GOTO 6820
6865 GOTO 1100
6870 GOTO 6895
6890 GOTO 1515
6895 IF A1$="" THEN GOTO 6860 ELSE PRINT 'RB',; READ (Z[1],KEY=K9$,DOM=6896)
6898 ON S9 GOTO 6810,1100
6900 REM "GET DEFAULTS
6902 V9$="2904  6406  2908  6408  2909  2910  2911  6411  2913  2914  "
6910 IF V9>=0 THEN READ (Z[13],IND=V9)V9$,IOL=0310; GOTO 6930 ELSE V9=-1
6920 EXTRACT (Z[13],KEY=X0$+"DFLT",DOM=6921)V9$,IOL=0310; V9=IND(Z[13]); READ (Z[13])
6930 RETURN 
6940 V9=-1; REMOVE (Z[13],KEY=X0$+"DFLT",DOM=1000); GOTO 1000
6950 REM "WRITE DEFAULT
6955 WRITE (Z[13],KEY=X0$+"DFLT")V9$,IOL=0310
6960 GOSUB 6920; GOTO 1630
6970 REM "ENTER DEFAULT VALUES AND SETTINGS
6975 A$(1,K0+K9)=""; GOSUB 6200; V9=-2,Q$=""; GOTO 2000
6980 FOR X=1+K1*6 TO LEN(V9$) STEP 6
6990 IF Q$="+" THEN EXITTO 6950 ELSE IF Q$="-" THEN GOTO 6940 ELSE IF Q$<>$0D$ THEN V9$(X+4,LEN(Q$))=Q$
6992 NEXT X
6995 V9=0; GOTO 6980
7200 REM "Forced read
7210 IF ERR<>0 THEN GOTO 9000
7220 CALL "ZZREAD",Z[1],A1$,A$,A{ALL},S8; ON S8 GOTO 7221,1630
7230 GOSUB 6200
7240 CALL "ZZPROM","E0",X3$,0,"","","",0; GOTO 7290
7250 REM "CALL "ZZPROM","E0A",X3$,0,"","","",0; GOTO 7290
7290 GOTO 1630
7300 REM 
7310 ON FPT(C0)*10 GOTO 7390,7325,7330,7390
7325 IF V8$="" THEN X0=X0+4; GOTO 7390 ELSE X0=NUM(V8$(POS(STR(X0:"00")<=V8$,2),2)); GOTO 7390
7330 IF V8$="" THEN X0=X0-6; GOTO 7335 ELSE X0=POS(STR(X0-1:"00")<=V8$,2)-2; IF X0<0 THEN X0=0; GOTO 7390 ELSE X0=NUM(V8$(X0,2)); GOTO 7390
7335 IF X0<0 THEN X0=0; GOTO 7390
7390 IF X0>0 THEN X0=X0-0
7395 C0=3; RETURN 
7400 REM "EXTRACT
7410 EXTRACT (Z[1],ERR=7200,KEY=A1$,DOM=7440)IOL=0310
7420 C9=1,Z9=1; GOSUB 5800
7440 RETURN 
7450 REM "EXTRACT NEW ENTRY
7460 WRITE (Z[1],KEY=A1$)IOL=0310; GOTO 7400
7490 RETURN 
7495 CALL "ZZPROM",".4",X3$,0,"","","",0; PRINT @(0,19),'CL',
7500 REM "BUILD ZPC"
7510 SETESC 9300
7515 IF A$(10,4)="    " THEN GOTO 1000
7520 CALL "ZZPROM","X1ZP2ZAA",X3$,S3,"","","",0; ON S3 GOTO 7521,7560,9900,7700,2000,9900
7530 REM "CLEAR FILE
7540 GOSUB 8000
7550 GOTO 7500
7560 REM "ADD TO FILE"
7562 SETESC 7495
7565 V$=A$(10,4)+S$(1,67)+A$(14); DIM V[1]
7567 GOSUB 8200
7570 PRINT @(10,22),'CL',"Press the 'Esc' key just once to interrupt",
7576 PRINT @(0,19),'CL',@(25,19),0:M1$,"    matches out of ",
7580 READ (Z[6],KEY=V$(1,4),DOM=7581)
7600 READ (Z[6],END=7690)IOL=0350
7620 IF E$(1,4)<>V$(1,4) THEN GOTO 7690
7630 ! CONTACT SELECTION MODULE <ZP2SZA>
7640 CALL "ZP2SZA",X3$,E$,E{ALL},V$,A{ALL},S0$,S1$,X9
7650 V[0]=V[0]+1
7655 PRINT @(50,19),V[0]:M1$,
7660 IF X9<1 THEN GOTO 7600
7670 V[1]=V[1]+1
7675 PRINT @(25,19),V[1]:M1$,
7678 DIM K5$(35); K5$(1,5)=A$(10,4)+A$(120,1),K5$(30,6)=E$(5,6)
7680 IF POS(A$(120,1)="zZ")>0 THEN K5$(10,9)=E$(129,9); IF Q1$="Y" THEN K5$(15,15)=UCS(E$(419,15)); REM "If specialty, then add uppercased lookup as part of the key
7682 IF POS(A$(120,1)="lL")>0 THEN K5$(10,20)=E$(419,20)
7683 IF A$(120,1)>="a" AND A$(120,1)<="z" THEN K5$(6,4)=E$(359,4)
7684 WRITE (_ZPC,KEY=K5$); F1$=K5$
7685 GOTO 7600
7695 GOTO 7495
7700 REM "DISPLAY FILE"
7720 GOSUB 7825; READ (_ZPC,KEY="",DOM=7721)
7730 K5$=KEY(_ZPC,END=7790); READ (_ZPC)
7740 READ (Z[6],KEY=K5$(1,4)+K5$(30,6),DOM=7730)IOL=0350
7750 IF X9>20 THEN GOTO 7800
7760 PRINT K5$,"-",E$(11,40)," ",E$(127,2)
7770 X9=X9+1
7780 GOTO 7730
7790 CALL "ZZPROM",".4",X3$,0,"End of display","","",0
7795 C9=1; GOSUB 6400; GOTO 7500
7800 REM 
7805 CALL "ZZPROM","5",X3$,Z,"","","",0; IF Z=1 THEN GOTO 7795
7820 GOSUB 7825; GOTO 7750
7825 PRINT 'CS',@(20,0),A$(121,40),'LF'; X9=1
7830 RETURN 
7900 REM "Check Sequence"
7920 IF F1$="" THEN GOTO 7990
7960 A$(120,1)=F1$(5,1); GOSUB 6280
7980 CALL "ZZPROM",".4",X3$,0,"List Profile Sequence can only be set when file is clear","","",0
7990 RETURN 
8000 REM "CLEAR
8010 IF F1$="" THEN GOTO 8050
8020 CALL "ZZPROM",".Y",X3$,S3,"Clear existing list profile?","","",0; ON S3 GOTO 8021,8090
8040 CALL "ZZINIT",STR(_ZPC:"00"); F1$=""
8050 CALL "ZZPROM",".4",X3$,S3,"List Profile is clear!","","",0
8090 RETURN 
8200 REM "Get set records
8210 S0$=""; FIND (Z[7],KEY="eT"+A$(200,2),DOM=8211)S0$
8220 S1$=""; FIND (Z[7],KEY="eS"+A$(202,2),DOM=8221)S1$
8245 RETURN 
9000 REM "ERROR PROCESSING
9010 Y5=ERR,Y6=TCB(5); IF Y5=68 OR Y5=69 THEN GOTO 9500
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9120 ON Y8 GOTO 9900,0990,9920
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)<>"1" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; SETESC 9300; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9740 RETURN 
9750 REM "FILES
9760 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
9790 RETURN 
9800 REM "EXIT PROGRAM
9900 REM "END PROGRAM
9905 Y8=2
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9945 IF Z=0 THEN X1=0; RUN VDPGM$; REM "RUN "OS2ZAB"
9950 RUN "ZMENU"
9999 END 
10000 SETUP:
10010 X0$="OS2ZAA",X1$="Office Supply Product Download"
10020 DIM Z0$(80,"_"),S$(80)
10025 K0=9,K1=0
10030 C9=-1,V9=-2
10035 M0$="###,###,###.00-",M1$="####0"
10040 V8$="000809101899"
10045 CALL "ZZ2FNC;GETUSERNAME",USERNAME$
10050 IF %GUI THEN CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2 ELSE CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X END_IF ; IF X1>0 THEN GOTO *RETURN ! SSP#233311
10055 IF X3$(65,1)>"2" THEN PRECISION NUM(X3$(65,1),ERR=*NEXT)
10060 K9$=X3$(9,3)+"OSD",K9=LEN(K9$)
10065 CALL "ZZ2FNC;OPENSORTUSERFILE","ZPC",_ZPC,USERNAME$
10070 CALL "ZZ2PRP","OS",RESULT$,DATE$; IF RESULT$<>"Y" THEN GOTO *RETURN
10075 DIM Z[NUM(X3$(60,3))]
10080 Z$="01X ZZPARM  13O ZZPARM  02O FMP...  "
10090 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; IF Z0>0 THEN GOTO *RETURN
10100 READ (Z[1],KEY=K9$,DOM=*NEXT)A$
10102 FIND (Z[1],KEY=X3$(9,3)+"OSP",DOM=*NEXT)AA$
10105 VDCDE$=AA$(218,1); IF POS(VDCDE$="SC")=0 THEN %VDNAME$="United Stationers ",VDCDE$="U",VDPGM$="OS2ZAB" ELSE %VDNAME$="S.P.Richards ",VDPGM$="OS2ZAD"
10108 X1$=%VDNAME$
10110 DIM S9$(255); FIND (Z[13],KEY="osec"+X3$(40,3),DOM=*NEXT)S9$
10190 RETURN 
10200 GET_DEFAULT:
10210 Y8=1; CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,-1,X1,X2 ! SSP#233311
10215 DIM B$(45),B[1],C$(44),C[1],D$(44),D[1],E[1],V[1]
10220 DIM A$(447),A[1]
10230 IF V9<>-1 THEN GOSUB 6900
10240 A$(1,LEN(A1$))=A1$; IF A1$="" THEN A$(1,LEN(K9$))=K9$
10245 A1$=K9$; READ (Z[1],KEY=A1$,DOM=*NEXT)IOL=0310
10290 RETURN 
20000 ! 100 - Initialization
20010 INIT:
20012 Q1$="G"
20015 GOSUB SETUP; IF X1>0 THEN GOSUB WRAPUP; GOTO *RETURN
20017 IF RESULT$<>"Y" THEN MSGBOX "","TOPS Module is not installed"; GOSUB WRAPUP; GOTO *RETURN
20018 IF Z0>0 THEN GOTO OPEN_ERR
20020 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
20030 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
20050 GOSUB GET_DEFAULT
20055 GOSUB SET_VARS
20090 RETURN 
20100 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
20110 CMD_STR$="END"
20120 RETURN 
20130 ! 300 - Set up the message library
20140 SETUP_LIBRARY:
20150 _SV_MSGLIB$=MSG(*)
20160 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
20170 MESSAGE_LIB "*tfmsglib."+_LANG$,ERR=*NEXT; GOTO 20190
20180 MESSAGE_LIB "*tfmsglib.en"
20190 SET_MSG:GOSUB SETUP_MESSAGES
20200 RETURN 
20210 ! 400 - Set up key information
20220 SETUP_KEYS:
20230 _NUMKEYS=1
20240 DIM _KEYS$[1:1]; _KEYS$[1]="ERROR_CODE$"
20250 _KEY1=1
20260 RETURN 
20270 ! 500 - Main panel post_display logic
20280 MAIN_POST_DISPLAY:
20290 MESSAGE_LIB _SV_MSGLIB$
20300 GOSUB CLEAR_REC
20310 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
20320 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
20330 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
20340 RETURN 
20350 ! 900 - Wrapup
20360 WRAPUP:
20400 MESSAGE_LIB _SV_MSGLIB$
20410 SET_PARAM 'KR'=_SV_KR
20415 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
20417 CMD_STR$="END"
20420 RETURN 
20430 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
20440 FIND_REC:
20450 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
20460 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
20470 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
20480 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
20490 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
20500 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
20510 GOSUB PROCESS_READ
20520 GOSUB NUM_TO_STR
20530 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
20540 EXIT 
20550 ! 1200 - New RECORD check
20560 NEW_RECORD:
20570 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
20580 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
20590 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
20600 RETURN 
20610 ! 1400 - Add RECORD
20620 WRITE_REC:
20630 GOSUB STR_TO_NUM
20640 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
20650 GOSUB REVIEW_WRITE
20660 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20670 CHANGE_FLG=0
20680 NEXT_ID=_FIRST_KEY
20690 EXIT 
20700 ! 1600 - Delete
20710 DELETE_REC:
20720 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
20730 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
20740 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
20750 IF _X$<>"YES" THEN RETURN 
20760 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
20770 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20780 CHANGE_FLG=0
20790 NEXT_ID=_FIRST_KEY
20800 EXIT 
20810 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
20820 ! 1800 - Clear record
20830 CLEAR_REC:
20840 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
20850 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
20860 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20870 CHANGE_FLG=0
20880 RETURN 
20890 ! 2000 - Browsing mode
20900 ! - Next
20910 NEXT_REC:
20920 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
20930 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
20940 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
20950 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
20960 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
20970 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
20980 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
20990 ! 2200 - Prior record
21000 PRIOR_REC:
21010 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21020 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
21030 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
21040 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
21050 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
21060 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
21070 ! 2400 - First record
21080 FIRST_REC:
21090 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21100 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
21110 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
21120 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
21130 ! 2600 - Last record
21140 LAST_REC:
21150 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21160 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
21170 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
21180 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
21190 ! 3000 - Subroutines
21200 ! Processing required by READ
21210 PROCESS_READ:
21220 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
21230 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
21240 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
21250 CHANGE_FLG=0
21260 RETURN 
21270 ! 3200 - Review record for changes before WRITE
21280 REVIEW_WRITE:
21290 _CHG1$="",_CHG2$=""
21300 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
21310 GOSUB DETERMINE_CHGS
21320 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
21330 IF _CHG1$="" THEN GOTO CHK2
21340 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
21350 IF _YESNO$="NO" THEN GOTO *RETURN
21360 IF _CHG2$="" THEN GOTO WRT
21370 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
21380 GOSUB INCORPORATE_CHGS
21390 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
21400 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
21410 GOSUB NUM_TO_STR
21420 REFRESH_FLG=1
21430 RETURN 
21440 WRITE_ERROR:
21450 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
21460 RETURN 
21470 ! 3500 - Display a record
21480 DISP_REC:
21490 GOSUB NUM_TO_STR
21500 REFRESH_FLG=1
21510 RETURN 
21520 ! 3600 - Busy Record display
21530 BUSY_CHK:
21540 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
21550 IF _D$="NO" THEN EXIT 
21560 RETURN 
21570 ! 3790 - See if changes are to be written
21580 CHECK_CHANGES:
21590 IF _FIRST_KEY=0 THEN _FIRST_KEY=ERROR_CODE.CTL,_FIRST_FIELD=DESC_1.CTL
21600 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
21610 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
21620 IF _YESNO$="YES" THEN GOTO WRITE_REC
21630 CHANGE_FLG=0
21640 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
21650 RETURN 
21660 ! 4000 - Get the current key segment number
21670 GET_CURKEY:
21680 FOR _CURKEY=1 TO _NUMKEYS
21690 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
21700 NEXT _CURKEY
21710 RETURN 
21720 ! 9000 - Retrieve messages from the *msglib.xxx library
21730 SETUP_MESSAGES:
21740 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
21750 _MSG_DIRECTORY$=MSG("DIRECTORY")
21760 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
21770 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
21780 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
21790 _MSG_MANDATORY$=MSG("MANDATORY")
21800 _MSG_NEXT$=MSG("NEXT")
21810 _MSG_NON_NUMER$=MSG("NON_NUMER")
21820 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
21830 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
21840 _MSG_PRECEDING$=MSG("PRECEDING")
21850 _MSG_PREFIX$=MSG("PREFIX")
21860 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
21870 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
21880 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
21890 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
21900 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
21910 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
21920 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
21930 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
21940 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
21950 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
21960 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
21970 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
21980 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
21990 _MSG_START_FILE$=MSG("START_FILE")
22000 _MSG_UPDATE$=MSG("UPDATE")
22010 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
22020 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
22030 _MSG_UPD_SAME$=MSG("UPD_SAME")
22040 _MSG_WARNING$=MSG("WARNING")
22050 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
22060 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
22070 RETURN 
30000 ! 10000 - Convert numeric values to string
30010 NUM_TO_STR:
30020 RETURN 
31000 ! 11000 - Convert numeric strings to number
31010 STR_TO_NUM:
31020 RETURN 
31030 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
31040 NEXT_ID=_X
31050 EXIT 
32000 ! 12000 - Check if the required fields have data
32010 CHECK_REQD_FLDS:
32020 _W_FLG=1
32030 RETURN 
33000 ! 13000 - Clear the record fields
33010 CLEAR_FIELDS:
33020 IF _CLR_FLG$="R" THEN ERROR_CODE$=""
33030 DESC_1$=""
33040 DESC_2$=""
33050 ERROR_TYPE$=""
33060 OS3_UNUSED_1$=""
33070 GOSUB NUM_TO_STR
33072 START_DATE$=""
33074 END_DATE$=""
33080 REFRESH_FLG=1
33090 RETURN 
34000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
34010 ENABLE_GROUPS:
34020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
34030 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$; CALL "*wingrp;Disable",DTFIELDS.GRP$
34040 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$; CALL "*wingrp;Enable",DTFIELDS.GRP$
34050 RETURN 
35000 ! 15000 - Determine the changes that have been made before writing
35010 DETERMINE_CHGS:
35020 DIM _CHG_VAR$(7,"N")
35030 IF _ORIG.ERROR_CODE$=_CUR.ERROR_CODE$ OR ERROR_CODE$=_CUR.ERROR_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ERROR_CODE$=ERROR_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ERROR_CODE")+" = "+_CUR.ERROR_CODE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ERROR_CODE")+" = "+_CUR.ERROR_CODE$
35040 IF _ORIG.DESC_1$=_CUR.DESC_1$ OR DESC_1$=_CUR.DESC_1$ THEN GOTO *NEXT ELSE IF _ORIG.DESC_1$=DESC_1$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC")+" = "+_CUR.DESC_1$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC")+" = "+_CUR.DESC_1$
35050 IF _ORIG.DESC_2$=_CUR.DESC_2$ OR DESC_2$=_CUR.DESC_2$ THEN GOTO *NEXT ELSE IF _ORIG.DESC_2$=DESC_2$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC")+" = "+_CUR.DESC_2$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC")+" = "+_CUR.DESC_2$
35060 IF _ORIG.ERROR_TYPE$=_CUR.ERROR_TYPE$ OR ERROR_TYPE$=_CUR.ERROR_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.ERROR_TYPE$=ERROR_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("ERR_TYPE")+" = "+_CUR.ERROR_TYPE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ERR_TYPE")+" = "+_CUR.ERROR_TYPE$
35070 IF _ORIG.OS3_UNUSED_1$=_CUR.OS3_UNUSED_1$ OR OS3_UNUSED_1$=_CUR.OS3_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.OS3_UNUSED_1$=OS3_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.OS3_UNUSED_1$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.OS3_UNUSED_1$
35080 RETURN 
36000 ! 16000 - Incorporate changes made by another user into the record
36010 INCORPORATE_CHGS:
36070 RETURN 
36100 PROCEED:
36110 GOSUB UPDATE
36150 Q1$="G"
36160 CALL VDPGM$,X3$,X4$,Q0$,Q1$
36170 REM "CALL "OS2ZAB",X3$,X4$,Q0$,Q1$
36180 GOSUB WRAPUP
36190 RETURN 
36200 SET_VARS:
36205 IMPORT_ALL$=A$(7,1)
36210 PP_IN_1$=A$(48,3),PP_IN_2$=A$(51,3),PP_IN_3$=A$(54,3),PP_IN_4$=A$(57,3)
36215 PP_IN_5$=A$(60,3),PP_IN_6$=A$(63,3),PP_IN_7$=A$(66,3),PP_IN_8$=A$(69,3)
36217 PP_IN_9$=A$(72,3),PP_IN_10$=A$(75,3),PP_IN_11$=A$(78,3),PP_IN_12$=A$(81,3)
36220 PP_EX_1$=A$(84,3),PP_EX_2$=A$(87,3),PP_EX_3$=A$(90,3),PP_EX_4$=A$(93,3)
36222 PP_EX_5$=A$(96,3),PP_EX_6$=A$(99,3),PP_EX_7$=A$(102,3),PP_EX_8$=A$(105,3)
36225 PP_EX_9$=A$(108,3),PP_EX_10$=A$(111,3),PP_EX_11$=A$(114,3),PP_EX_12$=A$(117,3)
36227 DEF_PROD_CD$=A$(9,3)
36230 OSG_IMP_FILE$=A$(388,60)
36232 CLEAR_ITEMS$=A$(12,1)
36235 CLEAR_NON$=A$(13,1)
36238 START_DATE$=A$(120,6)
36240 END_DATE$=A$(126,6)
36250 CALL "ZZWLKU;PRODUCT_CODE_FMT",DEF_PROD_CD$,VAR_TAG$; REM get desc
36280 REFRESH_FLG=1
36290 RETURN 
36300 SET_PLANS:
36310 IF IMPORT_ALL$="Y" THEN A$(7,1)="Y",A$(48,72)=DIM(72); CALL "*wingrp;Disable",FIELDS.GRP$; GOSUB SET_VARS ! SSP#233311
36320 IF IMPORT_ALL$="N" THEN A$(7,1)="N"; CALL "*wingrp;Enable",FIELDS.GRP$
36330 IF POS(VDCDE$="SC")=0 THEN CALL "*wingrp;Disable",DTFIELDS.GRP$ ELSE CALL "*wingrp;Enable",DTFIELDS.GRP$
36335 IF POS(VDCDE$="SC")<>0 THEN CALL "*wingrp;show",DTFIELDS.GRP$ ! SSP#233311
36380 REFRESH_FLG=1
36390 RETURN 
36400 VAL_PRD_CODE:
36410 IF STP(DEF_PROD_CD$,3)="" THEN NEXT_ID=DEF_PROD_CD.CTL
36490 REFRESH_FLG=1
36495 RETURN 
36500 DELETE:
36510 GOSUB GET_DEFAULT
36520 GOSUB SET_VARS
36530 GOSUB SET_PLANS
36590 RETURN 
36600 UPDATE:
36605 GOSUB SET_A
36610 WRITE (Z[1],KEY=A1$)IOL=0310
36680 REFRESH_FLG=1
36690 RETURN 
36700 SET_A:
36705 A$(7,1)=IMPORT_ALL$
36710 A$(48,3)=PP_IN_1$,A$(51,3)=PP_IN_2$,A$(54,3)=PP_IN_3$,A$(57,3)=PP_IN_4$
36715 A$(60,3)=PP_IN_5$,A$(63,3)=PP_IN_6$,A$(66,3)=PP_IN_7$,A$(69,3)=PP_IN_8$
36717 A$(72,3)=PP_IN_9$,A$(75,3)=PP_IN_10$,A$(78,3)=PP_IN_11$,A$(81,3)=PP_IN_12$
36720 A$(84,3)=PP_EX_1$,A$(87,3)=PP_EX_2$,A$(90,3)=PP_EX_3$,A$(93,3)=PP_EX_4$
36722 A$(96,3)=PP_EX_5$,A$(99,3)=PP_EX_6$,A$(102,3)=PP_EX_7$,A$(105,3)=PP_EX_8$
36725 A$(108,3)=PP_EX_9$,A$(111,3)=PP_EX_10$,A$(114,3)=PP_EX_11$,A$(117,3)=PP_EX_12$
36727 A$(9,3)=DEF_PROD_CD$
36730 A$(388,60)=OSG_IMP_FILE$
36732 A$(12,1)=CLEAR_ITEMS$
36735 A$(13,1)=CLEAR_NON$
36738 A$(120,6)=START_DATE$
36740 A$(126,6)=END_DATE$
36790 RETURN 
56000 REM "203458-Addition of S.P. Richards to TOPS module                    
56001 REM "222704-Office Supply inputs for Price Plan differ between gui 
56002 REM "233311-Issues with the United Stationers Product Download Panel    
