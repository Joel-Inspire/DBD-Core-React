0010 REM "Cost Table Setup  - OS7 -<OS2MIA>
0015 REM "Prog Type: IP-3.0A    
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 08/15/11 - 15.133333 - tma - SSP# 248669
0037 REM "248669-In O/S, S7, if you use your back arrow key to go back to the
0040 REM "Copyright 2011 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0042 REM "If 45,1=N means variable u/m then if qty/unit=1 use selling qty/unit
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000; SETESC 9300
0110 X0$="OS2MIA",X1$="United Column Prices"
0120 DIM Z0$(80,"-")
0130 K0=16,K1=2
0135 C9=-1
0140 M0$="###,###,##0",M1$="###.00",M2$="#########0-",M3$="###,###.00"
0200 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(65,1)>"2" THEN PRECISION NUM(X3$(65,1),ERR=0246)
0290 K9=14
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0299 CALL "ZZ2PRP","OS",RESULT$,DATE$; IF RESULT$<>"Y" THEN CALL "ZZPROM",".4",X3$,Z,"ACCESS DENIED! The Office Supply Interface System is not an i n stalled module.","","",0; RUN "ZMENU"
0300 REM "IOLISTS
0310 IOLIST A$(1)
0320 IOLIST B$
0330 IOLIST C$
0340 IOLIST OS7$
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01X OS7...  02OSOS7...  03O OS0...  04O OS5...  15O OS7...  13O ZZPARM  "
0520 GOSUB 9750; ON Z0 GOTO 0521,9900
0600 REM "
0680 GOSUB 6000
1000 REM "
1010 Y8=1; CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,X2
1015 DIM V7$(7); V7$(2,1)="1",V7$(3,1)="1"
1030 DIM B$(799),C$(60)
1032 DIM P[1]
1035 DIM A$(125)
1045 A$(1,LEN(A1$))=A1$; IF A1$="" THEN A$(1,LEN(K9$))=K9$
1060 PRINT (0,ERR=1070)'CF',; GOSUB 6450; GOTO 1100
1070 GOSUB 6000; GOSUB 6450
1100 REM "KEY SEQ
1110 X0=-1,C0=0,X1=0,C9=0,Z9=0
1120 SETERR 9000; C0=ABS(C0),X$=""; IF C0=2 AND X0>0 THEN X0=X0-1 ELSE IF C0<>2 THEN X0=X0+1; IF C0=4 THEN GOTO 9900
1140 ON X0 GOTO 1200,1250,1500
1200 REM "
1205 IF LEN(A1$)>1 THEN A$(1,10)=A1$(1,10); GOTO 1220
1210 CALL "ZZENTR","AXUX",A{ALL},A$,X4$,X3$,27,3,1,10,C0,"","{1"+X$,"","OS2MFA00","OSD","",""; IF C0=4 THEN GOTO 9900 ELSE IF ABS(C0)>4 THEN GOSUB 6400
1212 IF INT(ABS(C0))=3 THEN C0=-ABS(C0); READ (Z[3],KEY=A$(1,10),DOM=1213)
1215 IF C0<0 THEN ON INT(ABS(C0)-2) GOTO 1210,6800,9800,6970
1220 IF V9<>-2 THEN FIND (Z[3],KEY=A$(1,10),DOM=1210)IOL=0320
1230 PRINT @(40,3),B$(37,40),@(10,11),"Consumer List Price: ",NUM(B$(204,10)):M3$,
1240 GOTO 1120
1257 Q$=A$(1,10)
1260 CALL "ZZENTR","SZXUX",A{ALL},A$,X4$,X3$,27,4,11,6,C0,"OS7","{1"+X$,Q$,"OS2MFA02","OS7","",""; IF C0=2 THEN A1$=""; GOTO 1200 ELSE IF C0=6 THEN GOSUB 6400; C0=1; REM SSP 222704
1261 IF ABS(C0)=2 AND LEN(A1$)>1 THEN A1$="" ! SSP#248669 was A1$=A$
1262 REM "PRICE_PLAN$="       ***NOT ON FILE***             "; FIND (Z[4],KEY=A$(11,6),DOM=1263)PRICE_PLAN$
1263 REM "PRINT @(35,4),PRICE_PLAN$(7,30)
1264 REM "READ (Z[1],KEY=A$(1,16),DOM=1265)
1265 IF INT(ABS(C0))=3 THEN GOTO 6800 ELSE IF ABS(C0)=4 THEN GOTO 9900 ELSE IF ABS(C0)=2 THEN GOTO 1120
1270 REM "FIND (Z[2],KEY=A$(1,16),DOM=1500)IOL=0330
1271 REM "IF V9<>-2 THEN FIND (Z[2],KEY=A$(1,16),DOM=1260)IOL=0330
1280 REM "PRINT @(31,4),C$(5,30),
1290 GOTO 1120
1500 REM "
1505 Z9=-1,C9=0,A2$="",A3$="",A4$="",A5$=""
1510 A1$=A$(1,16)
1520 READ (Z[1],ERR=7200,KEY=A1$,DOM=1600)IOL=0310
1525 Z9=0,V7$=""; GOSUB 5800
1590 GOTO 1700
1600 REM "
1620 CALL "ZZPROM","2",X3$,Z,"","","",0; ON Z GOTO 1650,1630
1630 GOTO 1000
1680 GOSUB 7450
1690 GOTO 2000
1700 REM "
1790 GOSUB 6200
1800 REM "
1820 CALL "ZZPROM",STR(6+C9),X3$,Z,"","","V",X0; ON Z GOTO 1850,6500,1630,6700,1821,1210
1825 GOTO 6700
1830 GOTO 2000
1850 REM "MODIFY
1855 X0=X0-1; IF Z9=1 THEN GOTO 1880 ELSE IF Z9=0 THEN Z9=1
1860 GOSUB 7400
1870 GOSUB 6200
1890 IF Z<0 THEN GOTO 2035 ELSE GOTO 2000
2000 REM "DATA SEQ
2010 C0=0,X0=-1,X1=1
2020 SETERR 9000; X$="",Q$="",C0=ABS(C0),X0=X0+1; IF C0=2 THEN IF X0>0 THEN X0=X0-2
2025 IF INT(C0)=3 THEN GOSUB 7300 ELSE IF C0>3 OR X0<0 THEN GOTO 1800
2038 IF X0<LEN(V7$) THEN V7$(X0+1,1)=""
2040 ON X0 GOTO 2500,2550,2100,2150,2200,2250,2300,2350,2400,2450,1800
2100 REM " Column 1 price
2110 CALL "ZZENTR","S",J{ALL},A$,X4$,X3$,28,7,27,10,C0,M3$,"{3"+X$,"","OS2MFA10","","",""
2135 PRINT @(28,7),NUM(A$(27,10),ERR=2110):M3$,
2140 GOTO 2020
2150 REM " COLUMN 1 QUANTITY
2160 CALL "ZZENTR","S",J{ALL},A$,X4$,X3$,70,7,17,10,C0,M2$,"{3"+X$,"","OS2MFA10","","",""
2165 PRINT @(70,7),NUM(A$(17,10),ERR=2160):M2$,
2190 GOTO 2020
2200 REM "Column 2 Price
2210 CALL "ZZENTR","S",J{ALL},A$,X4$,X3$,28,8,47,10,C0,M3$,"{3"+X$,"","OS2MFA10","","",""
2235 PRINT @(28,8),NUM(A$(47,10),ERR=2210):M3$,
2240 GOTO 2020
2250 REM "COLUMN 2 QUANTITY
2260 CALL "ZZENTR","S",J{ALL},A$,X4$,X3$,70,8,37,10,C0,M2$,"{3"+X$,"","OS2MFA10","","",""
2265 PRINT @(70,8),NUM(A$(37,10),ERR=2260):M2$,
2270 GOTO 2020
2300 REM "Column 3 price
2310 CALL "ZZENTR","S",J{ALL},A$,X4$,X3$,28,9,67,10,C0,M3$,"{3"+X$,"","OS2MFA10","","",""
2335 PRINT @(28,9),NUM(A$(67,10),ERR=2310):M3$,
2340 GOTO 2020
2350 REM "COLUMN 3 QUANTITY
2360 CALL "ZZENTR","S",J{ALL},A$,X4$,X3$,70,9,57,10,C0,M2$,"{3"+X$,"","OS2MFA10","","",""
2365 PRINT @(70,9),NUM(A$(57,10),ERR=2360):M2$,
2370 GOTO 2020
2400 REM "COLUMN 4 PRICE
2410 CALL "ZZENTR","S",J{ALL},A$,X4$,X3$,28,10,89,10,C0,M3$,"{3"+X$,"","OS2MFA10","","",""
2435 PRINT @(28,10),NUM(A$(89,10),ERR=2410):M3$,
2440 GOTO 2020
2450 REM "PRICE 4 QUANTITY
2460 CALL "ZZENTR","S",J{ALL},A$,X4$,X3$,70,10,99,10,C0,M2$,"{3"+X$,"","OS2MFA10","","",""
2465 PRINT @(70,10),NUM(A$(99,10),ERR=2560):M2$,
2470 GOTO 2020
2500 REM " Start Date
2510 CALL "ZZENTR","D",A{ALL},A$,X4$,X3$,27,5,77,6,C0,"","{3"+X$,"","OS2MFA04","","",""
2540 GOTO 2020
2550 REM " End Date
2560 CALL "ZZENTR","D",A{ALL},A$,X4$,X3$,61,5,83,6,C0,"","{3"+X$,"MDGS","OS2MFA06","","",""
2590 GOTO 2020
3250 REM "Selling U/M
3260 CALL "ZZENTR","SU",A{ALL},A$,X4$,X3$,74,6,40+K9,4,C0,"","{3"+X$,"U/M","IC2MAB48","U/M","ZZ2MUA",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 3260,3261
3265 FIND (Z[13],KEY="U/M"+A$(40+K9,4),DOM=3260)IOL=0390
3290 GOTO 2020
3300 REM "Selling pack"
3302 IF ABS(C0)=2 THEN O1$=A$(40+K9,4),O5=A[0]
3306 IF P[0]<>0 THEN A[0]=P[0] ELSE A[0]=P[1]
3308 PRINT @(73,7),A[0]:M2$,; GOTO 3311
3310 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,73,7,0,501,C0,M2$,"{3"+X$,"","IC2MAB50","","",""; IF ABS(C0)>4 THEN GOSUB 6400; ON C0 GOTO 3310,3311
3315 IF A[0]=0 THEN GOTO 3310
3320 IF O1$<>A$(40+K9,4) OR O5<>A[0] THEN GOSUB 7900
3340 GOTO 2020
5800 REM "Alt sort keys
5890 RETURN 
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6016)'SB',
6060 PRINT @(9,3+V0),"Item Number:",@(5,4+V0),"Price Plan Code:",
6062 PRINT @(10,5),"Start Date:",@(51,5),"End Date:",@(0,6),Z0$,
6065 PRINT @(10,7+V0),"Column 1 Price:",@(50,7+V0),"Column 1 Quantity:",
6075 PRINT @(10,8+V0),"Column 2 Price:",@(50,8+V0),"Column 2 Quantity:",
6085 PRINT @(10,9+V0),"Column 3 Price:",@(50,9+V0),"Column 3 Quantity:",
6086 PRINT @(10,10+V0),"Column 4 Price:",@(50,10+V0),"Column 4 Quantity:",
6090 PRINT @(40,4+V0),"Consumer List Price:",
6165 PRINT (0,ERR=6166)'SF',
6190 RETURN 
6200 REM "DISPLAY DATA
6202 PRINT @(60,4),'CL'
6210 CALL "ZZDISP","D",A$(77,6),"",X3$,"","",27,5+V0,X4$
6211 CALL "ZZDISP","D",A$(83,6),"",X3$,"","",61,5+V0,X4$
6215 GOSUB 6450
6220 PRINT @(28,7),NUM(A$(27,10)):M3$,@(70,7),NUM(A$(17,10)):M2$,
6221 PRINT @(28,8),NUM(A$(47,10)):M3$,@(70,8),NUM(A$(37,10)):M2$,
6222 PRINT @(28,9),NUM(A$(67,10)):M3$,@(70,9),NUM(A$(57,10)):M2$,
6223 PRINT @(28,10),NUM(A$(89,10)):M3$,@(70,10),NUM(A$(99,10)):M2$,
6229 GOSUB 7900; F9$=M1$; REM "IF A$(38,1)="S" THEN F9$=M3$
6232 PRINT 
6390 RETURN 
6400 REM "WHOLE SCREEN
6405 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,0
6420 GOSUB 6000
6430 IF C9>=0 THEN GOSUB 6200 ELSE GOSUB 6450
6440 IF ABS(C0)>4 THEN C0=ABS(C0)-5
6445 RETURN 
6450 REM "DISPLAY KEYS
6455 IF C9<0 THEN GOTO 6445
6457 FIND (Z[3],KEY=A$(1,10),DOM=6458)IOL=0320
6458 REM "PRINT @(40,3),B$(548,20),'CL'
6459 PRINT @(40,3),B$(37,40),@(10,11),"Consumer List Price: ",NUM(B$(204,10)):M3$,
6460 PRINT @(27,3),A$(1,10),@(27,4),A$(11,6),
6490 RETURN 
6500 REM "DELETE
6510 REMOVE (Z[1],KEY=A1$,DOM=6511)
6590 GOTO 1630
6600 REM "ALT KEY DATA READS
6605 FIND (Z[2],KEY="I"+A$(2,3),DOM=6606)IOL=0320
6610 FIND (Z[2],KEY="C"+A$(5,3),DOM=6611)IOL=0330
6612 FIND (Z[4],KEY=A$(11,6),DOM=1000)PRICE_PLAN$
6613 PRINT @(35,4),PRICE_PLAN$(7,30)
6690 RETURN 
6700 REM "ADD ENTRY
6705 IF Z9=0 THEN GOTO 6790 ELSE IF V7$>"" THEN X0=POS(" "<>V7$); IF X0>0 THEN X0=X0-1; GOTO 2038
6710 WRITE (Z[1],KEY=A1$)IOL=0310
6790 C9=0; IF Z=6 OR K1=0 THEN GOTO 9900 ELSE IF Z<4 THEN GOTO 1000 ELSE C0=-(3.1+(Z-4)/10); GOTO 6800
6800 REM "NEXT ENTRY IN FILE
6805 ON 10*FPT(C0)+2 GOTO 6850,6806
6807 IF POS(" "<>A1$)=0 THEN A1$=A$; READ (Z(1),KEY=A1$(1,10),DOM=*NEXT)
6810 A1$=KEY(Z[1],END=6895)
6820 IF A1$="" THEN GOTO 6800 ELSE IF A1$(1,LEN(K9$))<>K9$ THEN GOTO 6895
6825 A$(1,LEN(A1$))=A1$
6830 GOSUB 6600
6835 GOSUB 6450
6840 GOTO 1515
6850 REM "PRIOR ENTRY
6855 CALL "ZZKEYP",ERR=6856,Z[1],A1$; GOTO 6820
6860 PRINT 'RB',; CALL "ZZKEYL",ERR=6861,Z[1],A1$; GOTO 6820
6865 GOTO 1100
6870 GOTO 6895
6890 GOTO 1515
6895 IF A1$="" THEN GOTO 6860 ELSE PRINT 'RB',; READ (Z[1],KEY=K9$,DOM=6896)
6898 ON S9 GOTO 6810,1100
7200 REM "Forced read 
7210 IF ERR<>0 THEN GOTO 9000
7220 CALL "ZZREAD",Z[1],A1$,A$,A{ALL},S8; ON S8 GOTO 7221,1630
7230 GOSUB 6200
7240 CALL "ZZPROM","E0",X3$,0,"","","",0; GOTO 7290
7250 CALL "ZZPROM","E0A",X3$,0,"","","",0; GOTO 7290
7290 GOTO 1630
7300 REM 
7310 ON FPT(C0)*10 GOTO 7390,7325,7330,7390
7325 IF V8$="" THEN X0=X0+4; GOTO 7390 ELSE X0=NUM(V8$(POS(STR(X0:"00")<=V8$,2),2)); GOTO 7390
7330 IF V8$="" THEN X0=X0-6; GOTO 7335 ELSE X0=POS(STR(X0-1:"00")<=V8$,2)-2; IF X0<0 THEN X0=0; GOTO 7390 ELSE X0=NUM(V8$(X0,2)); GOTO 7390
7335 IF X0<0 THEN X0=0; GOTO 7390
7390 IF X0>0 THEN X0=X0-0
7395 C0=3; RETURN 
7400 REM "EXTRACT
7410 EXTRACT (Z[1],ERR=7200,KEY=A1$,DOM=7440)IOL=0310
7420 C9=1,Z9=1; GOSUB 5800
7440 RETURN 
7450 REM "EXTRACT NEW ENTRY
7460 WRITE (Z[1],KEY=A1$,DOM=7250)IOL=0310; GOTO 7400
7490 RETURN 
7500 REM 
7590 RETURN 
7900 REM "RE-DISPLAY
7901 RETURN 
7920 FOR X=0 TO 11
7930 IF A[X*2+1]<>0 THEN PRINT @(16,10+X),A[1+X*2]/Q5:M0$,
7940 NEXT X
7995 RETURN 
8905 DEF FNP$(Z9$)="("+Z9$(1,3)+") "+Z9$(4,3)+"-"+Z9$(7,4)+" Ext: "+Z9$(11,4)
8910 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
8915 DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
8960 DEF FNZ(X)=INT(X-5)*2+1
9000 REM "ERROR PROCESSING
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5); IF Y5=68 OR Y5=69 THEN GOTO 9500
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9120 ON Y8 GOTO 9900,0990,9920
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)<>"1" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; SETESC 9300; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9740 RETURN 
9750 REM "FILES
9760 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
9790 RETURN 
9800 REM "EXIT PROGRAM
9900 REM "END PROGRAM
9905 Y8=2
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
20000 ! 100 - Initialization
20010 INIT:
20015 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; IF X1>0 THEN CMD_STR$="END"; GOSUB WRAPUP; GOTO *RETURN
20020 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
20030 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
20040 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
20050 GOSUB SETUP_KEYS
20055 CALL "ZZ2PRP","OS",RESULT$,DATE$; IF RESULT$<>"Y" THEN MSGBOX "","TOPS Module is not installed"; CMD_STR$="END"; GOSUB WRAPUP; GOTO *RETURN
20060 _FILE_NAME$="OS7"+%C$
20070 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
20080 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
20082 DIM Z[NUM(X3$(60,3))]
20085 Z$="01X OS7...  02OSOS7...  03O OS0...  04O OS5...  15O OS7...  13O ZZPARM  "
20087 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; IF Z0>0 THEN GOTO OPEN_ERR
20089 %OS_ITEM_DESC$=""""
20090 RETURN 
20100 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
20110 CMD_STR$="END"
20120 RETURN 
20130 ! 300 - Set up the message library
20140 SETUP_LIBRARY:
20150 _SV_MSGLIB$=MSG(*)
20160 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
20170 MESSAGE_LIB "*tfmsglib."+_LANG$,ERR=*NEXT; GOTO 20190
20180 MESSAGE_LIB "*tfmsglib.en"
20190 SET_MSG:GOSUB SETUP_MESSAGES
20200 RETURN 
20210 ! 400 - Set up key information
20220 SETUP_KEYS:
20230 _NUMKEYS=2
20231 PRICE_PLAN$=STR(NUM(PRICE_PLAN$,ERR=*NEXT):"000000"); GOTO 20233; REM SSP 222704
20232 PRICE_PLAN$=PAD(PRICE_PLAN$,6," "); REM SSP 222704
20233 PRICE_PLAN_CODE.CTL'VALUE$=PRICE_PLAN_CODE$; REM SSP 222704     
20240 DIM _KEYS$[1:2]; _KEYS$[1]="ITEM_NUMBER$",_KEYS$[2]="PRICE_PLAN$"
20250 _KEY1=1
20260 RETURN 
20270 ! 500 - Main panel post_display logic
20280 MAIN_POST_DISPLAY:
20290 MESSAGE_LIB _SV_MSGLIB$
20300 GOSUB CLEAR_REC
20310 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
20320 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
20330 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
20340 RETURN 
20350 ! 900 - Wrapup
20360 WRAPUP:
20370 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
20380 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
20390 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
20400 MESSAGE_LIB _SV_MSGLIB$
20410 SET_PARAM 'KR'=_SV_KR
20415 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
20420 RETURN 
20430 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
20440 FIND_REC:
20450 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
20455 FIND (Z[3],KEY=ITEM_NUMBER$,DOM=*NEXT)OS0$; %OS_ITEM_DESC$=MID(OS0$,37,40),SUPP_ITEM_NUM$=OS0$(548,20); REFRESH_FLG=1 ! SSP#230315  !SSP#240510
20460 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
20470 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
20480 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
20490 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
20495 READ (Z[3],KEY=_KEY$(1,10),DOM=*NEXT)OS0$; %OS_ITEM_DESC$=MID(OS0$,37,40),SUPP_ITEM_NUM$=OS0$(548,20) ! SSP#240510
20500 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
20510 GOSUB PROCESS_READ
20520 GOSUB NUM_TO_STR
20530 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
20540 EXIT 
20550 ! 1200 - New RECORD check
20560 NEW_RECORD:
20570 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
20572 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$ ! SSP#240510
20575 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT ! SSP#240510
20580 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
20590 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=START_DATE.CTL
20600 RETURN 
20610 ! 1400 - Add RECORD
20620 WRITE_REC:
20630 GOSUB STR_TO_NUM
20640 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
20650 GOSUB REVIEW_WRITE
20660 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20670 CHANGE_FLG=0
20680 NEXT_ID=_FIRST_KEY
20685 GOSUB CLEAR_REC
20690 EXIT 
20700 ! 1600 - Delete
20710 DELETE_REC:
20720 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
20730 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
20740 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
20750 IF _X$<>"YES" THEN RETURN 
20760 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
20770 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20780 CHANGE_FLG=0
20790 NEXT_ID=_FIRST_KEY
20800 EXIT 
20810 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
20820 ! 1800 - Clear record
20830 CLEAR_REC:
20840 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
20850 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
20860 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20870 CHANGE_FLG=0
20880 RETURN 
20890 ! 2000 - Browsing mode
20900 ! - Next
20910 NEXT_REC:
20920 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
20930 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
20935 READ (Z[3],KEY=_KEY$(1,10),DOM=*NEXT)OS0$; %OS_ITEM_DESC$=MID(OS0$,37,40),SUPP_ITEM_NUM$=OS0$(548,20) ! SSP#240510
20940 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
20950 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
20960 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
20970 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
20980 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
20990 ! 2200 - Prior record
21000 PRIOR_REC:
21010 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21020 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
21030 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
21040 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
21050 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
21060 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
21070 ! 2400 - First record
21080 FIRST_REC:
21090 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21100 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
21110 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
21120 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
21130 ! 2600 - Last record
21140 LAST_REC:
21150 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21160 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
21170 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
21180 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
21190 ! 3000 - Subroutines
21200 ! Processing required by READ
21210 PROCESS_READ:
21220 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
21230 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
21240 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
21245 %BASE_PRICE$=""; FIND (Z[3],KEY=ITEM_NUMBER$,DOM=*NEXT)B$; %BASE_PRICE$=STR(NUM(B$(204,10),ERR=*NEXT):"###,###.00")
21250 CHANGE_FLG=0,REFRESH_FLG=1 ! SSP#230315
21260 RETURN 
21270 ! 3200 - Review record for changes before WRITE
21280 REVIEW_WRITE:
21290 _CHG1$="",_CHG2$=""
21300 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
21310 GOSUB DETERMINE_CHGS
21320 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
21330 IF _CHG1$="" THEN GOTO CHK2
21340 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
21350 IF _YESNO$="NO" THEN GOTO *RETURN
21360 IF _CHG2$="" THEN GOTO WRT
21370 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
21380 GOSUB INCORPORATE_CHGS
21390 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
21400 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
21410 GOSUB NUM_TO_STR
21420 REFRESH_FLG=1
21430 RETURN 
21440 WRITE_ERROR:
21450 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
21460 RETURN 
21470 ! 3500 - Display a record
21480 DISP_REC:
21490 GOSUB NUM_TO_STR
21500 REFRESH_FLG=1
21510 RETURN 
21520 ! 3600 - Busy Record display
21530 BUSY_CHK:
21540 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
21550 IF _D$="NO" THEN EXIT 
21560 RETURN 
21570 ! 3790 - See if changes are to be written
21580 CHECK_CHANGES:
21590 IF _FIRST_KEY=0 THEN _FIRST_KEY=ITEM_NUMBER.CTL,_FIRST_FIELD=NET_PRICE_1.CTL
21600 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
21610 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
21620 IF _YESNO$="YES" THEN GOTO WRITE_REC
21630 CHANGE_FLG=0
21640 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
21650 RETURN 
21660 ! 4000 - Get the current key segment number
21670 GET_CURKEY:
21680 FOR _CURKEY=1 TO _NUMKEYS
21690 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
21700 NEXT _CURKEY
21710 RETURN 
21720 ! 9000 - Retrieve messages from the *msglib.xxx library
21730 SETUP_MESSAGES:
21740 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
21750 _MSG_DIRECTORY$=MSG("DIRECTORY")
21760 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
21770 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
21780 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
21790 _MSG_MANDATORY$=MSG("MANDATORY")
21800 _MSG_NEXT$=MSG("NEXT")
21810 _MSG_NON_NUMER$=MSG("NON_NUMER")
21820 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
21830 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
21840 _MSG_PRECEDING$=MSG("PRECEDING")
21850 _MSG_PREFIX$=MSG("PREFIX")
21860 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
21870 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
21880 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
21890 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
21900 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
21910 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
21920 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
21930 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
21940 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
21950 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
21960 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
21970 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
21980 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
21990 _MSG_START_FILE$=MSG("START_FILE")
22000 _MSG_UPDATE$=MSG("UPDATE")
22010 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
22020 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
22030 _MSG_UPD_SAME$=MSG("UPD_SAME")
22040 _MSG_WARNING$=MSG("WARNING")
22050 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
22060 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
22070 RETURN 
30000 ! 10000 - Convert numeric values to string
30010 NUM_TO_STR:
30020 RETURN 
31000 ! 11000 - Convert numeric strings to number
31010 STR_TO_NUM:
31020 RETURN 
31030 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
31040 NEXT_ID=_X
31050 EXIT 
32000 ! 12000 - Check if the required fields have data
32010 CHECK_REQD_FLDS:
32020 _W_FLG=1
32030 RETURN 
33000 ! 13000 - Clear the record fields
33010 CLEAR_FIELDS:
33020 IF _CLR_FLG$="R" THEN ITEM_NUMBER$=""
33030 IF _CLR_FLG$="R" THEN PRICE_PLAN$=""
33040 NET_QUANT_1$=""
33050 NET_PRICE_1$=""
33060 NET_QUANT_2$=""
33070 NET_PRICE_2$=""
33080 NET_QUANT_3$=""
33090 NET_PRICE_3$=""
33100 START_DATE$=""
33110 END_DATE$=""
33120 NET_PRICE_4$=""
33130 NET_QUANT_4$=""
33140 OS7_UNUSED_1$=""
33145 %BASE_PRICE$=""
33146 IF _CLR_FLG$="R" THEN %OS_ITEM_DESC$="",SUPP_ITEM_NUM$="" ! SSP#240510
33150 GOSUB NUM_TO_STR
33160 REFRESH_FLG=1
33170 RETURN 
34000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
34010 ENABLE_GROUPS:
34020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
34030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=PRICE_PLAN.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
34040 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
34050 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
34060 RETURN 
35000 ! 15000 - Determine the changes that have been made before writing
35010 DETERMINE_CHGS:
35020 DIM _CHG_VAR$(9,"N")
35030 IF _ORIG.ITEM_NUMBER$=_CUR.ITEM_NUMBER$ OR ITEM_NUMBER$=_CUR.ITEM_NUMBER$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_NUMBER$=ITEM_NUMBER$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_N")+" = "+_CUR.ITEM_NUMBER$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_N")+" = "+_CUR.ITEM_NUMBER$
35040 IF _ORIG.PRICE_PLAN$=_CUR.PRICE_PLAN$ OR PRICE_PLAN$=_CUR.PRICE_PLAN$ THEN GOTO *NEXT ELSE IF _ORIG.PRICE_PLAN$=PRICE_PLAN$ THEN _CHG2$=_CHG2$+SEP+MSG("P_P_CODE")+" = "+_CUR.PRICE_PLAN$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("P_P_CODE")+" = "+_CUR.PRICE_PLAN$
35050 IF _ORIG.NET_QUANT_1$=_CUR.NET_QUANT_1$ OR NET_QUANT_1$=_CUR.NET_QUANT_1$ THEN GOTO *NEXT ELSE IF _ORIG.NET_QUANT_1$=NET_QUANT_1$ THEN _CHG2$=_CHG2$+SEP+MSG("COL_QUAN_1")+" = "+_CUR.NET_QUANT_1$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COL_QUAN_1")+" = "+_CUR.NET_QUANT_1$
35060 IF _ORIG.NET_PRICE_1$=_CUR.NET_PRICE_1$ OR NET_PRICE_1$=_CUR.NET_PRICE_1$ THEN GOTO *NEXT ELSE IF _ORIG.NET_PRICE_1$=NET_PRICE_1$ THEN _CHG2$=_CHG2$+SEP+MSG("COL_PRIC_1")+" = "+_CUR.NET_PRICE_1$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COL_PRIC_1")+" = "+_CUR.NET_PRICE_1$
35070 IF _ORIG.NET_QUANT_2$=_CUR.NET_QUANT_2$ OR NET_QUANT_2$=_CUR.NET_QUANT_2$ THEN GOTO *NEXT ELSE IF _ORIG.NET_QUANT_2$=NET_QUANT_2$ THEN _CHG2$=_CHG2$+SEP+MSG("COL_QUAN_2")+" = "+_CUR.NET_QUANT_2$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COL_QUAN_2")+" = "+_CUR.NET_QUANT_2$
35080 IF _ORIG.NET_PRICE_2$=_CUR.NET_PRICE_2$ OR NET_PRICE_2$=_CUR.NET_PRICE_2$ THEN GOTO *NEXT ELSE IF _ORIG.NET_PRICE_2$=NET_PRICE_2$ THEN _CHG2$=_CHG2$+SEP+MSG("COL_PRIC_2")+" = "+_CUR.NET_PRICE_2$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COL_PRIC_2")+" = "+_CUR.NET_PRICE_2$
35090 IF _ORIG.NET_QUANT_3$=_CUR.NET_QUANT_3$ OR NET_QUANT_3$=_CUR.NET_QUANT_3$ THEN GOTO *NEXT ELSE IF _ORIG.NET_QUANT_3$=NET_QUANT_3$ THEN _CHG2$=_CHG2$+SEP+MSG("COL_QUAN_3")+" = "+_CUR.NET_QUANT_3$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COL_QUAN_3")+" = "+_CUR.NET_QUANT_3$
35100 IF _ORIG.NET_PRICE_3$=_CUR.NET_PRICE_3$ OR NET_PRICE_3$=_CUR.NET_PRICE_3$ THEN GOTO *NEXT ELSE IF _ORIG.NET_PRICE_3$=NET_PRICE_3$ THEN _CHG2$=_CHG2$+SEP+MSG("COL_PRIC_3")+" = "+_CUR.NET_PRICE_3$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COL_PRIC_3")+" = "+_CUR.NET_PRICE_3$
35110 IF _ORIG.START_DATE$=_CUR.START_DATE$ OR START_DATE$=_CUR.START_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.START_DATE$=START_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("START_DATE")+" = "+_CUR.START_DATE$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("START_DATE")+" = "+_CUR.START_DATE$
35120 IF _ORIG.END_DATE$=_CUR.END_DATE$ OR END_DATE$=_CUR.END_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.END_DATE$=END_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("END_DATE")+" = "+_CUR.END_DATE$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("END_DATE")+" = "+_CUR.END_DATE$
35130 IF _ORIG.NET_PRICE_4$=_CUR.NET_PRICE_4$ OR NET_PRICE_4$=_CUR.NET_PRICE_4$ THEN GOTO *NEXT ELSE IF _ORIG.NET_PRICE_4$=NET_PRICE_4$ THEN _CHG2$=_CHG2$+SEP+MSG("COL_PRIC_4")+" = "+_CUR.NET_PRICE_4$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COL_PRIC_4")+" = "+_CUR.NET_PRICE_4$
35140 IF _ORIG.NET_QUANT_4$=_CUR.NET_QUANT_4$ OR NET_QUANT_4$=_CUR.NET_QUANT_4$ THEN GOTO *NEXT ELSE IF _ORIG.NET_QUANT_4$=NET_QUANT_4$ THEN _CHG2$=_CHG2$+SEP+MSG("COL_QUAN_4")+" = "+_CUR.NET_QUANT_3$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COL_QUAN_4")+" = "+_CUR.NET_QUANT_4$
35150 IF _ORIG.OS7_UNUSED_1$=_CUR.OS7_UNUSED_1$ OR OS7_UNUSED_1$=_CUR.OS7_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.OS7_UNUSED_1$=OS7_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.OS7_UNUSED_1$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.OS7_UNUSED_1$
35160 RETURN 
36000 ! 16000 - Incorporate changes made by another user into the record
36010 INCORPORATE_CHGS:
36020 IF _CHG_VAR$(1,1)="Y" THEN ITEM_NUMBER$=_CUR.ITEM_NUMBER$
36030 IF _CHG_VAR$(2,1)="Y" THEN PRICE_PLAN$=_CUR.PRICE_PLAN$
36040 IF _CHG_VAR$(3,1)="Y" THEN NET_QUANT_1$=_CUR.NET_QUANT_1$
36050 IF _CHG_VAR$(4,1)="Y" THEN NET_PRICE_1$=_CUR.NET_PRICE_1$
36060 IF _CHG_VAR$(5,1)="Y" THEN NET_QUANT_2$=_CUR.NET_QUANT_2$
36070 IF _CHG_VAR$(6,1)="Y" THEN NET_PRICE_2$=_CUR.NET_PRICE_2$
36080 IF _CHG_VAR$(7,1)="Y" THEN NET_QUANT_3$=_CUR.NET_QUANT_3$
36090 IF _CHG_VAR$(8,1)="Y" THEN NET_PRICE_3$=_CUR.NET_PRICE_3$
36100 IF _CHG_VAR$(9,1)="Y" THEN START_DATE$=_CUR.START_DATE$
36110 IF _CHG_VAR$(10,1)="Y" THEN END_DATE$=_CUR.END_DATE$
36120 IF _CHG_VAR$(11,1)="Y" THEN NET_PRICE_4$=_CUR.NET_PRICE_4$
36130 IF _CHG_VAR$(12,1)="Y" THEN NET_QUANT_4$=_CUR.NET_QUANT_4$
36140 IF _CHG_VAR$(13,1)="Y" THEN OS7_UNUSED_1$=_CUR.OS7_UNUSED_1$
36150 RETURN 
37000 SEL_PRICE_PLAN_CODE:; REM SSP 222704
37005 EXECUTE "PRICE_PLAN$="+ID$+"$"
37010 PRICE_PLAN$=STR(NUM(PRICE_PLAN$,ERR=*NEXT):"000000"); GOTO 37030; REM SSP  222704
37020 PRICE_PLAN$=PAD(PRICE_PLAN$,6," "); REM SSP 222704
37030 ID'VALUE$=PRICE_PLAN$; REM SSP 222704
37040 READ (Z[4],KEY=PRICE_PLAN$,DOM=NO_REC)OS5$; REM SSP 222704
37042 EXECUTE ID$+"$=PRICE_PLAN$,%PRICE_PLAN_DESC"+ID$(LEN(ID$))+"$=OS5$(7,30)"
37050 EXIT ; REM SSP 222704
37060 NO_REC:; REM SSP 222704
37070 MSGBOX "Price Plan Not Found.","Input validation failure","!"; PRICE_PLAN$="",REFRESH_FLG=1,NEXT_ID=ID,CHANGE_FLG=0; REM SSP 222704
37080 EXECUTE ID$+"$="+QUO+QUO
37090 EXIT 
56000 REM "222704-Office Supply inputs for Price Plan differ between gui 
56001 REM "230315-Panel OSGMIA - If you select and item number it returns to  
56002 REM "240510-Display Uniteds item code along with description            
56003 REM "248669-In O/S, S7, if you use your back arrow key to go back to the
