0010 REM "Order Processing Division Setup <FM2MPB>
0015 REM "Prog Type: I -2.7     
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 08/10/15 - 22.707777 - crg - SSP# 277659
0037 REM "277659-Modify Division Next Order# sequence logic, allow for alpha 
0040 REM "Copyright 2015 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0044 ! ********************************************************************    
0045 ! THIS PROGRAM WILL NO LONGER BE MODIFIED. THE GUI PANEL WILL BE PROCESSED FROM HERE. ALL FUTURE CHANGES NEED TO BE MADE IN FMGMPB PANEL AND PROGRAM. (RE WO 277659 )
0046 ! ********************************************************************
0050 IF TCB(88)=0 THEN MSGBOX MSG("WARN_WINDX"),MSG("ERROR"),"OK" ELSE PROCESS "FMGMPB","../FMG/FM.EN" ! 277659
0055 IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT ! 277659
0060 EXIT ! 277659
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000; SETESC 9300
0110 X0$="FM2MPB",X1$="Order Processing Division Setup",K9$="",K9=0
0120 DIM Z0$(80,"-")
0130 K0=2,K1=1
0135 C9=-1
0200 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0298 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0300 REM "IOLISTS
0310 IOLIST A$(1)
0320 IOLIST B$
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01X FSH...  02O ARH...  13O ZZPARM  "
0520 GOSUB 9750; ON Z0 GOTO 0521,9900
0590 READ (Z[1],KEY=K9$,DOM=0591)
0600 REM "
0680 GOSUB 6000
1000 REM "
1010 Y8=1; CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,X2
1030 DIM B$(33)
1035 DIM A$(402)
1045 A$(1,LEN(A1$))=A1$; IF A1$="" THEN A$(1,LEN(K9$))=K9$
1060 PRINT (0,ERR=1070)'CF',; GOSUB 6450; GOTO 1100
1070 GOSUB 6000; GOSUB 6450
1100 REM "KEY SEQ
1110 X0=-1,C0=0,X1=0,C9=0,Z9=0
1120 SETERR 9000; C0=ABS(C0),X$=""; IF C0=2 AND X0>0 THEN X0=X0-1 ELSE IF C0<>2 THEN X0=X0+1; IF C0=4 THEN GOTO 9900
1140 ON X0 GOTO 1200,1500
1200 REM "
1205 IF X3$(330,1)="1" THEN A$(1,2)=X3$(331,2); PRINT @(19,3),A$(1,2),; GOTO 1220
1208 REM "Changed to alpha for PFG - if not PFG, division setup will not allow
1209 REM "Alpha, so verification in AR divisions file will fail.
1210 CALL "ZZENTR","SZUX",A{ALL},A$,X4$,X3$,19,3,1,2,C0,"","{1"+X$,K9$,"FM2MPB00","ARH","AR2MPE",""; IF C0=6 THEN GOSUB 6400; C0=1
1212 IF INT(ABS(C0))=3 THEN C0=-ABS(C0); READ (Z[1],KEY=A$(1,2),DOM=1213)
1215 IF C0<0 THEN ON INT(ABS(C0)-2) GOTO 1210,6800,9800,6970
1220 IF V9<>-2 THEN FIND (Z[2],KEY=A$(1,2),DOM=1210)IOL=0320
1225 PRINT @(23,3),B$(3,30),
1240 GOTO 1120
1500 REM "
1505 Z9=-1,A2$="",A3$="",A4$="",A5$=""
1510 A1$=A$(1,2)
1520 READ (Z[1],ERR=7200,KEY=A1$,DOM=1600)IOL=0310
1525 Z9=0,V7$=""; GOSUB 5800
1590 GOTO 1700
1600 REM "
1620 CALL "ZZPROM","2",X3$,Z,"","","",0; ON Z GOTO 1650,1630
1630 IF X3$(330,1)<>"1" THEN GOTO 1000 ELSE GOTO 9900
1680 GOSUB 7450
1690 GOTO 2000
1700 REM "
1790 GOSUB 6200
1800 REM "
1820 CALL "ZZPROM",STR(6+C9),X3$,Z,"","","V",X0; ON Z GOTO 1850,6500,1630,6700
1830 GOTO 2000
1850 REM "MODIFY
1855 X0=X0-1; IF Z9=1 THEN GOTO 1880 ELSE IF Z9=0 THEN Z9=1
1860 GOSUB 7400
1870 GOSUB 6200
1890 IF Z<0 THEN GOTO 2035 ELSE GOTO 2000
2000 REM "DATA SEQ
2010 C0=0,X0=-1,X1=1,C9=1
2020 SETERR 9000; X$="",Q$="",C0=ABS(C0),X0=X0+1; IF C0=2 THEN IF X0>0 THEN X0=X0-2
2025 IF INT(C0)=3 THEN GOSUB 7300 ELSE IF C0>3 OR X0<0 THEN GOTO 1800
2038 IF X0<LEN(V7$) THEN V7$(X0+1,1)=""
2040 ON X0 GOTO 2100,2150,2200,2250,2300,2350,2400,2400,2400,2400,2400,2400,2400,2400,2400,2450,2500,2550,2600,2650,2700,2750,1800
2110 CALL "ZZENTR","A",A{ALL},A$,X4$,X3$,19,5,3,8,C0,"O/P","{3"+X$,"","FM2MPB02","","",""
2120 IF NUM(A$(5,6),ERR=2110)<0 THEN GOTO 2110
2140 GOTO 2020
2160 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,19,6,11,35,C0,"","{3"+X$,"","FM2MPB04","","",""
2190 GOTO 2020
2210 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,19,7,46,35,C0,"","{3"+X$,"","FM2MPB06","","",""
2240 GOTO 2020
2260 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,19,8,81,35,C0,"","{3"+X$,"","FM2MPB08","","",""
2290 GOTO 2020
2300 REM "NEXT WHSE REL NUMBER
2305 X$="Leave blank (or zero) to use Order number sequence"
2310 CALL "ZZENTR","A",A{ALL},A$,X4$,X3$,19,9,116,8,C0,"O/P","{3"+X$,"","FM2MPB10","","",""
2320 IF NUM(A$(118,6),ERR=2310)<0 THEN GOTO 2310
2340 GOTO 2020
2350 REM "PHONE NUMBER
2360 CALL "ZZENTR","P",A{ALL},A$,X4$,X3$,19,10,124,14,C0,"","{3"+X$,"","FM2MPB12","","",""
2390 GOTO 2020
2400 REM "Alternate Order Number Sequences
2405 J0=138+(X0-6)*6,J1=11+(X0-6)
2410 CALL "ZZENTR","SZ",A{ALL},A$,X4$,X3$,19,J1,J0,6,C0,"","{3"+X$,"","FM2MPB24","","",""
2420 IF NUM(A$(J0,6),ERR=2410)<0 THEN GOTO 2410
2440 GOTO 2020
2450 REM "Default O/P Warehouse Code
2455 X$="Last 3 digits of warehouse code to suggest during order entry"
2460 CALL "ZZENTR","SZ",A{ALL},A$,X4$,X3$,19,20,192,3,C0,"","{3"+X$,"","FM2MPB26","","",""
2490 GOTO 2020
2500 REM "Send invoices to line 1, WO120604
2510 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,44,11,198,35,C0,"","{3"+X$,"","FM2MPB28","","",""
2540 GOTO 2020
2550 REM "Send invoices to line 2
2560 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,44,12,233,35,C0,"","{3"+X$,"","FM2MPB30","","",""
2590 GOTO 2020
2600 REM "Send invoices to line 3
2610 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,44,13,268,35,C0,"","{3"+X$,"","FM2MPB32","","",""
2640 GOTO 2020
2650 REM "Send invoices to line 4
2660 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,44,14,303,35,C0,"","{3"+X$,"","FM2MPB34","","",""
2690 GOTO 2020
2700 ! Update sell price from lot for billing of BO's? WO156021
2705 X$="Y=Override retain order line sell price OP parameter"
2710 CALL "ZZENTR","Y",A{ALL},A$,X4$,X3$,77,16,338,1,C0,"","{3"+X$,"","FM2MPB36","","",""
2740 GOTO 2020
2750 REM "Company Name for Summary Bill SSP 162471
2760 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,31,21,339,40,C0,"","{3"+X$,"","FM2MPB08","","",""
2790 GOTO 2020
5800 REM "Alt sort keys
5890 RETURN 
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6016)'SB',
6060 PRINT @(2,3+V0),"Division number:",@(0,4+V0),Z0$,
6070 PRINT @(0,5+V0),"Next order number:",@(3,6+V0),"Send proofs to:",@(7,7+V0),"(blank",@(8,8+V0),"for none)",
6080 PRINT @(0,9),"Next Req/Whse Rl#:",@(5,10),"Phone number:",
6090 FOR X=0 TO 8
6100 PRINT @(0,11+X),"Next Order#-Seq ",STR(X+1),":",
6120 NEXT X
6140 PRINT @(0,20),"Default Warehouse:",
6145 PRINT @(26,11),"Send invoices to:",
6147 PRINT @(32,12),"(blank",@(33,13),"for none)",
6150 PRINT @(29,16),"Update sell price from lot for billing of BO's?",
6152 PRINT @(0,21),"Company Name for Summary Bill:",; REM " SSP 162471
6165 PRINT (0,ERR=6166)'SF',
6190 RETURN 
6200 REM "DISPLAY DATA
6215 GOSUB 6450
6220 CALL "ZZDISP","A   ",A$(3,8),"O/P",X3$,"","",19,5,X4$
6224 PRINT @(19,6),A$(11,35),@(19,7),A$(46,35),@(19,8),A$(81,35),
6230 CALL "ZZDISP","A   ",A$(116,8),"O/P",X3$,"","",19,9,X4$
6240 CALL "ZZDISP","P",A$(124,14),"",X3$,X$,"",19,10,X4$
6250 FOR X=0 TO 8
6260 PRINT @(19,11+X),A$(138+X*6,6),
6270 NEXT X
6280 PRINT @(19,20),A$(192,3),
6285 PRINT @(44,11),A$(198,35),@(44,12),A$(233,35),@(44,13),A$(268,35),@(44,14),A$(303,35),
6290 PRINT @(77,16),A$(338,1),
6295 PRINT @(31,21),A$(339,40),; REM " SSP# 162471
6390 RETURN 
6400 REM "WHOLE SCREEN
6405 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,0
6420 GOSUB 6000
6430 IF C9>=0 THEN GOSUB 6200 ELSE GOSUB 6450
6440 IF ABS(C0)>4 THEN C0=ABS(C0)-5
6445 RETURN 
6450 REM "DISPLAY KEYS
6455 IF C9<0 THEN GOTO 6445
6460 PRINT @(19,3),A$(1,2),@(23,3),B$(3,30),
6490 RETURN 
6500 REM "DELETE
6510 REMOVE (Z[1],KEY=A1$,DOM=6511)
6590 GOTO 1630
6600 REM "ALT KEY DATA READS
6605 FIND (Z[2],KEY=A$(1,2),DOM=6606)IOL=0320
6690 RETURN 
6700 REM "ADD ENTRY
6705 IF Z9=0 THEN GOTO 6790 ELSE IF V7$>"" THEN X0=POS(" "<>V7$); IF X0>0 THEN X0=X0-1; GOTO 2038
6710 WRITE (Z[1],KEY=A1$)IOL=0310
6790 GOTO 1630
6800 REM "NEXT ENTRY IN FILE
6805 ON 10*FPT(C0)+2 GOTO 6850,6806
6810 A1$=KEY(Z[1],END=6895)
6820 IF A1$="" THEN GOTO 6800 ELSE IF A1$(1,LEN(K9$))<>K9$ THEN GOTO 6895
6825 A$(1,LEN(A1$))=A1$
6830 GOSUB 6600
6835 GOSUB 6450
6840 GOTO 1515
6850 REM "PRIOR ENTRY
6855 CALL "ZZKEYP",ERR=6856,Z[1],A1$; GOTO 6820
6860 CALL "ZZKEYL",ERR=6861,Z[1],A1$; GOTO 6820
6870 GOTO 6895
6890 GOTO 1515
6895 PRINT 'RB',; READ (Z[1],KEY=K9$,DOM=1140); GOTO 1140
7200 REM "Forced read 
7210 IF ERR<>0 THEN GOTO 9000
7220 CALL "ZZREAD",Z[1],A1$,A$,A{ALL},S8; ON S8 GOTO 7221,1630
7230 GOSUB 6200
7240 CALL "ZZPROM","E0",X3$,0,"","","",0; GOTO 7290
7250 CALL "ZZPROM","E0A",X3$,0,"","","",0; GOTO 7290
7290 GOTO 1630
7300 REM 
7310 ON FPT(C0)*10 GOTO 7390,7325,7330,7390
7325 IF V8$="" THEN X0=X0+4; GOTO 7390 ELSE X0=NUM(V8$(POS(STR(X0:"00")<=V8$,2),2)); GOTO 7390
7330 IF V8$="" THEN X0=X0-6; GOTO 7335 ELSE X0=POS(STR(X0-1:"00")<=V8$,2)-2; IF X0<0 THEN X0=0; GOTO 7390 ELSE X0=NUM(V8$(X0,2)); GOTO 7390
7335 IF X0<0 THEN X0=0; GOTO 7390
7390 IF X0>0 THEN X0=X0-0
7395 C0=3; RETURN 
7400 REM "EXTRACT
7410 EXTRACT (Z[1],ERR=7200,KEY=A1$,DOM=7440)IOL=0310
7420 C9=1,Z9=1; GOSUB 5800
7440 RETURN 
7450 REM "EXTRACT NEW ENTRY
7460 WRITE (Z[1],KEY=A1$,DOM=7250)IOL=0310; GOTO 7400
7490 RETURN 
8910 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
8915 DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
9000 REM "ERROR PROCESSING
9010 Y5=ERR,Y6=TCB(5); IF Y5=68 OR Y5=69 THEN GOTO 9500
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9120 ON Y8 GOTO 9900,0990,9920
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)<>"1" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; SETESC 9300; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9740 RETURN 
9750 REM "FILES
9760 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
9790 RETURN 
9800 REM "EXIT PROGRAM
9900 REM "END PROGRAM
9905 Y8=2
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
56001 REM "277659-Modify Division Next Order# sequence logic, allow for alpha 
