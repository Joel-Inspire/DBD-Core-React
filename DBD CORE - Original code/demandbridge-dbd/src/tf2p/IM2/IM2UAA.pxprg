0010 REM "<IM2UAA> Import Management Software Processing
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 12/28/18 - 12.45 - crg - SSP# 305184
0037 REM "305184-Stuck in import with error 12                               
0040 REM "Copyright 2018 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 REM "IM2UAA is run from IM2RAS, GRS,P2, this is the older version of the Import Module, it's used for the Restocking GW only.  IM2UBA is run from IM2RBS, I/M,P1 and is used for all other import processing.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000
0110 X0$="IM2UAA",X1$="Import Management Software Processing"
0120 DIM Z0$(80,"-")
0130 K0=20,K1=1
0135 C9=-1
0200 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0300 REM "IOLISTS
0320 IM0_IOLIST:IOLIST IM0$
0330 IM1_IOLIST:IOLIST IM1$
0340 IM2_IOLIST:IOLIST IM2$
0350 IM3_IOLIST:IOLIST IM3$
0370 IM4_IOLIST:IOLIST IM4$
0380 IM5_IOLIST:IOLIST IM5$
0390 ZA1_IOLIST:IOLIST ZA1$
0400 ZA0_IOLIST:IOLIST ZA0$,ZA0[0],ZA0[1]
0410 IM8_IOLIST:IOLIST IM8$
0420 IOLIST X3$,X4$,V1$,V3$,V2$,V0$
0500 REM "FILES
0501 CLOSE (14); OPEN (14)"IM7"+X3$(9,3); CLOSE (14); GOTO 0503 ! 305184
0502 SERIAL "IM7"+X3$(9,3),0,0
0503 ERASE "IM6"+X3$(9,3) ! 305184
0504 SERIAL "IM6"+X3$(9,3),0,0
0505 DIM Z[NUM(X3$(60,3))]; GOSUB 7400; IF V0$(1,6)="IM2RAA" THEN Q1$="*"
0510 Z$="02O IM0... 03O IM1... 05O IM3... 06O IM6... 07O IM4... 08O IM5... 09O ZA1... 10O ZA0... 11O IM8... 12O IM7... 13O ZZPARM "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0530 FID_6$=FN%FID$(Z[6]); CLOSE (Z[6]); OPEN LOCK (Z[6],OPT="TEXT")FID_6$(4,6) ! [205703]-changed FID() to FN%FID$()  
0534 FID_12$=FN%FID$(Z[12]); CLOSE (Z[12]); OPEN LOCK (Z[12],OPT="TEXT")FID_12$(4,6) ! [205703]-changed FID() to FN%FID$() 
0550 IF Q1$="*" THEN IMPORT_CODE$=V0$(73,10)
0555 FIND (Z[2],KEY=IMPORT_CODE$,DOM=0556)IOL=IM0_IOLIST; GOTO 0560
0556 IF Q1$<>"" THEN MESSAGE$="Specified Import Code "+IMPORT_CODE$+" was not found!"; GOTO EXIT_ERR ELSE PRINT @(0,3),'CE',; INPUT @(0,10),"Import Code to use: ",IMPORT_CODE$; IF CTL=4 THEN GOTO 9900 ELSE IMPORT_CODE$=PAD(UCS(IMPORT_CODE$),10); GOTO 0555
0560 LOGGING_LEVEL=0; LOGGING_LEVEL=NUM(IM0$(331,2),ERR=0561)
0570 MESS_LEVEL=0; MESSAGE$="Starting Import of code "+IM0$(1,10); GOSUB LOG_MESSAGE
0600 REM "
0610 GOSUB 6000
0640 IF Q1$="" THEN CALL "ZZPROM",".Y",X3$,Z,"PROCEED?","","",0; ON Z GOTO 0641,9900
0700 REM "Call Device to get started
0705 FIND (Z[5],KEY=IM0$(41,10),DOM=0706)IOL=IM3_IOLIST; GOTO 0710
0706 MESSAGE$="Device code: "+IM0$(41,10)+" not found!"; GOTO EXIT_ERR
0710 MESS_LEVEL=1,MESSAGE$="Executing Device Code: "+STP(IM0$(41,10),1)+"-"+IM3$(11,30); GOSUB LOG_MESSAGE; MESS_LEVEL=1,MESSAGE$=STP(IM3$(41,120),1); GOSUB LOG_MESSAGE
0715 IF IM3$(41,1)="!" THEN CALL "ZZ2CMD",X3$,X4$,STP(IM3$(42,119),1),"","IN",COMM_CODE,COMM_CODE$; GOTO DEVICE_CODE_DONE; REM "WO144867, call system command program
0720 CLOSE (14); OPEN (14)"< "+STP(IM3$(41,120),1); REM "Use open with SHELL option to do system call so the output won't go to the screen
0721 READ (14,END=0722)TMP$; GOTO 0721
0722 CLOSE (14)
0724 DEVICE_CODE_DONE:
0725 MESS_LEVEL=1,MESSAGE$="Finished Device Code: "+IM0$(41,10); GOSUB LOG_MESSAGE
0750 REM "Get Read Method and open file to be sure it exists
0755 FIND (Z[7],KEY=IM0$(111,10),DOM=0756)IOL=IM4_IOLIST; GOTO 0760
0756 MESSAGE$="Read Method: "+IM0$(111,10)+" not found!"; GOTO EXIT_ERR
0760 READ_METHOD$=STP(IM4$(41,8),1),READ_OPTION$=STP(IM0$(121,60),1)
0800 REM "Load FIELDS$[] from IM1 records
0805 DIM FIELDS$[100]; FINDEX=0; READ (Z[3],KEY=IMPORT_CODE$,DOM=0806)
0810 READ (Z[3],END=0840)IOL=IM1_IOLIST; IF IM1$(1,LEN(IMPORT_CODE$))<>IMPORT_CODE$ THEN GOTO 0840
0815 FIELDS$[FINDEX]=IM1$; FINDEX=FINDEX+1
0835 GOTO 0810
0840 IF FINDEX=0 THEN MESSAGE$="No field definitions found!"; GOTO EXIT_ERR
0850 REM "Load Bert fields into BERT$[] and BERT_KEY$, pos (,20) in BERT_KEY$ gives index into BERT$[]
0855 DIM BERT$[100]; BERT_KEY$="",BINDEX=0; READ (Z[9],KEY=IM0$(311,20),DOM=0856)
0860 READ (Z[9],END=0890)IOL=ZA1_IOLIST; IF ZA1$(1,20)<>IM0$(311,20) THEN GOTO 0890
0865 BERT$[BINDEX]=ZA1$; BERT_KEY$=BERT_KEY$+ZA1$(21,20),BINDEX=BINDEX+1
0885 GOTO 0860
0890 REM "Get ZA0 info
0895 DIM ZA0[1]; READ (Z[10],KEY=IM0$(311,20),DOM=0896)IOL=ZA0_IOLIST; GOTO 0897
0896 MESSAGE$="Bert Database: "+IM0$(311,20)+" not found!"; GOTO EXIT_ERR
0900 REM "Get Write Method
0905 FIND (Z[11],KEY=IM0$(181,10),DOM=0906)IOL=IM8_IOLIST; GOTO 0910
0906 MESSAGE$="Write Method: "+IM0$(181,10)+" not found!"; GOTO EXIT_ERR
0910 WRITE_METHOD$=STP(IM8$(41,8),1),WRITE_OPTION$=STP(IM0$(191,60),1)
0929 REM "Open output file as TMP+fid(0)
0930 CALL WRITE_METHOD$,X3$,X4$,"O"+"TMP"+FID(0),WRITE_OPTION$,"",RET_CODE,WRITE${ALL}
0935 IF RET_CODE<>0 THEN MESS_LEVEL=0,MESSAGE$="Unable to open output file "+"TMP"+FID(0)+" due to error code "+STR(RET_CODE); GOTO EXIT_ERR
1000 REM "Get list of files to process
1004 FILE_SPEC$=STP(IM0$(51,60),1)
1005 MESS_LEVEL=1,MESSAGE$="Checking for files using filename "+FILE_SPEC$; GOSUB LOG_MESSAGE
1010 CALL "ZZ2BLS","D0:"+FILE_SPEC$,"S",F$
1012 MESS_LEVEL=1,MESSAGE$="File list returned: "+F$; GOSUB LOG_MESSAGE
1015 P=POS(":"=F$); IF P=0 THEN GOTO 5000
1020 F1$=F$(P+1); P1=POS(":"=F1$); IF P1>0 THEN F$=F1$(P1-2),F1$=F1$(1,P1-3) ELSE F$=""
1030 MESS_LEVEL=1,MESSAGE$="Processing file: "+F1$; GOSUB LOG_MESSAGE
1035 MESS_LEVEL=2,MESSAGE$="Call "+READ_METHOD$+" to open file: "+F1$+" with options: "+STP(IM0$(121,60),1); GOSUB LOG_MESSAGE
1040 GOSUB 8100
1050 CALL READ_METHOD$,X3$,X4$,"O"+F1$,READ_OPTION$,"",RET_CODE,READ${ALL}
1055 IF RET_CODE<>0 THEN MESS_LEVEL=0,MESSAGE$="Unable to open file "+F1$+" due to error code "+STR(RET_CODE); GOSUB LOG_MESSAGE; GOTO 1015
1100 REM "Read records in
1105 CALL READ_METHOD$,X3$,X4$,"R",READ_OPTION$,RECORD$,RET_CODE,READ${ALL}
1108 IF RET_CODE=2 THEN GOTO 1195; REM "if end of file go to next file
1109 MESS_LEVEL=9,MESSAGE$="GOT RECORD:"+RECORD$+"|"; GOSUB LOG_MESSAGE
1110 DIM OUTPUT$(ZA0[0])
1115 FINDEX=0,REC_INDEX=1,REJECT_RECORD=0
1120 WHILE FIELDS$[FINDEX]<>""
1123 C=C+1; IF MOD(C,T0)=1 THEN GOSUB 8150
1125 GOSUB PROCESS_FIELD
1130 FINDEX=FINDEX+1
1145 WEND 
1150 IF REJECT_RECORD THEN WRITE (Z[12])IMPORT_CODE$+RECORD$ ELSE CALL WRITE_METHOD$,X3$,X4$,"W",WRITE_OPTIONS$,OUTPUT$,RET_CODE,WRITE${ALL}
1190 GOTO 1105
1195 GOTO 1015
1200 PROCESS_FIELD:REM "FINDEX points to field definition in FIELDS$[], so do the processing indicated
1205 FLD$=FIELDS$[FINDEX]
1206 MESS_LEVEL=10,MESSAGE$="Processing field# "+FLD$(11,3)+" "+FLD$; GOSUB LOG_MESSAGE
1210 IF STP(FLD$(67,30),3," ")="" THEN VALUE$=""; GOTO 1211 ELSE VALUE$=STP(FLD$(67,30),1); GOTO 1220
1215 IF STP(FLD$(14,3),3," ")="" OR FN%NMV(FLD$(14,3))=0 THEN GOSUB GET_ELEMENT_WITH_FS ELSE LENGTH=NUM(FLD$(14,3)); IF REC_INDEX+LENGTH-1>LEN(RECORD$) THEN VALUE$=RECORD$(REC_INDEX),REC_INDEX=LEN(RECORD$) ELSE VALUE$=RECORD$(REC_INDEX,LENGTH),REC_INDEX=REC_INDEX+LENGTH
1220 MESS_LEVEL=10,MESSAGE$="Field# "+FLD$(11,3)+" value is "+VALUE$+"|"; GOSUB LOG_MESSAGE
1230 IF STP(FLD$(27,10),3," ")="" THEN GOTO 1235 ELSE FORMAT_KEY$=FLD$(27,10); GOSUB GET_FORMAT_METHOD; IF FORMAT_METHOD$<>"" THEN OPTION$=STP(FLD$(37,20),1),OLD_VALUE$=VALUE$
1231 IF POS(X3$(9,3)="449500",3)>0 AND FLD$(1,3)="OCC" AND FLD$(11,3)="002" OR FLD$(11,3)="004" THEN OPTION$=OUTPUT$(7,10)
1232 EXECUTE "1233 CALL FORMAT_METHOD$,ERR=1234,X3$,X4$,OPTION$,OLD_VALUE$,VALUE$,A"+FLD$(11,3)+"_1$[ALL],RETURN_CODE"
1233 CALL FORMAT_METHOD$,ERR=1234,X3$,X4$,OPTION$,OLD_VALUE$,VALUE$,A002_1${ALL},RETURN_CODE
1234 MESS_LEVEL=10,MESSAGE$="Called "+STP(FLD$(27,10),1)+" with options:"+STP(FLD$(37,20),1)+"| old_value$="+OLD_VALUE$+"| new value="+VALUE$+"| Return code: "+STR(RETURN_CODE); GOSUB LOG_MESSAGE
1235 IF STP(FLD$(150,10),3," ")="" THEN GOTO 1240 ELSE FORMAT_KEY$=FLD$(150,10); GOSUB GET_FORMAT_METHOD; IF FORMAT_METHOD$<>"" THEN OPTION$=STP(FLD$(160,20),1),OLD_VALUE$=VALUE$
1237 EXECUTE "1238 CALL FORMAT_METHOD$,ERR=1239,X3$,X4$,OPTION$,OLD_VALUE$,VALUE$,A"+FLD$(11,3)+"_2$[ALL],RETURN_CODE"
1239 MESS_LEVEL=10,MESSAGE$="Called "+STP(FLD$(150,10),1)+" with options:"+STP(FLD$(160,20),1)+"| old_value$="+OLD_VALUE$+"| new value="+VALUE$+"| Return code: "+STR(RETURN_CODE); GOSUB LOG_MESSAGE
1248 MESS_LEVEL=10,MESSAGE$="Field# "+FLD$(11,3)+" value before BERT formatting is "+VALUE$+"|"; GOSUB LOG_MESSAGE
1250 REM "Get Bert info using BERT_KEY$ and BERT$[] and put field into OUTPUT$ if BERT field is blank then just skip it, the field is not being moved into OUTPUT$
1253 IF STP(FLD$(97,20),3," ")="" THEN GOTO 1295
1255 BINDEX=POS(FLD$(97,20)=BERT_KEY$,20); IF BINDEX=0 THEN REJECT_RECORD=1,MESS_LEVEL=0,MESSAGE$="Field "+FLD$(11,3)+" Bert field:"+FLD$(97,20)+"| not found!"; GOSUB LOG_MESSAGE; GOTO 1295 ELSE BINDEX=(BINDEX-1)/20
1260 BERT_FLD$=BERT$[BINDEX]
1270 GOSUB BERT_FORMATTING; REM "Additional formatting based on BERT settings
1272 MESS_LEVEL=10,MESSAGE$="Field# "+FLD$(11,3)+" value after BERT formatting is "+VALUE$+"|"; GOSUB LOG_MESSAGE
1280 OUTPUT$(NUM(BERT_FLD$(90,3)),NUM(BERT_FLD$(93,3)))=VALUE$
1295 PROCESS_FIELD_END:RETURN 
2000 GET_ELEMENT_WITH_FS:REM "Given field sep string, find field, then increment REC_INDEX
2005 FS$=STP(FLD$(17,10),1)
2010 IF FLD$(11,1)="X" THEN GOTO GET_ELEMENT_WITH_FS_END
2011 FS_RECORD$=RECORD$(REC_INDEX)
2012 Q=POS(FS$=FS_RECORD$)
2013 IF Q=0 THEN VALUE$=FS_RECORD$; GOTO GET_ELEMENT_WITH_FS_END
2015 VALUE$=RECORD$(REC_INDEX,Q-1),REC_INDEX=REC_INDEX+Q
2045 GET_ELEMENT_WITH_FS_END:RETURN 
2050 GET_FORMAT_METHOD:REM "Read IM5 with FORMAT_KEY$ to get IM5 record, return FORMAT_METHOD$ to call. IF not found, log it, set FORMAT_METHOD to "' AND CONTINEU
2055 FORMAT_METHOD$=""
2060 FIND (Z[8],KEY=FORMAT_KEY$,DOM=2061)IOL=IM5_IOLIST; GOTO 2062
2061 REJECT_RECORD=1,MESS_LEVEL=0,MESSAGE$="Did not find format method: "+FORMAT_KEY$+"|"; GOSUB LOG_MESSAGE
2070 FORMAT_METHOD$=STP(IM5$(41,8),1)
2095 GET_FORMAT_METHOD_END:RETURN 
2100 BERT_FORMATTING:REM "Perform standard type formatting based on informationin BERT DB, based on data type, numeric precision, etc.
2105 IF POS("Z"=BERT_FLD$(81,6))<>0 THEN IF FN%NMV(VALUE$)=1 THEN VALUE$=PAD(STP(VALUE$,2),NUM(BERT_FLD$(93,3),ERR=2106),0,"0",ERR=2106); REM "If z type, and numeric value, then remove leading & trailing blanks, Pad to max length(from BERT data), right justify & fill with 0's
2195 BERT_FORMATTING_END:RETURN 
5000 REM "EOJ
5003 CALL WRITE_METHOD$,X3$,X4$,"C",WRITE_OPTION$,"",RET_CODE,WRITE${ALL}
5004 ERASE STP(IM0$(251,60),1),ERR=5005; GOTO 5004
5005 RENAME "TMP"+FID(0),STP(IM0$(251,60),1)
5010 PRINT @(0,15),'CE',
5015 C=T; GOSUB 8150
5020 IF Q1$="" THEN CALL "ZZPROM",".4",X3$,Z,"PROCESS COMPLETE!!","","",0
5030 IF Q1$="*" THEN Y4$="IM2RAA"
5035 PROCESSED$="Y"
5040 GOTO 9900
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6016)'SB',
6020 PRINT @(0,3),'CE',@(10,5),"Import code: ",IMPORT_CODE$,@(23,6),IM0$(11,30),
6165 PRINT (0,ERR=6166)'SF',
6190 RETURN 
7400 REM "Read report selection parameters"
7410 Z$="12O ZZP     "
7420 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,0; ON Z0 GOTO 7421,9900
7430 Y3$=X3$(1,6),Y4$=X3$(178,7)
7450 READ (Z[12],KEY=X3$(1,8),DOM=7451)IOL=0420
7480 X3$(178,7)=Y4$,V0=NUM(V0$(71,1)),W3$=V0$(19,POS("   "=V0$(19,40)+"   ")-1)
7485 FOR U1=1 TO LEN(V1$); IF V1$(U1,1)=" " THEN V1$(U1,1)="."; NEXT U1 ELSE NEXT U1
7490 RETURN 
7500 REM "Convert date q$ into q0$
7501 REM "Q$ in YYYYMMDD format
7505 Q0$=""
7510 IF LEN(Q$)<8 THEN GOTO 7545 ELSE Q1$=Q$(7,2)
7515 IF Q1$<"50" THEN Q1$="20"+Q1$ ELSE Q1$="19"+Q1$
7520 Q0$=CHR(NUM(Q1$(1,3),ERR=7521)-125)+Q1$(4,1)+Q$(1,2)+Q$(4,2)
7545 RETURN 
7550 EXIT_ERR:REM "Log Serious Error, then leave
7555 MESSAGE$="**FATAL ERROR**"+MESSAGE$
7560 MESS_LEVEL=0; GOSUB LOG_MESSAGE
7595 EXIT_ERR_END:GOTO 9900
7600 LOG_MESSAGE:REM "Write a message to the log file IM6
7601 REM "only record MESS_LEVEL <= LOGGING_LEVEL from IM0, levels 0 are always logged. Clear message when done and set MESS_LEVEL to -1 to indicate it has not been set; MESS_LEVEL = -1 are not logged
7605 IF (MESS_LEVEL=0 OR MESS_LEVEL<=LOGGING_LEVEL) AND MESS_LEVEL<>-1 AND MESSAGE$<>"" THEN PRINT (Z[6])FN%CDS$+" "+STR(MESS_LEVEL:"00")+" "+MESSAGE$
7620 MESS_LEVEL=-1; MESSAGE$=""
7645 LOG_MESSAGE_END:RETURN 
8100 REM "GOSUB here, once at the beginning, after the background is set and before the Proceed? question.  Set T to total # to do (by calling ZZINFO) and T0 to the reporting interval (report every T0 number of records) this is typically 2% of total; This also prints a message (@8115), so adjust accordingly
8105 T=0
8110 CLOSE (14); OPEN LOCK (14,OPT="TEXT")F1$
8113 REM "LET T$=KEY(Z[14],END=08125)
8115 READ (14,END=8125)A$
8117 T=T+1
8119 GOTO 8113
8125 CLOSE (14)
8126 PRINT @(0,9),"There are "+STR(T)+" records to process"
8129 REM "Set T0, we make sure T0>1, because later on we MOD and look for a value of 1.  If T0 is 1, then nothing would get reported.  We look for a result of 1 because this causes the first record to automatically start the reporting intead of waiting until the T0'th record to get the first report
8130 T0=INT(T*.02); IF T0<=1 THEN T0=2
8145 RETURN 
8150 REM "Call this each time to update the bar graph. Display horiz. bar graph given total #, T and current #,C, and time counter T1 (t1 is init'ed here and used here, just don't use it somewhere else)
8155 CALL "ZZBARG",X3$,"HG",19,10,50,T1,T,C
8195 RETURN 
8910 DEF FNS$(Z9$)=Z9$(1,POS("     "=Z9$+"      ")-1)
9000 REM "ERROR PROCESSING
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9900 REM "END PROGRAM
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9919 IF POS(" "<>V0$(92,8))>0 AND PROCESSED$="Y" THEN CALL V0$(92,8),ERR=9920,X3$,X4$,"",V0$(73,10),"",DATA_ARRAY${ALL},RET_CODE; IF RET_CODE=1 THEN RUN "ZMENU"
9930 SETERR 9940; IF Y4$<>"" THEN RUN Y4$
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
56000 REM + Modification History
56002 REM "205703-Oracle - FID and FIB calls, replace with FN%FID$ and FN%FIB$
56003 REM "305184-Stuck in import with error 12                               
