0010 REM "Shipping Manifest Scale Interface <DP2SCL>
0020 SETESC 9300; SETERR 9000
0035 REM "4.0 - 09/25/96 - 16.25 - kmc - SSP# 074944
0040 REM "Copyright 1996 Computer Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000
0110 X0$="DP2SCL",X1$="Shipping Manifest Scale Interface"
0120 DIM Z0$(80,"-")
0130 K0=20,K1=1
0135 C9=-1
0200 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0250 FID_0$=FID(0)
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0300 REM "IOLISTS
0310 FS1_IOLIST:IOLIST FS1$
0320 FS2_IOLIST:IOLIST FS2$,FS2[0],FS2[1],FS2[2],FS2[3],FS2[4],FS2[5],FS2[6],FS2[7],FS2[8],FS2[9],FS2[10],FS2[11],FS2[12],FS2[13],FS2[14],FS2[15],FS2[16],FS2[17],FS2[18],FS2[19],FS2[20],FS2[21],FS2[22],FS2[23]
0330 PO3_IOLIST:IOLIST PO3$,PO3[0],PO3[1],PO3[2],PO3[3]
0340 AR1_IOLIST:IOLIST AR1$
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01O FS1...  02O FS2... 03O PO3... 04O AR1... 13O ZZPARM  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0600 OPEN (32500)"TW"
0710 PRINT @(0,3),
0805 IF FID_0$(1,1)<>"G" THEN INPUT @(0,3),"Debug? ",TEMP$; IF POS(TEMP$="Yy")<>0 THEN DEBUG=1 ELSE DEBUG=0
0810 MESS_SEP$="|"
1000 REM "Input from scale, and handle event
1010 INPUT (32500,TIM=10,ERR=ERR_ON_READ)RECV$
1011 IF DEBUG THEN PRINT "RECV$=",RECV$
1015 GOSUB DECODE_IN
1016 PRINT "INVALID_MESS=",INVALID_MESS," IN_INDEX=",IN_INDEX
1020 IF INVALID_MESS OR IN_INDEX=0 THEN GOTO 1010
1030 IF DEBUG THEN FOR I=0 TO IN_INDEX; PRINT I:"  0",". >",IN$[I],"<"; NEXT I
1040 ON (POS(IN$[1]="D0L0D4L4D8",2)+1)/2 GOSUB NO_MATCH,GET_D0,GET_L0,GET_D4,GET_L4,GET_D8
1095 GOTO 1000
1100 ERR_ON_READ:REM " handle any errs on read, should be err=0 from timeouts
1110 IF DEBUG THEN PRINT "ERR=",ERR
1145 ERR_ON_READ_END:GOTO 1010
1200 DECODE_IN:REM "Decode input message, verify we have received compelete message enclosed in []'s, check checksum, if used, then break into fields seperated by the '|' character. Fields go into the IN$[] array. IN$[0] is original unaltered message.
1201 REM "Assume < 50 fields for now
1205 DIM IN$[50]; IN$[0]=RECV$,IN_INDEX=0,INVALID_MESS=0; IF LEN(RECV$)<4 THEN GOTO DECODE_IN_END
1210 REM "Check Checksum here
1220 IF RECV$(1,1)<>"[" THEN INVALID_MESS=1; GOTO DECODE_IN_END ELSE RECV$=RECV$(2); REM "IF message doesn't start with a [ then we lost part of it
1230 P=POS("|"=RECV$); IF P=0 THEN P=POS("]"=RECV$) END_IF ; IF P=0 THEN INVALID_MESS=1; GOTO DECODE_IN_END; REM "IF no more"|' AND NO ENDING ']' THEN WE HAVE AN INVALID MESSAGE
1235 IN_INDEX=IN_INDEX+1; IN$[IN_INDEX]=RECV$(1,P-1),SEPERATOR$=RECV$(P,1),RECV$=RECV$(P+1); IF SEPERATOR$="]" THEN GOTO DECODE_IN_END ELSE GOTO 1230; REM "IF seperator was the ']' then it is the last character, so we are done
1295 DECODE_IN_END:RETURN 
2000 NO_MATCH:REM "Command didn't match, try again
2045 NO_MATCH_END:GOTO 1000
2100 GET_D0:REM "D0 - request order header: expect order #+ ship to code, decode, retrieve order info, and set curr_order$
2105 CURR_ORDER$="",ORDER_NO$=IN$[2]; REM "Order number is 2nd field
2106 REM "Field should be order #+ship to code. Ship to code is assumed to be last character no matter what. order number is what is left, adjusted to 8 positions.'
2107 IF LEN(ORDER_NO$)<2 THEN GOTO 2195; REM "Invalid order
2110 SHIP_TO_CODE$=ORDER_NO$(LEN(ORDER_NO$),1),ORDER_NO$=ORDER_NO$(1,LEN(ORDER_NO$)-1); IF LEN(ORDER_NO$)>8 THEN ORDER_NO$=ORDER_NO$(1,8) ELSE IF LEN(ORDER_NO$)<8 THEN IF FN%NMV(ORDER_NO$)=0 THEN ORDER_NO$=ORDER_NO$+DIM(8-LEN(ORDER_NO$)) ELSE ORDER_NO$=STR(NUM(ORDER_NO$):DIM(8,"0"))
2120 FIND (Z[1],KEY=ORDER_NO$,DOM=2195)IOL=FS1_IOLIST
2122 FIND (Z[4],KEY=FS1$(6,10),DOM=2123)IOL=AR1_IOLIST
2125 REM "Set SHIP_TO_DONE to 0, if SHIP_TO_CODE$ is ' ' then read in general instrucations and SHIP_TO_DONE is 1, else SHIP_TO_DONE is 0 and SHIP_TO$ will be read from special shipping when we find a line to send. If no lines match, then that would be an error
2126 DIM PO3$(300),PO3[3],SHIP_TO$(300)
2127 SHIP_TO_DONE=0; IF SHIP_TO_CODE$=" " THEN FIND (Z[3],KEY=ORDER_NO$+DIM(5),DOM=2195)IOL=PO3_IOLIST; SHIP_TO$=PO3$,SHIP_TO_DONE=1
2130 READ (Z[2],KEY=ORDER_NO$,DOM=2131)
2132 NUM_LINES=0,LINES_SENT=0; DIM FS2$(228),FS2[23],LINE_INFO$[200],LINE_QTY[200]
2135 READ (Z[2],END=2150)IOL=FS2_IOLIST; IF FS2$(147,8)<>ORDER_NO$ THEN GOTO 2150
2140 NUM_LINES=NUM_LINES+1,LINE_INFO$[NUM_LINES]=FS2$,LINE_QTY[NUM_LINES]=FS2[0]
2149 GOTO 2135
2180 GOSUB SEND_D3
2195 GET_D0_END:RETURN 
2200 GET_L0:REM "L0 request line info
2205 MESS$=""
2206 IF DEBUG THEN PRINT "LINES_SENT=",LINES_SENT
2210 IF LINES_SENT=NUM_LINES THEN FIELD$="L1"; GOSUB ADD_FIELD; GOSUB SEND_MESS; GOTO GET_L0_END; REM "If all lines have been sent, send L1 to say stop sending line info requests (L0's)
2212 LINES_SENT=LINES_SENT+1
2215 FIELD$="L3"; GOSUB ADD_FIELD; REM "L3 type message
2218 FIELD$=LINE_INFO$[LINES_SENT](19,10); GOSUB ADD_FIELD; REM "Item number
2220 FIELD$=LINE_INFO$[LINES_SENT](50,40); GOSUB ADD_FIELD; REM "Description
2225 FIELD$=STR(LINE_QTY[LINES_SENT]); GOSUB ADD_FIELD; REM "Quantity ordered
2227 FIELD$=LINE_INFO$[LINES_SENT](6,3); GOSUB ADD_FIELD; REM "Line number
2240 GOSUB SEND_MESS
2245 GET_L0_END:RETURN 
2250 GET_D4:REM "D4 - Box Info
2255 GOSUB SEND_ACK
2295 GET_D4_END:RETURN 
2300 GET_L4:REM "L4 - Line shipping info
2305 GOSUB SEND_ACK
2395 GET_L4_END:RETURN 
2400 GET_D8:REM "D8 - Order Total info
2405 GOSUB SEND_ACK
2445 GET_D8_END:RETURN 
3000 SEND_D3:REM "D3 - Order head info
3003 MESS$=""
3005 FIELD$="D3"; GOSUB ADD_FIELD; REM "D3 type message
3010 FIELD$=SHIP_TO$(225,30); GOSUB ADD_FIELD; REM "Ship to address
3012 ADDRESS$=SHIP_TO$(46,87); ADDRESS$(79,9)=""; REM "Blank zip on shipto, its supplied by ZIP field
3014 GOSUB ADD_ADDRESS
3018 FIELD$=SHIP_TO$(124,9); GOSUB ADD_FIELD
3020 FIELD$="USA"; GOSUB ADD_FIELD
3022 FIELD$="04"; GOSUB ADD_FIELD; REM "How to ship curr hardened to ups air
3024 FIELD$=FS1$(28,15); GOSUB ADD_FIELD; REM "Customer P/O
3026 FIELD$=AR1$(11,35); GOSUB ADD_FIELD; REM "Customer Name/ Address
3030 ADDRESS$=AR1$(56,87); GOSUB ADD_ADDRESS
3040 GOSUB SEND_MESS
3045 SEND_D3_END:RETURN 
3050 SEND_ACK:REM "Send acknowledgement of receipt of data
3055 MESS$=""
3060 FIELD$="A"; GOSUB ADD_FIELD
3080 GOSUB SEND_MESS
3095 SEND_ACK_END:RETURN 
3800 SEND_MESS:REM "Send MESS$ to scale
3828 IF DEBUG THEN PRINT "MESS$=",MESS$
3830 PRINT (32500)"[",MESS$,"]"
3845 SEND_MESS_END:RETURN 
3900 ADD_FIELD:REM "Add FIELD$ to MESS$ with mess_sep$, strip trailing spaces.
3905 MESS$=MESS$+STP(FIELD$,1)+MESS_SEP$; REM "Strip tailing blanks before adding
3945 ADD_FIELD_END:RETURN 
3950 ADD_ADDRESS:REM "ADDRESS$ will contain standard address format, setup last 3 lines of address, blanks on the last line
3955 ADD_LINES_SENT=0
3960 IF STP(ADDRESS$(1,30),1)<>"" THEN FIELD$=ADDRESS$(1,30); GOSUB ADD_FIELD; ADD_LINES_SENT=ADD_LINES_SENT+1
3965 IF STP(ADDRESS$(31,30),1)<>"" THEN FIELD$=ADDRESS$(31,30); GOSUB ADD_FIELD; ADD_LINES_SENT=ADD_LINES_SENT+1
3969 TEMP$=""
3970 IF STP(ADDRESS$(61,16),1)<>"" THEN TEMP$=STP(ADDRESS$(61,16),1)+", "
3971 CALL "ZZDISP","AX",ADDRESS$(79,9),"ZIP",X3$,T_ZIP$,"",0,0,X4$
3972 TEMP$=TEMP$+STP(ADDRESS$(77,2),1)+"  "+STP(T_ZIP$,1)
3975 FIELD$=TEMP$; GOSUB ADD_FIELD; ADD_LINES_SENT=ADD_LINES_SENT+1
3985 IF ADD_LINES_SENT<3 THEN FIELD$=""; GOSUB ADD_FIELD; ADD_LINES_SENT=ADD_LINES_SENT+1; GOTO 3985
3995 ADD_ADDRESS_END:RETURN 
5000 REM "EOJ
5010 ESCAPE 
5040 GOTO 9900
9000 REM "ERROR PROCESSING
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9900 REM "END PROGRAM
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9945 FID_0$=FID(0); IF FID_0$(1,1)="G" THEN RELEASE 
9950 RUN "ZMENU"
9999 END 
