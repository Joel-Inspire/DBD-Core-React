0010 ! UPDEDD - File EDD Maintenance
0035 REM "5.7 - 04/14/22 - 16.51817 - dmm - SSP# 307309
0037 REM "307309-DBD-113 - Authorize.Net support                             
0040 REM "Copyright 2022 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 ! FILENO - CHANNEL OF OPEN FILE
0051 ! KEYNO  - KEY NUMBER
0052 ! SEG1-SEG5$ : KEY SEGMENTS . CAN BE NULL
0053 ! A$ - RECORD A$
0054 ! FOUND - IF RECORD FOUND, THEN 1 ELSE 0
0055 ! BUSY - IF RECORD BUSY THEN 1 ELSE 0
0056 ! OK - IF RECORD ADDED OK=1 ELSE 0
0310 IOLIST A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6]
0500 INIT:
0505 DIM Z[255]; OPENED=0
0507 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,-1,X1,X2
0510 IF POS("EDD"=PTH(FILENO))=0 THEN Z$="01O EDD...  "; CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; FILENO=Z[1],OPENED=1
0590 RETURN 
0598 ! 
0599 ! 
0600 WRAPUP:
0610 IF OPENED THEN CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
0690 RETURN 
0698 ! 
0699 ! 
1000 READBYKEY:
1010 ENTER FILENO,KEYNO,SEG1$,SEG2$,SEG3$,SEG4$,SEG5$,A$,A{ALL},FOUND
1015 FOUND=0
1020 GOSUB INIT
1025 CALL "UPDEDD;CLEAR_FIELDS",A$,A{ALL}
1049 XP=PRM('XI'); SET_PARAM 'XI'
1050 IF FILENO<>0 THEN READ (FILENO,KNO=KEYNO,KEY=SEG1$+SEG2$+SEG3$+SEG4$+SEG5$,DOM=*NEXT)IOL=0310; FOUND=1
1051 SET_PARAM 'XI'=XP
1080 GOSUB WRAPUP
1090 EXIT 
1098 ! 
1099 ! 
1100 READNEXT:
1110 ENTER FILENO,A$,A{ALL},FOUND
1115 FOUND=0
1120 GOSUB INIT
1125 CALL "UPDEDD;CLEAR_FIELDS",A$,A{ALL}
1149 XP=PRM('XI'); SET_PARAM 'XI'
1150 IF FILENO<>0 THEN READ (FILENO,END=*NEXT)IOL=0310; FOUND=1
1151 SET_PARAM 'XI'=XP
1180 GOSUB WRAPUP
1190 EXIT 
1198 ! 
1199 ! 
1200 READPREV:
1210 ENTER FILENO,A$,A{ALL},FOUND
1215 FOUND=0
1220 GOSUB INIT
1225 CALL "UPDEDD;CLEAR_FIELDS",A$,A{ALL}
1249 XP=PRM('XI'); SET_PARAM 'XI'
1250 IF FILENO<>0 THEN PKEY$=KEP(FILENO,ERR=*NEXT); READ (FILENO,KEY=PKEY$)IOL=0310; FOUND=1
1251 SET_PARAM 'XI'=XP
1280 GOSUB WRAPUP
1290 EXIT 
1298 ! 
1299 ! 
1300 READFIRST:
1310 ENTER FILENO,A$,A{ALL},FOUND
1315 FOUND=0
1320 GOSUB INIT
1325 CALL "UPDEDD;CLEAR_FIELDS",A$,A{ALL}
1349 XP=PRM('XI'); SET_PARAM 'XI'
1350 IF FILENO<>0 THEN PKEY$=KEF(FILENO,KNO=0,ERR=*NEXT); READ (FILENO,KEY=PKEY$)IOL=0310; FOUND=1
1351 SET_PARAM 'XI'=XP
1380 GOSUB WRAPUP
1390 EXIT 
1398 ! 
1399 ! 
1400 READLAST:
1410 ENTER FILENO,A$,A{ALL},FOUND
1415 FOUND=0
1420 GOSUB INIT
1425 CALL "UPDEDD;CLEAR_FIELDS",A$,A{ALL}
1449 XP=PRM('XI'); SET_PARAM 'XI'
1450 IF FILENO<>0 THEN PKEY$=KEL(FILENO,ERR=*NEXT); READ (FILENO,KEY=PKEY$)IOL=0310; FOUND=1
1451 SET_PARAM 'XI'=XP
1480 GOSUB WRAPUP
1490 EXIT 
1498 ! 
1499 ! 
1500 EXTRACTBYKEY:
1510 ENTER FILENO,KEYNO,SEG1$,SEG2$,SEG3$,SEG4$,SEG5$,A$,A{ALL},FOUND,BUSY
1515 FOUND=0,BUSY=0
1525 CALL "UPDEDD;CLEAR_FIELDS",A$,A{ALL}
1549 XP=PRM('XI'); SET_PARAM 'XI'
1550 IF POS("EDD"=PTH(FILENO))=0 THEN BUSY=1 ELSE READ (FILENO,KNO=KEYNO,KEY=SEG1$+SEG2$+SEG3$+SEG4$+SEG5$,DOM=*NEXT)IOL=0310; FOUND=1,BUSY=1,PRIMEKEY$=KEC(FILENO,KNO=0); EXTRACT (FILENO,KEY=PRIMEKEY$,KNO=0,ERR=*NEXT); BUSY=0
1551 SET_PARAM 'XI'=XP
1590 EXIT 
1598 ! 
1599 ! 
1600 INSERT:
1610 ENTER FILENO,A$,A{ALL},OK
1615 OK=0,PRIMEKEY$=A$(1,11)
1620 GOSUB INIT
1650 WRITE (FILENO,KEY=PRIMEKEY$,ERR=*NEXT)IOL=0310; OK=1
1660 GOSUB WRAPUP
1690 EXIT 
1698 ! 
1699 ! 
1700 DELETE:
1710 ENTER FILENO,A$,A{ALL},FOUND,BUSY
1715 FOUND=0,BUSY=1,PRIMEKEY$=A$(1,11)
1720 GOSUB INIT
1750 REMOVE (FILENO,KEY=PRIMEKEY$,DOM=DELETE_END,ERR=*NEXT); BUSY=0
1775 DELETE_END:
1780 GOSUB WRAPUP
1790 EXIT 
1798 ! 
1799 ! 
1800 CLEAR_FIELDS:
1810 ENTER A$,A{ALL}
1820 DIM A$(476),A[7] ! SSP307309-DBD-113
1890 EXIT 
1898 ! 
1899 ! 
1900 UPDATE:
1910 ENTER FILENO,A$,A{ALL},BUSY
1915 BUSY=1,PRIMEKEY$=A$(1,11)
1920 GOSUB INIT
1950 WRITE (FILENO,KEY=PRIMEKEY$,ERR=*NEXT)IOL=0310; BUSY=0
1980 GOSUB WRAPUP
1990 EXIT 
1998 ! 
1999 ! 
2000 CLEAR_LOCK:
2010 ENTER FILENO
2020 GOSUB INIT
2050 READ (FILENO,KNO=0,KEY="",ERR=*NEXT)
2080 GOSUB WRAPUP
2090 EXIT 
2098 ! 
2099 ! 
2200 WRITELOCK:
2210 ENTER FILENO,A$,A{ALL}
2215 PRIMEKEY$=A$(1,11)
2220 GOSUB INIT
2250 WRITE LOCK (FILENO,KEY=PRIMEKEY$,ERR=*NEXT)IOL=0310
2280 GOSUB WRAPUP
2290 EXIT 
2298 ! 
2299 ! 
2500 VALIDATE:
2510 ENTER A$,A{ALL},MSG$
2520 A$=PAD(A$,476),MSG$="" ! SSP307309-DBD-113
2990 EXIT 
2998 ! 
2999 ! 
9999 END 
10000 ! 
10010 ! 
10100 GET_PREV_ENTRY:
10110 ! 
10120 ! Gets last (highest) sequence EDD record for order if it exists,
10130 ! and returned entry guaranteed to be the highest seq. for the order
10140 ! Returns ENTRY_EXISTS - 0 if no entry available, 1 if an entry is found
10150 ! 
10160 SEG3$="ZZZ",SEG4$="",SEG5$=""
10170 DIM Z[255],A[1]
10180 ENTER EDD,ORDER_DIV$,ORDER_NUM$,A$,A{ALL},ENTRY_EXISTS
10190 Z$="01O EDD...  "; IF POS("EDD"=PTH(EDD))=0 THEN GOSUB INIT ELSE Z[1]=EDD,Z$=""
10200 CALL "UPDEDD;READBYKEY",Z[1],0,ORDER_DIV$,ORDER_NUM$,SEG3$,SEG4$,SEG5$,A$,A{ALL},FOUND
10210 CALL "UPDEDD;READPREV",Z[1],A$,A{ALL},FOUND
10220 IF FOUND THEN {
10221 IF A$(1,2)=ORDER_DIV$ AND A$(3,6)=ORDER_NUM$ THEN ENTRY_EXISTS=1 ELSE ENTRY_EXISTS=0; CALL "UPDEDD;CLEAR_FIELDS",A$,A{ALL}
10222  } ELSE {
10223 ENTRY_EXISTS=0; CALL "UPDEDD;CLEAR_FIELDS",A$,A{ALL}
10224  }
10230 IF Z$<>"" THEN GOSUB WRAPUP
10240 EXIT 
10241 ! 
10250 ! 
10500 GET_NEXT_SEQ:
10510 ! 
10520 ! Gets next available valid sequence that should be used for a given order
10530 ! If sequence is maxed out (entry exists with seq. value 999) an error code is returned
10531 ! Note that this does not try to make sure the order itself is valid and/or exists or not
10540 ! Returns NEXT_SEQ - Next valid sequence value or -1 if sequence error condition
10550 ! Returns VALID_SEQ - 1 if valid next sequence value available, 0 if sequence is maxed out or error
10560 ! 
10570 ENTER EDD,ORDER_DIV$,ORDER_NUM$,NEXT_SEQ,VALID_SEQ
10580 ENTRY_EXISTS=0,NEXT_SEQ=-1,CURR_SEQ=0,VALID_SEQ=0
10590 CALL "UPDEDD;GET_PREV_ENTRY",EDD,ORDER_DIV$,ORDER_NUM$,A$,A{ALL},ENTRY_EXISTS
10600 IF ENTRY_EXISTS THEN {! Does a previous EDD entry exist for this order?
10610 CURR_SEQ=NUM(A$(9,3),ERR=ERR_INVALID_SEQ)
10620 IF CURR_SEQ<999 THEN {! Make sure sequence is not maxed out
10630 NEXT_SEQ=CURR_SEQ+1
10640 VALID_SEQ=1
10650  } ELSE {! Sequence maxed out
10660 GOTO ERR_INVALID_SEQ
10670  }
10680  } ELSE {! No EDD entry for this order yet
10690 NEXT_SEQ=1
10700 VALID_SEQ=1
10710  }
10720 ERR_INVALID_SEQ:
10730 EXIT 
10740 ! 
10750 ! 
11100 GET_LAST_INVOICE_ENTRY:
11110 ! 
11120 ! Gets last (highest) sequence EDD record for an invoice if it exists,
11130 ! returned entry guaranteed to be the highest seq. for the invoice
11140 ! Returns ENTRY_EXISTS - 0 if no entry available, 1 if an entry is found
11150 ! 
11160 SEG3$="ZZZ",SEG4$="",SEG5$=""
11170 DIM Z[255],A[1]
11180 ENTER EDD,ORDER_DIV$,ORDER_NUM$,INV_NUM$,A$,A{ALL},ENTRY_EXISTS
11190 Z$="01O EDD...  "; IF POS("EDD"=PTH(EDD))=0 THEN GOSUB INIT ELSE Z[1]=EDD,Z$=""
11200 CALL "UPDEDD;READBYKEY",Z[1],0,ORDER_DIV$,ORDER_NUM$,SEG3$,SEG4$,SEG5$,A$,A{ALL},FOUND
11210 CALL "UPDEDD;READPREV",Z[1],A$,A{ALL},FOUND
11220 IF FOUND AND A$(1,2)=ORDER_DIV$ AND A$(3,6)=ORDER_NUM$ AND A$(9,3)>="001" THEN {
11221 IF MID(A$,213,8)=INV_NUM$ THEN ENTRY_EXISTS=1 ELSE ENTRY_EXISTS=0; CALL "UPDEDD;CLEAR_FIELDS",A$,A{ALL}; GOTO 11210
11222  } ELSE {
11223 ENTRY_EXISTS=0; CALL "UPDEDD;CLEAR_FIELDS",A$,A{ALL}
11224  }
11230 IF Z$<>"" THEN GOSUB WRAPUP
11240 EXIT 
11250 ! 
11300 CHECK_IF_INV_PAID:
11310 ! 
11320 ! Gets last (highest) sequence EDD record for an invoice if it exists,
11330 ! and checks if approval code available.
11340 ! Returns PAID_YN - 0 if not yet paid, 1 if paid (approval code available)
11350 ! 
11360 DIM A[1]
11370 ENTER EDD,ORDER_DIV$,ORDER_NUM$,INV_NUM$,PAID_YN
11380 CALL "UPDEDD;GET_LAST_INVOICE_ENTRY",EDD,ORDER_DIV$,ORDER_NUM$,INV_NUM$,A$,A{ALL},ENTRY_EXISTS
11390 IF ENTRY_EXISTS=0 THEN PAID_YN=0; GOTO CHECK_PAID_DONE
11400 IF NOT(NUL(MID(A$,88,30))) AND STP(MID(A$,88,30),2)<>"DECLINED" AND STP(MID(A$,88,30),2)<>"ERROR" THEN PAID_YN=1; GOTO CHECK_PAID_DONE
11410 PAID_YN=0
11425 CHECK_PAID_DONE:
11440 EXIT 
11450 ! 
56000 ! 
56002 REM "199110-Trying to view credit card inforamtion, hit F7 and got an   
56010 REM "189822-Credit card processing for back orders filled
56012 REM "204668-Credit card invoice processed through Credit Card Plus and  
56014 REM "307309-DBD-113 - Authorize.Net support                             
