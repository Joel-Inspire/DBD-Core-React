0010 REM "<PC2UAA> Import Product Catalog Gateway
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 01/24/24 - 10.93389 - crg - SSP# 307471
0037 REM "307471-DBD-439: Vendor update leaves Plant code unchanged          
0040 REM "Copyright 2024 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 IF %GUI THEN PROCESS "PCGUAA","../PCG/PC.EN"; EXIT 
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$,PCGERR$,ERR=*NEXT ! WO224917
0094 REM "Copied from FC2UAA--FMS count entry gateway,5/21/97
0095 REM "Called from FO2RAS Q0$="", Q1$="*"
0096 REM "Called from FO2GST Q1$="G"
0097 REM "Added support for passing in options in call, support for record lengths > 737 
0100 SETERR 9000
0101 INIT:
0110 X0$="PC2UAA",X1$="Import Product Catalog Gateway"
0120 DIM Z0$(80,"-")
0130 K0=20,K1=1
0135 C9=-1
0136 DIM BLANK$(20)
0140 L0=1060; REM "Record should be 737 long, for version 1.00, will adjust at 1140 if another version WO273055, from 737 to 1046 DBD-112-SSP307283 from 1046 to 1060 1st alt u/m fields
0141 HELPER$="N",COMMA$="N"; IF Q1$="D" THEN CUSTOM$="Y" ELSE CUSTOM$="N"
0142 IF MID(Q0$,1,1)="[" AND MID(Q0$,5,1)="]" THEN GOSUB SET_OPTIONS; Q0$(1)=Q0$(6) ! Options present, process them
0144 IF LEN(Q0$)>=L0 THEN SINGLE_RECORD=1,SINGLE_RECORD_DONE=0; REM "If q0$ is single record then got into single record mode; allow record lengths > 737, see EC3PCG
0145 M0$="000"
0150 COUNT=0; REM "Req count to send back to ghost task
0160 BAD_REC_COUNT=0; REM "Count of records not processed, see 7800's
0170 NEW_COUNT=0; REM "Count of new records set up, see 7900's
0180 UPDATE_COUNT=0; REM "Count of records updated
0200 REM "
0210 IF %GUI THEN X0=-1
0240 IF POS(Q1$="GD")=0 THEN CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920 ! SSP#145202
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0300 REM "IOLISTS
0310 IOLIST IC0$,IC0[0],IC0[1],IC0[2],IC0[3],IC0[4],IC0[5],IC0[6],IC0[7],IC0[8],IC0[9],IC0[10],IC0[11],IC0[12],IC0[13],IC0[14],IC0[15],IC0[16],IC0[17],IC0[18],IC0[19],IC0[20],IC0[21],IC0[22],IC0[23],IC0[24],IC0[25],IC0[26],IC0[27],IC0[28],IC0[29],IC0[30],IC0[31],IC0[32],IC0[33],IC0[34],IC0[35],IC0[36],IC0[37],IC0[38],IC0[39],IC0[40]
0320 IOLIST IC2$,IC2[0],IC2[1],IC2[2],IC2[3],IC2[4],IC2[5],IC2[6],IC2[7],IC2[8],IC2[9],IC2[10],IC2[11],IC2[12],IC2[13],IC2[14],IC2[15],IC2[16],IC2[17],IC2[18],IC2[19],IC2[20],IC2[21],IC2[22],IC2[23],IC2[24],IC2[25],IC2[26],IC2[27],IC2[28],IC2[29],IC2[30] ! WO273055 expand IC2
0330 IOLIST IC1$,IC1[0],IC1[1],IC1[2],IC1[3],IC1[4],IC1[5],IC1[6],IC1[7],IC1[8],IC1[9],IC1[10],IC1[11],IC1[12],IC1[13],IC1[14],IC1[15],IC1[16],IC1[17],IC1[18],IC1[19],IC1[20]
0331 IOLIST IC1$,IC1[0],STR(IC1[1]),STR(IC1[2]),IC1[3],IC1[4],IC1[5],IC1[6],IC1[7],IC1[8],IC1[9],IC1[10],IC1[11],IC1[12],IC1[13],IC1[14],IC1[15],IC1[16],IC1[17],IC1[18],IC1[19],IC1[20]
0340 IOLIST FM1$,FM1[0],FM1[1],FM1[2],FM1[3],FM1[4],FM1[5],FM1[6],FM1[7],FM1[8],FM1[9],FM1[10],FM1[11],FM1[12],FM1[13],FM1[14],FM1[15],FM1[16],FM1[17],FM1[18],FM1[19],FM1[20],FM1[21],FM1[22],FM1[23],FM1[24],FM1[25],FM1[26],FM1[27],FM1[28],FM1[29],FM1[30],FM1[31]
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0509 REM "Slot 1 used for import file opened in 1000's
0510 Z$="02O IC0... 03O AP4... 04O FM0... 05O FMP... 06O IC2... 07O IC4... 08O IC5...  09O ICD...  10O IC1...  11O IC6...  13O ZZPARM  14O FM1...  15O FM2...  16O FMG...  17O FT1...  18O AR1...  19O ECR...  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0600 REM "
0605 IF POS(Q1$="GD")=0 THEN GOSUB 6000
0609 DIM PC_PARM$(13); FIND (Z[13],KEY=X3$(9,3)+"GPC")PC_PARM$
0610 FIND (Z[13],KEY=X3$(9,3)+"I/C")P0$
0612 FIND (Z[13],KEY=X3$(9,3)+"F/M")P1$ ! WO224917
0615 DIM M5[1]; M5$="###,###.00 ",M5[0]=621,M5[1]=2; IF P0$(45,1)>"2" THEN DIM M5$(11,"0"); M5[1]=NUM(P0$(45,1)),M5$(1,10-M5[1])="##########",M5$(POS("0"=M5$),1)=".",M5[0]=(10-M5[1])*100+M5[1]*10
0617 IF Q1$<>"" THEN GOTO 0700; REM "ssp#171787
0620 DIM CUSTOM$(1)
0625 X$="Only fields common to both IC0 and FM1 are available."
0627 IF %GUI THEN ML_X.CTL'VALUE$=X$; REFRESH_FLG=1; RETURN 
0630 CALL "ZZENTR","Y",TMP{ALL},CUSTOM$,X4$,X3$,72,10,1,1,C0,"","{3"+X$,"","PC2UAA02","","",""
0631 DIM HELPER$(1); CALL "ZZENTR","Y",TMP{ALL},HELPER$,X4$,X3$,50,11,1,1,C0,"","{3"+X$,"","PC2UAA02","","",""
0635 DIM COMMA$(1); CALL "ZZENTR","Y",TMP{ALL},COMMA$,X4$,X3$,50,12,1,1,C0,"","{3"+X$,"","PC2UAA02","","",""
0640 IF Q1$="" THEN CALL "ZZPROM",".Y",X3$,Z,"Proceed?","","",0; ON Z GOTO 0641,9900
0650 PROCEED:
0700 REM "Create if necessary and open log files, used to be system calls using echo but needed change to support NT systems, SSP147476
0710 _GW=HFN; OPEN LOCK (_GW,ERR=*NEXT)HWD+DLM+"GW_LOG"; GOTO 0720
0715 IF ERR=12 THEN SERIAL HWD+DLM+"GW_LOG"; GOTO 0710 ELSE _GW=0
0720 _GPC=HFN; OPEN LOCK (_GPC,ERR=*NEXT)HWD+DLM+"GPC_LOG"; GOTO 0730
0725 IF ERR=12 THEN SERIAL HWD+DLM+"GPC_LOG"; GOTO 0720 ELSE _GPC=0
1000 REM "Get list of PC1 files to process
1005 IF SINGLE_RECORD THEN GOTO 1100
1010 CALL "ZZ2BLS","D0:PC1*","S",F$
1012 IF X3$(77,1)="U" THEN CALL "ZZ2BLS","D0:pc1*","S",F_LOWER$; F$=F$+F_LOWER$
1015 P=POS(":"=F$); IF P=0 THEN GOTO 5000
1020 F1$=F$(P+1); P1=POS(":"=F1$); IF P1>0 THEN F$=F1$(P1-2),F1$=F1$(1,P1-3) ELSE F$=""
1050 Z$="01CU 01O "+F1$+" "
1055 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 1056,1995
1060 CLOSE (Z[1]); OPEN LOCK (Z[1],OPT="TEXT")F1$; REM "Open for reading raw file
1065 CLOSE (13); OPEN (13)"ZZPARM"; REM "Re-open ZZPARM closed in ZZ2BLS
1066 IF %GUI THEN ML_X.CTL'VALUE$="Processing: "+F1$; GOTO 1076
1075 IF POS(Q1$="GD")=0 THEN PRINT @(15,15),'CE',"Processing: "+F1$,
1080 IF POS(Q1$="GD")=0 THEN GOSUB 8100; GOSUB 8150
1099 ! 
1100 REM "Process the file
1105 I9=0,PC1$="",REC_COUNT$=""; DIM REC_COUNT[50]
1109 IF SINGLE_RECORD=0 THEN GOTO 1111 ELSE IF SINGLE_RECORD_DONE THEN GOTO 9900 ELSE PC1$=Q0$,L2=0,S1$="0",SINGLE_RECORD_DONE=1; GOTO 1150
1111 READ (Z[1],END=7750)PC1$; I9=I9+1,COUNT=COUNT+1,L2=0,S1$="0"; REM "S1$ is status code
1112 REM "IF COMMA$="Y" THEN PC1$=STP(PC1$(1,LEN(PC1$)),3,QUO)
1113 REM "IF COMMA$="Y" THEN PC1$=STP(PC1$(1,LEN(PC1$)),3,$2C$)
1114 REM "IF COMMA$="Y" THEN PC1$=STP(PC1$(1,LEN(PC1$)),3,$09$); ITEM$=STP(PC1$(7,20),3," ")
1119 P=POS(PC1$(1,3)=REC_COUNT$,3); IF P=0 THEN REC_COUNT$=REC_COUNT$+PC1$(1,3); GOTO 1119; REM "Used to write to /usr/lib/pvx/GW_LOG
1120 P1=(P+2)/3; REC_COUNT[P1]=REC_COUNT[P1]+1
1125 IF POS(Q1$="GD")=0 THEN IF MOD(I9,T0)=1 THEN GOSUB 8150
1130 REM PRINT @(0,3),'CE',@(0,4),PC1$; INPUT *
1140 REM "IF PC1$(4,3)="101" THEN LET L0=310; REM "HEADER OF VERSION 1.01 FILE IS 310 LONG
1142 IF COMMA$="Y" THEN GOSUB 4000; PC1$=RETURN$
1145 IF LEN(PC1$)<L0 THEN I9$=PC1$; DIM PC1$(L0); PC1$(1)=I9$ ! WO273055 record could be in original format/length of 737 ok to process ,REASON$="Record is short"; GOSUB BAD_RECORD; GOTO 1109; REM "Short record, don't process
1150 IF STP(PC1$(7,20),3," ")="" THEN REASON$="Item code is blank"; GOSUB BAD_RECORD; GOTO 1109
1155 GOSUB SET_READONLY ! SSP270992
1160 DIM IC0$(187),IC0[40]; EXTRACT (Z[2],KEY=PC1$(7,20),DOM=1161)IOL=0310; GOSUB UPDATE_RECORD; GOTO 1109; REM "Existing item, update information
1165 GOSUB NEW_RECORD; GOTO 1109; REM "Not found, create new item
1199 ! 
1900 REM "End of file
1901 REM "Close & Rename to PC4 for archiving. Erase an existing PC4 file, if same name
1905 Z$="01CU"+F1$+" "
1906 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
1910 F2$=F1$; IF F2$ LIKE "[Pp][Cc]1*" THEN F2$(1,3)="PC4" ELSE GOTO 1995
1919 REM "Get disk DIRectory of data files
1925 DATAPATH$=%DATAPATH$
1930 REM "Move the file
1935 ERASE DATAPATH$+DLM+F2$,ERR=*PROCEED
1936 RENAME DATAPATH$+DLM+F1$ TO DATAPATH$+DLM+F2$
1995 GOTO 1015
1999 ! 
2000 NEW_RECORD:REM "Create a new IC0 record
2015 IC0$(1,20)=PC1$(7,20)
2020 IF IC0$(1,10)=DIM(10) THEN GOTO 2025 ELSE READ (Z[18],KEY=IC0$(1,10),DOM=*NEXT); GOTO 2025 ! WO224917, validate customer code
2021 REASON$="New item, customer code is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END ! WO224917, customer code supplied is not found in AR1
2025 IF PC1$(67,3)=DIM(3) THEN IC0$(61,3)=PC_PARM$(7,3) ELSE IC0$(61,3)=PC1$(67,3)
2027 IF STP(IC0$(61,3),3," ")="" THEN REASON$="New item, product code is blank"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2030 READ (Z[5],KEY="T"+IC0$(61,3),DOM=2031); GOTO 2035
2031 REASON$="New item, product code is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2035 IC0$(82,10)=PC1$(88,10)
2037 IF STP(IC0$(82,10),3," ")="" THEN REASON$="New item, primary vendor code is blank"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2040 READ (Z[3],KEY=IC0$(82,10),DOM=2041); GOTO 2045
2041 REASON$="New item, primary vendor code is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2045 IC0$(92,4)=PC1$(98,4)
2047 IF POS(" "<>IC0$(92,4))>0 THEN READ (Z[4],KEY="P"+IC0$(82,14),DOM=2048); GOTO 2050 ELSE GOTO 2050
2048 REASON$="New item, plant code is not valid for primary vendor"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2050 IC0$(108,1)="A"; REM "Status flag
2052 IF POS(" "<>PC1$(115,3))>0 THEN READ (Z[5],KEY="I"+PC1$(115,3),DOM=2053); IC0$(109,3)=PC1$(115,3); GOTO 2055 ELSE GOTO 2055; REM "Item price class, was on line 2325, this is a validated field
2053 REASON$="New item, item price class is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2055 IC0$(124,4)=PC1$(130,4)
2057 IF STP(IC0$(124,4),3," ")="" THEN REASON$="New item, unit of measure is blank"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2060 READ (Z[13],KEY="U/M"+IC0$(124,4),DOM=2061); GOTO 2065
2061 REASON$="New item, unit of measure is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2065 IF STP(PC1$(126,4),3," ")="" THEN IC0$(120,4)=IC0$(124,4) ELSE IC0$(120,4)=PC1$(126,4)
2067 READ (Z[13],KEY="U/M"+IC0$(120,4),DOM=2068); GOTO 2070
2068 REASON$="New item, unit of measure is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2070 IF STP(PC1$(344,10),3," ")="" THEN REASON$="New item, quantity per unit is blank"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2072 IC0[15]=NUM(PC1$(344,10),ERR=2073); GOTO 2075
2073 REASON$="New item, quantity per unit is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2075 IF STP(PC1$(334,10),3," ")="" THEN IC0[14]=IC0[15]; GOTO 2078 ELSE IC0[14]=NUM(PC1$(334,10),ERR=2076); GOTO 2078
2076 REASON$="New item, quantity per unit is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2078 IC0[19]=IC0[15]; REM "Carton pack
2080 GOSUB IC0_FIELDS; NEW_COUNT=NEW_COUNT+1
2082 DIM IC2$(115),IC2[30] ! WO273055 expand IC2
2085 IF STP(PC1$(524,10),3," ")="" THEN GOTO NEW_RECORD_END ELSE READ (Z[3],KEY=PC1$(524,10),DOM=2086); IC2$(1,20)=IC0$(1,20),IC2$(21,10)=PC1$(524,10); GOTO 2087
2086 REASON$="New supplier pricing, vendor not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2088 IF POS(" "<>PC1$(534,4))>0 THEN READ (Z[4],KEY="P"+IC2$(21,10)+PC1$(534,4),DOM=2089); IC2$(31,4)=PC1$(534,4); GOTO 2090 ELSE GOTO 2090
2089 REASON$="New supplier pricing, plant not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2090 IC2$(35,20)=PC1$(538,20); REM "Supplier item number
2092 IF STP(PC1$(558,4),3," ")="" THEN REASON$="New supplier pricing, U/M is blank"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2093 READ (Z[13],KEY="U/M"+PC1$(558,4),DOM=2094); IC2$(55,4)=PC1$(558,4); GOTO 2095
2094 REASON$="New supplier pricing, U/M is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2095 IC2[14]=NUM(PC1$(708,10),ERR=2096); IC2[16]=IC2[14]; GOTO 2097
2096 REASON$="New supplier pricing, qty/unit is not valid"; GOSUB BAD_RECORD; GOTO NEW_RECORD_END
2097 GOSUB IC2_FIELDS
2098 NEW_RECORD_END:RETURN 
2099 ! 
2100 UPDATE_RECORD:REM "Update an existing IC0 record
2102 IF Q1$="D" THEN GOTO UPDATE_RECORD_END
2105 IF IC0$(108,1)="I" THEN GOTO UPDATE_RECORD_END; REM "Marked as inactive, don't update
2110 A2$=IC0$(61,3)+IC0$(1,20),A3$=IC0$(82,14)+IC0$(61,3)+IC0$(1,20),A4$=IC0$(61,3),O1=IC0[15]; REM "IC5 & IC4 sort records may need to be removed, also IC6, similar to 6700's and 7400's in IC2MAB, also IC1, similar to 3400's and 7700's in IC2MAB
2115 IF POS(" "<>PC1$(67,3))>0 AND PC1$(67,3)<>IC0$(61,3) THEN READ (Z[5],KEY="T"+PC1$(67,3),DOM=2116); IC0$(61,3)=PC1$(67,3); GOTO 2120 ELSE GOTO 2120
2116 REASON$="Update, product code is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2120 IF POS(" "<>PC1$(88,14))>0 AND PC1$(88,14)<>IC0$(82,14) THEN READ (Z[3],KEY=PC1$(88,10),DOM=2121); IC0$(82,14)=PC1$(88,14); GOTO 2125 ELSE GOTO 2125 ! 307471-Validate vendor only, but assign vendor-plant as a pair
2121 REASON$="Update, primary vendor code is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2125 IF POS(" "<>PC1$(98,4))>0 AND PC1$(98,4)<>IC0$(92,4) THEN READ (Z[4],KEY="P"+IC0$(82,10)+PC1$(98,4),DOM=2126); IC0$(92,4)=PC1$(98,4); GOTO 2127 ELSE GOTO 2127
2126 REASON$="Update, plant for primary vendor code is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2127 IF POS(" "<>PC1$(115,3))>0 AND PC1$(115,3)<>IC0$(109,3) THEN READ (Z[5],KEY="I"+PC1$(115,3),DOM=2128); IC0$(109,3)=PC1$(115,3); GOTO 2130 ELSE GOTO 2130
2128 REASON$="Update, item price class is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2130 IF POS(" "<>PC1$(130,4))>0 AND PC1$(130,4)<>IC0$(124,4) THEN READ (Z[13],KEY="U/M"+PC1$(130,4),DOM=2131); IC0$(124,4)=PC1$(130,4); GOTO 2135 ELSE GOTO 2135
2131 REASON$="Update, unit of measure is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2135 IF POS(" "<>PC1$(126,4))>0 AND PC1$(126,4)<>IC0$(120,4) THEN READ (Z[13],KEY="U/M"+PC1$(126,4),DOM=2136); IC0$(120,4)=PC1$(126,4); GOTO 2140 ELSE GOTO 2140
2136 REASON$="Update, unit of measure is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2140 IF POS(" "<>PC1$(344,10))>0 AND IC0[15]<>NUM(PC1$(344,10),ERR=2141) THEN IC0[15]=NUM(PC1$(344,10)); GOTO 2145 ELSE GOTO 2145
2141 REASON$="Update, quantity per unit is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2145 IF POS(" "<>PC1$(334,10))>0 AND IC0[14]<>NUM(PC1$(334,10),ERR=2146) THEN IC0[14]=NUM(PC1$(334,10)); GOTO 2150 ELSE GOTO 2150
2146 REASON$="Update, quantity per unit is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2150 GOSUB IC0_FIELDS; UPDATE_COUNT=UPDATE_COUNT+1
2152 IF IC0$(61,3)+IC0$(1,20)<>A2$ THEN REMOVE (Z[8],KEY=A2$,DOM=2153)
2154 IF IC0$(82,14)+IC0$(61,3)+IC0$(1,20)<>A3$ THEN REMOVE (Z[7],KEY=A3$,DOM=2155)
2155 IF IC0$(61,3)<>A4$ THEN GOSUB 7400; REM "Go thru IC1, change IC6 sort
2157 IF IC0[15]<>O1 THEN GOSUB 7600; REM "Qty per unit changed, change costs
2160 IF STP(PC1$(524,10),3," ")="" THEN GOTO UPDATE_RECORD_END; REM "Vendor for pricing is blank, all done
2161 DIM IC2$(115),IC2[30] ! WO273055 expand IC2
2162 READ (Z[3],KEY=PC1$(524,10),DOM=2163); IC2$(1,30)=IC0$(1,20)+PC1$(524,14); GOTO 2165 ! 307471-Validate vendor but assign vendor-plant as a pair together
2163 REASON$="Update supplier, vendor code is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2165 IF POS(" "<>PC1$(534,4))>0 THEN READ (Z[4],KEY="P"+IC2$(21,10)+PC1$(534,4),DOM=2166); IC2$(31,4)=PC1$(534,4); GOTO 2168 ELSE GOTO 2168
2166 REASON$="Update supplier, plant code is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2168 READ (Z[6],KEY=IC2$(1,34),DOM=2169)IOL=0320; IF PC1$(538,20)<>IC2$(35,20) THEN REMOVE (Z[9],KEY=IC2$(21,34)+IC2$(1,20),DOM=2169)
2170 IC2$(35,20)=PC1$(538,20)
2173 IF POS(" "<>PC1$(558,4))>0 THEN READ (Z[13],KEY="U/M"+PC1$(558,4),DOM=2174); IC2$(55,4)=PC1$(558,4); GOTO 2175 ELSE GOTO 2175
2174 REASON$="Update supplier, unit of measure is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2175 IF POS(" "<>PC1$(708,10))>0 THEN IC2[14]=NUM(PC1$(708,10),ERR=2176); GOTO 2180 ELSE GOTO 2180
2176 REASON$="Update supplier, qty per unit is not valid"; GOSUB BAD_RECORD; GOTO UPDATE_RECORD_END
2180 GOSUB IC2_FIELDS
2195 UPDATE_RECORD_END:RETURN 
2199 ! 
2300 IC0_FIELDS:REM "Set remaining IC0 fields if not blank for both new and updated items, write IC0, IC5, and IC4 files
2310 IF POS(" "<>PC1$(27,40))>0 THEN IC0$(21,40)=PC1$(27,40); REM "Description
2312 IF POS(" "<>PC1$(70,8))>0 THEN IC0$(64,8)=PC1$(70,8); REM "L/R dimensions
2315 IF POS(" "<>PC1$(78,8))>0 THEN IC0$(72,8)=PC1$(78,8); REM "T/B dimensions
2317 IF POS(" "<>PC1$(86,2))>0 THEN IC0$(80,2)=PC1$(86,2); REM "Plys
2320 IF POS(" "<>PC1$(102,6))>0 THEN Q$=PC1$(102,6); GOSUB 7500; IC0$(96,6)=D0$; REM "Last sold, SSP244650, get TF type date from YYMMDD type date 
2322 IF POS(" "<>PC1$(108,6))>0 THEN Q$=PC1$(108,6); GOSUB 7500; IC0$(102,6)=D0$; REM "Last purchased, SSP244650, get TF type date from YYMMDD type date
2325 REM IF POS(" "<>PC1$(115,3))>0 THEN LET IC0$(109,3)=PC1$(115,3); REM " Item price class, moved to lines 2052,2053,2127,2128, needs to be validated
2327 IF POS(" "<>PC1$(118,1))>0 THEN IF P0$(44,1)="Y" THEN IF PC1$(118,1)="Y" OR PC1$(118,1)="N" THEN IC0$(112,1)=PC1$(118,1); REM "Lot inventory?
2330 IF POS(" "<>PC1$(119,3))>0 THEN IF P0$(50,1)="Y" THEN IC0$(113,3)=PC1$(119,3); REM "Quantity break price group
2332 IF POS(" "<>PC1$(122,1))>0 THEN IF PC1$(122,1)="Y" OR PC1$(122,1)="N" THEN IC0$(116,1)=PC1$(122,1); REM "Secure item?
2340 IF POS(" "<>PC1$(134,40))>0 THEN IF P0$(47,1)="Y" THEN IC0$(128,40)=PC1$(134,40); REM "Second description line
2342 IF POS(" "<>PC1$(174,10))>0 THEN IF P0$(46,1)="Y" THEN IC0$(168,10)=PC1$(174,10); REM "Item group
2345 IF POS(" "<>PC1$(184,10))>0 THEN IF P0$(46,1)="Y" THEN IF POS(" "<>IC0$(168,10))>0 THEN IC0$(178,10)=PC1$(184,10); REM "Pricing features
2347 IF POS(" "<>PC1$(194,10))>0 THEN IC0[0]=NUM(PC1$(194,10),ERR=2348); REM "Base price
2348 QTY_UNIT=1
2349 IF MID(HELPER$,1,1)="Y" THEN QTY_UNIT=IC0[14] ELSE QTY_UNIT=1
2350 IF POS(" "<>PC1$(204,10))>0 THEN IC0[1]=QTY_UNIT*NUM(PC1$(204,10),ERR=2351); REM "Quantity 1 break
2352 IF POS(" "<>PC1$(214,10))>0 THEN IC0[2]=NUM(PC1$(214,10),ERR=2353); REM "Quantity 1 price
2355 IF POS(" "<>PC1$(224,10))>0 THEN IC0[3]=QTY_UNIT*NUM(PC1$(224,10),ERR=2356); REM "Quantity 2 break
2357 IF POS(" "<>PC1$(234,10))>0 THEN IC0[4]=NUM(PC1$(234,10),ERR=2358); REM "Quantity 2 price
2360 IF POS(" "<>PC1$(244,10))>0 THEN IC0[5]=QTY_UNIT*NUM(PC1$(244,10),ERR=2361); REM "Quantity 3 break
2362 IF POS(" "<>PC1$(254,10))>0 THEN IC0[6]=NUM(PC1$(254,10),ERR=2363); REM "Quantity 3 price
2365 IF POS(" "<>PC1$(264,10))>0 THEN IC0[7]=QTY_UNIT*NUM(PC1$(264,10),ERR=2366); REM "Quantity 4 break
2367 IF POS(" "<>PC1$(274,10))>0 THEN IC0[8]=NUM(PC1$(274,10),ERR=2368); REM "Quantity 4 price
2370 IF POS(" "<>PC1$(284,10))>0 THEN IC0[9]=QTY_UNIT*NUM(PC1$(284,10),ERR=2371); REM "Quantity 5 break
2372 IF POS(" "<>PC1$(294,10))>0 THEN IC0[10]=NUM(PC1$(294,10),ERR=2373); REM "Quantity 5 price
2375 IF POS(" "<>PC1$(304,10))>0 THEN IC0[11]=QTY_UNIT*NUM(PC1$(304,10),ERR=2376); REM "Quantity 6 break
2377 IF POS(" "<>PC1$(314,10))>0 THEN IC0[12]=NUM(PC1$(314,10),ERR=2378); REM "Quantity 6 price
2380 IF POS(" "<>PC1$(324,10))>0 THEN IC0[13]=NUM(PC1$(324,10),ERR=2381); REM "Avg sales price for F/M
2382 IF POS(" "<>PC1$(354,10))>0 THEN IC0[16]=NUM(PC1$(354,10),ERR=2383); REM "Carton weight
2385 IF POS(" "<>PC1$(364,10))>0 THEN IC0[17]=NUM(PC1$(364,10),ERR=2386); REM "Last purchase cost
2387 IF POS(" "<>PC1$(374,10))>0 THEN IC0[18]=NUM(PC1$(374,10),ERR=2388); REM "Average cost
2390 IF POS(" "<>PC1$(384,10))>0 THEN IC0[19]=NUM(PC1$(384,10),ERR=2391); REM "Carton pack
2392 IF POS(" "<>PC1$(394,10))>0 THEN IC0[20]=NUM(PC1$(394,10),ERR=2393); REM "Salesperson unit ocst
2395 IF POS(" "<>PC1$(404,10))>0 THEN IC0[21]=QTY_UNIT*NUM(PC1$(404,10),ERR=2396); REM "Quantity 7 break
2400 IF POS(" "<>PC1$(414,10))>0 THEN IC0[22]=NUM(PC1$(414,10),ERR=2401); REM "Quantity 7 price
2402 IF POS(" "<>PC1$(424,10))>0 THEN IC0[23]=QTY_UNIT*NUM(PC1$(424,10),ERR=2403); REM "Quantity 8 break
2405 IF POS(" "<>PC1$(434,10))>0 THEN IC0[24]=NUM(PC1$(434,10),ERR=2406); REM "Quantity 8 price
2407 IF POS(" "<>PC1$(444,10))>0 THEN IC0[25]=QTY_UNIT*NUM(PC1$(444,10),ERR=2408); REM "Quantity 9 break
2410 IF POS(" "<>PC1$(454,10))>0 THEN IC0[26]=NUM(PC1$(454,10),ERR=2411); REM "Quantity 9 price
2412 IF POS(" "<>PC1$(464,10))>0 THEN IC0[27]=QTY_UNIT*NUM(PC1$(464,10),ERR=2413); REM "Quantity 10 break
2415 IF POS(" "<>PC1$(474,10))>0 THEN IC0[28]=NUM(PC1$(474,10),ERR=2416); REM "Quantity 10 price
2417 IF POS(" "<>PC1$(484,10))>0 THEN IC0[29]=QTY_UNIT*NUM(PC1$(484,10),ERR=2418); REM "Quantity 11 break
2420 IF POS(" "<>PC1$(494,10))>0 THEN IC0[30]=NUM(PC1$(494,10),ERR=2421); REM "Quantity 11 price
2422 IF POS(" "<>PC1$(504,10))>0 THEN IC0[31]=QTY_UNIT*NUM(PC1$(504,10),ERR=2423); REM "Quantity 12 break
2425 IF POS(" "<>PC1$(514,10))>0 THEN IC0[32]=NUM(PC1$(514,10),ERR=2426); REM "Quantity 12 price
2470 ! 
2474 GOSUB CLEAR_READONLY ! SSP270992
2475 WRITE (Z[2],KEY=IC0$(1,20))IOL=0310
2480 WRITE (Z[8],KEY=IC0$(61,3)+IC0$(1,20)); REM "IC5, items by product code sort
2485 WRITE (Z[7],KEY=IC0$(82,10)+IC0$(92,4)+IC0$(61,3)+IC0$(1,20)); REM "IC4, item sort by vendor, product code
2486 GOSUB SET_READONLY ! SSP270992
2490 IF CUSTOM$="Y" AND NOT(NUL(IC0$(1,10))) THEN GOSUB CUSTOM_ITEM_RECORD ! WO159126
2492 IF MID(PC1$,816,1)="Y" THEN GOSUB ECR_RECORD ! SSP249773
2495 IC0_FIELDS_END:RETURN 
2499 ! 
2500 IC2_FIELDS:REM "Set remaining IC2 fields if not blank for both new and updated items, write out IC2 & ICD files
2510 IF POS(" "<>PC1$(562,6))>0 THEN Q$=PC1$(562,6); GOSUB 7500; IC2$(59,6)=D0$; REM "Date last purchased, SSP244650, get TF type date from YYMMDD type date
2512 IF POS(" "<>PC1$(568,10))>0 THEN IC2[0]=NUM(PC1$(568,10),ERR=2513); REM "Base cost
2515 IF POS(" "<>PC1$(578,10))>0 THEN IC2[1]=QTY_UNIT*NUM(PC1$(578,10),ERR=2516); REM "Quantity 1 break
2517 IF POS(" "<>PC1$(588,10))>0 THEN IC2[2]=NUM(PC1$(588,10),ERR=2518); REM "Quantity 1 cost
2520 IF POS(" "<>PC1$(598,10))>0 THEN IC2[3]=QTY_UNIT*NUM(PC1$(598,10),ERR=2521); REM "Quantity 2 break
2522 IF POS(" "<>PC1$(608,10))>0 THEN IC2[4]=NUM(PC1$(608,10),ERR=2523); REM "Quantity 2 cost
2525 IF POS(" "<>PC1$(618,10))>0 THEN IC2[5]=QTY_UNIT*NUM(PC1$(618,10),ERR=2526); REM "Quantity 3 break
2527 IF POS(" "<>PC1$(628,10))>0 THEN IC2[6]=NUM(PC1$(628,10),ERR=2528); REM "Quantity 3 cost
2530 IF POS(" "<>PC1$(638,10))>0 THEN IC2[7]=QTY_UNIT*NUM(PC1$(638,10),ERR=2531); REM "Quantity 4 break
2532 IF POS(" "<>PC1$(648,10))>0 THEN IC2[8]=NUM(PC1$(648,10),ERR=2533); REM "Quantity 4 cost
2535 IF POS(" "<>PC1$(658,10))>0 THEN IC2[9]=QTY_UNIT*NUM(PC1$(658,10),ERR=2536); REM "Quantity 5 break
2537 IF POS(" "<>PC1$(668,10))>0 THEN IC2[10]=NUM(PC1$(668,10),ERR=2538); REM "Quantity 5 cost
2540 IF POS(" "<>PC1$(678,10))>0 THEN IC2[11]=QTY_UNIT*NUM(PC1$(678,10),ERR=2541); REM "Quantity 6 break
2542 IF POS(" "<>PC1$(688,10))>0 THEN IC2[12]=NUM(PC1$(688,10),ERR=2543); REM "Quantity 6 cost
2545 IF POS(" "<>PC1$(698,10))>0 THEN IC2[13]=NUM(PC1$(698,10),ERR=2546); REM "Last cost
2547 IF POS(" "<>PC1$(718,10))>0 THEN IC2[15]=NUM(PC1$(718,10),ERR=2548); REM "Carton weight
2550 IF POS(" "<>PC1$(728,10))>0 THEN IC2[16]=NUM(PC1$(728,10),ERR=2551); REM "Carton pack
2555 IF NOT(NUL(MID(PC1$,927,10))) THEN IC2[17]=NUM(MID(PC1$,927,10),ERR=*NEXT) ! WO273055, Quantity break 7
2556 IF NOT(NUL(MID(PC1$,937,10))) THEN IC2[18]=NUM(MID(PC1$,937,10),ERR=*NEXT) ! WO273055, Quantity cost 7
2557 IF NOT(NUL(MID(PC1$,947,10))) THEN IC2[19]=NUM(MID(PC1$,947,10),ERR=*NEXT) ! WO273055, Quantity break 8
2558 IF NOT(NUL(MID(PC1$,957,10))) THEN IC2[20]=NUM(MID(PC1$,957,10),ERR=*NEXT) ! WO273055, Quantity cost 8
2559 IF NOT(NUL(MID(PC1$,967,10))) THEN IC2[21]=NUM(MID(PC1$,967,10),ERR=*NEXT) ! WO273055, Quantity break 9
2560 IF NOT(NUL(MID(PC1$,977,10))) THEN IC2[22]=NUM(MID(PC1$,977,10),ERR=*NEXT) ! WO273055, Quantity cost 9
2561 IF NOT(NUL(MID(PC1$,987,10))) THEN IC2[23]=NUM(MID(PC1$,987,10),ERR=*NEXT) ! WO273055, Quantity break 10
2562 IF NOT(NUL(MID(PC1$,997,10))) THEN IC2[24]=NUM(MID(PC1$,997,10),ERR=*NEXT) ! WO273055, Quantity cost 10
2563 IF NOT(NUL(MID(PC1$,1007,10))) THEN IC2[25]=NUM(MID(PC1$,1007,10),ERR=*NEXT) ! WO273055, Quantity break 11
2564 IF NOT(NUL(MID(PC1$,1017,10))) THEN IC2[26]=NUM(MID(PC1$,1017,10),ERR=*NEXT) ! WO273055, Quantity cost 11 
2565 IF NOT(NUL(MID(PC1$,1027,10))) THEN IC2[27]=NUM(MID(PC1$,1027,10),ERR=*NEXT) ! WO273055, Quantity break 12
2566 IF NOT(NUL(MID(PC1$,1037,10))) THEN IC2[28]=NUM(MID(PC1$,1037,10),ERR=*NEXT) ! WO273055, Quantity cost 12 
2579 GOSUB CLEAR_READONLY ! SSP270992
2580 WRITE (Z[6],KEY=IC2$(1,34))IOL=0320
2585 WRITE (Z[9],KEY=IC2$(21,34)+IC2$(1,20)); REM "ICD, Supplier item number sort
2586 GOSUB SET_READONLY ! SSP270992
2595 IC2_FIELDS_END:RETURN 
2599 ! 
3000 CUSTOM_ITEM_RECORD:
3005 ! Logic copied from FM2UBI which creates new records only, we may be updating an existing record here
3010 DIM CUST_PARM$(244); READ (Z[5],KEY="D"+IC0$(1,10),DOM=*NEXT)CUST_PARM$(1) ! SSP270603, make sure we have correct size
3020 DIM FM1$(448),FM1[31]; EXISTING$="N",FM1$(1,20)=IC0$(1,20)
3025 EXTRACT (Z[14],KEY=IC0$(1,20),DOM=*NEXT)IOL=0340; EXISTING$="Y",A5$=FM1$(21,3)+FM1$(24,16)+FM1$(40,2)+FM1$(11,10)+FM1$(1,10),A6$=FM1$(1,10)+FM1$(350,20)+FM1$(11,10) ! WO224917, add A6$ for FT1 (CIC)
3030 FM1$(42,40)=IC0$(21,40),FM1$(21,3)=IC0$(61,3),FM1$(24,18)=IC0$(64,18),FM1$(82,14)=IC0$(82,14),FM1$(100,4)=IC0$(120,4),FM1[3]=IC0[0],FM1[4]=IC0[14],FM1[0]=IC0[19],FM1[18]=IC0[16] ! Desc, prod code, T/B, L/R, plys, vendor, plant, sell u/m, sell price, sell qty per, carton pack, weight
3035 IF EXISTING$="N" AND CUST_PARM$(24,1)="Y" THEN FM1$(108,1)="Y" ! FMS?
3040 IF EXISTING$="N" THEN FM1$(185,10)=IC0$(1,10) ! Source customer
3045 FM1$(96,4)=IC0$(124,4),FM1[1]=IC0[18],FM1[2]=IC0[15] ! Cost u/m, cost, cost qty per
3050 IF EXISTING$="N" THEN FM1$(254,1)="0",FM1$(255,6)=X3$(21,6) ! SSP234191, if new FM1 record, set item status to new item, item status date to system date
3120 IF Q1$="D" THEN FM1$(386,1)="Y"; REM SSP1171205 no webec orderin for docuc entr
3122 IF NOT(NUL(MID(PC1$,738,1))) THEN FM1$(254,1)=MID(PC1$,738,1) ! Item status code - WO 201157
3124 IF NOT(NUL(MID(PC1$,739,6))) THEN FM1$(255,6)=MID(PC1$,739,6) ! Item status date - WO 201157
3126 IF NOT(NUL(MID(PC1$,745,30))) THEN FM1$(261,30)=MID(PC1$,745,30) ! Item status memo - WO 201157
3128 IF NOT(NUL(MID(PC1$,775,10))) THEN FM1[22]=NUM(MID(PC1$,775,10),ERR=*NEXT); REM "Reorder Point Days - WO 201157
3130 IF NOT(NUL(MID(PC1$,785,10))) THEN FM1[23]=NUM(MID(PC1$,785,10),ERR=*NEXT); REM "Reorder Point Qty - WO 201157
3132 IF NOT(NUL(MID(PC1$,795,20))) THEN CIC$=MID(PC1$,795,20); GOSUB VALIDATE_CIC ! WO224917
3134 IF NOT(NUL(MID(PC1$,815,1))) THEN ART_STATUS$=MID(PC1$,815,1); GOSUB VALIDATE_ART_STATUS ! WO224917
3136 IF NOT(NUL(MID(PC1$,817,12))) THEN FM1$(149,12)=MID(PC1$,817,12) ! SSP249773, previous job number
3138 IF NOT(NUL(MID(PC1$,829,12))) THEN FM1$(173,12)=UCS(MID(PC1$,829,12)) ! SSP249773, function code
3140 IF NOT(NUL(MID(PC1$,841,60))) THEN FM1$(389,60)=MID(PC1$,841,60) ! SSP267980, memo
3142 IF NOT(NUL(MID(PC1$,901,3))) THEN CONT_CODE$=UCS(MID(PC1$,901,3)); GOSUB VALIDATE_CONT_CODE ! SSP268841
3143 IF CUST_PARM$(24,1)="Y" THEN IF NOT(NUL(MID(PC1$,904,1))) AND POS(MID(PC1$,904,1)="yYnN")>0 THEN FM1$(108,1)=UCS(MID(PC1$,904,1)) ! SSP270603, FMS?
3144 IF NOT(NUL(MID(PC1$,905,10))) THEN FM1[29]=NUM(MID(PC1$,905,10),ERR=*NEXT) ! SSP270603, FMS Price
3145 IF CUST_PARM$(195,1)="1" THEN IF NOT(NUL(MID(PC1$,915,6))) THEN FM1[30]=NUM(MID(PC1$,915,6),ERR=*NEXT); IF FM1[3]>0 THEN FM1[29]=FM1[3]*FM1[30]/100 ! SSP270603, FMS Percent, only set if cust default activated, then apply to sell price to get FMS price
3146 IF NOT(NUL(MID(PC1$,921,6))) THEN FM1$(167,6)=MID(PC1$,921,6) ! SSP271414, item revision
3147 IF NOT(NUL(MID(PC1$,1047,14))) THEN GOSUB VALIDATE_ALT_UM_FIELDS ! DBD-112-SSP307283
3149 IF FM1$(108,1)<>"Y" THEN FM1[29]=0,FM1[30]=0 ! SSP270603, if not FMS item then set FMS price and percent to 0
3150 GOSUB CLEAR_READONLY; WRITE (Z[14],KEY=FM1$(1,20))IOL=0340 ! SSP270992
3160 FM2_KEY$=FM1$(21,3)+FM1$(24,16)+FM1$(40,2)+FM1$(11,10)+FM1$(1,10)
3165 IF EXISTING$="Y" AND A5$<>FM2_KEY$ THEN REMOVE (Z[15],KEY=A5$,DOM=*NEXT)
3170 WRITE (Z[15],KEY=FM2_KEY$)
3180 IF EXISTING$="N" THEN WRITE (Z[16],KEY=FM1$(185,10)+FM1$(11,10)+FM1$(1,10))
3182 FT1_KEY$=FM1$(1,10)+FM1$(350,20)+FM1$(11,10) ! WO224917
3183 IF EXISTING$="Y" AND A6$<>FT1_KEY$ THEN REMOVE (Z[17],KEY=A6$,DOM=*NEXT) ! WO224917
3184 IF FT1_KEY$(11,20)<>DIM(20) THEN WRITE (Z[17],KEY=FT1_KEY$) ! WO224917
3185 GOSUB SET_READONLY ! SSP270992
3190 CUSTOM_ITEM_RECORD_END:RETURN 
3195 ! 
4000 REM "BREAK OUT IF COMMA DELIMITED
4006 DELIM$=","
4010 F_NUM=109,F_LEN$="03031010400308080210040606010301030103040440101010101010101010101010101010101010101010101010101010101010101010101010042004061010101010101010101010101010101010010630101020010112126003011006061010101010101010101010100410" ! WO273055, number of fields from 79 to 107, add lengths for additional 28 fields, DBD-112-SSP307283 number of fields from 107 to 109, add lengths for additional 2 fields
4020 DIM FIELDS[F_NUM]
4030 FOR F_LOOP=1 TO F_NUM
4040 FIELDS[F_LOOP]=NUM(F_LEN$(2*F_LOOP-1,2))
4050 NEXT F_LOOP
4060 CALL "ZZ2DLM","","",STP(PC1$,1,$0D$),DELIM$,FIELDS{ALL},"",RETURN$,FIELDS_FOUND ! WO273055, strip trailing line feed
4299 RETURN 
5000 REM "EOJ
5010 END_MESSAGE$=FN%CDS$+", "+STR(COUNT:"0000")+" records processed"
5020 GOSUB SYSTEM_CALL
5040 IF NEW_COUNT<>0 THEN END_MESSAGE$=STR(NEW_COUNT:"0000")+" new records were added to IC0 file"; GOSUB SYSTEM_CALL
5045 IF UPDATE_COUNT<>0 THEN END_MESSAGE$=STR(UPDATE_COUNT:"0000")+" IC0 records were updated"; GOSUB SYSTEM_CALL
5050 IF BAD_REC_COUNT<>0 THEN END_MESSAGE$=STR(BAD_REC_COUNT:"0000")+" records were not processed"; GOSUB SYSTEM_CALL
5070 IF POS(Q1$="GD")=0 THEN PRINT @(0,15),'CE',
5080 IF Q1$="" AND NOT(%GUI) THEN CALL "ZZPROM",".4",X3$,Z,"Process complete!!","","",0
5085 IF %GUI THEN MSGBOX "Process complete","F.Y.I.","!"; CMD_STR$="END"
5090 GOTO 9900
5099 ! 
5100 SYSTEM_CALL:REM "Write out to Product Catalog Gateway Log
5120 IF _GPC>0 THEN PRINT (_GPC)END_MESSAGE$
5140 SYSTEM_CALL_END:RETURN 
5199 ! 
6000 REM "BACKGROUND
6001 IF %GUI THEN RETURN 
6005 PRINT (0,ERR=6016)'SB',
6020 PRINT @(10,5),"Importing Product Catalog Gateway Records"
6030 PRINT @(0,10),"For customer specific items, also create/update the custom item master?",
6040 PRINT @(10,11),"Multiply Price Quantities by Qty/Unit?",
6050 PRINT @(17,12),"Is this a Comma Delimited File?",
6165 PRINT (0,ERR=6166)'SF',
6190 RETURN 
6199 ! 
7000 REM "Process options from calling program
7005 SET_OPTIONS:
7010 DIM CUSTOM$(1),HELPER$(1),COMMA$(1)
7020 CUSTOM$=MID(Q0$,2,1) ! Option to do FM1 in addition to IC0
7030 HELPER$=MID(Q0$,3,1) ! Option to multiply price qty by unit
7040 COMMA$=MID(Q0$,4,1) ! Option to indicate input is comma-separated
7045 RETURN 
7049 ! 
7400 REM "Product code changed, go through IC1 and change IC6 sort
7410 READ (Z[10],KEY=IC0$(1,20),DOM=7411)
7420 READ (Z[10],END=7450)J$
7425 IF J$(1,20)<>IC0$(1,20) THEN GOTO 7450
7430 REMOVE (Z[11],KEY=J$(21,4)+A4$+J$(1,20),DOM=7431)
7440 GOSUB CLEAR_READONLY; WRITE (Z[11],KEY=J$(21,4)+IC0$(61,3)+J$(1,20)); GOSUB SET_READONLY ! SSP270992
7445 GOTO 7420
7490 RETURN 
7499 ! 
7500 REM "Convert date Q$ into D0$
7501 REM "Q$ in YYMMDD format
7505 D0$=""
7506 IF STP(Q$,3," ")="" THEN GOTO 7545
7510 IF LEN(Q$)<6 THEN GOTO 7545 ELSE D1$=Q$(1,2)
7515 IF D1$<"50" THEN D1$="20"+D1$ ELSE D1$="19"+D1$
7520 D0$=CHR(NUM(D1$(1,3),ERR=7521)-125)+D1$(4,1)+Q$(3,2)+Q$(5,2)
7545 RETURN 
7599 ! 
7600 REM "Quantity per unit changed, change last/avg costs in IC0 & IC1
7610 IF O1=0 THEN RETURN 
7611 GOSUB CLEAR_READONLY ! SSP270992
7612 EXTRACT (Z[2],KEY=IC0$(1,20))IOL=0310
7615 PRECISION M5[1]; IC0[17]=IC0[17]*IC0[15]/O1,IC0[18]=IC0[18]*IC0[15]/O1; PRECISION 2
7620 WRITE (Z[2],KEY=IC0$(1,20))IOL=0310
7630 DIM IC1[20]; READ (Z[10],KEY=IC0$(1,20),DOM=7631)
7640 J$=KEY(Z[10],END=7690)
7650 IF IC0$(1,20)<>J$(1,20) THEN GOTO 7690
7660 EXTRACT (Z[10],KEY=J$)IOL=0330
7670 PRECISION M5[1]; IC1[1]=IC1[1]*IC0[15]/O1,IC1[2]=IC1[2]*IC0[15]/O1; PRECISION 2
7680 WRITE (Z[10],KEY=J$)IOL=0331
7685 GOTO 7640
7690 GOSUB SET_READONLY; RETURN ! SSP270992 
7699 ! 
7750 REM "End of file
7754 IF LEN(REC_COUNT$)<=0 THEN GOTO 7795
7755 FOR X=1 TO LEN(REC_COUNT$)-2 STEP 3
7756 S$="GPC|STAT|"+FN%CDS$+"|"+X3$(40,3)+"|"+X3$(9,3)+"|"+FID(0)+"|"+F1$+"|"+REC_COUNT$(X,3)+"|"+STR(REC_COUNT[(X+2)/3]:"0000")
7758 IF _GW>0 THEN PRINT (_GW)S$
7759 NEXT X
7795 GOTO 1900
7799 ! 
7800 BAD_RECORD:REM "Write message to GPC_LOG, couldn't process this record
7805 BAD_REC_COUNT=BAD_REC_COUNT+1
7810 MESSAGE$="File: "+F1$+" Reason: "+REASON$
7820 BAD_REC$=PC1$(7,20)+"|"+PC1$(67,3)+"|"+PC1$(88,10)+"|"+PC1$(126,4)+"|"+PC1$(130,4)+"|"+PC1$(344,10)+"|"+PC1$(538,20)
7835 IF _GPC>0 THEN PRINT (_GPC)MESSAGE$; PRINT (_GPC)BAD_REC$
7840 PCGERR$=REASON$+"|"+BAD_REC$
7890 BAD_RECORD_END:RETURN 
7899 ! 
8100 REM "GOSUB here, once, at the beginning, after the background is set and before the Proceed? question. Set T to total # to do (by calling ZZINFO) and T0 to the reporting interval (report every T0 number of records) this is typically 2% of total; This also prints a message (@8115),so adjust accordingly
8107 T=0
8113 CALL "ZZ2FNC;SerialRecCnt",Z[1],T
8115 IF NOT(%GUI) THEN PRINT @(0,7),"There are "+STR(T)+" records to process"
8130 T0=INT(T*.02); IF T0<=1 THEN T0=2
8135 T1=0
8145 RETURN 
8150 REM "Call this each time to update the bar graph. Display horiz. bar graph given total #, T and current #, C, and time counter T1 (T1 is init'ed here and used here, just don't use it somewhere else)
8155 CALL "ZZBARG",X3$,"HG",19,10,50,T1,T,I9
8195 RETURN 
8199 ! 
8200 VALIDATE_CIC:! WO224917
8205 IF STP(CIC$)="" THEN GOTO *RETURN
8210 CIC$=PAD(UCS(CIC$),20)
8220 CALL "FS2DAK",X3$,X4$,1,FM1$(1,10),"",CIC$,DB_ITEM$
8225 IF POS(" "<>DB_ITEM$)>0 AND DB_ITEM$<>FM1$(11,10) THEN GOTO *RETURN ! This customer already has an item that is using this CIC
8235 FM1$(350,20)=CIC$
8240 RETURN 
8245 ! 
8250 VALIDATE_ART_STATUS:! WO224917
8255 IF STP(ART_STATUS$)="" THEN GOTO *RETURN
8270 FIND (Z[5],KEY="b"+ART_STATUS$,DOM=*RETURN)
8275 FM1$(231,1)=ART_STATUS$
8290 RETURN 
8295 ! 
8300 ECR_RECORD:! SSP249773
8305 GOSUB CLEAR_READONLY ! SSP270992
8310 DIM ECR$(1000); ECR$(1,20)=IC0$(1,20)
8315 EXTRACT (Z[19],KEY=ECR$(1,20),DOM=*NEXT)ECR$
8320 ECR$(255,1)="Y"
8340 WRITE (Z[19],KEY=ECR$(1,20))ECR$
8345 GOSUB SET_READONLY; RETURN ! SSP270992
8349 ! 
8350 VALIDATE_CONT_CODE:! SSP268841, item contact code
8355 IF STP(CONT_CODE$)="" OR IC0$(1,10)=DIM(1) THEN GOTO *RETURN
8360 CONT_CODE$=PAD(CONT_CODE$,3)
8365 READ (Z[5],KEY="a"+IC0$(1,10)+CONT_CODE$,DOM=*RETURN)
8370 FM1$(209,3)=CONT_CODE$
8390 RETURN 
8395 ! 
8400 SET_READONLY:! SSP270992
8410 SET_PARAM 'XI'
8420 SET_READONLY_END:RETURN 
8430 CLEAR_READONLY:
8435 SET_PARAM -'XI'
8440 CLEAR_READONLY_END:RETURN 
8449 ! 
8500 VALIDATE_ALT_UM_FIELDS:! DBD-112-SSP307283
8505 IF PC1$(1047,4)=DIM(4) THEN RETURN 
8510 READ (Z[13],KEY="U/M"+PC1$(1047,4),DOM=*RETURN)
8520 NUMTEST=NUM(PC1$(1051,10),ERR=*RETURN)
8525 IF NUMTEST<=0 THEN RETURN 
8540 FM1$(238,4)=PC1$(1047,4),FM1[25]=NUMTEST
8545 RETURN 
8549 ! 
8910 DEF FNS$(Z9$)=Z9$(1,POS("     "=Z9$+"      ")-1)
9000 REM "ERROR PROCESSING
9001 IF POS(Q1$="GD")=0 THEN PRINT @(4,15),ERR,"  ",TCB(5); INPUT *
9002 GOSUB CLEAR_READONLY ! SSP270922
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1150,2040
9900 REM "END PROGRAM
9905 END_PROG:
9906 GOSUB CLEAR_READONLY ! SSP270992
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9915 IF _GW>0 THEN CLOSE (_GW)
9916 IF _GPC>0 THEN CLOSE (_GPC)
9930 SETERR 9940; IF POS(Q1$="GD")<>0 THEN Q0$=STR(COUNT) ELSE Q1$=A1$
9935 EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
56002 REM "201157-Create XML import for inventory file update
56005 ! "226151-Product Catalog Gateway PC2UAA needs GUI interface.         
56006 REM "224917-Noosh - DB Distributor integration for item/order creation.
56008 REM "234191-Noosh 1st message, set status code/date for new items.
56010 REM "244650-Product Catalog GW - template issues, other                 
56012 REM "249773-Sourcing Bench Support; Add tags to EC3PCG, trigger to setup
56014 REM "249773-SB; EC3PCG - Function Field
56016 REM "267980-SB; add tag to EC3PCG for FM1 memo (TF_MEMO) called         
56018 REM "268841-SB; EC3PCG tag for FM1 Item Contact code. XPA contains valid
56020 REM "270603-Sourcing Bench; Modify EC3PCG with fms and fms_price tags.  
56022 REM "270992-SB item creation error 0 PC2UAA 2040 looking up the vendor  
56024 REM "271414-Sourcing Bench; Modify EC3PCG with revision date tag.       
56026 REM "273055-Expand IC2 for 6 additional cost breaks, allow entry in GUI 
56028 REM "307283-DBD-112;EC3PCG/PC2UAA Add FM1 First Alt U/M and Qty per U/M 
56029 REM "307471-DBD-439: Vendor update leaves Plant code unchanged          
