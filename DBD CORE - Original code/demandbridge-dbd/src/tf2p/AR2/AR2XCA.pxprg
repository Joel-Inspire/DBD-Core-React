0010 REM "<AR2XCA> Import A/R Check Information
0020 SETESC 9300; SETERR 9000
0035 REM "5.0 - 01/11/02 - 11.342222 - plh - SSP# 142887
0040 REM "Copyright 2002 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000
0110 X0$="AR2XCA",X1$="Import A/R Check Information"
0120 DIM Z0$(80,"-")
0130 K0=20,K1=1
0135 C9=-1
0200 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0290 IOLIST Y[0],Y[1],Y[2],Y[3],Y[4]
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0300 REM "IOLISTS
0310 INV_IOLIST:IOLIST INV$,INV[0],INV[1],INV[2],INV[3],INV[4],INV[5],INV[6]
0315 INV_IOLIST_2:IOLIST INV_2$,INV_2[0],INV_2[1],INV_2[2],INV_2[3],INV_2[4],INV_2[5],INV_2[6]
0320 CHK_IOLIST:IOLIST CHK$,CHK[0],CHK[1],CHK[2]
0330 DEP_IOLIST:IOLIST DEP$,DEP[0],DEP[1]
0340 ARQ_IOLIST:IOLIST NEXTT,ARQ$,ARQ[0],ARQ[1],ARQ[2],ARQ[3],ARQ[4]
0360 AR6_IOLIST:IOLIST AR6$,AR6[0],AR6[1],AR6[2],AR6[3],AR6[4],AR6[5],AR6[6],AR6[7],AR6[8],AR6[9],AR6[10],AR6[11],AR6[12],AR6[13],AR6[14],AR6[15]
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="02O ARP... 03O ARQ... 04O AR1... 05O AS8... 06O AR6... 13O ZZPARM "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0600 REM "
0610 GOSUB 6000
0640 IF Q1$="" THEN CALL "ZZPROM",".Y",X3$,Z,"Proceed?","","",0; ON Z GOTO 0641,9900
0900 DIM INV[6],CHK[2],DEP[1]
1000 REM "Process file
1010 F1$="GTAR1"
1050 Z$="01O "+F1$+" "
1055 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 1056,1995
1060 CLOSE (Z[1]); OPEN (Z[1],ISZ=512)F1$; REM "Open for reading raw file
1075 PRINT @(15,15),'CE',"Processing: "+F1$,
1080 GOSUB 8100; GOSUB 8150
1100 REM "Process the file
1105 I9=0,I0$="",I1$="",F8=0
1110 GOSUB 7700
1120 IF MOD(I9,T0)=1 THEN GOSUB 8150
1125 IF LEN(I$)<118 THEN I9$=I$; DIM I$(118); I$(1)=I9$; REM "Correct length if short
1200 REM "fill INV record
1205 DIM INV$(34),INV[6]
1210 INV$(1,6)=I$(1,6),INV$(7,3)="A"; REM "Fiscal Year/Acct Period, Bank code HARDCODED TO 'A'
1215 INV$(10,1)=I$(10,1),INV$(11,10)=I$(11,10); REM "Deposit number, Customer number
1216 DIM AS8$(20); AS8$(1)=INV$(11,10); GOSUB GET_CUST_NUM; IF CUST$<>"" THEN INV$(11,10)=CUST$; GOTO 1218
1217 TEMP$=STP(AS8$,1); IF TEMP$(LEN(TEMP$)-1,2)="00" THEN TEMP$=TEMP$(1,LEN(TEMP$)-2) END_IF ; AS8$(1)="90"+TEMP$; GOSUB GET_CUST_NUM; IF CUST$<>"" THEN INV$(11,10)=CUST$ ELSE INV$(11,10)="00"+AS8$(1,8); REM "If first lookup didn't work then try with 90 on front, but remove trailing '00's if they are there - if still not found the add 00's for TopForm div number and then show the first 8 that did not match
1220 INV$(21,6)=I$(21,6),INV$(27,8)=I$(27,8); REM "Check reference,invoice number
1223 IF POS(INV$(27,1)="FG")<>0 THEN INV$(27,1)="0"
1224 GOSUB SUM_BILL_PROCESSING
1225 NUM_IN$=I$(35,12); GOSUB CONVERT_NUMBER; INV[1]=NUM_IN; REM "Total Applied
1227 NUM_IN$=I$(47,12); GOSUB CONVERT_NUMBER; INV[2]=NUM_IN; REM "Discount Allowed
1229 NUM_IN$=I$(59,12); GOSUB CONVERT_NUMBER; INV[3]=NUM_IN; REM "Freight allowed
1231 NUM_IN$=I$(71,12); GOSUB CONVERT_NUMBER; INV[4]=NUM_IN; REM "Sales tax allowed
1233 NUM_IN$=I$(95,12); GOSUB CONVERT_NUMBER; INV[5]=NUM_IN; REM "G/L Adjustment amount
1235 NUM_IN$=I$(83,12); GOSUB CONVERT_NUMBER; INV[6]=NUM_IN; REM "Cash Posted
1250 REM "If g/l adjustment, then add ARQ record
1252 IF INV[5]=0 THEN GOTO 1300
1255 DIM ARQ$(37),ARQ[4]; GOSUB 5200; INV[0]=A9
1260 ARQ$(1,6)=X3$(21,6),ARQ$(7,12)=I$(107,12); REM "Transaction date, G/L account number
1265 NUM_IN$=I$(95,12); GOSUB CONVERT_NUMBER; ARQ[3]=NUM_IN; REM "Amount
1270 NEXTT=0; WRITE (Z[3],IND=A9)IOL=ARQ_IOLIST
1300 WRITE (Z[2],KEY=INV$(1,34),DOM=1301)IOL=INV_IOLIST; GOTO 1302
1301 DIM INV_2[6]; READ (Z[2],KEY=INV$(1,34),DOM=1300)IOL=INV_IOLIST_2; FOR TMP=0 TO 6; INV_2[TMP]=INV_2[TMP]+INV[TMP]; NEXT TMP; WRITE (Z[2],KEY=INV$(1,34))IOL=INV_IOLIST_2
1304 REM "Update Check record
1305 DIM CHK$(67),CHK[2]
1310 CHK$(1,26)=INV$(1,26),CHK$(27,6)=X3$(21,6); REM "FY/AP,bank code, dep#,customer, check ref,check date
1315 DIM AR1$(200); FIND (Z[4],KEY=CHK$(11,10),DOM=1316)AR1$
1316 CHK$(33,35)=AR1$(11,35); REM "Customer name
1320 REM "Read existing record & update, or create new one
1325 READ (Z[2],KEY=CHK$(1,26),DOM=1326)IOL=CHK_IOLIST
1330 CHK[1]=CHK[1]+INV[6]; REM "check amount
1335 WRITE (Z[2],KEY=CHK$(1,26))IOL=CHK_IOLIST
1400 REM "Create or update existing Deposit header
1405 DIM DEP$(22),DEP[1]
1410 DEP$(1,10)=INV$(1,10),DEP$(11,6)=X3$(21,6); REM "FY/AP,Bank code, dep #, dep date
1415 REM "Create or update existing record
1420 READ (Z[2],KEY=DEP$(1,10),DOM=1421)IOL=DEP_IOLIST
1425 DEP[0]=DEP[0]+INV[6]; REM "Deposit total
1430 WRITE (Z[2],KEY=DEP$(1,10))IOL=DEP_IOLIST
1795 IF SUM_BILL_MODE THEN GOTO 1224 ELSE GOTO 1110
1900 REM "End of file
1901 REM "Close & Rename to .done for archiving. Erase an existing .done file, if same name
1905 Z$="01CU"+F1$+" "
1906 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
1910 F2$=F1$+".done"
1919 REM "Get disk DIRectory of data files
1925 J$=%DATAPATH$
1930 REM "Move the file
1935 ERASE F2$,ERR=*PROCEED; RENAME J$+DLM+F1$ TO J$+DLM+F2$
1995 GOTO 5000
4900 REM "END OF LINES
4910 Y[4]=-1; WRITE (F,IND=0)IOL=0290
4920 CALL "ZZEXPF",X3$,X4$,"X"+STR(F),"",G9; IF G9>0 THEN EXITTO 1300
4925 EXTRACT (F,IND=0)IOL=0290
4930 Z=NUM(FIN(F,"MAXREC")); Y[3]=Z-1
4935 Y[4]=-2; WRITE (F,IND=0)IOL=0290
4940 GOTO 5215
4980 EXITTO 1300
5000 REM "EOJ
5010 PRINT @(0,15),'CE',
5020 IF Q1$="" THEN CALL "ZZPROM",".4",X3$,Z,"Process complete!!","","",0
5040 GOTO 9900
5200 REM "GET NEXT INDEX TO FILE IN A9
5205 F=Z[3]; DIM Y[4]
5210 EXTRACT (F,IND=0,ERR=5295)IOL=0290
5212 IF Y[4]=-2 THEN READ (F); GOTO 5270
5215 IF Y[0]>=Y[3] OR Y[2]>=Y[3] THEN GOTO 4900 ELSE Y[4]=-2
5220 WRITE (F,IND=0)IOL=0290
5230 IF Y[1]<1 THEN A9=Y[2],Y[2]=Y[2]+1 ELSE A9=Y[1]; READ (F,IND=A9)Y[1]
5240 Y[0]=Y[0]+1,Y[4]=-1
5250 WRITE (F,IND=0)IOL=0290
5255 U1=0
5260 RETURN 
5270 LOCK (F,ERR=5210); Y[4]=-1; GOTO 5215
5295 IF ERR<>0 THEN EXITTO 1300 ELSE RETRY 
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6016)'SB',
6020 PRINT @(10,5),"Importing Accounts Receivable Check Information"
6165 PRINT (0,ERR=6166)'SF',
6190 RETURN 
7500 CONVERT_YYMMDD:REM "Convert date in YYMMDD format into TopForm format, assume YY <=50 means 20+YY >50 means 19+YY
7501 REM "YYMMDD in date$,result in DATE_RESULT$
7505 DATE_RESULT$=""
7510 IF LEN(DATE$)<6 THEN GOTO CONVERT_YYMMDD_END
7515 IF DATE$(1,2)<="50" THEN DATE$="20"+DATE$ ELSE DATE$="19"+DATE$
7520 DATE_RESULT$=CHR(NUM(DATE$(1,3),ERR=7521)-125)+DATE$(4)
7545 CONVERT_YYMMDD_END:RETURN 
7550 REM "Convert Q$(HH:MM:SS) format into Q0$(HHMM) format
7555 Q0$=Q$(1,2)+Q$(4,2)
7595 RETURN 
7600 CONVERT_NUMBER:REM "Convert number in NUM_IN$ to NUM_IN including translating EBCIDIC to ASCII conversion artifacts
7601 REM "Some programs when converting numberic values from EBCIDIC to ASCII will indicate negative numbers by adding a value to the least significant digit when translated the number is negative if the last char is not 0-9. The value will be as follows: }=0, J=1, K=2, L=3, M=4, N=5, O=6, P=7, Q=8, R=9....Furthermore 2 digits of precision are assumed so the number will be divided by 100
7605 NUM_IN=0; TMP=POS(NUM_IN$(LEN(NUM_IN$),1)="}JKLMNOPQR")
7610 IF TMP=0 THEN NUM_IN=NUM(NUM_IN$,ERR=CONVERT_NUMBER_END)/100; GOTO CONVERT_NUMBER_END
7615 REM "Convert last char back to num and convert to negative
7620 NUM_IN$(LEN(NUM_IN$),1)=STR(TMP-1:"0"),NUM_IN=(-NUM(NUM_IN$,ERR=CONVERT_NUMBER_END))/100
7645 CONVERT_NUMBER_END:RETURN 
7700 REM "Read next record
7705 IF LEN(I0$)<130 OR POS($0A$=I0$)=0 THEN READ RECORD (Z[1],IND=I9,END=7750)I1$; I0$=I0$+I1$,I9=I9+1; GOTO 7705
7710 IF POS($00$<>I0$)=0 THEN GOTO 7750 ELSE I1=POS($0A$=I0$); IF I1=1 THEN I0$=I0$(2); GOTO 7710 ELSE I$=I0$(1,I1-1),I0$=I0$(I1+1)
7745 RETURN 
7750 REM "End of file
7795 GOTO 1900
7800 GET_CUST_NUM:REM "Take AS8$ and lookup up customer number CUST$ in AS8 sort file, if not found CUST$ will be ''
7805 CUST$=""
7810 READ (Z[5],KEY=AS8$,DOM=7811)
7815 AS8_KEY$=KEY(Z[5],END=GET_CUST_NUM_END)
7820 IF AS8_KEY$(1,LEN(AS8$))=AS8$ THEN CUST$=AS8_KEY$(21)
7845 GET_CUST_NUM_END:RETURN 
7900 SUM_BILL_PROCESSING:REM "If invoice is not found, check for summary bill. If summary bill processing, get 1st invoice to process, determine proper amounts in SUM_INV[] then goto process it. Return here to get next invoice to do. If any amount left over, it goes into ONACCNT invoice.
7910 IF SUM_BILL_MODE THEN GOTO 7925; REM "If in this mode, go to read next one.
7915 DIM AR6[15],AR6$(170); FIND (Z[6],KEY=INV$(11,10)+INV$(27,8),DOM=7920)IOL=AR6_IOLIST; SUM_BILL_MODE=0; GOTO SUM_BILL_PROCESSING_END; REM "If invoice found, then normal processing, just leave
7920 SUM_BILL_MODE=1,SUM_BILL_NUMBER$=INV$(27,8); DIM SUM_INV[6]; GOSUB LOAD_SUM_INV; READ (Z[6],KEY=INV$(11,10),DOM=7921); REM "Summary bill mode, position file for reading thru & looking for invoices
7925 READ (Z[6],END=7940)IOL=AR6_IOLIST; IF AR6$(1,10)<>INV$(11,10) THEN GOTO 7940 ELSE IF AR6[3]=0 OR AR6$(160,8)<>SUM_BILL_NUMBER$(1,8) THEN GOTO 7925; REM "IF no match on summary bill number or the invoice is already paid.
7927 DIM POST_AMT[6]; SUM_INV$=AR6$(11,8)
7928 IF SUM_INV[1]=0 AND SUM_INV[2]=0 AND SUM_INV[3]=0 AND SUM_INV[4]=0 THEN GOTO 7940
7929 IF SUM_INV[1]<>0 THEN IF AR6[3]>=SUM_INV[1] THEN POST_AMT[1]=SUM_INV[1],SUM_INV[1]=0 ELSE POST_AMT[1]=AR6[3],SUM_INV[1]=SUM_INV[1]-AR6[3]; REM "Total applied
7931 IF SUM_INV[2]<>0 THEN IF AR6[4]>=SUM_INV[2] THEN POST_AMT[2]=SUM_INV[2],SUM_INV[2]=0 ELSE POST_AMT[2]=AR6[4],SUM_INV[2]=SUM_INV[2]-AR6[4]; REM "Discount allowed
7933 IF SUM_INV[3]<>0 THEN IF AR6[8]>=SUM_INV[3] THEN POST_AMT[3]=SUM_INV[3],SUM_INV[3]=0 ELSE POST_AMT[3]=AR6[8],SUM_INV[3]=SUM_INV[3]-AR6[8]; REM "Freight allowed
7935 IF SUM_INV[4]<>0 THEN IF AR6[7]>=SUM_INV[4] THEN POST_AMT[4]=SUM_INV[4],SUM_INV[4]=0 ELSE POST_AMT[4]=AR6[7],SUM_INV[4]=SUM_INV[4]-AR6[7]; REM "Sales tax allowed
7938 INV$(27,8)=SUM_INV$; FOR III=1 TO 6; INV[III]=POST_AMT[III]; NEXT III; EXITTO 1250; REM "If sum bill mode then load amounts from POST_AMT array, not incoming data.
7939 GOTO 7995; REM "	Process this invoice
7940 SUM_BILL_MODE=0; DIM POST_AMT[6]
7945 IF SUM_INV[1]<>0 OR SUM_INV[2]<>0 OR SUM_INV[3]<>0 OR SUM_INV[4]<>0 OR SUM_INV[5]<>0 OR SUM_INV[6]<>0 THEN SUM_INV$="ONACCNT"; FOR II=1 TO 6; POST_AMT[II]=SUM_INV[II]; SUM_INV[II]=0; NEXT II; INV$(27,8)=SUM_INV$; FOR III=1 TO 6; INV[III]=POST_AMT[III]; NEXT III; EXITTO 1250; REM "If any left then put on account and clear sum bill mode so we don't come back here
7946 EXITTO 1795; REM "If here we really want to stop summary bill processing and goto next record.
7995 SUM_BILL_PROCESSING_END:RETURN 
8000 LOAD_SUM_INV:REM "Load invoice amounts into SUM_INV for processing
8010 NUM_IN$=I$(35,12); GOSUB CONVERT_NUMBER; SUM_INV[1]=NUM_IN
8015 NUM_IN$=I$(47,12); GOSUB CONVERT_NUMBER; SUM_INV[2]=NUM_IN
8020 NUM_IN$=I$(59,12); GOSUB CONVERT_NUMBER; SUM_INV[3]=NUM_IN
8025 NUM_IN$=I$(71,12); GOSUB CONVERT_NUMBER; SUM_INV[4]=NUM_IN
8030 NUM_IN$=I$(95,12); GOSUB CONVERT_NUMBER; SUM_INV[5]=NUM_IN
8035 NUM_IN$=I$(83,12); GOSUB CONVERT_NUMBER; SUM_INV[6]=NUM_IN
8045 LOAD_SUM_INV_END:RETURN 
8100 REM "GOSUB here, once, at the beginning, after the background is set and before the Proceed? question. Set T to total # to do (by calling ZZINFO) and T0 to the reporting interval (report every T0 number of records) this is typically 2% of total; This also prints a message (@8115),so adjust accordingly
8110 CALL "ZZINFO",Z[1],T9,X3$,T,T0,K,B,D,S0,S1,F2$
8112 T=T0
8115 REM PRINT @(0,7),"There are "+STR(T)+" records to process"
8130 T0=INT(T*.02); IF T0<=1 THEN T0=2
8135 T1=0
8145 RETURN 
8150 REM "Call this each time to update the bar graph. Display horiz. bar graph given total #, T and current #, C, and time counter T1 (T1 is init'ed here and used here, just don't use it somewhere else)
8155 CALL "ZZBARG",X3$,"HG",19,10,50,T1,T,I9
8195 RETURN 
9000 REM "ERROR PROCESSING
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9900 REM "END PROGRAM
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
