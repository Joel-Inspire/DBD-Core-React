0010 ! QL2CHG - XML Data change file upload from DBD to EQD for QNET customers
0035 REM "5.7 - 06/13/23 - 13.300633 - jvv - SSP# 307387
0037 REM "307387-EQLink DBD Bridge to Qnet                                   
0040 REM "Copyright 2023 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 BEGIN 
0090 CLEAR ; SETERR 0100; ENTER 
0100 ! ETERR 9000
0102 GOSUB SET_READONLY
0110 X0$="QL2EQD",X1$="XML upload to EQD"
0130 IF NOT(BKG) AND NOT(GUI_MODE) THEN PRINT 'CS',@(0,3),"Utility to Create EQ Link XML files "
0140 IF (BKG) THEN GOSUB GET_ENVIRONMENT
0163 X0=-1
0164 ! %LOG_LEVEL=-1
0165 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2
0300 ! IO list
0310 DIM AR1[15],FS1[13],FS2[29],AR5[15]
0315 DIM FMPD$(300),FMPD[6]
0318 DIM IC0[33],FM1[31],IC1[20],P[2]
0320 DIM FMPM$(241),FMPM[11]
0325 ! iolist for customer information
0330 AR1_IOL:IOLIST AR1$,AR1[0],AR1[1],AR1[2],AR1[3],AR1[4],AR1[5],AR1[6],AR1[7],AR1[8],AR1[9],AR1[10],AR1[11],AR1[12],AR1[13],AR1[14],AR1[15]
0335 ! iolist for Order
0340 IOLIST FS1$,FS1[0],FS1[1],FS1[2],FS1[3],FS1[4],FS1[5],FS1[6],FS1[7],FS1[8],FS1[9],FS1[10],FS1[11],FS1[12],FS1[13]
0345 IOLIST FS2$,FS2[0],FS2[1],FS2[2],FS2[3],FS2[4],FS2[5],FS2[6],FS2[7],FS2[8],FS2[9],FS2[10],FS2[11],FS2[12],FS2[13],FS2[14],FS2[15],FS2[16],FS2[17],FS2[18],FS2[19],FS2[20],FS2[21],FS2[22],FS2[23],FS2[24],FS2[25],FS2[26],FS2[27],FS2[28],FS2[29]
0350 IOLIST FM0$(1)
0355 FMPD_IOL:IOLIST FMPD$(1),FMPD{ALL}
0360 FMPM_IOL:IOLIST FMPM$(1),FMPM{ALL} ! Freight Markup
0365 IC0_IOL:IOLIST IC0$,IC0{ALL}
0370 FM1_IOL:IOLIST FM1$,FM1{ALL}
0375 IC1_IOL:IOLIST IC1$,IC1{ALL}
0380 FSW_IOL:IOLIST FSW$,FSW{ALL}
0385 FM5_IOL:IOLIST FM5$,FM5{ALL}
0390 FM3_IOL:IOLIST FM3$,FM3{ALL}
0395 FM4_IOL:IOLIST FM4$,FM4{ALL}
0400 DRT_IOL:IOLIST TABLE_NAME$,DATA_KEY$,CHANGE_TYPE$,CHANGE_TS$,OPER_CODE$,FID$
0410 IOLIST MDATA$,MTYPE$,ECUST$,DT1$,DT2$
0420 IF %LOG_LEVEL=%LOG_DEBUG THEN {
0430 LOG_OPTIONS$="A"; CALL "ZZ2LOG;OPEN_LOG",ERR=*NEXT,X3$,X4$,FN%GET_BASENAME$(PGN)+"."+FID(0)+".log",LOG_OPTIONS$,LOG_CHANNEL
0440  }
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01O AR1...  02O FM0...  03O IC1...  040 FS1...  05O FM1...  06O FS2...  13O ZZPARM  07O IC0...  08O FMP...  09O PO1...  10O FM5...  11O ASW...  12O FSW...  14O FM3...  15O FM4...  16O AR3...  17O PO3...  18O AR5...  19O KT0...  20O CD0...  21O ECR...  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0530 IF NOT(FN%ISOPEN(_DRT)) THEN _DRT=HFN; OPEN (_DRT,IOL=*,ERR=*NEXT)"DRT"+%C$; CALL "ZZWIOL",_DRT,"B",DRT_IOL$
0550 _MEM=HFN; OPEN (_MEM)"*memory*"
0552 _MMO=HFN; OPEN (_MMO)"*memory*"
0555 ! _MEM=HFN; OPEN (_MEM)"DRJ500"
0558 _MMC=HFN; OPEN (_MMC)"*memory*"
0560 ! _MMO=HFN; OPEN (_MMO)"DRV500"
0565 FM1_CHL=UNT; OPEN (FM1_CHL,IOL=*)"FM1"+%C$
0570 FM3_CHL=UNT; OPEN (FM3_CHL,IOL=*)"FM3"+%C$
0600 REM "
0700 ! Set Variables
0710 XHDG$="EQLINK"
0715 ! QFRM$="QCHG"
0718 OTHF$="N"
0720 CURR_TS$=DTE(0:"%Y%Mz%Dz%Hz%mz%sz") ! Set DateTime when job starts
0730 FIND (Z[13],KEY=X3$(9,3)+"QLGDTE",DOM=*NEXT)XMLDTE$
0735 IF STP(XMLDTE$,2)="" THEN XMLDTE$=DIM(14,"0") ! CURR_DATE$
0740 QLPARAM$=""; FIND (Z[13],KEY=%C$+"Q/L",DOM=*NEXT)QLPARAM$
0745 READ (Z[13],KEY="STAT"+"F/M")F9$,F0
0750 INCL_TAX$="Y"
0760 INCL_OS$="Y"
0770 RPLC$="N" ! Only changes from file DRT are sent to EQD
0780 IF (BKG) THEN LOG_MSG$="QL2CHG|BKGMODE|"; GOSUB LOG_MSG ELSE LOG_MSG$="QL2CHG|NOT BKGMODE|"; GOSUB LOG_MSG
0790 ! FLNAME$=File name found in DRT Change tracking File
0791 ! FLTYPE$=XML section populated based on the file contents
0792 ! CustSpecific FLTYPES$ 01C=Cust,02S=ShipTo,03I=Items,04U=LocUsage
0793 ! General FLTYPES$ 05O=Slp,06O=ShipVia,07O=Tax
0800 FLNAME$="AR1XPDXPEFM0FM1IC0FSWIC1KT0FM3AR3XPSAR5ECR"
0820 FLTYPE$="01C01C01C02S03I03I03I03I03I04U05O06O07O03I"
0825 FLNUM$="001001001002003003003003003004005006007003"
1000 ! Process DRT file by Date, to pick up all records since last run date (XMLDATE$ IN ZZPARM)
1005 DRTIOL$=IOL_DRT$
1020 SELECT IOL=DRT_IOL FROM "DRT"+%C$,KNO=1 WHERE CHANGE_TS$>XMLDTE$ AND MID(TABLE_NAME$,1,2)<>"OS"
1021 ! SELECT IOL=DRT_IOL FROM "DRT"+%C$,KNO=1 WHERE CHANGE_TS$>XMLDTE$
2000 FL$=TABLE_NAME$(1,3)
2010 XX=POS(FL$=FLNAME$,3); IF XX=0 THEN GOTO NEXT_DRT
2015 FOR X=1 TO LEN(FLNAME$) STEP 3
2018 IF FL$=FLNAME$(X,3) THEN GOTO *NEXT ELSE GOTO 2040
2020 XN$=FLNUM$(X,3),XN=NUM(XN$)
2030 XF$=FLTYPE$(X,3) ! IF Customer, shipt , item, usage record
2035 BREAK
2040 NEXT X
2050 ON XN GOSUB NO_DRT,CUST_TYPE,SHIP_TYPE,ITEM_TYPE,USG_TYPE,OTH_TYPE,OTH_TYPE,OTH_TYPE,CTLG_TYPE,CTLG_TYPE,NO_DRT
2060 NEXT_DRT:
2070 NEXT RECORD 
2072 GOSUB FIND_OPEN_ORDERS
2075 GOTO CREATE_XML
2080 NO_DRT:
2090 RETURN 
2099 ! 
3000 CUST_TYPE:
3010 CUST$=MID(DATA_KEY$,1,10)
3015 GOSUB CHECK_EQLINK_CUST; IF NOT(QCUST) THEN RETURN 
3020 IF CHANGE_TYPE$="D" THEN CUST_STAT$="N"; GOTO FIND_CXREF
3025 FIND (Z[1],KEY=CUST$,DOM=END_CUST_TYPE)IOL=AR1_IOL
3030 CUST_STAT$=STP(MID(AR1$,563,1),2); IF CUST_STAT$="Y" THEN GOTO UPD_CUST
3040 FIND_CXREF:
3045 XET$="AR1",XSYS$="EQLINK",XKY$=CUST$,XVAL$="",CUST_FOUND=0; CALL "UPDZYR;FIND_XREF",ERR=*NEXT,XET$,XSYS$,XKY$,XVAL$,CUST_STAT$,CUST_FOUND ! SSP 307387
3050 IF NOT(CUST_FOUND) THEN GOTO END_CUST_TYPE
3055 DT1$=XVAL$
3060 UPD_CUST: MMKEY$=CUST$; GOSUB WRITE_MEM
3080 END_CUST_TYPE:RETURN 
3090 ! 
3200 SHIP_TYPE:
3210 IF MID(DATA_KEY$,1,1)<>"C" THEN RETURN 
3220 CUST$=MID(DATA_KEY$,2,10)
3230 GOSUB CHECK_EQLINK_CUST; IF NOT(QCUST) THEN RETURN 
3240 MMKEY$=DATA_KEY$; GOSUB WRITE_MEM
3280 END_SHIP_TYPE:RETURN 
3290 ! 
3500 ITEM_TYPE:
3510 CUST$=MID(DATA_KEY$,1,10)
3520 GOSUB CHECK_EQLINK_CUST; IF NOT(QCUST) THEN RETURN 
3530 ITEM$=DATA_KEY$(11,10)
3535 IF CHANGE_TYPE$="D" THEN ITM_STAT$="N"; GOTO FIND_XREF
3540 FIND (Z[5],KEY=CUST$+ITEM$,DOM=END_ITEM_TYPE)IOL=FM1_IOL
3542 GOTO UPD_ITEM ! SSP 307387
3545 ITM_STAT$=STP(MID(FM1$,198,1),2); IF ITM_STAT$="Y" THEN GOTO UPD_ITEM
3550 FIND_XREF:
3555 XET$="ITM",XSYS$="EQLINK",XKY$=CUST$+ITEM$,XVAL$="",ITM_FOUND=0; CALL "UPDZYR;FIND_XREF",ERR=*NEXT,XET$,XSYS$,XKY$,XVAL$,ITM_STAT$,ITM_FOUND ! SSP 307387
3560 IF NOT(ITM_FOUND) THEN GOTO END_ITEM_TYPE
3565 DT1$=XVAL$
3580 UPD_ITEM: MMKEY$=CUST$+ITEM$; GOSUB WRITE_MEM; DT1$="",DT2$=""
3585 GOSUB ITEM_CHANGE_CC_USAGE
3590 END_ITEM_TYPE:RETURN 
3599 ! 
3600 ITEM_CHANGE_CC_USAGE:
3602 ! Cost Center/Location Usage when an item is changed. This is to get latest average cost updated TO FM1/FM4
3608 DIM FM3$(57),FM3[14],FM4[16]
3610 KYI$=CUST$+ITEM$
3615 FKI$="D"+CUST$; FIND (Z[8],KEY=FKI$,DOM=EXIT_ITEM_CHANGE_CC_USAGE)FMPDI$
3620 FYI$=FMPDI$(52,4),ACCTPDI$=FMPDI$(56,2)
3625 F3KI$=KYI$,F3UI$=FYI$+"U"
3630 READ (Z[14],KEY=KYI$+"",ERR=*NEXT)
3635 NEXT_FM3I:
3640 KI$=KEY(Z[14],END=EXIT_ITEM_CHANGE_CC_USAGE); READ (Z[14],KEY=KI$)IOL=FM3_IOL
3645 IF KI$(1,LEN(KYI$))<>KYI$ THEN GOTO EXIT_ITEM_CHANGE_CC_USAGE ! End of Customer/ITEM
3650 IF KI$(29,1)<>"U" THEN GOTO NEXT_FM3I ! Check for current fiscal year 
3655 ! Write entries into memfil as if FM3, so can print export usage for all locations for this item$
3660 XF$="04U",MMKEY$=KI$(1,24)+DIM(5),MTYPE$="W",DT1$=FYI$,DT2$=ACCTPDI$
3665 GOSUB WRITE_MEM; DT1$="",DT2$="" ! OTO EXIT_ITEM_CHANGE_CC_USAGE
3670 GOTO NEXT_FM3I
3690 EXIT_ITEM_CHANGE_CC_USAGE:RETURN 
3699 ! 
3700 USG_TYPE:
3710 CUST$=MID(DATA_KEY$,1,10)
3720 GOSUB CHECK_EQLINK_CUST; IF NOT(QCUST) THEN RETURN 
3730 ITEM$=DATA_KEY$(11,10)
3750 FIND (Z[5],KEY=CUST$+ITEM$,DOM=END_USG_TYPE)IOL=FM1_IOL
3755 ! IF POS(MID(FM1$,198,1)="YR")=0 THEN GOTO END_USG_TYPE
3760 FKC$="D"+CUST$; FIND (Z[8],KEY=FKC$,DOM=END_USG_TYPE)FMPDU$; FY$=MID(FMPDU$,52,4),ACCTPD$=MID(FMPDU$,56,2)
3765 ! IF MID(DATA_KEY$,25,4)<>FY$ THEN GOTO END_USG_TYPE
3766 IF MID(DATA_KEY$,29,1)<>"U" THEN GOTO END_USG_TYPE
3770 DT1$=FY$,DT2$=ACCTPD$
3780 MMKEY$=DATA_KEY$(1,24)+DIM(5); GOSUB WRITE_MEM; DT1$="",DT2$=""
3790 END_USG_TYPE:RETURN 
3800 CTLG_TYPE:
3810 MMKEY$=DATA_KEY$; GOSUB WRITE_MEM; DT1$="",DT2$=""
3890 RETURN 
3899 ! 
3900 OTH_TYPE:
3910 MMO_KEY$=TABLE_NAME$+DATA_KEY$,MDATA$=DATA_KEY$,MTYPE$=CHANGE_TYPE$; OCNT++
3920 WRITE (_MMO,KEY=MMO_KEY$)IOL=0410
3950 RETURN 
3999 ! 
4000 CHECK_EQLINK_CUST:
4010 QCUST=0,ECUST$=""
4015 IF STP(CUST$,2)="" THEN GOTO END_EQLINK_CUST
4020 FIND (Z[1],KEY=CUST$,DOM=END_EQLINK_CUST)IOL=AR1_IOL
4030 IF POS(MID(AR1$,563,1)="YA")=0 THEN GOTO END_EQLINK_CUST
4040 QCUST=1
4050 ECUST$=AR1$(564,6)
4080 END_EQLINK_CUST:
4090 RETURN 
4099 ! 
4100 WRITE_MEM:
4110 MEM_KEY$=CUST$+XF$+MMKEY$,MDATA$=MMKEY$,MTYPE$=CHANGE_TYPE$
4140 WRITE (_MEM,KEY=MEM_KEY$)IOL=0410
4150 CNT=CNT+1
4290 RETURN 
4299 ! 
5000 CREATE_XML:
5010 LOG_MSG$="QL2CHG|RECS TO PROCESS|"+STR(CNT)+"|"; GOSUB LOG_MSG
5015 IF CNT=0 THEN GOTO OTHER_FILES
5020 HLD_CUST$=DIM(10),HLD_KMTYPE=0
5025 HEADER$="",TF_VALUE$="",CCNT=0,CHDR$="",CDTL$="",SHDR$="",SDTL$="",HLD_KMTYPE=0,SCNT=0,ICNT=0,UCNT=0
5030 READ (_MEM,KEY=HLD_CUST$,ERR=*NEXT)
5040 NEXT_MEM:
5050 KM$=KEY(_MEM,END=OTHER_CHG_FILE); READ (_MEM,KEY=KM$)IOL=0410
5052 KMCUST$=KM$(1,LEN(HLD_CUST$)),KMTYPE=NUM(KM$(11,2))
5055 IF HLD_CUST$=DIM(10) THEN GOSUB CREATE_CHG_FILE; HLD_CUST$=KMCUST$,HLD_KMTYPE=KMTYPE; GOTO SECTION_TYPE
5070 IF KMCUST$<>HLD_CUST$ THEN GOSUB END_XML_SECTION; GOSUB END_CHG_FILE; GOSUB CREATE_CHG_FILE; HLD_CUST$=KMCUST$; GOTO SECTION_TYPE
5080 IF KMTYPE<>HLD_KMTYPE THEN GOSUB END_XML_SECTION; HLD_KMTYPE=KMTYPE
5150 SECTION_TYPE:
5160 ON KMTYPE GOSUB NO_TYPE,CUST_CHG,SHP_CHG,ITM_CHG,USG_CHG,OPEN_ORD,NO_TYPE
5170 GOTO NEXT_MEM
5180 NO_TYPE:RETURN 
5190 ! 
5199 ! 
5200 CUST_CHG:
5205 IF MTYPE$="D" THEN GOSUB CUST_DELETE; RETURN 
5210 FIND (Z[1],KEY=KMCUST$,DOM=*RETURN)IOL=AR1_IOL
5215 HEADER$="",TF_VALUE$="",CCNT=0,CHDR$="",CDTL$="",SHDR$="",SDTL$=""
5218 CUST$=KMCUST$
5220 RPLC$="N"; PERFORM "QL2EQD;CUST_XML"
5290 RETURN 
5299 ! 
5300 SHP_CHG:
5305 SHP_DEL$="N"; IF MTYPE$="D" THEN SHP_DEL$="Y"; SHIPTO$=MID(MDATA$,12,4); SCNT++; GOTO 5312
5310 FIND (Z[2],KEY=MDATA$,DOM=*RETURN)FM0$; SCNT++
5312 HEADER$="",TF_VALUE$="",CCNT=0,CHDR$="",CDTL$="",SHDR$="",SDTL$=""
5315 IF SCNT>1 THEN GOTO 5340
5320 SECTION$="SHIPTO_SECTION"; PERFORM "QL2EQD;START_XML_SECTION"
5330 GRP$="SHIPTOS"; HEADER$="SHIPTOS"+$09$,TF_VALUE$="ClientId="+QUO+FNX$(STP(ECUST$,2))+QUO+" Replace="+QUO+RPLC$+QUO+$09$; TP=1,GL=5; PERFORM "QL2EQD; XML"
5340 IF SHP_DEL$="Y" THEN PERFORM "QL2EQD;SHIPTO_PRINT" ELSE PERFORM "QL2EQD;SHIPTO_DATA"
5345 FIRST=1
5350 RETURN 
5390 ! 
5400 ITM_CHG:
5410 DIM IC0[33],FM1[31],IC1[20],P[2]
5415 ITM_DEL$="N"; IF MTYPE$="D" THEN ITM_DEL$="Y"; ITEM$=MID(MDATA$,11,10),QITEM$=ITEM$; ICNT++; GOTO 5430
5420 FIND (Z[5],KEY=MDATA$,DOM=*RETURN)IOL=FM1_IOL; ICNT++
5422 CIC_ITEM$=STP(MID(FM1$,350,20),2)
5425 STKI=0; DIM IC0$(200); FIND (Z[7],KEY=MDATA$,DOM=*NEXT)IOL=IC0_IOL; STKI=1; PERFORM "QL2EQD;POD_ITEM"
5428 FKC$="D"+MDATA$(1,10); FIND (Z[8],KEY=FKU$,DOM=*NEXT)FMPDU$; FY$=MID(FMPDU$,52,4),ACCTPD$=MID(FMPDU$,56,2)
5430 IF ICNT>1 THEN GOTO 5480
5440 SECTION$="ITEM_SECTION"; PERFORM "QL2EQD;START_XML_SECTION"
5450 GRP$="ITEMS"; HEADER$="ITEMS"+$09$,TF_VALUE$="ClientId="+QUO+FNX$(STP(ECUST$,2))+QUO+" Replace="+QUO+RPLC$+QUO+$09$; TP=1,GL=5; PERFORM "QL2EQD;XML"
5480 KS$=MDATA$
5481 IF ITM_DEL$="Y" THEN PERFORM "QL2EQD;ITEM_DATA1" ELSE PERFORM "QL2EQD;ITEM_DATA"
5485 MIN_QTY$=STR(IC0[33])
5490 RETURN 
5499 ! 
5600 USG_CHG:
5602 DIM FM3[33]
5605 ! FIND (Z[14],KEY=MDATA$,DOM=EXIT_USG)IOL=FM3_IOL
5610 CUST$=MDATA$(1,10),ITEM$=MDATA$(11,10)
5615 OOITEM$=ITEM$; PERFORM "QL2EQD;CHECK_VALID_ITEM"
5620 FKC$="D"+CUST$; FIND (Z[8],KEY=FKC$,DOM=*NEXT)FMPDU$; FY$=MID(FMPDU$,52,4),ACCTPD$=MID(FMPDU$,56,2)
5625 ! IF MID(MDATA$,25,4)<>FY$ THEN GOTO EXIT_USG
5626 ! IF MID(MDATA$,29,1)<>"U" THEN GOTO EXIT_USG
5635 PRIOR_YR$=STR(NUM(FY$)-1:"0000"); UCNT++
5640 IF UCNT>1 THEN GOTO USG_ITM
5645 HLD_KEY$=DIM(24)
5650 SECTION$="CC_USAGE_SECTION"; PERFORM "QL2EQD;START_XML_SECTION"
5655 HEADER$="ITEM_CLIENT"+$09$,TF_VALUE$="ClientId="+QUO+FNX$(STP(ECUST$,2))+QUO+$09$; GL=5; TP=1; PERFORM "QL2EQD;XML"
5660 USG_ITM:
5670 IF ITEM$=HLD_KEY$(11,10) THEN K$=MDATA$(1,24); GOTO USG_CC
5675 IF HLD_KEY$(11,10)<>DIM(10) THEN PERFORM "QL2EQD;END_CC_ITEM"
5676 K$=MDATA$(1,24)
5678 QITEM$=CIC_ITEM$; IF QITEM$="" THEN QITEM$=ITEM$
5680 HEADER$="CC_USAGE"+$09$,TF_VALUE$="ItemId="+QUO+FNX$(STP(QITEM$,2))+QUO+$09$; GL=7; TP=1; PERFORM "QL2EQD;XML"
5685 USG_CC:
5690 QFRM$="QCHG"; PERFORM "QL2EQD;USG_LOC"; QFRM$=""
5700 HLD_KEY$=MDATA$(1,24)
5710 EXIT_USG:
5720 RETURN 
5799 ! 
5800 OPEN_ORD:
5810 CUST$=MDATA$(1,10)
5820 PERFORM "QL2EQD;OPEN_ORDER_XML"
5870 RETURN 
5890 ! 
6000 CUST_DELETE:
6090 RETURN 
6099 ! 
6100 LOG_MSG:
6120 IF %LOG_LEVEL=%LOG_DEBUG THEN {
6130 CALL "ZZ2LOG;LOG_MSG",ERR=*NEXT,X3$,X4$,LOG_CHANNEL,LOG_MSG$,%LOG_DEBUG
6140  }
6145 RETURN 
6500 UPD_TS:
6505 GOSUB GITEM_CHG
6510 ! Update Time stamp in ZZPARM after succesful file creatin run
6520 WRITE (Z[13],KEY=X3$(9,3)+"QLGDTE")CURR_TS$
6530 LOG_MSG$="QL2CHG|UPD_TS |"; GOSUB LOG_MSG
6550 GOTO 9900
6599 ! 
7000 CREATE_CHG_FILE:
7005 XFILE$=STP(ECUST$,2),XFTYPE$="_ChangesOnly"
7008 XDIV$=MID(KM$,1,2)
7010 PERFORM "QL2EQD;CREATE_XML_FILE"
7015 HLD_CUST$=KMCUST$,HLD_KMTYPE=KMTYPE; GOTO EXIT_XML_CHG_FILE
7030 EXIT_XML_CHG_FILE:
7035 HEADER$="",TF_VALUE$="",CCNT=0,CHDR$="",CDTL$="",SHDR$="",SDTL$="",SCNT=0,ICNT=0,UCNT=0
7040 RETURN 
7049 ! 
7050 END_CHG_FILE:
7060 PERFORM "QL2EQD;END_XML_FILE"
7065 RETURN 
7090 ! 
7100 END_XML_SECTION:
7110 IF HLD_KMTYPE=0 THEN HLD_KMTYPE=KMTYPE; RETURN 
7130 IF HLD_KMTYPE=2 THEN PERFORM "QL2EQD;EXIT_SHIPTO"; FIRST=0
7140 IF HLD_KMTYPE=3 THEN PERFORM "QL2EQD;EXIT_ITEM"
7150 IF HLD_KMTYPE=4 THEN QFRM$="QCHG",FIRST=1; PERFORM "QL2EQD;END_CC_USAGE"; QCHG$="",FIRST=0
7160 HLD_KMTYPE=KMTYPE
7170 RETURN 
7190 ! 
7251 FNX:
7252 DEF FNX$(LOCAL X$)
7265 TRANSLATE X$,"&"+$05$+"&amp;"+"<"+$04$+"&lt;"+">"+$04$+"&gt;"+QUO+$06$+"&quot;"+"'"+$06$+"&apos;" ! SSP247374, fix for apostrophe
7270 RETURN X$
7295 END DEF
7299 ! 
7500 REM "Get command line args and set environment
7510 GET_ENVIRONMENT:
7520 REM " ENV_ID= Specify the "TFE" record code used to grab environment for the current session
7530 FOR I=0 TO NAR
7540 TMP$=ARG(I)
7550 IF MSK(UCS(TMP$),"ENV_ID=") THEN ENV_ID$=PAD(MID(TMP$,MSL+1),8); CONTINUE ! Set ENV_ID (required, eg: EC3SRV or OUTDIR)
7555 IF MSK(UCS(TMP$),"LOG_LEVEL=") THEN %LOG_LEVEL=NUM(MID(TMP$,MSL+1)); CONTINUE ! Set LOG_LEVEL global
7560 NEXT I
7570 CLOSE (14); OPEN (14)"ZZPARM"; READ (14,KEY="TFE"+ENV_ID$)X3$,*,X4$; X3$(1,8)=FID(0)+DIM(6),X3$(169,3)=FID(0)
7580 WRITE (14,KEY=X3$(1,8))X3$,"",X4$; %X3$=X3$,%X4$=X4$,%X3_SET=1
7585 CLOSE (14)
7590 RETURN 
7599 ! 
8500 SET_READONLY:REM "Set the PRM READONLY to on
8510 SAVE_XI=PRM('XI'); SET_PARAM 'XI' ! Ignore exclusive locks, save previous setting
8525 SET_READONLY_END:RETURN 
8530 CLEAR_READONLY:REM "Restore previous setting
8535 SET_PARAM 'XI'=SAVE_XI ! restore previous setting
8545 CLEAR_READONLY_END:RETURN 
9000 REM "ERROR PROCESSING
9001 LOG_MSG$="QL2CHG|ERROR BEFORE RELEASE|"; GOSUB LOG_MSG
9005 IF NOT(BKG) THEN ESCAPE 
9900 REM "END PROGRAM
9905 SETERR 9910; GOSUB CLEAR_READONLY
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9912 LOG_MSG$="QL2CHG|BEFORE RELEASE|"; GOSUB LOG_MSG
9915 ! CLOSE (*)
9920 IF BKG THEN RELEASE 
9925 LOG_MSG$="QL2CHG|NONBKG RELEASE|"; GOSUB LOG_MSG
9930 SETERR 9940; Q1$=A1$; RELEASE 
9935 LOG_MSG$="QL2CHG|AFTER RELEASE|"; GOSUB LOG_MSG
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
10000 OTHER_CHG_FILE:
10010 ! This section will create a separate XML Change file for master data file changes completing last customer change file
10020 GOSUB END_XML_SECTION
10030 PERFORM "QL2EQD;END_XML_FILE"
10038 OTHER_FILES:
10039 LOG_MSG$="QL2CHG|OTHER RECS TO PROCESS|"+STR(OCNT)+"|"; GOSUB LOG_MSG
10040 IF OCNT=0 THEN GOTO CATALOG_CUST_CHG
10050 XFILE$="CHG_OTHER",XFTYPE$=""; OTHF$="Y"; PERFORM "QL2EQD; CREATE_XML_FILE"; OTHF$="N" ! XML file for tables
10056 HLD_TBL$=DIM(10)
10060 READ (_MMO,KEY="",DOM=*NEXT)
10070 NEXT_MMO:
10080 K$=KEY(_MMO,END=END_OTHER_CHG); READ (_MMO,KEY=K$)IOL=0410
10085 CHG_TBL$=K$(1,6)
10090 IF CHG_TBL$<>HLD_TBL$ THEN GOSUB XML_OTH_FILE
10100 IF OTBL$="AR3" THEN GOSUB CNS_PRINT
10110 IF OTBL$="XPS" THEN GOSUB SHIPVIA_PRINT
10120 IF OTBL$="AR5" THEN GOSUB TAX_PRINT
10150 GOTO NEXT_MMO
10160 END_OTHER_CHG:
10162 PERFORM "QL2EQD; END_XML_SECTION"
10165 PERFORM "QL2EQD;END_XML_FILE"
10170 GOTO CATALOG_CUST_CHG
10199 ! 
10200 CNS_PRINT:
10210 K$=MDATA$; FIND (Z[16],KEY=K$,DOM=*NEXT)AR3$
10220 CNS_DEL$="N"; IF MTYPE$="D" THEN CNS_DEL$="Y",CNSCD$=K$
10230 CCO=1; PERFORM "QL2EQD;CNS_PRINT_XML"
10250 RETURN 
10299 ! 
10300 SHIPVIA_PRINT:
10310 KS$=MDATA$; FIND (Z[8],KEY=KS$,DOM=*NEXT)FMPS$
10320 VIA_DEL$="N"; IF MTYPE$="D" THEN VIA_DEL$="Y",VIACD$=KS$(2,1)
10330 CCO=1; PERFORM "QL2EQD;SHIPVIA_PRINT_XML"
10350 RETURN 
10399 ! 
10400 TAX_PRINT:
10410 KS$=MDATA$; FIND (Z[18],KEY=KS$,DOM=*NEXT)AR5$,AR5{ALL}; GOTO 10430
10430 TAX_DEL$="N"; IF MTYPE$="D" THEN TAX_DEL$="Y",TXCD$=KS$
10440 CCO=1; PERFORM "QL2EQD;TAX_PRINT_XML"
10450 RETURN 
10499 ! 
11000 FIND_OPEN_ORDERS:
11005 RETURN 
11010 GOSUB GET_CUST_LIST
11020 FOR PCNT=1 TO LEN(CUST_LIST$) STEP 10
11025 OCUST$=CUST_LIST$(PCNT,10)
11028 OOCNT=0
11030 SELECT * FROM "FS1"+%C$,KNO=1 WHERE CUST_DIV$+CUST_CODE$=OCUST$
11040 OOCNT=OOCNT+1
11050 NEXT RECORD 
11055 IF OOCNT=0 THEN CONTINUE
11060 CUST$=OCUST$; GOSUB CHECK_EQLINK_CUST; IF NOT(QCUST) THEN CONTINUE
11065 CUST$=OCUST$,XF$="05P",MMKEY$=CUST$,CHANGE_TYPE$="W"; GOSUB WRITE_MEM
11070 NEXT PCNT
11090 RETURN 
11099 ! 
12000 XML_OTH_FILE:
12010 IF STP(HLD_TBL$,2)="" THEN HLD_TBL$=CHG_TBL$; GOTO EXIT_XML_OTH_FILE
12020 PERFORM "QL2EQD; END_XML_SECTION"
12030 HLD_TBL$=CHG_TBL$
12040 EXIT_XML_OTH_FILE:
12045 HEADER$="",TF_VALUE$="",CCNT=0,CHDR$="",CDTL$="",SHDR$="",SDTL$="",HLD_KMTYPE=0,SCNT=0,ICNT=0,UCNT=0
12050 OTBL$=MID(HLD_TBL$,1,3)
12060 IF OTBL$="AR3" THEN SECTION$="CNS_SECTION"
12065 IF OTBL$="XPS" THEN SECTION$="SHIPVIA_SECTION"
12068 IF OTBL$="AR5" THEN SECTION$="TAX_SECTION"
12070 FIRST=0
12090 RETURN 
12099 ! 
13000 GITEM_CHG:
13010 GITEM_CNT=0,GFIRST=0
13020 SELECT IOL=DRT_IOL FROM "DRT"+%C$,KNO=1 WHERE CHANGE_TS$>XMLDTE$ AND MID(TABLE_NAME$,1,3)="IC0"
13030 IF STP(DATA_KEY$(1,10),2)<>"" THEN GOTO NEXT_GITEM
13032 DIM IC0$(200); DIM IC0[33]; FIND (Z[7],KEY=DATA_KEY$,DOM=NEXT_GITEM)IOL=IC0_IOL
13035 IF POS(IC0$(118,1)="USC")<>0 THEN GOTO NEXT_GITEM ! Do not send up Office Supply items
13040 IF GFIRST=0 THEN GFIRST=1; GOSUB CREATE_GITEM_FILE
13045 OOITEM$=IC0$(11,10); VI=1 ! OSUB CHECK_VALID_ITEM; IF VI=0 THEN GOTO NEXT_GIC0
13050 ITM_DEL$="N"; CUST$=DIM(10)
13060 IHDR$="",IDTL$="",ICNT=0
13070 KS$=DATA_KEY$(1,20)
13080 QFRM$="QCHG"; PERFORM "QL2EQD;GITEM_DATA"; QFRM$=""
13085 GITEM_CNT++
13090 NEXT_GITEM:NEXT RECORD 
13100 IF GITEM_CNT<>0 THEN PERFORM "QL2EQD;EXIT_GITEM"; PERFORM "QL2EQD; END_XML_FILE"
13150 RETURN 
13500 CREATE_GITEM_FILE:
13510 XFILE$="OTHER",XFTYPE$=""; OTHF$="Y"; PERFORM "QL2EQD;CREATE_XML_FILE"; OTHF$="N" ! XML file for tables
13530 SECTION$="ITEM_SECTION"; PERFORM "QL2EQD;START_XML_SECTION"
13540 GRP$="ITEMS"; HEADER$="ITEMS"+$09$,TF_VALUE$="ClientId="+QUO+""+QUO+" Replace="+QUO+RPLC$+QUO+$09$; TP=1,GL=5; PERFORM "QL2EQD;XML"
13580 RETURN 
13590 ! 
14000 ! Routines to find any changes in Essendent data. If a customers priority record OS6 is changed, all items are sent to EQLink.
15000 CATALOG_CUST_CHG:
15010 CAT_CUST$="",CAT_CUST_CNT=0
15020 SELECT IOL=DRT_IOL FROM "DRT"+%C$,KNO=1 WHERE CHANGE_TS$>XMLDTE$ AND MID(TABLE_NAME$,1,3)="OS6"
15025 CUST$=MID(DATA_KEY$,1,10)
15030 GOSUB CHECK_EQLINK_CUST; IF NOT(QCUST) THEN GOTO NEXT_OS6
15040 GOSUB CREATE_CAT_FILE
15070 PERFORM "QL2EQD;SUPPLY_CATALOG_XML"
15080 PERFORM "QL2EQD;END_XML_FILE"
15085 CAT_CUST$=CAT_CUST$+CUST$; CAT_CUST_CNT++
15090 NEXT_OS6:NEXT RECORD 
15099 ! 
16000 ! Routine to find any amended Essendent item records only. If the customer has a previos OS6 record change, this routine will be bypassed for that customer. All remaining customers will get a separate Essendant price upload file withe these item changes if applicable to them.
16005 CATALOG_ITEM_CHG:
16010 CAT_ITEM_CNT=0,FIRST=0,CCNT=0
16020 SELECT IOL=DRT_IOL FROM "DRT"+%C$,KNO=1 WHERE CHANGE_TS$>XMLDTE$ AND MID(TABLE_NAME$,1,3)="OS1"
16030 MMC_KEY$=MID(DATA_KEY$,1,10); CCNT++
16035 ! MMC_KEY$=TABLE_NAME$+DATA_KEY$,MDATA$=DATA_KEY$,MTYPE$=CHANGE_TYPE$; CCNT++
16040 WRITE (_MMC,KEY=MMC_KEY$)MMC_KEY$
16050 NEXT RECORD 
16060 LOG_MSG$="QL2CHG|BEFORE UPD_TS |"+STR(CCNT)+"|"; GOSUB LOG_MSG
16080 IF CCNT=0 THEN GOTO UPD_TS
16090 GOSUB GET_CUST_LIST
16100 FOR XCNT=1 TO LEN(CUST_LIST$) STEP 10
16110 CUST$=CUST_LIST$(XCNT,10)
16120 IF POS(CUST$=CAT_CUST$,10)<>0 THEN CONTINUE
16130 OS6$=""; QFRM$="QCHG"; PERFORM "QL2EQD;SUPPLY_CATALOG_XML"; QFRM$=""
16135 IF LEN(OS6$)=0 THEN CONTINUE
16140 GOSUB CREATE_CAT_FILE
16150 SECTION$="SUPPLY_CATALOG_SECTION"; PERFORM "QL2EQD;START_XML_SECTION"
16160 OS0_FOUND=0
16200 READ (_MMC,KEY="",DOM=*NEXT)
16210 NEXT_MMC:
16220 KC$=KEY(_MMC,END=END_CAT_ITEM); READ (_MMC,KEY=KC$)CC_ITEM$
16225 ! OS0_FOUND=0
16230 FIND (_OS0,KEY=CC_ITEM$,DOM=NEXT_MMC)OS0$
16240 IF POS(MID(OS0$,124,1)="DI")<>0 THEN GOTO NEXT_MMC ! Ignore deleted/inactive
16280 QCUST_PLANS:
16290 READ (_OS6,KEY=CUST$,DOM=*NEXT)OS6$
16300 IF LEN(OS6$)<>0 THEN PTYPE$=OS6$(11,1)
16305 FIND (Z[1],KEY=CUST$,DOM=NEXT_MMC)SUPP_AR1$; SCUST$=SUPP_AR1$(564,6)
16310 IF PTYPE$="B" THEN PRICING_TYPE$="Best/Flyers/no Mat" ELSE IF PTYPE$="O" THEN PRICING_TYPE$="List Order" ELSE IF PTYPE$="C" THEN PRICING_TYPE$="Cust Best no Flyer" ELSE IF PTYPE$="L" THEN PRICING_TYPE$="List" ELSE IF PTYPE$="P" THEN PRICING_TYPE$="Cust Best/Flyer" ELSE IF PTYPE$="V" THEN PRICING_TYPE$="Very Best-Matrix/Flyers"; REM ssp 220569
16320 DIM I[20]
16330 PROGRAM$="OS2TAA"
16335 ITEM$=CC_ITEM$
16350 NEW_COST=0,NEW_PRICE=0; DIM I[40]; CALL "OS2OBC",%X3$,%X4$,ITEM$,I{ALL},CUST$+DIM(5)+DD$,PROGRAM$,NEW_PRICE,PTYPE$,NEW_COST,1; ASELL=NEW_PRICE,PLAN$=PROGRAM$
16355 ! IF ASELL=0 THEN GOTO NEXT_OS0
16360 IF PRICING_TYPE$="List" THEN PLAN$="LIST"
16365 IF PLAN$="" THEN PLAN$="LIST"
16370 IF PLAN$="LIST" THEN GOTO NEXT_MMC
16380 IF OS0_FOUND=0 THEN OS0_FOUND=1; GOTO *NEXT ELSE GOTO QOS0_ITEM
16400 HEADER$="",TF_VALUE$=""
16410 ITEM$=OS0$(1,10)
16415 ESSITEM$=STP(OS0$(548,20),2)
16420 HEADER$="SUPPLY_CATALOG"+$09$,TF_VALUE$="Client="+QUO+STP(CUST$,2)+QUO+" Type="+QUO+"1"+QUO+$09$; TP=1,GL=5; PERFORM "QL2EQD;XML"
16430 QOS0_ITEM:
16435 ITEM$=OS0$(1,10)
16440 ESSITEM$=STP(OS0$(548,20),2)
16445 HEADER$="P"+$09$,TF_VALUE$="Item="+QUO+ESSITEM$+QUO+" Sell="+QUO+STR(ASELL)+QUO+$09$; TP=2,GL=7; PERFORM "QL2EQD;XML"
16650 CNT=CNT+1
16655 GOTO NEXT_MMC
16700 END_CAT_ITEM:
16710 GHDG$="SUPPLY_CATALOG"; GP=5; PERFORM "QL2EQD; END_GROUP"
16720 SECTION$="SUPPLY_CATALOG_SECTION"; PERFORM "QL2EQD;END_XML_SECTION"
16730 PERFORM "QL2EQD;END_XML_FILE"
16750 NEXT XCNT
16800 GOTO UPD_TS
17000 GET_CUST_LIST:
17005 CUST_LIST$=""
17010 READ (Z[1],KEY="",DOM=*NEXT)
17020 NEXT_CAT_AR1:
17025 KC$=KEY(Z[1],END=END_GET_LIST); READ (Z[1],KEY=KC$)AR1C$
17030 IF MID(AR1C$,563,1)="Y" THEN GOTO *NEXT ELSE GOTO NEXT_CAT_AR1
17040 CUST_LIST$=CUST_LIST$+KC$
17050 GOTO NEXT_CAT_AR1
17090 END_GET_LIST:RETURN 
17099 ! 
17100 CREATE_CAT_FILE:
17110 FIND (Z[1],KEY=CUST$)CCAR1$
17120 ECUST$=CCAR1$(564,6)
17130 XFILE$=STP(ECUST$,2),XFTYPE$="_CatalogOnly"
17140 XDIV$=MID(CUST$,1,2)
17150 PERFORM "QL2EQD;CREATE_XML_FILE"
17190 RETURN 
17199 ! 
56000 REM "307387-EQLink DBD Bridge to Qnet                                   
