0010 REM "Remote Telemarketing Transmission Process <RT2PTA>
0035 REM "4.4 - 08/23/00 - 13.63 - plh - SSP# 128549
0040 REM "Copyright 2000 Computer Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0095 PRECISION 14; T2=TIM; PRECISION 2
0100 SETERR 9000
0105 SETERR 9000; SETESC 9300
0110 X0$="RT2PTA",X1$="Remote T/M File Transfer Process"
0120 DIM A$(397),A[15],B$(40),C$(54),C[3],D$(37),D[2],NULLS$(512,$00$),SPACES$(512); DIM S5$(40)
0140 S1$=$7E$,S2$=$8A$
0210 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0300 REM "I/O lists
0305 REM "IOLIST FOR AR1 - Customer Masterfile
0310 IOLIST A$
0315 REM "IOLIST FOR ARG - Customer category setup
0320 IOLIST B$
0325 REM "IOLIST FOR AR2 - A/R Terms code Masterfile
0330 IOLIST C$
0335 REM "IOLIST FOR AR5 - Sales Tax Masterfile
0340 IOLIST D$
0350 IOLIST E$,E[0]
0420 IOLIST X3$,X4$,V1$,V3$,V2$,V0$
0500 REM "Files
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01O RT0... 02O AR3... 03O RT1... 04O ZZE... 06O ZP4... 09O RT6... 10O RT7... 13O ZZPARM "; REM " 5, 7,  & 12 Reserved for use as temp file open
0520 GOSUB ZZFLES
0585 W9$=""; CALL "RT2PRM",ERR=*NEXT,X3$,X4$,W9$
0695 IF Q1$="" THEN CALL "ZZPROM","9",X3$,Z,"","","",0; IF Z=1 THEN GOTO 9900
0990 READ (Z[1],KEY="",DOM=*NEXT)
1000 REM "Read next record IN RT0
1005 K1$=KEY(Z[1],END=5000)
1010 READ (Z[1],KEY=K1$,DOM=1000)IOL=0310
1011 REM "If seq blank don't transfer data
1015 IF STP(A$(53,2),3," ")="" THEN GOTO 1000
1016 REM "If this is sequence 00 then we are doing the initial load, otherwise we are not.
1020 IF A$(53,2)="00" THEN {
1030 INITIAL_LOAD=1
1040  } ELSE {
1050 INITIAL_LOAD=0
1060  }
1200 REM "Read other records IN AR3
1215 DIM B$(246); FIND (Z[2],KEY=A$(1,4),DOM=*NEXT)IOL=0320; REM "Salesperson info
1310 T0$="N"; IF A$(77,1)="Y" THEN T0$="Y"
1500 REM "Print Data
1510 PRINT @(0,10),'CE',@(20,10),A$(1,4)+" "+B$(5,35)
1520 C9=0
1530 REM "General records
1540 REM "Process records going to all
1550 IF INITIAL_LOAD=0 THEN DIM SP_NAME$(4); GOSUB DO_SP_RT1_RECS
1560 REM "Process salesperson specific records
1570 SP_NAME$=A$(1,4); GOSUB DO_SP_RT1_RECS
1580 REM "Process changed records from RT7
1590 IF W9$(7,1)="H" THEN GOSUB 4700
1600 REM "Get A/R records for the lists in the Application Security
1610 REM by operator record. On the host only
1620 IF W9$(7,1)="H" AND INITIAL_LOAD THEN {
1630 IF POS(" "<>A$(80,20))<>0 THEN GOSUB GET_AR_INFO
1640  } }
1650 REM "IF transfer all FM1, then transfer all of the FM1 file here
1660 IF T0$="Y" AND W9$(7,1)="H" AND INITIAL_LOAD THEN {
1670 F5$="FM1...",K5$=""
1680 GOSUB LOAD_FILE_RECS
1690  }
1700 REM "On initial load send the product codes along
1710 IF W9$(7,1)="H" AND INITIAL_LOAD THEN {
1711 F5$="FMP..."
1712 K5$="T"
1720 GOSUB LOAD_FILE_RECS
1721  }
1730 REM "If transfer stock items is "Y" then transfer stock item
1740 REM master, stock item location availabilty and supplier info
1750 IF A$(78,1)="Y" AND W9$(7,1)="H" AND INITIAL_LOAD THEN {
1760 F5$="IC0..."
1761 K5$=S5$(1,10)
1770 GOSUB LOAD_FILE_RECS
1780 F5$="IC1..."
1781 K5$=S5$(1,10)
1790 GOSUB LOAD_FILE_RECS
1800 F5$="IC2..."
1801 K5$=S5$(1,10)
1810 GOSUB LOAD_FILE_RECS
1820  }
1821 DIM SP_NAME$(4); GOSUB DO_SP_RT1_RECS
1830 REM "Setup and send security record
1840 IF W9$(7,1)="H" THEN GOSUB CREATE_PERMISSION_REC
1850 GOSUB 3900; REM "Done with this package
1900 REM TRANSFER THIS PACKAGE
1910 IF X3$(188,8)<>"NOUPDATE" THEN {
1920 MESS$="Start Transfer process to host... "
1930 GOSUB DO_MESSAGE
1940 CALL "RT2TRN",X3$,X4$,W9$,A$(1,4)
1945 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
1950 PRINT @(0,15),'CE',@(20,15),'SB',"R/T Package:",@(27,16),"Size:",'SF'
1951 PRINT @(35,15),F0$
1955 PRINT @(0,10),'CE',@(20,10),A$(1,4)+" "+B$(5,35)
1960 PRINT @(20,12),J3$," ",'CL',FNS$(MID(D$,7,39))
1965 PRINT @(33,16),DEC(TEMP$(38,4)):"##,###,###"
1970  }
1975 GOTO 1000
2000 DO_SP_RT1_RECS:REM "Update & print RT1 records w/salesperson SP_NAME$
2010 RT1_REC$=""; READ (Z[3],KEY=SP_NAME$,DOM=*NEXT)
2020 GET_RT1_RECORD:
2030 K3$=KEY(Z[3],END=DONE_WITH_RT1)
2040 IF K3$(1,LEN(SP_NAME$))<>SP_NAME$ THEN {
2050 GOTO DONE_WITH_RT1
2060  } ELSE {
2070 READ RECORD (Z[3],KEY=K3$,DOM=GET_RT1_RECORD)C$
2080 IF C$(10,1)="*" THEN {
2090 HOLD_DATA$=HOLD_DATA$+C$(84,LEN(C$)-84)
2100 GOTO GET_RT1_RECORD
2110  } ELSE {
2120 IF HOLD_DATA$<>"" THEN {
2130 C$=C$(1,83)+HOLD_DATA$+C$(84)
2140 HOLD_DATA$=""
2150  } } }
2160 GOSUB SHOW_FILE_NAME
2170 GOSUB PROCESS_RT1_RECORD
2180 GOSUB SHOW_PACKAGE_SIZE
2190 NEXT_RT1_RECORD:GOTO GET_RT1_RECORD
2200 DONE_WITH_RT1:GOSUB SHOW_FILE_NAME
2210 RETURN 
2220 SHOW_FILE_NAME:
2230 IF RT1_REC$="" THEN {
2240 GOTO 2360
2250  } ELSE {
2260 IF RT1_REC$=C$(21,8) THEN GOTO END_SHOW_FILE_NAME
2270  } }
2280 IF POS(C$(24,1)=" .1234567890")=0 THEN {
2290 J3$=C$(21,8); DIM D$(70)
2300 GOTO 2350
2310  } ELSE {
2320 J3$=C$(21,3)+"   "
2330  }
2340 DIM D$(70); FIND (Z[4],KEY=J3$,DOM=*NEXT)IOL=0340
2350 PRINT @(20,12),J3$," ",'CL',FNS$(MID(D$,7,39)),
2360 RT1_REC$=C$(21,8)
2370 END_SHOW_FILE_NAME:RETURN 
2380 SHOW_PACKAGE_SIZE:
2381 REM Display the current size of the package, see line 3130 for location"
2390 TEMP$=FN%XFD$(Z[5],0,ERR=END_SHOW_PACKAGE_SIZE)
2400 IF LEN(TEMP$)<41 THEN {
2410 GOTO END_SHOW_PACKAGE_SIZE
2420  } ELSE {
2430 PRINT @(33,16),DEC(TEMP$(38,4)):"##,###,###",
2440  }
2450 END_SHOW_PACKAGE_SIZE:RETURN 
3000 NEW_SP_PACKAGE:
3010 CUR_SP_XNAME$=SUB(A$(1,4)," ","X")
3050 EXTRACT (Z[1],KEY=K1$)IOL=0310
3060 S0$=A$(53,2); GOSUB 7600
3070 A$(57,6)=X3$(21,6),A$(63,4)=STR(INT(TIM*100):"0000")
3080 WRITE (Z[1],KEY=K1$)IOL=0310
3081 REM PACKAGE FILE NAME / REMOTE OR HOST
3090 IF W9$(7,1)="H" THEN {
3091 F0$="RT"+CUR_SP_XNAME$+S0$
3092  } ELSE {
3093 F0$="HT"+CUR_SP_XNAME$+S0$
3094  }
3095 REM CALL RT2OUT TO INITIALIZE PACKAGE ON 5
3096 REM & OPEN AS BINARY REC SIZE = file writing into it
3100 CALL "RT2OUT",X3$,X4$,0,0,F0$,"",B9$
3110 Z$="05O "+F0$+" "; GOSUB ZZFLES
3120 CLOSE (Z[5]); OPEN (Z[5],ISZ=1)F0$; REM "Reopen with correct size
3130 PRINT @(0,15),'CE',@(20,15),'SB',"R/T Package:",@(27,16),"Size:",'SF',; PRINT @(35,15),F0$,
3140 R$=X3$(21,6)+S1$+STR(INT(TIM*100):"0000")+S1$+"Remote T/M for "+FNS$(B$(5,35))+S1$+A$(1,4)
3150 CALL "RT2OUT",X3$,X4$,1,Z[5],R$,"000",B9$; C9=C9+1
3160 R$="Telemarketing information"+S1$
3170 IF W9$(7,1)="H" THEN {
3171 R$=R$+"FROM Host TO "+FNS$(B$(5,35))
3172  } ELSE {
3173 R$=R$+"FROM "+FNS$(B$(5,35))+" TO Host"
3174  }
3180 CALL "RT2OUT",X3$,X4$,1,Z[5],R$,"001",B9$; C9=C9+1
3190 RETURN 
3500 REM "If first record for this salesman, then open the pkg.
3501 PROCESS_RT1_RECORD:IF C9=0 THEN GOSUB NEW_SP_PACKAGE
3505 REM TEST? -IF C$(10,1)="C"GOSUB 03700;GOTO 03545ELSEIF C$(10,1)="D"GOSUB 03600ELSEGOSUB 03650;REM "handle delete & update differently
3510 ON POS(C$(10,1)="CUMDB") GOTO PROCESS_COMPLETE,CREATE_FILE,UPDATE_FILE,WRITE_MESSAGE,DELETE_RECORD,BINARY_COPY,PROCESS_COMPLETE
3512 CREATE_FILE:GOSUB 3700; GOTO WRITE_PACKAGE
3514 UPDATE_FILE:GOSUB 3650; GOTO MAKE_ENTRY
3516 WRITE_MESSAGE:GOSUB 3790; GOTO WRITE_PACKAGE
3518 DELETE_RECORD:GOSUB 3600; GOTO MAKE_ENTRY
3520 BINARY_COPY:GOSUB 3800; GOTO PROCESS_COMPLETE
3525 MAKE_ENTRY:
3530 A5$=FNS$(C$(21,8))+S1$+K5$+S1$+D5$
3545 WRITE_PACKAGE:
3550 C9=C9+1; CALL "RT2OUT",X3$,X4$,1,Z[5],A5$,C5$,B9$
3595 PROCESS_COMPLETE:RETURN 
3600 REM "Setup key K5$ and data D5$ for delete type entry
3605 K5$=FNS$(C$(29,55))
3610 P=POS($7E$=K5$); IF P<>0 THEN IF P=1 THEN K5$="" ELSE K5$=K5$(1,P-1); GOTO 3610
3620 D5$=""
3640 REM "Delete record
3641 C5$="003"
3645 RETURN 
3650 REM "Setup key K5$ and data D5$ for add or update type entry
3655 K5$=FNS$(C$(29,55))
3658 IF C$(21,3)="ZY3" THEN F5$="ZY3...",K5$=K5$(1,LEN(K5$)-1),F7$="ZY4...",F7=2; GOSUB LOAD_FILE_RECS; EXITTO 3595; REM "If Letters file process index records for file as well.
3660 P=POS($7E$=K5$); IF P<>0 THEN IF P=1 THEN K5$="" ELSE K5$=K5$(1,P-1); GOTO 3660
3670 D5$=FNO$(C$(84))
3675 REM "command for add to DIRect or sort
3676 C5$="002"
3680 REM If ZP5, change to add, but don't overwrite
3681 REM and setup sequence starting pos(17) and length (1)
3690 IF C$(21,3)="ZP5" THEN C5$="004",K5$=K5$+S1$+"17"+S1$+"1" ELSE IF C$(21,3)="ZPB" THEN C5$="004",K5$=K5$+S1$+"22"+S1$+"1"
3695 RETURN 
3700 REM "Build record for createfile, setup A5$ & C5$
3703 DIM F4$(6)
3706 F8$=FNS$(C$(21,8)); IF F8$(LEN(F8$)-2,3)="..." THEN F4$(1)=F8$(1,3)+"   ",F8$=F8$(1,3)+X3$(9,3) ELSE F4$(1)=F8$
3709 REM "Look in ZZE first, even if found, update info from real file
3712 DIM D$(70); READ (Z[4],KEY=F4$,DOM=*NEXT)IOL=0340
3715 CLOSE (14); OPEN (14,ERR=*NEXT)F8$; GOTO 3719
3718 CLOSE (14); OPEN (14,ERR=3754)F8$(1,3)
3719 FILE_INFO_14$=FN%XFD$(14,6)
3720 CALL "ZZINFO",14,STATUS,X3$,R0,R1,KY_SZ,BYTES,D,T0,S0,F$
3721 RECS_USED$=STR(R0)
3722 D$(48,2)=STR(KY_SZ:"00"),D$(50,4)=STR(BYTES:"0000"),D$(54,4)=STR(R1:"0000")
3724 SWITCH FILE_INFO_14$(1,1)
3727 CASE $00$
3730 D$(47,1)="I"
3733 BREAK
3736 CASE $02$
3739 IF FILE_INFO_14$(7,2)=$0000$ THEN D$(47,1)="S" ELSE D$(47,1)="D"
3742 BREAK
3745 DEFAULT 
3748 D$(47,1)="T"
3751 END SWITCH 
3754 REM "command to add file
3757 C5$="009"
3760 REM "Disk no is passed in key value field of RT1
3763 REM disk_no$="0"; disk_no$=STR(NUM(c$(29,1),ERR=*NEXT):"0")
3766 DISK_NO$=STP(C$(29,55),2); TILDEPOS=POS("~"=DISK_NO$); IF TILDEPOS>1 THEN DISK_NO$=DISK_NO$(1,TILDEPOS-1) REM NOW PATH
3769 IF POS(D$(47,1)="DS")<>0 AND A$(100,1)<>"Y" THEN D$(54,4)="0000"
3772 REM "If auto expand leave size if it is 0, if not auto expand then set to current number of records in the file plus 5 to give it some room to grow"
3775 IF D$(54,4)="0000" THEN IF A$(100,1)="Y" THEN D$(54,4)=STR(DEC(RECS_USED$(1,5))+5:"0000")
3776 IF D$(47,1)="T" THEN A5$=F8$+S1$+DISK_NO$+S1$+"00"+S1$+"0"+S1$+"0"+S1$ ELSE IF D$(47,1)="S" THEN A5$=F8$+S1$+DISK_NO$+S1$+D$(48,2)+S1$+"0"+S1$+D$(54,4)+S1$ ELSE A5$=F8$+S1$+DISK_NO$+S1$+D$(48,2)+S1$+D$(50,4)+S1$+D$(54,4)+S1$
3781 RETURN 
3790 REM "Add message to file
3791 C5$="001"
3792 A5$=FNS$(C$(29,55))+S1$
3793 RETURN 
3800 REM "Copy a file via binary copy to Z[5]
3805 F5$=FNS$(C$(21,8))
3807 READ_SIZE=247,BYTE_CNT=0
3810 Z[12]=UNT; OPEN (Z[12],ISZ=READ_SIZE,ERR=3895)F5$
3815 REM fid_12$=FID(z[12]); disk_no$=STR(DEC(fid_12$(20,1)))
3816 REM DISk_no$=FIN(z[12],"PATHNAME")
3817 REM hwdpos=POS(HWD=disk_no$)
3818 REM disk_no$=disk_no$(hwdpos+LEN(HWD)+1)
3825 BC_GET_REC:READ RECORD (Z[12],SIZ=READ_SIZE,END=FINISH_BC)BC_DATA_IN$
3830 BC_DATA_OUT$=HTA(BC_DATA_IN$)
3835 A5$=FNS$(C$(21,8))+S1$+STR(BYTE_CNT:"00000000")+S1$+BC_DATA_OUT$
3840 CALL "RT2OUT",X3$,X4$,1,Z[5],A5$,"010",B9$
3846 BYTE_CNT+=READ_SIZE
3847 GOTO BC_GET_REC
3850 FINISH_BC:
3890 CLOSE (Z[12])
3895 RETURN 
3900 REM "Write out end record for the current pkg
3905 A5$=STR(C9+1),C5$="ZZZ"; REM "Add 1 to C9 to cover the ZZZ record
3910 CALL "RT2OUT",X3$,X4$,1,Z[5],A5$,C5$,B9$
3930 CALL "RT2OUT",X3$,X4$,2,Z[5],"","",B9$; REM "Flush buffer to disk
3935 GOSUB SHOW_PACKAGE_SIZE; Z$="05CU"+F0$+" "; GOSUB ZZFLES
3945 RETURN 
4000 GET_AR_INFO:REM "Get A/R information based on T/M lists in Salesperson R/T parameters
4005 DIM E$(438),E[1]
4007 IF W9$(7,1)="H" THEN IF INITIAL_LOAD THEN F5$="ZY3...",K5$="",F7$="ZY4...",F7=2; GOSUB LOAD_FILE_RECS; REM "If initial transfer from host, send all the letters.
4010 FOR I0=80 TO 96 STEP 4
4015 IF POS(" "<>A$(I0,4))=0 THEN GOTO 4070; REM "If blank list code then skip it, else show info
4016 DIM RT6$(124); READ (Z[9],KEY=A$(I0,4)+A$(1,4),DOM=*NEXT)RT6$
4017 IF RT6$(23,1)="Y" THEN SP_ONLY$="Y" ELSE SP_ONLY$="N"
4020 READ (Z[6],KEY=A$(I0,4),DOM=*NEXT)
4025 READ (Z[6],END=4070)IOL=0350; IF E$(1,4)<>A$(I0,4) THEN GOTO 4070 ELSE IF SP_ONLY$="Y" AND E$(359,4)<>A$(1,4) THEN GOTO 4025
4027 IF W9$(7,1)="H" THEN IF DOING_RESEND OR INITIAL_TRANSFER$="Y" THEN F5$="ZP5...",K5$=E$(1,10); GOSUB LOAD_FILE_RECS; F5$="ZPB...",K5$=E$(1,10); GOSUB LOAD_FILE_RECS; REM "ZP5 - Contact Notes, Transfer on the initial call only,also send ZPB sort
4030 IF POS(" "<>E$(363,10))=0 THEN GOTO 4065 ELSE PRINT @(20,12),'CL',MID(E$,1,4)," - ",MID(E$,5,6); REM "If blank cust code then skip the record, else show info
4032 F5$="AR1...",K5$=E$(363,10); GOSUB LOAD_FILE_RECS; REM "AR1 - Customer Masterfile
4034 F5$="AR0...",K5$=E$(363,10); GOSUB LOAD_FILE_RECS; REM "AR0 - Customer Credit info
4036 F5$="AR6...",K5$=E$(363,10),F7$="AR7...",F7=3; GOSUB LOAD_FILE_RECS; F7$="",F7=0; REM "AR6 - Customer Open Invoices & AR7 - Open invoice transactions
4039 IF RT6$(24,1)<>"Y" THEN GOTO 4042; REM "Skip inv history based on parameters
4040 F5$="AR8...",K5$=E$(363,10),F7$="AR7...",F7=2; GOSUB LOAD_FILE_RECS; F7$="",F7=0; REM "AR8 - Customer Invoice History & AR7 Invoice transaction detail
4042 F5$="AR9...",K5$=E$(363,10),X9=1; GOSUB LOAD_FILE_RECS; X9=0; REM "AR9 - Customer Statistical Data
4043 IF T0$="Y" AND W9$(7,1)="H" AND INITIAL_LOAD THEN GOTO 4044 ELSE IF W9$(7,1)="H" THEN F5$="FM1...",K5$=E$(363,10); GOSUB LOAD_FILE_RECS; REM "IF transfer all FM1, then Don't transfer any here, if not transfer all then transfer this customer's item master records.
4044 IF RT6$(25,1)="Y" THEN F5$="FS6...",K5$=E$(363,10); GOSUB LOAD_FILE_RECS; F5$="FSY...",K5$=E$(363,10); GOSUB LOAD_FILE_RECS; REM "FS6 - Order history if parameter is set to yes, FSY - Order history by date
4046 F5$="AS5...",K5$=E$(363,10); GOSUB LOAD_FILE_RECS; REM "AS5 - Customer messages
4048 F5$="FM0...",K5$="C"+E$(363,10); GOSUB LOAD_FILE_RECS; REM "FM0 - Customer shipto locations
4052 F5$="FM3...",K5$=E$(363,10),X9=1; GOSUB LOAD_FILE_RECS; X9=0; REM "FM3 - Item stats by location
4054 F5$="FSW...",K5$=E$(363,10),X9=1; GOSUB LOAD_FILE_RECS; X9=0; REM "FSW - Item stats by item
4056 F5$="FM4...",K5$=E$(363,10); GOSUB LOAD_FILE_RECS; REM "FM4 - Item location detail
4058 L5$="IC0...IC1...IC2..."; GOSUB 4400; REM "Send I/C files for customer specific inventory
4065 IF DOING_RESEND THEN RETURN ELSE GOTO 4025
4070 NEXT I0
4095 RETURN 
4100 LOAD_FILE_RECS:REM "Load records from file F5$ that match 1st part of key K5$
4103 REM LET OPT$="D"; GOSUB 04150 -> NOT REMOVING RECORDS ANY MORE
4105 Z$="12O "+F5$+" "; GOSUB ZZFLES; ON Z0 GOTO 4106,4145
4107 EXTRACT (Z[12],KEY=K5$,DOM=*NEXT,ERR=4140); REM "Use extract because K5$ may be the full key we are looking for -> If error then skip the whole thing
4110 K9$=KEY(Z[12],END=4140)
4111 IF K9$(1,LEN(K5$))<>K5$ THEN {
4112 GOTO 4140
4113  } ELSE {
4114 READ RECORD (Z[12],KEY=K9$,DOM=4110,ERR=4110)D9$
4115  }
4120 GOSUB LOAD_K9KEY_RECS
4135 GOTO 4110
4140 Z$="12C "; GOSUB ZZFLES
4141 OPT$="A"; GOSUB REMOVE_K5_RECS
4142 GOSUB SHOW_PACKAGE_SIZE
4143 F7$="",H7$=""; REM "Clear index file flag
4145 END_LOAD_FILE_RECS:RETURN 
4150 REMOVE_K5_RECS:
4151 REM "Put out command to remove records from file F5$ that match the key K5$
4155 IF C9=0 THEN GOSUB NEW_SP_PACKAGE; REM "If first record for this salesman, then open the pkg
4160 IF POS(F5$(1,3)="AR1AR6AR8FS6FM1IC0IC1IC2")=0 THEN GOTO 4170
4161 REM "If file has sort files, remove them first
4162 X$="RT2"+F5$(1,3)
4163 A5$=X$+S1$+OPT$+S1$+K5$,C9=C9+1
4164 CALL "RT2OUT",X3$,X4$,1,Z[5],A5$,"006",B9$
4170 REM "Remove matching records from file
4171 IF OPT$<>"D" THEN GOTO 4195
4172 A5$=F5$+S1$+K5$,C9=C9+1
4174 CALL "RT2OUT",X3$,X4$,1,Z[5],A5$,"005",B9$
4195 END_REMOVE_K5_RECS:RETURN 
4200 LOAD_K9KEY_RECS:REM "Load record D9$ with key K9$ from file F5$ into package
4205 IF C9=0 THEN GOSUB NEW_SP_PACKAGE; REM "If first record for this salesman, then open the pkg
4210 IF X9=0 THEN D9$=FNO$(D9$); REM "Remove $00$s from data if not packed type data
4212 P=POS(S2$=D9$); IF P<>0 THEN D9$(P,1)=S1$; GOTO 4212
4215 C5$="002",A5$=F5$+S1$+K9$+S1$+D9$+S1$,C9=C9+1
4217 IF X9=1 THEN C5$="007",A5$=HTA("002"+S1$+A5$); REM "HANDLE PACKED DATA
4220 CALL "RT2OUT",X3$,X4$,1,Z[5],A5$,C5$,B9$
4230 REM IF POS(F5$(1,3)="AR1AR6FS6")=0 THEN GOTO 04240
4231 REM "Add sort file writes if needed
4232 REM LET A5$="RT2"+F5$(1,3)+S1$+"A"+S1$+K9$, C9=C9+1
4235 REM CALL "RT2OUT",X3$,X4$,1,Z[5],A5$,"006",B9$
4250 IF F7$<>"" THEN GOSUB 4300
4255 IF F5$(1,3)="FS6" THEN F7$=F5$; F7$(3,1)="9"; GOSUB 4350; F7$=""
4295 END_LOAD_K9KEY_RECS:RETURN 
4300 REM "Write out index records for a file F7$, header file F5$, pointer "+"in header file field F7
4305 IF H7$<>F7$ THEN Z$="07CU"+H7$+" 07O "+F7$,H7$=F7$; GOSUB ZZFLES; ON Z0 GOTO 4306,4345
4309 REM "Get field F7 from data D9$ (don't mess up D9$) as pointer to 1st "+"record in index file
4310 I7$=D9$,I8$=""
4312 FOR I7=1 TO F7
4313 P7=POS(S1$=I7$); IF P7>1 THEN I8$=I7$(1,P7-1); I7$=I7$(P7+1)
4314 NEXT I7
4315 I7=NUM(I8$,ERR=4345)
4320 IF I7<=0 THEN GOTO 4345 ELSE READ RECORD (Z[7],IND=I7,ERR=4345)I7$
4321 IF C9=0 THEN GOSUB NEW_SP_PACKAGE; REM "If first record for this salesman, then open the pkg
4322 IF X9=0 THEN I7$=FNO$(I7$); REM "Remove $00$s from data if not packed type
4324 P=POS(S2$=I7$); IF P<>0 THEN I7$(P,1)=S1$; GOTO 4324
4325 C5$="008",A5$=F5$+S1$+K9$+S1$+STR(F7)+S1$+F7$+S1$+I7$+S1$,C9=C9+1
4327 IF X9=1 THEN C5$="007",A5$=HTA(C5$+S1$+A5$); REM "handle packed data
4330 CALL "RT2OUT",X3$,X4$,1,Z[5],A5$,C5$,B9$
4334 REM "Get 1st field as pointer to next record
4335 P7=POS(S1$=I7$); IF P7<=1 THEN I8$="0"; GOTO 4315 ELSE I8$=I7$(1,P7-1); GOTO 4315
4345 RETURN 
4350 REM "Check FS9 for record corresponding to FS6 record
4355 IF H7$<>F7$ THEN Z$="07CU"+H7$+" 07O "+F7$,H7$=F7$; GOSUB ZZFLES; ON Z0 GOTO 4356,4395
4360 FIND RECORD (Z[7],KEY=D9$(22,8)+D9$(12,10)+D9$(30,1),DOM=4395)D7$
4362 IF C9=0 THEN GOSUB NEW_SP_PACKAGE; REM "If first record for this salesman, then open the pkg
4365 IF X9=0 THEN D7$=FNO$(D7$); REM "Remove $00$s from data if not packed type data
4367 P=POS(S2$=D7$); IF P<>0 THEN D7$(P,1)=S1$; GOTO 4367
4370 C5$="002",A5$=F7$+S1$+D7$(1,19)+S1$+D7$+S1$,C9=C9+1
4373 IF X9=1 THEN C5$="007",A5$=HTA("002"+S1$+A5$); REM "HANDLE PACKED DATA
4375 CALL "RT2OUT",X3$,X4$,1,Z[5],A5$,C5$,B9$
4395 RETURN 
4400 REM "Pull 6 char file names off of L5$ and send thru 4100's with K5$ s"+"et to E$(363,10)
4405 IF L5$="" THEN GOTO 4445
4410 FOR I5=1 TO LEN(L5$)-5 STEP 6
4415 F5$=L5$(I5,6); K5$=E$(363,10); GOSUB LOAD_FILE_RECS
4420 NEXT I5
4445 RETURN 
4500 CREATE_PERMISSION_REC:REM "Create encrypted permission record, create 2 strings, key is RT+sp code (blanks stay as blanks), data is date the system is good until.
4505 Z$="08O RT4... "; GOSUB ZZFLES
4510 AUTH_KEY$="RT"+A$(1,4); REM "Spaces ok
4515 SSN$=A$(38,10)
4516 IF LEN(SSN$)<10 THEN SSN$="0"+SSN$; GOTO 4516; REM "up to 10 spaces front 0 filled
4519 DAYS_GOOD=30; IF LEN(W9$)>72 THEN DAYS_GOOD=NUM(W9$(72,3),ERR=4520); REM "Default to 30 days
4520 DATE$=X3$(21,6); CALL "ZZDATE",X3$,"",DATE$,AUTH_DATE$,DAYS_GOOD,0,0,0,0,0,0,"","",""
4530 CALL "ZZCRYP",X3$,SSN$,"","E",AUTH_KEY$,A{ALL},ENCODED_KEY$,X9
4535 CALL "ZZCRYP",X3$,SSN$,"","E",AUTH_DATE$,A{ALL},ENCODED_DATE$,X9
4550 RT4$=HTA(ENCODED_KEY$)+HTA(ENCODED_DATE$)
4570 WRITE (Z[8],KEY=RT4$(1,12))RT4$
4580 F5$="RT4...",K5$=HTA(ENCODED_KEY$); GOSUB LOAD_FILE_RECS; REM "RT4 - Authorization file
4595 RETURN 
4700 REM "Process RT7 for list of changed records, use 4100 routine to do the hard work. Add index file info if needed.
4705 READ (Z[10],KEY=A$(1,4),DOM=4706)
4710 KEY_10$=KEY(Z[10],END=4780); IF KEY_10$(1,4)<>A$(1,4) THEN GOTO 4780
4715 F5$=STP(KEY_10$(9,6),1),K5$=KEY_10$(15)
4717 IF F5$="ZP4"+$7E7E7E$ THEN GOSUB 4800; GOTO 4750
4719 REM "Read in RT6 info to get parameters by list
4720 IF MID(KEY_10$,1,8)<>MID(RT6$,1,8) THEN DIM RT6$(100); RT6$(1,8)=MID(KEY_10$,5,4)+MID(KEY_10$,1,4); FIND (Z[9],KEY=RT6$(1,8),DOM=4721)RT6$
4725 IF RT6$(24,1)<>"Y" AND F5$(1,3)="AR8" THEN GOTO 4750; REM "Don't send invoice history if flag is not yes
4726 IF RT6$(25,1)<>"Y" AND F5$(1,3)="FS6" THEN GOTO 4750; REM "Don't send order history if flag is not yes
4735 IF F5$(1,3)="AR6" THEN F7$="AR7...",F7=3 ELSE IF F5$(1,3)="AR8" THEN F7$="AR7...",F7=2
4737 IF F5$(1,3)="ZY3" THEN F7$="ZY4...",F7=2
4738 IF POS(F5$(1,3)="AR9FM3FSW",3)<>0 THEN X9=1; REM "Statistic files have packed data
4740 GOSUB LOAD_FILE_RECS
4750 REMOVE (Z[10],KEY=KEY_10$,DOM=4751)
4760 F7$="",H7$="",F7=0,X9=0
4775 GOTO 4710
4795 RETURN 
4800 REM "Resend all records for a specfic contact
4805 DOING_RESEND=1
4810 DIM RT6$(124); READ (Z[9],KEY=KEY_10$(5,4)+KEY_10$(1,4),DOM=4811)RT6$
4812 IF RT6$(23,1)="Y" THEN SP_ONLY$="Y" ELSE SP_ONLY$="N"
4830 DIM E[1]; READ (Z[6],KEY=K5$,DOM=4845)IOL=0350
4835 GOSUB 4027; REM "Process the record here
4845 DOING_RESEND=0
4850 RETURN 
5000 REM "End of Print
5100 REM "Clear RT1 file
5105 CALL "ZZINIT",STR(Z[3]:"00")
5200 REM "
5205 PRINT @(0,10),'CL',@(0,12),'CL'
5207 GOSUB SHOW_PACKAGE_SIZE
5210 IF Q1$="" THEN CALL "ZZPROM","4",X3$,0,"Process Complete!","","",0
5290 GOTO 9900
7500 REM "CUSTOM PROGRAMMING ROUTINES
7525 REM "Modified stmts:
7550 REM "Added stmts:
7575 REM "Deleted stmts:
7600 REM "Increment package seq no A$(53,2)
7605 S4$=A$(53,2)
7607 IF S4$="  " OR S4$="00" THEN INITIAL_TRANSFER$="Y" ELSE INITIAL_TRANSFER$="N"
7610 IF S4$="  " THEN S4$="00"; GOTO 7625 ELSE IF S4$="ZZ" THEN S4$="00"; GOTO 7625
7615 IF S4$(2,1)="9" THEN S4$=S4$(1,1)+"A"; GOTO 7625 ELSE IF S4$(2,1)="Z" THEN S4$=CHR(ASC(S4$(1,1))+1)+"0" ELSE S4$=S4$(1,1)+CHR(ASC(S4$(2,1))+1)
7625 A$(53,2)=S4$
7645 RETURN 
8000 DO_MESSAGE:REM "Clear screen and display for next process
8010 PRINT @(0,3),'CE',@(40-INT(LEN(MESS$)/2),15),MESS$
8045 DO_MESSAGE_END:RETURN 
8910 DEF FNS$(Z9$)=Z9$(1,POS(SPACES$=Z9$+SPACES$)-1)
8915 DEF FNO$(Z9$)=Z9$(1,POS(NULLS$=Z9$+NULLS$)-1)
9000 REM "ERROR PROCESSING
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 1000
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9750 ZZFLES:REM "Simulate ZZFLES
9751 Z0=0
9752 DO_ZZFLES:IF LEN(Z$)<4 THEN GOTO END_ZZFLES ELSE COMMAND$=Z$(1,4),Z$=Z$(5); SPACE_POS=POS(" "=Z$); IF SPACE_POS=0 THEN FILE_NAME$=Z$,Z$="" ELSE FILE_NAME$=Z$(1,SPACE_POS-1); Z$=Z$(SPACE_POS+1); WHILE LEN(Z$)>0 AND Z$(1,1)=" "; Z$=Z$(2); WEND END_IF ; IF FN%NMV(COMMAND$(1,2))=0 THEN GOTO DO_ZZFLES ELSE FILE_SLOT=NUM(COMMAND$(1,2)) END_IF ; FILE_COMMAND$=COMMAND$(3,1); IF LEN(FILE_NAME$)>8 THEN FILE_NAME$=FILE_NAME$(1,8) END_IF ; IF FILE_COMMAND$="C" THEN FILE_SLOT_TO_CLOSE=Z[FILE_SLOT],Z[FILE_SLOT]=0; CLOSE (FILE_SLOT_TO_CLOSE,ERR=DO_ZZFLES) ELSE FIXED_3_DOTS=0; IF LEN(FILE_NAME$)>3 THEN IF STP(FILE_NAME$(LEN(FILE_NAME$)-2,3),3,".")="" THEN FILE_NAME$(LEN(FILE_NAME$)-2)=X3$(9,3),FIXED_3_DOTS=1 END_IF END_IF ; Z[FILE_SLOT]=0; OPEN_SLOT=UNT; OPEN (OPEN_SLOT,ERR=ERR_ON_OPEN)FILE_NAME$; Z[FILE_SLOT]=OPEN_SLOT END_IF ; GOTO DO_ZZFLES END_IF 
9753 REM Not found, so try opposite substitution of company no
9754 ERR_ON_OPEN:
9760 IF FIXED_3_DOTS=1 THEN {
9770 FILE_NAME$=FILE_NAME$(1,LEN(FILE_NAME$)-3); Z0=1
9771  } ELSE {
9772 FILE_NAME$=FILE_NAME$(1,3)+X3$(9,3); Z0=1
9773  }
9780 OPEN (OPEN_SLOT,ERR=DO_ZZFLES)FILE_NAME$; Z0=0
9781 Z[FILE_SLOT]=OPEN_SLOT; GOTO DO_ZZFLES
9790 END_ZZFLES:RETURN 
9900 REM "End program
9920 SETERR 9940
9930 Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
