0010 REM "Order number change utility <UT2ORD>
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 04/10/12 - 12.269166 - crg - SSP# 247504
0037 REM "247504-Order number division change utility                        
0040 REM "Copyright 2012 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000
0110 X0$="UT2ORD",X1$="Order Number Change Utility"
0120 DIM Z0$(80,"-")
0130 K0=20,K1=1
0135 C9=-1
0200 REM "                                                                 
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0295 DIM Z0$(80,X3$(235,1)); Z0$=ESC+"BG"+Z0$+ESC+"EG"
0300 REM "IOLISTS                                                          
0310 IOLIST A$
0320 IOLIST B$
0500 REM "FILES                                                            
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="13O ZZPARM  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0600 REM "                                                                 
0610 GOSUB 7000
0640 IF Q1$="" THEN CALL "ZZPROM",".Y",X3$,Z,"Proceed?","","",0; ON Z GOTO 0641,9900
0699 ! 
0700 REM "Setup work file and log file
0710 WORK_FILE$="UT2ORD."+FID(0); ERASE WORK_FILE$,ERR=*PROCEED; KEYED WORK_FILE$,8,0,-128
0720 LOG_FILE$="UT2ORD"+FID(0)+".log"; ERASE LOG_FILE$,ERR=*PROCEED
0730 OPEN (HFN)WORK_FILE$; WORK_CHANNEL=LFO
0740 LOG_OPTIONS$="A"; CALL "ZZ2LOG;OPEN_LOG",ERR=*NEXT,X3$,X4$,LOG_FILE$,LOG_OPTIONS$,LOG_CHANNEL
0799 ! 
0999 ! 
1000 REM "Phase 0 : Operates on opne order files and builds master list of orders)
1020 ! IOL: DBDNAME$,FILENAME$,CUST_DIV,ORDER_DIV_KEY,ORDER_DIV1,ORDER_DIV2,ORDER_DIV3
1040 ! CUST_DIV  - must be non-zero, offset is for reference division - note this value for the record going in
1060 ! ORDER_DIV_KEY - non-zero offset indicates the key might change, old records must be removed, maintain delete file channel
1080 ! ORDER_DIV1,ORDER_DIV2,ORDER_DIV3 - if non-zero these offsets are positions in data string where order/po div appears
1099 ! 
1100 REM "Begin Phase 0
1120 PHASE$="Phase 0 - Finds open orders"; MX=FNLOGIT(PHASE$)
1140 RESTORE PHASE0_FILES
1160 NEXT_FILE_P0:
1180 READ DATA SNO,DBDNAME$,FILENAME$,CUST_DIV,ORDER_DIV_KEY,ORDER_DIV1,ORDER_DIV2,ORDER_DIV3,ERR=DONE_PHASE0
1190 MX=FNLOGIT("FILE|"+FILENAME$+"|")
1200 READ_CHANNEL=0,WRITE_CHANNEL=0,DEL_CHANNEL=0,FILE_CTR=0
1220 OPEN (HFN,ERR=NEXT_FILE_P0)DBDNAME$+%C$; READ_CHANNEL=LFO
1240 OPEN (HFN)DBDNAME$+%C$; WRITE_CHANNEL=LFO
1260 IF ORDER_DIV_KEY THEN OPEN (HFN)DBDNAME$+%C$; DEL_CHANNEL=LFO
1280 READ (READ_CHANNEL,KEY="",DOM=*NEXT)
1300 GOSUB INIT_PROGRESS
1320 NEXT_REC_P0:
1340 KEY$=KEY(READ_CHANNEL,END=DONE_PHASE0_FILE); READ RECORD (READ_CHANNEL)REC$
1360 ! Get key and customer division for this record
1380 NEW_KEY$=KEY$,NEW_REC$=REC$,CUST_DIV$=REC$(CUST_DIV,2),CHANGE_FLG=0
1390 IF NUL(CUST_DIV$) THEN GOTO NEXT_REC_P0
1395 ! Change order div in key to match cust div if required
1400 IF ORDER_DIV_KEY AND KEY$(ORDER_DIV_KEY,2)<>CUST_DIV$ THEN NEW_KEY$(ORDER_DIV_KEY,2)=CUST_DIV$,CHANGE_FLG=1; MX=FNORDERP0(MID(KEY$,ORDER_DIV_KEY,8),MID(NEW_KEY$,ORDER_DIV_KEY,8))
1420 ! Change order div in record to match cust div if required
1440 IF ORDER_DIV1 AND NOT(NUL(MID(REC$,ORDER_DIV1,8))) AND REC$(ORDER_DIV1,2)<>CUST_DIV$ THEN NEW_REC$(ORDER_DIV1,2)=CUST_DIV$,CHANGE_FLG=1; MX=FNORDERP0(MID(REC$,ORDER_DIV1,8),MID(NEW_REC$,ORDER_DIV1,8))
1460 IF ORDER_DIV2 AND NOT(NUL(MID(REC$,ORDER_DIV2,8))) AND REC$(ORDER_DIV2,2)<>CUST_DIV$ THEN NEW_REC$(ORDER_DIV2,2)=CUST_DIV$,CHANGE_FLG=1; MX=FNORDERP0(MID(REC$,ORDER_DIV2,8),MID(NEW_REC$,ORDER_DIV2,8))
1480 IF ORDER_DIV3 AND NOT(NUL(MID(REC$,ORDER_DIV3,8))) AND REC$(ORDER_DIV3,2)<>CUST_DIV$ THEN NEW_REC$(ORDER_DIV3,2)=CUST_DIV$,CHANGE_FLG=1; MX=FNORDERP0(MID(REC$,ORDER_DIV3,8),MID(NEW_REC$,ORDER_DIV3,8))
1500 ! Now remove original record if key has changed
1510 IF CHANGE_FLG THEN {
1520 IF KEY$<>NEW_KEY$ THEN REMOVE (DEL_CHANNEL,KEY=KEY$)
1540 ! Write out new record (with new key if it has been changed) and update progress bar
1560 WRITE RECORD (WRITE_CHANNEL,KEY=NEW_KEY$)NEW_REC$
1570  }
1580 FILE_CTR++; IF MOD(FILE_CTR,T2)=1 THEN GOSUB UPDATE_PROGRESS
1600 GOTO NEXT_REC_P0
1620 DONE_PHASE0_FILE:
1640 CLOSE (READ_CHANNEL),(WRITE_CHANNEL); IF DEL_CHANNEL THEN CLOSE (DEL_CHANNEL)
1660 READ_CHANNEL=0,WRITE_CHANNEL=0,DEL_CHANNEL=0
1670 FILE_CTR=T; GOSUB UPDATE_PROGRESS
1680 GOTO NEXT_FILE_P0
1700 DONE_PHASE0:
1999 ! 
2000 REM "Phase 1 : Updates files that have both cust_div and order_div in record)
2020 ! IOL: DBDNAME$,FILENAME$,CUST_DIV,ORDER_DIV_KEY,ORDER_DIV1,ORDER_DIV2,ORDER_DIV3
2040 ! CUST_DIV  - must be non-zero, offset is for reference division - note this value for the record going in
2060 ! ORDER_DIV_KEY - non-zero offset indicates the key might change, old records must be removed, maintain delete file channel
2080 ! ORDER_DIV1,ORDER_DIV2,ORDER_DIV3 - if non-zero these offsets are positions in data string where order/po div appears
2099 ! 
2100 REM "Begin Phase 1
2120 PHASE$="Phase 1 of 2"; MX=FNLOGIT(PHASE$)
2140 RESTORE PHASE1_FILES
2160 NEXT_FILE_P1:
2180 READ DATA SNO,DBDNAME$,FILENAME$,CUST_DIV,ORDER_DIV_KEY,ORDER_DIV1,ORDER_DIV2,ORDER_DIV3,ERR=DONE_PHASE1
2190 MX=FNLOGIT("FILE|"+FILENAME$+"|")
2200 READ_CHANNEL=0,WRITE_CHANNEL=0,DEL_CHANNEL=0,FILE_CTR=0
2220 OPEN (HFN,ERR=NEXT_FILE_P1)DBDNAME$+%C$; READ_CHANNEL=LFO
2240 OPEN (HFN)DBDNAME$+%C$; WRITE_CHANNEL=LFO
2260 IF ORDER_DIV_KEY THEN OPEN (HFN)DBDNAME$+%C$; DEL_CHANNEL=LFO
2280 READ (READ_CHANNEL,KEY="",DOM=*NEXT)
2300 GOSUB INIT_PROGRESS
2320 NEXT_REC_P1:
2340 KEY$=KEY(READ_CHANNEL,END=DONE_PHASE1_FILE); READ RECORD (READ_CHANNEL)REC$
2360 ! Get key and customer division for this record
2380 NEW_KEY$=KEY$,NEW_REC$=REC$,CUST_DIV$=REC$(CUST_DIV,2),CHANGE_FLG=0
2390 IF NUL(CUST_DIV$) THEN GOTO NEXT_REC_P1
2395 ! Change order div in key to match cust div if required
2400 NEXT_REC_P1_K:IF ORDER_DIV_KEY AND KEY$(ORDER_DIV_KEY,2)<>CUST_DIV$ THEN {
2405 DIM TMP$(127); FIND (WORK_CHANNEL,KEY=KEY$(ORDER_DIV_KEY,8),DOM=NEXT_REC_P1_1)TMP$
2410 NEW_KEY$(ORDER_DIV_KEY,2)=MID(TMP$,9,2),CHANGE_FLG=1; MX=FNORDERP1(MID(KEY$,ORDER_DIV_KEY,8),MID(NEW_KEY$,ORDER_DIV_KEY,8))
2415  }
2420 ! Change order div in record to match cust div if required
2440 NEXT_REC_P1_1:IF ORDER_DIV1 AND NOT(NUL(MID(REC$,ORDER_DIV1,8))) AND REC$(ORDER_DIV1,2)<>CUST_DIV$ THEN {
2445 DIM TMP$(127); FIND (WORK_CHANNEL,KEY=REC$(ORDER_DIV1,8),DOM=NEXT_REC_P1_2)TMP$
2450 NEW_REC$(ORDER_DIV1,2)=MID(TMP$,9,2),CHANGE_FLG=1; MX=FNORDERP1(MID(REC$,ORDER_DIV1,8),MID(NEW_REC$,ORDER_DIV1,8))
2455  }
2460 NEXT_REC_P1_2:IF ORDER_DIV2 AND NOT(NUL(MID(REC$,ORDER_DIV2,8))) AND REC$(ORDER_DIV2,2)<>CUST_DIV$ THEN {
2465 DIM TMP$(127); FIND (WORK_CHANNEL,KEY=REC$(ORDER_DIV2,8),DOM=NEXT_REC_P1_3)TMP$
2470 NEW_REC$(ORDER_DIV2,2)=MID(TMP$,9,2),CHANGE_FLG=1; MX=FNORDERP1(MID(REC$,ORDER_DIV2,8),MID(NEW_REC$,ORDER_DIV2,8))
2475  }
2480 NEXT_REC_P1_3:IF ORDER_DIV3 AND NOT(NUL(MID(REC$,ORDER_DIV3,8))) AND REC$(ORDER_DIV3,2)<>CUST_DIV$ THEN {
2485 DIM TMP$(127); FIND (WORK_CHANNEL,KEY=REC$(ORDER_DIV3,8),DOM=NEXT_REC_P1_DONE)TMP$
2490 NEW_REC$(ORDER_DIV3,2)=MID(TMP$,9,2),CHANGE_FLG=1; MX=FNORDERP1(MID(REC$,ORDER_DIV3,8),MID(NEW_REC$,ORDER_DIV3,8))
2495  }
2499 NEXT_REC_P1_DONE:
2500 ! Now remove original record if key has changed
2510 IF CHANGE_FLG THEN {
2520 IF KEY$<>NEW_KEY$ THEN REMOVE (DEL_CHANNEL,KEY=KEY$)
2540 ! Write out new record (with new key if it has been changed) and update progress bar
2560 WRITE RECORD (WRITE_CHANNEL,KEY=NEW_KEY$)NEW_REC$
2570  }
2580 FILE_CTR++; IF MOD(FILE_CTR,T2)=1 THEN GOSUB UPDATE_PROGRESS
2600 GOTO NEXT_REC_P1
2620 DONE_PHASE1_FILE:
2640 CLOSE (READ_CHANNEL),(WRITE_CHANNEL); IF DEL_CHANNEL THEN CLOSE (DEL_CHANNEL)
2660 READ_CHANNEL=0,WRITE_CHANNEL=0,DEL_CHANNEL=0
2670 FILE_CTR=T; GOSUB UPDATE_PROGRESS
2680 GOTO NEXT_FILE_P1
2700 DONE_PHASE1:
2999 ! 
3000 REM "Phase 2 : Updates files that have both order_div available only, using Phase 1 order info
3020 ! IOL: DBDNAME$,FILENAME$,ORDER_DIV_KEY,ORDER_DIV1
3060 ! ORDER_DIV_KEY - non-zero offset indicates the key might change, old records must be removed, maintain delete file channel
3080 ! ORDER_DIV1 - if non-zero this offset is the position in data string where order/po div appears
3099 ! 
3100 REM "Begin Phase 2
3120 PHASE$="Phase 2 of 2"; MX=FNLOGIT(PHASE$)
3140 RESTORE PHASE2_FILES
3160 NEXT_FILE_P2:
3180 READ DATA SNO,DBDNAME$,FILENAME$,ORDER_DIV_KEY,ORDER_DIV1,ERR=DONE_PHASE2
3190 MX=FNLOGIT("FILE|"+FILENAME$+"|")
3200 READ_CHANNEL=0,WRITE_CHANNEL=0,DEL_CHANNEL=0,FILE_CTR=0
3220 OPEN (HFN,ERR=NEXT_FILE_P2)DBDNAME$+%C$; READ_CHANNEL=LFO
3240 OPEN (HFN)DBDNAME$+%C$; WRITE_CHANNEL=LFO
3260 IF ORDER_DIV_KEY THEN OPEN (HFN)DBDNAME$+%C$; DEL_CHANNEL=LFO
3280 READ (READ_CHANNEL,KEY="",DOM=*NEXT)
3300 GOSUB INIT_PROGRESS
3320 NEXT_REC_P2:
3340 KEY$=KEY(READ_CHANNEL,END=DONE_PHASE2_FILE); READ RECORD (READ_CHANNEL)REC$
3360 ! Get key and customer division for this record
3380 NEW_KEY$=KEY$,NEW_REC$=REC$,ORDER_DIV$=KEY$(ORDER_DIV_KEY,2),CHANGE_FLG=0
3385 IF NUL(ORDER_DIV$) THEN GOTO NEXT_REC_P2
3390 DIM TMP$(127); FIND (WORK_CHANNEL,KEY=KEY$(ORDER_DIV_KEY,8),DOM=NEXT_REC_P2)TMP$
3395 ! Change order div in key to match cust div if required
3400 IF ORDER_DIV_KEY AND KEY$(ORDER_DIV_KEY,2)<>MID(TMP$,9,2) THEN NEW_KEY$(ORDER_DIV_KEY,2)=MID(TMP$,9,2),NEW_REC$(ORDER_DIV1,2)=MID(TMP$,9,2),CHANGE_FLG=1; MX=FNORDERP2(MID(KEY$,ORDER_DIV_KEY,8),MID(NEW_KEY$,ORDER_DIV_KEY,8))
3500 ! Now remove original record if key has changed
3510 IF CHANGE_FLG THEN {
3520 IF KEY$<>NEW_KEY$ THEN REMOVE (DEL_CHANNEL,KEY=KEY$)
3540 ! Write out new record (with new key if it has been changed) and update progress bar
3560 WRITE RECORD (WRITE_CHANNEL,KEY=NEW_KEY$)NEW_REC$
3570  }
3580 FILE_CTR++; IF MOD(FILE_CTR,T2)=1 THEN GOSUB UPDATE_PROGRESS
3600 GOTO NEXT_REC_P2
3620 DONE_PHASE2_FILE:
3640 CLOSE (READ_CHANNEL),(WRITE_CHANNEL); IF DEL_CHANNEL THEN CLOSE (DEL_CHANNEL)
3660 READ_CHANNEL=0,WRITE_CHANNEL=0,DEL_CHANNEL=0
3670 FILE_CTR=T; GOSUB UPDATE_PROGRESS
3680 GOTO NEXT_FILE_P2
3700 DONE_PHASE2:
3999 ! 
5000 REM "End of utility
5020 IF Q1$="" THEN CALL "ZZPROM",".4",X3$,Z,"Process complete!!","","",0
5050 GOTO 9900
5099 ! 
5800 PHASE0_FILES:
5814 DATA 1,"FS1","FS1_OrderHdr",6,1,118,185,0
5837 DATA 2,"PO1","PO1_POHdr",179,1,297,306,0
5894 DATA 3,"DONE"
5895 DONE_P0_LIST:
5899 ! 
6000 PHASE1_FILES:
6001 DATA 1,"AR6","AR6_OpenInvoice",1,0,66,0,0
6002 DATA 2,"AR8","AR8_InvoiceHis",1,0,53,0,0
6003 DATA 3,"AS7","AS7_BundledPrice",1,21,21,0,0
6004 DATA 4,"AS9","AS9_CommBookLne",22,0,108,0,0
6005 DATA 5,"ASJ","ASJ_OrderShipHis",1,11,11,0,0
6006 DATA 6,"ATP","ATP_Invslsp",35,0,45,0,0
6007 DATA 7,"AZB","AZB_CopyInvEntHdr",18,0,95,0,0
6008 DATA 8,"ECK","ECK_OrderHdr",1,0,210,0,0
6009 DATA 9,"EDZ","EDZ_Coupon",26,0,58,0,0
6010 DATA 10,"FM1","FM1_Form",1,0,132,0,0
6011 DATA 11,"FMC","FMC_RptInfoForm",1,0,110,0,0
6012 DATA 12,"FMY","FMY_SummBill",1,0,49,0,0
6013 DATA 13,"FMZ","FMZ_FormDetActivity",1,0,113,0,0
6014 ! DATA 14,"FS1","FS1_OrderHdr",6,1,118,185,0
6016 DATA 16,"FS6","FS6_OrderHis",1,22,22,0,0
6017 ! DATA 17,"FSA","FSA_OrderBook",18,9,9,0,0
6018 ! DATA 18,"FSA","FSA_OrderBook",18,1,0,0,0
6019 DATA 19,"FSK","FSK_FinderFeeRpt",30,0,58,0,0
6020 DATA 20,"FSV","FSV_BillAddrOverride",9,1,1,0,0
6021 DATA 21,"FT3","FT3_RepeatOrderHdr",6,1,118,185,0
6022 ! DATA 22,"FT4","FT4_RepeatOrderLns",161,1,147,0,0
6023 DATA 23,"FT7","FT7_RepeatOrder",1,11,11,0,0
6024 DATA 24,"FT8","FT8_RepeatOrderPOHdr",179,1,297,306,0
6025 DATA 25,"FTE","FTE_InventoryCostHdr",16,1,1,0,0
6026 DATA 26,"FTG","FTG_InventoryCostHdrHis",16,1,1,0,0
6027 DATA 27,"FTT","FTT_ContractHistory",21,0,45,0,0
6028 DATA 28,"FTV","FTV_BlanketPOHis",21,0,45,0,0
6029 DATA 29,"FTX","FTX_PoAckHeader",941,1,1,0,0
6030 DATA 30,"FV2","FV2_DeletedOrderHdr",106,1,218,285,0
6031 DATA 31,"FV3","FV3_DeletedPOHdr",279,1,397,406,0
6032 DATA 32,"GLV","GLV_DetailInvt",125,0,93,101,0
6033 DATA 33,"ICF","ICF_Lots",1,0,110,41,0
6034 DATA 34,"ICN","ICN_OrderEntLotRet",1,0,110,41,0
6035 DATA 35,"ICO","ICO_InventoryLotTrans",7,0,110,0,0
6036 DATA 36,"KT1","KT1_KitProdPost",1,0,110,41,0
6037 ! DATA 37,"PO1","PO1_POHdr",179,1,297,306,0
6039 DATA 39,"POG","POG_BOFill",5,0,40,0,0
6040 DATA 40,"QS1","QS1_RFQForm",12,0,143,0,0
6041 DATA 41,"QSA","QSA_RFQHdr",10,0,455,0,0
6042 DATA 42,"RS2","RS2_RGChklist",1,0,15,0,0
6043 DATA 43,"RS3","RS3_RGException",1,0,54,0,0
6044 DATA 44,"RS3","RS3_RGException",1,0,45,0,0
6045 DATA 45,"SH8","SH8_ScaleShip",181,1,1,0,0
6046 DATA 46,"SH9","SH9_ScaleShipDet",184,1,1,0,0
6047 DATA 47,"SM4","SM4_CIGHis",328,1,1,0,0
6048 DATA 48,"SMD","SMD_CIGDet",22,22,96,0,0
6495 DONE_P1_LIST:
6499 ! 
6500 PHASE2_FILES:
6501 DATA 1,"FS2","FS2_OrderLns",1,147
6502 DATA 2,"PO2","PO2_POLns",1,82
6503 DATA 3,"AZ3","AZ3_CopyOrdInvInt",9,9
6504 DATA 4,"EC8","EC8_Order",1,1
6505 DATA 5,"EDD","EDD_CredCardInfo",1,1
6506 DATA 6,"EDW","EDW_RCfile",1,1
6507 DATA 7,"EED","EED_OrderPrimFunc",1,1
6508 DATA 8,"EEE","EEE_Ord3pInfo",1,1
6509 DATA 9,"EEG","EEG_OrdLine3pInfo",1,1
6510 DATA 10,"FMN","FMN_OrderNote",1,1
6511 DATA 11,"FS9","FS9_NonStkItemDesc",1,1
6512 DATA 12,"FSV","FSV_BillAddrOverride",1,1
6513 DATA 13,"FT5","FT5_RepeatOrderShip",1,166
6514 DATA 14,"FT6","FT6_RepeatOrderNote",1,1
6515 DATA 15,"FT9","FT9_RepeatOrderPOCmnt",1,1
6516 DATA 16,"FT4","FT4_RepeatOrderLns",1,147
6517 DATA 17,"FTF","FTF_InventoryCostTrans",1,1
6518 DATA 18,"FTH","FTH_InventoryCostTransHis",1,1
6519 DATA 19,"FTK","FTK_InvenCostOrderBatch",1,1
6520 DATA 20,"FTO","FTO_POReceivePOBatch",1,1
6521 DATA 21,"FTY","FTY_PoAckDetail",1,1
6522 DATA 22,"FV1","FV1_OrderCustRefs",1,1
6523 DATA 23,"PO3","PO3_POShip",1,166
6524 DATA 24,"POE","POE_POCmnt",1,1
6525 DATA 25,"SH3","SH3_ShipPendHdr",1,1
6526 DATA 26,"SH4","SH4_ShipPendDet",1,1
6527 DATA 27,"SM0","SM0_CIG",1,1
6528 DATA 28,"SM7","SM7_CIGPlus",1,1
6529 DATA 29,"SMI","SMI_CIGInboundFrt",1,1
6995 DONE_P2_LIST:
6999 ! 
7000 REM "BACKGROUND                                                       
7005 PRINT (0,ERR=7016)'SB',
7020 PRINT @(1,4),"This utility program will change all Order division and PO division fields to ",@(1,5),"match the Customer division."
7165 PRINT (0,ERR=7166)'SF',
7190 RETURN 
8100 INIT_PROGRESS:
8110 CALL "ZZINFO",READ_CHANNEL,T9,X3$,T,T2,K,B,D,S0,S1,F$
8130 T2=INT(T*.02); IF T2<1 THEN T2=2
8135 C=0,T1=0
8140 PRINT @(0,10),'CL',@(20,10),PHASE$," : File ",STR(SNO)," - ",FILENAME$,
8145 RETURN 
8149 ! 
8150 UPDATE_PROGRESS:
8155 CALL "ZZBARG",X3$,"HG",21,10,50,T1,T,FILE_CTR
8195 RETURN 
8199 ! 
8200 REM "Record changed orders from Phase 0 in work file for use in Phase 1 and 2
8205 DEF FNORDERP0(LOCAL OLDORD$, LOCAL NEWORD$)
8210 DIM TMP$(127)
8220 TMP$(1,8)=OLDORD$,TMP$(9,8)=NEWORD$
8230 WRITE (WORK_CHANNEL,KEY=TMP$(1,8))TMP$
8235 MX=FNLOGIT(DBDNAME$+"|KEY|"+KEY$+"|CUST|"+MID(REC$,CUST_DIV,10)+"|OLD|"+OLDORD$+"|NEW|"+NEWORD$+"|")
8240 RETURN 0
8245 END DEF
8249 ! 
8300 REM "Log changed orders from Phase 1
8305 DEF FNORDERP1(LOCAL OLDORD$, LOCAL NEWORD$)
8335 MX=FNLOGIT(DBDNAME$+"|KEY|"+KEY$+"|CUST|"+MID(REC$,CUST_DIV,10)+"|OLD|"+OLDORD$+"|NEW|"+NEWORD$+"|")
8340 RETURN 0
8345 END DEF
8349 ! 
8350 REM "Log changed orders from Phase 2"
8355 DEF FNORDERP2(LOCAL OLDORD$, LOCAL NEWORD$)
8365 MX=FNLOGIT(DBDNAME$+"|KEY|"+KEY$+"|OLD|"+OLDORD$+"|NEW|"+NEWORD$+"|")
8380 RETURN 0
8395 END DEF
8399 ! 
8400 REM "Log all actions to log file for later review
8405 DEF FNLOGIT(LOCAL MESG$)
8410 PRINT (LOG_CHANNEL)MESG$
8440 RETURN 0
8445 END DEF
8449 ! 
9000 REM "ERROR PROCESSING                                                 
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL                                
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC                                       
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9900 REM "END PROGRAM                                      
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9915 CALL "ZZ2LOG;CLOSE_LOG",ERR=*NEXT,X3$,X4$,LOG_CHANNEL
9920 CLOSE (WORK_CHANNEL)
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
56002 REM "247504-Order number division change utility                        
