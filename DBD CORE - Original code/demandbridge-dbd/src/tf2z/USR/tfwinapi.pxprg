0010 ! <tfwinapi> Windows Client API Interface
0020 ! program allows PVX remote interfacing with client pc
0030 ! install in "C:\Program Files\Sage Canada Ltd\Sage WindX Plug-in\windx\" directory
0035 REM "5.0 - 11/20/01 - 18.106944 - plh - SSP# 142887
0040 REM "Copyright 2001 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0100 ! ^100,2 " API Wrappers.
0102 ! 
0104 ! GETCOMPUTERNAME:         ENTER NAME$
0106 ! 
0108 ! GETVERSIONEX:            ENTER VX$
0110 ! 
0112 ! GETWORDVERSION:          ENTER VER$
0114 ! 
0116 ! GET_REGISTRY_VALUE:      ENTER KEY$,SUBKEY$,DATA_NAME$,VALUE$,ERR=*NEXT; GOTO 0050
0118 ! "                        ENTER KEY$,SUBKEY$,DATA_NAME$,VALUE$,REG_SZ,ERR=*NEXT; GOTO 0050
0120 ! "                        ENTER _KEY,DATA_NAME$,VALUE$,ERR=*NEXT; GOTO 0050
0122 ! "                        ENTER _KEY,DATA_NAME$,VALUE$,REG_SZ
0124 ! 
0126 ! ENUM_REGISTRY_KEY:       ENTER _KEY,VALUE_LIST$,DELIMITER$,ERR=*NEXT; GOTO 0094
0128 ! "                        ENTER KEY$,SUBKEY$,DATA_NAME$,VALUE_LIST$,DELIMITER$
0130 ! 
0132 ! QUERY_REGISTRY_KEY_INFO: ENTER _KEY,KEY$,SUBKEY$,CLS_NAME$,CLS_LEN,SUBKEY_CNT,MAX_SUBKEY_LEN,MAX_CLS_NAME_LEN,KEY_VALUES_CNT,MAX_DATANAME_LEN,MAX_VALUE_LEN,SEC_DESC_LEN,LASTMODIFIED$,X
0134 ! 
0136 ! OPEN_REGISTRY:           ENTER KEY$,SUBKEY$,DATA_NAME$,_KEY,RWX_MODE,X
0138 ! 
0140 ! FILETIME_TO_PVX_DATE:    ENTER FILETIMEPOINTER$,SYSDTME$,ERR=*NEXT; GOTO 0147
0142 ! "                        ENTER FILETIMEPOINTER$,SYSDTME$,MASK$
0144 ! 
0146 ! GET_SYS_TIME_AS_JULIAN:  ENTER SYSTEMTIME
0148 ! 
0150 ! GET_USER_NAME:           ENTER USER$
0152 ! 
0154 ! GET_USER_LANG:           ENTER LANG$
0156 ! 
0158 ! GET_SCREEN_CLIENT_AREA:  ENTER L,T,R,B ! Screen coordinates variables
0160 ! 
0162 ! GET_DEVICE_CAPS:         ENTER _HDC,NINDEX$
0164 ! 
0166 ! GET_DC:                  ENTER _HWND,_HDC
0168 ! 
0170 ! RELEASE_DC:              ENTER _HWND,_HDC
0172 ! 
0174 ! GETWORDTEMPLATESFOLDER:  ENTER TFPATH$
0176 ! 
0178 ! GETWINVERSION:           ENTER MOS$
0180 ! 
0182 ! GETFOLDERPATH:           ENTER CSIDL,PATH$,WINVER$
0184 ! 
0186 ! GETFILEVERSION:          ENTER FILENAME$,VERNO$,DT$,ERRNO
0188 ! 
0190 ! GETFILETIME:             ENTER FULLFILENAME$,DT$
0192 ! "                        ENTER FULLFILENAME$,DT
0194 ! 
0196 ! RUNPROGRAMANDWAIT        ENTER FULLFILENAME$
0198 ! 
0200 ! Constant lists are over 20000
0400 ! ^400,10
0410 EXIT 55
0420 GETCOMPUTERNAME:
0430 ENTER NAME$
0440 DIM BUFF$(256,$00$); BUFFLEN$=SWP(BIN(LEN(BUFF$),4))
0450 X=DLL("Kernel32","GetComputerNameA",BUFF$,BUFFLEN$)
0460 IF X THEN READ DATA FROM BUFF$,SEP=$00$ TO NAME$
0470 EXIT 
0480 ! 
0490 IOLIST SZCSDVERSION$:[LEN(128)],DWOSVERSIONINFOSIZE:[NUM(4)],DWMAJORVERSION:[NUM(4)],DWMINORVERSION:[NUM(4)],DWBUILDNUMBER:[NUM(4)],DWPLATFORMID:[NUM(4)],WSERVICEPACKMAJOR:[INT(2)],WSERVICEPACKMINOR:[INT(2)],WSUITEMASK:[INT(2)],WPRODUCTTYPE$:[LEN(1)],WRESERVED$:[LEN(1)]
0500 IOLIST DWOSVERSIONINFOSIZE$:[LEN(4)],DWMAJORVERSION$:[LEN(4)],DWMINORVERSION$:[LEN(4)],DWBUILDNUMBER$:[LEN(4)],DWPLATFORMID$:[LEN(4)],SZCSDVERSION$:[LEN(128)],WSERVICEPACKMAJOR$:[LEN(2)],WSERVICEPACKMINOR$:[LEN(2)],WSUITEMASK$:[LEN(2)],WPRODUCTTYPE$:[LEN(1)],WRESERVED$:[LEN(1)]
0510 ! type OSVERSIONINFOEX
0520 ! "   LONG dwOSVersionInfoSize
0530 ! "   LONG dwMajorVersion
0540 ! "   LONG dwMinorVersion
0550 ! "   LONG dwBuildNumber
0560 ! "   LONG dwPlatformId
0570 ! "   CHAR szCSDVersion[ 128 ]
0580 ! "   INT  wServicePackMajor
0590 ! "   INT  wServicePackMinor
0600 ! "   INT  wSuiteMask
0610 ! "   BYTE wProductType
0620 ! "   BYTE wReserved
0630 ! END TYPE
0640 GETVERSIONEX:
0650 ! ENTER VX$,IOL=VX$,ERR=*NEXT; ILST=1; GOTO 0250
0660 ! ILST=0
0670 ENTER VX$
0680 DIM BUFF$(156,$00$); BUFF$(1,4)=SWP(BIN(LEN(BUFF$),4))
0690 X=DLL("Kernel32","GetVersionExA",BUFF$)
0700 IF X=0 THEN {
0710 DIM BUFF$(148,$00$); BUFF$(1,4)=SWP(BIN(LEN(BUFF$),4))
0720 X=DLL("Kernel32","GetVersionExA",BUFF$)
0730 IF X=0 THEN VX$=""; EXIT 
0740  } ! endif dll error
0750 ! 
0760 BUFF$(1,4)=STR(DEC(SWP(BUFF$(1,4))))
0770 BUFF$(5,4)=STR(DEC(SWP(BUFF$(5,4))))
0780 BUFF$(9,4)=STR(DEC(SWP(BUFF$(9,4))))
0790 BUFF$(13,4)=STR(DEC(SWP(BUFF$(13,4))))
0800 BUFF$(17,4)=STR(DEC(SWP(BUFF$(17,4))))
0810 ! }
0820 P=POS($00$=BUFF$(21,128))
0830 IF P>1 THEN BUFF$(21+P)=DIM(128-P) ELSE BUFF$(21,128)=DIM(128)
0840 IF NUM(BUFF$(1,4))>=155 THEN {
0850 BUFF$(149,2)=STR(DEC(SWP(BUFF$(149,2))))
0860 BUFF$(151,2)=STR(DEC(SWP(BUFF$(151,2))))
0870 BUFF$(153,2)=STR(DEC(SWP(BUFF$(153,2))))
0880 BUFF$(155,1)=STR(DEC(SWP(BUFF$(155,1))))
0890 BUFF$(156,1)=STR(DEC(SWP(BUFF$(156,1))))
0900  }
0910 ! READ DATA FROM BUFF$,REC=VX$ TO IOL=0090
0920 VX$=BUFF$
0930 EXIT 
0940 ! 
0950 GETWORDVERSION:
0960 ENTER VER$
0970 CALL "tfwinapi;GET_REGISTRY_VALUE","0","Word.Application\CurVer","",VER$
0980 EXIT 
0990 ! 
1000 GET_REGISTRY_VALUE:
1010 ENTER KEY$,SUBKEY$,DATA_NAME$,VALUE$,ERR=*NEXT; GOTO 1045
1020 ENTER KEY$,SUBKEY$,DATA_NAME$,VALUE$,REG_SZ,ERR=*NEXT; GOTO 1045
1030 ENTER _KEY,DATA_NAME$,VALUE$,ERR=*NEXT; GOTO 1045
1040 ENTER _KEY,DATA_NAME$,VALUE$,REG_SZ
1050 GOSUB SET_FILE_CONSTANTS
1060 IF _KEY=0 THEN {
1070 CALL PGN+";OPEN_REGISTRY",KEY$,SUBKEY$,DATA_NAME$,_KEY,KEY_READ,X
1080 IF X<>ERROR_SUCCESS THEN EXIT 
1090  }
1100 ! 
1110 DIM BUFF$(255); DIM REG_SZ$(4)
1120 BUFFLEN$=SWP(BIN(LEN(BUFF$),4))
1130 X=DLL("Advapi32","RegQueryValueExA",_KEY,DATA_NAME$+$00$,0,REG_SZ$,BUFF$,BUFFLEN$)
1140 ! 
1150 IF X=ERROR_SUCCESS THEN {
1160 BUFFLEN=DEC(SWP(BUFFLEN$))
1170 VALUE$=BUFF$(1,BUFFLEN-1)
1180 REG_SZ=DEC(SWP(REG_SZ$))
1190  } ELSE {
1200 VALUE$=""
1210  }
1220 X=DLL("Advapi32","RegCloseKey",_KEY)
1230 EXIT 
1240 ! 
1250 ENUM_REGISTRY_KEY:
1260 ! 
1270 ENTER _KEY,VALUE_LIST$,DELIMITER$,ERR=*NEXT; GOTO 1295
1280 ENTER KEY$,SUBKEY$,DATA_NAME$,VALUE_LIST$,DELIMITER$
1290 GOSUB SET_FILE_CONSTANTS
1300 IF _KEY=0 THEN {
1310 CALL PGN+";OPEN_REGISTRY",KEY$,SUBKEY$,DATA_NAME$,_KEY,KEY_READ,X
1320 IF X<>ERROR_SUCCESS THEN EXIT 
1330  }
1340 ! 
1350 DIM CLS_NAME$(255,$00$)
1360 CALL PGN+";QUERY_REGISTRY_KEY_INFO",_KEY,"","",CLS_NAME$,CLS_LEN,SUBKEY_CNT,MAX_SUBKEY_LEN,MAX_CLS_NAME_LEN,KEY_VALUES_CNT,MAX_DATANAME_LEN,MAX_VALUE_LEN,SEC_DESC_LEN,LASTMODIFIED$,X
1370 ! 
1380 IF SUBKEY_CNT=0 THEN GOTO 1510
1390 FOR CNT=0 TO SUBKEY_CNT-1
1400 DIM KEYNAME$(MAX_SUBKEY_LEN+1,$00$),REG_SZ(4),MOD_DATE$(16),CLS_NAME$(CLS_LEN)
1410 CNT$=SWP(BIN(CNT,4))
1420 KEY_VALUE_LEN$=SWP(BIN(LEN(KEYNAME$)+1,4))
1430 CLSLEN$=SWP(BIN(CLS_LEN+1,4))
1440 X=DLL("Advapi32","RegEnumKeyExA",_KEY,CNT,KEYNAME$,KEY_VALUE_LEN$,0,CLS_NAME$,CLSLEN$,FILETIME$)
1450 CALL PGN+";FILETIME_TO_PVX_DATE",FILETIME$,MOD_DATE$
1460 KEY_VALUE_LEN=DEC(SWP(KEY_VALUE_LEN$))
1470 CLSLEN=DEC(SWP(CLS_LEN$))
1480 VALUE_LIST$+=MID(KEYNAME$,1,KEY_VALUE_LEN)+DELIMITER$+MID(CLS_NAME$,1,CLSLEN)+DELIMITER$+MOD_DATE$+$0D0A$
1490 NEXT CNT
1500 ! 
1510 X=DLL("Advapi32","RegCloseKey",_KEY)
1520 EXIT 
1530 ! 
1540 ENUM_REGISTRY_VALUES:
1550 ! 
1560 QUERY_REGISTRY_KEY_INFO:
1570 ENTER _KEY,KEY$,SUBKEY$,CLS_NAME$,CLS_LEN,SUBKEY_CNT,MAX_SUBKEY_LEN,MAX_CLS_NAME_LEN,KEY_VALUES_CNT,MAX_DATANAME_LEN,MAX_VALUE_LEN,SEC_DESC_LEN,LASTMODIFIED$,X
1580 IF _KEY=0 THEN {
1590 DATA_NAME$=""
1600 CALL PGN+";OPEN_REGISTRY",KEY$,SUBKEY$,DATA_NAME$,_KEY,KEY_READ,X
1610 IF X<>0 THEN EXIT 
1620  }
1630 ! 
1640 DIM CLS_LEN$(4),SUBKEY_CNT$(4),MAX_SUBKEY_LEN$(4),MAX_CLS_NAME_LEN$(4)
1650 DIM KEY_VALUES_CNT$(4),MAX_DATANAME_LEN$(4),MAX_VALUE_LEN$(4),MAX_VALUE_LEN$(4)
1660 ! 
1670 X=DLL("Advapi32","RegQueryInfoKeyA",_KEY,CLS_NAME$,CLS_LEN$,0,SUBKEY_CNT$,MAX_SUBKEY_LEN$,MAX_CLS_NAME_LEN$,KEY_VALUES_CNT$,MAX_DATANAME_LEN$,MAX_VALUE_LEN$,SEC_DESC_LEN$,LASTMODIFIED$)
1680 ! 
1690 CLS_LEN=DEC(SWP(CLS_LEN$))
1700 IF CLS_LEN<>0 THEN CLS_NAME$=MID(CLS_NAME$,1,CLS_LEN) ELSE CLS_NAME$=""
1710 SUBKEY_CNT=DEC(SWP(SUBKEY_CNT$))
1720 MAX_SUBKEY_LEN=DEC(SWP(MAX_SUBKEY_LEN$))
1730 MAX_CLS_NAME_LEN=DEC(SWP(MAX_CLS_NAME_LEN$))
1740 KEY_VALUES_CNT=DEC(SWP(KEY_VALUES_CNT$))
1750 MAX_DATANAME_LEN=DEC(SWP(MAX_DATANAME_LEN$))
1760 MAX_VALUE_LEN=DEC(SWP(MAX_VALUE_LEN$))
1770 SEC_DESC_LEN=DEC(SWP(SEC_DESC_LEN$))
1780 IF LASTMODIFIED$<>"" THEN CALL PGN+";FILETIME_TO_PVX_DATE",LASTMODIFIED$,YYMMDD_HHMMSS_DATE$
1790 EXIT 
1800 ! 
1810 OPEN_REGISTRY:
1820 X=1
1830 ENTER KEY$,SUBKEY$,DATA_NAME$,_KEY,RWX_MODE,X
1840 IF KEY$="" OR SUBKEY$="" THEN EXIT 
1850 _KEY=0
1860 _KEY=FN_H_KEY(KEY$)
1870 DIM _KEY$(4,"0")
1880 SUBKEY$=FN_KEY_FORMAT$(SUBKEY$)
1890 X=DLL("Advapi32","RegOpenKeyExA",_KEY,SUBKEY$+$00$,0,RWX_MODE,_KEY$)
1900 IF X=0 THEN _KEY=DEC(SWP(_KEY$)) ELSE _KEY=0
1910 EXIT 
1920 ! 
1930 FILETIME_TO_PVX_DATE:
1940 ENTER FILETIMEPOINTER$,SYSDTME$,ERR=*NEXT; GOTO 1960
1950 ENTER FILETIMEPOINTER$,SYSDTME$,MASK$
1960 IF FILETIMEPOINTER$="" THEN EXIT 
1970 DIM STME$(16)
1980 OLDPRE=PRC
1990 PRECISION 8
2000 IF MASK$="" THEN MASK$="%Y/%M/%D %h:%m:%s"
2010 X=DLL("kernel32","FileTimeToSystemTime",FILETIMEPOINTER$,STME$)
2020 Y=DEC(SWP(STME$(1,2)))
2030 M=DEC(SWP(STME$(3,2)))
2040 D=DEC(SWP(STME$(7,2)))
2050 H=DEC(SWP(STME$(9,2)))
2060 N=DEC(SWP(STME$(11,2)))
2070 S=DEC(SWP(STME$(13,2)))
2080 SYSDTE=JUL(Y,M,D,ERR=2110)
2090 SYSTME=H+(N/60)+(S/3600)
2100 SYSDTME$=DTE(SYSDTE,SYSTME:MASK$,ERR=2110)
2110 PRECISION OLDPRE
2120 EXIT 
2130 ! 
2140 GET_SYS_TIME_AS_JULIAN:
2150 ENTER SYSTEMTIME; GOTO 2260
2160 ! !Public Type SYSTEMTIME
2170 ! !wYear As Integer
2180 ! !wMonth As Integer
2190 ! !wDayOfWeek As Integer
2200 ! !wDay As Integer
2210 ! !wHour As Integer
2220 ! !wMinute As Integer
2230 ! !wSecond As Integer
2240 ! !wMilliseconds As Integer
2250 ! End Type
2260 DIM STME$(16)
2270 X=DLL("kernel32","GetSystemTime",STME$)
2280 Y=DEC($00$+SWP(STME$(1,2)))
2290 M=DEC($00$+SWP(STME$(3,2)))
2300 D=DEC($00$+SWP(STME$(7,2)))
2310 SYSTEMTIME=JUL(Y,M,D,ERR=*NEXT)
2320 EXIT 
2330 ! 
2340 GET_USER_NAME:
2350 ENTER USER$
2360 DIM BUFF$(128,$00$); BUFFLEN$=SWP(BIN(LEN(BUFF$),4))
2370 X=DLL("advapi32.dll","GetUserNameA",BUFF$,BUFFLEN$)
2380 IF X<>0 THEN {
2390 BUFFLEN=DEC(SWP(BUFFLEN$))
2400 USER$=BUFF$(1,BUFFLEN)
2410  }
2420 EXIT 
2430 ! 
2440 GET_USER_LANG:
2450 ENTER LANG$
2460 X=DLL("kernel32","GetUserDefaultLangID")
2470 LANG$=HTA(BIN(X,2))
2480 EXIT 
2490 ! 
2500 ! Get Screen area
2510 GET_SCREEN_CLIENT_AREA:ESCAPE ! unfinished/untested
2520 ENTER L,T,R,B ! Screen coordinates variables
2530 LOCAL RETVAL
2540 DIM GET_SWA$(16," ")
2550 SPI_GETWORKAREA$=$00$+$30$
2560 UPARAM$=SWP(SPI_GETWORKAREA$)
2570 RETVAL=DLL("User32.dll","SystemParametersInfoA",UPARAM$,0,GET_SWA$,0)
2580 IF RETVAL=0 THEN GOTO SPI_EXIT
2590 L=DEC(SWP(GET_SWA$(1,4)))
2600 T=DEC(SWP(GET_SWA$(5,4)))
2610 R=DEC(SWP(GET_SWA$(9,4)))
2620 B=DEC(SWP(GET_SWA$(13,4)))
2630 SPI_EXIT:
2640 END 
2650 ! 
2660 GET_DEVICE_CAPS:
2670 ENTER _HDC,NINDEX$
2680 LN=LEN(NINDEX$)
2690 NINDEX$=PAD(NINDEX$,4,0,$00$)
2700 NINDEX$=SWP(NINDEX$)
2710 X=DLL("gdi32","GetDeviceCaps",HDC$,NINDEX$)
2720 NINDEX$=SWP(NINDEX$)
2730 EXIT 
2740 ! 
2750 GET_DC:
2760 ENTER _HWND,_HDC
2770 X=DLL("user32","GetDC",_HWND)
2780 _HDC=X
2790 EXIT 
2800 ! 
2810 RELEASE_DC:
2820 ENTER _HWND,_HDC
2830 X=DLL("user32","ReleaseDC",_HWND,_HDC)
2840 EXIT 
2850 ! 
2860 GETWORDTEMPLATESFOLDER:
2870 ENTER TFPATH$
2880 TFPATH$=""
2890 LOCAL USRNAME$
2900 ! 
2910 ! get appliction saved setting.
2920 CALL PGN+";GET_REGISTRY_VALUE","HKEY_CURRENT_USER","Software\TopForm\WordLink\NETWORKPATH","AltTemplateDir",TFPATH$
2930 IF TFPATH$<>"" THEN EXIT 
2940 ! 
2950 CALL PGN+";GETWORDVERSION",WRDVER$
2960 CALL PGN+";GETWINVERSION",WINVER$
2970 GOSUB SET_CSIDL_CONSTANTS
2980 CALL PGN+";getfolderpath",CSIDL_PROGRAM_FILES,PRGPATH$,WINVER$
2990 CALL PGN+";getfolderpath",CSIDL_WINDOWS,WPATH$,WINVER$
3000 CALL PGN+";getfolderpath",CSIDL_PROFILE,PPATH$,WINVER$
3010 VER_POS=POS("123456789":WRDVER$,-1)
3020 VER$=STP(MID(WRDVER$,VER_POS),2)
3030 ! 
3040 IF VER$>"8" THEN GOTO WRD2000
3050 ! 
3060 SWITCH WINVER$
3070 CASE "Windows 95","Windows 98","Windows Me"
3080 IF FNPROFILESENABLED_95X=0 THEN {
3090 IF PRGPATH$<>"" THEN TFPATH$=PRGPATH$+"\Microsoft Office\Templates"; EXIT 
3100  } ELSE {
3110 ! not sure what goes here
3120 IF PRGPATH$<>"" THEN TFPATH$=PRGPATH$+"\Microsoft Office\Templates"; EXIT 
3130  } ! } ! Endif fnProfileEnabled_95x
3140 BREAK
3150 CASE "Windows NT 3.51"
3160 CASE "Windows NT 4.0"
3170 CASE "Windows 2000"
3180 CASE "Whistler"
3190 ! not sure what goes here SO GUESS
3200 IF PPATH$<>"" THEN TFPATH$=PPATH$+"\Application Data\Microsoft\Templates"
3210 BREAK
3220 END SWITCH 
3230 GOTO 3485
3240 ! 
3250 WRD2000:
3260 ! 
3270 SWITCH WINVER$
3280 CASE "Windows 95","Windows 98","Windows Me"
3290 ! CALL PGN+";QUERY_REGISTRY_KEY_INFO",0,"HKEY_LOCAL_MACHINE","SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList",CLS_NAME$,CLS_LEN,SUBKEY_CNT,MAX_SUBKEY_LEN,MAX_CLS_NAME_LEN,KEY_VALUES_CNT,MAX_DATANAME_LEN,MAX_VALUE_LEN,SEC_DESC_LEN,LASTMODIFIED$,X
3300 ! MSGBOX "post query"
3310 ! IF SUBKEY_CNT=0 THEN {
3320 IF FNPROFILESENABLED_95X=0 THEN {
3330 ! !9 with <= 98 with no profiles C:\Windows\Application Data\Microsoft\Templates
3340 IF WPATH$<>"" THEN TFPATH$=WPATH$+"\Application Data\Microsoft\Templates"
3350  } ELSE {
3360 ! !9 with <= 98 with profiles C:\Windows\Profiles\Username\Application Data\Microsoft\templates
3370 IF PPATH$<>"" THEN TFPATH$=PPATH$+"\Application Data\Microsoft\Templates"
3380  } ! END FNPROFILESENABLED_95X
3390 BREAK
3400 CASE "Windows NT 3.51"
3410 CASE "Windows NT 4.0"
3420 ! !9 with  NT same as 95x with profiles"
3430 CASE "Windows 2000"
3440 ! !9 with 2000   C:\Documents and Settings\Username\Application Data\Microsoft\Templates
3450 IF PPATH$<>"" THEN TFPATH$=PPATH$+"\Application Data\Microsoft\Templates"
3460 BREAK
3470 CASE "Whistler"
3480 END SWITCH 
3490 ! 
3500 EXIT 
3510 ! 
3520 ! VS_FIXEDFILEINFO     ! 52 bytes
3530 ! " dwSignature As Long
3540 ! " dwStrucVersion As Long         '  e.g. 0x00000042 = "0.42"
3550 ! " dwFileVersionMS As Long        '  e.g. 0x00030075 = "3.75"
3560 ! " dwFileVersionLS As Long        '  e.g. 0x00000031 = "0.31"
3570 ! " dwProductVersionMS As Long     '  e.g. 0x00030010 = "3.10"
3580 ! " dwProductVersionLS As Long     '  e.g. 0x00000031 = "0.31"
3590 ! " dwFileFlagsMask As Long        '  = 0x3F for version "0.42"
3600 ! " dwFileFlags As Long            '  e.g. VFF_DEBUG Or VFF_PRERELEASE
3610 ! " dwFileOS As Long               '  e.g. VOS_DOS_WINDOWS16
3620 ! " dwFileType As Long             '  e.g. VFT_DRIVER
3630 ! " dwFileSubtype As Long          '  e.g. VFT2_DRV_KEYBOARD
3640 ! " dwFileDateMS As Long           '  e.g. 0
3650 ! " dwFileDateLS As Long           '  e.g. 0
3660 ! End Type
3670 ! dll( "version.dll","GetFileVersionInfoSizeA",lptstrFilename$, lpdwHandle As Long) As Long
3680 ! dll( "version.dll","GetFileVersionInfoA",lptstrFilename$, dwHandle As Long, dwLen As Long, lpData As Any) As Long
3690 ! dll( "version.dll","VerQueryValue",pBlock As Any, lpSubBlock$, lplpBuffer As Long, puLen As Long) As Long
3700 ! 
3710 ! dll( "version.dll","VerFindFileA", uFlags As Long, szFileName$, szWinDir$, szAppDir$, szCurDir$, lpuCurDirLen As Long, szDestDir$, lpuDestDirLen As Long) As Long
3720 ! dll( "version.dll","VerInstallFileA", uFlags As Long, szSrcFileName$, szDestFileName$, szSrcDir$, szDestDir$, szCurDir$, szTmpFile$, lpuTmpFileLen As Long) As Long
3730 ! 
3740 GETFILEVERSION:
3750 ENTER FILENAME$,VERNO$,ERRNO
3760 ! 
3770 LOCAL BUFF_SZ,LPSTRFILENAME$
3780 DIM LPDWHANDLE$(4,$00000000$)
3790 ! 
3800 LPSTRFILENAME$=FILENAME$+$00$
3810 VERNO$=""
3820 ! 
3830 ! load library in memory as memory structures are passed between api calls
3840 _V=DLL(ADDR "version.dll",ERR=LIBLOADERR); IF _V=0 THEN GOTO GETFILEVERSION_END
3850 BUFF_SZ=DLL(_V,"GetFileVersionInfoSizeA",LPSTRFILENAME$,LPDWHANDLE$,ERR=GETVERERR)
3860 ! 
3870 ERRNO=DLL("kernel32","GetLastError")
3880 DIM BUFF$(BUFF_SZ)
3890 ! 
3900 IF BUFF_SZ=0 THEN GOTO DROPLIB
3910 ! 
3920 RETVAL=DLL(_V,"GetFileVersionInfoA",LPSTRFILENAME$,LPDWHANDLE,BUFF_SZ,BUFF$)
3930 ! 
3940 IF RETVAL=0 THEN MSGBOX "File info not found"; GOTO DROPLIB
3950 ! 
3960 LPSUBBLOCK$="\"+$00$
3970 ! LPSUBBLOCK$="\StringFileInfo\"+$04090437$+"\FileVersion"+$00$
3980 DIM LPBUFFER$(52,$00$)
3990 PULEN$=$0000$
4000 ! 
4010 ! obtain memory pointer to version information
4020 RETVAL=DLL(_V,"VerQueryValueA",BUFF$,LPSUBBLOCK$,LPBUFFER$,PULEN$)
4030 ! 
4040 ! copy memory values at pointer to  variable
4050 BLEN=DEC(SWP(PULEN$))
4060 BMEM=DEC(SWP(LPBUFFER$(1,4)))
4070 FLEINFO$=MEM(BMEM,BLEN)
4080 ! 
4090 ! convert binary numbers to string in file version format
4100 VERNO$=STR(DEC(SWP(FLEINFO$(11,2))))+"."+STR(DEC(SWP(FLEINFO$(9,2))))+"."+STR(DEC(SWP(FLEINFO$(15,2))))+"."+STR(DEC(SWP(FLEINFO$(13,2))))
4110 ! 
4120 DROPLIB:
4130 RETVAL=DLL(DROP _V)
4140 GETFILEVERSION_END:
4150 EXIT 
4160 LIBLOADERR:
4170 IF ERR=12 OR ERR=0 THEN WAIT (1) AND ERRCNT<4; ERRCNT+=1; GOTO 3840
4180 EXIT 
4190 GETVERERR:
4200 GOTO DROPLIB
4210 EXIT 
4220 ! 
4230 CREATEOSPROGRAMGROUP:
4240 ENTER FOLDERNAME,RETONERR,PRIVATE,STARTMENU
4250 IF FNTREATASWIN95 THEN {
4260 ! CreateOSPrgGrp = CreateShellGroup(FolderName, RetOnErr, Private, StartMenu)
4270  } ELSE {
4280 ! CreateProgManGroup frm, FolderName, fRetOnErr, fLog
4290 FCREATEOSPROGRAMGROUP=TRUE
4300  } ! EndIf TREATASWIN95
4310 EXIT 
4320 ! 
4330 ! -----------------------------------------------------------
4340 ! SUB: CreateShellGroup
4350 ! 
4360 ! Creates a new program group off of Start>Programs in the
4370 ! Windows 95 shell if the specified folder doesn't already exist.
4380 ! 
4390 ! IN: [FolderName] - text name of the folder.
4400 ! This parameter may not contain backslashes.
4410 ! ex: "My Application" - this creates
4420 ! the folder Start>Programs>My Application
4430 ! [fRetOnerr] - Whether or not this routine should return if
4440 ! there is an error creating the group.  If false,
4450 ! setup aborts and does not return.  Set this to
4460 ! true if the user can do something to correct the
4470 ! error.  E.g., they entered a group name in the
4480 ! Choose Program Group dialog as opposed to calling
4490 ! this routine when creating the Remote Automation
4500 ! group in which the user had no control.
4510 ! [fLog] - Whether or not to write to the logfile (default
4520 ! is true if missing)
4530 ! -----------------------------------------------------------
4540 ! 
4550 CREATESHELLGROUP:
4560 ENTER FOLDERNAME$,FRETONERR,PRIVATE,STARTMENU
4570 ! ReplaceDoubleQuotes FolderName$
4580 IF FOLDERNAME$="" THEN EXIT 
4590 LOCAL RETOK,IDL,LPROGRAMS
4600 LOCAL SPATH$
4610 PRINT DIM
4620 IF FNISWINDOWS95 THEN {
4630 ! 
4640 IF STARTMENU THEN {
4650 LPROGRAMS=SFIDSTARTMENU
4660  } ELSE {
4670 LPROGRAMS=SFIDPROGRAMS
4680  } ! EndIf startmenu
4690 ! 
4700  } ELSE {
4710 IF FPRIV THEN {
4720 ! 
4730 IF FSTARTMENU THEN {
4740 ! 
4750 LPROGRAMS=SFIDSTARTMENU
4760  } ELSE {
4770 LPROGRAMS=SFIDPROGRAMS
4780  } ! EndIf FSTARTMENU
4790  } ELSE {
4800 IF FSTARTMENU THEN {
4810 LPROGRAMS=SFIDCOMMON_STARTMENU
4820  } ELSE {
4830 LPROGRAMS=SFIDCOMMON_PROGRAMS
4840  } ! Endif FSTARTMENU
4850  } ! Endif FPRIV
4860  } ! Endif FNISWINDOWS95
4870 ! 
4880 ! Fill the item id list with the pointer of each folder item, rtns 0 on RetOk
4890 ! Lib  (ByVal hwndOwner As Long, ByVal nFolder As SpecialFolderIDs, ByRef pIdl As Long) As Long
4900 IF DLL("shell32","SHGetSpecialFolderLocation",FRMSETUP1.HWND,LPROGRAMS,IDL)=NOERROR THEN {
4910 DIM SPATH(255,0)
4920 RETVAL=DLL("shell32","SHGetPathFromIDListA",IDL,SPATH)
4930 ! 
4940 RETVAL=DLL("shell32","SHGetMalloc",PMALLOC)
4950 ! SHGetMalloc oMalloc
4960 ! oMalloc.Free IDL
4970 SPATH=STRINGFROMBUFFER(SPATH)
4980  } ! Endif
4990 SPATH$=SPATH$+DLM+FOLDERNAME$
5000 DIRECTORY SPATH$,ERR=5030
5010  } ! Endif
5020  } ! Endif
5030 EXIT 
5040 ! 
5050 RUNPROGRAMANDWAIT:
5060 ENTER FILEFULLNAME$
5070 INVOKE WAIT FILEFULLNAME$
5080 EXIT 
5090 ! The FILETIME structure is a 64-bit
5100 ! value representing the number of 100-nanosecond intervals
5110 ! since January 1, 1601 (UTC).
5120 ! 
5130 ! Public Type FILETIME
5140 ! "  dwLowDateTime As Long
5150 ! "  dwHighDateTime As Long
5160 ! End Type
5170 ! Public Type SYSTEMTIME
5180 ! "  wYear As Integer
5190 ! "  wMonth As Integer
5200 ! "  wDayOfWeek As Integer
5210 ! "  wDay As Integer
5220 ! "  wHour As Integer
5230 ! "  wMinute As Integer
5240 ! "  wSecond As Integer
5250 ! "  wMilliseconds As Integer
5260 ! End Type
5270 ! SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" (lpTimeZoneInformation As TIME_ZONE_INFORMATION, lpUniversalTime As SYSTEMTIME, lpLocalTime As SYSTEMTIME) As Long
5280 ! 
5290 ! GetSystemTimeAsFileTime lib "KERNEL32" (LPFILETIME lpSystemTimeAsFileTime )
5300 ! FileTimeToLocalFileTime Lib "kernel32" Alias "FileTimeToLocalFileTime" (lpFileTime As FILETIME, lpLocalFileTime As FILETIME) As Long
5310 ! SetFileTime Lib "kernel32" Alias "SetFileTime" (ByVal hFile As Long, lpCreationTime As FILETIME, lpLastAccessTime As FILETIME, lpLastWriteTime As FILETIME) As Long
5320 ! 
5330 ! 
5340 ! 
5350 ! 
5360 SETFILETIME:ESCAPE 
5370 ENTER FULLNAME$,FCREATE$,FACCESS$,FMODIFY$,ERR=*NEXT
5380 LOCAL RETCDE,MSTME$,_HANDLE,X
5381 DIM NDATE$[3](8,$00$)
5382 DIM PDATE$[3]
5383 PDATE$[0]=FCREATE$,PDATE$[1]=FACCESS$,PDATE$[2]=FMODIFY$
5390 GOSUB SET_FILE_CONSTANTS
5400 GOSUB FILE_DISPOSITION_CONSTANTS
5410 GOSUB FILE_SHARE_CONSTANTS
5420 GOSUB FILE_ATTRIBUTES
5430 _HANDLE=DLL("kernel32.dll","CreatefileA",FULLNAME$+$00$,READ_CONTROL,FILE_SHARE_READ+FILE_SHARE_WRITE,0,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,0)
5440 IF _HANDLE<=0 THEN MSGBOX "Unable to open file for editing"; EXIT 
5441 ! SystemTimeToFileTime Lib "kernel32" Alias "SystemTimeToFileTime" (lpSystemTime As SYSTEMTIME, lpFileTime As FILETIME) As Long
5450 FOR X=0 TO 2
5451 IF PDATE$[X]="" THEN GOTO *CONTINUE
5460 STME$=FN_PVX2MS_SYSTEMDATE$(PDATE$[X])
5470 RETCDE=DLL("kernel32.dll","SystemTimeToFileTime",STME$,NDATE$[X])
5480 RETCDE=DLL("kernel32","LocalFileTimeToFileTime",LPLOCALFILETIME$,LPFILETIME$)
5490 IF RETCDED=0 THEN MSGBOX "Windows format date conversion failed"; EXIT 
5500 NEXT X
5510 ! 
5520 RETCDE=DLL("kernel32.dll","SetFileTime",_HANDLE,NDATE$[0],NDATE$[1],NDATE$[2])
5530 IF RETCDE=0 THEN MSGBOX "SetFileTime failure" ! 
5540 RETCDE=DLL("kernel32.dll","CloseHandle",_HANDLE) ! 
5550 IF RETCDE=0 THEN MSGBOX "Unable to close file"+FULLNAME$; STOP ! 
5560 EXIT 
5570 ! 
5575 GETVOLUMEINFO:ESCAPE 
5580 ! "kernel32", "GetVolumeInformationA" ,lpRootPathName$, lpVolumeNameBuffer$, nVolumeNameSize As Long, lpVolumeSerialNumber As Long, lpMaximumComponentLength As Long, lpFileSystemFlags As Long, lpFileSystemNameBuffer$, nFileSystemNameSize As Long) As Long
5590 ! 
5591 EXIT 
5592 ! 
5593 GETDRIVELIST:
5594 ENTER DRIVELIST$
5595 LOCAL NBUFFERLENGTH$,LPBUFFER$,RETCDE
5596 DIM NBUFFERLENGHT$(4,$00$)
5603 RETCDE=DLL("kernel32","GetLogicalDriveStringsA",NBUFFERLENGTH$,LPBUFFER$)
5610 DRIVELIST$=MID(LPBUFFER$,1,RETCDE)
5620 DRIVELIST$=SUB(DRIVELIST$,$00$,SEP)
5640 EXIT 
5650 ! 
8000 ! ^8000
8010 ! This member can be one of the following values.
8020 ! VER_PLATFORM_WIN32s Win32s on Windows 3.1.
8030 ! VER_PLATFORM_WIN32_WINDOWS Windows 95, Windows 98, or Windows Me.
8040 ! VER_PLATFORM_WIN32_NT Windows NT 3.51, Windows NT 4.0, Windows 2000, or Whistler.
8050 ! 
8060 ! dwMinorVersion
8070 ! Identifies the minor version number of the operating system as follows. Operating System Value
8080 ! Windows 95       0
8090 ! Windows 98       10
8100 ! Windows Me       90
8110 ! Windows NT 3.51  51
8120 ! Windows NT 4.0   0
8130 ! Windows 2000     0
8140 ! Whistler         1
8150 ! 
8160 ! dwMajorVersion
8170 ! Identifies the major version number of the operating system as follows. Operating System Value
8180 ! Windows 95       4
8190 ! Windows 98       4
8200 ! Windows Me       4
8210 ! Windows NT 3.51  3
8220 ! Windows NT 4.0   4
8230 ! Windows 2000     5
8240 ! Whistler         5
8250 VER_PLATFORM_WIN32S=0
8260 VER_PLATFORM_WIN32_WINDOWS=1
8270 VER_PLATFORM_WIN32_NT=2
8280 ! Need to find out what OS is in use, the keys are different
8290 ! for WinNT and Win95.
8300 ! IOLIST DWOSVERSIONINFOSIZE:[NUM(4)],DWMAJORVERSION:[NUM(4)],DWMINORVERSION:[NUM(4)],DWBUILDNUMBER:[NUM(4)],DWPLATFORMID:[NUM(4)],SZCSDVERSION$:[LEN(128)],WSERVICEPACKMAJOR:[NUM(2)],WSERVICEPACKMINOR:[INT(2)],WSUITEMASK:[INT(2)],WPRODUCTTYPE:[BIN(1)],WRESERVED:[BIN(1)]
8310 IOLIST DWOSVERSIONINFOSIZE$:[LEN(4)],DWMAJORVERSION$:[LEN(4)],DWMINORVERSION$:[LEN(4)],DWBUILDNUMBER$:[LEN(4)],DWPLATFORMID$:[LEN(4)],SZCSDVERSION$:[LEN(128)],WSERVICEPACKMAJOR$:[LEN(2)],WSERVICEPACKMINOR$:[LEN(2)],WSUITEMASK$:[LEN(2)],WPRODUCTTYPE$:[LEN(1)],WRESERVED$:[LEN(1)]
8320 CALL PGN+";GETVERSIONEX",OS_STR$
8330 IF OS_STRT$="" THEN MOS$=""; EXIT 
8340 READ DATA FROM OS_STR$,REC=OS$ TO IOL=0500
8350 ! 
8360 SWITCH NUM(OS.DWPLATFORMID$)
8370 ! 
8380 ! Win32s on Windows 3.1.
8390 CASE VER_PLATFORM_WIN32S ! 0
8400 MOS$="Win32s on Windows 3.1."
8410 BREAK
8420 ! 
8430 ! !95x
8440 CASE VER_PLATFORM_WIN32_WINDOWS ! 1
8450 SWITCH NUM(OS.DWMINORVERSION$)
8460 CASE 0
8470 MOS$="Windows 95"
8480 BREAK
8490 CASE 10
8500 MOS$="Windows 98"
8510 BREAK
8520 CASE 90
8530 MOS$="Windows ME"
8540 BREAK
8550 END SWITCH ! OS.DWMINORVERSION$
8560 BREAK
8570 ! 
8580 ! NT
8590 CASE VER_PLATFORM_WIN32_NT ! 2
8600 SWITCH NUM(OS.DWMAJORVERSION$)
8610 CASE 3
8620 MOS$="Windows NT 3.51"
8630 BREAK
8640 CASE 4
8650 MOS$="Windows NT 4.0"
8660 BREAK
8670 CASE 5
8680 SWITCH NUM(OS.DWMINORVERSION$)
8690 CASE 0
8700 MOS$="Windows 2000"
8710 BREAK
8720 CASE 1
8730 MOS$="Whistler"
8740 BREAK
8750 END SWITCH ! OS.DWMINORVERSION$
8760 BREAK
8770 END SWITCH ! OS.DWMAJORVERSION$
8780 ! end NT
8790 BREAK
8800 CASE DEFAULT
8810 END SWITCH ! OS.DWPLATFORMID$
8820 EXIT 
8830 ! 
8840 ! ---- Returns the Path of Special Folder Names ----
8850 GETFOLDERPATH:
8860 ENTER CSIDL,PATH$,WINVER$
8870 IF WINVER$="" THEN CALL PGN+";getwinversion",WINVER$
8880 IF WINVER$="" THEN WINVER$="Windows 95"
8890 DIM PATH$(260,$00$)
8900 SWITCH WINVER$
8910 CASE "Windows 95","Windows 98","Windows Me"
8920 CASE "Windows NT 3.51","Windows NT 4.0"
8930 Y=DLL("shell32","SHGetSpecialFolderPathA",0,PATH$,CSIDL,0,ERR=*NEXT)
8940 PATH$=STP(PATH$,1,$00$)
8950 IF CSIDL=36 AND PATH$="" THEN PATH$=ENV("windir")
8960 IF CSIDL=38 AND PATH$="" THEN PATH$="C:\Program Files"
8970 IF CSIDL=37 AND PATH$="" THEN PATH$=ENV("windir")+"\system"
8980 IF CSIDL=41 AND PATH$="" THEN PATH$=ENV("windir")+"\system32"
8990 BREAK
9000 CASE "Windows 2000"
9010 CASE "Whistler"
9020 Y=DLL("shell32","SHGetFolderPathA",NULL,CSIDL,NULL,0,PATH$)
9030 PATH$=STP(PATH$,1,$00$)
9040 BREAK
9050 END SWITCH 
9060 EXIT 
9070 ! 
9080 GETFILETIME:
9090 DOSTR=0
9100 ENTER LPFILENAME$,FT$,ERR=*NEXT; DOSTR=1; GOTO 9200
9110 ENTER LPFILENAME$,FT
9120 ! Private Type OFSTRUCT
9130 ! "  Bytes As Byte
9140 ! "  fFixedDisk As Byte
9150 ! "  nErrCode As Integer
9160 ! "  Reserved1 As Integer
9170 ! "  Reserved2 As Integer
9180 ! "  szPathName(OFS_MAXPATHNAME) As Byte
9190 ! End Type
9200 OFS_MAXPATHNAME=128
9210 OF_READ=0
9220 DIM BUFF$(OFS_MAXPATHNAME+8,$00$); BUFF$(1,1)=SWP(BIN(LEN(BUFF$),1))
9230 _FT=DLL("kernel32","OpenFile",LPFILENAME$+$00$,BUFF$,OF_READ)
9240 IF _FT=0 THEN EXIT 
9250 DIM LPCREATIONTIME$(8,$00$)
9260 RETCDE=DLL("kernel32","GetFileTime",_FT,LPCREATIONTIME$,0,0)
9270 IF DOSTR THEN {
9280 CALL PGN+";FILETIME_TO_PVX_DATE",LPCREATIONTIME$,FT$
9290  } ELSE {
9300 FT=DEC(LPCREATIONTIME$)
9310  }
9320 _FT=DLL("kernel32","CloseHandle",_FT)
9330 EXIT 
9340 ! 
9350 END 
20000 ! ^ 20000
20010 SET_CSIDL_CONSTANTS:
20020 CSIDL_DESKTOP=0
20030 CSIDL_INTERNET=1
20040 CSIDL_PROGRAMS=2
20050 CSIDL_CONTROLS=3
20060 CSIDL_PRINTERS=4
20070 CSIDL_PERSONAL=5
20080 CSIDL_FAVORITES=6
20090 CSIDL_STARTUP=7
20100 CSIDL_RECENT=8
20110 CSIDL_SENDTO=9
20120 CSIDL_BITBUCKET=10
20130 CSIDL_STARTMENU=11
20140 CSIDL_DESKTOPDIRECTORY=16
20150 CSIDL_DRIVES=17
20160 CSIDL_NETWORK=18
20170 CSIDL_NETHOOD=19
20180 CSIDL_FONTS=20
20190 CSIDL_TEMPLATES=21
20200 CSIDL_COMMON_STARTMENU=22
20210 CSIDL_COMMON_PROGRAMS=23
20220 CSIDL_COMMON_STARTUP=24
20230 CSIDL_COMMON_DESKTOPDIRECTORY=25
20240 CSIDL_APPDATA=26
20250 CSIDL_PRINTHOOD=27
20260 CSIDL_ALTSTARTUP=29
20270 CSIDL_COMMON_ALTSTARTUP=30
20280 CSIDL_COMMON_FAVORITES=31
20290 CSIDL_INTERNET_CACHE=32
20300 CSIDL_COOKIES=33
20310 CSIDL_HISTORY=34
20320 CSIDL_COMMON_APPDATA=35
20330 CSIDL_WINDOWS=36
20340 CSIDL_SYSTEM=37
20350 CSIDL_PROGRAM_FILES=38
20360 CSIDL_MYPICTURES=39
20370 CSIDL_PROFILE=40
20380 CSIDL_SYSTEM32=41
20390 CSIDL_PROGRAM_FILES_COMMON=43
20400 CSIDL_COMMON_TEMPLATES=45
20410 CSIDL_COMMON_DOCUMENTS=46
20420 CSIDL_COMMON_ADMINTOOLS=47
20430 RETURN 
20440 ! 
20450 ! 
20460 LOAD_SPI_CONSTANTS:
20470 IOLIST DWOSVERSIONINFOSIZE$:[LEN(4)],DWMAJORVERSION$:[LEN(4)],DWMINORVERSION$:[LEN(4)],DWBUILDNUMBER$:[LEN(4)],DWPLATFORMID$:[LEN(4)],SZCSDVERSION$:[LEN(128)],WSERVICEPACKMAJOR$:[LEN(2)],WSERVICEPACKMINOR$:[LEN(2)],WSUITEMASK$:[LEN(2)],WPRODUCTTYPE$:[LEN(1)],WRESERVED$:[LEN(1)]
20480 CALL PGN+";GETVERSIONEX",OS_STR$
20490 READ DATA FROM OS_STR$,REC=OS$ TO IOL=20470
20500 ! *
20510 ! * Parameter for SystemParametersInfo()
20520 ! *
20530 SPI_GETBEEP=1
20540 SPI_SETBEEP=2
20550 SPI_GETMOUSE=3
20560 SPI_SETMOUSE=4
20570 SPI_GETBORDER=5
20580 SPI_SETBORDER=6
20590 SPI_GETKEYBOARDSPEED=10
20600 SPI_SETKEYBOARDSPEED=11
20610 SPI_LANGDRIVER=12
20620 SPI_ICONHORIZONTALSPACING=13
20630 SPI_GETSCREENSAVETIMEOUT=14
20640 SPI_SETSCREENSAVETIMEOUT=15
20650 SPI_GETSCREENSAVEACTIVE=16
20660 SPI_SETSCREENSAVEACTIVE=17
20670 SPI_GETGRIDGRANULARITY=18
20680 SPI_SETGRIDGRANULARITY=19
20690 SPI_SETDESKWALLPAPER=20
20700 SPI_SETDESKPATTERN=21
20710 SPI_GETKEYBOARDDELAY=22
20720 SPI_SETKEYBOARDDELAY=23
20730 SPI_ICONVERTICALSPACING=24
20740 SPI_GETICONTITLEWRAP=25
20750 SPI_SETICONTITLEWRAP=26
20760 SPI_GETMENUDROPALIGNMENT=27
20770 SPI_SETMENUDROPALIGNMENT=28
20780 SPI_SETDOUBLECLKWIDTH=29
20790 SPI_SETDOUBLECLKHEIGHT=30
20800 SPI_GETICONTITLELOGFONT=31
20810 SPI_SETDOUBLECLICKTIME=32
20820 SPI_SETMOUSEBUTTONSWAP=33
20830 SPI_SETICONTITLELOGFONT=34
20840 SPI_GETFASTTASKSWITCH=35
20850 SPI_SETFASTTASKSWITCH=36
20860 ! 
20870 IF NUM(OS.DWMAJORVERSION$)>=4 THEN {
20880 ! 
20890 SPI_SETDRAGFULLWINDOWS=37
20900 SPI_GETDRAGFULLWINDOWS=38
20910 SPI_GETNONCLIENTMETRICS=41
20920 SPI_SETNONCLIENTMETRICS=42
20930 SPI_GETMINIMIZEDMETRICS=43
20940 SPI_SETMINIMIZEDMETRICS=44
20950 SPI_GETICONMETRICS=45
20960 SPI_SETICONMETRICS=46
20970 SPI_SETWORKAREA=47
20980 SPI_GETWORKAREA=48
20990 SPI_SETPENWINDOWS=49
21000 SPI_GETHIGHCONTRAST=66
21010 SPI_SETHIGHCONTRAST=67
21020 SPI_GETKEYBOARDPREF=68
21030 SPI_SETKEYBOARDPREF=69
21040 SPI_GETSCREENREADER=70
21050 SPI_SETSCREENREADER=71
21060 SPI_GETANIMATION=72
21070 SPI_SETANIMATION=73
21080 SPI_GETFONTSMOOTHING=74
21090 SPI_SETFONTSMOOTHING=75
21100 SPI_SETDRAGWIDTH=76
21110 SPI_SETDRAGHEIGHT=77
21120 SPI_SETHANDHELD=78
21130 SPI_GETLOWPOWERTIMEOUT=79
21140 SPI_GETPOWEROFFTIMEOUT=80
21150 SPI_SETLOWPOWERTIMEOUT=81
21160 SPI_SETPOWEROFFTIMEOUT=82
21170 SPI_GETLOWPOWERACTIVE=83
21180 SPI_GETPOWEROFFACTIVE=84
21190 SPI_SETLOWPOWERACTIVE=85
21200 SPI_SETPOWEROFFACTIVE=86
21210 SPI_SETCURSORS=87
21220 SPI_SETICONS=88
21230 SPI_GETDEFAULTINPUTLANG=89
21240 SPI_SETDEFAULTINPUTLANG=90
21250 SPI_SETLANGTOGGLE=91
21260 SPI_GETWINDOWSEXTENSION=92
21270 SPI_SETMOUSETRAILS=93
21280 SPI_GETMOUSETRAILS=94
21290 SPI_SETSCREENSAVERRUNNING=97
21300 SPI_SCREENSAVERRUNNING=SPI_SETSCREENSAVERRUNNING
21310  } ! endif /* WINVER >= =$0400 */
21320 ! 
21330 SPI_GETFILTERKEYS=50
21340 SPI_SETFILTERKEYS=51
21350 SPI_GETTOGGLEKEYS=52
21360 SPI_SETTOGGLEKEYS=53
21370 SPI_GETMOUSEKEYS=54
21380 SPI_SETMOUSEKEYS=55
21390 SPI_GETSHOWSOUNDS=56
21400 SPI_SETSHOWSOUNDS=57
21410 SPI_GETSTICKYKEYS=58
21420 SPI_SETSTICKYKEYS=59
21430 SPI_GETACCESSTIMEOUT=60
21440 SPI_SETACCESSTIMEOUT=61
21450 ! 
21460 IF NUM(OS.DWMAJORVERSION$)>=4 THEN {
21470 ! 
21480 SPI_GETSERIALKEYS=62
21490 SPI_SETSERIALKEYS=63
21500  } ! endif /* WINVER >= =$0400 */
21510 SPI_GETSOUNDSENTRY=64
21520 SPI_SETSOUNDSENTRY=65
21530 ! 
21540 IF NUM(OS.DWMAJORVERSION$)>=4 AND NUM(OS.DWMINORVERSION$)<10 THEN {! WIN NT 4.0 +  MOUSE SUPPORT
21550 ! 
21560 SPI_GETMOUSEHOVERWIDTH=98
21570 SPI_SETMOUSEHOVERWIDTH=99
21580 SPI_GETMOUSEHOVERHEIGHT=100
21590 SPI_SETMOUSEHOVERHEIGHT=101
21600 SPI_GETMOUSEHOVERTIME=102
21610 SPI_SETMOUSEHOVERTIME=103
21620 SPI_GETWHEELSCROLLLINES=104
21630 SPI_SETWHEELSCROLLLINES=105
21640 SPI_GETSHOWIMEUI=110
21650 SPI_SETSHOWIMEUI=111
21660  } ! #endif
21670 RETURN 
21680 ! 
21690 SET_FILE_CONSTANTS:
21700 ERROR_SUCCESS=0
21710 ERROR_MORE_DATA=234
21720 REG_SZ=1 ! Unicode nul terminated string
21730 SYNCHRONIZE=DEC($00100000$)
21740 READ_CONTROL=DEC($00200000$)
21750 STANDARD_RIGHTS_ALL=DEC($1F0000$)
21760 STANDARD_RIGHTS_EXECUTE=READ_CONTROL
21770 STANDARD_RIGHTS_READ=READ_CONTROL
21780 STANDARD_RIGHTS_REQUIRED=DEC($00F00000$)
21790 STANDARD_RIGHTS_WRITE=READ_CONTROL
21800 KEY_CREATE_LINK=DEC($00000020$)
21810 KEY_CREATE_SUB_KEY=DEC($00000004$)
21820 KEY_ENUMERATE_SUB_KEYS=DEC($00000008$)
21830 KEY_NOTIFY=DEC($00000010$)
21840 KEY_QUERY_VALUE=DEC($00000001$)
21850 KEY_SET_VALUE=2
21860 KEY_READ=STANDARD_RIGHTS_READ+KEY_QUERY_VALUE+KEY_ENUMERATE_SUB_KEYS+KEY_NOTIFY-SYNCHRONIZE
21870 GENERIC_READ=DEC($80000000$) ! for accessing devices as well as files
21880 GENERIC_WRITE=DEC($40000000$)
21890 GENERIC_EXECUTE=DEC($20000000$)
21900 GENERIC_ALL=DEC($10000000$)
21910 RETURN 
21920 ! 
21930 FILE_DISPOSITION_CONSTANTS:
21940 CREATE_NEW=1
21950 CREATE_ALWAYS=2
21960 OPEN_EXISTING=3
21970 OPEN_ALWAYS=4
21980 TRUNCATE_EXISTING=5
21990 RETURN 
22000 ! 
22010 FILE_SHARE_CONSTANTS:
22020 FILE_SHARE_READ=DEC($00000001$)
22030 FILE_SHARE_WRITE=DEC($00000002$)
22040 FILE_SHARE_DELETE=DEC($00000004$)
22050 RETURN 
22060 ! 
22070 FILE_ATTRIBUTES:
22080 FILE_ATTRIBUTE_READONLY=DEC($00000001$)
22090 FILE_ATTRIBUTE_HIDDEN=DEC($00000002$)
22100 FILE_ATTRIBUTE_SYSTEM=DEC($00000004$)
22110 FILE_ATTRIBUTE_DIRECTORY=DEC($00000010$)
22120 FILE_ATTRIBUTE_ARCHIVE=DEC($00000020$)
22130 FILE_ATTRIBUTE_ENCRYPTED=DEC($00000040$)
22140 FILE_ATTRIBUTE_NORMAL=DEC($00000080$)
22150 FILE_ATTRIBUTE_TEMPORARY=DEC($00000100$)
22160 FILE_ATTRIBUTE_SPARSE_FILE=DEC($00000200$)
22170 FILE_ATTRIBUTE_REPARSE_POINT=DEC($00000400$)
22180 FILE_ATTRIBUTE_COMPRESSED=DEC($00000800$)
22190 FILE_ATTRIBUTE_OFFLINE=DEC($00001000$)
22200 FILE_ATTRIBUTE_NOT_CONTENT_INDEXED=DEC($00002000$)
22210 RETURN 
22220 ! language constants
22230 ! 
22240 SET_LANG_CONSTANTS:
22250 ! 
22260 PROCESS_OR_USER_DEFAULT_LANGUAGE$=$0400$
22270 SYSTEM_DEFAULT_LANGUAGE$=$0800$
22280 AFRIKAANS$=$0436$
22290 ALBANIAN$=$041C$
22300 ARABIC_SAUDI_ARABIA$=$0401$
22310 ARABIC_IRAQ$=$0801$
22320 ARABIC_EGYPT$=$0C01$
22330 ARABIC_LIBYA$=$1001$
22340 ARABIC_ALGERIA$=$1401$
22350 ARABIC_MOROCCO$=$1801$
22360 ARABIC_TUNISIA$=$1C01$
22370 ARABIC_OMAN$=$2001$
22380 ARABIC_YEMEN$=$2401$
22390 ARABIC_SYRIA$=$2801$
22400 ARABIC_JORDAN$=$2C01$
22410 ARABIC_LEBANON$=$3001$
22420 ARABIC_KUWAIT$=$3401$
22430 ARABIC_U.A.E.$=$3801$
22440 ARABIC_BAHRAIN$=$3C01$
22450 ARABIC_QATAR$=$4001$
22460 ARMENIAN$=$042B$ ! "Windows 2000 or later:  This is Unicode only.
22470 AZERI_LATIN$=$042C$
22480 AZERI_CYRILLIC$=$082C$
22490 BASQUE$=$042D$
22500 BELARUSSIAN$=$0423$
22510 BULGARIAN$=$0402$
22520 BURMESE$=$0455$
22530 CATALAN$=$0403$
22540 CHINESE_TAIWAN$=$0404$
22550 CHINESE_PRC$=$0804$
22560 CHINESE_HONG_KONG_SAR_PRC$=$0C04$
22570 CHINESE_SINGAPORE$=$1004$
22580 ! Windows 98/Me, Windows 2000 or later: Chinese_Macau SAR$=$1404$
22590 CROATIAN$=$041A$
22600 CZECH$=$0405$
22610 DANISH$=$0406$
22620 ! Whistler: Divehi. This is Unicode only.=$0465$
22630 DUTCH_NETHERLANDS$=$0413$
22640 DUTCH_BELGIUM$=$0813$
22650 ENGLISH_UNITED_STATES$=$0409$
22660 ENGLISH_UNITED_KINGDOM$=$0809$
22670 ENGLISH_AUSTRALIAN$=$0C09$
22680 ENGLISH_CANADIAN$=$1009$
22690 ENGLISH_NEW_ZEALAND$=$1409$
22700 ENGLISH_IRELAND$=$1809$
22710 ENGLISH_SOUTH_AFRICA$=$1C09$
22720 ENGLISH_JAMAICA$=$2009$
22730 ENGLISH_CARIBBEAN$=$2409$
22740 ENGLISH_BELIZE$=$2809$
22750 ENGLISH_TRINIDAD$=$2C09$
22760 ENGLISH_ZIMBABWE$=$3009$ ! Windows 98/Me, Windows 2000 or later:
22770 ENGLISH_PHILIPPINES$=$3409$ ! Windows 98/Me, Windows 2000 or later:
22780 ESTONIAN$=$0425$
22790 FAEROESE$=$0438$
22800 FARSI$=$0429$
22810 FINNISH$=$040B$
22820 FRENCH_STANDARD$=$040C$
22830 FRENCH_BELGIAN$=$080C$
22840 FRENCH_CANADIAN$=$0C0C$
22850 FRENCH_SWITZERLAND$=$100C$
22860 FRENCH_LUXEMBOURG$=$140C$
22870 FRENCH_MONACO$=$180C$ ! Windows 98/Me, Windows 2000 or later:
22880 GALICIAN$=$0456$ ! WHISTLER:
22890 ! Windows 2000 and later: Georgian. This is Unicode only.=$0437$
22900 GERMAN_STANDARD$=$0407$
22910 GERMAN_SWITZERLAND$=$0807$
22920 GERMAN_AUSTRIA$=$0C07$
22930 GERMAN_LUXEMBOURG$=$1007$
22940 GERMAN_LIECHTENSTEIN$=$1407$
22950 GREEK$=$0408$
22960 ! Whistler: Gujarati. This is Unicode only.=$0447$
22970 HEBREW$=$040D$
22980 ! Windows 2000 and later: Hindi. This is Unicode only.=$0439$
22990 HUNGARIAN$=$040E$
23000 ICELANDIC$=$040F$
23010 INDONESIAN$=$0421$
23020 ITALIAN_STANDARD$=$0410$
23030 ITALIAN_SWITZERLAND$=$0810$
23040 JAPANESE$=$0411$
23050 ! Whistler: Kannada. This is Unicode only.=$044b$
23060 KASHMIRI$=$0860$
23070 KAZAKH$=$043F$
23080 ! Windows 2000 and later: Konkani. This is Unicode only.=$0457$
23090 KOREAN$=$0412$
23100 KOREAN_JOHAB$=$0812$ ! Windows 95, Windows NT 4.0 only:
23110 KYRGYZ$=$0440$ ! Whistler:
23120 LATVIAN$=$0426$
23130 LITHUANIAN$=$0427$
23140 LITHUANIAN_CLASSIC$=$0827$ ! Windows 98 only:
23150 FYRO_MACEDONIAN$=$042F$
23160 MALAY_MALAYSIAN$=$043E$
23170 ! Malay_Brunei Darussalam$=$083e$
23180 MANIPURI$=$0458$
23190 ! Windows 2000 and later: Marathi. This is Unicode only.=$044e$
23200 MONGOLIAN$=$0450$ ! WHISTLER:
23210 NORWEGIAN_BOKMAL$=$0414$
23220 NORWEGIAN_NYNORSK$=$0814$
23230 POLISH$=$0415$
23240 PORTUGUESE_BRAZIL$=$0416$
23250 PORTUGUESE_PORTUGAL$=$0816$
23260 ! PUNJABI$=$0446$ ! Whistler:    This is Unicode only.
23270 ROMANIAN$=$0418$
23280 RUSSIAN$=$0419$
23290 ! SANSKRIT$=$044F$ ! Windows 2000 and later:  This is Unicode only.
23300 SERBIAN_CYRILLIC$=$0C1A$
23310 SERBIAN_LATIN$=$081A$
23320 SINDHI$=$0459$
23330 SLOVAK$=$041B$
23340 SLOVENIAN$=$0424$
23350 SPANISH_TRADITIONAL_SORT$=$040A$
23360 SPANISH_MEXICAN$=$080A$
23370 SPANISH_MODERN_SORT$=$0C0A$
23380 SPANISH_GUATEMALA$=$100A$
23390 SPANISH_COSTA_RICA$=$140A$
23400 SPANISH_PANAMA$=$180A$
23410 SPANISH_DOMINICAN_REPUBLIC$=$1C0A$
23420 SPANISH_VENEZUELA$=$200A$
23430 SPANISH_COLOMBIA$=$240A$
23440 SPANISH_PERU$=$280A$
23450 SPANISH_ARGENTINA$=$2C0A$
23460 SPANISH_ECUADOR$=$300A$
23470 SPANISH_CHILE$=$340A$
23480 SPANISH_URUGUAY$=$380A$
23490 SPANISH_PARAGUAY$=$3C0A$
23500 SPANISH_BOLIVIA$=$400A$
23510 SPANISH_EL_SALVADOR$=$440A$
23520 SPANISH_HONDURAS$=$480A$
23530 SPANISH_NICARAGUA$=$4C0A$
23540 SPANISH_PUERTO_RICO$=$500A$
23550 SUTU$=$0430$
23560 SWAHILI_KENYA$=$0441$
23570 SWEDISH$=$041D$
23580 SWEDISH_FINLAND$=$081D$
23590 ! SYRIAC$=$045A$ ! Whistler:  This is Unicode only.
23600 ! TAMIL$=$0449$ ! Windows 2000 and later:  This is Unicode only.
23610 TATAR_TATARSTAN$=$0444$
23620 ! TELUGU$=$044A$ ! "Whistler: This is Unicode only
23630 THAI$=$041E$
23640 TURKISH$=$041F$
23650 UKRAINIAN$=$0422$
23660 ! URDU_PAKISTAN$=$0420$ ! Windows 98/Me, Windows 2000 or later:
23670 URDU_INDIA$=$0820$
23680 UZBEK_LATIN$=$0443$
23690 UZBEK_CYRILLIC$=$0843$
23700 ! VIETNAMESE$=$042A$ ! Windows 98/Me, Windows NT 4.0 and later:
23710 RETURN 
23720 ! 
23730 ! 
23740 ! Device Parameters for GetDeviceCaps()
23750 DRIVERVERSION=0 ! Device driver version
23760 TECHNOLOGY=2 ! Device classification
23770 HORZSIZE=4 ! Horizontal size in millimeters
23780 VERTSIZE=6 ! Vertical size in millimeters
23790 HORZRES=8 ! Horizontal width in pixels
23800 VERTRES=10 ! Vertical width in pixels
23810 BITSPIXEL=12 ! Number of bits per pixel
23820 PLANES=14 ! Number of planes
23830 NUMBRUSHES=16 ! Number of brushes the device has
23840 NUMPENS=18 ! Number of pens the device has
23850 NUMMARKERS=20 ! Number of markers the device has
23860 NUMFONTS=22 ! Number of fonts the device has
23870 NUMCOLORS=24 ! Number of colors the device supports
23880 PDEVICESIZE=26 ! Size required for device descriptor
23890 CURVECAPS=28 ! Curve capabilities
23900 LINECAPS=30 ! Line capabilities
23910 POLYGONALCAPS=32 ! Polygonal capabilities
23920 TEXTCAPS=34 ! Text capabilities
23930 CLIPCAPS=36 ! Clipping capabilities
23940 RASTERCAPS=38 ! Bitblt capabilities
23950 ASPECTX=40 ! Length of the X leg
23960 ASPECTY=42 ! Length of the Y leg
23970 ASPECTXY=44 ! Length of the hypotenuse
23980 LOGPIXELSX=88 ! Logical pixels/inch in X
23990 LOGPIXELSY=90 ! Logical pixels/inch in Y
24000 SIZEPALETTE=104 ! Number of entries in physical palette
24010 NUMRESERVED=106 ! Number of reserved entries in palette
24020 COLORRES=108 ! Actual color resolution
24030 ! Printing related DeviceCaps. These replace the appropriate Escapes
24040 PHYSICALWIDTH=110 ! Physical Width in device units
24050 PHYSICALHEIGHT=111 ! Physical Height in device units
24060 PHYSICALOFFSETX=112 ! Physical Printable Area x margin
24070 PHYSICALOFFSETY=113 ! Physical Printable Area y margin
24080 SCALINGFACTORX=114 ! Scaling factor x
24090 SCALINGFACTORY=115 ! Scaling factor y
24100 RETURN 
24110 ! 
60000 ! 60000 - Function Definitions
60010 ! Returns 1 if running on Windows 32Bit
60020 DEF FNISWIN32
60030 IF POS("win"=LCS(SYS))=0 THEN RETURN 0
60040 IF TCB(82)<=0 THEN RETURN 0
60050 RETURN 1
60060 END DEF
60070 ! 
60080 DEF FNPROFILESENABLED_95X
60090 ! !95 HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Profile List
60100 CALL PGN+";QUERY_REGISTRY_KEY_INFO",0,"HKEY_LOCAL_MACHINE","Software\Microsoft\Windows\CurrentVersion\Profile List",CLS_NAME$,CLS_LEN,SUBKEY_CNT,MAX_SUBKEY_LEN,MAX_CLS_NAME_LEN,KEY_VALUES_CNT,MAX_DATANAME_LEN,MAX_VALUE_LEN,SEC_DESC_LEN,LASTMODIFIED$,X
60110 IF SUBKEY_CNT=0 THEN RETURN 0 ELSE RETURN 1
60120 END DEF
60130 ! 
60140 DEF FNPROFILESENABLED_NT
60150 ! nt HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList
60160 CALL PGN+";QUERY_REGISTRY_KEY_INFO",0,"HKEY_LOCAL_MACHINE","SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList",CLS_NAME$,CLS_LEN,SUBKEY_CNT,MAX_SUBKEY_LEN,MAX_CLS_NAME_LEN,KEY_VALUES_CNT,MAX_DATANAME_LEN,MAX_VALUE_LEN,SEC_DESC_LEN,LASTMODIFIED$,X
60170 IF SUBKEY_CNT=0 THEN RETURN 0 ELSE RETURN 1
60180 END DEF
60190 ! 
60200 DEF FN_H_KEY(LOCAL KEY$)
60210 KEY$=STP(KEY$,2)
60220 IF POS("HKEY_CLASSES_ROOT"=UCS(KEY$))>0 OR POS("HKR"=KEY$)>0 OR POS("0"=KEY$)>0 THEN _KEY=DEC($80000000$); GOTO 60290
60230 IF POS("HKEY_CLASSES_USER"=UCS(KEY$))>0 OR POS("HKU"=KEY$)>0 OR POS("1"=KEY$) THEN _KEY=DEC($80000001$); GOTO 60290
60240 IF POS("HKEY_LOCAL_MACHINE"=UCS(KEY$))>0 OR POS("HKL"=KEY$)>0 OR POS("2"=KEY$) THEN _KEY=DEC($80000002$); GOTO 60290
60250 IF POS("HKEY_USERS"=UCS(KEY$))>0 OR POS("HKS"=KEY$)>0 OR POS("3"=KEY$) THEN _KEY=DEC($80000003$); GOTO 60290
60260 IF POS("HKEY_PERFORMANCE_DATA"=UCS(KEY$))>0 OR POS("HKP"=KEY$)>0 OR POS("4"=KEY$) THEN _KEY=DEC($80000004$); GOTO 60290
60270 IF POS("HKEY_CURRENT_CONFIG"=UCS(KEY$))>0 OR POS("HKC"=KEY$)>0 OR POS("5"=KEY$) THEN _KEY=DEC($80000005$); GOTO 60290
60280 IF POS("HKEY_DYN_DATA"=UCS(KEY$))>0 OR POS("HKD"=KEY$)>0 OR POS("6"=KEY$) THEN _KEY=DEC($80000006$); GOTO 60290
60290 RETURN _KEY
60300 END DEF
60310 ! 
60320 DEF FN_KEY_FORMAT$(LOCAL SUBKEY$)
60330 IF MID(SUBKEY$,1)="\" THEN SUBKEY$=SUBKEY$(2)
60340 IF MID(SUBKEY$,-1)="\" THEN SUBKEY$=SUBKEY$(1,LEN(SUBKEY$)-1)
60350 RETURN SUBKEY$
60360 END DEF
60370 ! 
60380 DEF FNREGPATHWINPROGRAMS
60390 ! Returns the name of the registry key
60400 ! "\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders"
60410 RETURN FNREGPATHWINCURRENTVERSION$+"\Explorer\Shell Folders"
60420 EXIT 
60430 ! 
60440 DEF FNREGPATHWINCURRENTVERSION
60450 ! Returns the name of the registry key
60460 ! "\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion"
60470 RETURN "SOFTWARE\Microsoft\Windows\CurrentVersion"
60480 EXIT 
60490 ! 
60500 DEF FNUNQUOTESTR(QUOTEDSTRING$)
60510 ! This routine tests to see if QuotedString is wrapped in quotation
60520 ! marks, and, if so, remove them.
60530 ! 
60540 QUOTEDSTRING$=STP(QUOTEDSTRING$,2)
60550 IF MID(QUOTEDSTRING$,1,1)=$22$ AND MID(QUOTEDSTRING$,LEN(QUOTEDSTRING$),1)=$22$ THEN {
60560 QUOTEDSTRING$=MID(QUOTEDSTRING$,2,LEN(QUOTEDSTRING$)-2)
60570  } ! } ! Endif
60580 RETURN QUOTEDSTRING$
60590 END DEF
60600 ! 
60610 DEF FNQUOTESTRING(UNQUOTEDSTRING$,FORCE,VTRIM)
60620 QUOTEDSTRING$=UNQUOTEDSTRING$
60630 ! 
60640 ! Trim the string if necessary
60650 ! 
60660 IF VTRIM THEN QUOTEDSTRING$=STP(QUOTEDSTRING$,2)
60670 ! 
60680 ! See if the string is already quoted
60690 IF NOT(VFORCE) AND (MID(QUOTEDSTRING$,1,1)=$22$) AND MID(QUOTEDSTRING$,LEN(QUOTEDSTRING$),1)=$22$ THEN GOTO DONEQUOTESTRING
60700 ! 
60710 ! Add the quotes
60720 ! 
60730 PRINT QUOTEDSTRING$=QUO+QUOTEDSTRING$+QUO
60740 DONEQUOTESTRING:
60750 RETURN QUOTEDSTRING$
60760 END DEF
60770 ! 
60780 DEF FNTREATASWIN95
60790 CALL PGN+";GETWINVERSION",WINVER$
60800 SWITCH WINVER$
60810 CASE "Windows 95","Windows 98","Windows Me"
60820 RETURN 1
60830 BREAK
60840 DEFAULT 
60850 RETURN 0
60860 END DEF
60870 ! 
60880 ! DEF FNREPLACEDOUBLEQUOTES(STR$)
60890 ! FOR I=1 TO LEN(STR$)
60900 ! IF MID(STR$,I,1)=$2224$ THEN {
60910 ! STR$(I,1)=$27$
60920 ! }
60930 ! NEXT I
60940 ! END DEF
60950 ! 
60960 DEF FN_PVX2MS_SYSTEMDATE$(ARG1$)
60970 IF ARG1$="" THEN RETURN 
60980 DIM STME$(8)
60990 STME$(1,2)=SWP(BIN(NUM(DTE(ARG1$:"%Y")),2))
61000 STME$(3,2)=SWP(BIN(NUM(DTE(ARG1$:"%M")),2))
61010 STME$(7,2)=SWP(BIN(NUM(DTE(ARG1$:"%D")),2))
61020 STME$(9,2)=SWP(BIN(NUM(DTE(ARG1$:"%h")),2))
61030 STME$(11,2)=SWP(BIN(NUM(DTE(ARG1$:"%m")),2))
61040 STME$(13,2)=SWP(BIN(NUM(DTE(ARG1$:"%s")),2))
61050 RETURN STME$
61060 END DEF
61070 ! 
61080 DEF FN_LOAD_FROM_POINTER$(LPBUFFER$,SLEN$)
61090 ! copy memory values at pointer to STRING variable
61091 LOCAL BLEN,BMEM
61100 BLEN=DEC(SWP(SLEN$))
61110 BMEM=DEC(SWP(LPBUFFER$(1,4)))
61120 NEWSTR$=MEM(BMEM,BLEN)
61130 RETURN NEWSTR$
61140 END DEF
