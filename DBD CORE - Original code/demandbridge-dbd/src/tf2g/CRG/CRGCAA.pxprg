0010 ! CRGCAA - Cash Receipts GW Maintenance
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Aug. 15, 2002 14:29
0030 ! ************************************************************************
0035 REM "5.7 - 05/25/23 - 8.987007 - crg - SSP# 307408
0037 REM "307408-DBD-267;Enhance CR GW and other for Pre-Payments            
0040 REM "Copyright 2023 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "CRGCAA","../CRG/CR.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0115 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2 ! SSP240628 jdf
0118 DIM Z[NUM(X3$(60,3))] ! SSP240628 jdf
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0122 ! Open Files - 260723 - Batch enable Cash Receipts Gateway
0123 %NO_NEW_BATCH=0 ! Allow creation of new batches
0125 CALL "ZGBATC",X3$,X4$,"CR2CAA",X9; IF X9=1 THEN CMD_STR$="END"; EXIT 
0129 ! 
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0155 Z$="01O CR0...  02OSCR0...  04O AR1...  05O AR6...  13O ZZPARM" ! SSP240628 jdf
0156 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1 ! SSP240628 jdf
0160 ! _FILE_NAME$="CR0"+%C$
0170 ! _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0171 _FIL_NO=Z[1]
0180 ! _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0181 _CUR_FN=Z[2]; _FILE_NAME$=PTH(_CUR_FN); CLOSE (_CUR_FN); OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0182 ! Z$="01O CR0...  02OSCR0...  04O AR1...  05O AR6...  13O ZZPARM" ! SSP240628 jdf
0184 ! CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1 ! SSP240628 jdf
0186 IOLIST CUST$,CUST[1],CUST[2],CUST[3],CUST[4],CUST[5],CUST[6],CUST[7],CUST[8],CUST[9],CUST[10],CUST[11],CUST[12],CUST[13],CUST[14],CUST[15],CUST[16],CUST[17] ! SSP240628 jdf
0188 IOLIST AT6$,AT6[0],AT6[1],AT6[2] ! SSP240628 jdf
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=5
0430 DIM _KEYS$[1:5]; _KEYS$[1]="FY$",_KEYS$[2]="ACCTPD$",_KEYS$[3]="BANK_CODE$",_KEYS$[4]="DEPOSIT_NUM$",_KEYS$[5]="SEQ_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 ! IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 ! IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0 ! SSP240628 jdf
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1026 IF LEN(_KEY$)=14 AND FY$<>_KEY$(1,4) THEN _KEY$=FY$+_KEY$(5); GOTO 1070 ! SSP240628 jdf
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1065 ON_HOLD_DESC$="" ! SSP240628 jdf
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",ANS$ ! SSP240628 jdf
1230 IF ANS$="NO" THEN _CLR_FLG$="F"; GOSUB CLEAR_FIELDS; NEXT_ID=FY.CTL; RETURN ! SSP240628 jdf
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1655 ON_HOLD_REASON$="  ",ON_HOLD_DESC$="" ! SSP240628 jdf
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 IF INV_SUMMARY_BILL$="P" THEN REMOVE (Z[5],KEY=CUST_DIV$+CUST_CODE$+INV_NUM$)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3052 IF ON_HOLD_REASON$<>"  " THEN CALL "CR2SDA",%X3$,%X4$,ON_HOLD_REASON$,ON_HOLD_DESC$ ! SSP240628 jdf
3054 CUSTOMER$=CUST_DIV$+CUST_CODE$,%CUST_DIV$=CUST_DIV$,%CUST_CODE$=CUST_CODE$,%CUSTOMER$=%CUST_DIV$+%CUST_CODE$ ! SSP240628 jdf
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=FY.CTL,_FIRST_FIELD=DEPOSIT_DATE.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
5000 SEL_QRY:! SSP240628 jdf
5005 NO_BAL=0; GOSUB GL_ADJUSTMENT; IF NO_BAL OR STP(ON_HOLD_REASON$)<>"" THEN RETURN ! SSP240628 jdf
5010 VAL$="" ! SSP240628 jdf
5020 PROCESS "QRY_CR0.1","../CRG/CR.EN",VAL$ ! SSP240628 jdf
5030 IF STP(VAL$)="" THEN RETURN ! SSP240628 jdf
5035 FY$=VAL$(1,4),ACCTPD$=VAL$(5,2),BANK_CODE$=VAL$(7,3),DEPOSIT_NUM$=VAL$(10,1),SEQ_NUM$=VAL$(11,4) ! SSP240628  jdf
5040 REM GOSUB CLOSED_YEAR ! SSP240628 jdf
5050 REFRESH_FLG=1 ! SSP240628 jdf
5060 GOTO 1050 ! SSP240628 jdf
5070 RETURN ! SSP240628
5100 GL_ADJUSTMENT:! SSP240628 jdf
5103 IF ID$="BUTTON_8" THEN TMP_ON_HOLD_REASON$=ON_HOLD_REASON$; READ (_FIL_NO,KEY=_KEY$,DOM=5120); ON_HOLD_REASON$=TMP_ON_HOLD_REASON$ ! SSP240628 jdf
5105 GOSUB STR_TO_NUM ! SSP240628 jdf
5110 IF (GL_ADJ+CASH_POSTED+STAX_ALLOWED+FRT_ALLOWED+DISC_ALLOWED)<>TOTAL_APPLIED THEN NO_BAL=1; MSGBOX MSG("CRGCAA_01"),MSG("STOP"),"STOP" ! SSP240628 jdf
5112 IF ON_HOLD_REASON$="07" THEN ON_HOLD_REASON$="  ",ON_HOLD_DESC$="" ! SSP240628 jdf
5115 IF STP(ON_HOLD_REASON$)<>"" THEN MSGBOX MSG(ON_HOLD_DESC$),MSG("STOP"),"STOP" ! SSP240628 jdf
5120 RETURN ! SSP240628 jdf
5200 GET_CUST_INFO:! SSP240628 jdf
5210 IF CUSTOMER$="" THEN CUSTOMER$="          "; RETURN ! SSP240628 jdf
5220 DIM CUST[17] ! SSP240628 jdf
5230 READ (Z[4],KEY=CUSTOMER$,DOM=*RETURN)IOL=0186 ! SSP240628 jdf
5240 CUST_NAME$=CUST$(11,35); %CUST_NAME$=CUST_NAME$ ! SSP240628 jdf
5245 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$; %CUST_DIV$=CUST_DIV$,%CUST_CODE$=CUST_CODE$; %CUSTOMER$=%CUST_DIV$+%CUST_CODE$ ! SSP240628 jdf
5250 REFRESH_FLG=1 ! SSP240628 jdf
5260 RETURN ! SSP240628 jdf
5300 GET_INV_NUM:! SSP240628 jdf
5310 INV_NUM=NUM(INV_NUM$(1,%AR6_LEN),ERR=*NEXT),INV_NUM$=STR(INV_NUM:DIM(%AR6_LEN,"0")); IF %AR6_SUB_LEN THEN INV_NUM$=PAD(INV_NUM$,8); REFRESH_FLG=1; RETURN ! SSP240628 jdf
5320 REM MSGBOX MSG("INVALID")+SEP+MSG("AR_INV_NUM"),MSG("ATTN"),"!"; INV_NUM$=""; NEXT_ID=INV_NUM.CTL ! SSP240628 jdf
5330 RETURN ! SSP240628 jdf
5400 CLOSED_YEAR:! SSP240628 ! jdf
5410 FIND (Z[13],KEY=X3$(9,3)+"G/LYE"+FY$,DOM=*NEXT)P1$ ! SSP240628 jdf
5420 IF POS(P1$(99,1)="CR")<>0 THEN MSGBOX MSG("CRGCAA_02"),MSG("WARNING"); FY$=""; NEXT_ID=FY.CTL; DISABLE CONTROL ACCTPD.CTL; REFRESH_FLG=1; EXIT ! SSP240628 jdf
5425 ON_HOLD_REASON$="  ",ON_HOLD_DESC$="",REFRESH_FLG=1 ! SSP240628 jdf
5430 RETURN ! SSP240628 jdf
5500 VALIDATE_FY:! SSP240628 jdf
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 TOTAL_APPLIED$=STR(TOTAL_APPLIED)
10030 DISC_ALLOWED$=STR(DISC_ALLOWED)
10040 FRT_ALLOWED$=STR(FRT_ALLOWED)
10050 STAX_ALLOWED$=STR(STAX_ALLOWED)
10060 CASH_POSTED$=STR(CASH_POSTED)
10070 GL_ADJ$=STR(GL_ADJ)
10080 CR0_UNUSED_2$=STR(CR0_UNUSED_2)
10090 CR0_UNUSED_3$=STR(CR0_UNUSED_3)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="TOTAL_APPLIED",_X=TOTAL_APPLIED.CTL,TOTAL_APPLIED=NUM(TOTAL_APPLIED$,ERR=NON_NUMERIC)
11030 _X$="DISC_ALLOWED",_X=DISC_ALLOWED.CTL,DISC_ALLOWED=NUM(DISC_ALLOWED$,ERR=NON_NUMERIC)
11040 _X$="FRT_ALLOWED",_X=FRT_ALLOWED.CTL,FRT_ALLOWED=NUM(FRT_ALLOWED$,ERR=NON_NUMERIC)
11050 _X$="STAX_ALLOWED",_X=STAX_ALLOWED.CTL,STAX_ALLOWED=NUM(STAX_ALLOWED$,ERR=NON_NUMERIC)
11060 _X$="CASH_POSTED",_X=CASH_POSTED.CTL,CASH_POSTED=NUM(CASH_POSTED$,ERR=NON_NUMERIC)
11070 _X$="GL_ADJ",_X=GL_ADJ.CTL,GL_ADJ=NUM(GL_ADJ$,ERR=NON_NUMERIC)
11080 _X$="CR0_UNUSED_2",_X=CR0_UNUSED_2.CTL,CR0_UNUSED_2=NUM(CR0_UNUSED_2$,ERR=NON_NUMERIC)
11090 _X$="CR0_UNUSED_3",_X=CR0_UNUSED_3.CTL,CR0_UNUSED_3=NUM(CR0_UNUSED_3$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN FY$=""
13030 IF _CLR_FLG$="R" THEN ACCTPD$=""
13040 IF _CLR_FLG$="R" THEN BANK_CODE$=""
13050 IF _CLR_FLG$="R" THEN DEPOSIT_NUM$=""
13060 IF _CLR_FLG$="R" THEN SEQ_NUM$=""
13065 IF _CLR_FLG$="R" THEN _KEY$="" ! SSP240628 jdf
13070 DEPOSIT_DATE$=""
13080 CUST_DIV$=""
13090 CUST_CODE$=""
13100 CHECK_REF$=""
13110 INV_NUM$=""
13120 CUST_NAME$="",CUSTOMER$="" ! SSP240628 jdf
13130 ON_HOLD_REASON$="",ON_HOLD_DESC$="",END_DATE$="" ! SSP240628 jdf
13140 GL_ACCT$=""
13150 INV_SUMMARY_BILL$=""
13155 CUST_PO$=""
13160 CR0_UNUSED_1$=""
13170 TOTAL_APPLIED=0
13180 DISC_ALLOWED=0
13190 FRT_ALLOWED=0
13200 STAX_ALLOWED=0
13210 CASH_POSTED=0
13220 GL_ADJ=0
13230 CR0_UNUSED_2=0
13240 CR0_UNUSED_3=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=ACCTPD.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=BANK_CODE.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=DEPOSIT_NUM.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14060 IF _ENABLE_FLG=5 THEN CALL "*wingrp;Enable",KEY5.GRP$; NEXT_ID=SEQ_NUM.CTL ELSE CALL "*wingrp;Disable",KEY5.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(24,"N")
15030 IF _ORIG.FY$=_CUR.FY$ OR FY$=_CUR.FY$ THEN GOTO *NEXT ELSE IF _ORIG.FY$=FY$ THEN _CHG2$=_CHG2$+SEP+MSG("FY")+" = "+_CUR.FY$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FY")+" = "+_CUR.FY$
15040 IF _ORIG.ACCTPD$=_CUR.ACCTPD$ OR ACCTPD$=_CUR.ACCTPD$ THEN GOTO *NEXT ELSE IF _ORIG.ACCTPD$=ACCTPD$ THEN _CHG2$=_CHG2$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCTPD$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCTPD$
15050 IF _ORIG.BANK_CODE$=_CUR.BANK_CODE$ OR BANK_CODE$=_CUR.BANK_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.BANK_CODE$=BANK_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("BANK_CODE")+" = "+_CUR.BANK_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BANK_CODE")+" = "+_CUR.BANK_CODE$
15060 IF _ORIG.DEPOSIT_NUM$=_CUR.DEPOSIT_NUM$ OR DEPOSIT_NUM$=_CUR.DEPOSIT_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.DEPOSIT_NUM$=DEPOSIT_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("DEPO_N")+" = "+_CUR.DEPOSIT_NUM$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DEPO_N")+" = "+_CUR.DEPOSIT_NUM$
15070 IF _ORIG.SEQ_NUM$=_CUR.SEQ_NUM$ OR SEQ_NUM$=_CUR.SEQ_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.SEQ_NUM$=SEQ_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("SEQ_NUM")+" = "+_CUR.SEQ_NUM$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEQ_NUM")+" = "+_CUR.SEQ_NUM$
15080 IF _ORIG.DEPOSIT_DATE$=_CUR.DEPOSIT_DATE$ OR DEPOSIT_DATE$=_CUR.DEPOSIT_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.DEPOSIT_DATE$=DEPOSIT_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("DEPO_D")+" = "+_CUR.DEPOSIT_DATE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DEPO_D")+" = "+_CUR.DEPOSIT_DATE$
15090 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15100 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15110 IF _ORIG.CHECK_REF$=_CUR.CHECK_REF$ OR CHECK_REF$=_CUR.CHECK_REF$ THEN GOTO *NEXT ELSE IF _ORIG.CHECK_REF$=CHECK_REF$ THEN _CHG2$=_CHG2$+SEP+MSG("CHECK_REF")+" = "+_CUR.CHECK_REF$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CHECK_REF")+" = "+_CUR.CHECK_REF$
15120 IF _ORIG.INV_NUM$=_CUR.INV_NUM$ OR INV_NUM$=_CUR.INV_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.INV_NUM$=INV_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$
15130 IF _ORIG.CUST_NAME$=_CUR.CUST_NAME$ OR CUST_NAME$=_CUR.CUST_NAME$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_NAME$=CUST_NAME$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_NAME")+" = "+_CUR.CUST_NAME$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_NAME")+" = "+_CUR.CUST_NAME$
15140 IF _ORIG.ON_HOLD_REASON$=_CUR.ON_HOLD_REASON$ OR ON_HOLD_REASON$=_CUR.ON_HOLD_REASON$ THEN GOTO *NEXT ELSE IF _ORIG.ON_HOLD_REASON$=ON_HOLD_REASON$ THEN _CHG2$=_CHG2$+SEP+MSG("O_H_R")+" = "+_CUR.ON_HOLD_REASON$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("O_H_R")+" = "+_CUR.ON_HOLD_REASON$
15150 IF _ORIG.GL_ACCT$=_CUR.GL_ACCT$ OR GL_ACCT$=_CUR.GL_ACCT$ THEN GOTO *NEXT ELSE IF _ORIG.GL_ACCT$=GL_ACCT$ THEN _CHG2$=_CHG2$+SEP+MSG("GL_ACCT")+" = "+_CUR.GL_ACCT$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GL_ACCT")+" = "+_CUR.GL_ACCT$
15160 IF _ORIG.INV_SUMMARY_BILL$=_CUR.INV_SUMMARY_BILL$ OR INV_SUMMARY_BILL$=_CUR.INV_SUMMARY_BILL$ THEN GOTO *NEXT ELSE IF _ORIG.INV_SUMMARY_BILL$=INV_SUMMARY_BILL$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_S_B")+" = "+_CUR.INV_SUMMARY_BILL$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_S_B")+" = "+_CUR.INV_SUMMARY_BILL$
15170 IF _ORIG.CR0_UNUSED_1$=_CUR.CR0_UNUSED_1$ OR CR0_UNUSED_1$=_CUR.CR0_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.CR0_UNUSED_1$=CR0_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.CR0_UNUSED_1$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.CR0_UNUSED_1$
15180 IF _ORIG.TOTAL_APPLIED=_CUR.TOTAL_APPLIED OR TOTAL_APPLIED=_CUR.TOTAL_APPLIED THEN GOTO *NEXT ELSE IF _ORIG.TOTAL_APPLIED=TOTAL_APPLIED THEN _CHG2$=_CHG2$+SEP+MSG("TOTA_A")+" = "+STR(_CUR.TOTAL_APPLIED),_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TOTA_A")+" = "+STR(_CUR.TOTAL_APPLIED)
15190 IF _ORIG.DISC_ALLOWED=_CUR.DISC_ALLOWED OR DISC_ALLOWED=_CUR.DISC_ALLOWED THEN GOTO *NEXT ELSE IF _ORIG.DISC_ALLOWED=DISC_ALLOWED THEN _CHG2$=_CHG2$+SEP+MSG("DISC_A")+" = "+STR(_CUR.DISC_ALLOWED),_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DISC_A")+" = "+STR(_CUR.DISC_ALLOWED)
15200 IF _ORIG.FRT_ALLOWED=_CUR.FRT_ALLOWED OR FRT_ALLOWED=_CUR.FRT_ALLOWED THEN GOTO *NEXT ELSE IF _ORIG.FRT_ALLOWED=FRT_ALLOWED THEN _CHG2$=_CHG2$+SEP+MSG("FRT_A")+" = "+STR(_CUR.FRT_ALLOWED),_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FRT_A")+" = "+STR(_CUR.FRT_ALLOWED)
15210 IF _ORIG.STAX_ALLOWED=_CUR.STAX_ALLOWED OR STAX_ALLOWED=_CUR.STAX_ALLOWED THEN GOTO *NEXT ELSE IF _ORIG.STAX_ALLOWED=STAX_ALLOWED THEN _CHG2$=_CHG2$+SEP+MSG("STAX_A")+" = "+STR(_CUR.STAX_ALLOWED),_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STAX_A")+" = "+STR(_CUR.STAX_ALLOWED)
15220 IF _ORIG.CASH_POSTED=_CUR.CASH_POSTED OR CASH_POSTED=_CUR.CASH_POSTED THEN GOTO *NEXT ELSE IF _ORIG.CASH_POSTED=CASH_POSTED THEN _CHG2$=_CHG2$+SEP+MSG("CASH_P")+" = "+STR(_CUR.CASH_POSTED),_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CASH_P")+" = "+STR(_CUR.CASH_POSTED)
15230 IF _ORIG.GL_ADJ=_CUR.GL_ADJ OR GL_ADJ=_CUR.GL_ADJ THEN GOTO *NEXT ELSE IF _ORIG.GL_ADJ=GL_ADJ THEN _CHG2$=_CHG2$+SEP+MSG("GL_ADJ")+" = "+STR(_CUR.GL_ADJ),_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GL_ADJ")+" = "+STR(_CUR.GL_ADJ)
15240 IF _ORIG.CR0_UNUSED_2=_CUR.CR0_UNUSED_2 OR CR0_UNUSED_2=_CUR.CR0_UNUSED_2 THEN GOTO *NEXT ELSE IF _ORIG.CR0_UNUSED_2=CR0_UNUSED_2 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.CR0_UNUSED_2),_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.CR0_UNUSED_2)
15250 IF _ORIG.CR0_UNUSED_3=_CUR.CR0_UNUSED_3 OR CR0_UNUSED_3=_CUR.CR0_UNUSED_3 THEN GOTO *NEXT ELSE IF _ORIG.CR0_UNUSED_3=CR0_UNUSED_3 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.CR0_UNUSED_3),_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.CR0_UNUSED_3)
15260 IF _ORIG.CUST_PO$=_CUR.CUST_PO$ OR CUST_PO$=_CUR.CUST_PO$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_PO$=CUST_PO$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_PO")+" = "+_CUR.CUST_PO$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_PO")+" = "+_CUR.CUST_PO$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN FY$=_CUR.FY$
16030 IF _CHG_VAR$(2,1)="Y" THEN ACCTPD$=_CUR.ACCTPD$
16040 IF _CHG_VAR$(3,1)="Y" THEN BANK_CODE$=_CUR.BANK_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN DEPOSIT_NUM$=_CUR.DEPOSIT_NUM$
16060 IF _CHG_VAR$(5,1)="Y" THEN SEQ_NUM$=_CUR.SEQ_NUM$
16070 IF _CHG_VAR$(6,1)="Y" THEN DEPOSIT_DATE$=_CUR.DEPOSIT_DATE$
16080 IF _CHG_VAR$(7,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16090 IF _CHG_VAR$(8,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16100 IF _CHG_VAR$(9,1)="Y" THEN CHECK_REF$=_CUR.CHECK_REF$
16110 IF _CHG_VAR$(10,1)="Y" THEN INV_NUM$=_CUR.INV_NUM$
16120 IF _CHG_VAR$(11,1)="Y" THEN CUST_NAME$=_CUR.CUST_NAME$
16130 IF _CHG_VAR$(12,1)="Y" THEN ON_HOLD_REASON$=_CUR.ON_HOLD_REASON$
16140 IF _CHG_VAR$(13,1)="Y" THEN GL_ACCT$=_CUR.GL_ACCT$
16150 IF _CHG_VAR$(14,1)="Y" THEN INV_SUMMARY_BILL$=_CUR.INV_SUMMARY_BILL$
16160 IF _CHG_VAR$(15,1)="Y" THEN CR0_UNUSED_1$=_CUR.CR0_UNUSED_1$
16170 IF _CHG_VAR$(16,1)="Y" THEN TOTAL_APPLIED=_CUR.TOTAL_APPLIED
16180 IF _CHG_VAR$(17,1)="Y" THEN DISC_ALLOWED=_CUR.DISC_ALLOWED
16190 IF _CHG_VAR$(18,1)="Y" THEN FRT_ALLOWED=_CUR.FRT_ALLOWED
16200 IF _CHG_VAR$(19,1)="Y" THEN STAX_ALLOWED=_CUR.STAX_ALLOWED
16210 IF _CHG_VAR$(20,1)="Y" THEN CASH_POSTED=_CUR.CASH_POSTED
16220 IF _CHG_VAR$(21,1)="Y" THEN GL_ADJ=_CUR.GL_ADJ
16230 IF _CHG_VAR$(22,1)="Y" THEN CR0_UNUSED_2=_CUR.CR0_UNUSED_2
16240 IF _CHG_VAR$(23,1)="Y" THEN CR0_UNUSED_3=_CUR.CR0_UNUSED_3
16250 IF _CHG_VAR$(24,1)="Y" THEN CUST_PO$=_CUR.CUST_PO$
16990 RETURN 
56000 REM "240628-Cash Receipts Gateway GUI - GCR, U1                         
56002 REM "260723-Import Module/Cash Receipts GW/CIG Plus; Allow selection of 
56003 REM "307408-DBD-267;Enhance CR GW and other for Pre-Payments            
