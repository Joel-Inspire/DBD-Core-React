0010 ! OSGTSF - Import United files onto TopForm Server
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Aug. 16, 2002 11:44
0030 ! ************************************************************************
0035 REM "5.5 - 10/18/07 - 11.703333 - jdf - SSP# 211380
0037 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
0040 REM "Copyright 2007 Demandbridge Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "OSGTSF","../OSG/OS.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0154 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; DIM Z[NUM(X3$(60,3))]
0155 Z$="13O ZZPARM "
0156 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
0175 DIM TSF_PARM$(500) ! (1,100)=file to copy from, (101,100)=directory on TopForm Server
0176 IOLIST OSP$,OSP[0],OSP[1],OSP[2],OSP[3],OSP[4],OSP[5],OSP[6],OSP[7],OSP[8],OSP[9]
0180 FIND (Z[13],KEY=X3$(9,3)+"OSGTSF",DOM=*NEXT)TSF_PARM$(1)
0181 DIM OSP[9]; FIND (Z[13],KEY=X3$(9,3)+"OSP",DOM=*NEXT)IOL=0176
0185 IF NUL(TSF_PARM$(101,100)) THEN GOSUB SET_COPY_TO
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_SOURCE_FILE$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 COPY_FROM$=TSF_PARM$(1,100),COPY_TO$=TSF_PARM$(101,100); REFRESH_FLG=1
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0915 TSF_PARM$(1,100)=COPY_FROM$,TSF_PARM$(101,100)=COPY_TO$
0920 WRITE (Z[13],KEY=X3$(9,3)+"OSGTSF")TSF_PARM$
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0962 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
0970 RETURN 
1600 TRANSFER_FILE:! Transfer SOURCE_FILE$ to DEST_FILE$
1605 FILE_TRANSFERRED=0
1610 OPEN_FILE:IF NUL(SOURCE_FILE$) THEN MSGBOX MSG("OSGTSF_09"),MSG("MB_ATTN"),"!"; GOTO TRANSFER_FILE_END ELSE FILE_SRC=HFN; OPEN INPUT (FILE_SRC,ISZ=8000,ERR=FILE_ERR)SOURCE_FILE$
1615 ! Determine if BIG_FILE, in which case we will give a progress bar or not, we will not determine the exact file size, only if it is bigger or smaller than about 100K bytes (+/- 10000 bytes)
1620 BIG_FILE=0; READ (FILE_SRC,IND=5,ERR=*NEXT); BIG_FILE=1
1621 BIG_FILE=1
1625 ! Get name of the actual file with preceding directories
1630 IF BIG_FILE THEN PRINT 'DIALOGUE'(30,10,35,5,MSG("OSGTSF_10",SOURCE_FILE$),'CS'+'_WHITE'+'BLACK'),'SF',@(1,0),'CS',MSG("OSGTSF_11"); CALL "$CTL-10;PB_CREATE"; WAIT 1
1632 CH=HFN; OPEN (CH,ERR=1635)DEST_FILE$; CLOSE (CH); MSGBOX MSG("OSGTSF_14"),MSG("MB_ATTN"),"YESNO,!",ANS$; IF ANS$<>"YES" THEN CLOSE (FILE_SRC); GOTO TRANSFER_FILE_END
1635 ERASE DEST_FILE$,ERR=*PROCEED; SERIAL DEST_FILE$,ERR=*NEXT; GOTO OPEN_DEST
1636 IF ERR=12 AND UCS(MID(DEST_FILE$,1,5))<>"[WDX]" THEN DEST_DIR$=MID(DEST_FILE$,1,POS(DLM=DEST_FILE$,1,POS(DLM=DEST_FILE$,1,0))); INVOKE "mkdir -p "+DEST_DIR$+" >/dev/null"; SERIAL DEST_FILE$,ERR=*NEXT ! try to create needed directories
1640 OPEN_DEST: FILE_DEST=HFN; OPEN PURGE (FILE_DEST,ISZ=1,ERR=*NEXT)DEST_FILE$; GOTO 1642
1641 OPEN (FILE_DEST,ISZ=1,ERR=FINISH_TRANSFER)DEST_FILE$
1645 COPY_DONE=0,VALUE=0,COPY_INDEX=0
1650 IF BIG_FILE THEN REPEAT ; READ RECORD (FILE_SRC,IND=COPY_INDEX++,END=*BREAK)IMG$; VALUE+=5; CALL "$CTL-10;PB_VALUE",VALUE; WRITE RECORD (FILE_DEST,SIZ=LEN(IMG$))IMG$; UNTIL COPY_DONE ELSE REPEAT ; READ RECORD (FILE_SRC,IND=COPY_INDEX++,END=*BREAK)IMG$; WRITE RECORD (FILE_DEST,SIZ=LEN(IMG$))IMG$; UNTIL COPY_DONE
1655 FINISH_TRANSFER:CLOSE (FILE_DEST); CLOSE (FILE_SRC)
1660 REM "ERASE SOURCE_FILE$,ERR=*NEXT ! erase the file
1665 FILE_TRANSFERRED=1
1685 TRANSFER_FILE_END:
1686 IF BIG_FILE THEN CALL "$CTL-10;PB_DEL",ERR=*PROCEED; PRINT (0,ERR=*PROCEED)'POP',
1687 IF FILE_TRANSFERRED THEN MSGBOX MSG("OSGTSF_13"),MSG("MB_ATTN"); FILE_TRANSFERRED=0
1690 RETURN 
1697 FILE_ERR:IF --ATTEMPTS>0 THEN WAIT SECS; GOTO OPEN_FILE ELSE MSGBOX MSG("OSGTSF_12",STR(ERR),SUB(SOURCE_FILE$,"[wdx]",""),"source"),MSG("MB_ATTN"),"!"; GOTO TRANSFER_FILE_END
1698 TEMP_FILE_ERR: MSGBOX MSG("OSGTSF_12",STR(ERR),DEST_FILE$,"destination"),MSG("MB_ATTN"),"!"; GOTO TRANSFER_FILE_END
1699 ! ************************************************************
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
35000 SET_COPY_TO:! Set the copy to directory, try TopForm Central directory first, if not found default to normal TopForm Dir
35005 REM "TMP$="/data/tf"+X3$(9,3)+"/ship_in"
35006 TMP$=STP(OSP$(68,30),3)
35010 PATH$="/usr/lib/pvx/import"
35015 TMP_CH=HFN; OPEN (TMP_CH,ERR=*NEXT)TMP$; CLOSE (TMP_CH); PATH$=TMP$
35070 TSF_PARM$(101,100)=PATH$
35095 RETURN 
35099 ! ***************************************************************
35200 BROWSE_FOR_FILE:! Browse for the file name (remove [wdx] if on name)
35220 CALL "[WDX]*OCX;GET_FILE_BOX","READ",TEMP_PATH$,START_DIR$,MSG("OSGTSF_06"),MSG("OSGTSF_07"),MSG("OSGTSF_08")
35280 COPY_FROM$=TEMP_PATH$,REFRESH_FLG=1
35295 RETURN 
35299 ! ************************************************************
35300 IMPORT_FILE:! Import the file
35305 SOURCE_FILE$="[wdx]"+STP(COPY_FROM$)
35310 TMP=POS("\"=SOURCE_FILE$,-1); IF TMP=0 THEN TF_NAME$=SUB(SOURCE_FILE$,"[wdx]","") ELSE TF_NAME$=MID(SOURCE_FILE$,TMP+1)
35315 DEST_FILE$=STP(COPY_TO$); IF MID(DEST_FILE$,LEN(DEST_FILE$),1)<>DLM THEN DEST_FILE$+=DLM
35320 DEST_FILE$+=TF_NAME$
35325 GOSUB TRANSFER_FILE
35395 RETURN 
35399 ! ***************************************************************
56000 REM "192936-Create a new TOPS program to allow Tops Clients to copy   
56002 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
