0010 ! QSGDAB - Quotation/Estimate Price Detail (="QSB"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Sep. 10, 2001 15:22
0030 ! ************************************************************************
0035 REM "5.5 - 10/18/07 - 11.651388 - jdf - SSP# 211380
0037 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
0040 REM "Copyright 2007 Demandbridge Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="QSB"+%C$
0170 _FIL_NO_QSB=HFN; OPEN (_FIL_NO_QSB,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN_QSB=HFN; OPEN (_CUR_FN_QSB,IOL=*,REC=_CUR_B$)_FILE_NAME$
0185 _QSB=HFN; OPEN (_QSB,IOL=*,REC=_LINE$)_FILE_NAME$
0186 _FILE_NAME$="QSC"+%C$,_FIL_NO_QSC=HFN; OPEN (_FIL_NO_QSC,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0187 _CUR_FN_QSC=HFN; OPEN (_CUR_FN_QSC,IOL=*,REC=_CUR_C$)"QSC"+%C$
0188 _FILE_NAME$="QSD"+%C$,_QSD=HFN; OPEN (_QSD,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0189 _FILE_NAME$="ZZPARM",_ZZPARM=HFN; OPEN (_ZZPARM,ERR=OPEN_ERR)_FILE_NAME$
0190 _FMP=HFN; OPEN (_FMP)"FMP"+%C$
0192 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=2
0430 DIM _KEYS$[1:2]; _KEYS$[1]="QUOTE$",_KEYS$[2]="QUOTE_LINE_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 READ DATA FROM ARG_1$ TO QUOTE_DIV$,QUOTE_NUM$,QUOTE_LINE_NUM$
0536 QUOTE$=QUOTE_DIV$+QUOTE_NUM$,ARG_1$=QUOTE_DIV$+QUOTE_NUM$+QUOTE_LINE_NUM$
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO_QSB,KEY=_KEY$,DOM=ADD_LINE,ERR=NEXT_REC)
0551 READ (_FIL_NO_QSC,KEY=_KEY$,ERR=*NEXT)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0700 ! 700 - Set up tabbing between folders
0710 INIT_FOLDER:
0720 GOSUB ENABLE_GROUPS
0730 IF _ENABLE_FLG<>_KEY1 THEN IF TAB_FLG$="<" THEN NEXT_ID=_LAST_TAB ELSE NEXT_ID=_FIRST_TAB
0740 EXIT 
0900 ! 900 - Wrapup
0910 WRAPUP:
0911 READ DATA FROM "" TO IOL=GLOBAL_IOL
0920 ARG_1$=KEC(_FIL_NO_QSB,ERR=*NEXT)
0930 IF _FIL_NO_QSB<>0 THEN CLOSE (_FIL_NO_QSB); _FIL_NO_QSB=0
0940 IF _CUR_FN_QSB<>0 THEN CLOSE (_CUR_FN_QSB); _CUR_FN_QSB=0
0941 IF _FIL_NO_QSC<>0 THEN CLOSE (_FIL_NO_QSC); _FIL_NO_QSC=0
0942 IF _CUR_FN_QSC<>0 THEN CLOSE (_CUR_FN_QSC); _CUR_FN_QSC=0
0943 IF _QSB<>0 THEN CLOSE (_QSB); _QSB=0
0944 IF _QSD<>0 THEN CLOSE (_QSD); _QSD=0
0945 IF _ZZPARM<>0 THEN CLOSE (_ZZPARM); _ZZPARM=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;PARSE_QUOTE",QUOTE$,QUOTE_DIV$,QUOTE_NUM$
1050 READ DATA FROM REC(IOL(_FIL_NO_QSB:KEY,ERR=*NEXT)) TO _KEY$
1055 CALL "ZZWLKU;PARSE_QUOTE",QUOTE$,QUOTE_DIV$,QUOTE_NUM$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO_QSB,KEY=_KEY$,DOM=ADD_LINE,ERR=CHK_ERR_NXT)
1071 READ (_FIL_NO_QSC,KEY=_KEY$,DOM=*NEXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1280 NEXT_FOLDER=_FIRST_FOLDER
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1471 NEXT_ID=BTN_ADD.CTL
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO_QSB:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO_QSB,KEY=_KEY$,ERR=NO_SUCH)
1661 REMOVE (_FIL_NO_QSC,KEY=_KEY$,ERR=*NEXT)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO_QSB,END=END_OF_FILE)
2060 READ (_FIL_NO_QSB,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO_QSB,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO_QSB,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO_QSB,END=START_OF_FILE); READ (_FIL_NO_QSB,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO_QSB,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO_QSB,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO_QSB,ERR=NO_FIRST)
2450 READ (_FIL_NO_QSB,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO_QSB,ERR=NO_LAST)
2650 READ (_FIL_NO_QSB,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO_QSB:KEY,ERR=*NEXT) ! load fields from external key
3031 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO_QSC:KEY,ERR=*NEXT) ! load fields from external key
3032 DISPLAY_QTY=QUOTED_QTY
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO_QSB,ERR=*NEXT)),REC=_ORIG_B$ TO IOL=IOL(_FIL_NO_QSB) ! Save record for review
3051 READ DATA FROM REC(IOL(_FIL_NO_QSC,ERR=*NEXT)),REC=_ORIG_C$ TO IOL=IOL(_FIL_NO_QSC) ! Save record for review
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3211 PERFORM "QSGDAC;REVIEW_WRITE"
3220 _CHG1_B$="",_CHG2_B$=""
3230 READ (_CUR_FN_QSB,KEY=KEC(_FIL_NO_QSB,ERR=WRT),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1_B$="" AND _CHG2_B$="" AND _CHG1_C$="" AND _CHG2_C$="" THEN GOTO WRT
3260 IF _CHG1_B$="" AND _CHG1_C$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1_B$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2_B$="" AND _CHG2_C$="" THEN GOTO WRT
3300 CHK2:IF _CHG2_B$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2_B$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO_QSB,KEY=_KEY$,ERR=WRITE_ERROR)
3331 WRITE (_FIL_NO_QSC,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO_QSB,ERR=*NEXT)),REC=_ORIG_B$ TO IOL=IOL(_FIL_NO_QSB) ! Save record for review
3341 READ DATA FROM REC(IOL(_FIL_NO_QSC,ERR=*NEXT)),REC=_ORIG_C$ TO IOL=IOL(_FIL_NO_QSC) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3512 GOSUB GET_SELL_UM
3513 GOSUB GET_COST_UM
3514 GOSUB CALC_GROSS
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=QUOTE.CTL,_FIRST_FIELD=CUSTOM_ITEM.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 SELL_QTY_PER$=STR(SELL_QTY_PER)
10030 QUOTED_QTY$=STR(QUOTED_QTY)
10040 SELL_BREAK_1$=STR(SELL_BREAK_1)
10050 SELL_BREAK_2$=STR(SELL_BREAK_2)
10060 SELL_BREAK_3$=STR(SELL_BREAK_3)
10070 SELL_BREAK_4$=STR(SELL_BREAK_4)
10080 SELL_BREAK_5$=STR(SELL_BREAK_5)
10090 DESIRED_GP_1$=STR(DESIRED_GP_1)
10100 DESIRED_GP_2$=STR(DESIRED_GP_2)
10110 DESIRED_GP_3$=STR(DESIRED_GP_3)
10120 DESIRED_GP_4$=STR(DESIRED_GP_4)
10130 DESIRED_GP_5$=STR(DESIRED_GP_5)
10140 SELL_PRICE_1$=STR(SELL_PRICE_1)
10150 SELL_PRICE_2$=STR(SELL_PRICE_2)
10160 SELL_PRICE_3$=STR(SELL_PRICE_3)
10170 SELL_PRICE_4$=STR(SELL_PRICE_4)
10180 SELL_PRICE_5$=STR(SELL_PRICE_5)
10190 QUOTED_PRICE$=STR(QUOTED_PRICE)
10191 SELL_EXT$=STR(SELL_EXT)
10210 CALC_COST_1$=STR(CALC_COST_1)
10220 CALC_COST_2$=STR(CALC_COST_2)
10230 CALC_COST_3$=STR(CALC_COST_3)
10240 CALC_COST_4$=STR(CALC_COST_4)
10250 CALC_COST_5$=STR(CALC_COST_5)
10260 CTN_PACK$=STR(CTN_PACK)
10270 PERFORM "QSGDAC;NUM_TO_STR"
10280 GP_AMT$=STR(GP_AMT)
10285 GP_PCT$=STR(GP_PCT)
10290 TOTAL_GP_1$=STR(TOTAL_GP_1)
10295 TOTAL_GP_2$=STR(TOTAL_GP_2)
10297 TOTAL_GP_3$=STR(TOTAL_GP_3)
10298 TOTAL_GP_4$=STR(TOTAL_GP_4)
10300 TOTAL_GP_5$=STR(TOTAL_GP_5)
10305 DISPLAY_QTY$=STR(DISPLAY_QTY)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="SELL_QTY_PER",_X=SELL_QTY_PER.CTL,SELL_QTY_PER=NUM(SELL_QTY_PER$,ERR=NON_NUMERIC)
11030 _X$="QUOTED_QTY",_X=QUOTED_QTY.CTL,QUOTED_QTY=NUM(QUOTED_QTY$,ERR=NON_NUMERIC)
11040 _X$="SELL_BREAK_1",_X=SELL_BREAK_1.CTL,SELL_BREAK_1=NUM(SELL_BREAK_1$,ERR=NON_NUMERIC)
11050 _X$="SELL_BREAK_2",_X=SELL_BREAK_2.CTL,SELL_BREAK_2=NUM(SELL_BREAK_2$,ERR=NON_NUMERIC)
11060 _X$="SELL_BREAK_3",_X=SELL_BREAK_3.CTL,SELL_BREAK_3=NUM(SELL_BREAK_3$,ERR=NON_NUMERIC)
11070 _X$="SELL_BREAK_4",_X=SELL_BREAK_4.CTL,SELL_BREAK_4=NUM(SELL_BREAK_4$,ERR=NON_NUMERIC)
11080 _X$="SELL_BREAK_5",_X=SELL_BREAK_5.CTL,SELL_BREAK_5=NUM(SELL_BREAK_5$,ERR=NON_NUMERIC)
11090 _X$="DESIRED_GP_1",_X=DESIRED_GP_1.CTL,DESIRED_GP_1=NUM(DESIRED_GP_1$,ERR=NON_NUMERIC)
11100 _X$="DESIRED_GP_2",_X=DESIRED_GP_2.CTL,DESIRED_GP_2=NUM(DESIRED_GP_2$,ERR=NON_NUMERIC)
11110 _X$="DESIRED_GP_3",_X=DESIRED_GP_3.CTL,DESIRED_GP_3=NUM(DESIRED_GP_3$,ERR=NON_NUMERIC)
11120 _X$="DESIRED_GP_4",_X=DESIRED_GP_4.CTL,DESIRED_GP_4=NUM(DESIRED_GP_4$,ERR=NON_NUMERIC)
11130 _X$="DESIRED_GP_5",_X=DESIRED_GP_5.CTL,DESIRED_GP_5=NUM(DESIRED_GP_5$,ERR=NON_NUMERIC)
11140 _X$="SELL_PRICE_1",_X=SELL_PRICE_1.CTL,SELL_PRICE_1=NUM(SELL_PRICE_1$,ERR=NON_NUMERIC)
11150 _X$="SELL_PRICE_2",_X=SELL_PRICE_2.CTL,SELL_PRICE_2=NUM(SELL_PRICE_2$,ERR=NON_NUMERIC)
11160 _X$="SELL_PRICE_3",_X=SELL_PRICE_3.CTL,SELL_PRICE_3=NUM(SELL_PRICE_3$,ERR=NON_NUMERIC)
11170 _X$="SELL_PRICE_4",_X=SELL_PRICE_4.CTL,SELL_PRICE_4=NUM(SELL_PRICE_4$,ERR=NON_NUMERIC)
11180 _X$="SELL_PRICE_5",_X=SELL_PRICE_5.CTL,SELL_PRICE_5=NUM(SELL_PRICE_5$,ERR=NON_NUMERIC)
11190 _X$="QUOTED_PRICE",_X=QUOTED_PRICE.CTL,QUOTED_PRICE=NUM(QUOTED_PRICE$,ERR=NON_NUMERIC)
11200 _X$="SELL_EXT",_X=SELL_EXT.CTL,SELL_EXT=NUM(SELL_EXT$,ERR=NON_NUMERIC)
11210 _X$="CALC_COST_1",_X=CALC_COST_1.CTL,CALC_COST_1=NUM(CALC_COST_1$,ERR=NON_NUMERIC)
11220 _X$="CALC_COST_2",_X=CALC_COST_2.CTL,CALC_COST_2=NUM(CALC_COST_2$,ERR=NON_NUMERIC)
11230 _X$="CALC_COST_3",_X=CALC_COST_3.CTL,CALC_COST_3=NUM(CALC_COST_3$,ERR=NON_NUMERIC)
11240 _X$="CALC_COST_4",_X=CALC_COST_4.CTL,CALC_COST_4=NUM(CALC_COST_4$,ERR=NON_NUMERIC)
11250 _X$="CALC_COST_5",_X=CALC_COST_5.CTL,CALC_COST_5=NUM(CALC_COST_5$,ERR=NON_NUMERIC)
11260 _X$="CTN_PACK",_X=CTN_PACK.CTL,CTN_PACK=NUM(CTN_PACK$,ERR=NON_NUMERIC)
11270 PERFORM "QSGDAC;STR_TO_NUM"
11280 _X$="GP_AMT",_X=GP_AMT.CTL,GP_AMT=NUM(GP_AMT$,ERR=NON_NUMERIC)
11290 _X$="GP_PCT",_X=GP_PCT.CTL,GP_PCT=NUM(GP_PCT$,ERR=NON_NUMERIC)
11300 _X$="TOTAL_GP_1",_X=TOTAL_GP_1.CTL,TOTAL_GP_1=NUM(TOTAL_GP_1$,ERR=NON_NUMERIC)
11310 _X$="TOTAL_GP_2",_X=TOTAL_GP_2.CTL,TOTAL_GP_2=NUM(TOTAL_GP_2$,ERR=NON_NUMERIC)
11320 _X$="TOTAL_GP_3",_X=TOTAL_GP_3.CTL,TOTAL_GP_3=NUM(TOTAL_GP_3$,ERR=NON_NUMERIC)
11330 _X$="TOTAL_GP_4",_X=TOTAL_GP_4.CTL,TOTAL_GP_4=NUM(TOTAL_GP_4$,ERR=NON_NUMERIC)
11335 _X$="TOTAL_GP_5",_X=TOTAL_GP_5.CTL,TOTAL_GP_5=NUM(TOTAL_GP_5$,ERR=NON_NUMERIC)
11340 _X$="DISPLAY_QTY",_X=DISPLAY_QTY.CTL,DISPLAY_QTY=NUM(DISPLAY_QTY$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13001 GLOBAL_IOL:IOLIST %VEND_COL,%ITEM_CODE$
13010 CLEAR_FIELDS:
13011 READ DATA FROM "" TO IOL=GLOBAL_IOL
13020 QSB_UNUSED_1$=""
13030 IF _CLR_FLG$="R" THEN QUOTE_LINE_NUM$=""
13040 LINE_TYPE$=""
13050 ITEM_CODE$=""
13060 PROD_CODE$=""
13070 LEFT_RIGHT$=""
13080 TOP_BOTTOM$=""
13090 PLYS$=""
13100 ITEM_DESC$=""
13110 QSB_UNUSED_3$=""
13120 QSB_UNUSED_4$=""
13130 QSB_UNUSED_5$=""
13140 SELL_UM$=""
13150 ! CUSTOM_ITEM$=""
13160 QSB_UNUSED_6$=""
13170 FIXED_PRICE$=""
13180 QSB_UNUSED_7$=""
13190 QSB_UNUSED_8$=""
13200 QSB_UNUSED_9$=""
13210 QSB_UNUSED_10$=""
13220 IF _CLR_FLG$="R" THEN QUOTE_DIV$=""
13230 IF _CLR_FLG$="R" THEN QUOTE_NUM$=""
13240 QSB_UNUSED_2$=""
13250 SELL_QTY_PER=0
13260 QUOTED_QTY=0
13270 SELL_BREAK_1=0
13280 SELL_BREAK_2=0
13290 SELL_BREAK_3=0
13300 SELL_BREAK_4=0
13310 SELL_BREAK_5=0
13320 DESIRED_GP_1=0
13330 DESIRED_GP_2=0
13340 DESIRED_GP_3=0
13350 DESIRED_GP_4=0
13360 DESIRED_GP_5=0
13370 SELL_PRICE_1=0
13380 SELL_PRICE_2=0
13390 SELL_PRICE_3=0
13400 SELL_PRICE_4=0
13410 SELL_PRICE_5=0
13420 QUOTED_PRICE=0
13430 SELL_EXT=0
13440 CALC_COST_1=0
13450 CALC_COST_2=0
13460 CALC_COST_3=0
13470 CALC_COST_4=0
13480 CALC_COST_5=0
13490 CTN_PACK=0
13500 PERFORM "QSGDAC;CLEAR_FIELDS"
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; ELSE CALL "*wingrp;Disable",KEY3.GRP$
14043 IF QUOTE_LINE_NUM$="001" THEN CALL "*wingrp;Show",CUSTOM.GRP$ ELSE CALL "*wingrp;Hide",CUSTOM.GRP$
14046 IF QUOTE_LINE_NUM$<>"001" THEN CALL "*wingrp;Show",NON_CUSTOM.GRP$ ELSE CALL "*wingrp;Hide",NON_CUSTOM.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$; CALL "*wingrp;Disable",CUSTOM.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$; CALL "*wingrp;Enable",CUSTOM.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR_B$(48,"N")
15030 IF _ORIG_B.QSB_UNUSED_1$=_CUR_B.QSB_UNUSED_1$ OR QSB_UNUSED_1$=_CUR_B.QSB_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG_B.QSB_UNUSED_1$=QSB_UNUSED_1$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("UNUSED")+" = "+_CUR_B.QSB_UNUSED_1$,_CHG_VAR_B$(1,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("UNUSED")+" = "+_CUR_B.QSB_UNUSED_1$
15040 IF _ORIG_B.QUOTE_LINE_NUM$=_CUR_B.QUOTE_LINE_NUM$ OR QUOTE_LINE_NUM$=_CUR_B.QUOTE_LINE_NUM$ THEN GOTO *NEXT ELSE IF _ORIG_B.QUOTE_LINE_NUM$=QUOTE_LINE_NUM$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("QUOT_L_N")+" = "+_CUR_B.QUOTE_LINE_NUM$,_CHG_VAR_B$(2,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("QUOT_L_N")+" = "+_CUR_B.QUOTE_LINE_NUM$
15050 IF _ORIG_B.LINE_TYPE$=_CUR_B.LINE_TYPE$ OR LINE_TYPE$=_CUR_B.LINE_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG_B.LINE_TYPE$=LINE_TYPE$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("LINE_TYPE")+" = "+_CUR_B.LINE_TYPE$,_CHG_VAR_B$(3,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("LINE_TYPE")+" = "+_CUR_B.LINE_TYPE$
15060 IF _ORIG_B.ITEM_CODE$=_CUR_B.ITEM_CODE$ OR ITEM_CODE$=_CUR_B.ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG_B.ITEM_CODE$=ITEM_CODE$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("ITEM_CODE")+" = "+_CUR_B.ITEM_CODE$,_CHG_VAR_B$(4,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("ITEM_CODE")+" = "+_CUR_B.ITEM_CODE$
15070 IF _ORIG_B.PROD_CODE$=_CUR_B.PROD_CODE$ OR PROD_CODE$=_CUR_B.PROD_CODE$ THEN GOTO *NEXT ELSE IF _ORIG_B.PROD_CODE$=PROD_CODE$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("PROD_CODE")+" = "+_CUR_B.PROD_CODE$,_CHG_VAR_B$(5,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("PROD_CODE")+" = "+_CUR_B.PROD_CODE$
15080 IF _ORIG_B.LEFT_RIGHT$=_CUR_B.LEFT_RIGHT$ OR LEFT_RIGHT$=_CUR_B.LEFT_RIGHT$ THEN GOTO *NEXT ELSE IF _ORIG_B.LEFT_RIGHT$=LEFT_RIGHT$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("LEFT_RIGHT")+" = "+_CUR_B.LEFT_RIGHT$,_CHG_VAR_B$(6,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("LEFT_RIGHT")+" = "+_CUR_B.LEFT_RIGHT$
15090 IF _ORIG_B.TOP_BOTTOM$=_CUR_B.TOP_BOTTOM$ OR TOP_BOTTOM$=_CUR_B.TOP_BOTTOM$ THEN GOTO *NEXT ELSE IF _ORIG_B.TOP_BOTTOM$=TOP_BOTTOM$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("TOP_BOTTOM")+" = "+_CUR_B.TOP_BOTTOM$,_CHG_VAR_B$(7,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("TOP_BOTTOM")+" = "+_CUR_B.TOP_BOTTOM$
15100 IF _ORIG_B.PLYS$=_CUR_B.PLYS$ OR PLYS$=_CUR_B.PLYS$ THEN GOTO *NEXT ELSE IF _ORIG_B.PLYS$=PLYS$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("PLYS")+" = "+_CUR_B.PLYS$,_CHG_VAR_B$(8,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("PLYS")+" = "+_CUR_B.PLYS$
15110 IF _ORIG_B.ITEM_DESC$=_CUR_B.ITEM_DESC$ OR ITEM_DESC$=_CUR_B.ITEM_DESC$ THEN GOTO *NEXT ELSE IF _ORIG_B.ITEM_DESC$=ITEM_DESC$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("ITEM_DESC")+" = "+_CUR_B.ITEM_DESC$,_CHG_VAR_B$(9,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("ITEM_DESC")+" = "+_CUR_B.ITEM_DESC$
15120 IF _ORIG_B.QSB_UNUSED_3$=_CUR_B.QSB_UNUSED_3$ OR QSB_UNUSED_3$=_CUR_B.QSB_UNUSED_3$ THEN GOTO *NEXT ELSE IF _ORIG_B.QSB_UNUSED_3$=QSB_UNUSED_3$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("UNUSED")+" = "+_CUR_B.QSB_UNUSED_3$,_CHG_VAR_B$(10,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("UNUSED")+" = "+_CUR_B.QSB_UNUSED_3$
15130 IF _ORIG_B.QSB_UNUSED_4$=_CUR_B.QSB_UNUSED_4$ OR QSB_UNUSED_4$=_CUR_B.QSB_UNUSED_4$ THEN GOTO *NEXT ELSE IF _ORIG_B.QSB_UNUSED_4$=QSB_UNUSED_4$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("UNUSED")+" = "+_CUR_B.QSB_UNUSED_4$,_CHG_VAR_B$(11,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("UNUSED")+" = "+_CUR_B.QSB_UNUSED_4$
15140 IF _ORIG_B.QSB_UNUSED_5$=_CUR_B.QSB_UNUSED_5$ OR QSB_UNUSED_5$=_CUR_B.QSB_UNUSED_5$ THEN GOTO *NEXT ELSE IF _ORIG_B.QSB_UNUSED_5$=QSB_UNUSED_5$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("UNUSED")+" = "+_CUR_B.QSB_UNUSED_5$,_CHG_VAR_B$(12,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("UNUSED")+" = "+_CUR_B.QSB_UNUSED_5$
15150 IF _ORIG_B.SELL_UM$=_CUR_B.SELL_UM$ OR SELL_UM$=_CUR_B.SELL_UM$ THEN GOTO *NEXT ELSE IF _ORIG_B.SELL_UM$=SELL_UM$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("SELL_UM")+" = "+_CUR_B.SELL_UM$,_CHG_VAR_B$(13,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("SELL_UM")+" = "+_CUR_B.SELL_UM$
15160 IF _ORIG_B.CUSTOM_ITEM$=_CUR_B.CUSTOM_ITEM$ OR CUSTOM_ITEM$=_CUR_B.CUSTOM_ITEM$ THEN GOTO *NEXT ELSE IF _ORIG_B.CUSTOM_ITEM$=CUSTOM_ITEM$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("CUST_I")+" = "+_CUR_B.CUSTOM_ITEM$,_CHG_VAR_B$(14,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("CUST_I")+" = "+_CUR_B.CUSTOM_ITEM$
15170 IF _ORIG_B.QSB_UNUSED_6$=_CUR_B.QSB_UNUSED_6$ OR QSB_UNUSED_6$=_CUR_B.QSB_UNUSED_6$ THEN GOTO *NEXT ELSE IF _ORIG_B.QSB_UNUSED_6$=QSB_UNUSED_6$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("CALC_S_P")+" = "+_CUR_B.QSB_UNUSED_6$,_CHG_VAR_B$(15,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("CALC_S_P")+" = "+_CUR_B.QSB_UNUSED_6$
15180 IF _ORIG_B.FIXED_PRICE$=_CUR_B.FIXED_PRICE$ OR FIXED_PRICE$=_CUR_B.FIXED_PRICE$ THEN GOTO *NEXT ELSE IF _ORIG_B.FIXED_PRICE$=FIXED_PRICE$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("FIXE_P")+" = "+_CUR_B.FIXED_PRICE$,_CHG_VAR_B$(16,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("FIXE_P")+" = "+_CUR_B.FIXED_PRICE$
15190 IF _ORIG_B.QSB_UNUSED_7$=_CUR_B.QSB_UNUSED_7$ OR QSB_UNUSED_7$=_CUR_B.QSB_UNUSED_7$ THEN GOTO *NEXT ELSE IF _ORIG_B.QSB_UNUSED_7$=QSB_UNUSED_7$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("PLAN_Q_N")+" = "+_CUR_B.QSB_UNUSED_7$,_CHG_VAR_B$(17,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("PLAN_Q_N")+" = "+_CUR_B.QSB_UNUSED_7$
15200 IF _ORIG_B.QSB_UNUSED_8$=_CUR_B.QSB_UNUSED_8$ OR QSB_UNUSED_8$=_CUR_B.QSB_UNUSED_8$ THEN GOTO *NEXT ELSE IF _ORIG_B.QSB_UNUSED_8$=QSB_UNUSED_8$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("QUOT_CONT")+" = "+_CUR_B.QSB_UNUSED_8$,_CHG_VAR_B$(18,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("QUOT_CONT")+" = "+_CUR_B.QSB_UNUSED_8$
15210 IF _ORIG_B.QSB_UNUSED_9$=_CUR_B.QSB_UNUSED_9$ OR QSB_UNUSED_9$=_CUR_B.QSB_UNUSED_9$ THEN GOTO *NEXT ELSE IF _ORIG_B.QSB_UNUSED_9$=QSB_UNUSED_9$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("QUOTE_DATE")+" = "+_CUR_B.QSB_UNUSED_9$,_CHG_VAR_B$(19,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("QUOTE_DATE")+" = "+_CUR_B.QSB_UNUSED_9$
15220 IF _ORIG_B.QSB_UNUSED_10$=_CUR_B.QSB_UNUSED_10$ OR QSB_UNUSED_10$=_CUR_B.QSB_UNUSED_10$ THEN GOTO *NEXT ELSE IF _ORIG_B.QSB_UNUSED_10$=QSB_UNUSED_10$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("UNUSED")+" = "+_CUR_B.QSB_UNUSED_10$,_CHG_VAR_B$(20,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("UNUSED")+" = "+_CUR_B.QSB_UNUSED_10$
15230 IF _ORIG_B.QUOTE_DIV$=_CUR_B.QUOTE_DIV$ OR QUOTE_DIV$=_CUR_B.QUOTE_DIV$ THEN GOTO *NEXT ELSE IF _ORIG_B.QUOTE_DIV$=QUOTE_DIV$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("QUOTE_DIV")+" = "+_CUR_B.QUOTE_DIV$,_CHG_VAR_B$(21,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("QUOTE_DIV")+" = "+_CUR_B.QUOTE_DIV$
15240 IF _ORIG_B.QUOTE_NUM$=_CUR_B.QUOTE_NUM$ OR QUOTE_NUM$=_CUR_B.QUOTE_NUM$ THEN GOTO *NEXT ELSE IF _ORIG_B.QUOTE_NUM$=QUOTE_NUM$ THEN _CHG2_B$=_CHG2_B$+SEP+MSG("QUOTE_NUM")+" = "+_CUR_B.QUOTE_NUM$,_CHG_VAR_B$(22,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("QUOTE_NUM")+" = "+_CUR_B.QUOTE_NUM$
15250 ! IF _ORIG_B.QSB_UNUSED_2$=_CUR_B.QSB_UNUSED_2$ OR QSB_UNUSED_2$=_CUR_B.QSB_UNUSED_2$   THEN GOTO *NEXT   ELSE IF _ORIG_B.QSB_UNUSED_2$=QSB_UNUSED_2$         THEN _CHG2_B$=_CHG2_B$+SEP+MSG("UNUSED")+" = "+_CUR_B.QSB_UNUSED_2$,_CHG_VAR_B$(23,1)="Y"         ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("UNUSED")+" = "+_CUR_B.QSB_UNUSED_2$
15260 IF _ORIG_B.SELL_QTY_PER=_CUR_B.SELL_QTY_PER OR SELL_QTY_PER=_CUR_B.SELL_QTY_PER THEN GOTO *NEXT ELSE IF _ORIG_B.SELL_QTY_PER=SELL_QTY_PER THEN _CHG2_B$=_CHG2_B$+SEP+MSG("SELL_Q_P")+" = "+STR(_CUR_B.SELL_QTY_PER),_CHG_VAR_B$(24,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("SELL_Q_P")+" = "+STR(_CUR_B.SELL_QTY_PER)
15270 IF _ORIG_B.QUOTED_QTY=_CUR_B.QUOTED_QTY OR QUOTED_QTY=_CUR_B.QUOTED_QTY THEN GOTO *NEXT ELSE IF _ORIG_B.QUOTED_QTY=QUOTED_QTY THEN _CHG2_B$=_CHG2_B$+SEP+MSG("QUOTED_QTY")+" = "+STR(_CUR_B.QUOTED_QTY),_CHG_VAR_B$(25,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("QUOTED_QTY")+" = "+STR(_CUR_B.QUOTED_QTY)
15280 IF _ORIG_B.SELL_BREAK_1=_CUR_B.SELL_BREAK_1 OR SELL_BREAK_1=_CUR_B.SELL_BREAK_1 THEN GOTO *NEXT ELSE IF _ORIG_B.SELL_BREAK_1=SELL_BREAK_1 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("SELL_B_1")+" = "+STR(_CUR_B.SELL_BREAK_1),_CHG_VAR_B$(26,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("SELL_B_1")+" = "+STR(_CUR_B.SELL_BREAK_1)
15290 IF _ORIG_B.SELL_BREAK_2=_CUR_B.SELL_BREAK_2 OR SELL_BREAK_2=_CUR_B.SELL_BREAK_2 THEN GOTO *NEXT ELSE IF _ORIG_B.SELL_BREAK_2=SELL_BREAK_2 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("SELL_B_2")+" = "+STR(_CUR_B.SELL_BREAK_2),_CHG_VAR_B$(27,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("SELL_B_2")+" = "+STR(_CUR_B.SELL_BREAK_2)
15300 IF _ORIG_B.SELL_BREAK_3=_CUR_B.SELL_BREAK_3 OR SELL_BREAK_3=_CUR_B.SELL_BREAK_3 THEN GOTO *NEXT ELSE IF _ORIG_B.SELL_BREAK_3=SELL_BREAK_3 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("SELL_B_3")+" = "+STR(_CUR_B.SELL_BREAK_3),_CHG_VAR_B$(28,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("SELL_B_3")+" = "+STR(_CUR_B.SELL_BREAK_3)
15310 IF _ORIG_B.SELL_BREAK_4=_CUR_B.SELL_BREAK_4 OR SELL_BREAK_4=_CUR_B.SELL_BREAK_4 THEN GOTO *NEXT ELSE IF _ORIG_B.SELL_BREAK_4=SELL_BREAK_4 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("SELL_B_4")+" = "+STR(_CUR_B.SELL_BREAK_4),_CHG_VAR_B$(29,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("SELL_B_4")+" = "+STR(_CUR_B.SELL_BREAK_4)
15320 IF _ORIG_B.SELL_BREAK_5=_CUR_B.SELL_BREAK_5 OR SELL_BREAK_5=_CUR_B.SELL_BREAK_5 THEN GOTO *NEXT ELSE IF _ORIG_B.SELL_BREAK_5=SELL_BREAK_5 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("SELL_B_5")+" = "+STR(_CUR_B.SELL_BREAK_5),_CHG_VAR_B$(30,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("SELL_B_5")+" = "+STR(_CUR_B.SELL_BREAK_5)
15330 IF _ORIG_B.DESIRED_GP_1=_CUR_B.DESIRED_GP_1 OR DESIRED_GP_1=_CUR_B.DESIRED_GP_1 THEN GOTO *NEXT ELSE IF _ORIG_B.DESIRED_GP_1=DESIRED_GP_1 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("DESI_G_1")+" = "+STR(_CUR_B.DESIRED_GP_1),_CHG_VAR_B$(31,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("DESI_G_1")+" = "+STR(_CUR_B.DESIRED_GP_1)
15340 IF _ORIG_B.DESIRED_GP_2=_CUR_B.DESIRED_GP_2 OR DESIRED_GP_2=_CUR_B.DESIRED_GP_2 THEN GOTO *NEXT ELSE IF _ORIG_B.DESIRED_GP_2=DESIRED_GP_2 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("DESI_G_2")+" = "+STR(_CUR_B.DESIRED_GP_2),_CHG_VAR_B$(32,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("DESI_G_2")+" = "+STR(_CUR_B.DESIRED_GP_2)
15350 IF _ORIG_B.DESIRED_GP_3=_CUR_B.DESIRED_GP_3 OR DESIRED_GP_3=_CUR_B.DESIRED_GP_3 THEN GOTO *NEXT ELSE IF _ORIG_B.DESIRED_GP_3=DESIRED_GP_3 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("DESI_G_3")+" = "+STR(_CUR_B.DESIRED_GP_3),_CHG_VAR_B$(33,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("DESI_G_3")+" = "+STR(_CUR_B.DESIRED_GP_3)
15360 IF _ORIG_B.DESIRED_GP_4=_CUR_B.DESIRED_GP_4 OR DESIRED_GP_4=_CUR_B.DESIRED_GP_4 THEN GOTO *NEXT ELSE IF _ORIG_B.DESIRED_GP_4=DESIRED_GP_4 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("DESI_G_4")+" = "+STR(_CUR_B.DESIRED_GP_4),_CHG_VAR_B$(34,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("DESI_G_4")+" = "+STR(_CUR_B.DESIRED_GP_4)
15370 IF _ORIG_B.DESIRED_GP_5=_CUR_B.DESIRED_GP_5 OR DESIRED_GP_5=_CUR_B.DESIRED_GP_5 THEN GOTO *NEXT ELSE IF _ORIG_B.DESIRED_GP_5=DESIRED_GP_5 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("DESI_G_5")+" = "+STR(_CUR_B.DESIRED_GP_5),_CHG_VAR_B$(35,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("DESI_G_5")+" = "+STR(_CUR_B.DESIRED_GP_5)
15380 IF _ORIG_B.SELL_PRICE_1=_CUR_B.SELL_PRICE_1 OR SELL_PRICE_1=_CUR_B.SELL_PRICE_1 THEN GOTO *NEXT ELSE IF _ORIG_B.SELL_PRICE_1=SELL_PRICE_1 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("SELL_P_1")+" = "+STR(_CUR_B.SELL_PRICE_1),_CHG_VAR_B$(36,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("SELL_P_1")+" = "+STR(_CUR_B.SELL_PRICE_1)
15390 IF _ORIG_B.SELL_PRICE_2=_CUR_B.SELL_PRICE_2 OR SELL_PRICE_2=_CUR_B.SELL_PRICE_2 THEN GOTO *NEXT ELSE IF _ORIG_B.SELL_PRICE_2=SELL_PRICE_2 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("SELL_P_2")+" = "+STR(_CUR_B.SELL_PRICE_2),_CHG_VAR_B$(37,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("SELL_P_2")+" = "+STR(_CUR_B.SELL_PRICE_2)
15400 IF _ORIG_B.SELL_PRICE_3=_CUR_B.SELL_PRICE_3 OR SELL_PRICE_3=_CUR_B.SELL_PRICE_3 THEN GOTO *NEXT ELSE IF _ORIG_B.SELL_PRICE_3=SELL_PRICE_3 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("SELL_P_3")+" = "+STR(_CUR_B.SELL_PRICE_3),_CHG_VAR_B$(38,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("SELL_P_3")+" = "+STR(_CUR_B.SELL_PRICE_3)
15410 IF _ORIG_B.SELL_PRICE_4=_CUR_B.SELL_PRICE_4 OR SELL_PRICE_4=_CUR_B.SELL_PRICE_4 THEN GOTO *NEXT ELSE IF _ORIG_B.SELL_PRICE_4=SELL_PRICE_4 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("SELL_P_4")+" = "+STR(_CUR_B.SELL_PRICE_4),_CHG_VAR_B$(39,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("SELL_P_4")+" = "+STR(_CUR_B.SELL_PRICE_4)
15420 IF _ORIG_B.SELL_PRICE_5=_CUR_B.SELL_PRICE_5 OR SELL_PRICE_5=_CUR_B.SELL_PRICE_5 THEN GOTO *NEXT ELSE IF _ORIG_B.SELL_PRICE_5=SELL_PRICE_5 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("SELL_P_5")+" = "+STR(_CUR_B.SELL_PRICE_5),_CHG_VAR_B$(40,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("SELL_P_5")+" = "+STR(_CUR_B.SELL_PRICE_5)
15430 IF _ORIG_B.QUOTED_PRICE=_CUR_B.QUOTED_PRICE OR QUOTED_PRICE=_CUR_B.QUOTED_PRICE THEN GOTO *NEXT ELSE IF _ORIG_B.QUOTED_PRICE=QUOTED_PRICE THEN _CHG2_B$=_CHG2_B$+SEP+MSG("QUOT_P")+" = "+STR(_CUR_B.QUOTED_PRICE),_CHG_VAR_B$(41,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("QUOT_P")+" = "+STR(_CUR_B.QUOTED_PRICE)
15440 IF _ORIG_B.SELL_EXT=_CUR_B.SELL_EXT OR SELL_EXT=_CUR_B.SELL_EXT THEN GOTO *NEXT ELSE IF _ORIG_B.SELL_EXT=SELL_EXT THEN _CHG2_B$=_CHG2_B$+SEP+MSG("SELL_EXT")+" = "+STR(_CUR_B.SELL_EXT),_CHG_VAR_B$(42,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("SELL_EXT")+" = "+STR(_CUR_B.SELL_EXT)
15450 IF _ORIG_B.CALC_COST_1=_CUR_B.CALC_COST_1 OR CALC_COST_1=_CUR_B.CALC_COST_1 THEN GOTO *NEXT ELSE IF _ORIG_B.CALC_COST_1=CALC_COST_1 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("CALC_C_1")+" = "+STR(_CUR_B.CALC_COST_1),_CHG_VAR_B$(43,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("CALC_C_1")+" = "+STR(_CUR_B.CALC_COST_1)
15460 IF _ORIG_B.CALC_COST_2=_CUR_B.CALC_COST_2 OR CALC_COST_2=_CUR_B.CALC_COST_2 THEN GOTO *NEXT ELSE IF _ORIG_B.CALC_COST_2=CALC_COST_2 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("CALC_C_2")+" = "+STR(_CUR_B.CALC_COST_2),_CHG_VAR_B$(44,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("CALC_C_2")+" = "+STR(_CUR_B.CALC_COST_2)
15470 IF _ORIG_B.CALC_COST_3=_CUR_B.CALC_COST_3 OR CALC_COST_3=_CUR_B.CALC_COST_3 THEN GOTO *NEXT ELSE IF _ORIG_B.CALC_COST_3=CALC_COST_3 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("CALC_C_3")+" = "+STR(_CUR_B.CALC_COST_3),_CHG_VAR_B$(45,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("CALC_C_3")+" = "+STR(_CUR_B.CALC_COST_3)
15480 IF _ORIG_B.CALC_COST_4=_CUR_B.CALC_COST_4 OR CALC_COST_4=_CUR_B.CALC_COST_4 THEN GOTO *NEXT ELSE IF _ORIG_B.CALC_COST_4=CALC_COST_4 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("CALC_C_4")+" = "+STR(_CUR_B.CALC_COST_4),_CHG_VAR_B$(46,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("CALC_C_4")+" = "+STR(_CUR_B.CALC_COST_4)
15490 IF _ORIG_B.CALC_COST_5=_CUR_B.CALC_COST_5 OR CALC_COST_5=_CUR_B.CALC_COST_5 THEN GOTO *NEXT ELSE IF _ORIG_B.CALC_COST_5=CALC_COST_5 THEN _CHG2_B$=_CHG2_B$+SEP+MSG("CALC_C_5")+" = "+STR(_CUR_B.CALC_COST_5),_CHG_VAR_B$(47,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("CALC_C_5")+" = "+STR(_CUR_B.CALC_COST_5)
15500 IF _ORIG_B.CTN_PACK=_CUR_B.CTN_PACK OR CTN_PACK=_CUR_B.CTN_PACK THEN GOTO *NEXT ELSE IF _ORIG_B.CTN_PACK=CTN_PACK THEN _CHG2_B$=_CHG2_B$+SEP+MSG("CTN_PACK")+" = "+STR(_CUR_B.CTN_PACK),_CHG_VAR_B$(48,1)="Y" ELSE _CHG1_B$=_CHG1_B$+SEP+MSG("CTN_PACK")+" = "+STR(_CUR_B.CTN_PACK)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR_B$(1,1)="Y" THEN QSB_UNUSED_1$=_CUR_B.QSB_UNUSED_1$
16030 IF _CHG_VAR_B$(2,1)="Y" THEN QUOTE_LINE_NUM$=_CUR_B.QUOTE_LINE_NUM$
16040 IF _CHG_VAR_B$(3,1)="Y" THEN LINE_TYPE$=_CUR_B.LINE_TYPE$
16050 IF _CHG_VAR_B$(4,1)="Y" THEN ITEM_CODE$=_CUR_B.ITEM_CODE$
16060 IF _CHG_VAR_B$(5,1)="Y" THEN PROD_CODE$=_CUR_B.PROD_CODE$
16070 IF _CHG_VAR_B$(6,1)="Y" THEN LEFT_RIGHT$=_CUR_B.LEFT_RIGHT$
16080 IF _CHG_VAR_B$(7,1)="Y" THEN TOP_BOTTOM$=_CUR_B.TOP_BOTTOM$
16090 IF _CHG_VAR_B$(8,1)="Y" THEN PLYS$=_CUR_B.PLYS$
16100 IF _CHG_VAR_B$(9,1)="Y" THEN ITEM_DESC$=_CUR_B.ITEM_DESC$
16110 IF _CHG_VAR_B$(10,1)="Y" THEN QSB_UNUSED_3$=_CUR_B.QSB_UNUSED_3$
16120 IF _CHG_VAR_B$(11,1)="Y" THEN QSB_UNUSED_4$=_CUR_B.QSB_UNUSED_4$
16130 IF _CHG_VAR_B$(12,1)="Y" THEN QSB_UNUSED_5$=_CUR_B.QSB_UNUSED_5$
16140 IF _CHG_VAR_B$(13,1)="Y" THEN SELL_UM$=_CUR_B.SELL_UM$
16150 IF _CHG_VAR_B$(14,1)="Y" THEN CUSTOM_ITEM$=_CUR_B.CUSTOM_ITEM$
16160 IF _CHG_VAR_B$(15,1)="Y" THEN QSB_UNUSED_6$=_CUR_B.QSB_UNUSED_6$
16170 IF _CHG_VAR_B$(16,1)="Y" THEN FIXED_PRICE$=_CUR_B.FIXED_PRICE$
16180 IF _CHG_VAR_B$(17,1)="Y" THEN QSB_UNUSED_7$=_CUR_B.QSB_UNUSED_7$
16190 IF _CHG_VAR_B$(18,1)="Y" THEN QSB_UNUSED_8$=_CUR_B.QSB_UNUSED_8$
16200 IF _CHG_VAR_B$(19,1)="Y" THEN QSB_UNUSED_9$=_CUR_B.QSB_UNUSED_9$
16210 IF _CHG_VAR_B$(20,1)="Y" THEN QSB_UNUSED_10$=_CUR_B.QSB_UNUSED_10$
16220 IF _CHG_VAR_B$(21,1)="Y" THEN QUOTE_DIV$=_CUR_B.QUOTE_DIV$
16230 IF _CHG_VAR_B$(22,1)="Y" THEN QUOTE_NUM$=_CUR_B.QUOTE_NUM$
16240 IF _CHG_VAR_B$(23,1)="Y" THEN QSB_UNUSED_2$=_CUR_B.QSB_UNUSED_2$
16250 IF _CHG_VAR_B$(24,1)="Y" THEN SELL_QTY_PER=_CUR_B.SELL_QTY_PER
16260 IF _CHG_VAR_B$(25,1)="Y" THEN QUOTED_QTY=_CUR_B.QUOTED_QTY
16270 IF _CHG_VAR_B$(26,1)="Y" THEN SELL_BREAK_1=_CUR_B.SELL_BREAK_1
16280 IF _CHG_VAR_B$(27,1)="Y" THEN SELL_BREAK_2=_CUR_B.SELL_BREAK_2
16290 IF _CHG_VAR_B$(28,1)="Y" THEN SELL_BREAK_3=_CUR_B.SELL_BREAK_3
16300 IF _CHG_VAR_B$(29,1)="Y" THEN SELL_BREAK_4=_CUR_B.SELL_BREAK_4
16310 IF _CHG_VAR_B$(30,1)="Y" THEN SELL_BREAK_5=_CUR_B.SELL_BREAK_5
16320 IF _CHG_VAR_B$(31,1)="Y" THEN DESIRED_GP_1=_CUR_B.DESIRED_GP_1
16330 IF _CHG_VAR_B$(32,1)="Y" THEN DESIRED_GP_2=_CUR_B.DESIRED_GP_2
16340 IF _CHG_VAR_B$(33,1)="Y" THEN DESIRED_GP_3=_CUR_B.DESIRED_GP_3
16350 IF _CHG_VAR_B$(34,1)="Y" THEN DESIRED_GP_4=_CUR_B.DESIRED_GP_4
16360 IF _CHG_VAR_B$(35,1)="Y" THEN DESIRED_GP_5=_CUR_B.DESIRED_GP_5
16370 IF _CHG_VAR_B$(36,1)="Y" THEN SELL_PRICE_1=_CUR_B.SELL_PRICE_1
16380 IF _CHG_VAR_B$(37,1)="Y" THEN SELL_PRICE_2=_CUR_B.SELL_PRICE_2
16390 IF _CHG_VAR_B$(38,1)="Y" THEN SELL_PRICE_3=_CUR_B.SELL_PRICE_3
16400 IF _CHG_VAR_B$(39,1)="Y" THEN SELL_PRICE_4=_CUR_B.SELL_PRICE_4
16410 IF _CHG_VAR_B$(40,1)="Y" THEN SELL_PRICE_5=_CUR_B.SELL_PRICE_5
16420 IF _CHG_VAR_B$(41,1)="Y" THEN QUOTED_PRICE=_CUR_B.QUOTED_PRICE
16430 IF _CHG_VAR_B$(42,1)="Y" THEN SELL_EXT=_CUR_B.SELL_EXT
16440 IF _CHG_VAR_B$(43,1)="Y" THEN CALC_COST_1=_CUR_B.CALC_COST_1
16450 IF _CHG_VAR_B$(44,1)="Y" THEN CALC_COST_2=_CUR_B.CALC_COST_2
16460 IF _CHG_VAR_B$(45,1)="Y" THEN CALC_COST_3=_CUR_B.CALC_COST_3
16470 IF _CHG_VAR_B$(46,1)="Y" THEN CALC_COST_4=_CUR_B.CALC_COST_4
16480 IF _CHG_VAR_B$(47,1)="Y" THEN CALC_COST_5=_CUR_B.CALC_COST_5
16490 IF _CHG_VAR_B$(48,1)="Y" THEN CTN_PACK=_CUR_B.CTN_PACK
16500 PERFORM "QSGDAC;INCORPORATE_CHGS"
16990 RETURN 
20000 ! ^20000,10 - Vendor Column Headings
20010 VEND_COL:
20020 _VC_MASK$="#####,###,###-",_COST_MASK$="##,###,###.00-"
20030 FOR X=1 TO 5; VAR1$="%VEND_COL"+STR(X),_ROWN1$="SELL_BREAK_"+STR(X); VIA VAR1$=STR(VIN(_ROWN1$):_VC_MASK$); NEXT X
20040 RETURN 
21000 ! ^21000,10 - Read and load LINES
21010 READ_LINES:
21020 LIST_BOX LOAD LINES.CTL,""
21030 READ (_QSB,KEY=QUOTE_DIV$+QUOTE_NUM$,DOM=*NEXT)
21040 LINE_COUNT=0
21050 NEXT_QSB_REC: _QSB_KEY$=KEY(_QSB,END=LINES_DONE); IF MID(_QSB_KEY$,1,8)<>QUOTE_DIV$+QUOTE_NUM$ THEN GOTO LINES_DONE
21060 READ (_QSB)
21070 LINE_COUNT=+1
21080 GOSUB LOAD_LINES
21090 GOTO NEXT_QSB_REC
21100 LINES_DONE:
21110 IF LINE_COUNT=0 THEN GOSUB ADD_LINE
21120 RETURN 
21200 ! ^21200,10 - Load items into listbox
21210 LOAD_LINES:! COLUMN SEPARATOR IS SEP
21220 COLUMNS$=_LINE.QUOTE_LINE_NUM$+SEP+_LINE.ITEM_CODE$+SEP+_LINE.PROD_CODE$+SEP+_LINE.LEFT_RIGHT$+SEP+_LINE.TOP_BOTTOM$+SEP+_LINE.PLYS$+SEP+_LINE.ITEM_DESC$
21230 LIST_BOX LOAD LINES.CTL,0,COLUMNS$
21240 RETURN 
21400 ! ^21400,10 - Pick items from List Box
21410 PICK_LINE:
21420 IF LINES$="" THEN RETURN 
21430 READ DATA FROM LINES$ TO QUOTE_LINE_NUM$,_Y1$,_Y2$,_Y3$,_Y4$,_Y5$,_Y6$
21440 _KEY$=QUOTE$+QUOTE_LINE_NUM$; READ (_FIL_NO_QSB,KEY=_KEY$,ERR=NEXT_REC)
21450 READ (_FIL_NO_QSC,KEY=_KEY$,ERR=*NEXT)
21460 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
21470 RETURN 
21600 ! ^21600,10 - Add Line
21610 ADD_LINE:
21620 DIM PKEY$(11)
21630 READ (_CUR_FN_QSB,KEY=QUOTE_DIV$+QUOTE_NUM$+"zzz",DOM=*NEXT)
21640 PKEY$=KEP(_CUR_FN_QSB,ERR=*NEXT)
21650 QUOTE_LINE_NUM$="001"
21660 IF PKEY$(1,8)=QUOTE_DIV$+QUOTE_NUM$ THEN QUOTE_LINE_NUM$=STR(NUM(MID(PKEY$,9,3),ERR=*NEXT)+1:"000")
21670 IF QUOTE_LINE_NUM$="001" THEN CUSTOM_ITEM$="Y" ELSE CUSTOM_ITEM$="N"
21680 _KEY$=QUOTE_DIV$+QUOTE_NUM$+QUOTE_LINE_NUM$
21690 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
21700 REFRESH_FLG=1
21710 _KCNT=2,_EOM$=$0D$
21720 GOSUB NEW_RECORD
21730 _ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
21740 RETURN 
22000 ! ^22000,10 - Read and load VENDOR_BOX
22010 READ_VENDORS:
22011 DB_INDEX=0
22015 FOR _DB=1 TO 5
22017 DROP_BOX LOAD EVN("SUPPLIER_NUM_"+STR(_DB)+".CTL"),""
22019 NEXT _DB
22020 FOR X=1 TO 5
22030 VAR1$="%VEND_COL"+STR(X),_ROWN1$="SELL_BREAK_"+STR(X)
22040 IF VIN(_ROWN1$)<>0 THEN VIA VAR1$=STR(VIN(_ROWN1$):_VC_MASK$)
22050 NEXT X
22060 LIST_BOX LOAD VENDOR_BOX.CTL,""
22070 READ (_QSD,KEY=QUOTE_DIV$+QUOTE_NUM$+QUOTE_LINE_NUM$,DOM=*NEXT)
22080 NEXT_QSD_REC: _QSD_KEY$=KEY(_QSD,END=VENDORS_DONE); IF _QSD_KEY$(1,11)<>QUOTE_DIV$+QUOTE_NUM$+QUOTE_LINE_NUM$ THEN GOTO VENDORS_DONE
22090 READ (_QSD)
22100 GOSUB LOAD_VENDORS
22110 GOTO NEXT_QSD_REC
22120 VENDORS_DONE:
22125 FOR _DB=1 TO 5
22126 IF EVN("SUPPLIER_NUM_"+STR(_DB))>0 THEN DROP_BOX WRITE EVN("SUPPLIER_NUM_"+STR(_DB)+".CTL"),EVN("SUPPLIER_NUM_"+STR(_DB)),ERR=*NEXT
22127 NEXT _DB
22130 GOSUB VENDOR_CALCS
22140 RETURN 
22200 ! ^22200,10 - Load Vendors into Listbox
22205 DEF FNPRINT_COST$(Z9)=TBL(Z9=0,STR(Z9:_COST_MASK$),"")
22210 LOAD_VENDORS:! COLUMN SEPARATOR IS SEP
22220 VEND_COLUMNS$=VEND_NUM_ON_SCREEN$+SEP+TBL(SGN(%AP_DIV_LEN),"",VEND_DIV$+"-")+VEND_CODE$(1,%VEND_LEN)+SEP+TF_OUTPUT$+"  "+OUTPUT_TYPE$+SEP+FNPRINT_COST$(COST_QTY_BREAK_1)+SEP+FNPRINT_COST$(COST_QTY_BREAK_2)+SEP+FNPRINT_COST$(COST_QTY_BREAK_3)+SEP+FNPRINT_COST$(COST_QTY_BREAK_4)+SEP+FNPRINT_COST$(COST_QTY_BREAK_5)
22230 LIST_BOX LOAD VENDOR_BOX.CTL,0,VEND_COLUMNS$
22235 DB_INDEX=DB_INDEX+1; DB$=STR(DB_INDEX)+" >"+TBL(SGN(%AP_DIV_LEN),"",VEND_DIV$+"-")+VEND_CODE$(1,%VEND_LEN)
22236 DROP_BOX LOAD SUPPLIER_NUM_1.CTL,DB_INDEX,DB$; DROP_BOX LOAD SUPPLIER_NUM_2.CTL,DB_INDEX,DB$; DROP_BOX LOAD SUPPLIER_NUM_3.CTL,DB_INDEX,DB$; DROP_BOX LOAD SUPPLIER_NUM_4.CTL,DB_INDEX,DB$; DROP_BOX LOAD SUPPLIER_NUM_5.CTL,DB_INDEX,DB$
22240 RETURN 
22400 ! ^22400,10 - Pick Vendor from Listbox
22410 PICK_VENDOR:
22420 IF VENDOR_BOX$="" THEN RETURN 
22430 READ DATA FROM VENDOR_BOX$ TO VEND_NUM_ON_SCREEN$,_Y1$,_Y2$,_Y3$,_Y4$,_Y5$,_Y6$,_Y7$
22440 PROCESS "QSGDAK","../QSG/QS.EN",QUOTE_DIV$+SEP+QUOTE_NUM$+SEP+QUOTE_LINE_NUM$+SEP+VEND_NUM_ON_SCREEN$
22450 GOSUB READ_VENDORS
22460 RETURN 
22600 ! ^22600,10 - Select Vendor Group
22610 SEL_VEND_GROUP:
22620 PROCESS "DLG_GROUP","../QSG/QS.EN"
22630 GOSUB READ_VENDORS
22640 RETURN 
22800 ! ^22800,10 - Load Vendor Group
22810 LOAD_VEND_OK:
22820 PERFORM "QSGDAL"
22830 RETURN 
23000 ! ^23000,10 - Vendor Calcs
23010 VENDOR_CALCS:
23020 GOSUB STR_TO_NUM
23030 FOR X=1 TO 8
23040 _ROWN1$="SELL_BREAK_"+STR(X),_ROWN5$="SELL_PRICE_"+STR(X),_ROWN6$="TOTAL_COST_"+STR(X),_ROWN7$="TOTAL_GP_"+STR(X),_ROWN3$="CALC_COST_"+STR(X)
23050 GOSUB CALC_GP
23060 NEXT X
23070 GOSUB NUM_TO_STR
23080 REFRESH_FLG=1
23090 RETURN 
23200 ! ^23200,10 - Calculate Gross Profit
23210 CALC_GP:
23215 SELL_BREAK_IN_EACHES=FN%QTY_IN_EACHES(VIN(_ROWN1$),COST_UM$,NUM(COST_QTY_PER$))
23220 CALL "FM2EXT",_ZZPARM,0,SELL_UM$,SELL_QTY_PER,SELL_BREAK_IN_EACHES,VIN(_ROWN5$),_CALC_S,2
23230 VIA (_ROWN6$)=_CALC_S
23240 CALL "FM2EXT",_ZZPARM,0,COST_UM$,COST_QTY_PER,SELL_BREAK_IN_EACHES,VIN(_ROWN3$),_CALC_C,2
23250 VIA (_ROWN7$)=_CALC_S-_CALC_C
23260 RETURN 
24000 ! ^24000,10 - Item Information
24010 ITEM_INFO:
24020 IF LINE_TYPE$="M" THEN RETURN 
24030 GOSUB STR_TO_NUM
24040 DIM FMP_SPECIAL$(61)
24050 PERFORM "QSGDAB.1;ITEM_CODE"
24060 GOSUB GET_SELL_UM
24070 GOSUB GET_COST_UM
24080 GOSUB NUM_TO_STR
24090 REFRESH_FLG=1
24100 RETURN 
25000 ! ^25000,5 - Calculations for Pricing
25005 ! Need to add logic for 'S' type ext only and U/M types w/ext only
25010 CALCULATIONS:
25015 GOSUB STR_TO_NUM
25020 _SAVE_SQP=SELL_QTY_PER,_SAVE_CQP=COST_QTY_PER
25025 QUOTED_QTY=DISPLAY_QTY*S0
25030 IF ID$="SELL_UM" THEN GOSUB GET_SELL_UM
25035 IF ID$="SELL_QTY_PER" THEN GOSUB CALC_PRICE
25040 IF ID$="DISPLAY_QTY" THEN GOSUB EXTEND_PRICE; GOSUB EXTEND_COST; GOSUB CALC_GROSS
25045 IF ID$="QUOTED_PRICE" THEN GOSUB EXTEND_PRICE
25050 IF ID$="SELL_EXT" THEN GOSUB CALC_GROSS
25055 IF ID$="COST_UM" THEN GOSUB GET_COST_UM
25060 IF ID$="COST_QTY_PER" THEN GOSUB CALC_COST
25065 IF ID$="QUOTED_COST" THEN GOSUB EXTEND_COST; GOSUB CALC_GROSS
25070 IF ID$="COST_EXT" THEN GOSUB CALC_GROSS
25075 DISPLAY_QTY=FN%QTY_IN_UM(QUOTED_QTY,SELL_UM$,SELL_QTY_PER)
25080 GOSUB NUM_TO_STR; GOSUB STR_TO_NUM; IF STP(ITEM_CODE$)<>"" THEN GOSUB WRT; GOSUB READ_LINES
25085 REFRESH_FLG=1
25090 RETURN 
25200 ! ^25200,5 - Selling
25205 GET_SELL_UM:
25210 DIM S_UM$(21),S_UM[1]
25215 S_UM[0]=1,S_UM[1]=1
25220 FIND (_ZZPARM,KEY="U/M"+SELL_UM$,DOM=*NEXT)S_UM$,S_UM[0],S_UM[1]
25225 GOSUB CALC_SELL_UM
25230 IF MID(S_UM$,20,1)="Y" THEN CALL "*wingrp;disable",SELL_QTY_PER.GRP$ ELSE CALL "*wingrp;enable",SELL_QTY_PER.GRP$
25235 IF CUSTOM_ITEM$="Y" THEN CALL "*wingrp;hide",SELL_EXT.GRP$ ELSE CALL "*wingrp;show",SELL_EXT.GRP$
25240 IF MID(S_UM$,21,1)="Y" THEN CALL "*wingrp;enable",SELL_EXT.GRP$ ELSE CALL "*wingrp;disable",SELL_EXT.GRP$
25245 IF LINE_TYPE$="S" THEN IF MID(FMP_SPECIAL$,61,1)="Y" THEN CALL "*wingrp;enable",SELL_EXT.GRP$; CALL "*wingrp;disable",PRICE_QTY.GRP$ ELSE CALL "*wingrp;enable",PRICE_QTY.GRP$
25250 RETURN 
25400 ! ^25400,5  - Cost
25405 GET_COST_UM:
25410 DIM C_UM$(21),C_UM[1]
25415 C_UM[0]=1,C_UM[1]=1
25420 FIND (_ZZPARM,KEY="U/M"+COST_UM$,DOM=*NEXT)C_UM$,C_UM[0],C_UM[1]
25425 GOSUB CALC_COST_UM
25430 IF MID(C_UM$,20,1)="Y" THEN CALL "*wingrp;disable",COST_QTY_PER.GRP$ ELSE CALL "*wingrp;enable",COST_QTY_PER.GRP$
25435 IF CUSTOM_ITEM$="Y" THEN CALL "*wingrp;hide",COST_EXT.GRP$ ELSE CALL "*wingrp;show",COST_EXT.GRP$
25440 IF MID(C_UM$,21,1)="Y" THEN CALL "*wingrp;enable",COST_EXT.GRP$ ELSE CALL "*wingrp;disable",COST_EXT.GRP$
25445 IF LINE_TYPE$="S" THEN IF MID(FMP_SPECIAL$,61,1)="Y" THEN CALL "*wingrp;enable",COST_EXT.GRP$; CALL "*wingrp;disable",PRICE_QTY.GRP$ ELSE CALL "*wingrp;enable",PRICE_QTY.GRP$
25450 ! *note:  if chg update qsd
25455 RETURN 
27500 ! ^27500,5 - Set S0,S1 based on Selling U/M, check for recalc of breaks and price, S0 is number of items in one unit (qty), S1 is divide ext by
27505 CALC_SELL_UM:
27520 S1=S_UM[0]
27522 IF MID(S_UM$,20,1)="Y" THEN IF S_UM[0]<>0 THEN SELL_QTY_PER=S_UM[0] ELSE SELL_QTY_PER=S_UM[1]
27525 IF SELL_QTY_PER=0 THEN SELL_QTY_PER=1
27531 IF S_UM$(20,1)<>"Y" THEN S0=SELL_QTY_PER ELSE S0=S_UM[1]
27535 IF S0=0 THEN S0=1
27540 IF S1=0 THEN S1=1
27550 IF CUSTOM_ITEM$<>"Y" THEN GOSUB CALC_PRICE
27555 RETURN 
27600 ! ^27600,5 - Set U0,U1 based on Cost U/M, check for recalc of breaks and price, U0 is qty, U1 is ext.
27605 CALC_COST_UM:
27620 U1=C_UM[0]
27622 IF MID(C_UM$,20,1)="Y" THEN IF C_UM[0]<>0 THEN COST_QTY_PER=C_UM[0] ELSE COST_QTY_PER=C_UM[1]
27625 IF COST_QTY_PER=0 THEN COST_QTY_PER=1
27630 IF C_UM$(20,1)<>"Y" THEN U0=COST_QTY_PER ELSE U0=C_UM[1]
27635 IF U0=0 THEN U0=1
27640 IF U1=0 THEN U1=1
27650 IF CUSTOM_ITEM$<>"Y" THEN GOSUB CALC_COST
27655 RETURN 
30000 ! ^30000,10 - Setup Sell Breaks
30010 CHG_SELLBRK:
30020 _COL$=MID(ID$,-1),_V$=EVS("SELL_BREAK_"+_COL$+"$"),_V1$="%VEND_COL"+_COL$+"$"
30030 IF NUM(_V$)=0 AND NUM(EVS("%VEND_COL"+STR(NUM(_COL$)+1:"0")+"$"))<>0 THEN MSGBOX "Cannot set to zero"; VIA ID$=EVS(_V1$); REFRESH_FLG=1; EXIT 
30040 _V$=STR(NUM(_V$):"#####,###,###-"); VIA _V1$=_V$; _X=NUM(_COL$)
30050 _X$=VENDOR_BOX.CTL'FMT$
30060 _O=POS("["=_X$,1,3+_X)
30070 _X1$=_X$(1,_O+1),_X$=_X$(_O+1)
30080 _O=POS("]"=_X$)
30090 _X1$+=_V$+_X$(_O)
30100 VENDOR_BOX.CTL'FMT$=_X1$
30110 RETURN 
30200 ! ^30200,10 - Set Desired Gross Profit for Vendors
31000 ! ^31000,10 - Select Supplier Number for Column Calcs
31010 PICK_SUPPLIER:
31020 ! _COL$=MID(ID$,-1),_VAL$=MID(EVS("SUPPLIER_NUM_"+_COL$+"$"),1,1)
31021 _COL$=MID(ID$,-1),_VAL$=EVS("SUPPLIER_NUM_"+_COL$+"$")
31030 IF _VAL$="9" THEN GOSUB FIND_LOWEST ELSE GOSUB SELECT_VEND
31040 IF _COL$="1" AND NUM(EVS("SUPPLIER_NUM_2$"))=0 THEN GOSUB DEFAULT_VENDS
31050 REFRESH_FLG=1
31060 RETURN 
31200 ! ^31200,10 - Default all vendors the first time
31210 DEFAULT_VENDS:
31220 FOR _LOOP=2 TO 5
31230 _COL$=STR(_LOOP:"0")
31240 IF _VAL$="9" THEN GOSUB FIND_LOWEST ELSE GOSUB SELECT_VEND
31250 NEXT _LOOP
31260 RETURN 
31400 ! ^31400,10 - Specfic Vendor Selected
31410 SELECT_VEND:
31420 SELECT *,REC=VND$ FROM "QSD"+%C$ BEGIN QUOTE_DIV$+QUOTE_NUM$+QUOTE_LINE_NUM$+STR(NUM(_VAL$):"00") END QUOTE_DIV$+QUOTE_NUM$+QUOTE_LINE_NUM$+STR(NUM(_VAL$):"00")
31430 _ROWN3$="CALC_COST_"+_COL$+"$"
31440 VIA _ROWN3$=STR(EVN("VND.COST_QTY_BREAK_"+_COL$))
31450 NEXT RECORD 
31460 _ROWN2$="SUPPLIER_NUM_"+_COL$+"$"
31470 VIA _ROWN2$=_VAL$
31480 GOSUB CALC_VEND_COST
31490 RETURN 
31800 ! ^31800,10 - Find the lowest supplier costs for current column
31810 FIND_LOWEST:
31820 P5=0,P6=0
31830 SELECT *,REC=VND$ FROM "QSD"+%C$ BEGIN QUOTE_DIV$+QUOTE_NUM$+QUOTE_LINE_NUM$+"01" END QUOTE_DIV$+QUOTE_NUM$+QUOTE_LINE_NUM$+"08"
31840 P4=EVN("VND.COST_QTY_BREAK_"+_COL$)
31850 IF P4>0 THEN IF P4<P5 OR P5=0 THEN P5=P4,P6=NUM(VND.VEND_NUM_ON_SCREEN$)
31860 NEXT RECORD 
31870 IF P6=0 THEN GOTO FIND_LOWEST_END
31880 _ROWN2$="SUPPLIER_NUM_"+_COL$+"$"
31890 VIA _ROWN2$=STR(P6)
31900 _ROWN3$="CALC_COST_"+_COL$+"$"
31910 VIA _ROWN3$=STR(P5)
31920 GOSUB CALC_VEND_COST
31930 FIND_LOWEST_END:
31940 REFRESH_FLG=1
31950 RETURN 
32000 ! ^32000,10
32010 CALC_VEND_COST:
32020 ! Given Column Number _COL$, Supplier #S then Compute CALC_COST_x
32030 _ROWN1$="SELL_BREAK_"+_COL$+"$"
32040 _ROWN3$="CALC_COST_"+_COL$+"$"
32050 _ROWN4$="DESIRED_GP_"+_COL$+"$"; _ROWN8$="GROSS_PROFIT_"+_COL$+"$"
32070 ! Extend unit cost
32075 SELL_BREAK_IN_EACHES=FN%QTY_IN_EACHES(NUM(EVS(_ROWN1$)),COST_UM$,NUM(COST_QTY_PER$))
32080 CALL "FM2EXT",_ZZPARM,0,COST_UM$,NUM(COST_QTY_PER$),SELL_BREAK_IN_EACHES,NUM(EVS(_ROWN3$)),E0,2
32090 ! Get unit cost in SELLING UNITS back to store into QSB record
32100 CALL "FM2EXT",_ZZPARM,1,SELL_UM$,NUM(SELL_QTY_PER$),SELL_BREAK_IN_EACHES,C,E0,2
32110 ! Store unit cost in QSB record
32120 ! VIA (_ROWN3$)=STR(C)
32130 ! Now put into cost units for display
32140 ! CALL "FM2EXT",_ZZPARM,0,SELL_UM$,NUM(SELL_QTY_PER$),SELL_BREAK_IN_EACHES,NUM(EVS(_ROWN3$)),E0,2
32150 ! CALL "FM2EXT",_ZZPARM,1,COST_UM$,NUM(COST_QTY_PER$),SELL_BREAK_IN_EACHES,C,E0,2
32160 GOSUB CALC_VEND_SELL
32170 RETURN 
32200 ! ^32200,10
32210 CALC_VEND_SELL:
32220 ! Convert unit cost (IN SELLING UNITS) to unit price
32230 ! PRECISION 6; C=NUM(EVS(_ROWN3$))/(1-NUM(EVS(_ROWN4$))*.01); PRECISION 2; C=C+0
32240 ! Store selling unit price
32250 _ROWN5$="SELL_PRICE_"+_COL$+"$"
32260 IF VIN(_ROWN5$)=0 THEN VIA _ROWN5$=STR(C)
32270 GOSUB CALC_VEND_TOTALS
32280 RETURN 
32400 ! ^32400,10
32410 CALC_VEND_TOTALS:
32415 SELL_BREAK_IN_EACHES=FN%QTY_IN_EACHES(NUM(EVS(_ROWN1$)),COST_UM$,NUM(COST_QTY_PER$))
32420 ! Get extended price
32430 CALL "FM2EXT",_ZZPARM,0,SELL_UM$,NUM(SELL_QTY_PER$),SELL_BREAK_IN_EACHES,NUM(EVS(_ROWN5$)),E1,2
32440 _ROWN6$="TOTAL_COST_"+_COL$+"$"
32450 VIA _ROWN6$=STR(E1)
32460 ! Get extended cost
32470 CALL "FM2EXT",_ZZPARM,0,COST_UM$,NUM(COST_QTY_PER$),SELL_BREAK_IN_EACHES,NUM(EVS(_ROWN3$)),E2,2
32480 ! Display extended GP
32490 _ROWN7$="TOTAL_GP_"+_COL$+"$"
32500 VIA (_ROWN7$)=STR(E1-E2)
32510 ! Recompute gp % and reset desired gp%
32520 IF E1<>0 THEN P0=(E1-E2)*100/E1 ELSE P0=0
32530 VIA _ROWN4$=STR(P0)
32532 ! get sell price in cost u/m
32533 CALL "FM2EXT",_ZZPARM,1,COST_UM$,NUM(COST_QTY_PER$),SELL_BREAK_IN_EACHES,SELL_IN_COST_UM,E1,2
32535 VIA _ROWN8$=STR(SELL_IN_COST_UM-NUM(EVS(_ROWN3$)))
32540 RETURN 
33000 ! ^33000,10 Add a Vendor
33010 ADD_VEND:
33020 DIM PKEY$(13)
33030 READ (_QSD,KEY=QUOTE_DIV$+QUOTE_NUM$+QUOTE_LINE_NUM$+"zz",DOM=*NEXT)
33040 PKEY$=KEP(_QSD,ERR=*NEXT)
33050 VEND_NUM_ON_SCREEN$="01"
33060 IF PKEY$(1,11)=QUOTE_DIV$+QUOTE_NUM$+QUOTE_LINE_NUM$ THEN VEND_NUM_ON_SCREEN$=STR(NUM(MID(PKEY$,12,2),ERR=*NEXT)+1:"00")
33070 PROCESS "QSGDAK","../QSG/QS.EN",QUOTE_DIV$+SEP+QUOTE_NUM$+SEP+QUOTE_LINE_NUM$+SEP+VEND_NUM_ON_SCREEN$
33080 GOSUB READ_VENDORS
33090 RETURN 
37550 ! ^37550,5 - Recalc Selling price based on new U/M
37555 CALC_PRICE:
37560 IF QUOTED_QTY<>0 AND S0<>0 THEN QUOTED_PRICE=SELL_EXT*S1/(QUOTED_QTY/S0)
37565 RETURN 
37660 ! ^37650,5 - Recalc Cost based on new U/M
37665 CALC_COST:
37670 IF QUOTED_QTY<>0 AND U0<>0 THEN QUOTED_COST=COST_EXT*U1/(QUOTED_QTY/U0)
37675 RETURN 
37700 ! ^37700,5 - Calc gross profit
37705 CALC_GROSS:
37710 IF SELL_EXT=0 THEN GOTO *RETURN
37715 GP_AMT=SELL_EXT-COST_EXT
37720 IF SELL_EXT<>0 THEN GP_PCT=GP_AMT*100/SELL_EXT ELSE GP_PCT=0
37725 RETURN 
37750 ! ^37750,5 Calculate extended price
37755 EXTEND_PRICE:
37760 IF S_UM$(21,1)<>"Y" AND S0<>0 AND S1<>0 THEN SELL_EXT=QUOTED_QTY/S0*QUOTED_PRICE/S1
37765 RETURN 
37800 ! ^37800,5 Calculate Extend Cost
37805 EXTEND_COST:
37810 IF C_UM$(21,1)<>"Y" AND U0<>0 AND U1<>0 THEN COST_EXT=QUOTED_QTY/U0*QUOTED_COST/U1
37815 RETURN 
38000 ! ^38000,5 Gross Profit specified, changed sell price accordingly
38005 NEW_GP:
38020 _COL$=MID(ID$,-1),_VAL$=EVS("GROSS_PROFIT_"+_COL$+"$")
38025 _ROWN1$="SELL_BREAK_"+_COL$+"$"; _ROWN3$="CALC_COST_"+_COL$+"$"; _ROWN4$="DESIRED_GP_"+_COL$+"$"; _ROWN5$="SELL_PRICE_"+_COL$+"$"; _ROWN8$="GROSS_PROFIT_"+_COL$+"$"
38030 SELL_BREAK_IN_EACHES=FN%QTY_IN_EACHES(NUM(EVS(_ROWN1$)),COST_UM$,NUM(COST_QTY_PER$))
38035 IF USE_PERCENT THEN SELL_IN_COST_UM=NUM(EVS(_ROWN3$))/(1-(NUM(EVS(_ROWN4$))/100)); USE_PERCENT=0 ELSE SELL_IN_COST_UM=NUM(EVS(_ROWN3$))+NUM(EVS(_ROWN8$)) ! get new sell price, however it is in cost um, if use_percent is set, then we are doing this on behalf of set_gp routine and are using % increase
38040 CALL "FM2EXT",_ZZPARM,0,COST_UM$,NUM(COST_QTY_PER$),SELL_BREAK_IN_EACHES,SELL_IN_COST_UM,SELL_EXTENSION,2
38045 CALL "FM2EXT",_ZZPARM,1,SELL_UM$,NUM(SELL_QTY_PER$),SELL_BREAK_IN_EACHES,SELL_IN_SELL_UM,SELL_EXTENSION,2
38060 VIA _ROWN5$=STR(SELL_IN_SELL_UM)
38080 _VAL$=EVS("SUPPLIER_NUM_"+_COL$+"$"); GOSUB SELECT_VEND; REFRESH_FLG=1 ! set _val$ to supplier num so rest of routines don't get confused
38095 RETURN 
38099 ! 
38100 ! ^100,5 Gross Profit percent set, change sell price accordingly
38105 SET_GP:
38109 _GPCOL$=MID(ID$,-1)
38110 IF _GPCOL$="1" THEN DESIRED_GP_2$=DESIRED_GP_1$,DESIRED_GP_3$=DESIRED_GP_1$,DESIRED_GP_4$=DESIRED_GP_1$,DESIRED_GP_5$=DESIRED_GP_1$
38115 USE_PERCENT=1 ! set flag here and use new_GP return with just a differenct calculation to get the sell price
38120 GOSUB NEW_GP
38125 IF _GPCOL$="1" THEN HID$=ID$; FOR GPX=2 TO 5; ID$=STR(GPX); USE_PERCENT=1; GOSUB NEW_GP; NEXT GPX; ID$=HID$
38195 RETURN 
38199 ! 
40000 ! ^40000,10 - Overlay to Modify Specs
40010 MODIFY_SPECS:
40015 SELECT *,REC=QSA$ FROM "QSA"+%C$ BEGIN QUOTE_DIV$+QUOTE_NUM$ END QUOTE_DIV$+QUOTE_NUM$
40016 %CUSTOMER$=QSA.CUST_DIV$+QSA.CUST_CODE$
40018 NEXT RECORD 
40020 %ITEM_CODE$=ITEM_CODE$
40025 FIND (_FMP,KEY="T"+PROD_CODE$,ERR=*NEXT)FMP$; IF NOT(NUL(FMP$(33,3))) THEN CALL "FMGIAR"; GOTO 40060
40030 CALL "FMGIAB"
40040 CALL "FMGIAS"
40050 CALL "FMGIAU"
40060 RETURN 
40100 SEL_ITEM: REFRESH_FLG=1,ITEM_CODE$=PAD(ITEM_CODE$,10," ")
40120 IF LINE_TYPE$="C" THEN PERFORM "QSGDAB.1;SEL_ITEM"; IF NO_ITEM=1 AND STP(ITEM_CODE$)<>"" THEN CALL "FMGOBA",%CUST_DIV$+%CUST_CODE$,ITEM_CODE$,ACTION$
40130 PERFORM "QSGDAB;ITEM_INFO"; PERFORM "QSGDAB.1;SEL_ITEM"
40140 RETURN 
40200 CLEAR_OPT: REFRESH_FLG=1
40210 FOR AA=1 TO 5
40220 EXECUTE "CALC_COST_"+STR(AA)+"=0,CALC_COST_"+STR(AA)+"$="+QUO+QUO
40230 EXECUTE "GROSS_PROFIT_"+STR(AA)+"=0,GROSS_PROFIT_"+STR(AA)+"$="+QUO+QUO
40240 EXECUTE "SUPPLIER_NUM_"+STR(AA)+"=0,SUPPLIER_NUM_"+STR(AA)+"$="+QUO+QUO
40245 EXECUTE "DESIRED_GP_"+STR(AA)+"=0,DESIRED_GP_"+STR(AA)+"$="+QUO+QUO
40250 EXECUTE "SELL_PRICE_"+STR(AA)+"=0,SELL_PRICE_"+STR(AA)+"$="+QUO+QUO
40255 EXECUTE "TOTAL_COST_"+STR(AA)+"=0,TOTAL_COST_"+STR(AA)+"$="+QUO+QUO
40265 ! EXECUTE "TOTAL_GP_"+STR(AA)+"=0,TOTAL_GP_"+STR(AA)+"$="+QUO+QUO
40290 NEXT 
40292 SUPPLIER_NUM_1$="0"; ID$="SUPPLIER_NUM_1"; PERFORM "QSGDAB;PICK_SUPPLIER"
40295 RETURN 
40300 SHOW_BEST:
40320 FOR AA=1 TO 5
40330 EXECUTE "SUPPLIER_NUM_"+STR(AA)+"$="+QUO+QUO
40340 NEXT 
40350 SUPPLIER_NUM_1$="9"; ID$="SUPPLIER_NUM_1"; PERFORM "QSGDAB;PICK_SUPPLIER"
40360 RETURN 
40500 SEL_VENDOR: VEND_GROUP_FROM$=PAD(VEND_GROUP_FROM$,8," "),REFRESH_FLG=1
40510 FIND (_FMPH,KEY="h"+VEND_GROUP_FROM$,DOM=NO_GROUP)FMPH$
40520 RFQ_VEND_GROUP_DESC$=FMPH$(10,30)
40530 RETURN 
40540 NO_GROUP: VEND_GROUP_FROM$="",NEXT_ID=VEND_GROUP_FROM.CTL; RETURN 
56000 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
