0010 REM "Kit Production Posting <KT2DAA>
0015 REM "Prog Type: I -3.0A
0020 SETESC 9300; SETERR 9000
0035 REM "5.5 - 07/20/07 - 8.423333 - jir - SSP# 208675
0040 REM "Copyright 2007 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000; SETESC 9300
0110 X0$="KT2DAA",X1$="Kit Production Posting",K9$="",K9=0
0120 DIM Z0$(80,"-")
0130 K0=32,K1=5,V8$="001215192099"
0135 C9=-1
0140 M0$="###,###.00-",M1$="####,###.00-",M2$="##,##0-",M3$="###,##0-",M4$="#,###,##0-",M5$="##,###,##0"
0200 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(65,1)>"2" THEN PRECISION NUM(X3$(65,1),ERR=0246)
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0300 REM "IOLISTS
0310 IOLIST A$(1),A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12]
0320 IOLIST B$,B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15]
0330 IOLIST C$,C[0],C[1],C[2],C[3],C[4],C[5],C[6],C[7],C[8],C[9],C[10],C[11],C[12],C[13],C[14],C[15],C[16],C[17],C[18],C[19],C[20],C[21],C[22],C[23],C[24],C[25],C[26],C[27],C[28],C[29],C[30],C[31],C[32],C[33],C[34],C[35],C[36],C[37],C[38],C[39],C[40]
0340 IOLIST D$
0345 IOLIST D1$
0346 IOLIST D2$
0347 IOLIST D3$,D[0],D[1],D[2],D[3],D[4],D[5],D[6],D[7],D[8],D[9],D[10],D[11],D[12],D[13],D[14],D[15],D[16],D[17],D[18],D[19],D[20]
0350 IOLIST E$,E[0],E[1],E[2],E[3],E[4]
0360 IOLIST F$
0370 IOLIST G$
0375 IOLIST G5$,G5
0380 IOLIST G6$,G6
0410 IOLIST K0$,K[0],K[1],K[2],K[3]
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01X KT1...  02O AR1...  03O IC0...  04O FM0...  05O KT2...  06O PO1...  07O AP4...  08O IC6...  10O FMP...  11O IC1...  12O KT0...  13O ZZPARM  16O KTP...  "
0520 GOSUB 9750; ON Z0 GOTO 0521,9900
0585 RT$=""; CALL "RT2PRM",ERR=0586,X3$,X4$,RT$
0590 READ (Z[1],KEY=K9$,DOM=0591)
0600 REM "
0640 READ (Z[13],KEY=X3$(9,3)+"I/C")P0$
0650 READ (Z[13],KEY=X3$(9,3)+"KIT")P1$
0680 GOSUB 6000
1000 REM "
1010 Y8=1; CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,X2
1015 DIM V7$(28); V7$(1,1)="1",V7$(2,1)="1",V7$(5,1)="1",V7$(6,1)="1",V7$(12,1)="1",V7$(13,1)="1",V7$(20,1)="1"
1030 DIM B$(400),B[15],C$(187),C[40],D$(224),S$(50),D1$(200),D2$(100),D[20],E[4],K[3],G$(200)
1035 DIM A$(269),A[12]
1045 A$(1,LEN(A1$))=A1$,A$(25,6)=X3$(15,6); IF A1$="" THEN A$(1,LEN(K9$))=K9$
1060 PRINT (0,ERR=1070)'CF',; GOSUB 6450; GOTO 1100
1070 GOSUB 6000; GOSUB 6450
1100 REM "KEY SEQ
1110 X0=-1,C0=0,X1=0,C9=0,Z9=0
1120 SETERR 9000; C0=ABS(C0),X$=""; IF C0=2 AND X0>0 THEN X0=X0-1 ELSE IF C0<>2 THEN X0=X0+1; IF C0=4 THEN GOTO 9900
1140 ON X0 GOTO 1200,1250,1300,1350,1400,1500
1200 REM "Customer number
1205 IF LEN(A1$)>0 THEN IF POS(" "<>A1$(1,10))<>0 THEN A$(1,10)=A1$(1,10); GOTO 1220
1206 IF ABS(C0)<>2 THEN GOTO 1240
1210 CALL "ZZENTR","AXUX",A{ALL},A$,X4$,X3$,18,3,1,10,C0,"A/R","{1"+X$,K9$,"KT2DAA00","AR1","",""; IF C0=6 THEN GOSUB 6400; C0=1
1212 IF INT(ABS(C0))=3 THEN C0=-ABS(C0); READ (Z[1],KEY=A$(1,10),DOM=1213)
1214 IF C0=-1 AND POS(" "<>A$(1,10))=0 THEN GOTO 1220
1215 IF C0<0 THEN ON INT(ABS(C0)-2) GOTO 1210,6800,9800,6970
1219 IF POS(" "<>A$(1,10))=0 THEN DIM B$(100); GOTO 1225
1220 IF V9<>-2 THEN FIND (Z[2],KEY=A$(1,10),DOM=1210)IOL=0320
1225 PRINT @(31,3),B$(11,30),
1240 GOTO 1120
1250 REM "Item number
1252 IF Q1$>"" THEN A$(1)=Q1$; GOSUB 6450; GOTO 1270
1255 IF LEN(A1$)>10 THEN A$(11,10)=A1$(11,10); GOTO 1270
1260 CALL "ZZENTR","AUX",A{ALL},A$,X4$,X3$,18,4,11,10,C0,"ICE","{2"+X$,"","KT2DAA02","IC0","",""; IF C0=6 THEN GOSUB 6400; C0=1
1261 IF ABS(C0)=2 AND LEN(A1$)>0 THEN A1$=A1$(1,0)
1262 READ (Z[1],KEY=A$(1,20),DOM=1263)
1263 IF ABS(C0)=4 THEN GOTO 9800
1264 IF ABS(INT(C0))=3 THEN GOTO 6800
1265 IF ABS(C0)=2 THEN GOTO 1290
1270 IF V9<>-2 THEN FIND (Z[3],KEY=A$(1,20),DOM=1260)IOL=0330
1275 PRINT @(31,4),C$(21,40),
1280 READ (Z[12],KEY=A$(1,20),DOM=1281)
1282 X$=KEY(Z[12],END=1285); IF X$(1,20)=A$(1,20) THEN GOTO 1290
1285 X$=""; CALL "ZZPROM",".4",X3$,0,"This item is not a Kit.  It has no Kit Components","","",0; GOTO 1260
1290 GOTO 1120
1300 REM "Location code
1305 IF LEN(A1$)>20 THEN A$(21,4)=A1$(21,4); GOTO 1320
1306 Q$="D"+S$(1,10); REM "X$="VALID WAREHOUSE CODES LESS THAN 9000"
1310 CALL "ZZENTR","SZUX",A{ALL},A$,X4$,X3$,18,5,21,4,C0,"","{2"+X$,Q$,"KT2DAA04","FM0D","FM2SKA",""; IF C0=6 THEN GOSUB 6400; C0=1
1311 IF ABS(C0)=2 AND LEN(A1$)>10 THEN A1$=A1$(1,10)
1312 REM "IF A$(21,1)="9" THEN GOTO 01310
1314 READ (Z[1],KEY=A$(1,24),DOM=1315)
1320 IF V9<>-2 THEN FIND (Z[4],KEY="D"+S$(1,10)+A$(21,4),DOM=1310)IOL=0340
1322 FIND (Z[11],KEY=A$(1,24),DOM=1323)IOL=0346
1325 GOSUB 7500
1340 GOTO 1120
1350 REM "Receipt date
1355 IF LEN(A1$)>24 THEN A$(25,6)=A1$(25,6); GOTO 1370
1357 Q$=A$(1,24)
1360 CALL "ZZENTR","DUX",A{ALL},A$,X4$,X3$,18,6,25,6,C0,"","{2"+X$,Q$,"KT2DAA06","ICF","",""; IF C0=6 THEN GOSUB 6400; C0=1
1361 IF ABS(C0)=2 AND LEN(A1$)>20 THEN A1$=A1$(1,20)
1362 READ (Z[1],KEY=A$(1,30),DOM=1363)
1390 GOTO 1120
1400 REM "Sequence no
1407 Q$=A$(1,30); IF A$(31,2)="  " THEN A$(31,2)="01"
1410 CALL "ZZENTR","SZUX",A{ALL},A$,X4$,X3$,44,6,31,2,C0,"","{2"+X$,Q$,"KT2DAA08","ICF","",""; IF C0=6 THEN GOSUB 6400; C0=1
1411 IF ABS(C0)=2 AND LEN(A1$)>24 THEN A1$=A1$(1,24)
1412 READ (Z[1],KEY=A$(1,32),DOM=1413)
1415 IF INT(ABS(C0))=3 THEN GOTO 6800 ELSE IF ABS(C0)=4 THEN GOTO 9900
1440 GOTO 1120
1500 REM "
1505 Z9=-1,C9=0,A2$="",A3$="",A4$="",A5$=""
1510 A1$=A$(1,32)
1520 READ (Z[1],ERR=7200,KEY=A1$,DOM=1600)IOL=0310
1525 Z9=0,V7$=""; GOSUB 5800
1530 IF Q9=1 THEN Q9=0; RETURN 
1590 GOTO 1700
1600 REM "
1620 CALL "ZZPROM","2",X3$,Z,"","","",0; ON Z GOTO 1650,1630
1630 GOTO 1000
1680 GOSUB 7450
1685 GOSUB 7800
1690 GOTO 2000
1700 REM "
1790 GOSUB 6200
1800 REM "
1810 IF X3$(185,1)="I" THEN CALL "ZZPROM","6A",X3$,Z,"","","",0; IF Z=1 THEN Z9=1; GOTO 2000 ELSE GOTO 6700
1820 CALL "ZZPROM",STR(6+C9),X3$,Z,"","","V",X0; ON Z GOTO 1850,6500,1630,6700,1821
1825 GOTO 6700
1830 GOTO 2000
1850 REM "MODIFY
1855 X0=X0-1; IF Z9=1 THEN GOTO 1880 ELSE IF Z9=0 THEN Z9=1
1860 GOSUB 7400
1870 GOSUB 6200
1890 IF Z<0 THEN GOTO 2035 ELSE GOTO 2000
2000 REM "DATA SEQ
2010 C0=0,X0=-1,X1=1
2020 SETERR 9000; X$="",Q$="",C0=ABS(C0),X0=X0+1; IF C0=2 THEN IF X0>0 THEN X0=X0-2
2025 IF INT(C0)=3 THEN GOSUB 7300 ELSE IF C0>3 OR X0<0 THEN GOTO 1800
2038 IF X0<LEN(V7$) THEN V7$(X0+1,1)=""
2039 IF X3$(185,1)="I" THEN ON X0 GOTO 2600,1800
2040 ON X0 GOTO 2100,3250,3300,2150,2200,2250,2300,2350,2400,2450,2500,2550,2600,2650,2700,2750,2800,2850,2900,2950,3000,3050,3100,3150,3200,3350,3400,3450,3500,3550,3600,3650,3700,1800
2100 REM "Receiving report
2110 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,18,8,33,8,C0,"","{3"+X$,"","KT2DAA10","PO7","PO2MAC",""; IF C0=6 THEN GOSUB 6400; C0=1
2140 GOTO 2020
2150 REM "P/O number
2155 P9$=A$(41,9)
2160 CALL "ZZENTR","A",A{ALL},A$,X4$,X3$,18,9,41,9,C0,"P/O","{3"+X$,"","KT2DAA12","PO1","PO2MAA",""; IF C0=6 THEN GOSUB 6400; C0=1
2175 IF P9$<>A$(41,9) THEN GOSUB 7550
2190 GOTO 2020
2200 REM "P/O date
2210 CALL "ZZENTR","D",A{ALL},A$,X4$,X3$,41,9,50,6,C0,"","{3"+X$,"","KT2DAA14","","",""
2240 GOTO 2020
2250 REM "Factory Job
2260 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,66,9,56,12,C0,"","{3"+X$,"","KT2DAA16","","",""
2290 GOTO 2020
2300 REM "Vendor Number
2310 CALL "ZZENTR","AUX",A{ALL},A$,X4$,X3$,18,10,68,10,C0,"A/P","{3"+X$,"","KT2DAA18","AP4","AP2MAB",""; IF C0=6 THEN GOSUB 6400; C0=1
2320 IF V9<>-2 THEN FIND (Z[7],KEY=A$(68,10),DOM=2310)IOL=0370
2325 DIM D1$(200); FIND (Z[4],KEY="P"+A$(68,10)+A$(78,4),DOM=2326)IOL=0345
2330 GOSUB 7600
2340 GOTO 2020
2350 REM "Plant number
2360 CALL "ZZENTR","SZ",A{ALL},A$,X4$,X3$,30,10,78,4,C0,"","{3"+X$,"","KT2DAA20","FM0","FM2SKA",""; IF C0=6 THEN GOSUB 6400; C0=1
2365 IF A$(78,4)="    " THEN GOTO 2371
2370 IF V9<>-2 THEN FIND (Z[4],KEY="P"+A$(68,10)+A$(78,4),DOM=2360)IOL=0345
2375 GOSUB 7600
2390 GOTO 2020
2400 REM "Starting number
2410 CALL "ZZENTR","R",A{ALL},A$,X4$,X3$,18,11,82,9,C0,"","{3"+X$,"","KT2DAA22","","",""
2440 GOTO 2020
2450 REM "Ending number
2460 CALL "ZZENTR","R",A{ALL},A$,X4$,X3$,18,12,91,9,C0,"","{3"+X$,"","KT2DAA24","","",""
2490 GOTO 2020
2500 REM "Total cost
2501 GOTO 2020
2510 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,41,11,0,621,C0,M0$,"{3"+X$,"","KT2DAA26","","",""
2540 GOTO 2020
2550 REM "Total Freight
2551 GOTO 2020
2560 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,66,11,1,621,C0,M0$,"{3"+X$,"","KT2DAA28","","",""
2590 GOTO 2020
2600 REM "Bin number
2610 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,41,12,100,10,C0,"","{3"+X$,"","KT2DAA30","","",""
2635 IF ABS(C0)<2 THEN X0=X0+2
2640 GOTO 2020
2650 REM "Order number
2651 GOTO 2020
2660 CALL "ZZENTR","A",A{ALL},A$,X4$,X3$,66,12,110,8,C0,"O/P","{3"+X$,"","KT2DAA32","FS1","FM2ODA",""; IF C0=6 THEN GOSUB 6400; C0=1
2670 IF V9<>-2 THEN FIND (Z[5],KEY=A$(110,8),DOM=2671)IOL=0350
2690 GOTO 2020
2700 REM "Line number on order
2701 GOTO 2020
2710 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,76,12,118,3,C0,"","{3"+X$,"","KT2DAA34","FS2","FM2ODB",""; IF C0=6 THEN GOSUB 6400; C0=1
2720 IF V9<>-2 THEN FIND (Z[8],KEY=A$(118,3),DOM=2721)IOL=0360
2740 GOTO 2020
2750 REM "Primary unit
2760 CALL "ZZENTR","SU",A{ALL},A$,X4$,X3$,18,14,121,4,C0,"","{3"+X$,"","KT2DAA36","","",""
2765 D2=1; GOSUB 7650
2790 GOTO 2020
2800 REM "Packaging unit
2805 IF ABS(C0)<>2 AND POS(" "<>A$(125,4))=0 THEN GOTO 2020
2808 X$="Enter Sub-packaging Unit of Measure - eg. SW (shrinkwraps)"
2810 CALL "ZZENTR","SU",A{ALL},A$,X4$,X3$,2,15,125,4,C0,"","{3"+X$,"","KT2DAA38","","",""
2815 IF A$(125,4)="    " THEN A[2]=0
2820 GOSUB 7650
2840 GOTO 2020
2850 REM "Units per package
2855 IF A$(125,4)="    " THEN GOTO 2020
2858 X$="Enter number of sub-packages in the primary unit"
2860 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,18,15,2,601,C0,M3$,"{3"+X$,"","KT2DAA40","","",""
2865 GOSUB 7700
2890 GOTO 2020
2900 REM "Units per primary/package unit
2905 X$="Back up to previous field to enter Sub-Packaging, if required"
2910 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,18,16,3,601,C0,M3$,"{3"+X$,"","KT2DAA42","","",""
2915 GOSUB 7700
2940 GOTO 2020
2950 REM "Quantity
2960 CALL "ZZENTR","NM",A{ALL},A$,X4$,X3$,6,19,4,702,C0,M4$,"{3"+X$,"","KT2DAA44","","TPALAA",""; IF C0=6 THEN GOSUB 6400; C0=1
2970 GOSUB 7700
2990 GOTO 2020
3000 REM "Sales Price
3001 IF P1$(11,1)="Y" THEN GOTO 2020
3002 IF P1$(14,1)="Y" THEN A[5]=C[0]; REM "SSP# 139995
3005 X$="ONLY enter a price if this lot will be sold to ALL customers at this price"
3010 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,46,14,5,621,C0,M0$,"{3"+X$,"","KT2DAA46","","",""
3020 IF A[5]=0 THEN PRINT @(66,14),'CL',; A$(129,4)="",A[6]=0; GOTO 2020
3040 GOTO 2020
3050 REM "U/M
3055 IF A[5]=0 THEN GOTO 2020
3060 CALL "ZZENTR","SU",A{ALL},A$,X4$,X3$,66,14,129,4,C0,"","{3"+X$,"","KT2DAA48","ZZPARM","",""; IF C0=6 THEN GOSUB 6400; C0=1
3070 IF POS(" "<>A$(129,4))>0 THEN FIND (Z[13],KEY="U/M"+A$(129,4),DOM=3060)IOL=0375 ELSE IF A[5]<>0 THEN GOTO 3060
3075 GOTO 2020
3080 X0=X0-1; GOTO 3050
3100 REM "Units per u/m
3102 IF POS(" "<>A$(129,4))=0 THEN A[6]=0; PRINT @(72,14),'CL',; GOTO 2020 ELSE FIND (Z[13],KEY="U/M"+A$(129,4),DOM=3080)IOL=0375
3105 IF G5$(20,1)="Y" THEN A[6]=G5; PRINT @(72,14),A[6]:M2$,; GOTO 2020
3110 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,72,14,6,501,C0,M2$,"{3"+X$,"","KT2DAA50","","",""
3120 IF A[6]<=0 AND A[5]<>0 THEN A[6]=1; GOTO 3110
3140 GOTO 2020
3150 REM "Customer PO
3160 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,46,15,133,15,C0,"","{3"+X$,"","KT2DAA52","","",""
3190 GOTO 2020
3200 REM "Invoice number
3201 GOTO 2020
3210 CALL "ZZENTR","A",A{ALL},A$,X4$,X3$,71,15,148,7,C0,"AR6","{3"+X$,"","KT2DAA54","","",""
3240 GOTO 2020
3250 REM "SHORT CARTON
3260 CALL "ZZENTR","Y",A{ALL},A$,X4$,X3$,41,8,155,1,C0,"","{3"+X$,"","KT2DAA67","","",""
3290 GOTO 2020
3300 REM "Audit Control #
3305 GOTO 2020
3310 CALL "ZZENTR","Z",A{ALL},A$,X4$,X3$,66,8,196,6,C0,"","{3"+X$,"","KT2DAA69","","",""
3340 GOTO 2020
3350 REM "Comments
3355 X$="Optional comments"
3360 CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,38,17,156,40,C0,"","{3"+X$,"","KT2DAA71","","",""
3390 GOTO 2020
3400 REM "Lot Number
3401 GOTO 2020
3405 X$="Lot Number assigned during receiving - normally not changed"
3410 CALL "ZZENTR","Z",A{ALL},A$,X4$,X3$,37,18,234,8,C0,"","{3"+X$,"","KT2DAA73","","",""
3440 GOTO 2020
3450 REM "Storage Expiration Date
3451 GOTO 2020
3455 X$="Storage Expiration Date"
3460 CALL "ZZENTR","D",A{ALL},A$,X4$,X3$,51,18,250,6,C0,"","{3"+X$,"","KT2DAA75","","",""
3490 GOTO 2020
3500 REM "Product Code
3502 IF P0$(64,1)<>"Y" THEN GOTO 2020
3505 X$="Product Code"
3510 CALL "ZZENTR","SUZ",A{ALL},A$,X4$,X3$,66,18,242,3,C0,"","{3"+X$,"","KT2DAA77","","",""
3520 REM (FILE FMP) IF POS(" "<>A$(242,3))>0 THEN FIND (Z(10),KEY="T"+A$(242,3),DOM=03510)
3540 GOTO 2020
3550 REM "Commission Code
3552 IF P0$(64,1)<>"Y" THEN GOTO 2020
3555 X$="Commission Code"
3560 CALL "ZZENTR","SUZ",A{ALL},A$,X4$,X3$,74,18,245,5,C0,"","{3"+X$,"","KT2DAA79","","",""
3570 REM (FILE AR4) IF POS(" "<>A$(245,5))>0 THEN FIND (Z(11),KEY=A$(245,5),DOM=03560)
3590 GOTO 2020
3600 REM "Standard Unit Cost"
3602 IF P0$(64,1)<>"Y" THEN GOTO 2020
3605 X$="Standard Unit Cost"
3610 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,5,21,7,621,C0,M0$,"{3"+X$,"","KT2DAA81","","",""
3620 IF A[7]=0 THEN A[8]=0,A$(256,4)=""; PRINT @(22,21),"    ",@(32,21),A[8]:M2$,; GOTO 2020
3640 GOTO 2020
3650 REM 
3652 IF P0$(64,1)<>"Y" OR A[7]=0 THEN GOTO 2020
3655 X$="Standard Unit Cost Unit of Measure"
3660 CALL "ZZENTR","SU",A{ALL},A$,X4$,X3$,22,21,256,4,C0,"","{3"+X$,"","KT2DAA83","","",""
3670 IF POS(" "<>A$(256,4))>0 THEN FIND (Z[13],KEY="U/M"+A$(256,4),DOM=3660)IOL=0380 ELSE IF A[7]<>0 THEN GOTO 3660
3680 GOTO 2020
3690 X0=X0-1; GOTO 3650
3700 REM 
3702 IF P0$(64,1)<>"Y" THEN GOTO 2020
3704 IF POS(" "<>A$(256,4))=0 THEN A[8]=0; PRINT @(32,21),A[8]:M2$,; GOTO 2020 ELSE FIND (Z[13],KEY="U/M"+A$(256,4),DOM=3690)IOL=0380
3706 IF G6$(20,1)="Y" THEN A[8]=G6; PRINT @(32,21),A[8]:M2$,; GOTO 2020
3708 X$="Standard Unit Cost Quantity per Unit of Measure"
3710 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,32,21,8,501,C0,M2$,"{3"+X$,"","KT2DAA85","","",""
3720 IF A[8]<=0 AND A[1]<>0 THEN A[8]=1; GOTO 3710
3740 GOTO 2020
4130 S1=0; CALL "IC2LCA",X3$,X4$,F9$,13,X$,Q0,C,F,S1,S1$,S2,S3$,S3,S4
5800 REM "Alt sort keys
5815 FIND (Z[6],KEY=A$(41,9),DOM=5816)IOL=0360
5820 FIND (Z[7],KEY=A$(68,10),DOM=5821)IOL=0370
5825 FIND (Z[4],KEY="P"+A$(68,10)+A$(78,4),DOM=5826)IOL=0345
5840 FIND (Z[13],KEY="U/M"+A$(129,4),DOM=5841)IOL=0375
5890 RETURN 
6000 REM "BACKGROUND
6005 PRINT (0,ERR=6016)'SB',
6060 PRINT @(1,3+V0),"Customer number:",@(5,4+V0),"Item number:",@(3,5+V0),"Location code:",@(4,6+V0),"Receipt date:",@(31,6+V0),"Sequence no:",@(0,7+V0),Z0$,
6070 PRINT @(0,8+V0),"Receiving report:",@(6,9+V0),"P/O number:",@(31,9+V0),"P/O date:",@(53,9+V0),"Factory Job:",@(4,10+V0),"Vendor/Plant:",@(1,11+V0),"Starting number:",@(29,11+V0),"",@(55,11+V0),"",@(3,12+V0),"Ending number:",@(27,12+V0),"Bin Location:",@(56,12+V0),"         ",@(0,13+V0),"--------------------------------+-----------------------------------------------",@(4,14+V0),"Primary unit:",@(32,14+V0),"|Sales Price:",@(61,14+V0),"U/M:",@(9,15+V0),"   ",@(32,15+V0),"|Customer PO:",@(62,15+V0),"        ",@(4,16+V0),"        ",@(32,16+V0),"+-----------------------------------------------",@(7,18+V0),"Quantity",
6080 PRINT @(27,8),"Short Carton?",@(49,8),"                ",
6085 PRINT @(31,17),"Cmts:",
6090 IF P0$(65,1)="Y" THEN PRINT @(31,18),"Lot#:",@(46),"    ",
6100 IF P0$(64,1)="Y" THEN PRINT @(62),"PC:",@(70),"CC:",@(0,21),"SUC:",@(17),"U/M:",@(27),"QTY:",
6165 PRINT (0,ERR=6166)'SF',
6190 RETURN 
6200 REM "DISPLAY DATA
6205 REM "D9 controls returns for displays of pieces of the screen
6215 GOSUB 6450
6220 PRINT @(18,8),A$(33,8),@(41,8),A$(155,1),@(66,8),A$(196,6)
6224 CALL "ZZDISP","A   ",A$(41,9),"P/O",X3$,"","",18,9,X4$
6228 PRINT @(41,9),FND$(A$(50,6)),@(66,9),A$(56,12),
6229 GOSUB 7600
6232 CALL "ZZDISP","A   ",A$(68,10),"A/P",X3$,"","",18,10,X4$
6236 PRINT @(30,10),A$(78,4),@(18,11),A$(82,9),@(18,12),A$(91,9),
6237 IF D9=1 THEN D9=0; RETURN ; REM "P/O stuff
6240 REM CALL "ZZDISP","NM  M",STR(A(0):M0$),"",X3$,"","",41,11,X4$
6244 REM CALL "ZZDISP","NM  M",STR(A(1):M0$),"",X3$,"","",66,11,X4$
6248 PRINT @(41,12),A$(100,10),
6252 CALL "ZZDISP","A   ",A$(110,8),"O/P",X3$,"","",66,12,X4$
6256 PRINT @(76,12),A$(118,3),@(18,14),A$(121,4),@(4,15),A$(125,4),
6257 GOSUB 7650
6260 IF A[2]<>0 THEN CALL "ZZDISP","NM  M",STR(A[2]:M3$),"",X3$,"","",18,15,X4$
6264 CALL "ZZDISP","NM  M",STR(A[3]:M3$),"",X3$,"","",18,16,X4$
6268 CALL "ZZDISP","NM  M",STR(A[4]:M4$),"",X3$,"","",6,19,X4$
6272 CALL "ZZDISP","NM  M",STR(A[5]:M0$),"",X3$,"","",46,14,X4$
6276 PRINT @(66,14),A$(129,4),
6280 CALL "ZZDISP","NM  M",STR(A[6]:M2$),"",X3$,"","",72,14,X4$
6284 PRINT @(46,15),A$(133,15),
6288 CALL "ZZDISP","A   ",A$(148,7),"AR6",X3$,"","",71,15,X4$
6292 GOSUB 7700
6293 PRINT @(38,17),A$(156,40),
6295 IF P0$(65,1)="Y" THEN PRINT @(37,18),A$(234,8),; REM @(51,18),FND$(A$(250,6)),
6300 IF P0$(64,1)="Y" THEN PRINT @(66,18),A$(242,3),@(74,18),A$(245,5),@(5,21),A[7]:M0$,@(22,21),A$(256,4),@(32,21),A[8]:M2$,
6390 RETURN 
6400 REM "WHOLE SCREEN
6405 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,0
6420 GOSUB 6000
6430 IF C9>0 THEN GOSUB 6200 ELSE GOSUB 6450
6440 IF ABS(C0)>4 THEN C0=ABS(C0)-5
6445 RETURN 
6450 REM "DISPLAY KEYS
6455 IF C9<0 THEN GOTO 6445
6460 CALL "ZZDISP","A   ",A$(1,10),"A/R",X3$,"","",18,3,X4$
6464 PRINT @(31,3),B$(11,30),
6468 CALL "ZZDISP","A   ",A$(11,10),"I/C",X3$,"","",18,4,X4$
6472 PRINT @(31,4),C$(21,40),@(18,5),A$(21,4),
6474 GOSUB 7500
6475 PRINT @(18,6),FND$(A$(25,6)),@(44,6),A$(31,2),
6490 RETURN 
6500 REM "DELETE
6510 REMOVE (Z[1],KEY=A1$,DOM=6511)
6520 GOSUB 8500
6590 A1$=""; GOTO 1630
6600 REM "ALT KEY DATA READS
6605 FIND (Z[2],KEY=A$(1,10),DOM=6606)IOL=0320
6610 FIND (Z[3],KEY=A$(11,10),DOM=6611)IOL=0330
6615 FIND (Z[4],KEY=A$(21,4),DOM=6616)IOL=0340
6690 RETURN 
6700 REM "ADD ENTRY
6705 IF Z9=0 THEN GOTO 6790
6710 WRITE (Z[1],KEY=A1$)IOL=0310
6720 GOSUB 8000
6790 C9=0; IF Z=6 OR K1=0 THEN GOTO 9900 ELSE IF Z<4 THEN GOTO 1000 ELSE C0=-(3.1+(Z-4)/10); GOTO 6800
6800 REM "NEXT ENTRY IN FILE
6805 ON 10*FPT(C0)+2 GOTO 6850,6806
6810 A1$=KEY(Z[1],END=6895)
6820 IF A1$="" THEN GOTO 6800 ELSE IF A1$(1,LEN(K9$))<>K9$ THEN GOTO 6895
6825 A$(1,LEN(A1$))=A1$
6830 GOSUB 6600
6835 GOSUB 6450
6840 GOTO 1515
6850 REM "PRIOR ENTRY
6855 CALL "ZZKEYP",ERR=6856,Z[1],A1$; GOTO 6820
6860 PRINT 'RB',; CALL "ZZKEYL",ERR=6861,Z[1],A1$; GOTO 6820
6865 GOTO 1100
6870 GOTO 6895
6890 GOTO 1515
6895 IF A1$="" THEN GOTO 6860 ELSE PRINT 'RB',; READ (Z[1],KEY=K9$,DOM=6896)
6898 ON S9 GOTO 6810,1100
7200 REM "Forced read
7210 IF ERR<>0 THEN GOTO 9000
7220 CALL "ZZREAD",Z[1],A1$,A$,A{ALL},S8; ON S8 GOTO 7221,1630
7230 GOSUB 6200
7240 CALL "ZZPROM","E0",X3$,0,"","","",0; GOTO 7290
7250 CALL "ZZPROM","E0A",X3$,0,"","","",0; GOTO 7290
7290 GOTO 1630
7300 REM 
7310 ON FPT(C0)*10 GOTO 7390,7325,7330,7390
7325 IF V8$="" THEN X0=X0+4; GOTO 7390 ELSE X0=NUM(V8$(POS(STR(X0:"00")<=V8$,2),2)); GOTO 7390
7330 IF V8$="" THEN X0=X0-6; GOTO 7335 ELSE X0=POS(STR(X0-1:"00")<=V8$,2)-2; IF X0<0 THEN X0=0; GOTO 7390 ELSE X0=NUM(V8$(X0,2)); GOTO 7390
7335 IF X0<0 THEN X0=0; GOTO 7390
7390 IF X0>0 THEN X0=X0-0
7395 C0=3; RETURN 
7400 REM "EXTRACT
7410 EXTRACT (Z[1],ERR=7200,KEY=A1$,DOM=7440)IOL=0310
7420 C9=1,Z9=1; GOSUB 5800
7440 RETURN 
7450 REM "EXTRACT NEW ENTRY
7460 WRITE (Z[1],KEY=A1$,DOM=7250)IOL=0310; GOTO 7400
7490 RETURN 
7500 REM "Print location
7505 L9$=FNS$(D$(16,35))
7510 IF POS(" "<>D$(111,16))<>0 THEN L9$=L9$+" "+FNS$(D$(111,16))+", "+D$(127,2)
7512 IF LEN(L9$)>37 THEN L9$=D$(16,35)
7515 PRINT @(31,5),'CL',L9$,
7545 RETURN 
7550 REM "DEFAULT P/O STUFF IF P/O NUMBER CHANGES
7555 FIND (Z[6],KEY=A$(41,9),DOM=7595)IOL=0360
7560 A$(50,6)=F$(192,6),A$(56,12)=F$(248,12),A$(68,14)=F$(7,14)
7565 FIND (Z[7],KEY=A$(68,10),DOM=7566)IOL=0370
7570 DIM D1$(200); FIND (Z[4],KEY="P"+A$(68,10)+A$(78,4),DOM=7571)IOL=0345
7580 D9=1; GOSUB 6228
7595 RETURN 
7600 REM "Display Vendor, Plant name
7610 DIM G1$(40)
7620 IF POS(" "<>D1$(111,16))=0 THEN G1$(1)=G$(11,35) ELSE G1$(1)=FNS$(G$(11,35))+"-"+FNS$(D1$(111,16))+", "+D1$(127,2)
7635 PRINT @(36,10+V0),G1$,; G1$=""
7645 RETURN 
7650 REM "Display units properly
7655 IF POS(" "<>A$(125,4))>0 THEN PRINT @(7,15),"in a ",A$(121,4),":", ELSE PRINT @(6,15),S$(1,25),
7660 PRINT @(1,16),"Items in a ",; IF POS(" "<>A$(125,4))>0 THEN PRINT @(12,16),A$(125,4),":", ELSE PRINT @(12,16),A$(121,4),":",
7664 REM "Handle case prior to entry of A$(125,4)
7680 GOSUB 7700
7695 RETURN 
7700 REM "Print quantity explantion line
7710 IF A[4]=1 THEN Q$=FNC$(A$(121,4))+"  of  " ELSE Q$=FNC$(A$(121,4))+"s  of  "
7715 IF A$(125,4)="    " THEN Q$=Q$+FNR$(STR(A[3]:M3$)) ELSE Q$=Q$+FNR$(STR(A[2]:M3$))+" "+FNC$(A$(125,4))+"s  of  "+FNR$(STR(A[3]:M3$))
7725 IF A$(125,4)="    " THEN Q=A[4]*A[3] ELSE Q=A[4]*A[2]*A[3]
7740 PRINT @(17,19+V0),'CL',Q$,@(54),"  =  "+STR(Q:M4$),
7795 RETURN 
7800 REM "Initialize New Entry
7810 A$(68,14)=C$(82,14),A$(121,4)="CASE"; IF C[19]<>0 THEN A[3]=C[19]
7820 A$(100,10)=D2$(35,10)
7825 CALL "IC2LNO",X3$,Z[13],X$; A$(234,8)=X$
7830 GOSUB 6200
7840 RETURN 
8000 REM "Commit the Lots for the Components
8010 DIM T[1],I1$(0),I2$(0),I3$(0)
8020 READ (Z[12],KEY=A$(1,20),DOM=8021)
8040 READ (Z[12],END=8190)IOL=0410
8045 IF A$(1,20)<>K0$(1,20) THEN GOTO 8190
8047 IF K0$(50,1)="S" THEN DIM I$(35); I$(1,24)=K0$(21,20)+K0$(45,4),E(0)=K(0); GOTO 8130
8050 READ (Z[3],KEY=K0$(21,20),DOM=8040)IOL=0330
8060 DIM I$(35); FLAG$="",I$(1,24)=K0$(21,20)+K0$(45,4); IF POS(" "<>I$(21,4))=0 THEN I$(21,4)=A$(21,4)
8065 IF A$(125,4)="    " THEN Q=A[4]*A[3] ELSE Q=A[4]*A[2]*A[3]
8070 I$(25,11)="KT"+A$(234,8),Q0=Q*K[2],Q1=Q0; M$=P0$(52,1); IF POS(M$="AB")=0 THEN M$="A"
8072 IF I$(21,1)<>"9" AND A$(21,1)="9" THEN I1$=I1$+I$,I2$=I2$+"WHSE ERROR",I3$=I3$+"WHSE ERROR",FLAG$="Y"
8075 IF C$(112,1)<>"Y" THEN GOSUB 8600; GOTO 8100
8080 S1=0; CALL "IC2LCA",X3$,X4$,M$,0,I$,Q1,C,F,S1,S1$,S2,S3$,S3,S4
8090 IF Q1<>Q0 AND FLAG$<>"Y" THEN I1$=I1$+I$,I2$=I2$+STR(Q1:M5$),I3$=I3$+STR(Q0:M5$),CREATE_PO$=CREATE_PO$+K0$(49,1),KT2_K$=KT2_K$+A1$+I$(1,20),E(3)=Q1,E[4]=Q0 ! SSP 208675
8100 IF I$(21,1)="9" THEN C=0,F=0
8110 T[0]=T[0]+C,T[1]=T[1]+F
8120 E[0]=Q1,E[1]=C,E[2]=F
8130 DIM E$(65); E$(1)=A1$+I$(1,24) ! SSP 208675
8155 REM "Component work file with value of committed lot(s)
8160 WRITE (Z[5],KEY=E$(1,52))IOL=0350; SIGN=1; GOSUB 8650
8180 GOTO 8040
8190 IF I1$="" THEN GOTO 8370
8200 FOR I=1 TO LEN(I1$) STEP 35
8205 J=(I-1)/35*10+1,Q$="Component item no.: "
8210 CALL "ZZDISP","AX",I1$(I,10),"A/R",X3$,X$,"",0,0,X4$
8220 IF FNS$(X$)>"" THEN Q$=Q$+FNS$(X$)+"-"
8230 CALL "ZZDISP","AX",I1$(I+10,10),"I/C",X3$,X$,"",0,0,X4$
8235 Q$=Q$+FNS$(X$)+" Whse: "+I1$(I+20,4); IF MID(I3$,J,10)="WHSE ERROR" THEN Q$=Q$+" ERROR-component whse must be 9xxx"; GOTO 8250
8240 Q$=Q$+" Req qty= "+FNR$(MID(I3$,J,10))+" Avl qty= "+FNR$(I2$(J,10))
8250 IF %GUI=0 THEN CALL "ZZPROM",".4",X3$,0,Q$,"","",0 ELSE MSGBOX Q$,"F.Y.I","!,tim=5"
8255 DD=INT(I/35)+1; IF MID(CREATE_PO$,DD,1)="Y" THEN GOSUB CREATE_PO
8260 NEXT I
8270 IF %GUI=0 THEN PRINT @(0,21),'CE',"The component inventory must be resolved before posting this production entry", ELSE MSGBOX MSG("KTGDAA_M1"),MSG("WARNING"),"!,TIM=5"
8280 IF %GUI=0 THEN CALL "ZZPROM",".4",X3$,0,"Quantity Required being set to 0 -or- you may delete the entry","","",0 ELSE MSGBOX MSG("KT2DAA_1"),"","!,TIM=5"
8300 ! GOSUB 8500 SEE LINE***************
8310 A[12]=A[4] ! SSP
8330 DIM T[1]; A[4]=0
8370 A[0]=T[0],A[1]=T[1]
8380 IF %GUI=0 THEN WRITE (Z[1],KEY=A1$)IOL=0310
8390 RETURN 
8500 REM "Remove records from Component Work File/Decommit Lots
8510 READ (Z[5],KEY=A1$,DOM=8511)
8520 READ (Z[5],END=8590)IOL=0350
8530 IF MID(E$,1,LEN(A1$))<>A1$ THEN GOTO 8590
8540 REMOVE (Z[5],KEY=E$(1,52),DOM=8541)
8545 READ (Z[3],KEY=E$(33,20),DOM=8520)IOL=0330; SIGN=-1; GOSUB 8650; IF C$(112,1)<>"Y" THEN GOTO 8520
8550 DIM I$(35); I$(1,24)=E$(33,24),I$(25,11)="KT"+A$(234,8)
8560 CALL "IC2LCA",X3$,X4$,"D",0,I$,0
8565 REMOVE (Z[16],KEY=E$(57,9)+"001",DOM=*NEXT); MSGBOX "Component : "+E$(33,20)+SEP+" Has P/O : "+E$(57,9),"F.Y.I","!,tim=5" ! SSP 208675
8580 GOTO 8520
8590 RETURN 
8600 REM "Compute price for Non-Lotted Item
8610 DIM D[20]; READ (Z[11],KEY=I$(1,24),DOM=8611)IOL=0347
8615 REM "Use Loc Avg Cost 1st, then Overall Avg Cost, then Salesperson Cost
8620 IF D[2]<>0 THEN U=D[2] ELSE IF C[18]<>0 THEN U=C[18] ELSE U=C[20]
8625 CALL "FM2EXT",Z[13],0,C$(124,4),C[15],Q1,U,C,0
8630 Q0=D[3]+D[4]-D[5]+D[6]-D[7]-D[13]; IF Q0>=Q1 OR FLAG$="Y" THEN GOTO 8640
8635 I1$=I1$+I$,I2$=I2$+STR(Q0:M5$),I3$=I3$+STR(Q1:M5$)
8637 CREATE_PO$=CREATE_PO$+K0$(49,1),KT2_K$=KT2_K$+A1$+I$(1,20)
8640 RETURN 
8650 REM "Adjust Component Production Commitments Inventory in bucket 13 of IC1
8660 DIM D3$(58),D[20]; D3$(1,24)=E$(33,24)
8665 IF MID(K0$,50,1)="S" THEN RETURN 
8670 EXTRACT (Z[11],KEY=D3$(1,24),DOM=8671)IOL=0347
8690 D[13]=D[13]+E[0]*SIGN
8700 WRITE (Z[11],KEY=D3$(1,24))IOL=0347
8702 IF RT$>"" THEN IF RT$(7,1)="H" THEN CUST$=D3$(1,10); CALL "RT2WOC",ERR=8703,X3$,X4$,CUST$,"IC1...","U",D3$(1,24)
8710 WRITE (Z[8],KEY=D3$(21,4)+C$(61,3)+D3$(1,20))
8740 RETURN 
8910 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
8915 DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
8920 DEF FNB$(Z9$)=X3$(214-6*NUM(Z9$),1)
8925 DEF FNS$(Z9$)=Z9$(1,POS("        "=Z9$+"        ")-1)
8930 DEF FNR$(Z9$)=Z9$(POS(" "<>Z9$))
8949 DEF FNC$(Z9$)=Z9$(1,POS(" "=Z9$+" ")-1)
9000 REM "ERROR PROCESSING
9010 Y5=ERR,Y6=TCB(5); IF Y5=68 OR Y5=69 THEN GOTO 9500
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9120 ON Y8 GOTO 9900,0990,9920
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)<>"1" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; SETESC 9300; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9700 REM "PROG FLOW
9710 IF U1$="" THEN REMOVE (Z[13],KEY=U0$,DOM=9900); GOTO 9900
9720 WRITE (Z[13],KEY=U0$)U0$,U1$
9730 RUN U1$(1,6)
9740 RETURN 
9750 REM "FILES
9760 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
9790 RETURN 
9800 REM "EXIT PROGRAM
9900 REM "END PROGRAM
9905 Y8=2
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
20000 ! 100 - Initialization
20010 INIT:
20015 X3$=%X3$,X4$=%X4$
20020 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
20030 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
20040 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
20050 GOSUB SETUP_KEYS
20060 _FILE_NAME$="KT1"+%C$
20070 KT1:IOLIST CUST_DIV$:[LEN(2,SEP=SEP)],CUST_CODE$:[LEN(8,SEP=SEP)],ITEM_CODE$:[LEN(10,SEP=SEP)],LOC_CODE$:[LEN(4,SEP=SEP)],RECEIPT_DATE$:[LEN(6,SEP=SEP)],SEQ_NUM$:[LEN(2,SEP=SEP)],RECVG_REPORT_NUM$:[LEN(8,SEP=SEP)],PO_DIV$:[LEN(2,SEP=SEP)],PO_NUM$:[LEN(7,SEP=SEP)],PO_DATE$:[LEN(6,SEP=SEP)],FACTORY_JOB_NUM$:[LEN(12,SEP=SEP)],VEND_DIV$:[LEN(2,SEP=SEP)],VEND_CODE$:[LEN(8,SEP=SEP)],PLANT_CODE$:[LEN(4,SEP=SEP)],STARTING_NUM$:[LEN(9,SEP=SEP)],ENDING_NUM$:[LEN(9,SEP=SEP)],BIN_LOC$:[LEN(10,SEP=SEP)],ORDER_DIV$:[LEN(2,SEP=SEP)],ORDER_NUM$:[LEN(6,SEP=SEP)],ORDER_LINE_NUM$:[LEN(3,SEP=SEP)],PRIMARY_UM$:[LEN(4,SEP=SEP)],PACKAGING_UM$:[LEN(4,SEP=SEP)],SELL_UM$:[LEN(4,SEP=SEP)],CUST_PO$:[LEN(15,SEP=SEP)],INV_NUM$:[LEN(7,SEP=SEP)],SHORT_OR_BROKEN_CTN$:[LEN(1,SEP=SEP)],COMMENT$:[LEN(40,SEP=SEP)],RECVG_AUDIT_NUM$:[LEN(6,SEP=SEP)],RELEASED_ON_INV_NUM$:[LEN(7,SEP=SEP)],RELEASED_AUDIT_NUM$:[LEN(6,SEP=SEP)],ITEM_REV_DATE$:[LEN(6,SEP=SEP)],TRANS_IN_PROCESS_LNK$:[LEN(11,SEP=SEP)],PHYS_INV_LINK_TO_ICL$:[LEN(2,SEP=SEP)],LOT_NUM$:[LEN(8,SEP=SEP)],PROD_CODE_OVERRIDE$:[LEN(3,SEP=SEP)],COMM_CODE_OVERRIDE$:[LEN(5,SEP=SEP)],STORAGE_EXP_DATE$:[LEN(6,SEP=SEP)],STND_COST_UOM$:[LEN(4,SEP=SEP)],KT1_UNUSED_1$:[LEN(SEP,SIZ=10)],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12
20080 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
20090 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
20100 _ZZPARM=HFN; OPEN (_ZZPARM)"ZZPARM"; READ (_ZZPARM,KEY=FID(0)+"      ")X3$,*,X4$
20110 CALL "ZGBATC",X3$,X4$,"KT2DAA  ",X9; IF X9=1 THEN CMD_STR$="END"; RETURN 
20120 %KTGDAA$=MSG("KTGDAA"); IF STP(X3$(174,4))<>"" THEN %KTGDAA$=%KTGDAA$+" - Batch No: "+X3$(174,4)
20130 DIM Z[NUM(X3$(60,3))]; Z$="01X KT1...  02X KT2...  "; CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; CLOSE (Z(1)),(Z(2)); CLOSE (_FIL_NO); OPEN (_FIL_NO,IOL=KT1)%KT1$
20140 _FILE_NAME$="IC0"+%C$,_IC0=HFN; OPEN (_IC0,IOL=*,REC=_IC0$,ERR=OPEN_ERR)_FILE_NAME$
20150 _FILE_NAME$="AR1"+%C$,_AR1=HFN; OPEN (_AR1,IOL=*,REC=_AR1$,ERR=OPEN_ERR)_FILE_NAME$
20160 _FILE_NAME$="FM0"+%C$,_FM0=HFN; OPEN (_FM0,IOL=*,REC=_FM0$,ERR=OPEN_ERR)_FILE_NAME$
20165 IF X3$(174,4)=DIM(4) THEN _FILE_NAME$="KT2"+%C$ ELSE _FILE_NAME$="KT2"+X3$(174,4)
20170 _KT2=HFN; OPEN (_KT2,REC=_KT2$,ERR=OPEN_ERR)_FILE_NAME$
20180 _FILE_NAME$="PO1"+%C$,_PO1=HFN; OPEN (_PO1,IOL=*,REC=_PO1$,ERR=OPEN_ERR)_FILE_NAME$
20190 _FILE_NAME$="AP4"+%C$,_AP4=HFN; OPEN (_AP4,IOL=*,REC=_AP4$,ERR=OPEN_ERR)_FILE_NAME$
20200 _FILE_NAME$="IC6"+%C$,_IC6=HFN; OPEN (_IC6,ERR=OPEN_ERR)_FILE_NAME$
20210 _FILE_NAME$="FMP"+%C$,_FMP=HFN; OPEN (_FMP,ERR=OPEN_ERR)_FILE_NAME$
20220 _FILE_NAME$="IC1"+%C$,_IC1=HFN; OPEN (_IC1,IOL=*,REC=_IC1$,ERR=OPEN_ERR)_FILE_NAME$
20230 _FILE_NAME$="AR4"+%C$,_AR4=HFN; OPEN (_AR4,IOL=*,REC=_AR4$,ERR=OPEN_ERR)_FILE_NAME$
20240 _FILE_NAME$="KT0"+%C$,_KT0=HFN; OPEN (_KT0,IOL=*,REC=_KT0$,ERR=OPEN_ERR)_FILE_NAME$
20250 _FILE_NAME$="ZZPARM",_ZZP=HFN; OPEN (_ZZP,ERR=OPEN_ERR)_FILE_NAME$; READ (_ZZP,KEY=%X3$(9,3)+"I/C")P0$; READ (_ZZP,KEY=%X3$(9,3)+"KIT")P1$
20255 Z$="03O IC0...  04O FM0...  05O KT2...  07O AP4...  08O IC6...  11O IC1...  12O KT0...  16O KTP...  "
20257 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
20260 RT$=""; CALL "RT2PRM",ERR=*NEXT,X3$,X4$,RT$
20265 IF P1$(11,1)="Y" THEN CALL "*wingrp;Disable",PRICE.GRP$; REFRESH_FLG=1
20270 RETURN 
20280 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
20290 CMD_STR$="END"
20300 RETURN 
20310 ! 300 - Set up the message library
20320 SETUP_LIBRARY:
20330 _SV_MSGLIB$=MSG(*)
20340 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
20350 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 20370
20360 MESSAGE_LIB "*msglib.en"
20370 SET_MSG:GOSUB SETUP_MESSAGES
20380 RETURN 
20390 ! 400 - Set up key information
20400 SETUP_KEYS:
20410 _NUMKEYS=5
20420 DIM _KEYS$[1:5]; _KEYS$[1]="CUSTOMER$",_KEYS$[2]="ITEM_CODE$",_KEYS$[3]="LOC_CODE$",_KEYS$[4]="RECEIPT_DATE$",_KEYS$[5]="SEQ_NUM$"
20430 _KEY1=1
20440 RETURN 
20450 ! 500 - Main panel post_display logic
20460 MAIN_POST_DISPLAY:
20470 MESSAGE_LIB _SV_MSGLIB$
20480 GOSUB CLEAR_REC
20490 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
20500 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
20510 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
20520 RETURN 
20530 ! 900 - Wrapup
20540 WRAPUP:
20550 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
20560 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
20570 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
20580 MESSAGE_LIB _SV_MSGLIB$
20590 SET_PARAM 'KR'=_SV_KR
20595 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
20600 RETURN 
20610 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
20620 FIND_REC:
20625 IF _KCNT=2 THEN GOSUB SEL_ITEM ELSE IF _KCNT=3 THEN GOSUB SEL_LOC ELSE IF _KCNT=5 THEN SEQ_NUM$=STR(NUM(SEQ_NUM$,ERR=*NEXT):"00")
20630 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
20640 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
20650 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
20660 NXT_READ:
20670 _KEY$=CUSTOMER$+ITEM_CODE$+LOC_CODE$+RECEIPT_DATE$+SEQ_NUM$
20680 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
20690 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
20700 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
20710 GOSUB PROCESS_READ
20715 IF P1$(14,1)="Y" THEN A5=_IC0.BASE_PRICE; REM SSP 139995
20717 IF P0$(64,1)<>"Y" THEN CALL "*wingrp;Disable",EXPAND_LOT.GRP$
20720 GOSUB NUM_TO_STR
20730 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
20740 EXIT 
20750 ! 1200 - New RECORD check
20760 NEW_RECORD:
20770 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
20780 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$ ! SSP 199840
20790 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
20800 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
20805 IF P1$(14,1)="Y" THEN A5=_IC0.BASE_PRICE; REM SSP 139995
20807 IF P0$(64,1)<>"Y" THEN CALL "*wingrp;Disable",EXPAND_LOT.GRP$
20810 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
20815 DIM PO_DIV$(2),PO_NUM$(7),VEND_DIV$(2),VEND_CODE$(8),PONUMBER$(9)
20820 RETURN 
20830 ! 1400 - Add RECORD
20840 WRITE_REC:
20850 GOSUB STR_TO_NUM
20860 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
20870 GOSUB REVIEW_WRITE
20880 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
20890 CHANGE_FLG=0
20900 NEXT_ID=_FIRST_KEY
20910 EXIT 
20920 ! 1600 - Delete
20930 DELETE_REC:
20940 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
20950 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
20960 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$ ! SSP 199840
20970 IF _X$<>"YES" THEN RETURN 
20977 DIM C[40],A$(269); A$(1,24)=CUST_DIV$+CUST_CODE$+ITEM_CODE$+LOC_CODE$; A$(234,8)=LOT_NUM$,A$(125,4)=PACKAGING_UM$
20980 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
20985 DIM E[4]; A1$=_KEY$; GOSUB 8500; A1$="" ! REMOVE KT2 components
20990 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
21000 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
21010 CHANGE_FLG=0
21020 NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; GOSUB CLEAR_REC
21030 EXIT 
21040 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
21050 ! 1800 - Clear record
21060 CLEAR_REC:
21070 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21080 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
21090 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
21100 CHANGE_FLG=0
21110 RETURN 
21120 ! 2000 - Browsing mode
21130 ! - Next
21140 NEXT_REC:
21150 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21160 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
21170 NXT_RECORD:
21180 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
21190 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
21200 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
21210 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
21220 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
21230 ! 2200 - Prior record
21240 PRIOR_REC:
21250 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21260 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
21270 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
21280 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
21290 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
21300 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
21310 ! 2400 - First record
21320 FIRST_REC:
21330 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21340 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
21350 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
21360 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
21370 ! 2600 - Last record
21380 LAST_REC:
21390 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
21400 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
21410 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
21420 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
21430 ! 3000 - Subroutines
21440 ! Processing required by READ
21450 PROCESS_READ:
21460 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
21470 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
21480 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
21490 CHANGE_FLG=0,CUSTOMER$=CUST_DIV$+CUST_CODE$,VENDOR$=VEND_DIV$+VEND_CODE$,PONUMBER$=PO_DIV$+PO_NUM$
21500 REM GOSUB SEL_CUSTOMER; GOSUB SEL_ITEM; GOSUB SEL_PLANT; GOSUB SEL_LOC; GOSUB SEL_PC; GOSUB SEL_CC; ID$="PACKAGING_UM"; GOSUB SEL_SUBPACK_UM
21505 GOSUB CHECK_PO_NUMBER
21510 RETURN 
21520 ! 3200 - Review record for changes before WRITE
21530 REVIEW_WRITE:
21540 _CHG1$="",_CHG2$=""
21550 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
21560 GOSUB DETERMINE_CHGS
21570 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
21580 IF _CHG1$="" THEN GOTO CHK2
21590 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
21600 IF _YESNO$="NO" THEN GOTO *RETURN
21610 IF _CHG2$="" THEN GOTO WRT
21620 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
21630 GOSUB INCORPORATE_CHGS
21640 WRT:
21641 PO_DIV$=PONUMBER$(1,2),PO_NUM$=PONUMBER$(3)
21642 M0$="###,###.00-",M1$="####,###.00-",M2$="##,##0-",M3$="###,##0-",M4$="#,###,##0-",M5$="##,###,##0"; DIM A$(269),A[12]
21643 DIM B$(400),B[15],C$(187),C[40],D$(224),S$(50),D1$(200),D2$(100),D[20],E[4],K[3],G$(200)
21644 A$(1,32)=CUST_DIV$+CUST_CODE$+ITEM_CODE$+LOC_CODE$+RECEIPT_DATE$+SEQ_NUM$,A[0]=A0,A[1]=A1,A[2]=A2,A[3]=A3,A[4]=A4; A$(234,8)=LOT_NUM$; A$(125,4)=PACKAGING_UM$; A1$=A$(1,32); GOSUB 8000; A0=A[0],A1=A[1],A2=A[2],A3=A[3],A4=A[4],A1$=""
21645 WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
21650 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
21660 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
21670 GOSUB NUM_TO_STR
21680 REFRESH_FLG=1
21690 RETURN 
21700 WRITE_ERROR:
21710 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
21720 RETURN 
21730 ! 3500 - Display a record
21740 DISP_REC:
21750 GOSUB NUM_TO_STR
21760 REFRESH_FLG=1
21770 RETURN 
21780 ! 3600 - Busy Record display
21790 BUSY_CHK:
21800 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
21810 IF _D$="NO" THEN EXIT 
21820 RETURN 
21830 ! 3790 - See if changes are to be written
21840 CHECK_CHANGES:
21850 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUSTOMER.CTL,_FIRST_FIELD=RECVG_REPORT_NUM.CTL
21860 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
21870 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
21880 IF _YESNO$="YES" THEN GOTO WRITE_REC
21890 CHANGE_FLG=0
21900 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
21910 RETURN 
21920 ! 4000 - Get the current key segment number
21930 GET_CURKEY:
21940 FOR _CURKEY=1 TO _NUMKEYS
21950 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO EXIT_KEY
21960 NEXT _CURKEY
21970 EXIT_KEY:
21980 ON _CURKEY GOSUB NXT,SEL_CUSTOMER,SEL_ITEM,SEL_LOC,SEL_DATE,SEL_SEQ
21990 NXT:
22000 RETURN 
22010 ! 9000 - Retrieve messages from the *msglib.xxx library
22020 SETUP_MESSAGES:
22030 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR"),_MSG_DIRECTORY$=MSG("DIRECTORY"),_MSG_END_OF_FIL$=MSG("END_OF_FIL"),_MSG_FILOPNERR1$=MSG("FILOPNERR1"),_MSG_JUST_CHECK$=MSG("JUST_CHECK")
22040 _MSG_MANDATORY$=MSG("MANDATORY"),_MSG_NEXT$=MSG("NEXT"),_MSG_NON_NUMER$=MSG("NON_NUMER"),_MSG_NOT_FOUND$=MSG("NOT_FOUND"),_MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
22050 _MSG_PRECEDING$=MSG("PRECEDING"),_MSG_PREFIX$=MSG("PREFIX"),_MSG_REC_ACCESS$=MSG("REC_ACCESS"),_MSG_REC_ALTERD$=MSG("REC_ALTERD"),_MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
22060 _MSG_REC_LOCKED$=MSG("REC_LOCKED"),_MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1),_MSG_REC_NOTFND$=MSG("REC_NOTFND")
22070 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST"),_MSG_REC_NO_LST$=MSG("REC_NO_LST"),_MSG_REC_REMOVE$=MSG("REC_REMOVE"),_MSG_REC_UPDADD$=MSG("REC_UPDADD")
22080 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1),_MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
22090 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS"),_MSG_START_FILE$=MSG("START_FILE"),_MSG_UPDATE$=MSG("UPDATE"),_MSG_UPD_OTHER1$=MSG("UPD_OTHER1"),_MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
22100 _MSG_UPD_SAME$=MSG("UPD_SAME"),_MSG_WARNING$=MSG("WARNING"),_MSG_CANNOT_WRITE$=MSG("CANT_WRITE"),_MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
22110 RETURN 
22120 END 
30000 ! 10000 - Convert numeric values to string
30010 NUM_TO_STR:
30020 TOTAL_COST$=STR(TOTAL_COST),TOTAL_FRT$=STR(TOTAL_FRT),UNITS_PER_PACK$=STR(UNITS_PER_PACK),UNITS_PER_UNIT$=STR(UNITS_PER_UNIT),QTY$=STR(QTY)
30030 SELL_PRICE$=STR(SELL_PRICE),UNITS_PER_UM$=STR(UNITS_PER_UM),STND_UNIT_COST$=STR(STND_UNIT_COST),STND_UNIT_COST_QTY$=STR(STND_UNIT_COST_QTY)
30040 KT1_UNUSED_2$=STR(KT1_UNUSED_2),KT1_UNUSED_3$=STR(KT1_UNUSED_3),KT1_UNUSED_4$=STR(KT1_UNUSED_4),KT1_UNUSED_5$=STR(KT1_UNUSED_5)
30050 RETURN 
30060 ! 11000 - Convert numeric strings to number
30070 STR_TO_NUM:
30080 _X$="TOTAL_COST",_X=TOTAL_COST.CTL,TOTAL_COST=NUM(TOTAL_COST$,ERR=NON_NUMERIC),_X$="TOTAL_FRT",_X=TOTAL_FRT.CTL,TOTAL_FRT=NUM(TOTAL_FRT$,ERR=NON_NUMERIC),_X$="UNITS_PER_PACK",_X=UNITS_PER_PACK.CTL,UNITS_PER_PACK=NUM(UNITS_PER_PACK$,ERR=NON_NUMERIC)
30090 _X$="UNITS_PER_UNIT",_X=UNITS_PER_UNIT.CTL,UNITS_PER_UNIT=NUM(UNITS_PER_UNIT$,ERR=NON_NUMERIC),_X$="QTY",_X=QTY.CTL,QTY=NUM(QTY$,ERR=NON_NUMERIC),_X$="SELL_PRICE",_X=SELL_PRICE.CTL,SELL_PRICE=NUM(SELL_PRICE$,ERR=NON_NUMERIC),_X$="UNITS_PER_UM",_X=UNITS_PER_UM.CTL,UNITS_PER_UM=NUM(UNITS_PER_UM$,ERR=NON_NUMERIC)
30100 _X$="STND_UNIT_COST",_X=STND_UNIT_COST.CTL,STND_UNIT_COST=NUM(STND_UNIT_COST$,ERR=NON_NUMERIC),_X$="STND_UNIT_COST_QTY",_X=STND_UNIT_COST_QTY.CTL,STND_UNIT_COST_QTY=NUM(STND_UNIT_COST_QTY$,ERR=NON_NUMERIC),_X$="KT1_UNUSED_2",_X=KT1_UNUSED_2.CTL,KT1_UNUSED_2=NUM(KT1_UNUSED_2$,ERR=NON_NUMERIC),_X$="KT1_UNUSED_3",_X=KT1_UNUSED_3.CTL,KT1_UNUSED_3=NUM(KT1_UNUSED_3$,ERR=NON_NUMERIC)
30110 _X$="KT1_UNUSED_4",_X=KT1_UNUSED_4.CTL,KT1_UNUSED_4=NUM(KT1_UNUSED_4$,ERR=NON_NUMERIC),_X$="KT1_UNUSED_5",_X=KT1_UNUSED_5.CTL,KT1_UNUSED_5=NUM(KT1_UNUSED_5$,ERR=NON_NUMERIC)
30120 RETURN 
30130 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
30140 NEXT_ID=_X
30150 EXIT 
30160 ! 12000 - Check if the required fields have data
30170 CHECK_REQD_FLDS:
30180 _W_FLG=1
30190 RETURN 
30200 ! 13000 - Clear the record fields
30210 CLEAR_FIELDS:
30220 IF _CLR_FLG$="R" THEN CUST_DIV$=""
30230 IF _CLR_FLG$="R" THEN CUST_CODE$=""
30240 IF _CLR_FLG$="R" THEN ITEM_CODE$=""
30250 IF _CLR_FLG$="R" THEN LOC_CODE$=""
30260 IF _CLR_FLG$="R" THEN RECEIPT_DATE$=""
30270 IF _CLR_FLG$="R" THEN SEQ_NUM$="01"
30280 RECVG_REPORT_NUM$="",PO_DIV$="",PO_NUM$="",PO_DATE$="",FACTORY_JOB_NUM$="",VEND_DIV$="",VENDOR$="",PONUMBER$="",ITEM_DESC$="",ML_PLANT_DESC$="",ML_PC_DESC$="",CUSTOMER$="",VEND_CODE$="",PLANT_CODE$="",STARTING_NUM$="",ENDING_NUM$="",BIN_LOC$="",ML_LOC_NAME$="",ML_CC_DESC$="",TYPE1$="",TYPE2$="",TYPE$="",ML_PLANT_NAME$=""
30290 ORDER_DIV$="",ORDER_NUM$="",ORDER_LINE_NUM$="",PRIMARY_UM$="",PACKAGING_UM$="",SELL_UM$="",CUST_PO$="",INV_NUM$="",SHORT_OR_BROKEN_CTN$="",COMMENT$="",RECVG_AUDIT_NUM$="",RELEASED_ON_INV_NUM$="",RELEASED_AUDIT_NUM$=""
30300 ITEM_REV_DATE$="",TRANS_IN_PROCESS_LNK$="",PHYS_INV_LINK_TO_ICL$="",LOT_NUM$="",PROD_CODE_OVERRIDE$="",COMM_CODE_OVERRIDE$="",STORAGE_EXP_DATE$="",STND_COST_UOM$="",KT1_UNUSED_1$="",TOTAL_COST=0,TOTAL_FRT=0,UNITS_PER_PACK=0,UNITS_PER_UNIT=0,QTY=0,SELL_PRICE=0,UNITS_PER_UM=0,STND_UNIT_COST=0,STND_UNIT_COST_QTY=0,KT1_UNUSED_2=0,KT1_UNUSED_3=0,KT1_UNUSED_4=0
30310 KT1_UNUSED_5=0,A0=0,A1=0,A2=0,A3=0,A4=0,A5=0,A6=0,A7=0,A8=0,A9=0,A10=0,A11=0,A12=0
30320 GOSUB NUM_TO_STR
30330 REFRESH_FLG=1
30340 RETURN 
30350 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
30360 ENABLE_GROUPS:
30370 IF _ENABLE_FLG=0 THEN GOTO *RETURN
30380 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUST_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
30390 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=ITEM_CODE.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
30400 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=LOC_CODE.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
30410 IF _ENABLE_FLG=5 THEN CALL "*wingrp;Enable",KEY5.GRP$; NEXT_ID=RECEIPT_DATE.CTL ELSE CALL "*wingrp;Disable",KEY5.GRP$
30420 IF _ENABLE_FLG=6 THEN CALL "*wingrp;Enable",KEY6.GRP$; NEXT_ID=SEQ_NUM.CTL ELSE CALL "*wingrp;Disable",KEY6.GRP$
30430 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
30440 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
30450 RETURN 
30460 ! 15000 - Determine the changes that have been made before writing
30470 DETERMINE_CHGS:
30480 DIM _CHG_VAR$(52,"N")
30490 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
30500 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
30510 IF _ORIG.ITEM_CODE$=_CUR.ITEM_CODE$ OR ITEM_CODE$=_CUR.ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CODE$=ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$
30520 IF _ORIG.LOC_CODE$=_CUR.LOC_CODE$ OR LOC_CODE$=_CUR.LOC_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_CODE$=LOC_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_CODE")+" = "+_CUR.LOC_CODE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_CODE")+" = "+_CUR.LOC_CODE$
30530 IF _ORIG.RECEIPT_DATE$=_CUR.RECEIPT_DATE$ OR RECEIPT_DATE$=_CUR.RECEIPT_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.RECEIPT_DATE$=RECEIPT_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("RECE_D")+" = "+_CUR.RECEIPT_DATE$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RECE_D")+" = "+_CUR.RECEIPT_DATE$
30540 IF _ORIG.SEQ_NUM$=_CUR.SEQ_NUM$ OR SEQ_NUM$=_CUR.SEQ_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.SEQ_NUM$=SEQ_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("SEQ_NUM")+" = "+_CUR.SEQ_NUM$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEQ_NUM")+" = "+_CUR.SEQ_NUM$
30550 IF _ORIG.RECVG_REPORT_NUM$=_CUR.RECVG_REPORT_NUM$ OR RECVG_REPORT_NUM$=_CUR.RECVG_REPORT_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.RECVG_REPORT_NUM$=RECVG_REPORT_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("RECV_R_N")+" = "+_CUR.RECVG_REPORT_NUM$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RECV_R_N")+" = "+_CUR.RECVG_REPORT_NUM$
30560 IF _ORIG.PO_DIV$=_CUR.PO_DIV$ OR PO_DIV$=_CUR.PO_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.PO_DIV$=PO_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("PO_DIV")+" = "+_CUR.PO_DIV$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PO_DIV")+" = "+_CUR.PO_DIV$
30570 IF _ORIG.PO_NUM$=_CUR.PO_NUM$ OR PO_NUM$=_CUR.PO_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.PO_NUM$=PO_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("PO_NUM")+" = "+_CUR.PO_NUM$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PO_NUM")+" = "+_CUR.PO_NUM$
30580 IF _ORIG.PO_DATE$=_CUR.PO_DATE$ OR PO_DATE$=_CUR.PO_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.PO_DATE$=PO_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("PO_DATE")+" = "+_CUR.PO_DATE$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PO_DATE")+" = "+_CUR.PO_DATE$
30590 IF _ORIG.FACTORY_JOB_NUM$=_CUR.FACTORY_JOB_NUM$ OR FACTORY_JOB_NUM$=_CUR.FACTORY_JOB_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.FACTORY_JOB_NUM$=FACTORY_JOB_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("FACT_J_N")+" = "+_CUR.FACTORY_JOB_NUM$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FACT_J_N")+" = "+_CUR.FACTORY_JOB_NUM$
30600 IF _ORIG.VEND_DIV$=_CUR.VEND_DIV$ OR VEND_DIV$=_CUR.VEND_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_DIV$=VEND_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$
30610 IF _ORIG.VEND_CODE$=_CUR.VEND_CODE$ OR VEND_CODE$=_CUR.VEND_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_CODE$=VEND_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$
30620 IF _ORIG.PLANT_CODE$=_CUR.PLANT_CODE$ OR PLANT_CODE$=_CUR.PLANT_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PLANT_CODE$=PLANT_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PLANT_CODE")+" = "+_CUR.PLANT_CODE$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLANT_CODE")+" = "+_CUR.PLANT_CODE$
30630 IF _ORIG.STARTING_NUM$=_CUR.STARTING_NUM$ OR STARTING_NUM$=_CUR.STARTING_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.STARTING_NUM$=STARTING_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("STAR_N")+" = "+_CUR.STARTING_NUM$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STAR_N")+" = "+_CUR.STARTING_NUM$
30640 IF _ORIG.ENDING_NUM$=_CUR.ENDING_NUM$ OR ENDING_NUM$=_CUR.ENDING_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.ENDING_NUM$=ENDING_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("ENDING_NUM")+" = "+_CUR.ENDING_NUM$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ENDING_NUM")+" = "+_CUR.ENDING_NUM$
30650 IF _ORIG.BIN_LOC$=_CUR.BIN_LOC$ OR BIN_LOC$=_CUR.BIN_LOC$ THEN GOTO *NEXT ELSE IF _ORIG.BIN_LOC$=BIN_LOC$ THEN _CHG2$=_CHG2$+SEP+MSG("BIN_LOC")+" = "+_CUR.BIN_LOC$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BIN_LOC")+" = "+_CUR.BIN_LOC$
30660 IF _ORIG.ORDER_DIV$=_CUR.ORDER_DIV$ OR ORDER_DIV$=_CUR.ORDER_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_DIV$=ORDER_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_DIV")+" = "+_CUR.ORDER_DIV$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_DIV")+" = "+_CUR.ORDER_DIV$
30670 IF _ORIG.ORDER_NUM$=_CUR.ORDER_NUM$ OR ORDER_NUM$=_CUR.ORDER_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_NUM$=ORDER_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_NUM")+" = "+_CUR.ORDER_NUM$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_NUM")+" = "+_CUR.ORDER_NUM$
30680 IF _ORIG.ORDER_LINE_NUM$=_CUR.ORDER_LINE_NUM$ OR ORDER_LINE_NUM$=_CUR.ORDER_LINE_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_LINE_NUM$=ORDER_LINE_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDE_L_N")+" = "+_CUR.ORDER_LINE_NUM$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDE_L_N")+" = "+_CUR.ORDER_LINE_NUM$
30690 IF _ORIG.PRIMARY_UM$=_CUR.PRIMARY_UM$ OR PRIMARY_UM$=_CUR.PRIMARY_UM$ THEN GOTO *NEXT ELSE IF _ORIG.PRIMARY_UM$=PRIMARY_UM$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIMARY_UM")+" = "+_CUR.PRIMARY_UM$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIMARY_UM")+" = "+_CUR.PRIMARY_UM$
30700 IF _ORIG.PACKAGING_UM$=_CUR.PACKAGING_UM$ OR PACKAGING_UM$=_CUR.PACKAGING_UM$ THEN GOTO *NEXT ELSE IF _ORIG.PACKAGING_UM$=PACKAGING_UM$ THEN _CHG2$=_CHG2$+SEP+MSG("PACK_UM")+" = "+_CUR.PACKAGING_UM$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PACK_UM")+" = "+_CUR.PACKAGING_UM$
30710 IF _ORIG.SELL_UM$=_CUR.SELL_UM$ OR SELL_UM$=_CUR.SELL_UM$ THEN GOTO *NEXT ELSE IF _ORIG.SELL_UM$=SELL_UM$ THEN _CHG2$=_CHG2$+SEP+MSG("SELL_UM")+" = "+_CUR.SELL_UM$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SELL_UM")+" = "+_CUR.SELL_UM$
30720 IF _ORIG.CUST_PO$=_CUR.CUST_PO$ OR CUST_PO$=_CUR.CUST_PO$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_PO$=CUST_PO$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_PO")+" = "+_CUR.CUST_PO$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_PO")+" = "+_CUR.CUST_PO$
30730 IF _ORIG.INV_NUM$=_CUR.INV_NUM$ OR INV_NUM$=_CUR.INV_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.INV_NUM$=INV_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$,_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$
30740 IF _ORIG.SHORT_OR_BROKEN_CTN$=_CUR.SHORT_OR_BROKEN_CTN$ OR SHORT_OR_BROKEN_CTN$=_CUR.SHORT_OR_BROKEN_CTN$ THEN GOTO *NEXT ELSE IF _ORIG.SHORT_OR_BROKEN_CTN$=SHORT_OR_BROKEN_CTN$ THEN _CHG2$=_CHG2$+SEP+MSG("SHOR_O_B_C")+" = "+_CUR.SHORT_OR_BROKEN_CTN$,_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SHOR_O_B_C")+" = "+_CUR.SHORT_OR_BROKEN_CTN$
30750 IF _ORIG.COMMENT$=_CUR.COMMENT$ OR COMMENT$=_CUR.COMMENT$ THEN GOTO *NEXT ELSE IF _ORIG.COMMENT$=COMMENT$ THEN _CHG2$=_CHG2$+SEP+MSG("COMMENT")+" = "+_CUR.COMMENT$,_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMMENT")+" = "+_CUR.COMMENT$
30760 IF _ORIG.RECVG_AUDIT_NUM$=_CUR.RECVG_AUDIT_NUM$ OR RECVG_AUDIT_NUM$=_CUR.RECVG_AUDIT_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.RECVG_AUDIT_NUM$=RECVG_AUDIT_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("RECG_A_N")+" = "+_CUR.RECVG_AUDIT_NUM$,_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RECG_A_N")+" = "+_CUR.RECVG_AUDIT_NUM$
30770 IF _ORIG.RELEASED_ON_INV_NUM$=_CUR.RELEASED_ON_INV_NUM$ OR RELEASED_ON_INV_NUM$=_CUR.RELEASED_ON_INV_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.RELEASED_ON_INV_NUM$=RELEASED_ON_INV_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("RELE_O_I_N")+" = "+_CUR.RELEASED_ON_INV_NUM$,_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RELE_O_I_N")+" = "+_CUR.RELEASED_ON_INV_NUM$
30780 IF _ORIG.RELEASED_AUDIT_NUM$=_CUR.RELEASED_AUDIT_NUM$ OR RELEASED_AUDIT_NUM$=_CUR.RELEASED_AUDIT_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.RELEASED_AUDIT_NUM$=RELEASED_AUDIT_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("RELE_A_N")+" = "+_CUR.RELEASED_AUDIT_NUM$,_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RELE_A_N")+" = "+_CUR.RELEASED_AUDIT_NUM$
30790 IF _ORIG.ITEM_REV_DATE$=_CUR.ITEM_REV_DATE$ OR ITEM_REV_DATE$=_CUR.ITEM_REV_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_REV_DATE$=ITEM_REV_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_R_D")+" = "+_CUR.ITEM_REV_DATE$,_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_R_D")+" = "+_CUR.ITEM_REV_DATE$
30800 IF _ORIG.TRANS_IN_PROCESS_LNK$=_CUR.TRANS_IN_PROCESS_LNK$ OR TRANS_IN_PROCESS_LNK$=_CUR.TRANS_IN_PROCESS_LNK$ THEN GOTO *NEXT ELSE IF _ORIG.TRANS_IN_PROCESS_LNK$=TRANS_IN_PROCESS_LNK$ THEN _CHG2$=_CHG2$+SEP+MSG("TRAN_I_P_L")+" = "+_CUR.TRANS_IN_PROCESS_LNK$,_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TRAN_I_P_L")+" = "+_CUR.TRANS_IN_PROCESS_LNK$
30810 IF _ORIG.PHYS_INV_LINK_TO_ICL$=_CUR.PHYS_INV_LINK_TO_ICL$ OR PHYS_INV_LINK_TO_ICL$=_CUR.PHYS_INV_LINK_TO_ICL$ THEN GOTO *NEXT ELSE IF _ORIG.PHYS_INV_LINK_TO_ICL$=PHYS_INV_LINK_TO_ICL$ THEN _CHG2$=_CHG2$+SEP+MSG("P_I_L_T_I")+" = "+_CUR.PHYS_INV_LINK_TO_ICL$,_CHG_VAR$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("P_I_L_T_I")+" = "+_CUR.PHYS_INV_LINK_TO_ICL$
30820 IF _ORIG.LOT_NUM$=_CUR.LOT_NUM$ OR LOT_NUM$=_CUR.LOT_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.LOT_NUM$=LOT_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("LOT_NUM")+" = "+_CUR.LOT_NUM$,_CHG_VAR$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOT_NUM")+" = "+_CUR.LOT_NUM$
30830 IF _ORIG.PROD_CODE_OVERRIDE$=_CUR.PROD_CODE_OVERRIDE$ OR PROD_CODE_OVERRIDE$=_CUR.PROD_CODE_OVERRIDE$ THEN GOTO *NEXT ELSE IF _ORIG.PROD_CODE_OVERRIDE$=PROD_CODE_OVERRIDE$ THEN _CHG2$=_CHG2$+SEP+MSG("PROD_C_O")+" = "+_CUR.PROD_CODE_OVERRIDE$,_CHG_VAR$(35,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PROD_C_O")+" = "+_CUR.PROD_CODE_OVERRIDE$
30840 IF _ORIG.COMM_CODE_OVERRIDE$=_CUR.COMM_CODE_OVERRIDE$ OR COMM_CODE_OVERRIDE$=_CUR.COMM_CODE_OVERRIDE$ THEN GOTO *NEXT ELSE IF _ORIG.COMM_CODE_OVERRIDE$=COMM_CODE_OVERRIDE$ THEN _CHG2$=_CHG2$+SEP+MSG("COMM_C_O")+" = "+_CUR.COMM_CODE_OVERRIDE$,_CHG_VAR$(36,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMM_C_O")+" = "+_CUR.COMM_CODE_OVERRIDE$
30850 IF _ORIG.STORAGE_EXP_DATE$=_CUR.STORAGE_EXP_DATE$ OR STORAGE_EXP_DATE$=_CUR.STORAGE_EXP_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.STORAGE_EXP_DATE$=STORAGE_EXP_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("STOR_E_D")+" = "+_CUR.STORAGE_EXP_DATE$,_CHG_VAR$(37,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STOR_E_D")+" = "+_CUR.STORAGE_EXP_DATE$
30860 IF _ORIG.STND_COST_UOM$=_CUR.STND_COST_UOM$ OR STND_COST_UOM$=_CUR.STND_COST_UOM$ THEN GOTO *NEXT ELSE IF _ORIG.STND_COST_UOM$=STND_COST_UOM$ THEN _CHG2$=_CHG2$+SEP+MSG("STD_C_PUM")+" = "+_CUR.STND_COST_UOM$,_CHG_VAR$(38,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STD_C_PUM")+" = "+_CUR.STND_COST_UOM$
30870 IF _ORIG.KT1_UNUSED_1$=_CUR.KT1_UNUSED_1$ OR KT1_UNUSED_1$=_CUR.KT1_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.KT1_UNUSED_1$=KT1_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.KT1_UNUSED_1$,_CHG_VAR$(39,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.KT1_UNUSED_1$
30880 IF _ORIG.TOTAL_COST=_CUR.TOTAL_COST OR TOTAL_COST=_CUR.TOTAL_COST THEN GOTO *NEXT ELSE IF _ORIG.TOTAL_COST=TOTAL_COST THEN _CHG2$=_CHG2$+SEP+MSG("TOTAL_COST")+" = "+STR(_CUR.TOTAL_COST),_CHG_VAR$(40,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TOTAL_COST")+" = "+STR(_CUR.TOTAL_COST)
30890 IF _ORIG.TOTAL_FRT=_CUR.TOTAL_FRT OR TOTAL_FRT=_CUR.TOTAL_FRT THEN GOTO *NEXT ELSE IF _ORIG.TOTAL_FRT=TOTAL_FRT THEN _CHG2$=_CHG2$+SEP+MSG("TOTAL_FRT")+" = "+STR(_CUR.TOTAL_FRT),_CHG_VAR$(41,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TOTAL_FRT")+" = "+STR(_CUR.TOTAL_FRT)
30900 IF _ORIG.UNITS_PER_PACK=_CUR.UNITS_PER_PACK OR UNITS_PER_PACK=_CUR.UNITS_PER_PACK THEN GOTO *NEXT ELSE IF _ORIG.UNITS_PER_PACK=UNITS_PER_PACK THEN _CHG2$=_CHG2$+SEP+MSG("UNIT_P_P")+" = "+STR(_CUR.UNITS_PER_PACK),_CHG_VAR$(42,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNIT_P_P")+" = "+STR(_CUR.UNITS_PER_PACK)
30910 IF _ORIG.UNITS_PER_UNIT=_CUR.UNITS_PER_UNIT OR UNITS_PER_UNIT=_CUR.UNITS_PER_UNIT THEN GOTO *NEXT ELSE IF _ORIG.UNITS_PER_UNIT=UNITS_PER_UNIT THEN _CHG2$=_CHG2$+SEP+MSG("UNIT_P_U")+" = "+STR(_CUR.UNITS_PER_UNIT),_CHG_VAR$(43,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNIT_P_U")+" = "+STR(_CUR.UNITS_PER_UNIT)
30920 IF _ORIG.QTY=_CUR.QTY OR QTY=_CUR.QTY THEN GOTO *NEXT ELSE IF _ORIG.QTY=QTY THEN _CHG2$=_CHG2$+SEP+MSG("QTY")+" = "+STR(_CUR.QTY),_CHG_VAR$(44,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY")+" = "+STR(_CUR.QTY)
30930 IF _ORIG.SELL_PRICE=_CUR.SELL_PRICE OR SELL_PRICE=_CUR.SELL_PRICE THEN GOTO *NEXT ELSE IF _ORIG.SELL_PRICE=SELL_PRICE THEN _CHG2$=_CHG2$+SEP+MSG("SELL_PRICE")+" = "+STR(_CUR.SELL_PRICE),_CHG_VAR$(45,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SELL_PRICE")+" = "+STR(_CUR.SELL_PRICE)
30940 IF _ORIG.UNITS_PER_UM=_CUR.UNITS_PER_UM OR UNITS_PER_UM=_CUR.UNITS_PER_UM THEN GOTO *NEXT ELSE IF _ORIG.UNITS_PER_UM=UNITS_PER_UM THEN _CHG2$=_CHG2$+SEP+MSG("UNIT_PUM")+" = "+STR(_CUR.UNITS_PER_UM),_CHG_VAR$(46,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNIT_PUM")+" = "+STR(_CUR.UNITS_PER_UM)
30950 IF _ORIG.STND_UNIT_COST=_CUR.STND_UNIT_COST OR STND_UNIT_COST=_CUR.STND_UNIT_COST THEN GOTO *NEXT ELSE IF _ORIG.STND_UNIT_COST=STND_UNIT_COST THEN _CHG2$=_CHG2$+SEP+MSG("STND_U_C")+" = "+STR(_CUR.STND_UNIT_COST),_CHG_VAR$(47,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STND_U_C")+" = "+STR(_CUR.STND_UNIT_COST)
30960 IF _ORIG.STND_UNIT_COST_QTY=_CUR.STND_UNIT_COST_QTY OR STND_UNIT_COST_QTY=_CUR.STND_UNIT_COST_QTY THEN GOTO *NEXT ELSE IF _ORIG.STND_UNIT_COST_QTY=STND_UNIT_COST_QTY THEN _CHG2$=_CHG2$+SEP+MSG("STND_U_C_Q")+" = "+STR(_CUR.STND_UNIT_COST_QTY),_CHG_VAR$(48,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STND_U_C_Q")+" = "+STR(_CUR.STND_UNIT_COST_QTY)
30970 IF _ORIG.KT1_UNUSED_2=_CUR.KT1_UNUSED_2 OR KT1_UNUSED_2=_CUR.KT1_UNUSED_2 THEN GOTO *NEXT ELSE IF _ORIG.KT1_UNUSED_2=KT1_UNUSED_2 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.KT1_UNUSED_2),_CHG_VAR$(49,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.KT1_UNUSED_2)
30980 IF _ORIG.KT1_UNUSED_3=_CUR.KT1_UNUSED_3 OR KT1_UNUSED_3=_CUR.KT1_UNUSED_3 THEN GOTO *NEXT ELSE IF _ORIG.KT1_UNUSED_3=KT1_UNUSED_3 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.KT1_UNUSED_3),_CHG_VAR$(50,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.KT1_UNUSED_3)
30990 IF _ORIG.KT1_UNUSED_4=_CUR.KT1_UNUSED_4 OR KT1_UNUSED_4=_CUR.KT1_UNUSED_4 THEN GOTO *NEXT ELSE IF _ORIG.KT1_UNUSED_4=KT1_UNUSED_4 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.KT1_UNUSED_4),_CHG_VAR$(51,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.KT1_UNUSED_4)
31000 IF _ORIG.KT1_UNUSED_5=_CUR.KT1_UNUSED_5 OR KT1_UNUSED_5=_CUR.KT1_UNUSED_5 THEN GOTO *NEXT ELSE IF _ORIG.KT1_UNUSED_5=KT1_UNUSED_5 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.KT1_UNUSED_5),_CHG_VAR$(52,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.KT1_UNUSED_5)
31010 RETURN 
31020 ! 16000 - Incorporate changes made by another user into the record
31030 INCORPORATE_CHGS:
31035 PO_DIV$=PONUMBER$(1,2),PO_NUM$=PONUMBER$(3)
31040 IF _CHG_VAR$(1,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
31050 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
31060 IF _CHG_VAR$(3,1)="Y" THEN ITEM_CODE$=_CUR.ITEM_CODE$
31070 IF _CHG_VAR$(4,1)="Y" THEN LOC_CODE$=_CUR.LOC_CODE$
31080 IF _CHG_VAR$(5,1)="Y" THEN RECEIPT_DATE$=_CUR.RECEIPT_DATE$
31090 IF _CHG_VAR$(6,1)="Y" THEN SEQ_NUM$=_CUR.SEQ_NUM$
31100 IF _CHG_VAR$(7,1)="Y" THEN RECVG_REPORT_NUM$=_CUR.RECVG_REPORT_NUM$
31110 IF _CHG_VAR$(8,1)="Y" THEN PO_DIV$=_CUR.PO_DIV$
31120 IF _CHG_VAR$(9,1)="Y" THEN PO_NUM$=_CUR.PO_NUM$
31130 IF _CHG_VAR$(10,1)="Y" THEN PO_DATE$=_CUR.PO_DATE$
31140 IF _CHG_VAR$(11,1)="Y" THEN FACTORY_JOB_NUM$=_CUR.FACTORY_JOB_NUM$
31150 IF _CHG_VAR$(12,1)="Y" THEN VEND_DIV$=_CUR.VEND_DIV$
31160 IF _CHG_VAR$(13,1)="Y" THEN VEND_CODE$=_CUR.VEND_CODE$
31170 IF _CHG_VAR$(14,1)="Y" THEN PLANT_CODE$=_CUR.PLANT_CODE$
31180 IF _CHG_VAR$(15,1)="Y" THEN STARTING_NUM$=_CUR.STARTING_NUM$
31190 IF _CHG_VAR$(16,1)="Y" THEN ENDING_NUM$=_CUR.ENDING_NUM$
31200 IF _CHG_VAR$(17,1)="Y" THEN BIN_LOC$=_CUR.BIN_LOC$
31210 IF _CHG_VAR$(18,1)="Y" THEN ORDER_DIV$=_CUR.ORDER_DIV$
31220 IF _CHG_VAR$(19,1)="Y" THEN ORDER_NUM$=_CUR.ORDER_NUM$
31230 IF _CHG_VAR$(20,1)="Y" THEN ORDER_LINE_NUM$=_CUR.ORDER_LINE_NUM$
31240 IF _CHG_VAR$(21,1)="Y" THEN PRIMARY_UM$=_CUR.PRIMARY_UM$
31250 IF _CHG_VAR$(22,1)="Y" THEN PACKAGING_UM$=_CUR.PACKAGING_UM$
31260 IF _CHG_VAR$(23,1)="Y" THEN SELL_UM$=_CUR.SELL_UM$
31270 IF _CHG_VAR$(24,1)="Y" THEN CUST_PO$=_CUR.CUST_PO$
31280 IF _CHG_VAR$(25,1)="Y" THEN INV_NUM$=_CUR.INV_NUM$
31290 IF _CHG_VAR$(26,1)="Y" THEN SHORT_OR_BROKEN_CTN$=_CUR.SHORT_OR_BROKEN_CTN$
31300 IF _CHG_VAR$(27,1)="Y" THEN COMMENT$=_CUR.COMMENT$
31310 IF _CHG_VAR$(28,1)="Y" THEN RECVG_AUDIT_NUM$=_CUR.RECVG_AUDIT_NUM$
31320 IF _CHG_VAR$(29,1)="Y" THEN RELEASED_ON_INV_NUM$=_CUR.RELEASED_ON_INV_NUM$
31330 IF _CHG_VAR$(30,1)="Y" THEN RELEASED_AUDIT_NUM$=_CUR.RELEASED_AUDIT_NUM$
31340 IF _CHG_VAR$(31,1)="Y" THEN ITEM_REV_DATE$=_CUR.ITEM_REV_DATE$
31350 IF _CHG_VAR$(32,1)="Y" THEN TRANS_IN_PROCESS_LNK$=_CUR.TRANS_IN_PROCESS_LNK$
31360 IF _CHG_VAR$(33,1)="Y" THEN PHYS_INV_LINK_TO_ICL$=_CUR.PHYS_INV_LINK_TO_ICL$
31370 IF _CHG_VAR$(34,1)="Y" THEN LOT_NUM$=_CUR.LOT_NUM$
31380 IF _CHG_VAR$(35,1)="Y" THEN PROD_CODE_OVERRIDE$=_CUR.PROD_CODE_OVERRIDE$
31390 IF _CHG_VAR$(36,1)="Y" THEN COMM_CODE_OVERRIDE$=_CUR.COMM_CODE_OVERRIDE$
31400 IF _CHG_VAR$(37,1)="Y" THEN STORAGE_EXP_DATE$=_CUR.STORAGE_EXP_DATE$
31410 IF _CHG_VAR$(38,1)="Y" THEN STND_COST_UOM$=_CUR.STND_COST_UOM$
31420 IF _CHG_VAR$(39,1)="Y" THEN KT1_UNUSED_1$=_CUR.KT1_UNUSED_1$
31430 IF _CHG_VAR$(40,1)="Y" THEN TOTAL_COST=_CUR.TOTAL_COST
31440 IF _CHG_VAR$(41,1)="Y" THEN TOTAL_FRT=_CUR.TOTAL_FRT
31450 IF _CHG_VAR$(42,1)="Y" THEN UNITS_PER_PACK=_CUR.UNITS_PER_PACK
31460 IF _CHG_VAR$(43,1)="Y" THEN UNITS_PER_UNIT=_CUR.UNITS_PER_UNIT
31470 IF _CHG_VAR$(44,1)="Y" THEN QTY=_CUR.QTY
31480 IF _CHG_VAR$(45,1)="Y" THEN SELL_PRICE=_CUR.SELL_PRICE
31490 IF _CHG_VAR$(46,1)="Y" THEN UNITS_PER_UM=_CUR.UNITS_PER_UM
31500 IF _CHG_VAR$(47,1)="Y" THEN STND_UNIT_COST=_CUR.STND_UNIT_COST
31510 IF _CHG_VAR$(48,1)="Y" THEN STND_UNIT_COST_QTY=_CUR.STND_UNIT_COST_QTY
31520 IF _CHG_VAR$(49,1)="Y" THEN KT1_UNUSED_2=_CUR.KT1_UNUSED_2
31530 IF _CHG_VAR$(50,1)="Y" THEN KT1_UNUSED_3=_CUR.KT1_UNUSED_3
31540 IF _CHG_VAR$(51,1)="Y" THEN KT1_UNUSED_4=_CUR.KT1_UNUSED_4
31550 IF _CHG_VAR$(52,1)="Y" THEN KT1_UNUSED_5=_CUR.KT1_UNUSED_5
31560 RETURN 
31570 SEL_CUSTOMER: REFRESH_FLG=1
31580 IF STP(CUSTOMER$)="" THEN CUSTOMER$="          "
31590 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$
31600 IF STP(CUSTOMER$)="" THEN GOTO *RETURN
31610 %CUSTOMER$=CUSTOMER$
31620 READ (_AR1,KEY=CUSTOMER$,DOM=NO_AR1)
31630 %CUST_NAME$=_AR1.CUST_NAME$
31640 RETURN 
31650 NO_AR1:
31660 %CUST_NAME$="",CUSTOMER$="",CUST_DIV$="",CUST_CODE$="",NEXT_ID=CUSTOMER.CTL,%CUSTOMER$=CUSTOMER$
31670 EXIT 
31680 SEL_ITEM: REFRESH_FLG=1
31690 ITEM_CODE$=PAD(ITEM_CODE$,10," ")
31700 READ (_IC0,KEY=CUSTOMER$+ITEM_CODE$,DOM=NO_IC0)
31710 ITEM_DESC$=_IC0.ITEM_DESC$
31720 READ (_KT0,KEY=CUSTOMER$+ITEM_CODE$,DOM=*NEXT)
31730 KEY_KT0$=KEY(_KT0,END=NO_KIT)
31740 IF KEY_KT0$(1,20)<>CUSTOMER$+ITEM_CODE$ THEN GOTO NO_KIT
31750 RETURN 
31760 NO_KIT: MSGBOX MSG("NO_KIT"),MSG("WARNING"),"!,TIM=3",OPT$
31770 NO_IC0:
31780 ITEM_CODE$="",ITEM_DESC$="",NEXT_ID=ITEM_CODE.CTL
31790 EXIT 
31800 SEL_PLANT:IF LEN(PLANT_CODE$)>4 THEN PLANT_CODE$=MID(PLANT_CODE$,11,4)
31810 REFRESH_FLG=1,ML_PLANT_NAME$=""; IF STP(PLANT_CODE$)<>"" THEN PLANT_CODE$=PAD(PLANT_CODE$,4,0,"0") ELSE GOTO *RETURN
31820 READ (_FM0,KEY="P"+VENDOR$+PLANT_CODE$,DOM=NO_PLANT)
31830 ML_PLANT_NAME$=STP(_FM0.LOC_DESC$)+" - "+STP(_FM0.LOC_CITY$)+", "+_FM0.LOC_ST$+" "+_FM0.LOC_ZIP_CODE$(1,5)
31840 RETURN 
31850 NO_PLANT: PLANT_CODE$="",ML_PLANT_NAME$="",NEXT_ID=PLANT_CODE.CTL; RETURN 
32000 ! 
32010 SEL_LINE:
32015 _FS6=HFN; OPEN (_FS6)"FS6"+%C$
32020 XX=POS(SEP=LB_LINE$); IF XX<>0 THEN LB_C$=LB_LINE$(1,XX-1),LB_LINE$=LB_LINE$(XX+1),LB_C$=SUB(LB_C$,"-","")
32030 XX=POS(SEP=LB_LINE$); IF XX<>0 THEN LB_I$=LB_LINE$(1,XX-1),LB_LINE$=LB_LINE$(XX+1)
32040 XX=POS(SEP=LB_LINE$); IF XX<>0 THEN LB_PO$=SUB(LB_LINE$(1,XX-1),"-",""),LB_LINE$=LB_LINE$(XX+1)
32050 %PO_NUM$=LB_PO$,%NO_DELETE=1,_SAVE_CUSTOMER$=%CUSTOMER$
32055 CALL "ZZWLKU;PARSE_CUST",LB_C$,DD$,CC$; LB_C$=DD$+CC$
32056 _FS6KEY$=LB_C$+"B"+LB_I$+%PO_NUM$(1,8)+"1"
32057 READ (_FS6,KEY=_FS6KEY$,DOM=*NEXT); GOTO SEL_ORD_PO
32060 PROCESS "POGMAA.OR","../POG/PO.EN"
32070 %PO_NUM$="",%NO_DELETE=0,%CUSTOMER$=_SAVE_CUSTOMER$
32075 CLOSE (_FS6)
32080 RETURN 
32090 SEL_ORD_PO:
32100 OPT_MNU$="[View Order : "+FN%ZZDISP$(%PO_NUM$(1,8),"O/P")+"=1,View P/O    : "+FN%ZZDISP$(%PO_NUM$,"P/O")+"=2]"
32110 POPUP_MENU OPT_MNU$,OP
32120 IF OP=2 THEN GOTO 32060
32130 IF OP<>1 THEN GOTO 32070
32140 PROCESS "FMGIAI","../FMG/FM.EN",_FS6KEY$
32150 GOTO 32070
40000 ! 20000,10
40010 SEL_LOC: REFRESH_FLG=1,LOC_CODE$=PAD(LOC_CODE$,4,0,"0")
40020 READ (_FM0,KEY="D          "+LOC_CODE$,DOM=NO_LOC_CODE)
40025 REM IF MID(LOC_CODE$,1,1)="9" GOTO NO_LOC_CODE
40030 ML_LOC_NAME$=STP(_FM0.LOC_DESC$)+" - "+STP(_FM0.LOC_CITY$)+" "+_FM0.LOC_ST$+", "+STP(_FM0.LOC_ZIP_CODE$(1,5))
40040 READ (_IC1,KEY=CUSTOMER$+ITEM_CODE$+LOC_CODE$,DOM=*NEXT); BIN_LOC$=_IC1.BIN_LOC$,VEND_DIV$=_IC0.VEND_DIV$,VEND_CODE$=_IC0.VEND_CODE$,PLANT_CODE$=_IC0.PLANT_CODE$; IF _IC0.CTN_PACK>0 THEN UNITS_PER_PACK$=STR(_IC0.CTN_PACK)
40041 VENDOR$=VEND_DIV$+VEND_CODE$
40042 PRIMARY_UM$="CASE"
40044 X3$=%X3$; CALL "IC2LNO",X3$,_ZZP,NEW_LOT$; LOT_NUM$=NEW_LOT$
40050 RETURN 
40060 NO_LOC_CODE: LOC_CODE$="",ML_LOC_DESC$="",NEXT_ID=LOC_CODE.CTL
40065 EXIT 
40070 SEL_PC: REFRESH_FLG=1,PROD_CODE_OVERRIDE$=PAD(PROD_CODE_OVERRIDE$,3,0,"0")
40080 IF NUM(PROD_CODE_OVERRIDE$)=0 THEN ML_PC_DESC$="",PROD_CODE_OVERRIDE$=""; RETURN 
40090 READ (_FMP,KEY="T"+PROD_CODE_OVERRIDE$,DOM=NO_PC)_FMP$
40100 ML_PC_DESC$=_FMP$(5,15)
40110 RETURN 
40120 NO_PC: PROD_CODE_OVERRIDE$="",ML_PC_DESC$="",NEXT_ID=PROD_CODE_OVERRIDE.CTL; RETURN 
40130 SEL_CC: REFRESH_FLG=1,COMM_CODE_OVERRIDE$=PAD(COMM_CODE_OVERRIDE$,5,0,"0")
40140 IF NUM(COMM_CODE_OVERRIDE$)=0 THEN ML_CC_DESC$="",COMM_CODE_OVERRIDE$=""; RETURN 
40150 READ (_AR4,KEY=COMM_CODE_OVERRIDE$,DOM=NO_CC)
40160 ML_CC_DESC$=_AR4.COMM_DESC$; RETURN 
40170 NO_CC: ML_CC_DESC$="",COMM_CODE_OVERRIDE$="",NEXT_ID=COMM_CODE_OVERRIDE.CTL; RETURN 
40180 ! 20200,10
40190 SEL_DATE:
40192 IF QRY_VAL$<>"" THEN CALL "ZZWDTE;Validate",QRY_VAL$,ERRMSG$; IF ERRMSG$="" THEN RECEIPT_DATE$=QRY_VAL$,_EOM$=$09$
40195 RETURN 
40200 SEL_SEQ:
40210 RETURN 
40220 SEL_PONUMBER: REFRESH_FLG=1,PONUMBER$=PAD(PONUMBER$,9," ")
40230 READ (_PO1,KEY=PONUMBER$,DOM=NO_PONUMBER)
40240 PLANT_CODE$=_PO1.PLANT_CODE$,PO_DATE$=_PO1.PO_DATE$,VENDOR$=_PO1.VEND_DIV$+_PO1.VEND_CODE$,FACTORY_JOB_NUM$=_PO1.JOB_NUM$; CALL "ZZWLKU;PARSE_VEND",VENDOR$,VEND_DIV$,VEND_CODE$; GOSUB SEL_PLANT
40250 RETURN 
40260 NO_PONUMBER:
40265 RETURN 
40270 SEL_UM:
40280 VAR$=EVS(ID$+"$"),VAR$=PAD(VAR$,4," ")
40290 READ (_ZZP,KEY="U/M"+VAR$,DOM=NO_UM)_UM$,_U0,_U1
40300 EXECUTE ID$+"$=_UM$(4,4)"
40310 RETURN 
40320 NO_UM: MSGBOX MSG("UM")+" "+ID$+": "+STP(VAR$)+" "+SEP+MSG("NOT_FOUND"),MSG("WARNING"),"!,tim=4",OPT$
40330 EXECUTE ID$+"$="""""+",NEXT_ID="+ID$+".CTL"
40340 RETURN 
40350 SEL_SUBPACK_UM: REFRESH_FLG=1
40360 GOSUB SEL_UM; IF NEXT_ID>0 THEN TYPE1$="",TYPE2$=""; GOTO NXTTYPE
40370 TYPE1$=STP(PACKAGING_UM$)+" In a "+STP(PRIMARY_UM$)+":"
40380 NXTTYPE:
40390 IF STP(PACKAGING_UM$)<>"" THEN SHOW CONTROL A2.CTL; TYPE2$="Items In a "+STP(PACKAGING_UM$)+":" ELSE TYPE2$="Items In a "+STP(PRIMARY_UM$)+":",A2=0; HIDE CONTROL A2.CTL
40400 TYPE:
40410 IF STP(PACKAGING_UM$)<>"" THEN TYPE$=PRIMARY_UM$+" Of  "+STR(A2)+"  "+PACKAGING_UM$+" of "+STR(A3) ELSE TYPE$=PRIMARY_UM$+" Of  "+STR(A3)
40420 REFRESH_FLG=1
40430 RETURN 
40440 SEL_VENDOR: REFRESH_FLG=1,VENDOR$=VEND_DIV$+VEND_CODE$
40450 READ (_AP4,KEY=VENDOR$,DOM=NO_VENDOR)
40460 %VEND_NAME$=STP(_AP4.VEND_NAME$)+" - "+STP(_AP4.VEND_CITY$)+", "+STP(_AP4.VEND_ST$)+" "+MID(_AP4.VEND_ZIP_CODE$,1,4)
40470 GOSUB SEL_PLANT
40480 RETURN 
40490 NO_VENDOR: VENDOR$="",VEND_DIV$="",VEND_CODE$="",%VEND_NAME$="",NEXT_ID=VENDOR.CTL; RETURN 
40500 DROP: COMMENT$=ITEM_DESC$; REFRESH_FLG=1; EXIT 
40510 DROP1: ID$="PACKAGING_UM",PACKAGING_UM$=PRIMARY_UM$,REFRESH_FLG=1; GOSUB SEL_SUBPACK_UM; EXIT 
40520 DROP2: SELL_UM$=PRIMARY_UM$,REFRESH_FLG=1; EXIT 
40530 DROP3: STND_COST_UOM$=PRIMARY_UM$,REFRESH_FLG=1; EXIT 
40540 QRY_KT1:
40550 PROCESS "QRY_KT1","../KTG/KT.EN",RESULT$; IF RESULT$="" THEN EXIT 
40560 CUSTOMER$=RESULT$(1,10),ITEM_CODE$=RESULT$(11,10),LOC_CODE$=RESULT$(21,4),RECEIPT_DATE$=RESULT$(25,6),SEQ_NUM$=RESULT$(31,2),_KEY$=RESULT$
40570 GOSUB NXT_RECORD
40580 NEXT_ID=RECVG_REPORT_NUM.CTL
40590 RETURN 
40600 CHECK_A5:
40610 IF A5=0 THEN A6=0,SELL_UM$=DIM(4); CALL "*wingrp;Disable",SELL_UM.GRP$ ELSE CALL "*wingrp;Enable",SELL_UM.GRP$
40620 IF A5=0 THEN REFRESH_FLG=1
40645 RETURN 
40650 CHECK_SELL_UM:
40655 IF STP(SELL_UM$,3)="" THEN NEXT_ID=SELL_UM.CTL
40690 RETURN 
41000 SEL_RECORD:! SSP 206372
41010 ENTER KK$
41020 IF LEN(KK$)=0 THEN EXIT 123
41030 EXIT 
41100 CREATE_PO:
41110 DIM OF1$(1000),OF1(5),OF2$(501),OF2(7),OF3$(501),OF3(5),KT0(3)
41120 _OF1=HFN; OPEN (_OF1)"OF1"+%C$
41130 _OF2=HFN; OPEN (_OF2)"OF2"+%C$
41140 _OF3=HFN; OPEN (_OF3)"OF3"+%C$
41150 _KT00=HFN; OPEN (_KT00)"KT0"+%C$
41155 _IC00=HFN; OPEN (_IC00)"IC0"+%C$
41157 _IC2=HFN; OPEN (_IC2)"IC2"+%C$
41158 _FM00=HFN; OPEN (_FM00)"FM0"+%C$
41160 II=INT(I/35)+1,ITEM$=I1$(I,20),REQ$=SUB(I3$(II*10-9,10),",",""),REQ=NUM(REQ$),AVA$=SUB(I2$(II*10-9,10),",",""),AVA=NUM(AVA$),NEED=REQ-AVA
41170 READ (_KT00,KEY=A$(1,20)+ITEM$,DOM=*RETURN)KT0$,KT0{ALL}
41172 ! IF MID(KT0$,55,9)<>DIM(9," ") THEN GOTO 41527
41173 IF KT0$(50,1)="S" THEN GOTO 41527
41175 READ (_IC00,KEY=ITEM$)_IC0$
41180 SCR$=KT0$(51,4),WHERE$=KT0$(45,4); IF WHERE$=DIM(4) THEN WHERE$=A$(21,4)
41190 READ (_IC2,KEY=ITEM$,DOM=*NEXT)
41200 ! _IC2KEY$=KEY(_IC2,END=*RETURN); IF _IC2KEY$(1,20)<>ITEM$ THEN RETURN
41210 ! READ (_IC2,KEY=_IC2KEY$)_IC2$
41220 VEND$=_IC0$(82,10)
41230 READ (_FM00,KEY="D"+DIM(10)+WHERE$)_FM00$
41500 GOSUB OF1_HEADER; GOSUB OF2_LINE; GOSUB OF3_SHIP
41510 %KT2DAA=1,X3$=%X3$,X4$=%X4$; CALL "OF2UAA",X3$,X4$,OPT1$,RES$; %KT2DAA=0
41515 KT0$(55,9)=RES$; WRITE (_KT00,KEY=KT0$(1,40))KT0$,KT0{ALL}
41522 KT2K$=KT2_K$(II*52-51,52); READ (Z(5),KEY=KT2K$)IOL=0350; E$(57,9)=RES$; WRITE (Z(5),KEY=KT2K$)IOL=0350
41523 DIM KTP$(979); KTP$(1,9)=RES$,KTP$(10,3)="001",KTP$(13,52)=KT2K$,B_F$=PTH(Z(5)),B_F$=B_F$(POS(DLM=B_F$,-1)+1),KTP$(65,7)=B_F$,KTP$(72,8)=A$(234,8); WRITE (Z[16],KEY=KTP$(1,12))KTP$
41525 MSGBOX "P/O : "+FN%ZZDISP$(RES$,"P/O")+" has been created "+SEP+SEP+"Item : "+ITEM$,"F.Y.I.","!,tim=5"
41526 REMOVE (_OF1,KEY=OF1$(1,8)); REMOVE (_OF2,KEY=OF2$(1,11)); REMOVE (_OF3,KEY=OF3$(1,13))
41527 CLOSE (_OF1),(_OF2),(_OF3),(_KT00),(_IC00),(_IC2),(_FM00)
41530 RETURN 
43000 OF1_HEADER:! 43000,10
43010 ! 
43020 IF ITEM$(1,2)="  " THEN OF1$(1,8)="00000001" ELSE OF1$(1,8)=ITEM$(1,2)+"000001" ! FOG Number
43030 OF1$(9,10)=ITEM$(1,10) ! Customer Code
43040 OF1$(19,1)="1" ! Update P/O info only
43050 OF1$(20,6)=%X3_TODAY$ ! Order Date
43060 OF1$(26,15)="" ! Customer P/O Number
43070 OF1$(41,6)=%X3_TODAY$ ! Date Requested
43080 OF1$(47,20)="" ! Ordered by name
43090 OF1$(67,20)="" ! Ordered by greeting
43100 OF1$(87,1)="" ! Repeat Order
43110 OF1$(88,8)="" ! TopForm repeat order number
43120 OF1$(96,1)="" ! Record processed
43130 OF1$(97,8)="" ! Order number assigned
43140 OF1$(105,8)="" ! Requested order number
43150 OF1$(113,3)="" ! FOG Error Code
43160 OF1$(116,1)="" ! Hold Flag
43170 OF1$(117,10)="" ! Vendor Invoice Number (101)
43180 OF1$(127,4)=SCR$ ! salesperson code
43190 OF1$(131,4)="" ! credit card type
43200 OF1$(135,20)="" ! credit card number
43210 OF1$(155,4)="" ! credit card expiration
43220 OF1$(159,40)="" ! credit card name
43230 OF1$(199,35)="" ! billto name override
43240 OF1$(234,30)="" ! billto address 1 override
43250 OF1$(264,30)="" ! billto address2 override
43260 OF1$(294,16)="" ! billto city override
43270 OF1$(310,2)="" ! billto state override
43280 OF1$(312,9)="" ! billto zip override
43290 OF1$(321,2)="" ! credit terms code
43300 OF1$(323,10)="" ! EC Worksheet (Used in OFA only)
43310 OF1$(333,1)="S" ! Order Type (Bill-as-shipped, Stock PO)
43315 IF WHERE$(1,1)="9" THEN OF1$(333,1)=" "; GOTO 43320
43318 IF STP(ITEM$(1,10))<>"" THEN OF1$(333,1)="B"
43320 OF1$(334,666)="" ! 	Unused
43330 OF1(0)=0 ! Freight in amount
43340 OF1(1)=0 ! Not used
43350 OF1(2)=0 ! Not used
43360 OF1(3)=0 ! Not used
43370 OF1(4)=0 ! Not used
43380 OF1(5)=0 ! Not used
43385 WRITE (_OF1,KEY=OF1$(1,8))OF1$,OF1{ALL}
43390 RETURN 
43400 OF2_LINE:
43410 IF ITEM$(1,2)="  " THEN OF2$(1,8)="00000001" ELSE OF2$(1,8)=ITEM$(1,2)+"000001" ! FOG Number
43420 OF2$(9,3)="001" ! FOG Line Number
43430 IF ITEM$(1,10)=DIM(10) THEN OF2$(12,1)="I" ELSE OF2$(12,1)="C" ! Line Type
43440 IF OF2$(12,1)="C" THEN OF2$(13,1)="Y" ! Custom Form Line Type
43450 OF2$(14,1)="1" ! P/O Code
43460 OF2$(15,10)=ITEM$(1,10) ! Customer Number
43470 OF2$(25,20)=ITEM$(11,10) ! Form Code
43480 OF2$(45,40)=_IC0$(21,40) ! Description
43490 OF2$(85,10)=_IC0$(82,10) ! Vendor Code
43500 OF2$(95,4)=_IC0$(92,4) ! Plant Code
43510 OF2$(99,9)="" ! Starting Number
43520 OF2$(108,9)="" ! Ending Number
43530 OF2$(117,4)=KT0$(41,4) ! Selling Unit
43540 OF2$(121,12)="" ! Vendor Job Number
43550 OF2$(133,6)="" ! Vendor Job Date
43560 OF2$(139,4)="" ! Ship from Warehouse Code
43570 OF2$(143,1)="Y" ! Special Shipping
43575 IF OF1$(333,1)="S" THEN OF2$(143,1)="N"
43580 OF2$(144,1)="" ! FOG Error Code
43590 OF2$(145,48)="" ! E-Logistics warehouse list
43600 OF2$(193,5)="" ! Print Flags
43610 OF2$(198,20)="" ! RC Number
43620 OF2$(218,3)="" ! Worksheet line number (Used in OFB Only)
43630 OF2$(221,1)="" ! This line has companion product lines?
43640 OF2$(222,3)="" ! Companion product master line number
43650 OF2$(225,1)="" ! M/1000 Extend (Y/N)
43660 OF2$(226,10)="" ! Line External Reference 1
43670 OF2$(236,265)="" ! Unused
43675 IF C(14)=0 THEN C(14)=1
43680 OF2(0)=C(14) ! Selling Quantity/Unit
43690 OF2(1)=0 ! Price per Unit
43700 OF2(2)=0 ! Cost per Unit
43710 OF2(3)=NEED/C(14) ! Quantity Ordered
43720 OF2(4)=0 ! Carton Pack
43730 OF2(5)=0 ! Unused
43740 OF2(6)=0 ! Unused
43750 OF2(7)=0 ! Unused
43755 WRITE (_OF2,KEY=OF2$(1,11))OF2$,OF2{ALL}
43760 RETURN 
43770 OF3_SHIP:
43780 IF ITEM$(1,2)="  " THEN OF3$(1,8)="00000001" ELSE OF3$(1,8)=ITEM$(1,2)+"000001" ! FOG Number
43790 OF3$(9,1)="1" ! P/O Code
43800 OF3$(10,3)="001" ! FOG Line Number
43810 OF3$(13,1)="1" ! FOG Sequence Number
43815 IF OF1$(333,1)="S" THEN OF3$(10,3)="   ",OF3$(13,1)=" ",OF3$(9,1)=" "
43820 OF3$(14,1)="D" ! Location Type
43830 OF3$(15,4)=WHERE$,%WHERE$=WHERE$ ! Ship to Code
43840 OF3$(19,9)=KT0$(45,4) ! Location Code
43850 OF3$(28,20)="" ! Receiving Department
43860 OF3$(48,30)="" ! Attention Line
43870 OF3$(78,30)="" ! Ship Address Line 1
43880 OF3$(108,30)="" ! Ship Address Line 2
43890 OF3$(138,16)="" ! Ship City
43900 OF3$(154,2)="" ! Ship State
43910 OF3$(156,10)="" ! Ship Zip Code
43920 OF3$(166,1)="" ! Ship FOB
43930 OF3$(167,1)="" ! How to Ship
43940 OF3$(168,1)="" ! Ship Via
43950 OF3$(169,15)="" ! Inside Delivery
43960 OF3$(184,15)="" ! Ship With
43970 OF3$(199,35)="" ! Mark For
43980 OF3$(234,35)="" ! Company Name
43990 OF3$(269,4)="" ! Ship to Warehouse
44000 OF3$(273,4)=KT0$(41,4) ! Shipping Unit
44010 OF3$(277,1)="" ! FOG error code
44020 OF3$(278,40)="" ! Email Address
44030 OF3$(318,15)="" ! Ship via description
44040 OF3$(333,15)="" ! Account number
44050 OF3$(348,1)="" ! Method payment
44060 OF3$(349,20)="" ! Shipper ID
44070 OF3$(369,132)="" ! Unused
44080 OF3(0)=C(14) ! Shipping Quantity/Unit
44090 OF3(1)=NEED/C(14) ! Quantity to Ship
44100 OF3(2)=0 ! Unused
44110 OF3(3)=0 ! Unused
44120 OF3(4)=0 ! Unused
44130 OF3(5)=0 ! Unused
44140 WRITE (_OF3,KEY=OF3$(1,13))OF3$,OF3{ALL}
44150 RETURN 
45200 CHECK_PO_NUMBER:
45210 IF A$="" THEN DIM A$(269); A$(1,20)=CUSTOMER$+ITEM_CODE$
45220 READ (Z(5),KEY=A$(1,20),DOM=*NEXT)
45230 _KT2$=KEY(Z(5),END=END_CHECK); READ (Z(5))_KT2$
45240 IF MID(_KT2$,1,20)<>A$(1,20) THEN GOTO END_CHECK
45245 IF MID(_KT2$,57,9)=DIM(9) THEN GOTO 45230
45250 PROCESS "KTGDAA.1","../KTG/KT.EN",STR(Z(5)),A$
45260 END_CHECK:RETURN 
45270 DISP_PO_NUMBER:
45280 _KT2=NUM(ARG_1$),A$=ARG_2$
45290 READ (_KT2,KEY=A$(1,20),DOM=*NEXT)
45300 _KT2$=KEY(_KT2,END=END_CHECK); READ (_KT2)_KT2$,*,*,*,COMMITED,ORDER
45310 IF MID(_KT2$,1,20)<>A$(1,20) THEN GOTO *RETURN
45315 IF MID(_KT2$,57,9)=DIM(9) THEN GOTO 45300
45320 IDX+=1; LIST_BOX LOAD LB_LINE.CTL,IDX,FN%ZZDISP$(_KT2$(33,10),"A/R")+SEP+_KT2$(43,10)+SEP+FN%ZZDISP$(MID(_KT2$,57,9),"P/O")+SEP+STR(ORDER-COMMITED:"###,###,###")
45330 GOTO 45300
50000 LIST_BOX:
50010 OPEN (1)"AR3500"
50020 READ (1,END=*RETURN)A$
50030 IDX+=1; LIST_BOX LOAD LIST_BOX_1.CTL,IDX,A$(1,4)+SEP+A$(5,35)+SEP+A$(40,30)
50040 GOTO 50020
50050 SEL_LINE_LB:
50060 MSGBOX "YOU SELECT : "+LIST_BOX_1$
50070 RETURN 
56000 ! "199840-Program KTGDAA Kit Production Posting displays incorrect
56001 ! "206372-Error in program KTGDAA, Kit when you click the right
56002 ! "208675-Kit Module - Allow processing of items not in inventory
