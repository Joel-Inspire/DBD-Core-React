0010 ! "AP Gateway Maintenance <PAGDAA>"
0030 ! ************************************************************************
0035 REM "5.7 - 06/21/13 - 9.517777 - jvv - SSP# 262361
0037 REM "262361-GUI conversion of Accounts Payable Gateway - Module GW_A/P  
0040 REM "Copyright 2013 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 IF TCB(88)=0 THEN MSGBOX "You must be using Windx to access this program" ELSE PROCESS "PAGDAA","../PAG/PA.EN"
0055 IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT 
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0115 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2 ! SSP240628 jdf
0118 DIM Z[NUM(X3$(60,3))] ! SSP240628 jdf
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0155 IOLIST PA2$,PA2{ALL}
0158 IOLIST A$(1,LEN(A$)),A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13]
0159 IOLIST C$,C[0],C[1],C[2]
0160 _FILE_NAME$="PA0"+%C$
0165 IOLIST D$,D[0],D[1]
0170 ! FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0182 Z$="01X PA0...  02O PA6...  03O AP4...  04ORAP2...  05ORZYB...  07ORAP3...  08ORAPQ...  06O GL1...  11ORAPI...  12O AP8...  13O ZZPARM  14O PA2...  "
0184 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO *NEXT,WRAPUP
0185 _FIL_NO=Z[1]
0186 M2$="###,###.00"
0188 GOSUB PARAMETER_SETUP
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0299 ! 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0399 ! 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=4
0430 DIM _KEYS$[1:5]; _KEYS$[1]="FY$",_KEYS$[2]="ACCTPD$",_KEYS$[3]="VENDOR$",_KEYS$[4]="INV_NUM$"
0440 _KEY1=1
0490 RETURN 
0499 ! 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0599 ! 
0700 PARAMETER_SETUP:
0710 F=Z[2]
0720 DIM F1$(120); READ (Z[13],KEY=X3$(9,3)+"AP2A",DOM=*NEXT)F1$
0725 REM "F9 IS LIMIT FOR AUTO INVOICE HOLD, REMOTE LOCATION LARAMS
0730 IF X3$(330,1)="1" THEN READ (Z[13],KEY="R/L"+X3$(9,3),DOM=*NEXT)*,F9
0740 READ (Z[13],KEY=X3$(9,3)+"A/P",DOM=WRAPUP)F0$
0750 IF F0$(70,1)="Y" THEN Z$="09O AR3...  "; CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO *NEXT,9900
0760 READ (Z[13],KEY=X3$(9,3)+"G/L",DOM=WRAPUP)G0$; G8=NUM(G0$(170,2))
0770 DIM A$(119+K9),A[13],T[T5]
0780 DIM D$(100),D[1]
0800 FOR XX=0 TO 3
0810 ! IF POS(" "<>F1$(XX*20+8,16))=0 THEN NEXT XX
0820 DDSEC$=MID(F1$,XX*20+8,16)
0830 IF NOT(NUL(DDSEC$)) THEN EXECUTE "SPECIAL_DESC_"+STR(XX+1)+"$=DDSEC$"
0840 NEXT XX
0850 REFRESH_FLG=1
0860 RETURN 
0899 ! 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
0999 ! 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1015 IF ID$="VENDOR" THEN CALL "ZZWLKU;PARSE_VEND",VENDOR$,VEND_DIV$,VEND_CODE$
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;PARSE_VEND",VENDOR$,VEND_DIV$,VEND_CODE$; VENDOR$=VEND_DIV$+VEND_CODE$
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1065 ON_HOLD_DESC$=""
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1199 ! 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1215 MSGBOX ("You may not add an AP Invoice here, use A/P "); GOTO *RETURN
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1299 ! 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1435 GOSUB CHECK_FOR_ERRORS ! SSP262361, DMM 05/30/2013
1440 GOSUB REVIEW_WRITE; IF _ABORT_WRITE THEN _ABORT_WRITE=0; RETURN 
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1499 ! 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1655 ON_HOLD_REASON$="",ON_HOLD_DESC$=""
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1675 GOSUB REMOVE_LINES
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1695 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1750 REMOVE_LINES:
1760 READ (Z[14],KEY=A1$,DOM=*NEXT)
1770 KL$=KEY(Z[14],END=*RETURN); READ (Z[14],KEY=KL$)IOL=0155
1780 IF KL$(1,LEN(A1$))<>A1$ THEN RETURN 
1790 REMOVE (Z[14],KEY=KL$)
1795 GOTO 1770
1798 RETURN 
1799 ! 
1800 ! 1800 - Clear record
1809 ! 
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
1899 ! 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2199 ! 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2299 ! 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2499 ! 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
2699 ! 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 ! F _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3045 READ DATA FROM REC(IOL(Z[1])) TO IOL=0158
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3052 IF ON_HOLD_REASON$<>"  " THEN CALL "PA2SDA",%X3$,%X4$,ON_HOLD_REASON$,ON_HOLD_DESC$
3053 GOSUB GET_END_DATE
3055 A1$=_KEY$,VENDOR$=VEND_DIV$+VEND_CODE$
3058 GOSUB DISPLAY_PA2_LINES
3059 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3060 CHANGE_FLG=0
3070 RETURN 
3199 ! 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$="",_ABORT_WRITE=0
3230 EXTRACT (_FIL_NO,KEY=KEC(_FIL_NO),REC=_CUR$,DOM=WRT,ERR=REC_BUSY)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1; _CLR_FLG$="R"; GOSUB CLEAR_FIELDS ! SSP262361, DMM 06/19/13
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3410 REC_BUSY:
3420 IF ERR=0 THEN MSGBOX _MSG_REC_LOCKED$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG_CANNOT_WRITE$+SEP+MSG(ERR),_ERROR$
3430 _ABORT_WRITE=1
3440 RETURN 
3499 ! 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3599 ! 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3649 ! 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=FY.CTL,_FIRST_FIELD=INV_DATE.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
3899 ! 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF UCS(_KEYS$[_CURKEY])=UCS(ID$)+"$" OR UCS(_KEYS$[_CURKEY])=UCS(ID$) THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
4099 ! 
7400 ! Check Audit Report
7410 CHECK_AUDIT:
7420 FIND (Z[1],KEY="",DOM=*RETURN)V0$,K0$
7430 IF K4$>"" THEN MSGBOX MSG("UPDATE_ST"),MSG("WARNING"),"STOP"; CMD_STR$="END"; RETURN 
7440 EXTRACT (Z[1],KEY="",ERR=WRAPUP)
7450 MSGBOX MSG("AUDIT_RPT")+" "+V0$(22,4)+"."+V0$(26,2)+MSG("HAS_PRT")+"."+SEP+MSG("CONTINUE?"),MSG("VERIFY"),"?,YesNo",ANS$
7460 IF ANS$="NO" THEN GOTO WRAPUP
7470 REMOVE (Z[1],KEY="")
7490 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9399 ! 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 GROSS_INV_AMT$=STR(GROSS_INV_AMT)
10030 SPECIAL_AMT_1$=STR(SPECIAL_AMT_1)
10040 SPECIAL_AMT_2$=STR(SPECIAL_AMT_2)
10050 SPECIAL_AMT_3$=STR(SPECIAL_AMT_3)
10060 SPECIAL_AMT_4$=STR(SPECIAL_AMT_4)
10070 DISC_APPLIES_TO$=STR(DISC_APPLIES_TO)
10080 DISC_AMT$=STR(DISC_AMT)
10090 NET_SALE$=STR(NET_SALE)
10100 NUM_DAYS_EXTEN_DUE_D$=STR(NUM_DAYS_EXTEN_DUE_D)
10110 USED_DURING_INV_ENTY$=STR(USED_DURING_INV_ENTY)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="GROSS_INV_AMT",_X=GROSS_INV_AMT.CTL,GROSS_INV_AMT=NUM(GROSS_INV_AMT$,ERR=NON_NUMERIC)
11030 _X$="SPECIAL_AMT_1",_X=SPECIAL_AMT_1.CTL,SPECIAL_AMT_1=NUM(SPECIAL_AMT_1$,ERR=NON_NUMERIC)
11040 _X$="SPECIAL_AMT_2",_X=SPECIAL_AMT_2.CTL,SPECIAL_AMT_2=NUM(SPECIAL_AMT_2$,ERR=NON_NUMERIC)
11050 _X$="SPECIAL_AMT_3",_X=SPECIAL_AMT_3.CTL,SPECIAL_AMT_3=NUM(SPECIAL_AMT_3$,ERR=NON_NUMERIC)
11060 _X$="SPECIAL_AMT_4",_X=SPECIAL_AMT_4.CTL,SPECIAL_AMT_4=NUM(SPECIAL_AMT_4$,ERR=NON_NUMERIC)
11070 _X$="DISC_APPLIES_TO",_X=DISC_APPLIES_TO.CTL,DISC_APPLIES_TO=NUM(DISC_APPLIES_TO$,ERR=NON_NUMERIC)
11080 _X$="DISC_AMT",_X=DISC_AMT.CTL,DISC_AMT=NUM(DISC_AMT$,ERR=NON_NUMERIC)
11090 _X$="NET_SALE",_X=NET_SALE.CTL,NET_SALE=NUM(NET_SALE$,ERR=NON_NUMERIC)
11100 _X$="NUM_DAYS_EXTEN_DUE_D",_X=NUM_DAYS_EXTEN_DUE_D.CTL,NUM_DAYS_EXTEN_DUE_D=NUM(NUM_DAYS_EXTEN_DUE_D$,ERR=NON_NUMERIC)
11110 _X$="USED_DURING_INV_ENTY",_X=USED_DURING_INV_ENTY.CTL,USED_DURING_INV_ENTY=NUM(USED_DURING_INV_ENTY$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN FY$=""
13030 IF _CLR_FLG$="R" THEN ACCTPD$=""
13040 IF _CLR_FLG$="R" THEN VEND_DIV$=""
13050 IF _CLR_FLG$="R" THEN VEND_CODE$="",VENDOR$=""
13060 IF _CLR_FLG$="R" THEN INV_NUM$=""
13070 INV_DATE$=""
13080 TERMS_CODE$=""
13090 INV_DUE_DATE$=""
13100 DISC_EXPIRE_DATE$=""
13110 INV_COMMENT$=""
13120 OUR_REF_NUM$=""
13130 PRINT_ON_BANK_CODE$=""
13140 GL_CATG_CODE$=""
13150 PYMNT_SELECTION_CODE$=""
13160 PYMNT_PRIORITY_CODE$=""
13170 PLACE_INV_ON_HOLD$=""
13180 SPECIAL_INV_TYPE$=""
13190 INV_TYPE$=""
13200 APPLY_TO_INV_NUM$=""
13210 SPER_CODE$=""
13220 SRC_COMP_CODE$=""
13230 SRC_COMP_CODE_RLT$=""
13240 ALT_CURR_CODE$=""
13250 ON_HOLD_REASON$="",ON_HOLD_DESC$=""
13260 IMPORT_SOURCE$=""
13270 FILE_VERSION$=""
13280 INV_RECORD_CREATED$=""
13290 PA0_UNUSED_1=0
13300 GROSS_INV_AMT=0
13310 SPECIAL_AMT_1=0
13320 SPECIAL_AMT_2=0
13330 SPECIAL_AMT_3=0
13340 SPECIAL_AMT_4=0
13350 DISC_APPLIES_TO=0
13360 DISC_AMT=0
13370 WORKMAN_COMP_WH=0
13380 NET_SALE=0
13390 NUM_DAYS_EXTEN_DUE_D=0
13400 USED_DURING_INV_ENTY=0
13410 GROSS_AMT_ALT_CURR=0
13420 DISC_AMT_ALT_CURR=0
13980 GOSUB NUM_TO_STR
13985 GOSUB CLEAR_PA2_LINES
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=ACCTPD.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=VENDOR.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 ! ! _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=VEND_CODE.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14060 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=INV_NUM.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
14999 ! 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(41,"N")
15030 IF _ORIG.FY$=_CUR.FY$ OR FY$=_CUR.FY$ THEN GOTO *NEXT ELSE IF _ORIG.FY$=FY$ THEN _CHG2$=_CHG2$+SEP+MSG("FY")+" = "+_CUR.FY$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FY")+" = "+_CUR.FY$
15040 IF _ORIG.ACCTPD$=_CUR.ACCTPD$ OR ACCTPD$=_CUR.ACCTPD$ THEN GOTO *NEXT ELSE IF _ORIG.ACCTPD$=ACCTPD$ THEN _CHG2$=_CHG2$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCTPD$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCTPD$
15050 IF _ORIG.VEND_DIV$=_CUR.VEND_DIV$ OR VEND_DIV$=_CUR.VEND_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_DIV$=VEND_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$
15060 IF _ORIG.VEND_CODE$=_CUR.VEND_CODE$ OR VEND_CODE$=_CUR.VEND_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_CODE$=VEND_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$
15070 IF _ORIG.INV_NUM$=_CUR.INV_NUM$ OR INV_NUM$=_CUR.INV_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.INV_NUM$=INV_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$
15080 IF _ORIG.INV_DATE$=_CUR.INV_DATE$ OR INV_DATE$=_CUR.INV_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.INV_DATE$=INV_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_DATE")+" = "+_CUR.INV_DATE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_DATE")+" = "+_CUR.INV_DATE$
15090 IF _ORIG.TERMS_CODE$=_CUR.TERMS_CODE$ OR TERMS_CODE$=_CUR.TERMS_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.TERMS_CODE$=TERMS_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("TERMS_CODE")+" = "+_CUR.TERMS_CODE$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TERMS_CODE")+" = "+_CUR.TERMS_CODE$
15100 IF _ORIG.INV_DUE_DATE$=_CUR.INV_DUE_DATE$ OR INV_DUE_DATE$=_CUR.INV_DUE_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.INV_DUE_DATE$=INV_DUE_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_D_D")+" = "+_CUR.INV_DUE_DATE$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_D_D")+" = "+_CUR.INV_DUE_DATE$
15110 IF _ORIG.DISC_EXPIRE_DATE$=_CUR.DISC_EXPIRE_DATE$ OR DISC_EXPIRE_DATE$=_CUR.DISC_EXPIRE_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.DISC_EXPIRE_DATE$=DISC_EXPIRE_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("DISC_E_D")+" = "+_CUR.DISC_EXPIRE_DATE$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DISC_E_D")+" = "+_CUR.DISC_EXPIRE_DATE$
15120 IF _ORIG.INV_COMMENT$=_CUR.INV_COMMENT$ OR INV_COMMENT$=_CUR.INV_COMMENT$ THEN GOTO *NEXT ELSE IF _ORIG.INV_COMMENT$=INV_COMMENT$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_C")+" = "+_CUR.INV_COMMENT$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_C")+" = "+_CUR.INV_COMMENT$
15130 IF _ORIG.OUR_REF_NUM$=_CUR.OUR_REF_NUM$ OR OUR_REF_NUM$=_CUR.OUR_REF_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.OUR_REF_NUM$=OUR_REF_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("OUR_R_N")+" = "+_CUR.OUR_REF_NUM$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OUR_R_N")+" = "+_CUR.OUR_REF_NUM$
15140 IF _ORIG.PRINT_ON_BANK_CODE$=_CUR.PRINT_ON_BANK_CODE$ OR PRINT_ON_BANK_CODE$=_CUR.PRINT_ON_BANK_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PRINT_ON_BANK_CODE$=PRINT_ON_BANK_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIN_O_B_C")+" = "+_CUR.PRINT_ON_BANK_CODE$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIN_O_B_C")+" = "+_CUR.PRINT_ON_BANK_CODE$
15150 IF _ORIG.GL_CATG_CODE$=_CUR.GL_CATG_CODE$ OR GL_CATG_CODE$=_CUR.GL_CATG_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.GL_CATG_CODE$=GL_CATG_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("G_C_C")+" = "+_CUR.GL_CATG_CODE$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("G_C_C")+" = "+_CUR.GL_CATG_CODE$
15160 IF _ORIG.PYMNT_SELECTION_CODE$=_CUR.PYMNT_SELECTION_CODE$ OR PYMNT_SELECTION_CODE$=_CUR.PYMNT_SELECTION_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PYMNT_SELECTION_CODE$=PYMNT_SELECTION_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PYMN_S_C")+" = "+_CUR.PYMNT_SELECTION_CODE$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PYMN_S_C")+" = "+_CUR.PYMNT_SELECTION_CODE$
15170 IF _ORIG.PYMNT_PRIORITY_CODE$=_CUR.PYMNT_PRIORITY_CODE$ OR PYMNT_PRIORITY_CODE$=_CUR.PYMNT_PRIORITY_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PYMNT_PRIORITY_CODE$=PYMNT_PRIORITY_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PYMN_P_C")+" = "+_CUR.PYMNT_PRIORITY_CODE$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PYMN_P_C")+" = "+_CUR.PYMNT_PRIORITY_CODE$
15180 IF _ORIG.PLACE_INV_ON_HOLD$=_CUR.PLACE_INV_ON_HOLD$ OR PLACE_INV_ON_HOLD$=_CUR.PLACE_INV_ON_HOLD$ THEN GOTO *NEXT ELSE IF _ORIG.PLACE_INV_ON_HOLD$=PLACE_INV_ON_HOLD$ THEN _CHG2$=_CHG2$+SEP+MSG("PLAC_I_O_H")+" = "+_CUR.PLACE_INV_ON_HOLD$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLAC_I_O_H")+" = "+_CUR.PLACE_INV_ON_HOLD$
15190 IF _ORIG.SPECIAL_INV_TYPE$=_CUR.SPECIAL_INV_TYPE$ OR SPECIAL_INV_TYPE$=_CUR.SPECIAL_INV_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_INV_TYPE$=SPECIAL_INV_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_I_T")+" = "+_CUR.SPECIAL_INV_TYPE$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_I_T")+" = "+_CUR.SPECIAL_INV_TYPE$
15200 IF _ORIG.INV_TYPE$=_CUR.INV_TYPE$ OR INV_TYPE$=_CUR.INV_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.INV_TYPE$=INV_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_TYPE")+" = "+_CUR.INV_TYPE$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_TYPE")+" = "+_CUR.INV_TYPE$
15210 IF _ORIG.APPLY_TO_INV_NUM$=_CUR.APPLY_TO_INV_NUM$ OR APPLY_TO_INV_NUM$=_CUR.APPLY_TO_INV_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.APPLY_TO_INV_NUM$=APPLY_TO_INV_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("APPL_T_I_N")+" = "+_CUR.APPLY_TO_INV_NUM$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("APPL_T_I_N")+" = "+_CUR.APPLY_TO_INV_NUM$
15220 IF _ORIG.SPER_CODE$=_CUR.SPER_CODE$ OR SPER_CODE$=_CUR.SPER_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.SPER_CODE$=SPER_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("SPER_CODE")+" = "+_CUR.SPER_CODE$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPER_CODE")+" = "+_CUR.SPER_CODE$
15230 IF _ORIG.SRC_COMP_CODE$=_CUR.SRC_COMP_CODE$ OR SRC_COMP_CODE$=_CUR.SRC_COMP_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.SRC_COMP_CODE$=SRC_COMP_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("SRC_C_C")+" = "+_CUR.SRC_COMP_CODE$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SRC_C_C")+" = "+_CUR.SRC_COMP_CODE$
15240 IF _ORIG.SRC_COMP_CODE_RLT$=_CUR.SRC_COMP_CODE_RLT$ OR SRC_COMP_CODE_RLT$=_CUR.SRC_COMP_CODE_RLT$ THEN GOTO *NEXT ELSE IF _ORIG.SRC_COMP_CODE_RLT$=SRC_COMP_CODE_RLT$ THEN _CHG2$=_CHG2$+SEP+MSG("SRC_C_C_R")+" = "+_CUR.SRC_COMP_CODE_RLT$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SRC_C_C_R")+" = "+_CUR.SRC_COMP_CODE_RLT$
15250 IF _ORIG.ALT_CURR_CODE$=_CUR.ALT_CURR_CODE$ OR ALT_CURR_CODE$=_CUR.ALT_CURR_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ALT_CURR_CODE$=ALT_CURR_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ALT_C_C")+" = "+_CUR.ALT_CURR_CODE$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_C_C")+" = "+_CUR.ALT_CURR_CODE$
15260 IF _ORIG.ON_HOLD_REASON$=_CUR.ON_HOLD_REASON$ OR ON_HOLD_REASON$=_CUR.ON_HOLD_REASON$ THEN GOTO *NEXT ELSE IF _ORIG.ON_HOLD_REASON$=ON_HOLD_REASON$ THEN _CHG2$=_CHG2$+SEP+MSG("O_H_R")+" = "+_CUR.ON_HOLD_REASON$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("O_H_R")+" = "+_CUR.ON_HOLD_REASON$
15270 IF _ORIG.IMPORT_SOURCE$=_CUR.IMPORT_SOURCE$ OR IMPORT_SOURCE$=_CUR.IMPORT_SOURCE$ THEN GOTO *NEXT ELSE IF _ORIG.IMPORT_SOURCE$=IMPORT_SOURCE$ THEN _CHG2$=_CHG2$+SEP+MSG("IMPO_S")+" = "+_CUR.IMPORT_SOURCE$,_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("IMPO_S")+" = "+_CUR.IMPORT_SOURCE$
15280 IF _ORIG.FILE_VERSION$=_CUR.FILE_VERSION$ OR FILE_VERSION$=_CUR.FILE_VERSION$ THEN GOTO *NEXT ELSE IF _ORIG.FILE_VERSION$=FILE_VERSION$ THEN _CHG2$=_CHG2$+SEP+MSG("FILE_V")+" = "+_CUR.FILE_VERSION$,_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FILE_V")+" = "+_CUR.FILE_VERSION$
15290 IF _ORIG.INV_RECORD_CREATED$=_CUR.INV_RECORD_CREATED$ OR INV_RECORD_CREATED$=_CUR.INV_RECORD_CREATED$ THEN GOTO *NEXT ELSE IF _ORIG.INV_RECORD_CREATED$=INV_RECORD_CREATED$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_R_C")+" = "+_CUR.INV_RECORD_CREATED$,_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_R_C")+" = "+_CUR.INV_RECORD_CREATED$
15300 IF _ORIG.PA0_UNUSED_1=_CUR.PA0_UNUSED_1 OR PA0_UNUSED_1=_CUR.PA0_UNUSED_1 THEN GOTO *NEXT ELSE IF _ORIG.PA0_UNUSED_1=PA0_UNUSED_1 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.PA0_UNUSED_1),_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.PA0_UNUSED_1)
15310 IF _ORIG.GROSS_INV_AMT=_CUR.GROSS_INV_AMT OR GROSS_INV_AMT=_CUR.GROSS_INV_AMT THEN GOTO *NEXT ELSE IF _ORIG.GROSS_INV_AMT=GROSS_INV_AMT THEN _CHG2$=_CHG2$+SEP+MSG("GROS_I_A")+" = "+STR(_CUR.GROSS_INV_AMT),_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GROS_I_A")+" = "+STR(_CUR.GROSS_INV_AMT)
15320 IF _ORIG.SPECIAL_AMT_1=_CUR.SPECIAL_AMT_1 OR SPECIAL_AMT_1=_CUR.SPECIAL_AMT_1 THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_AMT_1=SPECIAL_AMT_1 THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_A_1")+" = "+STR(_CUR.SPECIAL_AMT_1),_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_A_1")+" = "+STR(_CUR.SPECIAL_AMT_1)
15330 IF _ORIG.SPECIAL_AMT_2=_CUR.SPECIAL_AMT_2 OR SPECIAL_AMT_2=_CUR.SPECIAL_AMT_2 THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_AMT_2=SPECIAL_AMT_2 THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_A_2")+" = "+STR(_CUR.SPECIAL_AMT_2),_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_A_2")+" = "+STR(_CUR.SPECIAL_AMT_2)
15340 IF _ORIG.SPECIAL_AMT_3=_CUR.SPECIAL_AMT_3 OR SPECIAL_AMT_3=_CUR.SPECIAL_AMT_3 THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_AMT_3=SPECIAL_AMT_3 THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_A_3")+" = "+STR(_CUR.SPECIAL_AMT_3),_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_A_3")+" = "+STR(_CUR.SPECIAL_AMT_3)
15350 IF _ORIG.SPECIAL_AMT_4=_CUR.SPECIAL_AMT_4 OR SPECIAL_AMT_4=_CUR.SPECIAL_AMT_4 THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_AMT_4=SPECIAL_AMT_4 THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_A_4")+" = "+STR(_CUR.SPECIAL_AMT_4),_CHG_VAR$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_A_4")+" = "+STR(_CUR.SPECIAL_AMT_4)
15360 IF _ORIG.DISC_APPLIES_TO=_CUR.DISC_APPLIES_TO OR DISC_APPLIES_TO=_CUR.DISC_APPLIES_TO THEN GOTO *NEXT ELSE IF _ORIG.DISC_APPLIES_TO=DISC_APPLIES_TO THEN _CHG2$=_CHG2$+SEP+MSG("DISC_A_T")+" = "+STR(_CUR.DISC_APPLIES_TO),_CHG_VAR$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DISC_A_T")+" = "+STR(_CUR.DISC_APPLIES_TO)
15370 IF _ORIG.DISC_AMT=_CUR.DISC_AMT OR DISC_AMT=_CUR.DISC_AMT THEN GOTO *NEXT ELSE IF _ORIG.DISC_AMT=DISC_AMT THEN _CHG2$=_CHG2$+SEP+MSG("DISC_AMT")+" = "+STR(_CUR.DISC_AMT),_CHG_VAR$(35,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DISC_AMT")+" = "+STR(_CUR.DISC_AMT)
15380 IF _ORIG.WORKMAN_COMP_WH=_CUR.WORKMAN_COMP_WH OR WORKMAN_COMP_WH=_CUR.WORKMAN_COMP_WH THEN GOTO *NEXT ELSE IF _ORIG.WORKMAN_COMP_WH=WORKMAN_COMP_WH THEN _CHG2$=_CHG2$+SEP+MSG("WORK_C_W")+" = "+STR(_CUR.WORKMAN_COMP_WH),_CHG_VAR$(36,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WORK_C_W")+" = "+STR(_CUR.WORKMAN_COMP_WH)
15390 IF _ORIG.NET_SALE=_CUR.NET_SALE OR NET_SALE=_CUR.NET_SALE THEN GOTO *NEXT ELSE IF _ORIG.NET_SALE=NET_SALE THEN _CHG2$=_CHG2$+SEP+MSG("NET_SALE")+" = "+STR(_CUR.NET_SALE),_CHG_VAR$(37,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NET_SALE")+" = "+STR(_CUR.NET_SALE)
15400 IF _ORIG.NUM_DAYS_EXTEN_DUE_D=_CUR.NUM_DAYS_EXTEN_DUE_D OR NUM_DAYS_EXTEN_DUE_D=_CUR.NUM_DAYS_EXTEN_DUE_D THEN GOTO *NEXT ELSE IF _ORIG.NUM_DAYS_EXTEN_DUE_D=NUM_DAYS_EXTEN_DUE_D THEN _CHG2$=_CHG2$+SEP+MSG("N_D_E_D_D")+" = "+STR(_CUR.NUM_DAYS_EXTEN_DUE_D),_CHG_VAR$(38,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("N_D_E_D_D")+" = "+STR(_CUR.NUM_DAYS_EXTEN_DUE_D)
15410 IF _ORIG.USED_DURING_INV_ENTY=_CUR.USED_DURING_INV_ENTY OR USED_DURING_INV_ENTY=_CUR.USED_DURING_INV_ENTY THEN GOTO *NEXT ELSE IF _ORIG.USED_DURING_INV_ENTY=USED_DURING_INV_ENTY THEN _CHG2$=_CHG2$+SEP+MSG("USED_D_I_E")+" = "+STR(_CUR.USED_DURING_INV_ENTY),_CHG_VAR$(39,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("USED_D_I_E")+" = "+STR(_CUR.USED_DURING_INV_ENTY)
15420 IF _ORIG.GROSS_AMT_ALT_CURR=_CUR.GROSS_AMT_ALT_CURR OR GROSS_AMT_ALT_CURR=_CUR.GROSS_AMT_ALT_CURR THEN GOTO *NEXT ELSE IF _ORIG.GROSS_AMT_ALT_CURR=GROSS_AMT_ALT_CURR THEN _CHG2$=_CHG2$+SEP+MSG("GROS_A_A_C")+" = "+STR(_CUR.GROSS_AMT_ALT_CURR),_CHG_VAR$(40,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GROS_A_A_C")+" = "+STR(_CUR.GROSS_AMT_ALT_CURR)
15430 IF _ORIG.DISC_AMT_ALT_CURR=_CUR.DISC_AMT_ALT_CURR OR DISC_AMT_ALT_CURR=_CUR.DISC_AMT_ALT_CURR THEN GOTO *NEXT ELSE IF _ORIG.DISC_AMT_ALT_CURR=DISC_AMT_ALT_CURR THEN _CHG2$=_CHG2$+SEP+MSG("DISC_A_A_C")+" = "+STR(_CUR.DISC_AMT_ALT_CURR),_CHG_VAR$(41,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DISC_A_A_C")+" = "+STR(_CUR.DISC_AMT_ALT_CURR)
15990 RETURN 
15999 ! 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN FY$=_CUR.FY$
16030 IF _CHG_VAR$(2,1)="Y" THEN ACCTPD$=_CUR.ACCTPD$
16040 IF _CHG_VAR$(3,1)="Y" THEN VEND_DIV$=_CUR.VEND_DIV$
16050 IF _CHG_VAR$(4,1)="Y" THEN VEND_CODE$=_CUR.VEND_CODE$
16060 IF _CHG_VAR$(5,1)="Y" THEN INV_NUM$=_CUR.INV_NUM$
16070 IF _CHG_VAR$(6,1)="Y" THEN INV_DATE$=_CUR.INV_DATE$
16080 IF _CHG_VAR$(7,1)="Y" THEN TERMS_CODE$=_CUR.TERMS_CODE$
16090 IF _CHG_VAR$(8,1)="Y" THEN INV_DUE_DATE$=_CUR.INV_DUE_DATE$
16100 IF _CHG_VAR$(9,1)="Y" THEN DISC_EXPIRE_DATE$=_CUR.DISC_EXPIRE_DATE$
16110 IF _CHG_VAR$(10,1)="Y" THEN INV_COMMENT$=_CUR.INV_COMMENT$
16120 IF _CHG_VAR$(11,1)="Y" THEN OUR_REF_NUM$=_CUR.OUR_REF_NUM$
16130 IF _CHG_VAR$(12,1)="Y" THEN PRINT_ON_BANK_CODE$=_CUR.PRINT_ON_BANK_CODE$
16140 IF _CHG_VAR$(13,1)="Y" THEN GL_CATG_CODE$=_CUR.GL_CATG_CODE$
16150 IF _CHG_VAR$(14,1)="Y" THEN PYMNT_SELECTION_CODE$=_CUR.PYMNT_SELECTION_CODE$
16160 IF _CHG_VAR$(15,1)="Y" THEN PYMNT_PRIORITY_CODE$=_CUR.PYMNT_PRIORITY_CODE$
16170 IF _CHG_VAR$(16,1)="Y" THEN PLACE_INV_ON_HOLD$=_CUR.PLACE_INV_ON_HOLD$
16180 IF _CHG_VAR$(17,1)="Y" THEN SPECIAL_INV_TYPE$=_CUR.SPECIAL_INV_TYPE$
16190 IF _CHG_VAR$(18,1)="Y" THEN INV_TYPE$=_CUR.INV_TYPE$
16200 IF _CHG_VAR$(19,1)="Y" THEN APPLY_TO_INV_NUM$=_CUR.APPLY_TO_INV_NUM$
16210 IF _CHG_VAR$(20,1)="Y" THEN SPER_CODE$=_CUR.SPER_CODE$
16220 IF _CHG_VAR$(21,1)="Y" THEN SRC_COMP_CODE$=_CUR.SRC_COMP_CODE$
16230 IF _CHG_VAR$(22,1)="Y" THEN SRC_COMP_CODE_RLT$=_CUR.SRC_COMP_CODE_RLT$
16240 IF _CHG_VAR$(23,1)="Y" THEN ALT_CURR_CODE$=_CUR.ALT_CURR_CODE$
16250 IF _CHG_VAR$(24,1)="Y" THEN ON_HOLD_REASON$=_CUR.ON_HOLD_REASON$
16260 IF _CHG_VAR$(25,1)="Y" THEN IMPORT_SOURCE$=_CUR.IMPORT_SOURCE$
16270 IF _CHG_VAR$(26,1)="Y" THEN FILE_VERSION$=_CUR.FILE_VERSION$
16280 IF _CHG_VAR$(27,1)="Y" THEN INV_RECORD_CREATED$=_CUR.INV_RECORD_CREATED$
16290 IF _CHG_VAR$(28,1)="Y" THEN PA0_UNUSED_1=_CUR.PA0_UNUSED_1
16300 IF _CHG_VAR$(29,1)="Y" THEN GROSS_INV_AMT=_CUR.GROSS_INV_AMT
16310 IF _CHG_VAR$(30,1)="Y" THEN SPECIAL_AMT_1=_CUR.SPECIAL_AMT_1
16320 IF _CHG_VAR$(31,1)="Y" THEN SPECIAL_AMT_2=_CUR.SPECIAL_AMT_2
16330 IF _CHG_VAR$(32,1)="Y" THEN SPECIAL_AMT_3=_CUR.SPECIAL_AMT_3
16340 IF _CHG_VAR$(33,1)="Y" THEN SPECIAL_AMT_4=_CUR.SPECIAL_AMT_4
16350 IF _CHG_VAR$(34,1)="Y" THEN DISC_APPLIES_TO=_CUR.DISC_APPLIES_TO
16360 IF _CHG_VAR$(35,1)="Y" THEN DISC_AMT=_CUR.DISC_AMT
16370 IF _CHG_VAR$(36,1)="Y" THEN WORKMAN_COMP_WH=_CUR.WORKMAN_COMP_WH
16380 IF _CHG_VAR$(37,1)="Y" THEN NET_SALE=_CUR.NET_SALE
16390 IF _CHG_VAR$(38,1)="Y" THEN NUM_DAYS_EXTEN_DUE_D=_CUR.NUM_DAYS_EXTEN_DUE_D
16400 IF _CHG_VAR$(39,1)="Y" THEN USED_DURING_INV_ENTY=_CUR.USED_DURING_INV_ENTY
16410 IF _CHG_VAR$(40,1)="Y" THEN GROSS_AMT_ALT_CURR=_CUR.GROSS_AMT_ALT_CURR
16420 IF _CHG_VAR$(41,1)="Y" THEN DISC_AMT_ALT_CURR=_CUR.DISC_AMT_ALT_CURR
16990 RETURN 
16999 ! 
17000 CLEAR_PA2_LINES:
17010 IF LIST_COUNT=0 THEN GOTO END_CLEAR
17015 FOR I=LIST_COUNT TO 1 STEP -1
17020 LIST_BOX LOAD GLI_LINE.CTL,I,*,ERR=END_CLEAR
17030 NEXT I
17032 END_CLEAR:
17035 REFRESH_FLG=1
17040 RETURN 
17049 ! 
17050 DISPLAY_PA2_LINES:
17055 GOSUB CLEAR_PA2_LINES
17060 REFRESH_FLG=1
17065 LIST_COUNT=0
17070 DIM PA2$(41),PA2[1]
17080 READ (Z[14],KEY=_KEY$,DOM=*NEXT)
17085 READ_NEXT_PA2:
17090 PA2_KEY$=KEY(Z[14],END=DISPLAY_END); IF PA2_KEY$(1,LEN(_KEY$))<>_KEY$ THEN GOTO DISPLAY_END
17100 READ (Z[14],KEY=PA2_KEY$)IOL=0155
17105 PERFORM "PAGXAA; GET_GL_MASK"
17110 GLI_ACCTD$=MID(PA2$,30,12); GLI_ACCT$=STR(-NUM(GLI_ACCTD$(1,M2)):W2$)
17115 GLI_DESC$="Not on File"; FIND (Z[6],KEY=GLI_ACCTD$,DOM=*NEXT)GLI_DESC$; GLI_DESC$=GLI_DESC$(13,35)
17120 IF PA2[0]>0 THEN GLI_DEB=PA2[0],GLI_CRE=0 ELSE GLI_DEB=0,GLI_CRE=PA2[0]
17125 GLI_DEB$=""; IF GLI_DEB THEN GLI_DEB$=STR(GLI_DEB:M2$)
17130 GLI_CRE$=""; IF GLI_CRE THEN GLI_CRE$=STR(GLI_CRE:M2$)
17140 LOAD_GLILINE$=PA2$(27,3)+SEP+GLI_ACCT$+SEP+GLI_DESC$+SEP+GLI_DEB$+SEP+GLI_CRE$
17150 LIST_BOX LOAD GLI_LINE.CTL,0,LOAD_GLILINE$
17160 LIST_COUNT=LIST_COUNT+1
17170 GOTO READ_NEXT_PA2
17180 DISPLAY_END:
17185 REFRESH_FLG=1
17190 RETURN 
18000 LOAD_PA2_LINES:
18017 IF NOT(%GUI) THEN CHUI_MODE=1,%GUI=1 ! SSP262361, must be %GUI in ZZLCPY
18018 CALL "ZZLCPY",X3$,"R",Z[14],Z[2],A1$,A0,0; A[0]=A0
18019 IF CHUI_MODE THEN %GUI=0,CHUI_MODE=0 ! SSP262361, set %GUI back to 0
18020 L0=1,F=Z[2],A0=A[0],A5=0
18030 V9=-3,V3=Z[6],V9$=A$(27,6)
18035 ! 9=-3,V3=Z[6],V4=Z[9],V5=Z[10],V9$=A$(27,6)
18040 T[0]=-(A[9]-A[11])
18050 T0=T[0]
18060 IF POS(" "<>T9$)=0 THEN T9$="" ELSE IF Q3$<>"" AND Q3$(30,1)<>"D" THEN T[0]=T6+T6+T[0] ELSE T[1]=-T[0],T[0]=T[1]
18065 NO_GL=1; NEG_VAL=1; D9$="" ! SSP262361, DMM added D9$="" 5/29/13
18070 IF LEN(T9$)>=12 THEN CALL "GL2XAB",X3$,T9$,T{ALL},V9$,F,A0; A[0]=A0
18080 PERFORM "PAGXAA"
18082 ! ALL "ZZLCPY",X3$,"W",Z[14],Z[2],A1$,A0,0; REM "Copy PA6 indexed workfile back to PA2 file
18085 LIST_BOX FIND LB_LINE.CTL,1,LB_LINE$,ERR=*NEXT ! ssp 191540
18086 PERFORM "PAGXAA;SEL_LB_LINE" ! SSP262361, DMM 6/18/13, WAS GLGXAA CHANGED TO PAGXAA
18090 RETURN 
18099 ! 
18100 COPY_PA2_LINES:
18105 ! EPLACEMENT_SCRN$="PAGDAA"
18109 IF NOT(%GUI) THEN CHUI_MODE=1,%GUI=1 ! SSP262361, must be %GUI in ZZLCPY
18110 CALL "ZZLCPY",X3$,"W",Z[14],Z[2],A1$,A0,0; REM "Copy PA6 indexed workfile back to PA2 file
18111 IF CHUI_MODE THEN %GUI=0,CHUI_MODE=0 ! SSP262361, set %GUI back to 0
18120 ! SSP262361, DMM 6/19/13, ALREADY DOING THIS AT 19020 GOSUB DISPLAY_PA2_LINES
18130 REFRESH_FLG=1
18150 RETURN 
18490 ! 
18500 REM "Right query to view all records in PA0
18510 SEL_QRY:
18520 QRY_VAL$=""; PROCESS "QRY_PA0","../PAG/PA.EN",QRY_VAL$
18525 IF NUL(QRY_VAL$) THEN EXIT 
18528 GOSUB CLEAR_PA2_LINES
18530 _KEY$=QRY_VAL$
18540 FY$=QRY_VAL$(1,4),ACCTPD$=QRY_VAL$(5,2),VENDOR$=QRY_VAL$(7,10),INV_NUM$=QRY_VAL$(17,10)
18545 _KEY$=QRY_VAL$
18550 GOSUB 1045
18560 NEXT_ID=INV_DATE.CTL
18590 RETURN 
19000 EDIT_PA2_LINES:
19010 REPLACEMENT_SCRN$="PAGDAA.3"
19015 PERFORM "*winproc;overlay_screen"
19020 PERFORM "PAGDAA;DISPLAY_PA2_LINES"; NEXT_ID=INV_DATE.CTL
19050 EXIT 
20000 INVOICE_DATE_ENTRY:
20010 GOSUB CALC_DUE_DATE
20020 INVOICE_DATE_ENTRY_END:EXIT 
20099 ! 
21000 GROSS_AMT_ENTRY:GOSUB STR_TO_NUM
21010 IF GROSS_INV_AMT<0 THEN INV_TYPE$="C" ! PRINT @(13,8+V0),A$(89+K9,1),
21020 GOSUB COMPUTE_VAT
21030 IF F9>0 THEN IF GROSS_INV_AMT>F9 THEN INV_ON_HOLD$="Y" ! PRINT @(61,19),A$(87,1),
21040 NET_SALE=GROSS_AMT
21050 REFRESH_FLG=1
21090 RETURN 
21099 ! 
21100 TERMS_CODE_ENTRY:
21110 IF TERMS_CODE$<>"  " THEN TERMS$=TERMS_CODE$ ELSE TERMS$=""
21115 ! %SEC$(73,1)="Y" THEN GOTO TERMS_CODE_ENTRY_END
21120 FIND (Z[4],KEY=TERMS_CODE$,DOM=*NEXT)IOL=0165
21125 IF TERMS$>"" THEN IF TERMS$<>TERMS$ THEN DISC_AMT_2ND=0,DISC_DATE_2ND$=DIM(6); REM "If terms code is changed then blank out 2nd discount fields so they will recalculate correctly based on the new terms code
21130 GOSUB CALC_DUE_DATE; GOSUB CALC_DISC_AMT
21140 TERMS_CODE_ENTRY_END:EXIT 
21150 RETURN 
21199 ! 
21200 SPECIAL_AMT1_ENTRY:GOSUB STR_TO_NUM
21210 X0=5; IF POS(" "<>F1$((X0-5)*20+8,16))=0 THEN GOTO SPECIAL_AMT1_ENTRY_END
21212 SPECIAL_DESC_1$=F1$((X0-5)*20+8,16)
21215 GOSUB CALC_DISC_APPLIES_TO
21240 SPECIAL_AMT1_ENTRY_END:GOSUB NUM_TO_STR; EXIT 
21245 RETURN 
21249 ! 
21250 SPECIAL_AMT2_ENTRY:GOSUB STR_TO_NUM
21255 X0=6; IF POS(" "<>F1$((X0-5)*20+8,16))=0 THEN GOTO SPECIAL_AMT2_ENTRY_END
21260 X=SPECIAL_AMT_2
21270 IF F0$(71,1)<>"Y" THEN GOSUB CALC_DISC_APPLIES_TO ELSE F9$="*",GROSS_INV_AMT=GROSS_INV_AMT-X,GROSS_INV_AMT=GROSS_INV_AMT+SPECIAL_AMT_2; GOSUB CALC_DISC_APPLIES_TO; GOSUB CALC_NET_INV_AMT ! GOSUB DISPLAY_DATA
21290 SPECIAL_AMT2_ENTRY_END:GOSUB NUM_TO_STR; EXIT 
21295 RETURN 
21299 ! 
21300 SPECIAL_AMT3_ENTRY:GOSUB STR_TO_NUM
21310 X0=7; IF POS(" "<>F1$((X0-5)*20+8,16))=0 THEN GOTO SPECIAL_AMT3_ENTRY_END
21320 IF SPECIAL_AMT_3>0 THEN GOSUB CALC_DISC_APPLIES_TO
21330 SPECIAL_AMT3_ENTRY_END:GOSUB NUM_TO_STR; EXIT 
21345 RETURN 
21349 ! 
21350 SPECIAL_AMT4_ENTRY:GOSUB STR_TO_NUM
21360 X0=8; IF POS(" "<>F1$((X0-5)*20+8,16))=0 THEN GOTO SPECIAL_AMT4_ENTRY_END
21370 GOSUB CALC_DISC_APPLIES_TO
21380 SPECIAL_AMT4_ENTRY_END:GOSUB NUM_TO_STR; EXIT 
21395 RETURN 
21399 ! 
21400 COMPUTE_VAT:
21410 IF F0$(71,1)<>"Y" THEN GOSUB CALC_DISC_APPLIES_TO; GOSUB CALC_DISC_AMT; GOTO COMPUTE_VAT_END
21415 SPECIAL_AMT_2=0; GOSUB CALC_DISC_APPLIES_TO
21420 LABEL_1:IF F0$(71,1)<>"Y" OR F9$="*" THEN GOTO COMPUTE_VAT_END ELSE GROSS_INV_AMT=GROSS_INV_AMT-SPECIAL_AMT_2,SPECIAL_AMT_2=(GROSS_INV_AMT-DISC_AMT)*NUM(F0$(72,4))*.0001,GROSS_INV_AMT=GROSS_INV_AMT+SPECIAL_AMT_2; GOSUB CALC_NET_INV_AMT ! GOSUB DISPLAY_DATA
21490 COMPUTE_VAT_END:RETURN 
21499 ! 
21500 CALC_DISC_AMT:
21510 IF D$="" THEN DIM D$(100),D[1]; FIND (Z[4],KEY=TERMS_CODE$)IOL=0165
21520 DISC_AMT=DISC_APPLIES_TO*D[0]/100
21525 IF F0$(80,1)="Y" AND D$(43,1)="P" AND D[1]<>0 THEN DISC_AMT_2ND=DISC_APPLIES_TO*D[1]/100; REM "WO131561, 2nd discount amount
21530 GOSUB LABEL_1
21535 REFRESH_FLG=1
21540 CALC_DISC_AMT_END:RETURN 
21549 ! 
21550 CALC_DISCOUNT_APPLIES:
21560 DISC_APPLIES_TO_ENTRY:GOSUB STR_TO_NUM
21570 IF DISC_APPLIES_TO>0 THEN GOSUB LABEL_2
21580 DISC_APPLIES_TO_ENTRY_END:GOSUB NUM_TO_STR; EXIT 
21590 RETURN 
21599 ! 
21900 SPER_ENTRY:
21910 IF F0$(71,1)<>"Y" THEN RETURN 
21949 ! 
22100 CALC_DISC_APPLIES_TO:
22110 DISC_APPLIES_TO=GROSS_INV_AMT
22120 IF C$="" THEN DIM C$(426),C[2]; FIND (Z[3],KEY=VENDOR$)IOL=0159
22130 GOSUB SPECIAL_AMT_ARRAY
22140 FOR X=0 TO 3; IF POS(STR(X+1:"0")=C$(294,5))=0 AND F1$(25+20*X,1)<>"Y" THEN DISC_APPLIES_TO=DISC_APPLIES_TO-A[2+X]
22150 NEXT X
22160 IF F0$(79,1)="Y" AND POS("1"=C$(294,5))=0 AND F1$(25,1)<>"Y" THEN DISC_APPLIES_TO=DISC_APPLIES_TO-LINE_FREIGHT; REM "SSP118375, exclude freight on lines from discount
22170 LABEL_2:GOSUB CALC_DISC_AMT
22180 CALC_NET_INV_AMT:
22190 NET_SALE=GROSS_INV_AMT
22200 GOSUB SPECIAL_AMT_ARRAY
22210 FOR X=0 TO 3; IF F1$(24+X*20,1)="Y" THEN NET_SALE=NET_SALE-A[2+X]; NEXT X ELSE NEXT X
22220 NET_SALE=NET_SALE-WORKMAN_COMP_WH
22230 IF F0$(15,1)="L" THEN NET_SALE=NET_SALE-DISC_AMT
22240 REFERSH_FLG=1
22250 CALC_DISC_APPLIES_TO_END:RETURN 
22259 ! 
22300 SPECIAL_AMT_ARRAY:
22310 DIM A[14]
22320 A[2]=SPECIAL_AMT_1
22330 A[3]=SPECIAL_AMT_2
22340 A[4]=SPECIAL_AMT_3
22350 A[5]=SPECIAL_AMT_4
22360 SPECIAL_AMT_ARRAY_END:RETURN 
22399 ! 
22500 CALC_DUE_DATE:
22510 REM "EXTRA DAYS ADDED TO DUE DATE AT PRINT TIME
22520 IF LEN(D$)<100 THEN DIM D$(100),D[1]; FIND (Z[4],KEY=TERMS_CODE$,DOM=*NEXT)IOL=0165
22530 CALL "ZZDISC",X3$,D$,0,0,PAD(INV_DATE$,6),Q4$,Q2$,0,0
22540 INV_DUE_DATE$=Q4$,DISC_EXPIRE_DATE$=Q2$
22550 IF F0$(80,1)="Y" AND D$(43,1)="P" AND D$(53,3)<>"   " THEN ORIGINAL_D$=D$,D$(44,3)=D$(53,3),Q2$=""; CALL "ZZDISC",X3$,D$,0,0,INV_DUE_DATE$,Q4$,Q2$,0,0; DISC_DATE_2ND$=Q2$,D$=ORIGINAL_D$; REM "W0131561, 2nd discount expires on date
22560 CALC_DUE_DATE_END:RETURN 
22599 ! 
22600 GET_END_DATE:
22605 END_DATE$=""
22610 IF NUL(FY$) OR NUL(ACCTPD$) THEN RETURN 
22615 DIM EDS$(105); FIND (Z[13],KEY=%C$+"G/LYE"+FY$,DOM=*RETURN)GLYE_PARMS$; EDS$=GLYE_PARMS$(21)
22620 PERIOD=NUM(ACCTPD$,ERR=*RETURN); IF PERIOD<1 OR PERIOD>13 THEN RETURN 
22625 END_DATE$=EDS$(PERIOD*6-5,6)
22640 RETURN 
22645 ! 
25000 CHECK_FOR_ERRORS:! SSP262361, DMM 05/30/13, check required/validated fields like PA2UBA does.  If on-hold (111,2) already set then bypass.  If error found then set on-hold reason and stop checking.
25010 IF STP(ON_HOLD_REASON$)>"" THEN RETURN ! if already on hold then don't bother checking
25015 ! Check FY and ACCTPD
25020 DIM P1$(105); FIND (Z[13],KEY=X3$(9,3)+"G/LYE"+FY$,DOM=25030)P1$
25025 IF POS(P1$(99,1)="CR")=0 THEN GOTO 25031
25030 ON_HOLD_REASON$="02"; GOTO *RETURN ! Got the DOM, or closed year
25035 IF ACCTPD$<"01" OR ACCTPD$>P1$(13,2) THEN ON_HOLD_REASON$="02"; GOTO *RETURN ! Invalid accounting period
25040 ! Check vendor code
25045 DIM AP4$(426); FIND (Z[3],KEY=VEND_DIV$+VEND_CODE$,DOM=25050)AP4$(1); GOTO 25055
25050 ON_HOLD_REASON$="03"; GOTO *RETURN ! Got the DOM, no such vendor
25055 IF AP4$(246,1)="I" THEN ON_HOLD_REASON$="03"; GOTO *RETURN ! Inactive vendor
25060 ! Check invoice Number - can't be blank and can't be used before
25065 IF STP(INV_NUM$)="" THEN ON_HOLD_REASON$="04"; GOTO *RETURN ! Blank invoice number
25070 READ (Z[11],KEY=VEND_DIV$+VEND_CODE$+INV_NUM$,DOM=*NEXT); ON_HOLD_REASON$="05"; GOTO *RETURN ! Invoice number in A/P open invoice file for this vendor already
25075 READ (Z[8],KEY=VEND_DIV$+VEND_CODE$+INV_NUM$,DOM=*NEXT); ON_HOLD_REASON$="05"; GOTO *RETURN ! Invoice number in A/P invoice history for this vendor
25080 ! Check terms code
25085 DIM AP2$(100); FIND (Z[4],KEY=TERMS_CODE$,DOM=*NEXT); GOTO 25095
25090 ON_HOLD_REASON$="06"; GOTO *RETURN ! Invalid terms code
25095 ! Bank code
25100 READ (Z[5],KEY=PRINT_ON_BANK_CODE$,DOM=*NEXT); GOTO 25110
25105 ON_HOLD_REASON$="07"; GOTO *RETURN ! Invalid bank code
25110 ! G/L category code
25115 READ (Z[7],KEY=GL_CATG_CODE$,DOM=*NEXT); GOTO 25125
25120 ON_HOLD_REASON$="08"; GOTO *RETURN ! Invalid category
25125 ! Salesperson code - only if A/P parm Retain stats by sls activated
25130 IF F0$(70,1)<>"Y" THEN GOTO 25145
25135 IF STP(SPER_CODE$)="" THEN GOTO 25145 ELSE READ (Z[9],KEY=SPER_CODE$,DOM=*NEXT); GOTO 25145
25140 ON_HOLD_REASON$="09"; GOTO *RETURN ! Invalid salesperson code
25145 ! Check PA2 records for invalid G/L codes and make sure total of entries equals net amount
25150 DIM PA2$(41),PA2[1]; TOTAL=0
25155 READ (Z[14],KEY=_KEY$,DOM=*NEXT)
25160 PA2_KEY$=KEY(Z[14],END=25180); IF PA2_KEY$(1,LEN(_KEY$))<>_KEY$ THEN GOTO 25180
25165 READ (Z[14],KEY=PA2_KEY$)IOL=0155
25170 GL_CODE$=MID(PA2$,30,12); READ (Z[6],KEY=GL_CODE$,DOM=*NEXT); GOTO 25175
25171 ON_HOLD_REASON$="11"; GOTO 25185 ! Invalid G/L code
25175 TOTAL+=PA2[0]; GOTO 25160 ! Add G/L amt, will check for out of balance at end of PA2 recs
25180 IF TOTAL<>NET_SALE THEN ON_HOLD_REASON$="12" ! Out of balance
25185 DONE_CHECKING:
25190 RETURN 
25195 ! 
56000 REM "262361-GUI conversion of Accounts Payable Gateway - Module GW_A/P  
