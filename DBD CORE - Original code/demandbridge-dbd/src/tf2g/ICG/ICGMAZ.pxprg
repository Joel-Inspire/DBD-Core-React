0010 ! ICGMAZ - Inventory Setup/Inquiry
0035 REM "5.7 - 04/03/19 - 11.396111 - jvv - SSP# 306828
0037 REM "306828-They are having an issue where they select an item code and 
0040 REM "Copyright 2019 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0045 _SAVECUSTOMER$=%CUSTOMER$,_SAVEITEMCODE$=%ITEM_CODE$
0046 _SAVELTYPE$=%LINE_TYPE$,%LINE_TYPE$="" ! SSP 306828
0049 PROCESS "ICGMAZ","../ICG/IC.EN"
0050 %CUSTOMER$=_SAVECUSTOMER$,%ITEM_CODE$=_SAVEITEMCODE$
0052 %LINE_TYPE$=_SAVELTYPE$ ! SSP 306828
0055 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="IC0"+%C$,APP$="IC"
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0171 _ZZP=FFN("ZZPARM"); IF _ZZP<=0 THEN _ZZP=HFN; OPEN (_ZZP,ERR=OPEN_ERR)"ZZPARM"
0172 FIND (_ZZP,KEY=FID(0)+"      ")X3$,*,X4$; READ (_ZZP,KEY=X3$(9,3)+"F/M")P4$; DIM SEC$(255); READ (_ZZP,KEY="osec"+X3$(40,3),DOM=*NEXT)SEC$
0173 READ (_ZZP,KEY=X3$(9,3)+"I/C")IC$
0175 CALL "RT2PRM",ERR=*NEXT,X3$,X4$,W9$; RT$=W9$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0190 _FMP=HFN; OPEN (_FMP,ERR=OPEN_ERR)"FMP"+%C$
0191 _IC1=HFN; OPEN (_IC1,IOL=*,REC=_IC1$,ERR=OPEN_ERR)"IC1"+%C$
0192 _AR1=HFN; OPEN (_AR1,ERR=OPEN_ERR)"AR1"+%C$
0193 _ZZO=HFN; OPEN (_ZZO,ERR=OPEN_ERR)"ZZO"+%C$
0194 IF %_LOG_HISTORY THEN _LOG=FFN("LOG"+%C$); IF _LOG<=0 THEN _LOG=HFN; OPEN (_LOG)"LOG"+%C$
0195 _IC0=HFN; OPEN (_IC0,ERR=OPEN_ERR)"IC0"+%C$
0196 _FM1=HFN; OPEN (_FM1,ERR=OPEN_ERR)"FM1"+%C$
0197 _IC2=HFN; OPEN (_IC2,ERR=OPEN_ERR)"IC2"+%C$
0199 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=3
0430 DIM _KEYS$[1:3]; _KEYS$[1]="CUST_DIV$",_KEYS$[2]="CUST_CODE$",_KEYS$[3]="ITEM_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0525 ARG_1$=%CUSTOMER$+%ITEM_CODE$,CUSTOMER$=%CUSTOMER$,ITEM_CODE$=%ITEM_CODE$
0530 GOSUB CLEAR_REC; GOSUB CREATE_GRID
0535 IF STP(%CUSTOMER$)+STP(%ITEM_CODE$)="" THEN ARG_1$=""
0536 IF CUSTOMER$="" THEN CUSTOMER$=DIM(10)
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=CHECK_ITEM_STOCK)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0565 CHANGE_FLG=0,NEXT_ID=ITEM_DESC.CTL; CALL "*WINGRP;DISABLE",KEYS.GRP$
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0915 IF ARG_1$="" THEN %CUSTOMER$="",%ITEM_CODE$=""
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0942 ! IF _ZZP<>0 THEN CLOSE (_ZZP); _ZZP=0
0943 IF _AR1<>0 THEN CLOSE (_AR1); _AR1=0
0944 IF _FMP>32000 THEN CLOSE (_FMP); _FMP=0
0945 IF _FMU THEN CLOSE (_FMU); _FMU=0
0946 IF _IC1 THEN CLOSE (_IC1); _IC1=0
0947 IF _IC2 THEN CLOSE (_IC2); _IC2=0
0948 IF _FM1 THEN CLOSE (_FM1); _FM1=0
0949 IF _IC0 THEN CLOSE (_IC0); _IC0=0 ! SSP213385 , SSP214782, jdf
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0965 %GRID=0 ! %VENDOR$="",%CUSTOMER$="",%ITEM_CODE$="",%GRID=0
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1011 ! IF ID$="ITEM_CODE" THEN XX=NUM(ITEM_CODE$,ERR=*NEXT); IF LEN(ITEM_CODE$)<7 THEN ITEM_CODE$=PAD(ITEM_CODE$,7,0,"0")
1012 IF ID$="ITEM_CODE" THEN ITEM_CODE$=PAD(ITEM_CODE$,10," ")
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 ! IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1065 NXT_READ:
1066 NEW_REC=0
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=ITEM_DESC.CTL
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1225 CUSTOMER.CTL'VALUE$=CUSTOMER$,ITEM_CODE.CTL'VALUE$=ITEM_CODE$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _ENABLE_FLG=1
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=ITEM_DESC.CTL
1280 LOT_INV_FOR_THIS_ITM$=IC$(69,1),NEW_REC=1 ! Changed by dff from 68 to 69 ref: 189799
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1411 IF ICGMAZ.1=1 THEN GOTO 1420
1415 IF CHANGE_FLG=0 THEN GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT END_IF 
1416 IF CHANGE_FLG=0 THEN GOTO 1480
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=CUSTOMER.CTL,ICGMAZ.1=0
1485 IF %STOCK$="Y" THEN CMD_STR$="E"
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1615 IF STP(CUSTOMER$)="" AND SEC$(72,1)="Y" THEN MSGBOX MSG("NOT_DELETE")+SEP+MSG("STOCK_ITEM"),MSG("ACCESS_DEN"),"!",OPT$; RETURN 
1618 IF STP(CUSTOMER$)<>"" AND SEC$(71,1)="Y" THEN MSGBOX MSG("NOT_DELETE")+SEP+MSG("CUST_ITEM"),MSG("ACCESS_DEN"),"!",OPT$; RETURN 
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1635 IF STAT_FLAG$="I" THEN MSGBOX MSG("REACTIVATE"),MSG("CONFIRM"),"?,YESNO",OPT$; IF OPT$="YES" THEN STAT_FLAG$="A"; GOSUB WRT; RETURN ! SSP 224124  !SSP#240443
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1652 ! IF STAT_FLAG$="I" THEN STAT_FLAG$="A"; GOSUB WRT; GOTO 1680 ! SSP 224124
1653 IF STP(CUSTOMER$)="" THEN CUSTOMER$="          "
1655 Q2$="",Q0$="I/C",Q1$=CUSTOMER$+ITEM_CODE$,Q3$="M"
1658 CALL "IC2UPB",X3$,X4$,Q0$,Q1$,Q2$,Q3$
1660 ! REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1665 IF Q2$<>"Y" THEN MSGBOX "Activity detected. There is "+Q2$+" - Record set to inactive for later removal.",MSG("WARNING"),"!"; STAT_FLAG$="I"; GOSUB WRT; RETURN ! SSP#047384!SSP#240443
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY,NEW_REC=0
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0,NEXT_ID=CUSTOMER.CTL
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 GOSUB SEL_PROD_CODE; GOSUB SEL_UM
3075 %PATH$="../ICG/PICTURE/"+STP(CUST_DIV$)+STP(CUST_CODE$)+STP(ITEM_CODE$)+".bmp" ! SSP#211771
3077 CUSTOMER$=CUST_DIV$+CUST_CODE$; GOSUB PROCESS_AR1
3080 B_SELL_UM$=SELL_UM$,B_SELL_QTY_PER=SELL_QTY_PER,%ITEM_CODE$=ITEM_CODE$,%ITEM_DESC$=ITEM_DESC$,%PLYS$=PLYS$,O1=INVENTORY_QTY_PER
3082 IF NO_ZZO=0 THEN GOSUB CHECK_ZZO
3085 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$
3099 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3325 IF RT$>"" THEN IF RT$(7,1)="H" THEN CUSTT$=CUSTOME$; CALL "RT2WOC",X3$,X4$,CUSTOMER$,"IC0...","U",CUSTOMER$+ITEM_CODE$
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3805 IF ICGMAZ.1=1 THEN CHANGE_FLG=1
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUSTOMER.CTL,_FIRST_FIELD=ITEM_DESC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3845 IF NEW_REC=1 AND _YESNO$="NO" THEN REMOVE (_FIL_NO,KEY=_KEY$,DOM=*NEXT)
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3865 ICGMAZ.1=0
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
5100 DIM A$(187),A(40)
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR"),_MSG_DIRECTORY$=MSG("DIRECTORY"),_MSG_END_OF_FIL$=MSG("END_OF_FIL"),_MSG_FILOPNERR1$=MSG("FILOPNERR1"),_MSG_JUST_CHECK$=MSG("JUST_CHECK"),_MSG_MANDATORY$=MSG("MANDATORY"),_MSG_NEXT$=MSG("NEXT"),_MSG_NON_NUMER$=MSG("NON_NUMER"),_MSG_NOT_FOUND$=MSG("NOT_FOUND"),_MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG"),_MSG_PRECEDING$=MSG("PRECEDING"),_MSG_PREFIX$=MSG("PREFIX"),_MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD"),_MSG_REC_CR_NEW$=MSG("REC_CR_NEW"),_MSG_REC_LOCKED$=MSG("REC_LOCKED"),_MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1),_MSG_REC_NOTFND$=MSG("REC_NOTFND"),_MSG_REC_NO_1ST$=MSG("REC_NO_1ST"),_MSG_REC_NO_LST$=MSG("REC_NO_LST"),_MSG_REC_REMOVE$=MSG("REC_REMOVE"),_MSG_REC_UPDADD$=MSG("REC_UPDADD"),_MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1),_MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS"),_MSG_START_FILE$=MSG("START_FILE"),_MSG_UPDATE$=MSG("UPDATE"),_MSG_UPD_OTHER1$=MSG("UPD_OTHER1"),_MSG_UPD_OTHER2$=MSG("UPD_OTHER2"),_MSG_UPD_SAME$=MSG("UPD_SAME"),_MSG_WARNING$=MSG("WARNING"),_MSG_CANNOT_WRITE$=MSG("CANT_WRITE"),_MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 BASE_PRICE$=STR(BASE_PRICE)
10030 QTY_BREAK_1$=STR(QTY_BREAK_1),QTY_PRICE_1$=STR(QTY_PRICE_1),QTY_BREAK_2$=STR(QTY_BREAK_2),QTY_PRICE_2$=STR(QTY_PRICE_2),QTY_BREAK_3$=STR(QTY_BREAK_3),QTY_PRICE_3$=STR(QTY_PRICE_3),QTY_BREAK_4$=STR(QTY_BREAK_4),QTY_PRICE_4$=STR(QTY_PRICE_4),QTY_BREAK_5$=STR(QTY_BREAK_5),QTY_PRICE_5$=STR(QTY_PRICE_5),QTY_BREAK_6$=STR(QTY_BREAK_6),QTY_PRICE_6$=STR(QTY_PRICE_6),AVG_SALE_PR_FOR_FMGT$=STR(AVG_SALE_PR_FOR_FMGT)
10160 SELL_QTY_PER$=STR(SELL_QTY_PER),INVENTORY_QTY_PER$=STR(INVENTORY_QTY_PER),CTN_WT$=STR(CTN_WT),LAST_PURCH_COST$=STR(LAST_PURCH_COST),AVG_COST$=STR(AVG_COST),CTN_PACK$=STR(CTN_PACK),SPER_UNIT_COST$=STR(SPER_UNIT_COST),QTY_BREAK_7$=STR(QTY_BREAK_7),QTY_PRICE_7$=STR(QTY_PRICE_7)
10250 QTY_BREAK_8$=STR(QTY_BREAK_8),QTY_PRICE_8$=STR(QTY_PRICE_8),QTY_BREAK_9$=STR(QTY_BREAK_9),QTY_PRICE_9$=STR(QTY_PRICE_9),QTY_BREAK_10$=STR(QTY_BREAK_10),QTY_PRICE_10$=STR(QTY_PRICE_10),QTY_BREAK_11$=STR(QTY_BREAK_11),QTY_PRICE_11$=STR(QTY_PRICE_11),QTY_BREAK_12$=STR(QTY_BREAK_12),QTY_PRICE_12$=STR(QTY_PRICE_12)
10350 IC0_UNUSED_2$=STR(IC0_UNUSED_2),IC0_UNUSED_3$=STR(IC0_UNUSED_3),IC0_UNUSED_4$=STR(IC0_UNUSED_4),IC0_UNUSED_5$=STR(IC0_UNUSED_5),IC0_UNUSED_6$=STR(IC0_UNUSED_6),IC0_UNUSED_7$=STR(IC0_UNUSED_7),IC0_UNUSED_8$=STR(IC0_UNUSED_8),IC0_UNUSED_9$=STR(IC0_UNUSED_9)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="BASE_PRICE",_X=BASE_PRICE.CTL,BASE_PRICE=NUM(BASE_PRICE$,ERR=NON_NUMERIC)
11030 _X$="QTY_BREAK_1",_X=QTY_BREAK_1.CTL,QTY_BREAK_1=NUM(QTY_BREAK_1$,ERR=NON_NUMERIC)
11040 _X$="QTY_PRICE_1",_X=QTY_PRICE_1.CTL,QTY_PRICE_1=NUM(QTY_PRICE_1$,ERR=NON_NUMERIC)
11050 _X$="QTY_BREAK_2",_X=QTY_BREAK_2.CTL,QTY_BREAK_2=NUM(QTY_BREAK_2$,ERR=NON_NUMERIC)
11060 _X$="QTY_PRICE_2",_X=QTY_PRICE_2.CTL,QTY_PRICE_2=NUM(QTY_PRICE_2$,ERR=NON_NUMERIC)
11070 _X$="QTY_BREAK_3",_X=QTY_BREAK_3.CTL,QTY_BREAK_3=NUM(QTY_BREAK_3$,ERR=NON_NUMERIC)
11080 _X$="QTY_PRICE_3",_X=QTY_PRICE_3.CTL,QTY_PRICE_3=NUM(QTY_PRICE_3$,ERR=NON_NUMERIC)
11090 _X$="QTY_BREAK_4",_X=QTY_BREAK_4.CTL,QTY_BREAK_4=NUM(QTY_BREAK_4$,ERR=NON_NUMERIC)
11100 _X$="QTY_PRICE_4",_X=QTY_PRICE_4.CTL,QTY_PRICE_4=NUM(QTY_PRICE_4$,ERR=NON_NUMERIC)
11110 _X$="QTY_BREAK_5",_X=QTY_BREAK_5.CTL,QTY_BREAK_5=NUM(QTY_BREAK_5$,ERR=NON_NUMERIC)
11120 _X$="QTY_PRICE_5",_X=QTY_PRICE_5.CTL,QTY_PRICE_5=NUM(QTY_PRICE_5$,ERR=NON_NUMERIC)
11130 _X$="QTY_BREAK_6",_X=QTY_BREAK_6.CTL,QTY_BREAK_6=NUM(QTY_BREAK_6$,ERR=NON_NUMERIC)
11140 _X$="QTY_PRICE_6",_X=QTY_PRICE_6.CTL,QTY_PRICE_6=NUM(QTY_PRICE_6$,ERR=NON_NUMERIC)
11150 _X$="AVG_SALE_PR_FOR_FMGT",_X=AVG_SALE_PR_FOR_FMGT.CTL,AVG_SALE_PR_FOR_FMGT=NUM(AVG_SALE_PR_FOR_FMGT$,ERR=NON_NUMERIC)
11160 _X$="SELL_QTY_PER",_X=SELL_QTY_PER.CTL,SELL_QTY_PER=NUM(SELL_QTY_PER$,ERR=NON_NUMERIC)
11170 _X$="INVENTORY_QTY_PER",_X=INVENTORY_QTY_PER.CTL,INVENTORY_QTY_PER=NUM(INVENTORY_QTY_PER$,ERR=NON_NUMERIC)
11180 _X$="CTN_WT",_X=CTN_WT.CTL,CTN_WT=NUM(CTN_WT$,ERR=NON_NUMERIC)
11190 _X$="LAST_PURCH_COST",_X=LAST_PURCH_COST.CTL,LAST_PURCH_COST=NUM(LAST_PURCH_COST$,ERR=NON_NUMERIC)
11200 _X$="AVG_COST",_X=AVG_COST.CTL,AVG_COST=NUM(AVG_COST$,ERR=NON_NUMERIC)
11210 _X$="CTN_PACK",_X=CTN_PACK.CTL,CTN_PACK=NUM(CTN_PACK$,ERR=NON_NUMERIC)
11220 _X$="SPER_UNIT_COST",_X=SPER_UNIT_COST.CTL,SPER_UNIT_COST=NUM(SPER_UNIT_COST$,ERR=NON_NUMERIC)
11230 _X$="QTY_BREAK_7",_X=QTY_BREAK_7.CTL,QTY_BREAK_7=NUM(QTY_BREAK_7$,ERR=NON_NUMERIC)
11240 _X$="QTY_PRICE_7",_X=QTY_PRICE_7.CTL,QTY_PRICE_7=NUM(QTY_PRICE_7$,ERR=NON_NUMERIC)
11250 _X$="QTY_BREAK_8",_X=QTY_BREAK_8.CTL,QTY_BREAK_8=NUM(QTY_BREAK_8$,ERR=NON_NUMERIC)
11260 _X$="QTY_PRICE_8",_X=QTY_PRICE_8.CTL,QTY_PRICE_8=NUM(QTY_PRICE_8$,ERR=NON_NUMERIC)
11270 _X$="QTY_BREAK_9",_X=QTY_BREAK_9.CTL,QTY_BREAK_9=NUM(QTY_BREAK_9$,ERR=NON_NUMERIC)
11280 _X$="QTY_PRICE_9",_X=QTY_PRICE_9.CTL,QTY_PRICE_9=NUM(QTY_PRICE_9$,ERR=NON_NUMERIC)
11290 _X$="QTY_BREAK_10",_X=QTY_BREAK_10.CTL,QTY_BREAK_10=NUM(QTY_BREAK_10$,ERR=NON_NUMERIC)
11300 _X$="QTY_PRICE_10",_X=QTY_PRICE_10.CTL,QTY_PRICE_10=NUM(QTY_PRICE_10$,ERR=NON_NUMERIC)
11310 _X$="QTY_BREAK_11",_X=QTY_BREAK_11.CTL,QTY_BREAK_11=NUM(QTY_BREAK_11$,ERR=NON_NUMERIC)
11320 _X$="QTY_PRICE_11",_X=QTY_PRICE_11.CTL,QTY_PRICE_11=NUM(QTY_PRICE_11$,ERR=NON_NUMERIC)
11330 _X$="QTY_BREAK_12",_X=QTY_BREAK_12.CTL,QTY_BREAK_12=NUM(QTY_BREAK_12$,ERR=NON_NUMERIC)
11340 _X$="QTY_PRICE_12",_X=QTY_PRICE_12.CTL,QTY_PRICE_12=NUM(QTY_PRICE_12$,ERR=NON_NUMERIC)
11350 _X$="IC0_UNUSED_2",_X=IC0_UNUSED_2.CTL,IC0_UNUSED_2=NUM(IC0_UNUSED_2$,ERR=NON_NUMERIC)
11360 _X$="IC0_UNUSED_3",_X=IC0_UNUSED_3.CTL,IC0_UNUSED_3=NUM(IC0_UNUSED_3$,ERR=NON_NUMERIC)
11370 _X$="IC0_UNUSED_4",_X=IC0_UNUSED_4.CTL,IC0_UNUSED_4=NUM(IC0_UNUSED_4$,ERR=NON_NUMERIC)
11380 _X$="IC0_UNUSED_5",_X=IC0_UNUSED_5.CTL,IC0_UNUSED_5=NUM(IC0_UNUSED_5$,ERR=NON_NUMERIC)
11390 _X$="IC0_UNUSED_6",_X=IC0_UNUSED_6.CTL,IC0_UNUSED_6=NUM(IC0_UNUSED_6$,ERR=NON_NUMERIC)
11400 _X$="IC0_UNUSED_7",_X=IC0_UNUSED_7.CTL,IC0_UNUSED_7=NUM(IC0_UNUSED_7$,ERR=NON_NUMERIC)
11410 _X$="IC0_UNUSED_8",_X=IC0_UNUSED_8.CTL,IC0_UNUSED_8=NUM(IC0_UNUSED_8$,ERR=NON_NUMERIC)
11420 _X$="IC0_UNUSED_9",_X=IC0_UNUSED_9.CTL,IC0_UNUSED_9=NUM(IC0_UNUSED_9$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1,SEL_GRID=0
12025 IF STP(PROD_CODE$)="" THEN _W_FLG=0; MSGBOX MSG("ENTER_PC"),MSG("WARNING"),"!,TIM=5"; NEXT_ID=PROD_CODE.CTL; GOTO *RETURN
12030 IF STP(INVENTORY_UM$)="" THEN _W_FLG=0; MSGBOX MSG("ENTER_UM"),MSG("WARNING"),"!,TIM=5"; NEXT_ID=INVENTORY_UM.CTL; GOTO *RETURN
12040 IF STP(INVENTORY_QTY_PER$)="" OR NUM(INVENTORY_QTY_PER$)=0 THEN _W_FLG=0; MSGBOX MSG("QTY_NOZERO"),MSG("WARNING"),"!,TIM=5"; NEXT_ID=INVENTORY_QTY_PER.CTL; GOTO *RETURN
12050 IF STP(VEND_DIV$+VEND_CODE$)="" THEN _W_FLG=0,CHANGE_FLG=1; MSGBOX MSG("SETUP_SUPP"),MSG("WARNING"),"!,TIM=5"; SEL_GRID=1; GOTO *RETURN
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN CUST_DIV$=""
13030 IF _CLR_FLG$="R" THEN CUST_CODE$="",CUSTOMER$="",%CUST_NAME$="",%CUSTOMER$=""
13040 IF _CLR_FLG$="R" THEN ITEM_CODE$=""
13050 ITEM_DESC$="",PROD_CODE$="",PROD_CODE_DESC$="",LEFT_RIGHT$="",TOP_BOTTOM$="",PLYS$=""
13100 VEND_DIV$="",VEND_CODE$="",PLANT_CODE$="",LAST_SOLD_DATE$="",LAST_PURCH_DATE$="",STAT_FLAG$="",ITEM_PRICE_CLASS$="",LOT_INV_FOR_THIS_ITM$=""
13180 QTY_BREAK_PRICE_GRP$="",SECURE_FOR_REQ$="",NEVER_BACKORDER$="",IC0_UNUSED_1$="",SELL_UM$="",INVENTORY_UM$="",UM_DESC$="",DESC_LINE_2$=""
13250 ITEM_GROUP_CODE$="",PRICING_FEATURES$=""
13260 BASE_PRICE=0,QTY_BREAK_1=0,QTY_PRICE_1=0,QTY_BREAK_2=0,QTY_PRICE_2=0,QTY_BREAK_3=0,QTY_PRICE_3=0,QTY_BREAK_4=0,QTY_PRICE_4=0,QTY_BREAK_5=0,QTY_PRICE_5=0,QTY_BREAK_6=0,QTY_PRICE_6=0
13400 AVG_SALE_PR_FOR_FMGT=0,SELL_QTY_PER=0,INVENTORY_QTY_PER=0,CTN_WT=0,LAST_PURCH_COST=0,AVG_COST=0,CTN_PACK=0,SPER_UNIT_COST=0,QTY_BREAK_7=0,QTY_PRICE_7=0,QTY_BREAK_8=0,QTY_PRICE_8=0
13520 QTY_BREAK_9=0,QTY_PRICE_9=0,QTY_BREAK_10=0,QTY_PRICE_10=0,QTY_BREAK_11=0,QTY_PRICE_11=0,QTY_BREAK_12=0,QTY_PRICE_12=0
13530 IC0_UNUSED_2=0,IC0_UNUSED_3=0,IC0_UNUSED_4=0,IC0_UNUSED_5=0,IC0_UNUSED_6=0,IC0_UNUSED_7=0,IC0_UNUSED_8=0,IC0_UNUSED_9=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUST_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=ITEM_CODE.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14985 IF MID(IC$,51,1)<>"Y" THEN BUTTON DISABLE BT_10.CTL,ERR=*NEXT
14987 IF MID(P4$,188,1)<>"Y" THEN CALL "*WINGRP;DISABLE",PLYS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(66,"N")
15030 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15040 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15050 IF _ORIG.ITEM_CODE$=_CUR.ITEM_CODE$ OR ITEM_CODE$=_CUR.ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CODE$=ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$
15060 IF _ORIG.ITEM_DESC$=_CUR.ITEM_DESC$ OR ITEM_DESC$=_CUR.ITEM_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_DESC$=ITEM_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_DESC")+" = "+_CUR.ITEM_DESC$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_DESC")+" = "+_CUR.ITEM_DESC$
15070 IF _ORIG.PROD_CODE$=_CUR.PROD_CODE$ OR PROD_CODE$=_CUR.PROD_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PROD_CODE$=PROD_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PROD_CODE")+" = "+_CUR.PROD_CODE$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PROD_CODE")+" = "+_CUR.PROD_CODE$
15080 IF _ORIG.LEFT_RIGHT$=_CUR.LEFT_RIGHT$ OR LEFT_RIGHT$=_CUR.LEFT_RIGHT$ THEN GOTO *NEXT ELSE IF _ORIG.LEFT_RIGHT$=LEFT_RIGHT$ THEN _CHG2$=_CHG2$+SEP+MSG("LEFT_RIGHT")+" = "+_CUR.LEFT_RIGHT$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LEFT_RIGHT")+" = "+_CUR.LEFT_RIGHT$
15090 IF _ORIG.TOP_BOTTOM$=_CUR.TOP_BOTTOM$ OR TOP_BOTTOM$=_CUR.TOP_BOTTOM$ THEN GOTO *NEXT ELSE IF _ORIG.TOP_BOTTOM$=TOP_BOTTOM$ THEN _CHG2$=_CHG2$+SEP+MSG("TOP_BOTTOM")+" = "+_CUR.TOP_BOTTOM$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TOP_BOTTOM")+" = "+_CUR.TOP_BOTTOM$
15100 IF _ORIG.PLYS$=_CUR.PLYS$ OR PLYS$=_CUR.PLYS$ THEN GOTO *NEXT ELSE IF _ORIG.PLYS$=PLYS$ THEN _CHG2$=_CHG2$+SEP+MSG("PLYS")+" = "+_CUR.PLYS$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLYS")+" = "+_CUR.PLYS$
15110 IF _ORIG.VEND_DIV$=_CUR.VEND_DIV$ OR VEND_DIV$=_CUR.VEND_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_DIV$=VEND_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$
15120 IF _ORIG.VEND_CODE$=_CUR.VEND_CODE$ OR VEND_CODE$=_CUR.VEND_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_CODE$=VEND_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$
15130 IF _ORIG.PLANT_CODE$=_CUR.PLANT_CODE$ OR PLANT_CODE$=_CUR.PLANT_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PLANT_CODE$=PLANT_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PLANT_CODE")+" = "+_CUR.PLANT_CODE$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLANT_CODE")+" = "+_CUR.PLANT_CODE$
15140 IF _ORIG.LAST_SOLD_DATE$=_CUR.LAST_SOLD_DATE$ OR LAST_SOLD_DATE$=_CUR.LAST_SOLD_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.LAST_SOLD_DATE$=LAST_SOLD_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("LAST_S_D")+" = "+_CUR.LAST_SOLD_DATE$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_S_D")+" = "+_CUR.LAST_SOLD_DATE$
15150 IF _ORIG.LAST_PURCH_DATE$=_CUR.LAST_PURCH_DATE$ OR LAST_PURCH_DATE$=_CUR.LAST_PURCH_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.LAST_PURCH_DATE$=LAST_PURCH_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("LAST_P_D")+" = "+_CUR.LAST_PURCH_DATE$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_P_D")+" = "+_CUR.LAST_PURCH_DATE$
15160 IF _ORIG.STAT_FLAG$=_CUR.STAT_FLAG$ OR STAT_FLAG$=_CUR.STAT_FLAG$ THEN GOTO *NEXT ELSE IF _ORIG.STAT_FLAG$=STAT_FLAG$ THEN _CHG2$=_CHG2$+SEP+MSG("STAT_FLAG")+" = "+_CUR.STAT_FLAG$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STAT_FLAG")+" = "+_CUR.STAT_FLAG$
15170 IF _ORIG.ITEM_PRICE_CLASS$=_CUR.ITEM_PRICE_CLASS$ OR ITEM_PRICE_CLASS$=_CUR.ITEM_PRICE_CLASS$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_PRICE_CLASS$=ITEM_PRICE_CLASS$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_P_C")+" = "+_CUR.ITEM_PRICE_CLASS$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_P_C")+" = "+_CUR.ITEM_PRICE_CLASS$
15180 IF _ORIG.LOT_INV_FOR_THIS_ITM$=_CUR.LOT_INV_FOR_THIS_ITM$ OR LOT_INV_FOR_THIS_ITM$=_CUR.LOT_INV_FOR_THIS_ITM$ THEN GOTO *NEXT ELSE IF _ORIG.LOT_INV_FOR_THIS_ITM$=LOT_INV_FOR_THIS_ITM$ THEN _CHG2$=_CHG2$+SEP+MSG("L_I_F_T_I")+" = "+_CUR.LOT_INV_FOR_THIS_ITM$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("L_I_F_T_I")+" = "+_CUR.LOT_INV_FOR_THIS_ITM$
15190 IF _ORIG.QTY_BREAK_PRICE_GRP$=_CUR.QTY_BREAK_PRICE_GRP$ OR QTY_BREAK_PRICE_GRP$=_CUR.QTY_BREAK_PRICE_GRP$ THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_PRICE_GRP$=QTY_BREAK_PRICE_GRP$ THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_P_G")+" = "+_CUR.QTY_BREAK_PRICE_GRP$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_P_G")+" = "+_CUR.QTY_BREAK_PRICE_GRP$
15200 IF _ORIG.SECURE_FOR_REQ$=_CUR.SECURE_FOR_REQ$ OR SECURE_FOR_REQ$=_CUR.SECURE_FOR_REQ$ THEN GOTO *NEXT ELSE IF _ORIG.SECURE_FOR_REQ$=SECURE_FOR_REQ$ THEN _CHG2$=_CHG2$+SEP+MSG("SECU_F_R")+" = "+_CUR.SECURE_FOR_REQ$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SECU_F_R")+" = "+_CUR.SECURE_FOR_REQ$
15210 IF _ORIG.NEVER_BACKORDER$=_CUR.NEVER_BACKORDER$ OR NEVER_BACKORDER$=_CUR.NEVER_BACKORDER$ THEN GOTO *NEXT ELSE IF _ORIG.NEVER_BACKORDER$=NEVER_BACKORDER$ THEN _CHG2$=_CHG2$+SEP+MSG("NEV_BACK")+" = "+_CUR.NEVER_BACKORDER$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NEV_BACK")+" = "+_CUR.NEVER_BACKORDER$
15220 IF _ORIG.IC0_UNUSED_1$=_CUR.IC0_UNUSED_1$ OR IC0_UNUSED_1$=_CUR.IC0_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.IC0_UNUSED_1$=IC0_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.IC0_UNUSED_1$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.IC0_UNUSED_1$
15230 IF _ORIG.SELL_UM$=_CUR.SELL_UM$ OR SELL_UM$=_CUR.SELL_UM$ THEN GOTO *NEXT ELSE IF _ORIG.SELL_UM$=SELL_UM$ THEN _CHG2$=_CHG2$+SEP+MSG("SELL_UM")+" = "+_CUR.SELL_UM$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SELL_UM")+" = "+_CUR.SELL_UM$
15240 IF _ORIG.INVENTORY_UM$=_CUR.INVENTORY_UM$ OR INVENTORY_UM$=_CUR.INVENTORY_UM$ THEN GOTO *NEXT ELSE IF _ORIG.INVENTORY_UM$=INVENTORY_UM$ THEN _CHG2$=_CHG2$+SEP+MSG("INVT_UM")+" = "+_CUR.INVENTORY_UM$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INVT_UM")+" = "+_CUR.INVENTORY_UM$
15250 IF _ORIG.DESC_LINE_2$=_CUR.DESC_LINE_2$ OR DESC_LINE_2$=_CUR.DESC_LINE_2$ THEN GOTO *NEXT ELSE IF _ORIG.DESC_LINE_2$=DESC_LINE_2$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC_L_2")+" = "+_CUR.DESC_LINE_2$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC_L_2")+" = "+_CUR.DESC_LINE_2$
15260 IF _ORIG.ITEM_GROUP_CODE$=_CUR.ITEM_GROUP_CODE$ OR ITEM_GROUP_CODE$=_CUR.ITEM_GROUP_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_GROUP_CODE$=ITEM_GROUP_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_G_C")+" = "+_CUR.ITEM_GROUP_CODE$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_G_C")+" = "+_CUR.ITEM_GROUP_CODE$
15270 IF _ORIG.PRICING_FEATURES$=_CUR.PRICING_FEATURES$ OR PRICING_FEATURES$=_CUR.PRICING_FEATURES$ THEN GOTO *NEXT ELSE IF _ORIG.PRICING_FEATURES$=PRICING_FEATURES$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIC_F")+" = "+_CUR.PRICING_FEATURES$,_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIC_F")+" = "+_CUR.PRICING_FEATURES$
15280 IF _ORIG.BASE_PRICE=_CUR.BASE_PRICE OR BASE_PRICE=_CUR.BASE_PRICE THEN GOTO *NEXT ELSE IF _ORIG.BASE_PRICE=BASE_PRICE THEN _CHG2$=_CHG2$+SEP+MSG("BASE_PRICE")+" = "+STR(_CUR.BASE_PRICE),_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BASE_PRICE")+" = "+STR(_CUR.BASE_PRICE)
15290 IF _ORIG.QTY_BREAK_1=_CUR.QTY_BREAK_1 OR QTY_BREAK_1=_CUR.QTY_BREAK_1 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_1=QTY_BREAK_1 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_1")+" = "+STR(_CUR.QTY_BREAK_1),_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_1")+" = "+STR(_CUR.QTY_BREAK_1)
15300 IF _ORIG.QTY_PRICE_1=_CUR.QTY_PRICE_1 OR QTY_PRICE_1=_CUR.QTY_PRICE_1 THEN GOTO *NEXT ELSE IF _ORIG.QTY_PRICE_1=QTY_PRICE_1 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_1")+" = "+STR(_CUR.QTY_PRICE_1),_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_1")+" = "+STR(_CUR.QTY_PRICE_1)
15310 IF _ORIG.QTY_BREAK_2=_CUR.QTY_BREAK_2 OR QTY_BREAK_2=_CUR.QTY_BREAK_2 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_2=QTY_BREAK_2 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_2")+" = "+STR(_CUR.QTY_BREAK_2),_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_2")+" = "+STR(_CUR.QTY_BREAK_2)
15320 IF _ORIG.QTY_PRICE_2=_CUR.QTY_PRICE_2 OR QTY_PRICE_2=_CUR.QTY_PRICE_2 THEN GOTO *NEXT ELSE IF _ORIG.QTY_PRICE_2=QTY_PRICE_2 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_2")+" = "+STR(_CUR.QTY_PRICE_2),_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_2")+" = "+STR(_CUR.QTY_PRICE_2)
15330 IF _ORIG.QTY_BREAK_3=_CUR.QTY_BREAK_3 OR QTY_BREAK_3=_CUR.QTY_BREAK_3 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_3=QTY_BREAK_3 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_3")+" = "+STR(_CUR.QTY_BREAK_3),_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_3")+" = "+STR(_CUR.QTY_BREAK_3)
15340 IF _ORIG.QTY_PRICE_3=_CUR.QTY_PRICE_3 OR QTY_PRICE_3=_CUR.QTY_PRICE_3 THEN GOTO *NEXT ELSE IF _ORIG.QTY_PRICE_3=QTY_PRICE_3 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_3")+" = "+STR(_CUR.QTY_PRICE_3),_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_3")+" = "+STR(_CUR.QTY_PRICE_3)
15350 IF _ORIG.QTY_BREAK_4=_CUR.QTY_BREAK_4 OR QTY_BREAK_4=_CUR.QTY_BREAK_4 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_4=QTY_BREAK_4 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_4")+" = "+STR(_CUR.QTY_BREAK_4),_CHG_VAR$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_4")+" = "+STR(_CUR.QTY_BREAK_4)
15360 IF _ORIG.QTY_PRICE_4=_CUR.QTY_PRICE_4 OR QTY_PRICE_4=_CUR.QTY_PRICE_4 THEN GOTO *NEXT ELSE IF _ORIG.QTY_PRICE_4=QTY_PRICE_4 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_4")+" = "+STR(_CUR.QTY_PRICE_4),_CHG_VAR$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_4")+" = "+STR(_CUR.QTY_PRICE_4)
15370 IF _ORIG.QTY_BREAK_5=_CUR.QTY_BREAK_5 OR QTY_BREAK_5=_CUR.QTY_BREAK_5 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_5=QTY_BREAK_5 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_5")+" = "+STR(_CUR.QTY_BREAK_5),_CHG_VAR$(35,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_5")+" = "+STR(_CUR.QTY_BREAK_5)
15380 IF _ORIG.QTY_PRICE_5=_CUR.QTY_PRICE_5 OR QTY_PRICE_5=_CUR.QTY_PRICE_5 THEN GOTO *NEXT ELSE IF _ORIG.QTY_PRICE_5=QTY_PRICE_5 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_5")+" = "+STR(_CUR.QTY_PRICE_5),_CHG_VAR$(36,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_5")+" = "+STR(_CUR.QTY_PRICE_5)
15390 IF _ORIG.QTY_BREAK_6=_CUR.QTY_BREAK_6 OR QTY_BREAK_6=_CUR.QTY_BREAK_6 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_6=QTY_BREAK_6 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_6")+" = "+STR(_CUR.QTY_BREAK_6),_CHG_VAR$(37,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_6")+" = "+STR(_CUR.QTY_BREAK_6)
15400 IF _ORIG.QTY_PRICE_6=_CUR.QTY_PRICE_6 OR QTY_PRICE_6=_CUR.QTY_PRICE_6 THEN GOTO *NEXT ELSE IF _ORIG.QTY_PRICE_6=QTY_PRICE_6 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_6")+" = "+STR(_CUR.QTY_PRICE_6),_CHG_VAR$(38,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_6")+" = "+STR(_CUR.QTY_PRICE_6)
15410 IF _ORIG.AVG_SALE_PR_FOR_FMGT=_CUR.AVG_SALE_PR_FOR_FMGT OR AVG_SALE_PR_FOR_FMGT=_CUR.AVG_SALE_PR_FOR_FMGT THEN GOTO *NEXT ELSE IF _ORIG.AVG_SALE_PR_FOR_FMGT=AVG_SALE_PR_FOR_FMGT THEN _CHG2$=_CHG2$+SEP+MSG("A_S_P_F_F")+" = "+STR(_CUR.AVG_SALE_PR_FOR_FMGT),_CHG_VAR$(39,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("A_S_P_F_F")+" = "+STR(_CUR.AVG_SALE_PR_FOR_FMGT)
15420 IF _ORIG.SELL_QTY_PER=_CUR.SELL_QTY_PER OR SELL_QTY_PER=_CUR.SELL_QTY_PER THEN GOTO *NEXT ELSE IF _ORIG.SELL_QTY_PER=SELL_QTY_PER THEN _CHG2$=_CHG2$+SEP+MSG("SELL_Q_P")+" = "+STR(_CUR.SELL_QTY_PER),_CHG_VAR$(40,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SELL_Q_P")+" = "+STR(_CUR.SELL_QTY_PER)
15430 IF _ORIG.INVENTORY_QTY_PER=_CUR.INVENTORY_QTY_PER OR INVENTORY_QTY_PER=_CUR.INVENTORY_QTY_PER THEN GOTO *NEXT ELSE IF _ORIG.INVENTORY_QTY_PER=INVENTORY_QTY_PER THEN _CHG2$=_CHG2$+SEP+MSG("INVE_Q_P")+" = "+STR(_CUR.INVENTORY_QTY_PER),_CHG_VAR$(41,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INVE_Q_P")+" = "+STR(_CUR.INVENTORY_QTY_PER)
15440 IF _ORIG.CTN_WT=_CUR.CTN_WT OR CTN_WT=_CUR.CTN_WT THEN GOTO *NEXT ELSE IF _ORIG.CTN_WT=CTN_WT THEN _CHG2$=_CHG2$+SEP+MSG("CTN_WT")+" = "+STR(_CUR.CTN_WT),_CHG_VAR$(42,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CTN_WT")+" = "+STR(_CUR.CTN_WT)
15450 IF _ORIG.LAST_PURCH_COST=_CUR.LAST_PURCH_COST OR LAST_PURCH_COST=_CUR.LAST_PURCH_COST THEN GOTO *NEXT ELSE IF _ORIG.LAST_PURCH_COST=LAST_PURCH_COST THEN _CHG2$=_CHG2$+SEP+MSG("LAST_P_C")+" = "+STR(_CUR.LAST_PURCH_COST),_CHG_VAR$(43,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_P_C")+" = "+STR(_CUR.LAST_PURCH_COST)
15460 IF _ORIG.AVG_COST=_CUR.AVG_COST OR AVG_COST=_CUR.AVG_COST THEN GOTO *NEXT ELSE IF _ORIG.AVG_COST=AVG_COST THEN _CHG2$=_CHG2$+SEP+MSG("AVG_COST")+" = "+STR(_CUR.AVG_COST),_CHG_VAR$(44,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("AVG_COST")+" = "+STR(_CUR.AVG_COST)
15470 IF _ORIG.CTN_PACK=_CUR.CTN_PACK OR CTN_PACK=_CUR.CTN_PACK THEN GOTO *NEXT ELSE IF _ORIG.CTN_PACK=CTN_PACK THEN _CHG2$=_CHG2$+SEP+MSG("CTN_PACK")+" = "+STR(_CUR.CTN_PACK),_CHG_VAR$(45,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CTN_PACK")+" = "+STR(_CUR.CTN_PACK)
15480 IF _ORIG.SPER_UNIT_COST=_CUR.SPER_UNIT_COST OR SPER_UNIT_COST=_CUR.SPER_UNIT_COST THEN GOTO *NEXT ELSE IF _ORIG.SPER_UNIT_COST=SPER_UNIT_COST THEN _CHG2$=_CHG2$+SEP+MSG("SPER_U_C")+" = "+STR(_CUR.SPER_UNIT_COST),_CHG_VAR$(46,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPER_U_C")+" = "+STR(_CUR.SPER_UNIT_COST)
15490 IF _ORIG.QTY_BREAK_7=_CUR.QTY_BREAK_7 OR QTY_BREAK_7=_CUR.QTY_BREAK_7 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_7=QTY_BREAK_7 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_7")+" = "+STR(_CUR.QTY_BREAK_7),_CHG_VAR$(47,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_7")+" = "+STR(_CUR.QTY_BREAK_7)
15500 IF _ORIG.QTY_PRICE_7=_CUR.QTY_PRICE_7 OR QTY_PRICE_7=_CUR.QTY_PRICE_7 THEN GOTO *NEXT ELSE IF _ORIG.QTY_PRICE_7=QTY_PRICE_7 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_7")+" = "+STR(_CUR.QTY_PRICE_7),_CHG_VAR$(48,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_7")+" = "+STR(_CUR.QTY_PRICE_7)
15510 IF _ORIG.QTY_BREAK_8=_CUR.QTY_BREAK_8 OR QTY_BREAK_8=_CUR.QTY_BREAK_8 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_8=QTY_BREAK_8 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_8")+" = "+STR(_CUR.QTY_BREAK_8),_CHG_VAR$(49,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_8")+" = "+STR(_CUR.QTY_BREAK_8)
15520 IF _ORIG.QTY_PRICE_8=_CUR.QTY_PRICE_8 OR QTY_PRICE_8=_CUR.QTY_PRICE_8 THEN GOTO *NEXT ELSE IF _ORIG.QTY_PRICE_8=QTY_PRICE_8 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_8")+" = "+STR(_CUR.QTY_PRICE_8),_CHG_VAR$(50,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_8")+" = "+STR(_CUR.QTY_PRICE_8)
15530 IF _ORIG.QTY_BREAK_9=_CUR.QTY_BREAK_9 OR QTY_BREAK_9=_CUR.QTY_BREAK_9 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_9=QTY_BREAK_9 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_9")+" = "+STR(_CUR.QTY_BREAK_9),_CHG_VAR$(51,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_9")+" = "+STR(_CUR.QTY_BREAK_9)
15540 IF _ORIG.QTY_PRICE_9=_CUR.QTY_PRICE_9 OR QTY_PRICE_9=_CUR.QTY_PRICE_9 THEN GOTO *NEXT ELSE IF _ORIG.QTY_PRICE_9=QTY_PRICE_9 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_9")+" = "+STR(_CUR.QTY_PRICE_9),_CHG_VAR$(52,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_9")+" = "+STR(_CUR.QTY_PRICE_9)
15550 IF _ORIG.QTY_BREAK_10=_CUR.QTY_BREAK_10 OR QTY_BREAK_10=_CUR.QTY_BREAK_10 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_10=QTY_BREAK_10 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_10")+" = "+STR(_CUR.QTY_BREAK_10),_CHG_VAR$(53,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_10")+" = "+STR(_CUR.QTY_BREAK_10)
15560 IF _ORIG.QTY_PRICE_10=_CUR.QTY_PRICE_10 OR QTY_PRICE_10=_CUR.QTY_PRICE_10 THEN GOTO *NEXT ELSE IF _ORIG.QTY_PRICE_10=QTY_PRICE_10 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_10")+" = "+STR(_CUR.QTY_PRICE_10),_CHG_VAR$(54,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_10")+" = "+STR(_CUR.QTY_PRICE_10)
15570 IF _ORIG.QTY_BREAK_11=_CUR.QTY_BREAK_11 OR QTY_BREAK_11=_CUR.QTY_BREAK_11 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_11=QTY_BREAK_11 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_11")+" = "+STR(_CUR.QTY_BREAK_11),_CHG_VAR$(55,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_11")+" = "+STR(_CUR.QTY_BREAK_11)
15580 IF _ORIG.QTY_PRICE_11=_CUR.QTY_PRICE_11 OR QTY_PRICE_11=_CUR.QTY_PRICE_11 THEN GOTO *NEXT ELSE IF _ORIG.QTY_PRICE_11=QTY_PRICE_11 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_11")+" = "+STR(_CUR.QTY_PRICE_11),_CHG_VAR$(56,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_11")+" = "+STR(_CUR.QTY_PRICE_11)
15590 IF _ORIG.QTY_BREAK_12=_CUR.QTY_BREAK_12 OR QTY_BREAK_12=_CUR.QTY_BREAK_12 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_12=QTY_BREAK_12 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_12")+" = "+STR(_CUR.QTY_BREAK_12),_CHG_VAR$(57,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_12")+" = "+STR(_CUR.QTY_BREAK_12)
15600 IF _ORIG.QTY_PRICE_12=_CUR.QTY_PRICE_12 OR QTY_PRICE_12=_CUR.QTY_PRICE_12 THEN GOTO *NEXT ELSE IF _ORIG.QTY_PRICE_12=QTY_PRICE_12 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_12")+" = "+STR(_CUR.QTY_PRICE_12),_CHG_VAR$(58,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_12")+" = "+STR(_CUR.QTY_PRICE_12)
15610 IF _ORIG.IC0_UNUSED_2=_CUR.IC0_UNUSED_2 OR IC0_UNUSED_2=_CUR.IC0_UNUSED_2 THEN GOTO *NEXT ELSE IF _ORIG.IC0_UNUSED_2=IC0_UNUSED_2 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_2),_CHG_VAR$(59,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_2)
15620 IF _ORIG.IC0_UNUSED_3=_CUR.IC0_UNUSED_3 OR IC0_UNUSED_3=_CUR.IC0_UNUSED_3 THEN GOTO *NEXT ELSE IF _ORIG.IC0_UNUSED_3=IC0_UNUSED_3 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_3),_CHG_VAR$(60,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_3)
15630 IF _ORIG.IC0_UNUSED_4=_CUR.IC0_UNUSED_4 OR IC0_UNUSED_4=_CUR.IC0_UNUSED_4 THEN GOTO *NEXT ELSE IF _ORIG.IC0_UNUSED_4=IC0_UNUSED_4 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_4),_CHG_VAR$(61,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_4)
15640 IF _ORIG.IC0_UNUSED_5=_CUR.IC0_UNUSED_5 OR IC0_UNUSED_5=_CUR.IC0_UNUSED_5 THEN GOTO *NEXT ELSE IF _ORIG.IC0_UNUSED_5=IC0_UNUSED_5 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_5),_CHG_VAR$(62,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_5)
15650 IF _ORIG.IC0_UNUSED_6=_CUR.IC0_UNUSED_6 OR IC0_UNUSED_6=_CUR.IC0_UNUSED_6 THEN GOTO *NEXT ELSE IF _ORIG.IC0_UNUSED_6=IC0_UNUSED_6 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_6),_CHG_VAR$(63,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_6)
15660 IF _ORIG.IC0_UNUSED_7=_CUR.IC0_UNUSED_7 OR IC0_UNUSED_7=_CUR.IC0_UNUSED_7 THEN GOTO *NEXT ELSE IF _ORIG.IC0_UNUSED_7=IC0_UNUSED_7 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_7),_CHG_VAR$(64,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_7)
15670 IF _ORIG.IC0_UNUSED_8=_CUR.IC0_UNUSED_8 OR IC0_UNUSED_8=_CUR.IC0_UNUSED_8 THEN GOTO *NEXT ELSE IF _ORIG.IC0_UNUSED_8=IC0_UNUSED_8 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_8),_CHG_VAR$(65,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_8)
15680 IF _ORIG.IC0_UNUSED_9=_CUR.IC0_UNUSED_9 OR IC0_UNUSED_9=_CUR.IC0_UNUSED_9 THEN GOTO *NEXT ELSE IF _ORIG.IC0_UNUSED_9=IC0_UNUSED_9 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_9),_CHG_VAR$(66,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_9)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16030 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN ITEM_CODE$=_CUR.ITEM_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN ITEM_DESC$=_CUR.ITEM_DESC$
16060 IF _CHG_VAR$(5,1)="Y" THEN PROD_CODE$=_CUR.PROD_CODE$
16070 IF _CHG_VAR$(6,1)="Y" THEN LEFT_RIGHT$=_CUR.LEFT_RIGHT$
16080 IF _CHG_VAR$(7,1)="Y" THEN TOP_BOTTOM$=_CUR.TOP_BOTTOM$
16090 IF _CHG_VAR$(8,1)="Y" THEN PLYS$=_CUR.PLYS$
16100 IF _CHG_VAR$(9,1)="Y" THEN VEND_DIV$=_CUR.VEND_DIV$
16110 IF _CHG_VAR$(10,1)="Y" THEN VEND_CODE$=_CUR.VEND_CODE$
16120 IF _CHG_VAR$(11,1)="Y" THEN PLANT_CODE$=_CUR.PLANT_CODE$
16130 IF _CHG_VAR$(12,1)="Y" THEN LAST_SOLD_DATE$=_CUR.LAST_SOLD_DATE$
16140 IF _CHG_VAR$(13,1)="Y" THEN LAST_PURCH_DATE$=_CUR.LAST_PURCH_DATE$
16150 IF _CHG_VAR$(14,1)="Y" THEN STAT_FLAG$=_CUR.STAT_FLAG$
16160 IF _CHG_VAR$(15,1)="Y" THEN ITEM_PRICE_CLASS$=_CUR.ITEM_PRICE_CLASS$
16170 IF _CHG_VAR$(16,1)="Y" THEN LOT_INV_FOR_THIS_ITM$=_CUR.LOT_INV_FOR_THIS_ITM$
16180 IF _CHG_VAR$(17,1)="Y" THEN QTY_BREAK_PRICE_GRP$=_CUR.QTY_BREAK_PRICE_GRP$
16190 IF _CHG_VAR$(18,1)="Y" THEN SECURE_FOR_REQ$=_CUR.SECURE_FOR_REQ$
16200 IF _CHG_VAR$(19,1)="Y" THEN NEVER_BACKORDER$=_CUR.NEVER_BACKORDER$
16210 IF _CHG_VAR$(20,1)="Y" THEN IC0_UNUSED_1$=_CUR.IC0_UNUSED_1$
16220 IF _CHG_VAR$(21,1)="Y" THEN SELL_UM$=_CUR.SELL_UM$
16230 IF _CHG_VAR$(22,1)="Y" THEN INVENTORY_UM$=_CUR.INVENTORY_UM$
16240 IF _CHG_VAR$(23,1)="Y" THEN DESC_LINE_2$=_CUR.DESC_LINE_2$
16250 IF _CHG_VAR$(24,1)="Y" THEN ITEM_GROUP_CODE$=_CUR.ITEM_GROUP_CODE$
16260 IF _CHG_VAR$(25,1)="Y" THEN PRICING_FEATURES$=_CUR.PRICING_FEATURES$
16270 IF _CHG_VAR$(26,1)="Y" THEN BASE_PRICE=_CUR.BASE_PRICE
16280 IF _CHG_VAR$(27,1)="Y" THEN QTY_BREAK_1=_CUR.QTY_BREAK_1
16290 IF _CHG_VAR$(28,1)="Y" THEN QTY_PRICE_1=_CUR.QTY_PRICE_1
16300 IF _CHG_VAR$(29,1)="Y" THEN QTY_BREAK_2=_CUR.QTY_BREAK_2
16310 IF _CHG_VAR$(30,1)="Y" THEN QTY_PRICE_2=_CUR.QTY_PRICE_2
16320 IF _CHG_VAR$(31,1)="Y" THEN QTY_BREAK_3=_CUR.QTY_BREAK_3
16330 IF _CHG_VAR$(32,1)="Y" THEN QTY_PRICE_3=_CUR.QTY_PRICE_3
16340 IF _CHG_VAR$(33,1)="Y" THEN QTY_BREAK_4=_CUR.QTY_BREAK_4
16350 IF _CHG_VAR$(34,1)="Y" THEN QTY_PRICE_4=_CUR.QTY_PRICE_4
16360 IF _CHG_VAR$(35,1)="Y" THEN QTY_BREAK_5=_CUR.QTY_BREAK_5
16370 IF _CHG_VAR$(36,1)="Y" THEN QTY_PRICE_5=_CUR.QTY_PRICE_5
16380 IF _CHG_VAR$(37,1)="Y" THEN QTY_BREAK_6=_CUR.QTY_BREAK_6
16390 IF _CHG_VAR$(38,1)="Y" THEN QTY_PRICE_6=_CUR.QTY_PRICE_6
16400 IF _CHG_VAR$(39,1)="Y" THEN AVG_SALE_PR_FOR_FMGT=_CUR.AVG_SALE_PR_FOR_FMGT
16410 IF _CHG_VAR$(40,1)="Y" THEN SELL_QTY_PER=_CUR.SELL_QTY_PER
16420 IF _CHG_VAR$(41,1)="Y" THEN INVENTORY_QTY_PER=_CUR.INVENTORY_QTY_PER
16430 IF _CHG_VAR$(42,1)="Y" THEN CTN_WT=_CUR.CTN_WT
16440 IF _CHG_VAR$(43,1)="Y" THEN LAST_PURCH_COST=_CUR.LAST_PURCH_COST
16450 IF _CHG_VAR$(44,1)="Y" THEN AVG_COST=_CUR.AVG_COST
16460 IF _CHG_VAR$(45,1)="Y" THEN CTN_PACK=_CUR.CTN_PACK
16470 IF _CHG_VAR$(46,1)="Y" THEN SPER_UNIT_COST=_CUR.SPER_UNIT_COST
16480 IF _CHG_VAR$(47,1)="Y" THEN QTY_BREAK_7=_CUR.QTY_BREAK_7
16490 IF _CHG_VAR$(48,1)="Y" THEN QTY_PRICE_7=_CUR.QTY_PRICE_7
16500 IF _CHG_VAR$(49,1)="Y" THEN QTY_BREAK_8=_CUR.QTY_BREAK_8
16510 IF _CHG_VAR$(50,1)="Y" THEN QTY_PRICE_8=_CUR.QTY_PRICE_8
16520 IF _CHG_VAR$(51,1)="Y" THEN QTY_BREAK_9=_CUR.QTY_BREAK_9
16530 IF _CHG_VAR$(52,1)="Y" THEN QTY_PRICE_9=_CUR.QTY_PRICE_9
16540 IF _CHG_VAR$(53,1)="Y" THEN QTY_BREAK_10=_CUR.QTY_BREAK_10
16550 IF _CHG_VAR$(54,1)="Y" THEN QTY_PRICE_10=_CUR.QTY_PRICE_10
16560 IF _CHG_VAR$(55,1)="Y" THEN QTY_BREAK_11=_CUR.QTY_BREAK_11
16570 IF _CHG_VAR$(56,1)="Y" THEN QTY_PRICE_11=_CUR.QTY_PRICE_11
16580 IF _CHG_VAR$(57,1)="Y" THEN QTY_BREAK_12=_CUR.QTY_BREAK_12
16590 IF _CHG_VAR$(58,1)="Y" THEN QTY_PRICE_12=_CUR.QTY_PRICE_12
16600 IF _CHG_VAR$(59,1)="Y" THEN IC0_UNUSED_2=_CUR.IC0_UNUSED_2
16610 IF _CHG_VAR$(60,1)="Y" THEN IC0_UNUSED_3=_CUR.IC0_UNUSED_3
16620 IF _CHG_VAR$(61,1)="Y" THEN IC0_UNUSED_4=_CUR.IC0_UNUSED_4
16630 IF _CHG_VAR$(62,1)="Y" THEN IC0_UNUSED_5=_CUR.IC0_UNUSED_5
16640 IF _CHG_VAR$(63,1)="Y" THEN IC0_UNUSED_6=_CUR.IC0_UNUSED_6
16650 IF _CHG_VAR$(64,1)="Y" THEN IC0_UNUSED_7=_CUR.IC0_UNUSED_7
16660 IF _CHG_VAR$(65,1)="Y" THEN IC0_UNUSED_8=_CUR.IC0_UNUSED_8
16670 IF _CHG_VAR$(66,1)="Y" THEN IC0_UNUSED_9=_CUR.IC0_UNUSED_9
16990 RETURN 
16999 ! 
17000 SELECT_PLYS:
17001 ! 
17010 PROCESS "FMGIAS.0","../FMG/FM.EN",CUSTOMER$,ITEM_CODE$
17020 RETURN 
17100 SELECT_PLYS_INIT:
17101 ! 
17110 _FMU=HFN; OPEN (_FMU,IOL=*,ERR=OPEN_ERR)"FMU"+%C$
17115 CREATE_LB: LINES=0,FMU_K$="",RE$="",NODEL=0,LB_LINES=0
17120 CUSTOMER$=ARG_1$,ITEM_CODE$=ARG_2$; IF STP(CUSTOMER$)="" THEN CUSTOMER$="          "
17130 READ (_FMU,KEY=CUSTOMER$+ITEM_CODE$+"000",DOM=*NEXT)
17140 _FMUKEY$=KEY(_FMU,END=END_FMU); READ (_FMU,KEY=_FMUKEY$,REC=FMU$)
17150 IF MID(_FMUKEY$,1,20)<>CUSTOMER$+ITEM_CODE$ THEN GOTO END_FMU
17155 LINES=LINES+1
17160 LIST_BOX LOAD LB_LINE.CTL,LINES,FMU.LINE_NUM$+SEP+FMU.COLOR$+SEP+FMU.WT$+SEP+FMU.PAPER_GRADE$+SEP+FMU.LEFT_RIGHT$+SEP+FMU.TOP_BOTTOM$+SEP+FMU.INK_COLOR_1$+SEP+FMU.INK_COLOR_2$+SEP+FMU.INK_COLOR_3$+SEP+FMU.MARGINAL_WORDS$
17170 FMU_K$=FMU_K$+FMU.CUST_DIV$+FMU.CUST_CODE$+FMU.ITEM_CODE$+FMU.LINE_NUM$
17175 LB_LINES=LB_LINES+1
17180 GOTO 17140
17200 END_FMU:IF LB_LINES>=NUM(%PLYS$) THEN BUTTON DISABLE BT_EXIT1.CTL
17205 REFRESH_FLG=1; RETURN 
17210 SELECT_FMU_REC:
17211 ! 
17220 LIST_BOX READ LB_LINE.CTL,IDX
17230 RESUL$=FMU_K$(IDX*23-22,23),RE$=RESUL$
17240 PROCESS "FMGIAS","../FMG/FM.EN",MID(RESUL$,1,10),MID(RESUL$,11,10),MID(RESUL$,21,3)
17250 READ (_FMU,KEY=RE$,ERR=NO_REC,REC=FMU$)
17255 IF NODEL=0 THEN LIST_BOX LOAD LB_LINE.CTL,IDX,* ELSE NODEL=0
17260 LIST_BOX LOAD LB_LINE.CTL,IDX,FMU.LINE_NUM$+SEP+FMU.COLOR$+SEP+FMU.WT$+SEP+FMU.PAPER_GRADE$+SEP+FMU.LEFT_RIGHT$+SEP+FMU.TOP_BOTTOM$+SEP+FMU.INK_COLOR_1$+SEP+FMU.INK_COLOR_2$+SEP+FMU.INK_COLOR_3$+SEP+FMU.MARGINAL_WORDS$
17265 XXX=INT(LEN(FMU_K$)/23); IF XXX>=NUM(%PLYS$) THEN BUTTON DISABLE BT_EXIT1.CTL; NEXT_ID=BT_EXIT.CTL ELSE BUTTON ENABLE BT_EXIT1.CTL
17270 RETURN 
17280 NO_REC:
17300 LIST_BOX LOAD LB_LINE.CTL,IDX,*
17310 XX=POS(RE$=FMU_K$),FMU_K$=MID(FMU_K$,1,XX-1)+MID(FMU_K$,XX+23)
17315 XXX=INT(LEN(FMU_K$)/23); IF XXX>=NUM(%PLYS$) THEN BUTTON DISABLE BT_EXIT1.CTL; NEXT_ID=BT_EXIT.CTL ELSE BUTTON ENABLE BT_EXIT1.CTL
17320 REFRESH_FLG=1; RETURN 
17500 ADD_LINE:
17501 ! 
17502 LINES=LEN(FMU_K$)/23
17503 IF FMU_K$="" THEN LINES=LINES+1,LINES$="001"; GOTO 17520
17505 RESUL$=FMU_K$(LINES*23-22,23),RE$=RESUL$
17510 LINES=LINES+1,LINES$=STR(NUM(RE$(21,3))+1:"000")
17520 PROCESS "FMGIAS","../FMG/FM.EN",CUSTOMER$,ITEM_CODE$,LINES$
17530 CUSTOMER$=CUSTOMER$(1,10),RE$=CUSTOMER$+ITEM_CODE$+LINES$,FMU_K$=FMU_K$+RE$,IDX=LINES,NODEL=1,IDX=0
17535 RESUL$=MID(FMU_K$,LINES*23-22,23),RE$=RESUL$
17540 READ (_FMU,KEY=RE$,ERR=NO_RECORD,REC=FMU$)
17550 GOTO 17255
17560 NO_RECORD:
17570 FMU_K$=MID(FMU_K$,1,LEN(FMU_K$)-23),LINES=LINES-1
17575 XXX=INT(LEN(FMU_K$)/23)+1; IF XXX>=NUM(%PLYS$) THEN BUTTON DISABLE BT_EXIT1.CTL; NEXT_ID=BT_EXIT.CTL ELSE BUTTON ENABLE BT_EXIT1.CTL
17580 RETURN 
17600 CLOSE_FILES:
17610 IF _FMU THEN CLOSE (_FMU)
17699 RETURN 
18000 SEL_UM:IF NUM(INVENTORY_QTY_PER$)=0 THEN INVENTORY_QTY_PER$="" ! SSP208534
18001 _ZZP=FFN("ZZPARM"); IF _ZZP<=0 THEN _ZZP=HFN,_FILENAME$="ZZPARM"; OPEN (_ZZPARM,ERR=OPEN_ERR)"ZZPARM"
18010 INVENTORY_UM$=PAD(INVENTORY_UM$,4," ")
18015 ! ESCAPE ; IF INVENTORY_QTY_PER$<>INVENTORY_QTY_PER.CTL'VALUE$ THEN INVENTORY_QTY_PER$=INVENTORY_QTY_PER.CTL'VALUE$
18020 FIND (_ZZP,KEY="U/M"+INVENTORY_UM$,DOM=NO_UM)UM$,P0,P1
18030 UM_DESC$=UM$(8,12),REFRESH_FLG=1
18032 IF MID(UM$,20,1)="Y" THEN DISABLE CONTROL INVENTORY_QTY_PER.CTL ELSE ENABLE CONTROL INVENTORY_QTY_PER.CTL ! SSP 192253
18035 IF ID$<>"INVENTORY_UM" THEN GOTO *RETURN
18036 IF P0<>0 THEN INVENTORY_QTY_PER=P0,INVENTORY_QTY_PER$=STR(P0),NEXT_ID=X.CTL,INVENTORY_QTY_PER.CTL'LOCK=1 ELSE IF STP(INVENTORY_QTY_PER$)="" THEN INVENTORY_QTY_PER=P1,INVENTORY_QTY_PER$=STR(P1),INVENTORY_QTY_PER.CTL'LOCK=0 ELSE INVENTORY_QTY_PER.CTL'LOCK=0 ! SSP208534
18037 IF O1<>INVENTORY_PER THEN GOSUB CHANGE_COST
18040 RETURN 
18050 NO_UM:
18055 MSGBOX MSG("ENTER_UM"),MSG("WARNING"),"!,TIM=5"
18060 INVENTORY_UM$="",NEXT_ID=INVENTORY_UM.CTL,REFRESH_FLG=1
18070 RETURN 
18100 SEL_PROD_CODE:
18105 _FMP=FN%FFN("FMP"+%C$); IF _FMP<=0 THEN _FMP=HFN; OPEN (_FMP)"FMP"+%C$ ! [205471]-changed FFN() to FN%FFN()
18110 IF NUM(PROD_CODE$,ERR=*NEXT)>=0 THEN PROD_CODE$=PAD(PROD_CODE$,3,0,"0"),REFRESH_FLG=1
18112 PROD_CODE$=PAD(PROD_CODE$,3),REFRESH_FLG=1
18113 SPEC_FLG=0 ! 261680
18120 FIND (_FMP,KEY="T"+PROD_CODE$,DOM=NO_PC)FMP$
18130 PROD_CODE_DESC$=STP(FMP$(5,15))
18135 IF NOT(NUL(FMP$(33,3))) AND STP(FMP$(21,1))<>"Y" THEN SPEC_FLG=2 ELSE IF NOT(NUL(FMP$(33,3))) THEN SPEC_FLG=1 ! 261680
18140 RETURN 
18150 NO_PC:
18160 PROD_CODE$="",NEXT_ID=PROD_CODE.CTL
18165 MSGBOX MSG("ENTER_PC"),MSG("WARNING"),"!,TIM=5"
18170 RETURN 
19000 PROCESS_AR1: REFRESH_FLG=1
19001 IF CUSTOMER$="" THEN CUSTOMER$="          "
19002 IF STP(CUSTOMER$)<>"" THEN CUSTOMER$=PAD(CUSTOMER$,10,"0")
19003 %CUSTOMER$=CUSTOMER$
19004 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$
19005 IF _AR1=0 THEN _AR1=HFN; OPEN (_AR1,ERR=OPEN_ERR)"AR1"+%C$
19008 IF STP(CUSTOMER$)="" THEN GOTO *RETURN
19010 FIND (_AR1,KEY=CUSTOMER$,DOM=NO_AR1)AR1$
19020 CUST_NAME$=MID(AR1$,11,30),%CUST_NAME$=CUST_NAME$
19030 RETURN 
19060 NO_AR1:
19065 CUST_NAME$="",%CUST_NAME$="",REFRESH_FLG=1; NEXT_ID=CUSTOMER.CTL
19070 RETURN 
19080 PROCESS_AR1_2: REFRESH_FLG=1
19090 IF CUSTOMER2$="" THEN CUSTOMER2$="          "
19100 IF STP(CUSTOMER2$)<>"" THEN CUSTOMER2$=PAD(CUSTOMER2$,10,"0")
19110 %CUSTOMER2$=CUSTOMER2$
19120 CALL "ZZWLKU;PARSE_CUST",CUSTOMER2$,CUST_DIV_2$,CUST_CODE_2$
19130 IF _AR1=0 THEN _AR1=HFN; OPEN (_AR1,ERR=OPEN_ERR)"AR1"+%C$
19140 IF STP(CUSTOMER2$)="" THEN GOTO *RETURN
19150 FIND (_AR1,KEY=CUSTOMER2$,DOM=NO_AR1_2)AR1$
19160 CUST_NAME1$=MID(AR1$,11,30),%CUST_NAME1$=CUST_NAME1$
19170 RETURN 
19180 NO_AR1_2:
19190 CUST_NAME1$="",%CUST_NAME1$=""
19200 RETURN 
30000 CHECK_ITEM_STOCK:
30001 IF %FMGIAZ THEN B_KEY$=_KEY$
30010 _KEY$=DIM(10)+%ITEM_CODE$
30020 READ (_FIL_NO,KEY=_KEY$,ERR=NO_STOCK)
30030 MSGBOX MSG("ICGMAZ_ST1")+SEP+SEP+MSG("ICGMAZ_ST2"),MSG("CONFIRM"),"?,YESNO",OPT$; IF OPT$="NO" THEN GOTO NEW_RECORD1
30040 %_KEY2$=_KEY$,_ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
30050 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=ITEM_DESC.CTL; CALL "*WINGRP;DISABLE",KEYS.GRP$
30060 RETURN 
30070 NO_STOCK:
30080 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
30090 IF _YESNO$="NO" THEN CMD_STR$="END"; EXIT 
30095 IF %FMGIAZ THEN GOTO CREATE_FROM_FM1
30100 CUSTOMER$=DIM(10),ITEM_CODE$=%ITEM_CODE$; GOTO 1260
31000 NEW_RECORD1:! 31000,10
31010 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
31020 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
31030 IF _YESNO$="NO" THEN CMD_STR$="E"; EXIT 
31032 IF %FMGIAZ THEN GOTO CREATE_FROM_FM1
31035 GOSUB CLEAR_FIELDS; CUSTOMER$=ARG_1$(1,10),%CUSTOMER$=CUSTOMER$,ITEM_CODE$=ARG_1$(11),%ITEM_CODE$=ITEM_CODE$
31040 _ENABLE_FLG=1
31050 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
31060 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=ITEM_DESC.CTL
31070 LOT_INV_FOR_THIS_ITM$=IC$(69,1); CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$ ! Changed by dff from 68 to 69 ref: 189799
31075 CALL "*WINGRP;DISABLE",KEYS.GRP$
31080 RETURN 
40000 ! 40000,10
40010 SEL_GRID:
40020 ! 
40025 IF NEW_REC THEN GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 AND SEL_GRID=0 THEN EXIT 
40030 REFRESH_FLG=1
40040 GRID SELECT READ X,COL,ROW
40050 GRID FIND X,COL,ROW,VAL$
40060 IF STP(VAL$)="" THEN RETURN 
40070 IF AROW+ACOL<>0 THEN X'COLUMN=ACOL,X'ROW=AROW,X'TEXTCOLOR$="Black",X'BACKCOLOR$="Gray",X'BITMAP$=""
40080 X'COLUMN=COL,X'ROW=ROW,X'TEXTCOLOR$="Light Blue",X'BITMAP$="!Arrow_right" ! ,X'BACKCOLOR$="Black"
40090 AROW=ROW,ACOL=COL
40100 OPT=INT(POS(STP(VAL$)=ALL_MESS$)/40)+1; %GRID=0; GOSUB PROCESS_OPT; GRID GOTO X,COL,ROW; %GRID=1; RETURN 
40110 CREATE_GRID:
40120 GOSUB CREATE_OPT
40130 X=X.CTL,BOPT$=OPT$,ROW=1,COLUMN=0; GRID DELETE X,-1,-1
40140 HIDE CONTROL X
40150 HI=OPT_LN/3; IF FPT(HI)<>0 THEN HI=INT(HI)+1
40160 ! GRID REMOVE X; GRID X,@(2,9.6,75,HI)
40170 XX=POS(SEP=OPT$); IF XX=0 THEN GOTO END_LOAD
40180 COLUMN=COLUMN+1; IF COLUMN>3 THEN COLUMN=1,ROW=ROW+1; GRID ADD X,0,ROW; GRID LOCK X,0,ROW
40190 TX$=OPT$(1,XX-1),OPT$=OPT$(XX+1),X'ROW=ROW,X'COLUMN=COLUMN,X'COLUMNWIDTH=25,X'VALUE$=TX$,X'BACKCOLOR$="Gray",X'CELLTYPE$="Button",X'ALIGN$="Left",X'LOCK=1,X'ROWHEIGHT=1.60,X'BITMAP$=""
40200 ! GRID LOAD X,ROW,COLUMN,TX$
40210 GOTO 40170
40220 END_LOAD: HIG=HI*X'HEIGHT/5,X'HEIGHT=HIG; SHOW CONTROL X; RETURN 
40230 CREATE_OPT:
40240 SE$="123456789ABCDEFZ" ! SSP#211771 SSP 191604
40250 FOR A=1 TO 16 ! SSP#211771  SSP#191604
40260 IF A<=9 THEN MESS$=MSG("ICGMAZ_"+STR(A:"00")) ELSE MESS$=MSG("ICGMAZ_"+SE$(A,1))
40270 ALL_MESS$=ALL_MESS$+PAD(MESS$,40," ")
40280 IF MID(P4$,188,1)<>"Y" AND A>=12 AND A<=14 THEN GOTO NXT_OPT ! MESS$=PAD("",40," ")
40290 IF MID(IC$,51,1)<>"Y" AND A=10 THEN GOTO NXT_OPT ! MESS$=PAD("",40," ")
40300 OPT$=OPT$+MESS$+SEP,OPT_LN=OPT_LN+1
40310 NXT_OPT:
40320 NEXT A
40330 RETURN 
40340 PROCESS_OPT:
40345 GOSUB WRT
40350 CHANGE_FLG=0,%CUSTOMER$=CUSTOMER$,%ITEM_CODE$=ITEM_CODE$,%ITEM_DESC$=ITEM_DESC$
40360 SWITCH OPT
40370 CASE 1
40380 ! 
40390 ! Item Pricing Constant Setup
40400 ! 
40410 WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
40415 SUBNAME$="ICGMAZ.1"; GOSUB START_LOG
40420 ARG$=CUST_DIV$+CUST_CODE$+ITEM_CODE$; PROCESS "ICGMAZ.1","../ICG/IC.EN",ARG$
40430 READ (_FIL_NO,KEY=_KEY$); _ENABLE_FLG=-1,NO_ZZO=1; GOSUB PROCESS_READ; GOSUB NUM_TO_STR; NO_ZZO=0; GOSUB DISP_REC
40432 IF STP(VEND_DIV$+VEND_CODE$)="" THEN _W_FLG=0,CHANGE_FLG=1; MSGBOX MSG("SETUP_SUPP"),MSG("WARNING"),"!,TIM=5"; GOTO 40420
40435 READ (_FIL_NO,KEY=_KEY$); _ENABLE_FLG=-1,NO_ZZO=1; GOSUB PROCESS_READ; GOSUB NUM_TO_STR; NO_ZZO=0; GOSUB DISP_REC
40440 BREAK
40450 CASE 2
40460 ! 
40470 ! Supplier Purchasing Setup
40480 ! 
40485 SUBNAME$="ICGMAZ.2"; GOSUB START_LOG
40490 BCUST_DIV$=CUST_DIV$,BCUST_CODE$=CUST_CODE$,BITEM_CODE$=ITEM_CODE$,AA$=VEND_DIV$,BB$=VEND_CODE$; CALL "ICGMAZ.2",CUST_DIV$,CUST_CODE$,ITEM_CODE$,VEND_DIV$,VEND_CODE$; CUST_DIV$=BCUST_DIV$,CUST_CODE$=BCUST_CODE$,ITEM_CODE$=BITEM_CODE$
40500 BREAK
40510 CASE 3
40520 ! 
40530 ! Supplier Cost Comparison
40540 ! 
40545 SUBNAME$="ICGMAZ.3"; GOSUB START_LOG
40550 CD$=CUST_DIV$,CC$=CUST_CODE$,IT$=ITEM_CODE$; VD$=VEND_DIV$,VC$=VEND_CODE$; CALL "ICGMAZ.3",CD$,CC$,IT$,VD$,VC$
40560 BREAK
40570 CASE 4
40580 ! 
40590 ! Inventory Availability
40600 ! 
40605 SUBNAME$="ICGMAZ.4"; GOSUB START_LOG
40610 HH$=STR(STP(INVENTORY_UM$))+"/"+STP(STR(NUM(INVENTORY_QTY_PER$):"##,###")); CALL "ICGMAZ.4",CUST_DIV$,CUST_CODE$,ITEM_CODE$,HH$
40620 BREAK
40630 CASE 5
40640 ! 
40650 ! Inventory Across Location Inquire
40660 ! 
40665 SUBNAME$="ICGMAF"; GOSUB START_LOG
40670 CALL "ICGMAF",CUST_DIV$+CUST_CODE$,ITEM_CODE$
40680 BREAK
40690 CASE 6
40700 ! 
40710 ! Detail Transaction Inquiry
40720 ! 
40725 SUBNAME$="ICGMAT"; GOSUB START_LOG
40730 CALL "ICGMAT",CUST_DIV$+CUST_CODE$,ITEM_CODE$
40740 BREAK
40750 CASE 7
40760 ! 
40770 ! Statistical Data Inquiry
40780 ! 
40785 SUBNAME$="ICGMDA"; GOSUB START_LOG
40790 CALL "ICGMDA",CUST_DIV$+CUST_CODE$,ITEM_CODE$
40800 BREAK
40810 CASE 8
40820 ! 
40830 ! Open Sales Order Inquiry
40840 ! 
40845 SUBNAME$="ICGMAJ"; GOSUB START_LOG
40850 CALL "ICGMAJ",CUST_DIV$+CUST_CODE$,ITEM_CODE$
40860 BREAK
40870 CASE 9
40880 ! 
40890 ! Open Purchase order Inquiry
40900 ! 
40905 SUBNAME$="ICGMAZ.9"; GOSUB START_LOG
40910 CALL "ICGMAZ.9",CUST_DIV$+CUST_CODE$,ITEM_CODE$
40920 BREAK
40930 CASE 10
40940 ! 
40950 ! Quantity Break Pricing Setup
40960 ! 
40965 SUBNAME$="ICGMHA"; GOSUB START_LOG
40967 WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
40970 CALL "ICGMHA",CUST_DIV$+CUST_CODE$,ITEM_CODE$
40972 READ (_FIL_NO,KEY=_KEY$); _ENABLE_FLG=-1,NO_ZZO=1; GOSUB PROCESS_READ; NO_ZZO=0; GOSUB DISP_REC
40980 BREAK
40990 CASE 11
41000 ! 
41010 ! Order History Display
41020 ! 
41025 SUBNAME$="ICGMAK"; GOSUB START_LOG
41030 CALL "ICGMAK",CUST_DIV$+CUST_CODE$,ITEM_CODE$
41040 BREAK
41050 CASE 12
41060 ! 
41070 ! Item Spec - Ply Section
41080 ! 
41085 SUBNAME$="FMGIAS"; GOSUB START_LOG
41090 PROCESS "FMGIAS.0","../FMG/FM.EN",CUSTOMER$,ITEM_CODE$
41100 BREAK
41110 CASE 13
41120 ! 
41130 ! Item Spec - Composition
41140 ! 
41145 SUBNAME$="FMGIAU"; GOSUB START_LOG
41150 %CUSTOMER$=CUST_DIV$+CUST_CODE$,%ITEM_CODE$=ITEM_CODE$; IF SPEC_FLG=1 THEN CALL "FMGIAR"; GOTO *NEXT ELSE IF SPEC_FLG=2 THEN CALL "FMGIAU"; CALL "FMGIAR" ELSE CALL "FMGIAU" ! 261680
41160 BREAK
41170 CASE 14
41180 ! 
41190 ! Item Spec - Comments
41200 ! 
41205 SUBNAME$="FMGIAW"; GOSUB START_LOG
41210 CALL "FMGIAW",CUST_DIV$+CUST_CODE$,ITEM_CODE$
41212 BREAK
41215 CASE 16 ! SSP#211771   SSP 191604
41216 ! Delete/Reactivate
41217 GOSUB DELETE_REC ! SSP 191604
41218 BREAK
41220 CASE 15 ! SSP191604  Special Pricing
41225 CALL "SPGSP0",X3$,X4$,"",CUSTOMER$,ITEM_CODE$,"I" ! SSP 191604
41226 BREAK
41230 END SWITCH ; GOSUB END_LOG
41232 IF NEW_REC THEN GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 AND SEL_GRID=0 THEN CHANGE_FLG=1
41235 RETURN 
41240 QUERY:
41250 IF ID$="BT_ITEM" THEN QRY$="QRY_IC0.1" ELSE QRY$="QRY_IC2.1"
41260 VAL$=""
41270 PROCESS QRY$,"../ICG/IC.EN",VAL$; IF VAL$="" THEN RETURN 
41280 CUST_DIV$=VAL$(1,%AR_DIV_LEN),CUST_CODE$=VAL$(1+%AR_DIV_LEN,10),CUSTOMER$=VAL$(1,10),ITEM_CODE$=VAL$(11),REFRESH_FLG=1,_KEY$=CUSTOMER$+ITEM_CODE$
41290 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT)
41300 GOTO NXT_READ
42000 CHECK_ZZO:
42030 READ (_ZZO,KEY="003"+%CUSTOMER$+%ITEM_CODE$,DOM=*NEXT)
42035 KKK$=KEY(_ZZO,END=END_CHECK_ZZO)
42040 IF KKK$(1,23)<>"003"+%CUSTOMER$+%ITEM_CODE$ THEN GOTO END_CHECK_ZZO
42050 IF STP(%CUSTOMER$,2)="" THEN PROCESS "GGNOTE.51","../ZZG/ZZ.EN" ELSE PROCESS "GGNOTE.5","../ZZG/ZZ.EN" ! SSP 234111
42060 END_CHECK_ZZO:RETURN 
50000 TAB_GRID:
50010 GRID SELECT READ X,COL,ROW
50020 IF AROW+ACOL<>0 THEN X'COLUMN=ACOL,X'ROW=AROW,X'TEXTCOLOR$="Black",X'BACKCOLOR$="Gray",X'BITMAP$=""
50025 COL+=1; IF COL>3 THEN COL=1,ROW+=1
50027 IF ROW>HI THEN %GRID=0,ROW=HI,NEXT_ID=BT_WRITE.CTL; GOTO *RETURN
50030 X'COLUMN=COL,X'ROW=ROW,X'TEXTCOLOR$="Light Blue",X'BITMAP$="!Arrow_Right" ! ,X'BACKCOLOR$="BLACK"
50040 AROW=ROW,ACOL=COL
50050 NEXT_ID=X.CTL; GRID GOTO X,COL,ROW
50060 RETURN 
50500 START_LOG:
50510 B_DATE$=BIN(NUM(DTE(0:"%Yl%Mz%Dz")),4),B_TIME$=BIN(NUM(DTE(0:"%Hz%mz")),2)
50520 IF %_LOG_HISTORY THEN WRITE (_LOG,KEY="x"+WHO+B_DATE$+B_TIME$+SUBNAME$,ERR=*NEXT)WHO,B_DATE$,B_TIME$,SUBNAME$,APP$,%X3_COMP$,"Run"
50530 RETURN 
50550 END_LOG:
50560 IF %_LOG_HISTORY THEN WRITE (_LOG,KEY="x"+WHO+B_DATE$+B_TIME$+SUBNAME$,ERR=*NEXT)WHO,B_DATE$,B_TIME$,SUBNAME$,APP$,%X3_COMP$,"Finish",DTE(0:"%Hz%mz")
50570 RETURN 
50600 CHANGE_COST:
50610 IF O1=0 OR INVENTORY_QTY_PER=0 OR O1=INVENTORY_QTY_PER THEN RETURN 
50620 LAST_PURCH_COST=LAST_PURCH_COST*INVENTORY_QTY_PER/O1,LAST_PURCH_COST$=STR(LAST_PURCH_COST$)
50630 AVG_COST=AVG_COST*INVENTORY_QTY_PER/O1,AVG_COST$=STR(AVG_COST$)
50640 READ (_IC1,KEY=CUSTOMER$+ITEM_CODE$,DOM=*NEXT)
50650 NXT_IC1: IC1_K$=KEY(_IC1,END=END_IC1); READ (_IC1)
50660 IF IC1_K$(1,20)<>CUSTOMER$+ITEM_CODE$ THEN GOTO END_IC1
50670 EXTRACT (_IC1,KEY=IC1_K$,REC=IC1$)
50680 _IC1.LAST_COST=_IC1.LAST_COST*INVENTORY_QTY_PER/O1
50690 _IC1.AVG_COST=_IC1.AVG_COST*INVENTORY_QTY_PER/O1
50700 WRITE (_IC1,KEY=IC1_K$)
50710 GOTO NXT_IC1
50720 END_IC1:
50730 O1=INVENTORY_QTY_PER; GOSUB NUM_TO_STR
50740 WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
50750 RETURN 
51000 CREATE_FROM_FM1:DIM A$(187),A(40),F(40)
51010 _KEY$=B_KEY$
51020 READ (_FM1,KEY=_KEY$,ERR=END_FROM)F$,F{ALL}
51040 ! 51040,10
51050 A$(1,20)=_KEY$,A$(21,43)=F$(42,40)+F$(21,3),A$(64,18)=F$(24,18),A$(82,14)=F$(82,14),A$(120,8)=F$(100,4)+F$(100,4),A[0]=F[3],A[14]=F[4],A[15]=F[4],A[19]=F[0],A[16]=F[18]
51055 A$(119,1)=F$(387,1) ! SSP#201823,ssp#211771
51060 IF IC$(69,1)="Y" THEN A$(112,1)="Y"; REM "108802, Lotted Inventory
51070 DIM E$(64),E[16]
51080 E$(1,20)=A$(1,20),E$(21,14)=A$(82,14),E$(55,4)=F$(96,4),E[0]=F[1],E[14]=F[2],E[15]=A[16],E[16]=A[19]
51090 WRITE (_IC2,KEY=E$(1,34))E$,E{ALL}
51095 WRITE (_IC0,KEY=A$(1,20))A$,A{ALL}
51100 GOTO 0550
51120 END_FROM:EXIT 
52000 CHNBT:
52001 EXIT ! SSP 225534
52010 ENTER BT1,BT2,BT3,ERR=*NEXT
52020 IF POS("0501"=SSN)<>0 THEN EXIT 
52025 IF %NOMAD_VISUAL_OVERRIDE<>4 THEN EXIT 
52030 FOR AA=1 TO 10
52040 XX=EVN("BT"+STR(AA)); IF XX=0 THEN EXITTO END_CHNBT
52050 XX'HEIGHT=XX'HEIGHT-4,XX'LINE=XX'LINE+.10
52060 NEXT 
52070 END_CHNBT:
52080 EXIT 
56000 ! "192253-Program ICGMAZ Inventory Control Item Setup/Inquiry. You are
56001 ! "       allowed to change the qty per u/m on fixed unit of measure"
56004 REM "205471-Oracle - FFN usage in tf2g progs. to be replaced by FN%FFN  
56006 ! 208534, issue with EACH U/M, sell qty per showing as 0
56007 REM "211771-Corrections to ICGMAZ                                       
56008 REM "191604-Add special pricing modifications to gui                    
56010 ! "225534-Modify *winproc.dsp to adjust Right Query in 4d option      
56011 REM "234111-Modify Custom Item Notes feature to allow for a blank cust  
56012 REM "047384-Show where the activity is when a delete is not allowed.    
56013 REM "240443-When I delete an inventory item and it set to inactive for  
56014 REM "261680-Specs are not displaying correctly between gui and chui     
56015 REM "263584-Grid size issues Upgrade from Pvx 7.1 to PxPlus 2017        
56016 REM "306828-They are having an issue where they select an item code and 
