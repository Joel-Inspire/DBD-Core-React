0010 ! Supplier Purchasing Setup <ICGMAZ.2>
0020 ! Copyright 2003 TopForm Software, Inc.; Norcross, Georgia
0030 ! Licensed Software - All Rights Reserved.
0031 ! By: JIR, 
0035 REM "5.7 - 12/19/23 - 15.646018 - jvv - SSP# 307467
0037 REM "307467-DBD-429  Error 14 when setting up Inventory via Order Entry 
0040 REM "Copyright 2023 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0060 SETERR 0036; ENTER ARG_1$,ARG_2$,ARG_3$,ARG_4$,ARG_5$
0062 BARG1$=ARG_1$,BARG2$=ARG_2$,BARG3$=ARG_3$,BARG4$=ARG_4$,BARG5$=ARG_5$
0064 SETERR 0000
0068 PROCESS "ICGMAZ.2","../ICG/IC.EN",ARG_1$,ARG_2$,ARG_3$,ARG_4$,ARG_5$
0070 ARG_1$=BARG1$
0072 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="IC2"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0172 AP4=HFN; OPEN (AP4)"AP4"+%C$
0173 IC0=HFN; OPEN (IC0)"IC0"+%C$ ! SSP281849
0174 FM0_OPENED=0; FM0=FN%FFN("FM0"+%C$); IF FM0<=0 THEN FM0=HFN; OPEN (FM0)"FM0"+%C$; FM0_OPENED=1 ! [205471]-changed FFN() to FN%FFN() SSP307467  
0175 ZZP=FFN("ZZPARM"); IF ZZP<=0 THEN ZZP=HFN,_FILENAME$="ZZPARM"; OPEN (ZZP,ERR=OPEN_ERR)"ZZPARM"
0176 FIND (ZZP,KEY=FID(0)+"      ")X3$,*,X4$; DIM SEC$(256); FIND (ZZP,KEY="osec"+X3$(40,3),DOM=*NEXT)SEC$ ! WO273055
0178 FIND (ZZP,KEY=X3$(9,3)+"I/C")ICPARM$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0185 CUST_DIV$=ARG_1$,CUST_CODE$=ARG_2$,ITEM_CODE$=ARG_3$,VEND_DIV$=ARG_4$,VEND_CODE$=ARG_5$,VENDOR$=ARG_4$+ARG_5$,REFRESH_FLG=1,ARG_1$="",%IC2$=CUST_DIV$+CUST_CODE$+ITEM_CODE$,CUSTOMER$=CUST_DIV$+CUST_CODE$
0188 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$
0189 CALL "ZZWLKU;PARSE_vend",VENDOR$,VEND_DIV$,VEND_CODE$
0190 BB_PURCH_UM$=PURCH_UM$,BB_PURCH_QTY_PER$=PURCH_QTY_PER$; GOSUB 17130; NEXT_ID=-1 ! SSP222081 jdf
0191 FOR AA=1 TO 12 ! SSP222081 jdf
0192 VAL$=EVS("QTY_BREAK_"+STR(AA)+"$"); IF NUM(VAL$)=0 THEN BREAK ! SSP222081 jdf
0193 IF SUM$(20,1)<>"Y" THEN VAL$=STR(NUM(VAL$)/NUM(PURCH_QTY_PER$),ERR=*NEXT) ELSE IF P1<>0 THEN VAL$=STR(NUM(VAL$)/P1) ! SSP222081 jdf
0194 EXECUTE "QTY_BREAK_"+STR(AA)+"$=VAL$" ! SSP222081 jdf
0195 NEXT AA; GOSUB CREATE_BREAK ! SSP222081 jdf
0199 RETURN ! SSP222081 jdf
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=6
0430 DIM _KEYS$[1:6]; _KEYS$[1]="CUST_DIV$",_KEYS$[2]="CUST_CODE$",_KEYS$[3]="ITEM_CODE$",_KEYS$[4]="VEND_DIV$",_KEYS$[5]="VEND_CODE$",_KEYS$[6]="PLANT_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 PERFORM "ICGMAZ.1;SEL_CUSTOMER"
0536 NEXT_ID=PLANT_CODE.CTL
0537 IF MID(ICPARM$,51,1)<>"Y" THEN FLDR'DROPTAB(2) ! Drop tab 2 if extra price breaks not enabled
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0700 INIT_FOLDER:! SSP#283046
0710 IF FOLDER_ID$="ICGMAZ.2.2" THEN NEXT_ID=_FIRST_TAB ! SSP#283046
0740 EXIT ! SSP#283046
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ! ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0942 IF AP4<>0 THEN CLOSE (AP4); AP4=0
0943 IF IC0<>0 THEN CLOSE (IC0); IC0=0 ! SSP281849
0944 IF FM0_OPENED THEN CLOSE (FM0,ERR=*NEXT); FM0=0 ! SSP307467 
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1012 ! IF ID$="PLANT_CODE" THEN PLANT_CODE$=PAD(PLANT_CODE$,4,0,"0")
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS ! If multiple key segments, enable the _KCNT segment
1041 READ_QRY:
1042 CALL "ZZWLKU;PARSE_VEND",VENDOR$,VEND_DIV$,VEND_CODE$; _KEY$=CUST_DIV$+CUST_CODE$+ITEM_CODE$+VEND_DIV$+VEND_CODE$+PLANT_CODE$ ! SSP#291195
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1082 ! GOSUB NUM_TO_STR
1085 ! OSUB CREATE_BREAK
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=SUPP_ITEM_CODE.CTL
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1265 GOSUB IC0_DEFAULTS ! SSP281849
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1280 NEXT_ID=SUPP_ITEM_CODE.CTL
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1415 CALL "ZZWLKU;PARSE_VEND",VENDOR$,VEND_DIV$,VEND_CODE$
1418 GOSUB FINISH_BREAK ! SSP222081 jdf
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1450 GOSUB CLEAR_FIELDS ! SSP222081 jdf
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=VENDOR.CTL ! SSP#283046
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
1890 CALL "ZZWLKU;PARSE_VEND",VENDOR$,VEND_DIV$,VEND_CODE$
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2042 IF _KEY$(1,20)<>%IC2$ THEN READ (_FIL_NO); GOTO 2040
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); IF MID(_KEY$,1,20)<>%IC2$ THEN GOTO 2230 ELSE GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2425 READ (_FIL_NO,KEY=%IC2$,DOM=*NEXT)
2430 _KEY$=KEY(_FIL_NO,ERR=NO_FIRST)
2440 IF _KEY$(1,20)<>%IC2$ THEN READ (_FIL_NO); GOTO 2430
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2625 READ (_FIL_NO,KEY=%IC2$+"~~~~~~~~~~",DOM=*NEXT)
2630 _KEY$=KEY(_FIL_NO,ERR=NO_LAST)
2640 IF _KEY$(1,20)<>%IC2$ THEN _KEY$=KEP(_FIL_NO)
2645 IF _KEY$(1,20)<>%IC2$ THEN GOTO NO_LAST
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3055 VENDOR$=VEND_DIV$+VEND_CODE$; PERFORM "ICGMAZ.1;SEL_VENDOR"
3056 PERFORM "ICGMAZ.1;SEL_PLANT_CODE"
3057 GOSUB NUM_TO_STR
3058 GOSUB RESTORE ! SSP 
3060 CHANGE_FLG=0,CHANGE_FLG=0,%CUSTOMER$=CUST_DIV$+CUST_CODE$,%ITEM_CODE$=ITEM_CODE$
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT,ERR=*RETURN)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 ! OSUB NUM_TO_STR
3530 REFRESH_FLG=1,CHANGE_FLG=0
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUST_DIV.CTL,_FIRST_FIELD=SUPP_ITEM_CODE.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10015 FIND (ZZP,KEY="U/M"+PURCH_UM$,DOM=*NEXT)SUM$,P0,P1 ! SSP221298 jdf
10020 BASE_COST$=STR(BASE_COST),QTY_BREAK_1$=STR(QTY_BREAK_1),QTY_COST_1$=STR(QTY_COST_1),QTY_BREAK_2$=STR(QTY_BREAK_2),QTY_COST_2$=STR(QTY_COST_2),QTY_BREAK_3$=STR(QTY_BREAK_3),QTY_COST_3$=STR(QTY_COST_3),QTY_BREAK_4$=STR(QTY_BREAK_4),QTY_COST_4$=STR(QTY_COST_4),QTY_BREAK_5$=STR(QTY_BREAK_5),QTY_COST_5$=STR(QTY_COST_5),QTY_BREAK_6$=STR(QTY_BREAK_6),QTY_COST_6$=STR(QTY_COST_6) ! SSP222081 jdf
10030 REM IF PURCH_QTY_PER<>0 AND SUM$(20,1)<>"Y" THEN QTY_BREAK_1=(QTY_BREAK_1/PURCH_QTY_PER); END_IF ; QTY_BREAK_1$=STR(QTY_BREAK_1) ! SSP221298 jdf
10040 QTY_COST_1$=STR(QTY_COST_1)
10050 REM IF PURCH_QTY_PER<>0 AND SUM$(20,1)<>"Y" THEN QTY_BREAK_2=(QTY_BREAK_2/PURCH_QTY_PER); END_IF ; QTY_BREAK_2$=STR(QTY_BREAK_2) ! SSP221298 jdf
10060 QTY_COST_2$=STR(QTY_COST_2)
10070 REM IF PURCH_QTY_PER<>0 AND SUM$(20,1)<>"Y" THEN QTY_BREAK_3=(QTY_BREAK_3/PURCH_QTY_PER); END_IF ; QTY_BREAK_3$=STR(QTY_BREAK_3) ! SSP221298 jdf
10080 QTY_COST_3$=STR(QTY_COST_3)
10090 REM IF PURCH_QTY_PER<>0 AND SUM$(20,1)<>"Y" THEN QTY_BREAK_4=(QTY_BREAK_4/PURCH_QTY_PER); END_IF ; QTY_BREAK_4$=STR(QTY_BREAK_4) ! SSP221298 jdf
10100 QTY_COST_4$=STR(QTY_COST_4)
10110 REM IF PURCH_QTY_PER<>0 AND SUM$(20,1)<>"Y" THEN QTY_BREAK_5=(QTY_BREAK_5/PURCH_QTY_PER); END_IF ; QTY_BREAK_5$=STR(QTY_BREAK_5) ! SSP221298 jdf
10120 QTY_COST_5$=STR(QTY_COST_5)
10130 REM IF PURCH_QTY_PER<>0 AND SUM$(20,1)<>"Y" THEN QTY_BREAK_6=(QTY_BREAK_6/PURCH_QTY_PER); END_IF ; QTY_BREAK_6$=STR(QTY_BREAK_6) ! SSP221298 jdf
10140 QTY_COST_6$=STR(QTY_COST_6)
10150 LAST_COST$=STR(LAST_COST)
10160 PURCH_QTY_PER$=STR(PURCH_QTY_PER)
10170 CTN_WT$=STR(CTN_WT)
10180 CTN_PACK$=STR(CTN_PACK)
10230 QTY_BREAK_7$=STR(QTY_BREAK_7)
10240 QTY_COST_7$=STR(QTY_COST_7)
10250 QTY_BREAK_8$=STR(QTY_BREAK_8)
10260 QTY_COST_8$=STR(QTY_COST_8)
10270 QTY_BREAK_9$=STR(QTY_BREAK_9)
10280 QTY_COST_9$=STR(QTY_COST_9)
10290 QTY_BREAK_10$=STR(QTY_BREAK_10)
10300 QTY_COST_10$=STR(QTY_COST_10)
10310 QTY_BREAK_11$=STR(QTY_BREAK_11)
10320 QTY_COST_11$=STR(QTY_COST_11)
10330 QTY_BREAK_12$=STR(QTY_BREAK_12)
10340 QTY_COST_12$=STR(QTY_COST_12)
10350 IC2_UNUSED_2$=STR(IC2_UNUSED_2)
10360 IC2_UNUSED_3$=STR(IC2_UNUSED_3)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="BASE_COST",_X=BASE_COST.CTL,BASE_COST=NUM(BASE_COST$,ERR=NON_NUMERIC)
11030 _X$="QTY_BREAK_1",_X=QTY_BREAK_1.CTL,QTY_BREAK_1=NUM(QTY_BREAK_1$,ERR=NON_NUMERIC)
11040 _X$="QTY_COST_1",_X=QTY_COST_1.CTL,QTY_COST_1=NUM(QTY_COST_1$,ERR=NON_NUMERIC)
11050 _X$="QTY_BREAK_2",_X=QTY_BREAK_2.CTL,QTY_BREAK_2=NUM(QTY_BREAK_2$,ERR=NON_NUMERIC)
11060 _X$="QTY_COST_2",_X=QTY_COST_2.CTL,QTY_COST_2=NUM(QTY_COST_2$,ERR=NON_NUMERIC)
11070 _X$="QTY_BREAK_3",_X=QTY_BREAK_3.CTL,QTY_BREAK_3=NUM(QTY_BREAK_3$,ERR=NON_NUMERIC)
11080 _X$="QTY_COST_3",_X=QTY_COST_3.CTL,QTY_COST_3=NUM(QTY_COST_3$,ERR=NON_NUMERIC)
11090 _X$="QTY_BREAK_4",_X=QTY_BREAK_4.CTL,QTY_BREAK_4=NUM(QTY_BREAK_4$,ERR=NON_NUMERIC)
11100 _X$="QTY_COST_4",_X=QTY_COST_4.CTL,QTY_COST_4=NUM(QTY_COST_4$,ERR=NON_NUMERIC)
11110 _X$="QTY_BREAK_5",_X=QTY_BREAK_5.CTL,QTY_BREAK_5=NUM(QTY_BREAK_5$,ERR=NON_NUMERIC)
11120 _X$="QTY_COST_5",_X=QTY_COST_5.CTL,QTY_COST_5=NUM(QTY_COST_5$,ERR=NON_NUMERIC)
11130 _X$="QTY_BREAK_6",_X=QTY_BREAK_6.CTL,QTY_BREAK_6=NUM(QTY_BREAK_6$,ERR=NON_NUMERIC)
11140 _X$="QTY_COST_6",_X=QTY_COST_6.CTL,QTY_COST_6=NUM(QTY_COST_6$,ERR=NON_NUMERIC)
11150 _X$="LAST_COST",_X=LAST_COST.CTL,LAST_COST=NUM(LAST_COST$,ERR=NON_NUMERIC)
11160 _X$="PURCH_QTY_PER",_X=PURCH_QTY_PER.CTL,PURCH_QTY_PER=NUM(PURCH_QTY_PER$,ERR=NON_NUMERIC)
11170 _X$="CTN_WT",_X=CTN_WT.CTL,CTN_WT=NUM(CTN_WT$,ERR=NON_NUMERIC)
11180 _X$="CTN_PACK",_X=CTN_PACK.CTL,CTN_PACK=NUM(CTN_PACK$,ERR=NON_NUMERIC)
11230 _X$="QTY_BREAK_7",_X=QTY_BREAK_7.CTL,QTY_BREAK_7=NUM(QTY_BREAK_7$,ERR=NON_NUMERIC)
11240 _X$="QTY_COST_7",_X=QTY_COST_7.CTL,QTY_COST_7=NUM(QTY_COST_7$,ERR=NON_NUMERIC)
11250 _X$="QTY_BREAK_8",_X=QTY_BREAK_8.CTL,QTY_BREAK_8=NUM(QTY_BREAK_8$,ERR=NON_NUMERIC)
11260 _X$="QTY_COST_8",_X=QTY_COST_8.CTL,QTY_COST_8=NUM(QTY_COST_8$,ERR=NON_NUMERIC)
11270 _X$="QTY_BREAK_9",_X=QTY_BREAK_9.CTL,QTY_BREAK_9=NUM(QTY_BREAK_9$,ERR=NON_NUMERIC)
11280 _X$="QTY_COST_9",_X=QTY_COST_9.CTL,QTY_COST_9=NUM(QTY_COST_9$,ERR=NON_NUMERIC)
11290 _X$="QTY_BREAK_10",_X=QTY_BREAK_10.CTL,QTY_BREAK_10=NUM(QTY_BREAK_10$,ERR=NON_NUMERIC)
11300 _X$="QTY_COST_10",_X=QTY_COST_10.CTL,QTY_COST_10=NUM(QTY_COST_10$,ERR=NON_NUMERIC)
11310 _X$="QTY_BREAK_11",_X=QTY_BREAK_11.CTL,QTY_BREAK_11=NUM(QTY_BREAK_11$,ERR=NON_NUMERIC)
11320 _X$="QTY_COST_11",_X=QTY_COST_11.CTL,QTY_COST_11=NUM(QTY_COST_11$,ERR=NON_NUMERIC)
11330 _X$="QTY_BREAK_12",_X=QTY_BREAK_12.CTL,QTY_BREAK_12=NUM(QTY_BREAK_12$,ERR=NON_NUMERIC)
11340 _X$="QTY_COST_12",_X=QTY_COST_12.CTL,QTY_COST_12=NUM(QTY_COST_12$,ERR=NON_NUMERIC)
11350 _X$="IC0_UNUSED_2",_X=IC0_UNUSED_2.CTL,IC0_UNUSED_2=NUM(IC0_UNUSED_2$,ERR=NON_NUMERIC)
11360 _X$="IC0_UNUSED_3",_X=IC0_UNUSED_3.CTL,IC0_UNUSED_3=NUM(IC0_UNUSED_3$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 ! IF _CLR_FLG$="R" THEN CUST_DIV$=""
13030 ! IF _CLR_FLG$="R" THEN CUST_CODE$=""
13040 ! IF _CLR_FLG$="R" THEN ITEM_CODE$=""
13050 ! IF _CLR_FLG$="R" THEN VEND_DIV$=""
13060 ! IF _CLR_FLG$="R" THEN VEND_CODE$=""
13070 IF _CLR_FLG$="R" THEN PLANT_CODE$="    "
13080 SUPP_ITEM_CODE$=""
13090 PURCH_UM$=""
13100 LAST_PURCH_DATE$=""
13110 IC2_UNUSED_1$=""
13120 BASE_COST=0
13130 QTY_BREAK_1=0
13140 QTY_COST_1=0
13150 QTY_BREAK_2=0
13160 QTY_COST_2=0
13170 QTY_BREAK_3=0
13180 QTY_COST_3=0
13190 QTY_BREAK_4=0
13200 QTY_COST_4=0
13210 QTY_BREAK_5=0
13220 QTY_COST_5=0
13230 QTY_BREAK_6=0
13240 QTY_COST_6=0
13250 LAST_COST=0
13260 PURCH_QTY_PER=0
13270 CTN_WT=0
13280 CTN_PACK=0
13285 FOR AA=1 TO 12; EXECUTE "QTY_TO_"+STR(AA)+"$="+QUO+QUO
13286 NEXT AA
13480 QTY_BREAK_7=0
13490 QTY_COST_7=0
13500 QTY_BREAK_8=0
13510 QTY_COST_8=0
13520 QTY_BREAK_9=0
13530 QTY_COST_9=0
13540 QTY_BREAK_10=0
13550 QTY_COST_10=0
13560 QTY_BREAK_11=0
13570 QTY_COST_11=0
13580 QTY_BREAK_12=0
13590 QTY_COST_12=0
13600 IC2_UNUSED_2=0
13610 IC2_UNUSED_3=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1,NEXT_ID=SUPP_ITEM_CODE.CTL
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUST_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=ITEM_CODE.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=VEND_DIV.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14060 IF _ENABLE_FLG=5 THEN CALL "*wingrp;Enable",KEY5.GRP$; NEXT_ID=VEND_CODE.CTL ELSE CALL "*wingrp;Disable",KEY5.GRP$
14070 IF _ENABLE_FLG=6 THEN CALL "*wingrp;Enable",KEY6.GRP$; NEXT_ID=PLANT_CODE.CTL ELSE CALL "*wingrp;Disable",KEY6.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(41,"N")
15030 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15040 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15050 IF _ORIG.ITEM_CODE$=_CUR.ITEM_CODE$ OR ITEM_CODE$=_CUR.ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CODE$=ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$
15060 IF _ORIG.VEND_DIV$=_CUR.VEND_DIV$ OR VEND_DIV$=_CUR.VEND_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_DIV$=VEND_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$
15070 IF _ORIG.VEND_CODE$=_CUR.VEND_CODE$ OR VEND_CODE$=_CUR.VEND_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_CODE$=VEND_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$
15080 IF _ORIG.PLANT_CODE$=_CUR.PLANT_CODE$ OR PLANT_CODE$=_CUR.PLANT_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PLANT_CODE$=PLANT_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PLANT_CODE")+" = "+_CUR.PLANT_CODE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLANT_CODE")+" = "+_CUR.PLANT_CODE$
15090 IF _ORIG.SUPP_ITEM_CODE$=_CUR.SUPP_ITEM_CODE$ OR SUPP_ITEM_CODE$=_CUR.SUPP_ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.SUPP_ITEM_CODE$=SUPP_ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("SUPP_I_C")+" = "+_CUR.SUPP_ITEM_CODE$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SUPP_I_C")+" = "+_CUR.SUPP_ITEM_CODE$
15100 IF _ORIG.PURCH_UM$=_CUR.PURCH_UM$ OR PURCH_UM$=_CUR.PURCH_UM$ THEN GOTO *NEXT ELSE IF _ORIG.PURCH_UM$=PURCH_UM$ THEN _CHG2$=_CHG2$+SEP+MSG("PURCH_UM")+" = "+_CUR.PURCH_UM$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PURCH_UM")+" = "+_CUR.PURCH_UM$
15110 IF _ORIG.LAST_PURCH_DATE$=_CUR.LAST_PURCH_DATE$ OR LAST_PURCH_DATE$=_CUR.LAST_PURCH_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.LAST_PURCH_DATE$=LAST_PURCH_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("LAST_P_D")+" = "+_CUR.LAST_PURCH_DATE$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_P_D")+" = "+_CUR.LAST_PURCH_DATE$
15120 IF _ORIG.IC2_UNUSED_1$=_CUR.IC2_UNUSED_1$ OR IC2_UNUSED_1$=_CUR.IC2_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.IC2_UNUSED_1$=IC2_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.IC2_UNUSED_1$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.IC2_UNUSED_1$
15130 IF _ORIG.BASE_COST=_CUR.BASE_COST OR BASE_COST=_CUR.BASE_COST THEN GOTO *NEXT ELSE IF _ORIG.BASE_COST=BASE_COST THEN _CHG2$=_CHG2$+SEP+MSG("BASE_COST")+" = "+STR(_CUR.BASE_COST),_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BASE_COST")+" = "+STR(_CUR.BASE_COST)
15140 IF _ORIG.QTY_BREAK_1=_CUR.QTY_BREAK_1 OR QTY_BREAK_1=_CUR.QTY_BREAK_1 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_1=QTY_BREAK_1 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_1")+" = "+STR(_CUR.QTY_BREAK_1),_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_1")+" = "+STR(_CUR.QTY_BREAK_1)
15150 IF _ORIG.QTY_COST_1=_CUR.QTY_COST_1 OR QTY_COST_1=_CUR.QTY_COST_1 THEN GOTO *NEXT ELSE IF _ORIG.QTY_COST_1=QTY_COST_1 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_C_1")+" = "+STR(_CUR.QTY_COST_1),_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_C_1")+" = "+STR(_CUR.QTY_COST_1)
15160 IF _ORIG.QTY_BREAK_2=_CUR.QTY_BREAK_2 OR QTY_BREAK_2=_CUR.QTY_BREAK_2 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_2=QTY_BREAK_2 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_2")+" = "+STR(_CUR.QTY_BREAK_2),_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_2")+" = "+STR(_CUR.QTY_BREAK_2)
15170 IF _ORIG.QTY_COST_2=_CUR.QTY_COST_2 OR QTY_COST_2=_CUR.QTY_COST_2 THEN GOTO *NEXT ELSE IF _ORIG.QTY_COST_2=QTY_COST_2 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_C_2")+" = "+STR(_CUR.QTY_COST_2),_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_C_2")+" = "+STR(_CUR.QTY_COST_2)
15180 IF _ORIG.QTY_BREAK_3=_CUR.QTY_BREAK_3 OR QTY_BREAK_3=_CUR.QTY_BREAK_3 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_3=QTY_BREAK_3 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_3")+" = "+STR(_CUR.QTY_BREAK_3),_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_3")+" = "+STR(_CUR.QTY_BREAK_3)
15190 IF _ORIG.QTY_COST_3=_CUR.QTY_COST_3 OR QTY_COST_3=_CUR.QTY_COST_3 THEN GOTO *NEXT ELSE IF _ORIG.QTY_COST_3=QTY_COST_3 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_C_3")+" = "+STR(_CUR.QTY_COST_3),_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_C_3")+" = "+STR(_CUR.QTY_COST_3)
15200 IF _ORIG.QTY_BREAK_4=_CUR.QTY_BREAK_4 OR QTY_BREAK_4=_CUR.QTY_BREAK_4 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_4=QTY_BREAK_4 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_4")+" = "+STR(_CUR.QTY_BREAK_4),_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_4")+" = "+STR(_CUR.QTY_BREAK_4)
15210 IF _ORIG.QTY_COST_4=_CUR.QTY_COST_4 OR QTY_COST_4=_CUR.QTY_COST_4 THEN GOTO *NEXT ELSE IF _ORIG.QTY_COST_4=QTY_COST_4 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_C_4")+" = "+STR(_CUR.QTY_COST_4),_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_C_4")+" = "+STR(_CUR.QTY_COST_4)
15220 IF _ORIG.QTY_BREAK_5=_CUR.QTY_BREAK_5 OR QTY_BREAK_5=_CUR.QTY_BREAK_5 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_5=QTY_BREAK_5 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_5")+" = "+STR(_CUR.QTY_BREAK_5),_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_5")+" = "+STR(_CUR.QTY_BREAK_5)
15230 IF _ORIG.QTY_COST_5=_CUR.QTY_COST_5 OR QTY_COST_5=_CUR.QTY_COST_5 THEN GOTO *NEXT ELSE IF _ORIG.QTY_COST_5=QTY_COST_5 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_C_5")+" = "+STR(_CUR.QTY_COST_5),_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_C_5")+" = "+STR(_CUR.QTY_COST_5)
15240 IF _ORIG.QTY_BREAK_6=_CUR.QTY_BREAK_6 OR QTY_BREAK_6=_CUR.QTY_BREAK_6 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_6=QTY_BREAK_6 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_6")+" = "+STR(_CUR.QTY_BREAK_6),_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_6")+" = "+STR(_CUR.QTY_BREAK_6)
15250 IF _ORIG.QTY_COST_6=_CUR.QTY_COST_6 OR QTY_COST_6=_CUR.QTY_COST_6 THEN GOTO *NEXT ELSE IF _ORIG.QTY_COST_6=QTY_COST_6 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_C_6")+" = "+STR(_CUR.QTY_COST_6),_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_C_6")+" = "+STR(_CUR.QTY_COST_6)
15260 IF _ORIG.LAST_COST=_CUR.LAST_COST OR LAST_COST=_CUR.LAST_COST THEN GOTO *NEXT ELSE IF _ORIG.LAST_COST=LAST_COST THEN _CHG2$=_CHG2$+SEP+MSG("LAST_COST")+" = "+STR(_CUR.LAST_COST),_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_COST")+" = "+STR(_CUR.LAST_COST)
15270 IF _ORIG.PURCH_QTY_PER=_CUR.PURCH_QTY_PER OR PURCH_QTY_PER=_CUR.PURCH_QTY_PER THEN GOTO *NEXT ELSE IF _ORIG.PURCH_QTY_PER=PURCH_QTY_PER THEN _CHG2$=_CHG2$+SEP+MSG("PURC_Q_P")+" = "+STR(_CUR.PURCH_QTY_PER),_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PURC_Q_P")+" = "+STR(_CUR.PURCH_QTY_PER)
15280 IF _ORIG.CTN_WT=_CUR.CTN_WT OR CTN_WT=_CUR.CTN_WT THEN GOTO *NEXT ELSE IF _ORIG.CTN_WT=CTN_WT THEN _CHG2$=_CHG2$+SEP+MSG("CTN_WT")+" = "+STR(_CUR.CTN_WT),_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CTN_WT")+" = "+STR(_CUR.CTN_WT)
15290 IF _ORIG.CTN_PACK=_CUR.CTN_PACK OR CTN_PACK=_CUR.CTN_PACK THEN GOTO *NEXT ELSE IF _ORIG.CTN_PACK=CTN_PACK THEN _CHG2$=_CHG2$+SEP+MSG("CTN_PACK")+" = "+STR(_CUR.CTN_PACK),_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CTN_PACK")+" = "+STR(_CUR.CTN_PACK)
15490 IF _ORIG.QTY_BREAK_7=_CUR.QTY_BREAK_7 OR QTY_BREAK_7=_CUR.QTY_BREAK_7 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_7=QTY_BREAK_7 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_7")+" = "+STR(_CUR.QTY_BREAK_7),_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_7")+" = "+STR(_CUR.QTY_BREAK_7)
15500 IF _ORIG.QTY_COST_7=_CUR.QTY_COST_7 OR QTY_COST_7=_CUR.QTY_COST_7 THEN GOTO *NEXT ELSE IF _ORIG.QTY_COST_7=QTY_COST_7 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_7")+" = "+STR(_CUR.QTY_COST_7),_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_7")+" = "+STR(_CUR.QTY_COST_7)
15510 IF _ORIG.QTY_BREAK_8=_CUR.QTY_BREAK_8 OR QTY_BREAK_8=_CUR.QTY_BREAK_8 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_8=QTY_BREAK_8 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_8")+" = "+STR(_CUR.QTY_BREAK_8),_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_8")+" = "+STR(_CUR.QTY_BREAK_8)
15520 IF _ORIG.QTY_COST_8=_CUR.QTY_COST_8 OR QTY_COST_8=_CUR.QTY_COST_8 THEN GOTO *NEXT ELSE IF _ORIG.QTY_COST_8=QTY_COST_8 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_8")+" = "+STR(_CUR.QTY_COST_8),_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_8")+" = "+STR(_CUR.QTY_COST_8)
15530 IF _ORIG.QTY_BREAK_9=_CUR.QTY_BREAK_9 OR QTY_BREAK_9=_CUR.QTY_BREAK_9 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_9=QTY_BREAK_9 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_9")+" = "+STR(_CUR.QTY_BREAK_9),_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_9")+" = "+STR(_CUR.QTY_BREAK_9)
15540 IF _ORIG.QTY_COST_9=_CUR.QTY_COST_9 OR QTY_COST_9=_CUR.QTY_COST_9 THEN GOTO *NEXT ELSE IF _ORIG.QTY_COST_9=QTY_COST_9 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_9")+" = "+STR(_CUR.QTY_COST_9),_CHG_VAR$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_9")+" = "+STR(_CUR.QTY_COST_9)
15550 IF _ORIG.QTY_BREAK_10=_CUR.QTY_BREAK_10 OR QTY_BREAK_10=_CUR.QTY_BREAK_10 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_10=QTY_BREAK_10 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_10")+" = "+STR(_CUR.QTY_BREAK_10),_CHG_VAR$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_10")+" = "+STR(_CUR.QTY_BREAK_10)
15560 IF _ORIG.QTY_COST_10=_CUR.QTY_COST_10 OR QTY_COST_10=_CUR.QTY_COST_10 THEN GOTO *NEXT ELSE IF _ORIG.QTY_COST_10=QTY_COST_10 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_10")+" = "+STR(_CUR.QTY_COST_10),_CHG_VAR$(35,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_10")+" = "+STR(_CUR.QTY_COST_10)
15570 IF _ORIG.QTY_BREAK_11=_CUR.QTY_BREAK_11 OR QTY_BREAK_11=_CUR.QTY_BREAK_11 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_11=QTY_BREAK_11 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_11")+" = "+STR(_CUR.QTY_BREAK_11),_CHG_VAR$(36,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_11")+" = "+STR(_CUR.QTY_BREAK_11)
15580 IF _ORIG.QTY_COST_11=_CUR.QTY_COST_11 OR QTY_COST_11=_CUR.QTY_COST_11 THEN GOTO *NEXT ELSE IF _ORIG.QTY_COST_11=QTY_COST_11 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_11")+" = "+STR(_CUR.QTY_COST_11),_CHG_VAR$(37,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_11")+" = "+STR(_CUR.QTY_COST_11)
15590 IF _ORIG.QTY_BREAK_12=_CUR.QTY_BREAK_12 OR QTY_BREAK_12=_CUR.QTY_BREAK_12 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_12=QTY_BREAK_12 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_12")+" = "+STR(_CUR.QTY_BREAK_12),_CHG_VAR$(38,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_12")+" = "+STR(_CUR.QTY_BREAK_12)
15600 IF _ORIG.QTY_COST_12=_CUR.QTY_COST_12 OR QTY_COST_12=_CUR.QTY_COST_12 THEN GOTO *NEXT ELSE IF _ORIG.QTY_COST_12=QTY_COST_12 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_12")+" = "+STR(_CUR.QTY_COST_12),_CHG_VAR$(39,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_12")+" = "+STR(_CUR.QTY_COST_12)
15610 IF _ORIG.IC0_UNUSED_2=_CUR.IC0_UNUSED_2 OR IC0_UNUSED_2=_CUR.IC0_UNUSED_2 THEN GOTO *NEXT ELSE IF _ORIG.IC0_UNUSED_2=IC0_UNUSED_2 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_2),_CHG_VAR$(40,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_2)
15620 IF _ORIG.IC0_UNUSED_3=_CUR.IC0_UNUSED_3 OR IC0_UNUSED_3=_CUR.IC0_UNUSED_3 THEN GOTO *NEXT ELSE IF _ORIG.IC0_UNUSED_3=IC0_UNUSED_3 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_3),_CHG_VAR$(41,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC0_UNUSED_3)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16030 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN ITEM_CODE$=_CUR.ITEM_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN VEND_DIV$=_CUR.VEND_DIV$
16060 IF _CHG_VAR$(5,1)="Y" THEN VEND_CODE$=_CUR.VEND_CODE$
16070 IF _CHG_VAR$(6,1)="Y" THEN PLANT_CODE$=_CUR.PLANT_CODE$
16080 IF _CHG_VAR$(7,1)="Y" THEN SUPP_ITEM_CODE$=_CUR.SUPP_ITEM_CODE$
16090 IF _CHG_VAR$(8,1)="Y" THEN PURCH_UM$=_CUR.PURCH_UM$
16100 IF _CHG_VAR$(9,1)="Y" THEN LAST_PURCH_DATE$=_CUR.LAST_PURCH_DATE$
16110 IF _CHG_VAR$(10,1)="Y" THEN IC2_UNUSED_1$=_CUR.IC2_UNUSED_1$
16120 IF _CHG_VAR$(11,1)="Y" THEN BASE_COST=_CUR.BASE_COST
16130 IF _CHG_VAR$(12,1)="Y" THEN QTY_BREAK_1=_CUR.QTY_BREAK_1
16140 IF _CHG_VAR$(13,1)="Y" THEN QTY_COST_1=_CUR.QTY_COST_1
16150 IF _CHG_VAR$(14,1)="Y" THEN QTY_BREAK_2=_CUR.QTY_BREAK_2
16160 IF _CHG_VAR$(15,1)="Y" THEN QTY_COST_2=_CUR.QTY_COST_2
16170 IF _CHG_VAR$(16,1)="Y" THEN QTY_BREAK_3=_CUR.QTY_BREAK_3
16180 IF _CHG_VAR$(17,1)="Y" THEN QTY_COST_3=_CUR.QTY_COST_3
16190 IF _CHG_VAR$(18,1)="Y" THEN QTY_BREAK_4=_CUR.QTY_BREAK_4
16200 IF _CHG_VAR$(19,1)="Y" THEN QTY_COST_4=_CUR.QTY_COST_4
16210 IF _CHG_VAR$(20,1)="Y" THEN QTY_BREAK_5=_CUR.QTY_BREAK_5
16220 IF _CHG_VAR$(21,1)="Y" THEN QTY_COST_5=_CUR.QTY_COST_5
16230 IF _CHG_VAR$(22,1)="Y" THEN QTY_BREAK_6=_CUR.QTY_BREAK_6
16240 IF _CHG_VAR$(23,1)="Y" THEN QTY_COST_6=_CUR.QTY_COST_6
16250 IF _CHG_VAR$(24,1)="Y" THEN LAST_COST=_CUR.LAST_COST
16260 IF _CHG_VAR$(25,1)="Y" THEN PURCH_QTY_PER=_CUR.PURCH_QTY_PER
16270 IF _CHG_VAR$(26,1)="Y" THEN CTN_WT=_CUR.CTN_WT
16280 IF _CHG_VAR$(27,1)="Y" THEN CTN_PACK=_CUR.CTN_PACK
16480 IF _CHG_VAR$(28,1)="Y" THEN QTY_BREAK_7=_CUR.QTY_BREAK_7
16490 IF _CHG_VAR$(29,1)="Y" THEN QTY_COST_7=_CUR.QTY_COST_7
16500 IF _CHG_VAR$(30,1)="Y" THEN QTY_BREAK_8=_CUR.QTY_BREAK_8
16510 IF _CHG_VAR$(31,1)="Y" THEN QTY_COST_8=_CUR.QTY_COST_8
16520 IF _CHG_VAR$(32,1)="Y" THEN QTY_BREAK_9=_CUR.QTY_BREAK_9
16530 IF _CHG_VAR$(33,1)="Y" THEN QTY_COST_9=_CUR.QTY_COST_9
16540 IF _CHG_VAR$(34,1)="Y" THEN QTY_BREAK_10=_CUR.QTY_BREAK_10
16550 IF _CHG_VAR$(35,1)="Y" THEN QTY_COST_10=_CUR.QTY_COST_10
16560 IF _CHG_VAR$(36,1)="Y" THEN QTY_BREAK_11=_CUR.QTY_BREAK_11
16570 IF _CHG_VAR$(37,1)="Y" THEN QTY_COST_11=_CUR.QTY_COST_11
16580 IF _CHG_VAR$(38,1)="Y" THEN QTY_BREAK_12=_CUR.QTY_BREAK_12
16590 IF _CHG_VAR$(39,1)="Y" THEN QTY_COST_12=_CUR.QTY_COST_12
16600 IF _CHG_VAR$(40,1)="Y" THEN IC0_UNUSED_2=_CUR.IC0_UNUSED_2
16610 IF _CHG_VAR$(41,1)="Y" THEN IC0_UNUSED_3=_CUR.IC0_UNUSED_3
16990 RETURN 
17000 QRY_IC2:
17010 PROCESS "QRY_IC2","../ICG/IC.EN",VAL$
17020 IF VAL$="" OR LEN(VAL$)=1 THEN GOTO *RETURN ! SSP248263 jdf
17025 QRY_VAL$=VAL$
17030 CUSTOMER$=VAL$(1,10),VAL$=VAL$(11); CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$
17040 ITEM_CODE$=VAL$(1,10),VAL$=VAL$(11)
17050 VENDOR$=VAL$(1,10),VAL$=VAL$(11); CALL "ZZWLKU;PARSE_VEND",VENDOR$,VEND_DIV$,VEND_CODE$
17060 PLANT_CODE$=VAL$
17070 REFRESH_FLG=1
17080 GOSUB READ_QRY
17090 RETURN 
17100 ! 17100,10
17110 SEL_UM: REFRESH_FLG=1 ! SSP222081 jdf
17120 PURCH_UM$=PAD(PURCH_UM$,4," ") ! SSP222081 jdf
17121 REM IF WHO="jdf" THEN ESCAPE 
17122 IF BB_PURCH_UM$=PURCH_UM$ AND BB_PURCH_QTY_PER$=PURCH_QTY_PER$ THEN EXIT ! SSP222081 jdf  
17130 FIND (ZZP,KEY="U/M"+PURCH_UM$,DOM=NO_UM)SUM$,P0,P1 ! SSP222081 jdf
17150 REM PURCH_QTY_PER$=STR(P0); IF P0<>0 THEN NEXT_ID=BASE_COST.CTL ! SSP222081 jdf
17152 IF ID$="PURCH_UM" AND SUM$(20,1)="Y" THEN PURCH_QTY_PER$=STR(P0) ELSE IF ID$="PURCH_UM" AND STP(PURCH_QTY_PER$)="" AND P1<>0 THEN PURCH_QTY_PER$=STR(P1) ! SSP222081 jdf
17154 IF ID$="PURCH_UM" AND NUM(PURCH_QTY_PER$)=0 THEN PURCH_QTY_PER$=STR(P1) ! SSP2220581 jdf  
17155 IF BB_PURCH_UM$<>PURCH_UM$ OR BB_PURCH_QTY_PER$<>PURCH_QTY_PER$ THEN GOSUB CHANGE_PURCH_UM ! SSP222081 jdf
17156 REM IF ID$<>"PURCH_UM" THEN PURCH_QTY_PER$=STR(P0),NEXT_ID=PURCH_QTY_PER.CTL; IF P0=0 THEN PURCH_QTY_PER$=STR(P1) ! SSP222081 jdf
17158 IF P0<>0 THEN NEXT_ID=BASE_COST.CTL ! SSP222081 jdf
17160 IF ID$="PURCH_QTY_PER" AND NUM(PURCH_QTY_PER$)=0 THEN MSGBOX MSG("ENTER_S_UM"),MSG("WARNING"),"!,TIM=5"; NEXT_ID=PURCH_QTY_PER.CTL ! SSP222081 jdf
17170 RETURN ! SSP222081 jdf
17180 NO_UM: PURCH_UM$="",NEXT_ID=PURCH_UM.CTL; RETURN 
18500 CHANGE_PURCH_UM:REM IF WHO="jdf" THEN ESCAPE ! SSP222081 jdf
18501 BB_PURCH_QTY_PER=NUM(BB_PURCH_QTY_PER$) ! SSP222081 jdf   
18502 REM IF BB_PURCH_QTY_PER=PURCH_QTY_PER THEN GOTO 18522 ! SSP222081 jdf
18504 IF STP(BB_PURCH_QTY_PER$)="" THEN BB_PURCH_QTY_PER$=PURCH_QTY_PER$ ! SSP222081 jdf
18506 IF NUM(BB_PURCH_QTY_PER$)<>0 THEN BASE_COST=NUM(BASE_COST$)*NUM(PURCH_QTY_PER$)/NUM(BB_PURCH_QTY_PER$),BASE_COST$=STR(BASE_COST) ! SSP222081 jdf
18508 IF NUM(BB_PURCH_QTY_PER$)=0 OR NUM(PURCH_QTY_PER$)=0 THEN RETURN ! SSP222081 jdf
18510 FOR XX=1 TO 12 ! SSP222081 jdf
18512 IF NUM(PURCH_QTY_PER$)=0 OR NUM(BB_PURCH_QTY_PER$)=0 THEN RETURN ! SSP222081 jdf
18514 EXECUTE "QTY_COST_"+STR(XX)+"$=STR(NUM(QTY_COST_"+STR(XX)+"$)*NUM(PURCH_QTY_PER$)/NUM(BB_PURCH_QTY_PER$))" ! SSP222081 jdf
18516 EXECUTE "QTY_BREAK_"+STR(XX)+"$=STR(NUM(QTY_BREAK_"+STR(XX)+"$)*NUM(BB_PURCH_QTY_PER$)/NUM(PURCH_QTY_PER$))" ! SSP222081 jdf
18518 NEXT XX ! SSP222081 jdf
18520 REM GOTO CREATE_BREAK ! SSP222081 jdf
18522 FOR XX=1 TO 12 ! SSP222081  jdf
18524 VAL$=STR(EVN("QTY_BREAK_"+STR(XX))); IF NUM(VAL$)=0 THEN BREAK ! SSP222081 jdf   
18526 IF SUM$(20,1)<>"Y" THEN VAL$=STR(NUM(VAL$)/NUM(PURCH_QTY_PER$),ERR=*NEXT) ELSE IF P1<>0 THEN VAL$=STR(NUM(VAL$)/P1) ! SSP222081 jdf
18528 EXECUTE "QTY_BREAK_"+STR(XX)+"$=VAL$" ! SSP222081 jdf
18530 NEXT XX ! SSP222081 jdf
30000 CREATE_BREAK:
30005 ! GOSUB NUM_TO_STR
30006 REM FIND (ZZP,KEY="U/M"+PURCH_UM$,DOM=*NEXT)SUM$,P0,P1 ! SSP221298 jdf
30008 REM IF PURCH_QTY_PER=0 THEN PURCH_QTY_PER=1 ! SSP222081 jdf
30010 FOR AA=12 TO 1 STEP -1
30020 EXECUTE "IF NUM(QTY_BREAK_"+STR(AA)+"$)<>0 THEN QTY_TO_"+STR(AA-1)+"$=STR(NUM(QTY_BREAK_"+STR(AA)+"$)-.01) ELSE QTY_TO_"+STR(AA-1)+"$="""""
30021 REM IF QTY_BREAK_1<>0 THEN QTY_TO_0$=STR(QTY_BREAK_1-.01) ELSE QTY_TO_0$=""
30025 EXECUTE "IF NUM(QTY_TO_"+STR(AA-1)+"$) < 0 QTY_TO_"+STR(AA-1)+"$="""""
30030 NEXT AA
30035 BB_PURCH_UM$=PURCH_UM$,BB_PURCH_QTY_PER$=PURCH_QTY_PER$ ! SSP222081 jdf
30040 RETURN 
32000 RESTORE:! SSP222081 jdf
32010 FOR A=1 TO 12 ! SSP222081 jdf
32020 EXECUTE "QTY_BREAK_"+STR(A)+"$=STR(QTY_BREAK_"+STR(A)+")" ! SSP222081  jdf
32030 NEXT A ! SSP222081 jdf
32040 GOSUB 0191; RETURN ! SSP222081 jdf
32100 FINISH_BREAK:! SSP222081 jdf
32110 FOR AA=1 TO 12 ! SSP222081 jdf
32120 VAL$=EVS("QTY_BREAK_"+STR(AA)+"$"); IF NUM(VAL$)=0 THEN BREAK ! SSP222081 jdf
32130 IF SUM$(20,1)<>"Y" THEN VAL$=STR(NUM(VAL$)*NUM(PURCH_QTY_PER$),ERR=*NEXT) ELSE IF P1<>0 THEN VAL$=STR(NUM(VAL$)*P1) ! SSP222081 jdf
32140 EXECUTE "QTY_BREAK_"+STR(AA)+"$=VAL$" ! SSP222081 jdf
32150 NEXT AA ! SSP222081 jdf
32155 REFRESH_FLG=1
32160 RETURN ! SSP222081 jdf
32200 IC0_DEFAULTS:! SSP281849, if new get defaults from IC0
32210 IOLIST IC0$,IC0[0],IC0[1],IC0[2],IC0[3],IC0[4],IC0[5],IC0[6],IC0[7],IC0[8],IC0[9],IC0[10],IC0[11],IC0[12],IC0[13],IC0[14],IC0[15],IC0[16],IC0[17],IC0[18],IC0[19],IC0[20],IC0[21],IC0[22],IC0[23],IC0[24],IC0[25],IC0[26],IC0[27],IC0[28],IC0[29],IC0[30],IC0[31],IC0[32],IC0[33],IC0[34],IC0[35],IC0[36],IC0[37],IC0[38],IC0[39],IC0[40]
32215 DIM IC0$(187),IC0[40]
32220 READ (IC0,KEY=CUST_DIV$+CUST_CODE$+ITEM_CODE$,DOM=*RETURN)IOL=32210
32225 PURCH_UM$=IC0$(124,4)
32230 LAST_PURCH_DATE$=IC0$(102,6)
32235 LAST_COST=IC0[17]
32240 PURCH_QTY_PER=IC0[14]
32245 CTN_WT=IC0[16]
32250 CTN_PACK=IC0[19]
32280 GOSUB NUM_TO_STR
32290 RETURN 
32295 ! 
56000 REM "221298-ICGMAZ.2 Supplier Purchasing information is not displaying  
56002 REM "248263-Getting an error handler in inventory setup, supplier       
56003 REM "273055-Expand IC2 for 6 additional cost breaks, allow entry in GUI 
56004 REM "281849-Add new Supplier Purchasing record, ERR 047-ICGMAZ.2-32130. 
56005 REM "283046-Issues with the cost quantity breaks on the vendor          
56006 REM "291195-Company 589. Entering Vendor Code 00004444 in GUI, it does  
56007 REM "307467-DBD-429  Error 14 when setting up Inventory via Order Entry 
