0010 ! I/C Statistical Data Inquiry <ICGMDA>
0035 REM "5.7 - 03/12/12 - 10.540555 - tma - SSP# 253290
0037 REM "253290-GUI - looking at statistical data under a custom item.      
0040 REM "Copyright 2012 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0042 SETERR 0043; ENTER CUSTOMER$,ITEM_CODE$
0045 ARG_1$=CUSTOMER$,ARG_2$=ITEM_CODE$
0050 PROCESS "ICGMDA","../ICG/IC.EN",ARG_1$,ARG_2$
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0115 ADDR "BORDERLESS",ERR=*NEXT
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="IC9"+%C$
0165 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0182 _AR1=HFN; OPEN (_AR1)"AR1"+%C$
0185 _FM0=HFN; OPEN (_FM0)"FM0"+%C$
0188 _IC0=HFN; OPEN (_IC0)"IC0"+%C$
0190 _ZZP=HFN; OPEN (_ZZP)"ZZPARM"; GOSUB CHECK_SECURITY
0199 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=5
0430 DIM _KEYS$[1:5]; _KEYS$[1]="CUSTOMER$",_KEYS$[2]="ITEM_CODE$",_KEYS$[3]="LOC_CODE$",_KEYS$[4]="FY$",_KEYS$[5]="BAL_TYPE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 %IC9$=""; IF ARG_1$+ARG_2$<>"" THEN %IC9$=ARG_1$+ARG_2$,CUST_CALL$=ARG_1$,ITEM_CALL$=ARG_2$; ARG_1$="",ARG_2$=""; REFRESH_FLG=1,_KCNT=3,_KEY1=3,NEXT_ID=LOC_CODE.CTL,CUSTOMER$=CUST_CALL$,ID$="CUSTOMER"; GOSUB PROCESS_AR1; ITEM_CODE$=ITEM_CALL$; GOSUB PROCESS_IC0; CUSTOMER$=CUST_CALL$,ITEM_CODE$=ITEM_CALL$,REFRESH_FLG=1; CALL "*wingrp;disable",KEYS.GRP$
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; IF ITEM_CALL$<>"" THEN NEXT_ID=LOC_CODE.CTL END_IF ; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0565 %CUST_NAME$=ML_CUST_NAME$,%ITEM_DESC$=ML_ITEM_DESC$
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 CLOSE (_AR1),(_FM0),(_IC0),(_ZZP); _AR1=0,_FM0=0,IC0=0
0946 CLOSE (ZZPARM,ERR=*NEXT)
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0965 DROP "BORDERLESS",ERR=*NEXT
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1021 ! CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN
1030 ! IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; RETURN ! GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1041 IF LEN(FY$)>4 THEN FY$=CR_YEAR$
1042 _KEY$=%CUSTOMER$+%ITEM_CODE$+LOC_CODE$+FY$+BAL_TYPE$
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1065 _KEY$(1,20)=%CUSTOMER$+%ITEM_CODE$
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1211 IF F1$(POS(BAL_TYPE$=F1$)+1,1)="N" THEN NEXT_ID=EVN("BT_TYPE_"+BAL_TYPE$+".CTL"),CHANGE_FLG=0; CALL "*WINGRP;HIDE",FIELDS.GRP$; CALL "*WINGRP;HIDE",FLDS.GRP$; GOSUB SET_BUTTON; MSGBOX MSG("NODATA_AVA"),MSG("WARNING"),"!,beep,TIM=3"; EXIT 
1215 ! NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1242 ! GOSUB LOAD_DATES
1245 IF F1$(POS(BAL_TYPE$=F1$)+1,1)="Y" THEN CALL "*WINGRP;UNLOCK",FIELDS.GRP$; CALL "*WINGRP;SHOW",FLDS.GRP$; CALL "*WINGRP;ENABLE",BUTTONS.GRP$; OPTIONS$="R",REST=1,CHANGE_FLG=0; GOSUB BORDERLESS; GOSUB LOAD_DATES ELSE NEXT_ID=_FIRST_KEY,CHANGE_FLG=0,OPTIONS$="R",REST=1; GOSUB BORDERLESS; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=OPEN_BAL.CTL
1280 GOSUB LOAD_DATES
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1611 IF SEC$(63,1)="N" THEN MSGBOX MSG("NO_DEL"),MSG("WARNING"),"!"; GOTO *RETURN
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1812 IF FLAG THEN CMD_STR$="E"; GOTO *RETURN
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 IF CUST_CALL$+ITEM_CALL$<>"" AND MID(_KEY$,1,20)<>CUST_CALL$+ITEM_CALL$+ARG_2$ THEN READ (_FIL_NO); GOTO 2040
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); IF CUST_CALL$+ITEM_CALL$<>"" AND MID(_KEY$,1,20)<>CUST_CALL$+ITEM_CALL$ THEN GOTO 2230 ELSE GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2425 IF CUST_CALL$+ITEM_CALL$<>"" THEN READ (_FIL_NO,KEY=CUST_CALL$+ITEM_CALL$,DOM=*NEXT)
2430 _KEY$=KEY(_FIL_NO,ERR=NO_FIRST)
2435 IF CUST_CALL$+ITEM_CALL$<>"" AND MID(_KEY$,1,20)<>CUST_CALL$+ITEM_CALL$ THEN READ (_FIL_NO); GOTO 2430
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2625 IF CUST_CALL$+ITEM_CALL$<>"" THEN READ (_FIL_NO,KEY=CUST_CALL$+ITEM_CALL$+"~~~~~~~~~",DOM=*NEXT)
2630 _KEY$=KEP(_FIL_NO,ERR=NO_LAST)
2640 IF CUST_CALL$+ITEM_CALL$<>"" AND MID(_KEY$,1,20)<>CUST_CALL$+ITEM_CALL$ THEN READ (_FIL_NO,KEY=_KEY$); GOTO 2630
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 GOSUB PROCESS_AR1
3080 GOSUB PROCESS_FM0
3090 GOSUB PROCESS_IC0; GOSUB YTD_BAL; GOSUB LOAD_DATES
3095 GOSUB SET_BUTTON
3100 IF BAL_TYPE$="U" THEN GOSUB PROCESS_UM ELSE CALL "*WINGRP;HIDE",UM.GRP$
3110 _FIRST_FIELD=EVN("BT_TYPE_"+BAL_TYPE$+".CTL")
3120 IF F1$(POS(BAL_TYPE$=F1$)+1,1)="N" THEN CALL "*WINGRP;LOCK",FIELDS.GRP$; CALL "*WINGRP;DISABLE",BUTTONS.GRP$; OPTIONS$="R",REST=0; GOSUB BORDERLESS; NEXT_ID=EVN("BT_TYPE_"+BAL_TYPE$+".CTL"); GOTO *RETURN
3130 CALL "*WINGRP;UNLOCK",FIELDS.GRP$; OPTIONS$="R",REST=1; GOSUB BORDERLESS; NEXT_ID=OPEN_BAL.CTL,REFRESH_FLG=1
3140 CALL "*WINGRP;ENABLE",BUTTONS.GRP$
3150 _FIRST_FIELD=OPEN_BAL.CTL
3199 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 ! GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:! IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3805 IF COUNT=1 THEN GOTO *RETURN
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUST_DIV.CTL,_FIRST_FIELD=OPEN_BAL.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR"),_MSG_DIRECTORY$=MSG("DIRECTORY"),_MSG_END_OF_FIL$=MSG("END_OF_FIL"),_MSG_FILOPNERR1$=MSG("FILOPNERR1"),_MSG_JUST_CHECK$=MSG("JUST_CHECK"),_MSG_MANDATORY$=MSG("MANDATORY"),_MSG_NEXT$=MSG("NEXT"),_MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND"),_MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG"),_MSG_PRECEDING$=MSG("PRECEDING"),_MSG_PREFIX$=MSG("PREFIX"),_MSG_REC_ACCESS$=MSG("REC_ACCESS"),_MSG_REC_ALTERD$=MSG("REC_ALTERD"),_MSG_REC_CR_NEW$=MSG("REC_CR_NEW"),_MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND"),_MSG_REC_NO_1ST$=MSG("REC_NO_1ST"),_MSG_REC_NO_LST$=MSG("REC_NO_LST"),_MSG_REC_REMOVE$=MSG("REC_REMOVE"),_MSG_REC_UPDADD$=MSG("REC_UPDADD"),_MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS"),_MSG_START_FILE$=MSG("START_FILE"),_MSG_UPDATE$=MSG("UPDATE"),_MSG_UPD_OTHER1$=MSG("UPD_OTHER1"),_MSG_UPD_OTHER2$=MSG("UPD_OTHER2"),_MSG_UPD_SAME$=MSG("UPD_SAME"),_MSG_WARNING$=MSG("WARNING"),_MSG_CANNOT_WRITE$=MSG("CANT_WRITE"),_MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 OPEN_BAL$=STR(OPEN_BAL)
10030 PERIOD_AMT_1$=STR(PERIOD_AMT_1),PERIOD_AMT_2$=STR(PERIOD_AMT_2),PERIOD_AMT_3$=STR(PERIOD_AMT_3),PERIOD_AMT_4$=STR(PERIOD_AMT_4),PERIOD_AMT_5$=STR(PERIOD_AMT_5),PERIOD_AMT_6$=STR(PERIOD_AMT_6)
10090 PERIOD_AMT_7$=STR(PERIOD_AMT_7),PERIOD_AMT_8$=STR(PERIOD_AMT_8),PERIOD_AMT_9$=STR(PERIOD_AMT_9),PERIOD_AMT_10$=STR(PERIOD_AMT_10),PERIOD_AMT_11$=STR(PERIOD_AMT_11),PERIOD_AMT_12$=STR(PERIOD_AMT_12),PERIOD_AMT_13$=STR(PERIOD_AMT_13)
10165 IF ITEM_CALL$="" THEN NOITEM=1,NEXT_ID=ITEM_CODE.CTL,ITEM_CODE$="" ELSE ML_ITEM_DESC$=%ITEM_DESC$,REFRESH_FLG=1
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="OPEN_BAL",_X=OPEN_BAL.CTL,OPEN_BAL=NUM(OPEN_BAL$,ERR=NON_NUMERIC),_X$="PERIOD_AMT_1",_X=PERIOD_AMT_1.CTL,PERIOD_AMT_1=NUM(PERIOD_AMT_1$,ERR=NON_NUMERIC),_X$="PERIOD_AMT_2",_X=PERIOD_AMT_2.CTL,PERIOD_AMT_2=NUM(PERIOD_AMT_2$,ERR=NON_NUMERIC),_X$="PERIOD_AMT_3",_X=PERIOD_AMT_3.CTL,PERIOD_AMT_3=NUM(PERIOD_AMT_3$,ERR=NON_NUMERIC),_X$="PERIOD_AMT_4",_X=PERIOD_AMT_4.CTL,PERIOD_AMT_4=NUM(PERIOD_AMT_4$,ERR=NON_NUMERIC),_X$="PERIOD_AMT_5",_X=PERIOD_AMT_5.CTL,PERIOD_AMT_5=NUM(PERIOD_AMT_5$,ERR=NON_NUMERIC),_X$="PERIOD_AMT_6",_X=PERIOD_AMT_6.CTL,PERIOD_AMT_6=NUM(PERIOD_AMT_6$,ERR=NON_NUMERIC),_X$="PERIOD_AMT_7",_X=PERIOD_AMT_7.CTL,PERIOD_AMT_7=NUM(PERIOD_AMT_7$,ERR=NON_NUMERIC),_X$="PERIOD_AMT_8",_X=PERIOD_AMT_8.CTL,PERIOD_AMT_8=NUM(PERIOD_AMT_8$,ERR=NON_NUMERIC)
11110 _X$="PERIOD_AMT_9",_X=PERIOD_AMT_9.CTL,PERIOD_AMT_9=NUM(PERIOD_AMT_9$,ERR=NON_NUMERIC),_X$="PERIOD_AMT_10",_X=PERIOD_AMT_10.CTL,PERIOD_AMT_10=NUM(PERIOD_AMT_10$,ERR=NON_NUMERIC),_X$="PERIOD_AMT_11",_X=PERIOD_AMT_11.CTL,PERIOD_AMT_11=NUM(PERIOD_AMT_11$,ERR=NON_NUMERIC),_X$="PERIOD_AMT_12",_X=PERIOD_AMT_12.CTL,PERIOD_AMT_12=NUM(PERIOD_AMT_12$,ERR=NON_NUMERIC),_X$="PERIOD_AMT_13",_X=PERIOD_AMT_13.CTL,PERIOD_AMT_13=NUM(PERIOD_AMT_13$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN CUST_DIV$=""
13030 IF _CLR_FLG$="R" THEN CUST_CODE$=""
13040 IF _CLR_FLG$="R" THEN ITEM_CODE$=""
13050 IF _CLR_FLG$="R" THEN LOC_CODE$=""
13060 IF _CLR_FLG$="R" THEN FY$=""
13070 IF _CLR_FLG$="R" THEN BAL_TYPE$=""
13075 CUSTOMER$="",ML_CUST_NAME$="",ITEM_CODE$="",ML_ITEM_CODE$="",ML_LOC_DESC$=""
13080 OPEN_BAL=0,PERIOD_AMT_1=0,PERIOD_AMT_2=0,PERIOD_AMT_3=0,PERIOD_AMT_4=0,PERIOD_AMT_5=0,PERIOD_AMT_6=0,PERIOD_AMT_7=0,PERIOD_AMT_8=0
13170 PERIOD_AMT_9=0,PERIOD_AMT_10=0,PERIOD_AMT_11=0,PERIOD_AMT_12=0,PERIOD_AMT_13=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUSTOMER.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=ITEM_CODE.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=LOC_CODE.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14060 IF _ENABLE_FLG=5 THEN CALL "*wingrp;Enable",KEY5.GRP$; NEXT_ID=FY.CTL ELSE CALL "*wingrp;Disable",KEY5.GRP$
14070 IF _ENABLE_FLG=6 THEN CALL "*wingrp;Enable",KEY6.GRP$; NEXT_ID=BAL_TYPE.CTL ELSE CALL "*wingrp;Disable",KEY6.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;LOCK",FIELDS.GRP$; CALL "*WINGRP;HIDE",FIELDS.GRP$; OPTIONS$="R",REST=0; GOSUB BORDERLESS; CALL "*WINGRP;LOCK",FLDS.GRP$; CALL "*WINGRP;HIDE",FLDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$; CALL "*WINGRP;DISABLE",BT.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*WINGRP;SHOW",FIELDS.GRP$; CALL "*WINGRP;SHOW",FLDS.GRP$; CALL "*WINGRP;ENABLE",BT.GRP$ ! ; CALL "*wingrp;UNLOCK",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(20,"N")
15030 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15040 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15050 IF _ORIG.ITEM_CODE$=_CUR.ITEM_CODE$ OR ITEM_CODE$=_CUR.ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CODE$=ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$
15060 IF _ORIG.LOC_CODE$=_CUR.LOC_CODE$ OR LOC_CODE$=_CUR.LOC_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_CODE$=LOC_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_CODE")+" = "+_CUR.LOC_CODE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_CODE")+" = "+_CUR.LOC_CODE$
15070 IF _ORIG.FY$=_CUR.FY$ OR FY$=_CUR.FY$ THEN GOTO *NEXT ELSE IF _ORIG.FY$=FY$ THEN _CHG2$=_CHG2$+SEP+MSG("FY")+" = "+_CUR.FY$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FY")+" = "+_CUR.FY$
15080 IF _ORIG.BAL_TYPE$=_CUR.BAL_TYPE$ OR BAL_TYPE$=_CUR.BAL_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.BAL_TYPE$=BAL_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("BAL_TYPE")+" = "+_CUR.BAL_TYPE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BAL_TYPE")+" = "+_CUR.BAL_TYPE$
15090 IF _ORIG.OPEN_BAL=_CUR.OPEN_BAL OR OPEN_BAL=_CUR.OPEN_BAL THEN GOTO *NEXT ELSE IF _ORIG.OPEN_BAL=OPEN_BAL THEN _CHG2$=_CHG2$+SEP+MSG("OPEN_BAL")+" = "+STR(_CUR.OPEN_BAL),_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OPEN_BAL")+" = "+STR(_CUR.OPEN_BAL)
15100 IF _ORIG.PERIOD_AMT_1=_CUR.PERIOD_AMT_1 OR PERIOD_AMT_1=_CUR.PERIOD_AMT_1 THEN GOTO *NEXT ELSE IF _ORIG.PERIOD_AMT_1=PERIOD_AMT_1 THEN _CHG2$=_CHG2$+SEP+MSG("PER_A_1")+" = "+STR(_CUR.PERIOD_AMT_1),_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PER_A_1")+" = "+STR(_CUR.PERIOD_AMT_1)
15110 IF _ORIG.PERIOD_AMT_2=_CUR.PERIOD_AMT_2 OR PERIOD_AMT_2=_CUR.PERIOD_AMT_2 THEN GOTO *NEXT ELSE IF _ORIG.PERIOD_AMT_2=PERIOD_AMT_2 THEN _CHG2$=_CHG2$+SEP+MSG("PER_A_2")+" = "+STR(_CUR.PERIOD_AMT_2),_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PER_A_2")+" = "+STR(_CUR.PERIOD_AMT_2)
15120 IF _ORIG.PERIOD_AMT_3=_CUR.PERIOD_AMT_3 OR PERIOD_AMT_3=_CUR.PERIOD_AMT_3 THEN GOTO *NEXT ELSE IF _ORIG.PERIOD_AMT_3=PERIOD_AMT_3 THEN _CHG2$=_CHG2$+SEP+MSG("PER_A_3")+" = "+STR(_CUR.PERIOD_AMT_3),_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PER_A_3")+" = "+STR(_CUR.PERIOD_AMT_3)
15130 IF _ORIG.PERIOD_AMT_4=_CUR.PERIOD_AMT_4 OR PERIOD_AMT_4=_CUR.PERIOD_AMT_4 THEN GOTO *NEXT ELSE IF _ORIG.PERIOD_AMT_4=PERIOD_AMT_4 THEN _CHG2$=_CHG2$+SEP+MSG("PER_A_4")+" = "+STR(_CUR.PERIOD_AMT_4),_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PER_A_4")+" = "+STR(_CUR.PERIOD_AMT_4)
15140 IF _ORIG.PERIOD_AMT_5=_CUR.PERIOD_AMT_5 OR PERIOD_AMT_5=_CUR.PERIOD_AMT_5 THEN GOTO *NEXT ELSE IF _ORIG.PERIOD_AMT_5=PERIOD_AMT_5 THEN _CHG2$=_CHG2$+SEP+MSG("PER_A_5")+" = "+STR(_CUR.PERIOD_AMT_5),_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PER_A_5")+" = "+STR(_CUR.PERIOD_AMT_5)
15150 IF _ORIG.PERIOD_AMT_6=_CUR.PERIOD_AMT_6 OR PERIOD_AMT_6=_CUR.PERIOD_AMT_6 THEN GOTO *NEXT ELSE IF _ORIG.PERIOD_AMT_6=PERIOD_AMT_6 THEN _CHG2$=_CHG2$+SEP+MSG("PER_A_6")+" = "+STR(_CUR.PERIOD_AMT_6),_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PER_A_6")+" = "+STR(_CUR.PERIOD_AMT_6)
15160 IF _ORIG.PERIOD_AMT_7=_CUR.PERIOD_AMT_7 OR PERIOD_AMT_7=_CUR.PERIOD_AMT_7 THEN GOTO *NEXT ELSE IF _ORIG.PERIOD_AMT_7=PERIOD_AMT_7 THEN _CHG2$=_CHG2$+SEP+MSG("PER_A_7")+" = "+STR(_CUR.PERIOD_AMT_7),_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PER_A_7")+" = "+STR(_CUR.PERIOD_AMT_7)
15170 IF _ORIG.PERIOD_AMT_8=_CUR.PERIOD_AMT_8 OR PERIOD_AMT_8=_CUR.PERIOD_AMT_8 THEN GOTO *NEXT ELSE IF _ORIG.PERIOD_AMT_8=PERIOD_AMT_8 THEN _CHG2$=_CHG2$+SEP+MSG("PER_A_8")+" = "+STR(_CUR.PERIOD_AMT_8),_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PER_A_8")+" = "+STR(_CUR.PERIOD_AMT_8)
15180 IF _ORIG.PERIOD_AMT_9=_CUR.PERIOD_AMT_9 OR PERIOD_AMT_9=_CUR.PERIOD_AMT_9 THEN GOTO *NEXT ELSE IF _ORIG.PERIOD_AMT_9=PERIOD_AMT_9 THEN _CHG2$=_CHG2$+SEP+MSG("PER_A_9")+" = "+STR(_CUR.PERIOD_AMT_9),_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PER_A_9")+" = "+STR(_CUR.PERIOD_AMT_9)
15190 IF _ORIG.PERIOD_AMT_10=_CUR.PERIOD_AMT_10 OR PERIOD_AMT_10=_CUR.PERIOD_AMT_10 THEN GOTO *NEXT ELSE IF _ORIG.PERIOD_AMT_10=PERIOD_AMT_10 THEN _CHG2$=_CHG2$+SEP+MSG("PER_A_10")+" = "+STR(_CUR.PERIOD_AMT_10),_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PER_A_10")+" = "+STR(_CUR.PERIOD_AMT_10)
15200 IF _ORIG.PERIOD_AMT_11=_CUR.PERIOD_AMT_11 OR PERIOD_AMT_11=_CUR.PERIOD_AMT_11 THEN GOTO *NEXT ELSE IF _ORIG.PERIOD_AMT_11=PERIOD_AMT_11 THEN _CHG2$=_CHG2$+SEP+MSG("PER_A_11")+" = "+STR(_CUR.PERIOD_AMT_11),_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PER_A_11")+" = "+STR(_CUR.PERIOD_AMT_11)
15210 IF _ORIG.PERIOD_AMT_12=_CUR.PERIOD_AMT_12 OR PERIOD_AMT_12=_CUR.PERIOD_AMT_12 THEN GOTO *NEXT ELSE IF _ORIG.PERIOD_AMT_12=PERIOD_AMT_12 THEN _CHG2$=_CHG2$+SEP+MSG("PER_A_12")+" = "+STR(_CUR.PERIOD_AMT_12),_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PER_A_12")+" = "+STR(_CUR.PERIOD_AMT_12)
15220 IF _ORIG.PERIOD_AMT_13=_CUR.PERIOD_AMT_13 OR PERIOD_AMT_13=_CUR.PERIOD_AMT_13 THEN GOTO *NEXT ELSE IF _ORIG.PERIOD_AMT_13=PERIOD_AMT_13 THEN _CHG2$=_CHG2$+SEP+MSG("PER_A_13")+" = "+STR(_CUR.PERIOD_AMT_13),_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PER_A_13")+" = "+STR(_CUR.PERIOD_AMT_13)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16030 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN ITEM_CODE$=_CUR.ITEM_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN LOC_CODE$=_CUR.LOC_CODE$
16060 IF _CHG_VAR$(5,1)="Y" THEN FY$=_CUR.FY$
16070 IF _CHG_VAR$(6,1)="Y" THEN BAL_TYPE$=_CUR.BAL_TYPE$
16080 IF _CHG_VAR$(7,1)="Y" THEN OPEN_BAL=_CUR.OPEN_BAL
16090 IF _CHG_VAR$(8,1)="Y" THEN PERIOD_AMT_1=_CUR.PERIOD_AMT_1
16100 IF _CHG_VAR$(9,1)="Y" THEN PERIOD_AMT_2=_CUR.PERIOD_AMT_2
16110 IF _CHG_VAR$(10,1)="Y" THEN PERIOD_AMT_3=_CUR.PERIOD_AMT_3
16120 IF _CHG_VAR$(11,1)="Y" THEN PERIOD_AMT_4=_CUR.PERIOD_AMT_4
16130 IF _CHG_VAR$(12,1)="Y" THEN PERIOD_AMT_5=_CUR.PERIOD_AMT_5
16140 IF _CHG_VAR$(13,1)="Y" THEN PERIOD_AMT_6=_CUR.PERIOD_AMT_6
16150 IF _CHG_VAR$(14,1)="Y" THEN PERIOD_AMT_7=_CUR.PERIOD_AMT_7
16160 IF _CHG_VAR$(15,1)="Y" THEN PERIOD_AMT_8=_CUR.PERIOD_AMT_8
16170 IF _CHG_VAR$(16,1)="Y" THEN PERIOD_AMT_9=_CUR.PERIOD_AMT_9
16180 IF _CHG_VAR$(17,1)="Y" THEN PERIOD_AMT_10=_CUR.PERIOD_AMT_10
16190 IF _CHG_VAR$(18,1)="Y" THEN PERIOD_AMT_11=_CUR.PERIOD_AMT_11
16200 IF _CHG_VAR$(19,1)="Y" THEN PERIOD_AMT_12=_CUR.PERIOD_AMT_12
16210 IF _CHG_VAR$(20,1)="Y" THEN PERIOD_AMT_13=_CUR.PERIOD_AMT_13
16990 RETURN 
20000 PROCESS_AR1:IF _AR1=0 THEN _AR1=HFN; OPEN (_AR1)"AR1"+%C$
20001 DIM AR1$(200)
20002 IF ID$="CUSTOMER" AND CUSTOMER$<>"" THEN CUSTOMER$=PAD(CUSTOMER$,10,"0"),CUST_DIV$=CUSTOMER$(1,%AR_DIV_LEN),CUST_CODE$=CUSTOMER$(%AR_DIV_LEN+1) ELSE DIM CUST_DIV$(%AR_DIV_LEN),CUST_CODE$(10-%AR_DIV_LEN)
20005 IF STP(CUST_DIV$+CUST_CODE$)="" THEN ML_CUST_NAME$=""; GOTO 20020
20010 DIM AR1$(200); NOCUST=0; FIND (_AR1,KEY=CUST_DIV$+CUST_CODE$,DOM=*NEXT)AR1$; GOTO 20020
20015 IF ID$="CUSTOMER" THEN NEXT_ID=CUSTOMER.CTL; NOCUST=1,CUSTOMER$=""
20020 ML_CUST_NAME$=AR1$(11,35),CUSTOMER$=CUST_DIV$+CUST_CODE$,REFRESH_FLG=1
20040 RETURN 
20100 PROCESS_FM0:IF _FM0=0 THEN _FM0=HFN; OPEN (_FM0)"FM0"+%C$
20102 IF LOC_CODE$="" THEN LOC_CODE$="    "; GOTO *RETURN ELSE IF LOC_CODE$<>"" THEN LOC_CODE$=PAD(LOC_CODE$,4,0,"0")
20105 TF_TYPE$="D" ! Should always be D for Inventory stats !IF STP(CUST_DIV$+CUST_CODE$)="" THEN TF_TYPE$="D" ELSE TF_TYPE$="C"!SSP#253290
20110 DIM FM0$(618); NOFM0=0; FIND (_FM0,KEY=TF_TYPE$+DIM(10)+LOC_CODE$,DOM=*NEXT)FM0$; GOTO 20120 ! SSP#253290
20115 NOFM0=1,NEXT_ID=LOC_CODE.CTL,LOC_CODE$="",REFRESH_FLG=1
20120 ML_LOC_DESC$=FM0$(16,35),REFRESH_FLG=1
20140 RETURN 
20150 PROCESS_IC0:IF _IC0=0 THEN _IC0=HFN; OPEN (_IC0)"IC0"+%C$
20155 ITEM_CODE$=PAD(ITEM_CODE$,10," ")
20158 IF STP(ITEM_CODE$)="" THEN NEXT_ID=CUSTOMER.CTL; GOTO *RETURN
20159 IF STP(CUST_DIV$)+STP(CUST_CODE$)="" THEN DIM CUST_DIV$(%AR_DIV_LEN),CUST_CODE$(10-%AR_DIV_LEN); CUSTOMER$=CUST_DIV$+CUST_CODE$
20160 DIM IC0$(448),IC0(15); NOITEM=0; FIND (_IC0,KEY=CUST_DIV$+CUST_CODE$+ITEM_CODE$,DOM=*NEXT,ERR=*NEXT)IC0$,IC0{ALL}; GOTO 20170
20165 IF ITEM_CALL$="" THEN NOITEM=1,NEXT_ID=ITEM_CODE.CTL,ITEM_CODE$=""
20166 IF MID(ID$,1,2)="BU" THEN NEXT_ID=-1
20170 ML_ITEM_DESC$=IC0$(21,40),REFRESH_FLG=1
20199 RETURN 
20500 LOAD_DATES:
20505 IF LEN(FY$)>4 THEN FY$=CR_YEAR$
20510 FIND (_ZZP,KEY=%C$+"G/LYE"+FY$)YE_REC$
20520 FOR II=1 TO NUM(YE_REC$(13,2))
20530 EXECUTE "ML_DATE"+STR(II)+"$="+""""+STR(II:"00")+"-  "+""""+"+FND$(YE_REC$(15+II*6,6))"
20540 NEXT II
20550 FOR II=NUM(YE_REC$(13,2))+1 TO 13
20552 EXECUTE "MULTI_LINE HIDE ML_DATE"+STR(II)+".CTL;MULTI_LINE HIDE PERIOD_AMT_"+STR(II)+".CTL;MULTI_LINE HIDE YTD_AMT"+STR(II)+".CTL"
20560 NEXT II
20599 RETURN 
20600 PROCESS_UM:
20610 DIM UM$(200); FIND (_ZZP,KEY="U/M"+IC0$(124,4),DOM=*NEXT)UM$
20620 IF UM$(20,1)="Y" THEN ML_UM$=IC0$(124,4) ELSE ML_UM$=STP(IC0$(124,4))+STP(STR(IC0(15):"###,###"))
20630 CALL "*WINGRP;SHOW",UM.GRP$
20640 RETURN 
21000 YTD_BAL: TOTAL_YTD=0
21010 FOR AA=1 TO 13
21020 EXECUTE "TOTAL_YTD=TOTAL_YTD+PERIOD_AMT_"+STR(AA)+",YTD_AMT"+STR(AA)+"$=STR(TOTAL_YTD)"
21030 NEXT AA
21040 RETURN 
21100 GEN_YTD:
21110 CR_YEAR=NUM(OPEN_BAL$); REFRESH_FLG=1
21120 FOR AA=1 TO 13
21130 EXECUTE "cr_year=cr_year+NUM(PERIOD_AMT_"+STR(AA)+"$),ytd_AMT"+STR(AA)+"$=STR(cr_year)"
21140 NEXT AA
21150 RETURN 
21500 SEL_QRY:
21510 %IC9$=%CUSTOMER$+%ITEM_CODE$
21520 PROCESS "QRY_IC9","../ICG/IC.EN",VAL$
21530 IF STP(VAL$)="" THEN NEXT_ID=LOC_CODE.CTL; EXIT 
21540 _KEY$=VAL$,LOC_CODE$=VAL$(21,4),FY$=VAL$(25,4),BAL_TYPE$=VAL$(29,1); READ (_FIL_NO,KEY=_KEY$,DOM=*NEXT); GOSUB PROCESS_READ
21550 RETURN 
23000 ! 23000 - Load Fiscal year
23010 LOAD_FISCAL_YEAR:
23020 ZZPARM=HFN
23030 OPEN (ZZPARM)"ZZPARM"; IF X3$="" THEN READ (ZZPARM,KEY=FID(0)+"      ")X3$,*,X4$
23035 READ (ZZPARM,KEY=%C$+"G/L",DOM=*NEXT)GL_REC$; CR_YEAR$=GL_REC$(34,4),CR_PD$=GL_REC$(38,2)
23040 KE$=%C$+"G/LYE",FY$="",ACCTPD$=""
23050 READ (ZZPARM,KEY=KE$,DOM=*NEXT)
23060 K$=KEY(ZZPARM,END=23100); READ (ZZPARM)GL_REC$
23070 IF LEN(K$)<8 OR KE$<>K$(1,8) THEN GOTO END_LOAD_FISCAL_YEAR
23075 IF ONLY_OPEN$<>"" AND POS(GL_REC$(99,1)="CR")<>0 THEN GOTO 23060
23080 FY$=FY$+K$(9)+"/"
23090 GOTO 23060
23100 END_LOAD_FISCAL_YEAR:
23105 DROP_BOX LOAD FY.CTL,FY$
23110 DROP_BOX WRITE FY.CTL,CR_YEAR$
23112 FOR ACCT=1 TO 12; ACCTPD$=ACCTPD$+STR(ACCT:"00")+"/"; NEXT ACCT
23114 IF ICGMAT=1 THEN ACCTPD$="All/"+ACCTPD$
23115 DROP_BOX LOAD ACCTPD.CTL,ACCTPD$; DROP_BOX WRITE ACCTPD.CTL,CR_PD$
23120 FIND (ZZPARM,KEY=%C$+"G/LYE"+CR_YEAR$)REC_DAT$; REC_DAT$=REC_DAT$(21)
23122 DIM CUR_DATE$[12]
23130 FOR XX=1 TO 12; CUR_DATE$[XX]=FND$(REC_DAT$(XX*6-5,6)); NEXT XX
23200 CLOSE (ZZPARM)
23205 %CR_YEAR$=CR_YEAR$
23210 RETURN 
25500 ! 25500 - Load Graphic
25510 LOAD_GRAP:
25515 DIM OPP$[4]; OPP$[1]="DLS_SALES",OPP$[2]="UNIT_SALES",OPP$[3]="GROSS_P",OPP$[4]="KIT_UNIT"; ME$=MSG(OPP$[POS(BAL_TYPE$="SUPK")])
25520 VAR$=MSG("CURR_PER")+"=",MTHS$=MSG("MTHS"),VAL1$="",VAR$=""
25525 IF YE_REC$(13,2)="13" THEN MTHS$+="Dec"
25530 FOR XX=1 TO NUM(YE_REC$(13,2)); DTE$=EVS("ML_DATE"+STR(XX)+"$"),MM=NUM(DTE$(1,2)),DTE$=MTHS$(NUM(DTE$(1,2))*3-2,1),VAR2$=VAR2$+DTE$+"/",VAR$=VAR$+STR(EVN("PERIOD_AMT_"+STR(XX)))+","; IF EVN("PERIOD_AMT_"+STR(XX))<>0 THEN PRECISION 3; VAL1$=VAL1$+MTHS$(MM*3-2,3)+" "+STR((EVN("PERIOD_AMT_"+STR(XX))/TOTAL_YTD*100):"###.0%")+"="+STR(EVN("PERIOD_AMT_"+STR(XX)))+"/"; PRECISION 2
25535 NEXT XX
25540 VAR$=VAR$(1,LEN(VAR$)-1)+"/"
25550 PROCESS "ICGMDA.1","../ICG/IC.EN",VAR$,ITEM_CODE$+" - "+ML_ITEM_DESC$,VAL1$,VAR2$,FY$+"-"+ME$
25560 RETURN 
25600 LOAD_GRAPHIC:
25610 VAR$=ARG_1$,CHART_1.CTL'TITLE1$=ARG_2$,VAL1$=ARG_3$,VAR2$=ARG_4$,XAXISTITLE$=ARG_5$,XAXISLOCATION$="BACK"
25615 IF CB_3D$="0" THEN CHART_1.CTL'TITLE2$=ARG_2$,CHART_1.CTL'TITLE1$="" ELSE CHART_1.CTL'TITLE1$=ARG_2$,CHART_1.CTL'TITLE2$=""
25616 GOSUB DEFAULTS
25620 PERFORM "GLGMDA;SELECT_GRAF"
25640 AA'XAXISTITLE$=XAXISTITLE$,AA'XAXISLOCATION$="BACK",XAXISLOCATION$="BACK"
25700 REFRESH_FLG=1
25710 RETURN 
26000 PROCESS_QRY:
26010 PROCESS "QRY_IC9","../ICG/IC.EN",VAL$
26020 IF VAL$="" THEN NEXT_ID=CUSTOMER.CTL; GOTO *RETURN
26030 CUSTOME$=VAL$(1,10),ITEM_CODE$=VAL$(11,10),LOC_CODE$=VAL$(21,4),FY$=VAL$(25,4),BAL_TYPE$=VAL$(29,1),_KEY$=VAL$
26040 GOSUB PROCESS_READ; NEXT_ID=BT_WRITE.CTL; GOTO DISP_REC
26045 NEXT_ID=BT_WRITE.CTL
26050 RETURN 
26500 ! 26500,10
26510 CHECK_SECURITY:
26520 FIND (_ZZP,KEY=FID(0)+"      ")X3$,*,X4$
26530 DIM SEC$(256); FIND (_ZZP,KEY="osec"+X3$(40,3),DOM=*NEXT)SEC$
26540 FIND (_ZZP,KEY=X3$(9,3)+"I/C",DOM=NO_REC)FF0$
26550 Q$=FF0$(1,3); IF FF0$(10,1)="N" THEN Q$=FF0$(7,3)
26560 READ (_ZZP,KEY="STATI/C")F9$,F0
26570 FOR XX=0 TO 9; F1$=F1$+F9$(49+XX*17,5),F2$=F2$+F9$(54+XX*17,12); NEXT XX
26580 RETURN 
26590 NO_REC: CMD_STR$="E"; RETURN 
27000 SET_DEFAULTS:
27010 WRITE (_ZZPARM,KEY="*icgmda*"+%X3_OP_ID$)CB_3D$,BACKCOLOR$,COLORS$,GRAF$,LB_GRAP$,FONT$ ! SSP# 187014
27020 DEFAULTS: _ZZPARM=FFN("ZZPARM"); IF _ZZPARM<0 THEN _ZZPARM=HFN; OPEN (_ZZPARM)"ZZPARM" ! SSP# 187014
27030 READ (_ZZPARM,KEY="*icgmda*"+%X3_OP_ID$,DOM=*NEXT)CB_3D$,BACKCOLOR$,COLORS$,GRAF$,LB_GRAP$,FONT$; GOTO *RETURN ! SSP# 187014
27040 CB_3D$="1",BACKCOLOR$="Light White",COLORS$="Light Yellow",GRAF$="AREA",LB_GRAP$="1",FONT$="Georgia" ! SSP# 187014
27050 GOTO SET_DEFAULTS ! SSP# 187014
27060 RETURN 
27500 SET_BUTTON: BT$="SUPK"
27510 FOR AA=1 TO LEN(BT$)
27515 AAA=EVN("BT_TYPE_"+BT$(AA,1)+".CTL")
27520 AAA'TEXTCOLOUR$="DEFAULT",AAA'HEIGHT=25,BBB$=AAA'TEXT$,XXX=POS("}"=BBB$); IF XXX<>0 THEN BBB$=BBB$(XXX+1),AAA'TEXT$=BBB$
27530 NEXT AA
27535 AAA=EVN("BT_TYPE_"+BAL_TYPE$+".CTL")
27540 AAA'TEXTCOLOUR$="Light Blue",AAA'HEIGHT=35,BBB$=AAA'TEXT$,AAA'TEXT$="{!Arrow_Down}"+BBB$
27550 RETURN 
28000 HARD_COPY:
28020 PRINT 'DIALOGUE'(20,15,60,6,"Enter Comment"),'CS'
28022 BUTTON 101,@(45,3,10,1.75)="&Next"
28025 PRINT 'TEXT'(55,60,1000,100,"Comment/Title:"); MULTI_LINE 100,@(15,1,40,1); SET_FOCUS 100; OBTAIN *; MULTI_LINE READ 100,TF_COMMENT$ ! INPUT EDIT (0,ERR=28025)@(0,1),"Comment/Title : ",TF_COMMENT$
28030 PRINT 'POP',
28035 IF CTL=4 THEN GOTO *RETURN
28036 PRINT 'CURSOR'(6),
28040 CH_PR=HFN; OPEN (CH_PR,ERR=END_HARD)"*WINDEV*" ! ; PRINT (CH_PR)'SP','FONT'("Courier New",-12) ! CH_PR=0; CALL "*pr.opn",CH_PR,0
28045 IF CH_PR=0 THEN GOTO *RETURN
28050 TF_NAME$=STP(X3$(86,40)),TIL$=MSG("ICGMDA"); DIM BAL_T$[4]; BAL_T$[1]="DLS_SALES",BAL_T$[2]="UNIT_SALES",BAL_T$[3]="GROSS_P",BAL_T$[4]="KIT_UNIT",OP=POS(BAL_TYPE$="SUPK"),BAL_T$=BAL_T$[OP],BAL_T$=MSG(BAL_T$)
28055 IF STP(TF_COMMENT$)<>"" THEN PRINT (CH_PR)@(INT((80-LEN(TF_COMMENT$))/2)),TF_COMMENT$,'LF'
28060 PRINT (CH_PR)"  Program: ICGMDA",@(INT((80-LEN(TF_NAME$))/2)),TF_NAME$
28070 PRINT (CH_PR)"     Date: ",DTE(0:"%Ml %Dz, %Yl"),@(INT((80-LEN(TIL$))/2)),TIL$,@(66),"Time: ",DTE(0:"%hz:%mz %p")
28080 PRINT (CH_PR)PAD(RAY$,80,"-")
28090 IT$=MSG("CUST_CODE")+":"; PRINT (CH_PR)@(22-LEN(IT$)),IT$," ",CUSTOMER$,@(40),ML_CUST_NAME$
28100 CU$=MSG("ITEM_CODE")+":"; PRINT (CH_PR)@(22-LEN(CU$)),CU$," ",ITEM_CODE$,@(40),ML_ITEM_DESC$
28110 LO$=MSG("LOC_CODE")+":"; PRINT (CH_PR)@(22-LEN(LO$)),LO$," ",LOC_CODE$,@(40),ML_LOC_DESC$
28120 SFY$=MSG("FY")+":"; PRINT (CH_PR)@(22-LEN(SFY$)),SFY$," ",FY$,@(40),MSG("BAL_TYPE")+": ",BAL_T$
28140 PRINT (CH_PR)PAD("",80,"-")
28145 BAL_F$=MSG("BAL_FORW")+":"; PRINT (CH_PR)@(55-LEN(BAL_F$)),BAL_F$," ",NUM(OPEN_BAL$):"#,###,###,###.00CR"
28150 PRINT (CH_PR)@(3),MSG("PERIOD_E"),@(29),MSG("CURR_PER"),@(60),MSG("YTD")
28160 FOR A=1 TO 12
28170 EXECUTE "PRINT (CH_PR)ML_DATE"+STR(A)+"$,@(29),PERIOD_AMT_"+STR(A)+":"+QUO+"###,###,###.00-"+QUO+",@(58),NUM(YTD_AMT"+STR(A)+"$):"+QUO+"###,###,###.00-"+QUO
28180 NEXT A
28185 PRINT (CH_PR)PAD(RAY$,80,"=")
28190 PRINT (CH_PR)'FF'
28200 CLOSE (CH_PR)
28210 END_HARD:
28220 PRINT 'CURSOR'(0)
28230 RETURN 
31550 RETURN 
33000 BORDERLESS:
33002 IF MID(YE_REC$,13,2)="12" THEN MULTI_LINE HIDE ML_DATE13.CTL; MULTI_LINE HIDE PERIOD_AMT_13.CTL; MULTI_LINE HIDE YTD_AMT13.CTL
33005 IF REST1=1 AND REST2=REST THEN GOTO *RETURN
33060 ! CALL "BORDERLESS",0,OPTIONS$,REST,FIELDS1.GRP$  !SSP#242780
33070 REST1=1,REST2=REST
33075 IF MID(YE_REC$,13,2)="12" THEN MULTI_LINE HIDE ML_DATE13.CTL; MULTI_LINE HIDE PERIOD_AMT_13.CTL; MULTI_LINE HIDE YTD_AMT13.CTL
33080 RETURN 
34000 EXPORT:
34005 IF DEC(MID(MSE,22,1))>3 THEN WINDX=1,WDX$="[wdx]" ELSE WINDX=0,WDX$=""
34010 ON NUM(EXPORT$) GOSUB *NEXT,EXCEL,WORD
34020 CALL "*wingrp;hide",EXPORT.GRP$
34030 NEXT_ID=BT_EXPORT.CTL
34040 CLOSE (EXCEL,ERR=*NEXT)
34050 RETURN 
34100 EXCEL:
34110 R=0
34115 CALL "[WDX]*CMDWORD;GET_EXCEL",ERR=*NEXT,OB_EXCEL,TF_NAME$; IF TF_NAME$<>"" THEN GOTO 34140
34120 SYSTEM_HELP "excel.exe"; GOTO 34140
34130 IF WINDX THEN EXECUTE "[wdx]invoke "+QUO+"c:\program Files\Microsoft Office\Office\excel.exe"+QUO ELSE INVOKE "c:\program Files\Microsoft Office\Office\excel.exe"
34140 WAIT 2
34150 DATES$=""; FOR AA=1 TO 12; TMP$=EVS("ml_date"+STR(AA)+"$(6)"); IF %X3$(48,1)="1" THEN YY=NUM(TMP$(7)),MM=NUM(TMP$(1,2)),DD=NUM(TMP$(4,2)) ELSE IF %X3$(48,1)="2" THEN YY=NUM(TMP$(7)),MM=NUM(TMP$(4,2)),DD=NUM(TMP$(1,2)) ELSE YY=NUM(TMP$(1,4)),MM=NUM(TMP$(6,2)),DD=NUM(TMP$(9))
34152 TMP=JUL(YY,MM,DD),DATES$=DATES$+DTE(TMP:"%Ms-%Yl")+$09$; NEXT AA
34155 TF_VALUE$=""; FOR AA=1 TO 12; TF_VALUE$=TF_VALUE$+STR(EVN("PERIOD_AMT_"+STR(AA)))+$09$; NEXT AA
34160 EXCEL=HFN; IF TF_NAME$="" THEN OPEN (EXCEL)"[dde]excel;" ELSE OPEN (EXCEL)"[DDE]Excel;"+TF_NAME$
34170 R=R+1; IF R>2 THEN GOTO 34220
34180 K$="R"+STR(R)+"C1:R"+STR(R)+"C13"
34200 IF R=2 THEN WRITE RECORD (EXCEL,KEY=K$)TF_VALUE$ ELSE WRITE RECORD (EXCEL,KEY=K$)DATES$
34210 GOTO 34170
34220 X$="R"+STR(R-1)
34225 DIM GRA$[8],VA[8]; GRA$[1]="area",GRA$[2]="bar",GRA$[3]="column",GRA$[4]="line",GRA$[5]="pie",GRA$[6]="line",GRA$[7]="scatter",GRA$[8]="stack"
34230 WRITE RECORD (EXCEL)"[SELECT(""R2C1:"+X$+"C12"","""+X$+"C12"")]"
34235 WRITE RECORD (EXCEL,ERR=*NEXT)"[Zoom(95)]"
34240 WRITE RECORD (EXCEL)"[NEW(2,1)]"
34245 WRITE RECORD (EXCEL,ERR=*NEXT)"[Zoom(50)]"; GOSUB DEFAULTS
34247 IF CB_3D$="1" THEN D3$="3d." ELSE D3$=""
34248 GR$=GRA$[NUM(LB_GRAP$)]; IF GR$="pie" THEN VA$="6" ELSE VA$="5"
34250 WRITE RECORD (EXCEL,ERR=*NEXT)"[gallery."+D3$+GR$+"("+VA$+")]"
34260 WRITE RECORD (EXCEL,ERR=*NEXT)"[Zoom(75)]"
34262 WRITE RECORD (EXCEL,ERR=*NEXT)"[App.Title("+QUO+"nada"+QUO+")]"
34270 DIM OPP$[4]; OPP$[1]="DLS_SALES",OPP$[2]="UNIT_SALES",OPP$[3]="GROSS_P",OPP$[4]="KIT_UNIT"; ME$=MSG(OPP$[POS(BAL_TYPE$="SUPK")])
34280 WRITE RECORD (EXCEL)ME$+" - "+ITEM_CODE$+" "+STP(ML_ITEM_DESC$)
34300 RETURN 
35000 WORD:
56000 ! "187014-This problem was in release also.  When clicking on the     
56001 ! "       Exit button
56003 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56004 REM "242780-Inventory Statistics screen loads very slowly.  Sometimes   
56005 REM "253290-GUI - looking at statistical data under a custom item.      
