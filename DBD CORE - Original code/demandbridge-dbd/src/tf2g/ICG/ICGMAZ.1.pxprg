0010 ! ICGMAZ.1 - Item Pricing Constant Setup
0020 ! Copyright 2003 TopForm Software, Inc.; Norcross, Georgia
0030 ! Licensed Software - All Rights Reserved.
0031 ! By: JIR,
0035 REM "5.7 - 08/29/16 - 8.819166 - tma - SSP# 286735
0037 REM "286735-Get program exception in order entry (014, FMGODB, 23160)   
0040 REM "Copyright 2016 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0111 ZZP=FFN("ZZPARM"); IF ZZP<=0 THEN OPEN (ZZP)"ZZPARM"
0115 FIND (ZZP,KEY=FID(0)+"      ")X3$,*,X4$; DIM SEC$(256); FIND (ZZP,KEY="osec"+X3$(40,3),DOM=*NEXT)SEC$
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0155 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=*NEXT)"IC0"+%C$
0156 AP4=HFN; OPEN (AP4)"AP4"+%C$; VENDOR$=VEND_DIV$+VEND_CODE$; GOSUB SEL_VENDOR
0157 AR1=HFN; OPEN (AR1)"AR1"+%C$
0160 IF ARG_1$<>"" THEN _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC; VENDOR$=VEND_DIV$+VEND_CODE$,CUSTOMER$=CUST_DIV$+CUST_CODE$; GOSUB SEL_VENDOR; GOSUB SEL_CUSTOMER
0174 FM0=HFN; OPEN (FM0)"FM0"+%C$; GOSUB SEL_PLANT_CODE
0176 FMP=HFN; OPEN (FMP)"FMP"+%C$; GOSUB SEL_ITEM_PRICE; GOSUB CREATE_BREAK
0180 IF ARG_1$<>"" THEN _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC; VENDOR$=VEND_DIV$+VEND_CODE$; GOSUB SEL_VENDOR
0181 BB_SELL_UM$=SELL_UM$,BB_SELL_QTY_PER$=SELL_QTY_PER$; GOSUB 16020; NEXT_ID=-1
0182 FOR AA=1 TO 12
0185 VAL$=EVS("QTY_BREAK_"+STR(AA)+"$"); IF NUM(VAL$)=0 THEN BREAK
0186 IF SUM$(20,1)<>"Y" THEN VAL$=STR(NUM(VAL$)/NUM(SELL_QTY_PER$),ERR=*NEXT) ELSE IF P1<>0 THEN VAL$=STR(NUM(VAL$)/P1)
0188 EXECUTE "QTY_BREAK_"+STR(AA)+"$=VAL$"
0189 NEXT AA; GOSUB CREATE_BREAK
0199 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=3
0430 DIM _KEYS$[1:3]; _KEYS$[1]="CUST_DIV$",_KEYS$[2]="CUST_CODE$",_KEYS$[3]="ITEM_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0562 VENDOR$=CUST_DIV$+CUST_CODE$; GOSUB SEL_VENDOR
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0922 CLOSE (AP4,ERR=*NEXT); AP4=0
0923 IF FM0>32000 THEN CLOSE (FM0,ERR=*NEXT); FM0=0 ! SSP#286735  
0925 IF FMP>32000 THEN CLOSE (FMP,ERR=*NEXT); FMP=0
0927 CLOSE (_FIL_NO,ERR=*NEXT); _FIL_NO=0
0928 IF AR1>32000 THEN CLOSE (AR1,ERR=*NEXT); AR1=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0965 ICGMAZ.1=1,B_SELL_QTY_PER=NUM(SELL_QTY_PER$),B_SELL_UM$=SELL_UM$
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1415 IF STP(VENDOR$)="" THEN GOTO 1480
1418 GOSUB FINISH_BREAK
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1435 CALL "ZZWLKU;PARSE_VEND",VENDOR$,VEND_DIV$,VEND_CODE$
1440 WRITE (_FIL_NO,KEY=_KEY$)
1445 IF STP(CUST_DIV$+CUST_CODE$)<>"" THEN CALL "FMGUTI",%X3$,CUST_DIV$+CUST_CODE$+ITEM_CODE$,"I"
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY,CMD_STR$="E"
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3035 IF STAT_FLAG$="I" THEN ML_STAT_FLAG.CTL'VALUE$="Inactive" ELSE ML_STAT_FLAG.CTL'VALUE$="Active"
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3070 RETURN 
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUST_DIV.CTL,_FIRST_FIELD=ITEM_DESC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR"),_MSG_DIRECTORY$=MSG("DIRECTORY"),_MSG_END_OF_FIL$=MSG("END_OF_FIL"),_MSG_FILOPNERR1$=MSG("FILOPNERR1"),_MSG_JUST_CHECK$=MSG("JUST_CHECK"),_MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT"),_MSG_NON_NUMER$=MSG("NON_NUMER"),_MSG_NOT_FOUND$=MSG("NOT_FOUND"),_MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG"),_MSG_PRECEDING$=MSG("PRECEDING"),_MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS"),_MSG_REC_ALTERD$=MSG("REC_ALTERD"),_MSG_REC_CR_NEW$=MSG("REC_CR_NEW"),_MSG_REC_LOCKED$=MSG("REC_LOCKED"),_MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND"),_MSG_REC_NO_1ST$=MSG("REC_NO_1ST"),_MSG_REC_NO_LST$=MSG("REC_NO_LST"),_MSG_REC_REMOVE$=MSG("REC_REMOVE"),_MSG_REC_UPDADD$=MSG("REC_UPDADD"),_MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1),_MSG_REQ_FIELDS$=MSG("REQ_FIELDS"),_MSG_START_FILE$=MSG("START_FILE"),_MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1"),_MSG_UPD_OTHER2$=MSG("UPD_OTHER2"),_MSG_UPD_SAME$=MSG("UPD_SAME"),_MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE"),_MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 BASE_PRICE$=STR(BASE_PRICE),QTY_BREAK_1$=STR(QTY_BREAK_1),QTY_PRICE_1$=STR(QTY_PRICE_1),QTY_BREAK_2$=STR(QTY_BREAK_2),QTY_PRICE_2$=STR(QTY_PRICE_2),QTY_BREAK_3$=STR(QTY_BREAK_3),QTY_PRICE_3$=STR(QTY_PRICE_3),QTY_BREAK_4$=STR(QTY_BREAK_4),QTY_PRICE_4$=STR(QTY_PRICE_4),QTY_BREAK_5$=STR(QTY_BREAK_5),QTY_PRICE_5$=STR(QTY_PRICE_5),QTY_BREAK_6$=STR(QTY_BREAK_6),QTY_PRICE_6$=STR(QTY_PRICE_6),AVG_SALE_PR_FOR_FMGT$=STR(AVG_SALE_PR_FOR_FMGT),SELL_QTY_PER$=STR(SELL_QTY_PER)
10170 INVENTORY_QTY_PER$=STR(INVENTORY_QTY_PER),CTN_WT$=STR(CTN_WT),LAST_PURCH_COST$=STR(LAST_PURCH_COST),AVG_COST$=STR(AVG_COST),CTN_PACK$=STR(CTN_PACK),SPER_UNIT_COST$=STR(SPER_UNIT_COST),QTY_BREAK_7$=STR(QTY_BREAK_7),QTY_PRICE_7$=STR(QTY_PRICE_7),QTY_BREAK_8$=STR(QTY_BREAK_8),QTY_PRICE_8$=STR(QTY_PRICE_8),QTY_BREAK_9$=STR(QTY_BREAK_9),QTY_PRICE_9$=STR(QTY_PRICE_9),QTY_BREAK_10$=STR(QTY_BREAK_10),QTY_PRICE_10$=STR(QTY_PRICE_10),QTY_BREAK_11$=STR(QTY_BREAK_11),QTY_PRICE_11$=STR(QTY_PRICE_11)
10330 QTY_BREAK_12$=STR(QTY_BREAK_12),QTY_PRICE_12$=STR(QTY_PRICE_12),IC0_UNUSED_2$=STR(IC0_UNUSED_2),IC0_UNUSED_3$=STR(IC0_UNUSED_3),IC0_UNUSED_4$=STR(IC0_UNUSED_4),IC0_UNUSED_5$=STR(IC0_UNUSED_5),IC0_UNUSED_6$=STR(IC0_UNUSED_6),IC0_UNUSED_7$=STR(IC0_UNUSED_7),IC0_UNUSED_8$=STR(IC0_UNUSED_8),IC0_UNUSED_9$=STR(IC0_UNUSED_9)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="BASE_PRICE",_X=BASE_PRICE.CTL,BASE_PRICE=NUM(BASE_PRICE$,ERR=NON_NUMERIC),_X$="QTY_BREAK_1",_X=QTY_BREAK_1.CTL,QTY_BREAK_1=NUM(QTY_BREAK_1$,ERR=NON_NUMERIC),_X$="QTY_PRICE_1",_X=QTY_PRICE_1.CTL,QTY_PRICE_1=NUM(QTY_PRICE_1$,ERR=NON_NUMERIC),_X$="QTY_BREAK_2",_X=QTY_BREAK_2.CTL,QTY_BREAK_2=NUM(QTY_BREAK_2$,ERR=NON_NUMERIC)
11060 _X$="QTY_PRICE_2",_X=QTY_PRICE_2.CTL,QTY_PRICE_2=NUM(QTY_PRICE_2$,ERR=NON_NUMERIC),_X$="QTY_BREAK_3",_X=QTY_BREAK_3.CTL,QTY_BREAK_3=NUM(QTY_BREAK_3$,ERR=NON_NUMERIC),_X$="QTY_PRICE_3",_X=QTY_PRICE_3.CTL,QTY_PRICE_3=NUM(QTY_PRICE_3$,ERR=NON_NUMERIC),_X$="QTY_BREAK_4",_X=QTY_BREAK_4.CTL,QTY_BREAK_4=NUM(QTY_BREAK_4$,ERR=NON_NUMERIC)
11100 _X$="QTY_PRICE_4",_X=QTY_PRICE_4.CTL,QTY_PRICE_4=NUM(QTY_PRICE_4$,ERR=NON_NUMERIC),_X$="QTY_BREAK_5",_X=QTY_BREAK_5.CTL,QTY_BREAK_5=NUM(QTY_BREAK_5$,ERR=NON_NUMERIC),_X$="QTY_PRICE_5",_X=QTY_PRICE_5.CTL,QTY_PRICE_5=NUM(QTY_PRICE_5$,ERR=NON_NUMERIC),_X$="QTY_BREAK_6",_X=QTY_BREAK_6.CTL,QTY_BREAK_6=NUM(QTY_BREAK_6$,ERR=NON_NUMERIC)
11140 _X$="QTY_PRICE_6",_X=QTY_PRICE_6.CTL,QTY_PRICE_6=NUM(QTY_PRICE_6$,ERR=NON_NUMERIC),_X$="AVG_SALE_PR_FOR_FMGT",_X=AVG_SALE_PR_FOR_FMGT.CTL,AVG_SALE_PR_FOR_FMGT=NUM(AVG_SALE_PR_FOR_FMGT$,ERR=NON_NUMERIC),_X$="SELL_QTY_PER",_X=SELL_QTY_PER.CTL,SELL_QTY_PER=NUM(SELL_QTY_PER$,ERR=NON_NUMERIC),_X$="INVENTORY_QTY_PER",_X=INVENTORY_QTY_PER.CTL,INVENTORY_QTY_PER=NUM(INVENTORY_QTY_PER$,ERR=NON_NUMERIC)
11180 _X$="CTN_WT",_X=CTN_WT.CTL,CTN_WT=NUM(CTN_WT$,ERR=NON_NUMERIC),_X$="LAST_PURCH_COST",_X=LAST_PURCH_COST.CTL,LAST_PURCH_COST=NUM(LAST_PURCH_COST$,ERR=NON_NUMERIC),_X$="AVG_COST",_X=AVG_COST.CTL,AVG_COST=NUM(AVG_COST$,ERR=NON_NUMERIC),_X$="CTN_PACK",_X=CTN_PACK.CTL,CTN_PACK=NUM(CTN_PACK$,ERR=NON_NUMERIC)
11220 _X$="SPER_UNIT_COST",_X=SPER_UNIT_COST.CTL,SPER_UNIT_COST=NUM(SPER_UNIT_COST$,ERR=NON_NUMERIC),_X$="QTY_BREAK_7",_X=QTY_BREAK_7.CTL,QTY_BREAK_7=NUM(QTY_BREAK_7$,ERR=NON_NUMERIC),_X$="QTY_PRICE_7",_X=QTY_PRICE_7.CTL,QTY_PRICE_7=NUM(QTY_PRICE_7$,ERR=NON_NUMERIC),_X$="QTY_BREAK_8",_X=QTY_BREAK_8.CTL,QTY_BREAK_8=NUM(QTY_BREAK_8$,ERR=NON_NUMERIC)
11260 _X$="QTY_PRICE_8",_X=QTY_PRICE_8.CTL,QTY_PRICE_8=NUM(QTY_PRICE_8$,ERR=NON_NUMERIC),_X$="QTY_BREAK_9",_X=QTY_BREAK_9.CTL,QTY_BREAK_9=NUM(QTY_BREAK_9$,ERR=NON_NUMERIC),_X$="QTY_PRICE_9",_X=QTY_PRICE_9.CTL,QTY_PRICE_9=NUM(QTY_PRICE_9$,ERR=NON_NUMERIC),_X$="QTY_BREAK_10",_X=QTY_BREAK_10.CTL,QTY_BREAK_10=NUM(QTY_BREAK_10$,ERR=NON_NUMERIC)
11300 _X$="QTY_PRICE_10",_X=QTY_PRICE_10.CTL,QTY_PRICE_10=NUM(QTY_PRICE_10$,ERR=NON_NUMERIC),_X$="QTY_BREAK_11",_X=QTY_BREAK_11.CTL,QTY_BREAK_11=NUM(QTY_BREAK_11$,ERR=NON_NUMERIC),_X$="QTY_PRICE_11",_X=QTY_PRICE_11.CTL,QTY_PRICE_11=NUM(QTY_PRICE_11$,ERR=NON_NUMERIC),_X$="QTY_BREAK_12",_X=QTY_BREAK_12.CTL,QTY_BREAK_12=NUM(QTY_BREAK_12$,ERR=NON_NUMERIC)
11340 _X$="QTY_PRICE_12",_X=QTY_PRICE_12.CTL,QTY_PRICE_12=NUM(QTY_PRICE_12$,ERR=NON_NUMERIC),_X$="IC0_UNUSED_2",_X=IC0_UNUSED_2.CTL,IC0_UNUSED_2=NUM(IC0_UNUSED_2$,ERR=NON_NUMERIC),_X$="IC0_UNUSED_3",_X=IC0_UNUSED_3.CTL,IC0_UNUSED_3=NUM(IC0_UNUSED_3$,ERR=NON_NUMERIC),_X$="IC0_UNUSED_4",_X=IC0_UNUSED_4.CTL,IC0_UNUSED_4=NUM(IC0_UNUSED_4$,ERR=NON_NUMERIC)
11380 _X$="IC0_UNUSED_5",_X=IC0_UNUSED_5.CTL,IC0_UNUSED_5=NUM(IC0_UNUSED_5$,ERR=NON_NUMERIC),_X$="IC0_UNUSED_6",_X=IC0_UNUSED_6.CTL,IC0_UNUSED_6=NUM(IC0_UNUSED_6$,ERR=NON_NUMERIC),_X$="IC0_UNUSED_7",_X=IC0_UNUSED_7.CTL,IC0_UNUSED_7=NUM(IC0_UNUSED_7$,ERR=NON_NUMERIC),_X$="IC0_UNUSED_8",_X=IC0_UNUSED_8.CTL,IC0_UNUSED_8=NUM(IC0_UNUSED_8$,ERR=NON_NUMERIC)
11420 _X$="IC0_UNUSED_9",_X=IC0_UNUSED_9.CTL,IC0_UNUSED_9=NUM(IC0_UNUSED_9$,ERR=NON_NUMERIC)
11430 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12030 IF STP(SELL_UM$)="" THEN _W_FLG=0; MSGBOX MSG("ENTER_SUM"),MSG("WARNING"),"!,TIM=5"; NEXT_ID=SELL_UM.CTL; GOTO *RETURN
12040 IF STP(SELL_QTY_PER$)="" OR NUM(SELL_QTY_PER$)=0 THEN _W_FLG=0; MSGBOX MSG("ENTER_S_UM"),MSG("WARNING"),"!,TIM=5"; NEXT_ID=SELL_QTY_PER.CTL; GOTO *RETURN
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN CUST_DIV$=""
13030 IF _CLR_FLG$="R" THEN CUST_CODE$=""
13040 IF _CLR_FLG$="R" THEN ITEM_CODE$=""
13050 ITEM_DESC$="",PROD_CODE$="",LEFT_RIGHT$="",TOP_BOTTOM$="",PLYS$="",VEND_DIV$="",VEND_CODE$=""
13120 PLANT_CODE$="",LAST_SOLD_DATE$="",LAST_PURCH_DATE$="",STAT_FLAG$="",ITEM_PRICE_CLASS$="",LOT_INV_FOR_THIS_ITM$=""
13180 QTY_BREAK_PRICE_GRP$="",SECURE_FOR_REQ$="",NEVER_BACKORDER$="",IC0_UNUSED_1$="",SELL_UM$=""
13230 INVENTORY_UM$="",DESC_LINE_2$="",ITEM_GROUP_CODE$="",PRICING_FEATURES$=""
13240 BASE_PRICE=0,QTY_BREAK_1=0,QTY_PRICE_1=0,QTY_BREAK_2=0,QTY_PRICE_2=0,QTY_BREAK_3=0,QTY_PRICE_3=0,QTY_BREAK_4=0
13350 QTY_PRICE_4=0,QTY_BREAK_5=0,QTY_PRICE_5=0,QTY_BREAK_6=0,QTY_PRICE_6=0,AVG_SALE_PR_FOR_FMGT=0,SELL_QTY_PER=0
13420 INVENTORY_QTY_PER=0,CTN_WT=0,LAST_PURCH_COST=0,AVG_COST=0,CTN_PACK=0,SPER_UNIT_COST=0,QTY_BREAK_7=0,QTY_PRICE_7=0
13500 QTY_BREAK_8=0,QTY_PRICE_8=0,QTY_BREAK_9=0,QTY_PRICE_9=0,QTY_BREAK_10=0,QTY_PRICE_10=0,QTY_BREAK_11=0
13570 QTY_PRICE_11=0,QTY_BREAK_12=0,QTY_PRICE_12=0,IC0_UNUSED_2=0,IC0_UNUSED_3=0,IC0_UNUSED_4=0,IC0_UNUSED_5=0
13640 IC0_UNUSED_6=0,IC0_UNUSED_7=0,IC0_UNUSED_8=0,IC0_UNUSED_9=0
13650 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14015 CALL "*WINGRP;ENABLE",BREAK.GRP$
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUST_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=ITEM_CODE.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$; IF SEC$(39,1)="Y" THEN MULTI_LINE LOCK SPER_UNIT_COST.CTL
14990 RETURN 
15000 SEL_VENDOR: REFRESH_FLG=1; IF STP(VENDOR$)="" THEN %PLANT_VEND$="",%VEND_NAME$="",NEXT_ID=VENDOR.CTL,CHANGE_FLG=0; GOTO *RETURN
15001 IF VENDOR$<>"" THEN GOTO 15012
15005 IF STP(VEND_DIV$)+STP(VEND_CODE$)<>"" THEN VENDOR$=VEND_DIV$+VEND_CODE$
15010 VENDOR$=PAD(VENDOR$,10,"0")
15012 ! IF %AP_DIV_LEN=0 THEN VENDOR$="00"+VENDOR$,VEND_DIV$=VENDOR$(1,2),VEND_CODE$=VENDOR$(3); GOTO 15020
15015 IF STP(VENDOR$)<>"" THEN VEND_DIV$=VENDOR$(1,%AP_DIV_LEN),VEND_CODE$=VENDOR$(1+%AP_DIV_LEN)
15020 FIND (AP4,KEY=VENDOR$,DOM=*NEXT)AP4$; CHANGE_FLG=1; GOTO NXT
15030 DIM AP4$(70); AP4$(11,35)="**** "+MSG("REC_NOTFND")+" ****",NEXT_ID=VENDOR.CTL,VENDOR$=""; EXIT 
15040 NXT:
15050 %VEND_NAME$=AP4$(11,35),REFRESH_FLG=1,CHANGE_FLG=0,NEXT_ID=PLANT_CODE.CTL
15060 RETURN 
15100 SEL_PLANT_CODE:
15110 IF LEN(PLANT_CODE$)>4 THEN VENDOR$=PLANT_CODE$(1,10),PLANT_CODE$=PLANT_CODE$(11); GOSUB SEL_VENDOR
15112 IF STP(PLANT_CODE$)="" THEN %PLANT_NAME$=""; GOTO *RETURN
15113 PLANT_CODE$=PAD(PLANT_CODE$,4,0,"0"),PLANT_CODE.CTL'VALUE$=PLANT_CODE$
15115 FM0=FN%FFN("FM0"+%C$); IF FM0<=0 THEN FM0=HFN; OPEN (FM0)"FM0"+%C$ ! [205471]-changed FFN() to FN%FFN()
15120 FIND (FM0,KEY="P"+VENDOR$+PLANT_CODE$,DOM=*NEXT)FM0$; GOTO NXT_PLANT
15130 DIM FM0$(618)
15140 FM0$(16,35)="**** "+MSG("REC_NOTFND")+" ****",NEXT_ID=PLANT_CODE.CTL,PLANT_CODE$=""
15150 NXT_PLANT:
15160 %PLANT_NAME$=FM0$(16,35),REFRESH_FLG=1
15170 RETURN 
15180 SEL_ITEM_PRICE:
15185 FMP=FN%FFN("FMP"+%C$); IF FMP<=0 THEN FMP=HFN; OPEN (FMP)"FMP"+%C$ ! [205471]-changed FFN() to FN%FFN()
15190 FIND (FMP,KEY="I"+ITEM_PRICE_CLASS$,DOM=*NEXT)FMP$; GOTO NXT_FMP
15200 DIM FMP$(35)
15210 FMP$(5,30)="**** "+MSG("REC_NOTFND")+" ****",NEXT_ID=ITEM_PRICE_CLASS.CTLL,ITEM_PRICE_CLASS$=""
15220 NXT_FMP:
15230 %DESC$=FMP$(5,30),REFRESH_FLG=1
15240 RETURN 
16000 SEL_UM: REFRESH_FLG=1
16010 SELL_UM$=PAD(SELL_UM$,4," ")
16015 IF BB_SELL_UM$=SELL_UM$ AND BB_SELL_QTY$=SELL_QTY_PER$ THEN EXIT 
16020 FIND (ZZP,KEY="U/M"+SELL_UM$,DOM=NO_UM)SUM$,P0,P1
16022 IF ID$="SELL_UM" AND SUM$(20,1)="Y" THEN SELL_QTY_PER$=STR(P0) ELSE IF ID$="SELL_UM" AND STP(SELL_QTY_PER$)="" AND P1<>0 THEN SELL_QTY_PER$=STR(P1)
16023 IF ID$="SELL_UM" AND NUM(SELL_QTY_PER$)=0 THEN SELL_QTY_PER$=STR(P1)
16025 IF BB_SELL_UM$<>SELL_UM$ OR BB_SELL_QTY_PER$<>SELL_QTY_PER$ THEN GOSUB CHANGE_SELL_UM
16027 ! IF ID$<>"SELL_UM" THEN SELL_QTY_PER$=STR(P0),NEXT_ID=SELL_QTY_PER.CTL; IF P0=0 THEN SELL_QTY_PER$=STR(P1)
16028 IF P0<>0 THEN NEXT_ID=QTY_BREAK_PRICE_GRP.CTL
16029 IF ID$="SELL_QTY_PER" AND NUM(SELL_QTY_PER$)=0 THEN MSGBOX MSG("ENTER_S_UM"),MSG("WARNING"),"!,TIM=5"; NEXT_ID=SELL_QTY_PER.CTL
16030 RETURN 
16040 NO_UM: SELL_UM$="",NEXT_ID=SELL_UM.CTL; RETURN 
16500 CHANGE_SELL_UM:
16510 IF BB_SELL_QTY_PER$=SELL_QTY_PER$ THEN GOTO 16550
16512 IF STP(BB_SELL_QTY_PER$)="" THEN BB_SELL_QTY_PER$=SELL_QTY_PER$
16515 IF NUM(BB_SELL_QTY_PER$)<>0 THEN BASE_PRICE=NUM(BASE_PRICE$)*NUM(SELL_QTY_PER$)/NUM(BB_SELL_QTY_PER$),BASE_PRICE$=STR(BASE_PRICE)
16516 IF NUM(BB_SELL_QTY_PER$)=0 OR NUM(SELL_QTY_PER$)=0 THEN RETURN 
16520 FOR XX=1 TO 12
16521 IF NUM(SELL_QTY_PER$)=0 THEN RETURN 
16530 EXECUTE "QTY_PRICE_"+STR(XX)+"$=STR(NUM(QTY_PRICE_"+STR(XX)+"$)*NUM(SELL_QTY_PER$)/NUM(BB_SELL_QTY_PER$))"
16535 EXECUTE "QTY_BREAK_"+STR(XX)+"$=STR(NUM(QTY_BREAK_"+STR(XX)+"$)*NUM(BB_SELL_QTY_PER$)/NUM(SELL_QTY_PER$))"
16540 NEXT XX
16545 GOTO CREATE_BREAK
16550 FOR XX=1 TO 12
16560 VAL$=EVS("QTY_BREAK_"+STR(XX)+"$"); IF NUM(VAL$)=0 THEN BREAK
16570 IF SUM$(20,1)<>"Y" THEN VAL$=STR(NUM(VAL$)/NUM(SELL_QTY_PER$),ERR=*NEXT) ELSE IF P1<>0 THEN VAL$=STR(NUM(VAL$)/P1)
16580 EXECUTE "QTY_BREAK_"+STR(XX)+"$=VAL$"
16590 NEXT XX
30000 CREATE_BREAK:
30010 FOR AA=12 TO 1 STEP -1
30020 EXECUTE "IF NUM(QTY_BREAK_"+STR(AA)+"$)<>0 THEN QTY_TO_"+STR(AA-1)+"$=STR(NUM(QTY_BREAK_"+STR(AA)+"$)-.01) ELSE QTY_TO_"+STR(AA-1)+"$="""""
30025 EXECUTE "IF NUM(QTY_TO_"+STR(AA-1)+"$) < 0 QTY_TO_"+STR(AA-1)+"$="""""
30030 NEXT AA
30040 RETURN 
31000 SEL_CUSTOMER:
31005 AR1=FN%FFN("AR1"+%C$); IF AR1<=0 THEN AR1=HFN; OPEN (AR1)"AR1"+%C$ ! [205471]-changed FFN() to FN%FFN()
31010 IF STP(CUSTOMER$)="" THEN GOTO *RETURN
31020 READ (AR1,KEY=CUSTOMER$,DOM=*RETURN)AR1$
31030 CUST_NAME$=STP(AR1$(11,40))
31060 RETURN 
31500 CLEAR_QUANTITY:
31510 VAL=NUM(EVS(ID$+"$")); IF VAL<>0 THEN RETURN 
31520 FRM=NUM(ID$(LEN(ID$)))
31530 FOR AA=FRM TO 12
31540 EXECUTE "QTY_BREAK_"+STR(AA)+"$="+QUO+QUO+",QTY_BREAK_"+STR(AA)+"=0"
31550 EXECUTE "QTY_TO_"+STR(AA)+"$="+QUO+QUO+",QTY_TO_"+STR(AA)+"=0"
31560 EXECUTE "QTY_PRICE_"+STR(AA)+"$="+QUO+QUO+",QTY_PRICE_"+STR(AA)+"=0"
31570 NEXT AA
31580 REFRESH_FLG=1,NEXT_ID=CTN_WT.CTL
31590 RETURN 
32000 RESTORE:
32010 FOR A=1 TO 12
32020 EXECUTE "QTY_BREAK_"+STR(A)+"$=STR(QTY_BREAK_"+STR(A)+")"
32030 NEXT A
32040 GOSUB 0182; RETURN 
32100 FINISH_BREAK:
32110 FOR AA=1 TO 12
32120 VAL$=EVS("QTY_BREAK_"+STR(AA)+"$"); IF NUM(VAL$)=0 THEN BREAK
32130 IF SUM$(20,1)<>"Y" THEN VAL$=STR(NUM(VAL$)*NUM(SELL_QTY_PER$),ERR=*NEXT) ELSE IF P1<>0 THEN VAL$=STR(NUM(VAL$)*P1)
32140 EXECUTE "QTY_BREAK_"+STR(AA)+"$=VAL$"
32150 NEXT AA
32160 RETURN 
56000 REM + Modification History
56002 REM "201823-Provide the ability to set the taxable flag  by Item        
56004 REM "205471-Oracle - FFN usage in tf2g progs. to be replaced by FN%FFN  
56005 REM "286735-Get program exception in order entry (014, FMGODB, 23160)   
