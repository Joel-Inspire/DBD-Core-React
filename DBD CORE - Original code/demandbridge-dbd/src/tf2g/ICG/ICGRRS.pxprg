0010 ! ICGRRS - Statistical Data Report
0035 REM "5.7 - 02/08/12 - 16.02 - tma - SSP# 252096
0037 REM "252096-Inventory Sales Analysis Report-ICGRRS Minor report and     
0040 REM "Copyright 2012 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0045 PROCESS "ICGRRS","../ICG/IC.EN"
0050 EXIT 
0060 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZZS"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN)_FILE_NAME$
0185 _ZZPARM=HFN; OPEN (_ZZPARM)"ZZPARM"
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="PRG_NAME$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 ARG_1$="IC2RRA"+"            ",%K9$="IC2RRA"
0537 DIM RNG(4)
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT)A$,R0$,W$,RNG{ALL}; GOTO 0560
0551 DIM A$(86),R0$(128),W$(71),RNG(4)
0560 ! _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0561 NXT_OPTION:
0565 EXECUTE "next_folder=FLDR."+_F_OBJ$[NUM(A$(71,1))]+".CTL,REFRESH_FLG=1"
0566 NEXT_ID=RPT_VEIW.CTL,REFRESH_FLG=1,RPT_SEQ=NUM(A$(71,1))
0567 LIST_BOX WRITE LB_CODES.CTL,MID(A$,80,1)
0570 B_START_FISCAL$=A$(74,4),B_START_ACCTPD$=A$(78,2); ONLY_OPEN$=""; PERFORM "GLGMDA;LOAD_FISCAL_YEAR" ! ssp 205203
0580 IF B_START_FISCAL$<>"" THEN START_FISCAL$=B_START_FISCAL$
0590 IF B_START_ACCTPD$<>"" THEN START_ACCTPD$=B_START_ACCTPD$
0600 REFRESH_FLG=1
0605 LIST_BOX WRITE START_FISCAL.CTL,START_FISCAL$; LIST_BOX WRITE START_ACCTPD.CTL,START_ACCTPD$
0610 GOSUB SEL_DATE; GOSUB ASSIGN_LIB
0650 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 IF _ZZPARM<>0 THEN CLOSE (_ZZPARM); _ZZPARM=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$; _KEY$=STP(_KEY$,1)
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$; _KEY$=STP(_KEY$,1)
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN ! MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=*NEXT)A$,R0$,W$,RNG{ALL}; GOTO 3360
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1,CHANGE_FLG=0
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3805 IF CHANGE_FLG=0 THEN GOTO *RETURN
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=PRG_NAME.CTL,_FIRST_FIELD=RPT_SELEC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX MSG("UPD_RPT_1")+SEP+MSG("UPD_RPT_2"),MSG("CONFIRM"),"?,YESNO",_YESNO$
3840 IF _YESNO$="YES" THEN GOSUB ASSIGN_PRG; GOTO WRT
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 RPT_NUM1$=STR(RPT_NUM1)
10030 RPT_NUM2$=STR(RPT_NUM2)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="RPT_NUM1",_X=RPT_NUM1.CTL,RPT_NUM1=NUM(RPT_NUM1$,ERR=NON_NUMERIC)
11030 _X$="RPT_NUM2",_X=RPT_NUM2.CTL,RPT_NUM2=NUM(RPT_NUM2$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
20000 VIEW_REPORT:
20001 PRINT_REPORT:
20010 ! View Report Routine.
20020 IOLIST A$
20030 IOLIST R0$,W$
20040 ZZPARM=HFN; OPEN (ZZPARM)"ZZPARM"; READ (ZZPARM,KEY=FID(0)+"      ")X3$,*,X4$; READ (ZZPARM,KEY="STATI/C")T1$,F0
20050 ZZP=HFN; OPEN (ZZP)"ZZP"
20060 ! 
20070 GOSUB SEL_DATE; IF CHANGE_FLG THEN GOSUB CHECK_CHANGES ELSE GOSUB ASSIGN_PRG
20080 A$(1,6)="ICGRRS"
20090 IF ID$="RPT_VEIW" THEN R0$(2,6)="P_    "
20100 ! 
20180 K$=X3$(1,8),%GUI=1
20267 %B_WINDATE_FMT$=%WINDATE_FMT$,%WINDATE_FMT$="YYYYMMDD",JJ$=DTE(0:"%Yl%Mz%Dz"); CALL "ZZWDTE;VALIDATE",JJ$,JJJ$,JJJJ$; X3$(21,6)=JJ$
20270 WRITE (ZZP,KEY=K$)X3$,X4$,T1$,R0$,W$,A$
20275 WIN_D$=FIN(0),WIN_CURR=DEC(WIN_D$(10,1))
20278 PRINT 'CURSOR'(1),
20279 PRG_TO_CALL$="IC2RRA" ! SSP 228228
20280 IF RB_PRT$>"0" THEN CALL "ZZ2DRV",PRG_TO_CALL$ ELSE CALL PRG_TO_CALL$ ! SSP 228228
20281 PRINT 'CURSOR'(0),
20285 CMD_STR$="END"
20290 EXIT 
25000 ! 25000,10
25010 ASSIGN_LIB:
25020 ! Output Option
25030 IF NUM(A$(71,1))=0 THEN A$(71,1)="1"
25040 PRT_MODE$=R0$(1,1),RPT_OUTDEV$=R0$(2,2)
25050 RPT_VERT$=R0$(9,1),RPT_HORIZ$=R0$(10,1)
25060 RPT_AUX1$=R0$(11,1),RPT_AUX2$=R0$(12,1)
25070 RPT_LINES$=R0$(15,2),RPT_FORMCODE$=R0$(17,1)
25080 RPT_JOBCARD$=MID(R0$,65,60),RPT_JOBCARD_FLG$=MID(R0$,125,1)
25090 RPT_AUX3$=R0$(13,1),RPT_AUX4$=R0$(14,1)
25100 ! Selection Options
25110 RPT_SELEC$=A$(7,12),RPT_DESC$=A$(19,40),RPT_OPT$=A$(59,12),RPT_SEQ$=A$(71,1)
25112 ML_AUDIT_NO$=STP(A$(80)),LB_CODES$=A$(80,1)
25120 IF STP(RPT_OPT$)="" THEN RPT_OPT$=""
25130 IF STP(RPT_SELEC$)="" THEN RPT_SELEC$=""
25370 REFRESH_FLG=1; DIM S$(10,"~")
25380 SWITCH RPT_SEQ$
25390 CASE "4"
25400 VEND_START$=STP(W$(1,10)); IF W$(15,10)<>S$ THEN VEND_END$=W$(15,10)
25420 PLANT_START$=STP(W$(11,4)); IF W$(25,4)<>S$(1,4) THEN PLANT_END$=W$(25,4)
25430 ML_PROD_START$=STP(W$(29,3)); IF W$(32,3)<>S$(1,3) THEN ML_PROD_END$=W$(32,3)
25440 ML_CUST_START$=STP(W$(35,10)); IF W$(55,10)<>S$ THEN ML_CUST_END$=W$(55,10)
25450 ML_ITEM_START$=STP(W$(45,1)); IF W$(65,10)<>S$ THEN ML_ITEM_END$=W$(65,10)
25460 BREAK
25470 CASE "2"
25480 ML_PROD_START$=STP(W$(1,3)); IF W$(4,3)<>S$(1,3) THEN ML_PROD_END$=W$(4,3)
25500 ML_CUST_START$=STP(W$(7,10)); IF W$(27,10)<>S$ THEN ML_CUST_END$=W$(27,10)
25510 ML_ITEM_START$=STP(W$(17,10)); IF W$(37,10)<>S$ THEN ML_ITEM_END$=W$(37,10)
25520 BREAK
25530 CASE "3"
25540 ML_LOC_START$=STP(W$(1,4)); IF W$(5,4)<>S$(1,4) THEN ML_LOC_END$=W$(5,4)
25560 ML_PROD_START$=STP(W$(9,3)); IF W$(12,3)<>S$(1,3) THEN ML_PROD_END$=W$(12,3)
25570 ML_CUST_START$=STP(W$(15,10)); IF W$(25,10)<>S$ THEN ML_CUST_END$=W$(25,10)
25580 ML_ITEM_START$=STP(W$(35,10)); IF W$(45,10)<>S$ THEN ML_ITEM_END$=W$(45,10)
25590 BREAK
25600 CASE "1"
25610 ML_CUST_START$=STP(W$(1,10)); IF W$(21,10)<>S$ THEN ML_CUST_END$=W$(21,10) ELSE ML_CUST_END$=""
25630 ML_ITEM_START$=STP(W$(11,10)); IF W$(31,10)<>S$ THEN ML_ITEM_END$=W$(31,10) ELSE ML_ITEM_END$=""
25640 ML_LOC_START$=STP(W$(41,4)); IF W$(45,4)<>S$(1,4) THEN ML_LOC_END$=W$(45,4) ELSE ML_LOC_END$=""
25650 BREAK
25660 CASE "5"
25670 ML_LOC_START$=STP(A$(74,4)); IF A$(78,4)<>S$(1,4) THEN ML_LOC_END$=A$(78,4)
25690 ML_CUST_START$=STP(W$(9,10)); IF W$(19,10)<>S$ THEN ML_CUST_END$=W$(19,10)
25700 ML_SALESMAN_START$=STP(W$(1,4)); IF W$(5,4)<>S$(1,4) THEN ML_SALESMAN_END$=W$(5,4)
25710 BREAK
25720 END SWITCH 
25730 RETURN 
25740 ASSIGN_PRG:
25750 A$(1,6)=ARG_1$,A$(7,12)=RPT_SELEC$,A$(19,40)=RPT_DESC$,A$(59,12)=RPT_OPT$,A$(71,1)=RPT_SEQ$
25760 A$(59,12)=RPT_OPT$; A$(71,1)=RPT_SEQ$
25770 ! 
25780 R0$(1,1)=PRT_MODE$,R0$(2,6)=MID(RPT_OUTDEV$,1,2)+"    ",R0$(9,1)=RPT_VERT$,R0$(10,1)=RPT_HORIZ$
25790 R0$(11,1)=RPT_AUX1$,R0$(12,1)=RPT_AUX2$,R0$(13,1)=RPT_AUX3$,R0$(14,1)=RPT_AUX4$
25800 R0$(15,2)=RPT_LINES$,R0$(17,1)=RPT_FORMCODE$,R0$(65,60)=RPT_JOBCARD$
25810 R0$(125,1)=RPT_JOBCARD_FLG$; DIM W$(71,"~")
25815 A$(74,6)=TF_YEAR$+PER$,A$(80,1)=LB_CODES$,A$(81,2)=STR(F0:"00")
25820 SWITCH RPT_SEQ$
25840 CASE "4"
25850 DIM W$(74,"~")
25860 W$(1,10)=VEND_START$; IF VEND_END$<>"" THEN W$(15,10)=VEND_END$
25870 W$(11,4)=PLANT_START$; IF PLANT_END$<>"" THEN W$(25,4)=PLANT_END$
25880 W$(29,3)=ML_PROD_START$; IF ML_PROD_END$<>"" THEN W$(32,3)=ML_PROD_END$
25890 W$(35,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(55,10)=ML_CUST_END$
25900 W$(45,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(65,10)=ML_ITEM_END$
25910 BREAK
25920 CASE "2"
25930 DIM W$(47,"~")
25940 W$(1,3)=ML_PROD_START$; IF ML_PROD_END$<>"" THEN W$(4,3)=ML_PROD_END$ ! SSP#252096
25950 W$(7,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(27,10)=ML_CUST_END$
25960 W$(17,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(37,10)=ML_ITEM_END$
25970 BREAK
25980 CASE "3"
25990 DIM W$(55,"~")
26000 W$(1,4)=ML_LOC_START$; IF ML_LOC_END$<>"" THEN W$(5,4)=ML_LOC_END$
26010 W$(9,3)=ML_PROD_START$; IF ML_PROD_END$<>"" THEN W$(12,3)=ML_PROD_END$
26020 W$(15,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(25,10)=ML_CUST_END$
26030 W$(35,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(45,10)=ML_ITEM_END$
26040 BREAK
26050 CASE "1"
26060 DIM W$(49,"~")
26070 W$(1,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(21,10)=ML_CUST_END$
26080 W$(11,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(31,10)=ML_ITEM_END$
26090 W$(41,4)=ML_LOC_START$; IF ML_LOC_END$<>"" THEN W$(45,4)=ML_LOC_END$
26100 BREAK
26110 CASE "5"
26120 DIM W$(29,"~")
26130 A$(74,4)=ML_LOC_START$; IF ML_LOC_END$<>"" THEN A$(78,4)=ML_LOC_END$
26140 W$(9,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(19,10)=ML_CUST_END$
26150 W$(1,4)=ML_SALESMAN_START$; IF ML_SALESMAN_END$<>"" THEN W$(5,4)=ML_SALESMAN_END$
26160 BREAK
26170 END SWITCH 
26180 RETURN 
26190 SEL_DATE:
26200 IF LEN(START_FISCAL$)>4 THEN TF_YEAR$=%CR_YEAR$ ELSE TF_YEAR$=START_FISCAL$
26210 IF LEN(START_ACCTPD$)>2 THEN PER$=CR_PD$ ELSE PER$=START_ACCTPD$
26215 IF STP(TF_YEAR$)="" THEN TF_YEAR$=%CR_YEAR$
26220 FIND (_ZZPARM,KEY=%C$+"G/LYE"+TF_YEAR$)REC_DAT$; REC_DAT$=REC_DAT$(21)
26230 DIM CUR_DATE$[12]
26240 FOR XX=1 TO 12; CUR_DATE$[XX]=FND$(REC_DAT$(XX*6-5,6)); NEXT XX
26250 ML_ENDING_PERIOD$=CUR_DATE$[NUM(PER$)]
26260 REFRESH_FLG=1
26270 RETURN 
56000 ! "205203-When in Inventory Sales Analysis Report Screen - only giving
56001 ! "       the option of looking at fiscal years"
56003 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56004 ! "228228-Ability to split a report into multiple PDFs based on sales 
56005 REM "252096-Inventory Sales Analysis Report-ICGRRS Minor report and     
60000 SELECT_SELECTION:
60010 _KEY$="IC2RRA"+RPT_SELEC$,_KEY$=PAD(_KEY$,18," ")
60020 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD1)A$,R0$,W$,RNG{ALL}
60030 GOTO NXT_OPTION
60500 NEW_RECORD1:
60510 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
60520 IF _YESNO$="NO" THEN GOSUB MAIN_POST_DISPLAY; EXIT 
60530 DIM A$(86),R0$(128),W$(71),RNG(4)
60540 A$(71,1)="1",A$(1,6)="IC2RRA",A$(7,LEN(RPT_SELEC$))=RPT_SELEC$,A$(74,4)=%CR_YEAR$,A$(78,2)=CR_PD$,A$(80,1)="S",W$(21,20)=DIM(20,"~"),W$(45,4)=DIM(4,"~")
60550 WRITE (_FIL_NO,KEY=_KEY$)A$,R0$,W$,RNG{ALL}
60560 GOTO NXT_OPTION
