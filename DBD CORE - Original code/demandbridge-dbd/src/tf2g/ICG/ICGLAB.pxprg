0010 REM "P/O & Returns Lot Receiving <IC2LAB>
0015 REM "Prog Type: I -3.0A
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 01/10/25 - 14.620654 - crg - SSP# 307483
0037 REM "307483-DBD-457:Support for IMS price in purchase order line        
0040 REM "Copyright 2025 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0080 REM "Used by P/O receiving and O/P lot returns
0081 REM "On exit of lot returns Q0$=STR(TOTAL QTY), Q1$=STR(TOTAL COST)
0082 REM "File slots at max coming from FM2OB0
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0095 INIT:
0097 X3$=ARG_1$,X4$=ARG_2$,Q0$=ARG_3$,Q1$=ARG_4$; IF %R5$="" OR %R5$<>MID(ARG_4$,21,4) THEN %R5$=MID(ARG_4$,21,4); DIM %R5[10],%R4[10] ! SSP 181457
0098 IF MID(Q0$,1,3)="ICN" THEN DOING_LOT_RETURNS=1 ELSE DOING_LOT_RETURNS=0
0100 SETERR 9000; SETESC 9300
0102 REM " LET Q0$="ICN00008220001"
0110 X0$="IC2LAB",X1$="Inventory Lot Receiving",K9$="",K9=0
0120 DIM Z0$(80,"-"),S0$(80),H[31]
0130 K0=32,K1=5,S1=0
0135 C9=-1
0140 M0$="###,###.00-",M1$="####,###.00-",M2$="###,##0-",M3$="###,##0-",M4$="#,###,##0-"
0145 IF Q1$="" THEN GOSUB 8950 ELSE IF LEN(Q0$)>=3 THEN IF Q0$(1,3)="ICN" THEN Q2$=Q0$(4),Q0$=Q0$(1,3)
0150 V8$="000210121499"
0200 REM "
0240 ! CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 9920
0241 IF NUL(X3$(21,6)) THEN DEFAULT_DATE$=X3$(15,6) ELSE DEFAULT_DATE$=X3$(21,6)
0245 IF X3$(65,1)>"2" THEN PRECISION NUM(X3$(65,1),ERR=0246)
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0300 REM "IOLISTS
0310 IOLIST A$(1),A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12]
0315 IOLIST A0$(1),A0[0],A0[1],A0[2],A0[3],A0[4],A0[5],A0[6],A0[7],A0[8],A0[9],A0[10],A0[11],A0[12]
0320 IOLIST B$,B[0],B[1],B[2],B[3],B[4],B[5],B[6],B[7],B[8],B[9],B[10],B[11],B[12],B[13],B[14],B[15]
0330 IOLIST C$,C[0],C[1],C[2],C[3],C[4],C[5],C[6],C[7],C[8],C[9],C[10],C[11],C[12],C[13],C[14],C[15],C[16],C[17],C[18],C[19],C[20],C[21],C[22],C[23],C[24],C[25],C[26],C[27],C[28],C[29],C[30]
0340 IOLIST D$
0345 IOLIST D1$
0350 IOLIST E$,E[0],E[1],E[2],E[3]
0360 IOLIST F$
0370 IOLIST G$
0375 IOLIST G5$,G5[0],G5[1]
0376 IOLIST G6$,G6[0],G6[1]
0377 IOLIST G7$,G7[0],G7[1]
0380 IOLIST H$,H[0],H[1],H[2],H[3],H[4],H[5],H[6],H[7],H[8],H[9],H[10],H[11],H[12],H[13],H[14],H[15],H[16],H[17],H[18],H[19],H[20],H[21],H[22],H[23],H[24],H[25],H[26],H[27],H[28],H[29],H[30],H[31]
0400 IOLIST L$(1),L[0],L[1],L[2],L[3],L[4],L[5],L[6],L[7],L[8],L[9],L[10],L[11],L[12],L[13],L[14],L[15],L[16],L[17],L[18],L[19],L[20],L[21],L[22],L[23],L[24],L[25],L[26],L[27]
0410 IOLIST R$,R[0],R[1],R[2],R[3],R[4],R[5],R[6]
0415 IOLIST R0$,R0[0],R0[1],R0[2],R0[3],R0[4],R0[5],R0[6]
0420 IOLIST S9$
0425 IOLIST I9$
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0509 IF Q0$="" THEN Z$="01X POH...  06O PO1...  " ELSE Z$="01X "+Q0$+"...  ",%POH_START_KEY$=Q1$(1,24)
0510 Z$=Z$+"02O AR1...  03O IC0...  04O FM0...  05O FS6...  07O AP4...  08O FM1...  09O PO7...  10O PO2...  11O PO3...  12O IC1...  13O ZZPARM  25O FMP...  "
0520 GOSUB 9750; ON Z0 GOTO 0521,9900
0525 %POH$=FIN(Z[1],"FILENAME")
0530 FIND (Z[13],KEY=X3$(9,3)+"F/M")P0$
0540 FIND (Z[13],KEY=X3$(9,3)+"I/C")P1$
0550 LBL_PRT=0; IF FN%HAS_MODULE("WW") THEN FIND (Z[13],KEY=X3$(9,3)+"W/M",DOM=*NEXT)WM$; IF MID(WM$,7,1)="Y" THEN LBL_PRT=1 ! WO251758
0590 READ (Z[1],KEY=K9$,DOM=0591)
0595 DIM SBO$(255); READ (Z[13],KEY="osec"+X3$(40,3),DOM=0596)SBO$(1)
0600 REM "
0605 IF DOING_LOT_RETURNS THEN V1=5,V2=-2; GOSUB 6000 ELSE V1=0,V2=0
0920 IF DOING_LOT_RETURNS THEN Q0=0,Q1=0,A1$=Q1$(1,30); GOSUB 8800
1000 DISPLAY_KEY:! Display the set key info
1010 ! Y8=1; CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,X2
1015 DIM V7$(28); V7$(1,1)="1",V7$(2,1)="1",V7$(5,1)="1",V7$(6,1)="1",V7$(12,1)="1",V7$(13,1)="1",V7$(20,1)="1"
1030 DIM B$(400),B[15],C$(128),C[30],D$(224),E$(168),E[7],F$(259),F[23],G$(310),G[2],S$(50),D1$(200),G5[1],G6[1],G7[1]
1031 F0$=""; JUST_EXIT=0,NEXT_ID=DB_LOC.CTL
1035 DIM A$(269),A[12]
1036 ! IF Q1$>"" THEN GOSUB 7900; GOSUB 5800; IF F0=0 THEN GOSUB 8000
1038 S1=S1+1
1039 A$(31,2)=STR(S1:"00"); IF LEN(A1$)>=32 THEN A1$(31,2)=STR(S1:"00")
1040 A$(33,8)=R9$,A$(100,10)=B9$,A$(82,9)=N9$; IF B8$>"" THEN A$(133,15)=B8$(1,15),A$(129,4)=B8$(16,4),A[5]=NUM(B8$(20,11)),A[6]=NUM(B8$(31,9)),A$(215,6)=B8$(40,6)
1041 IF NUL(A$(25,6)) THEN A$(25,6)=DEFAULT_DATE$,ML_DATE$=A$(25,6)
1042 IF DOING_LOT_RETURNS THEN A$(68,14)=Q1$(31),A$(110,11)=Q2$; GOSUB 5820
1045 IF DOING_LOT_RETURNS THEN A$(1,LEN(A1$))=A1$; IF A1$="" THEN A$(1,LEN(K9$))=K9$
1050 CALL "*wingrp;ENABLE",REAL_KEY.GRP$
1060 GOSUB 7900; GOTO 1100
1100 REM "KEY SEQ
1110 X0=-1,C0=0,X1=0,C9=0,Z9=0
1120 SETERR 9000; C0=ABS(C0),X$=""; IF C0=2 AND X0>0 THEN X0=X0-1 ELSE IF C0<>2 THEN X0=X0+1; IF C0=4 THEN GOTO 9900
1140 ON X0 GOTO 1200,1250,1300,1350,1400,1500
1200 REM "Customer number
1201 IF DOING_LOT_RETURNS THEN GOSUB 6200
1220 FIND (Z[2],KEY=A$(1,10),DOM=*NEXT)IOL=0320
1225 DIM CUST_DFT$(243); READ (Z[25],KEY="D"+A$(1,10),DOM=*NEXT)CUST_DFT$; REM " SSP# 146930
1240 GOTO 1120
1250 REM "Item number
1251 C0=0
1270 FIND (Z[3],KEY=A$(1,20),DOM=*NEXT)IOL=0330
1290 GOTO 1120
1305 IF LEN(%R5$)=4 THEN A$(21,4)=%R5$(1,4),DB_LOC$=A$(21,4),REFRESH_FLG=1,NEXT_ID=ML_SEQ.CTL ELSE NEXT_ID=DB_LOC.CTL; RETURN 
1310 SEL_LOC:
1311 IF _EOM$=$00$ THEN JUST_EXIT=1; RETURN 
1315 A$(21,4)=DB_LOC$
1320 FIND (Z[4],KEY="D"+S$(1,10)+A$(21,4),DOM=*NEXT)IOL=0340
1325 GOSUB 7550; GOSUB 7700; GOSUB 8100
1330 IF C0>0 THEN S1=1,A$(31,2)="01"
1334 %POH_START_KEY$=Q1$(1,9)+Q1$(20,3)+A$(1,30)
1335 RETURN 
1340 GOTO 1120
1350 REM "Receipt date
1351 IF NOT(DOING_LOT_RETURNS) THEN GOTO 1120
1355 IF NUL(A$(25,6)) THEN A$(25,6)=DEFAULT_DATE$,ML_DATE$=A$(25,6)
1390 RETURN 
1392 IF NUL(A$(263,4)) THEN A$(263,4)=B$(278,4); ML_LOT_SLSP$=A$(263,4)
1394 RETURN 
1398 ! END OF INIT SECTION
1399 ! *****************************************************************
1400 SEL_SEQ:
1405 IF HTA(_EOM$)="00" AND NUL(QRY_VAL$) THEN JUST_EXIT=1; RETURN 
1407 Q$=A$(1,30); QRY_VAL$=""
1410 A$(31,2)=ML_SEQ$
1500 REM "
1505 Z9=-1,C9=0,A2$="",A3$="",A4$="",A5$=""
1508 IF STP(A$(21,4))="" THEN A$(21,4)=DB_LOC$(1,4) ! SSP221191 jdf
1510 A1$=A$(1,32); IF Q0$="" THEN A1$=Q1$(1,9)+Q1$(20,3)+A1$
1515 _YESNO$="" ! SSP221191 jdf
1516 EXISTING_REC=0 ! SSP 230171
1520 READ (Z[1],ERR=7200,KEY=A1$,DOM=1600)IOL=0310; _SA0=A(0); GOSUB 2865; A(0)=_SA0; CHANGE_FLG=0 ! ssp 211860
1521 CALL "*WINGRP;ENABLE",FIELDS.GRP$; CALL "*WINGRP;ENABLE",BUTTONS.GRP$; CALL "*wingrp;disable",KEY.GRP$; CALL "*wingrp;disable",VENDOR.GRP$ ! SSP221191 jdf
1522 IF Q1$>"" AND NOT(DOING_LOT_RETURNS) AND A$(41,9)<>Q1$(1,9) OR (DOING_LOT_RETURNS AND A$(110,11)<>Q2$) THEN DIM A$(269),A[12]; IF Q0$="" THEN A1$(43,2)=STR(NUM(A1$(43,2))+1:"00"),A$(1,32)=A1$(13,32); GOTO 1520 ELSE A1$(31,2)=STR(NUM(A1$(31,2))+1:"00"),A$(1,LEN(A1$))=A1$; GOTO 1520
1523 FIND (Z[7],KEY=A$(68,10),DOM=*NEXT)IOL=0370; IF MID(G$,402,1)="Y" THEN A[10]=1,ML_CUST_PO_TP$="1" ELSE A[10]=0,ML_CUST_PO_TP$="0" END_IF ; REFRESH_FLG=1 ! SSP#237140                            
1524 EXISTING_REC=1; ; GOSUB 7400 ! SSP 230171
1525 Z9=0,V7$=""; GOSUB 5800
1530 IF Q9=1 THEN Q9=0; RETURN 
1535 S1=NUM(A$(31,2),ERR=1536)
1539 IF A[3]=0 THEN A[3]=A[2] ! SSP 230171
1540 IF A$(125,4)="    " THEN N0=A[4]*A[3] ELSE N0=A[4]*A[2]*A[3]
1545 N0=-N0; GOSUB 8150
1550 S0=1; GOSUB 8300
1560 GOSUB 6200 ! SSP 230171
1565 REFRESH_FLG=1 ! SSP 230171
1590 EXIT ! SSP 230171
1599 ! 
1600 REM "ADD NEW POH RECORD
1620 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$; IF _YESNO$="NO" THEN CHANGE_FLG=0,NEXT_ID=DB_LOC.CTL; EXIT 
1621 CALL "*WINGRP;ENABLE",FIELDS.GRP$; CALL "*WINGRP;ENABLE",BUTTONS.GRP$; CALL "*wingrp;disable",KEY.GRP$
1650 NEW_POH=1 ! SSP249318 jdf
1660 GOSUB 7650
1665 IF MID(P0$,306,1)="Y" THEN IF DIM(READ NUM(L))>0 AND L[25]<>0 THEN A[9]=L[25] ELSE IF H[29]<>0 THEN A[9]=H[29]; REM " DEFAULT TO FMS PRICE FROM FM1, 307483-check PO2 first
1666 A$(68,10)=ML_VENDOR$
1670 IF STP(A$(263,4))="" THEN A$(263,4)=B$(278,4); ML_LOT_SLSP$=A$(263,4) ! SSP 307499
1680 GOSUB 7450
1682 GOSUB CLEAR_FIELDS2 ! SSP230730 jdf
1684 ML_START_NUM$=A$(82,9) ! SSP#266585
1685 T7=0,T8=0,T9=0; CALL "*WINGRP;ENABLE",FIELDS.GRP$; NEXT_ID=ML_REC_REPORT.CTL
1686 GOSUB CREATE_STORAGE_EXPIRED; IF ARG_1$(146,6)="POGMAG" THEN NEXT_ID=ML_VENDOR.CTL; REFRESH_FLG=1; CALL "*wingrp;disable",POGMAG.GRP$ ! SSP 200130   ! SSP219874 jdf  
1687 EXIT 
2000 REM "DATA SEQ
2010 C0=0,X0=-1,X1=1
2020 RETURN ! Everyone comes here, so return from here
2025 IF INT(C0)=3 THEN GOSUB 7300 ELSE IF C0>3 OR X0<0 THEN GOTO 1800
2038 IF X0<LEN(V7$) THEN V7$(X0+1,1)=""
2040 ON X0 GOTO 2200,2250,3400,2300,2350,2100,2600,3350,2950,2750,2850,2800,2900,3250,2400,2450,3300,3600,3150,3650,3700,3000,3050,3100,3450,3500,3550,2500,2550,3750,1800
2100 SEL_REC_REPORT:
2110 A$(33,8)=ML_REC_REPORT$
2140 GOTO 2020
2200 SEL_PO_NUMBER:
2210 A$(41,9)=ML_PO_NUMBER$
2240 GOTO 2020
2250 SEL_PO_DATE:
2260 A$(50,6)=ML_PO_DATE$
2290 GOTO 2020
2300 SEL_VENDOR:
2310 A$(68,10)=ML_VENDOR$
2320 DIM G$(LEN(G$)); FIND (Z[7],KEY=A$(68,10),DOM=2321)IOL=0370
2322 IF MID(G$,402,1)="Y" THEN A[10]=1,ML_CUST_PO_TP$="1" ELSE A[10]=0,ML_CUST_PO_TP$="0" END_IF ; REFRESH_FLG=1 ! SSP#237140                            
2325 GOSUB 7500
2340 GOTO 2020
2350 SEL_PLANT:
2355 IF POS(" "<>A$(68,10))=0 OR NOT(DOING_LOT_RETURNS) THEN GOTO 2020
2360 A$(78,4)=ML_PLANT$ ! CALL "ZZENTR","SUZ",A{ALL},A$,X4$,X3$,30,9,78,4,C0,"","{3"+X$,"","IC2LAG11","FM0","",""; IF C0=6 THEN GOSUB 6400; C0=1
2364 IF POS(" "<>A$(78,4))=0 THEN GOTO 2390
2365 DIM D1$(LEN(D1$)); FIND (Z[4],KEY="P"+A$(68,10)+A$(78,4),DOM=2360)IOL=0345
2370 GOSUB 7500
2380 ML_PLANT_NAME$=L9$,REFRESH_FLG=1
2390 GOTO 2020
2400 SEL_START_NUM:
2410 A$(82,9)=PAD(ML_START_NUM$,9,0) ! CALL "ZZENTR","R",A{ALL},A$,X4$,X3$,18,18,82,9,C0,"","{3"+X$,"","IC2LAG22","","","" !SSP#236001
2415 GOSUB 8200
2420 ML_ENDING_NUM$=A$(91,9),REFRESH_FLG=1
2440 RETURN 
2450 SEL_ENDING_NUM:
2460 A$(91,9)=ML_ENDING_NUM$ ! CALL "ZZENTR","R",A{ALL},A$,X4$,X3$,18,19,91,9,C0,"","{3"+X$,"","IC2LAG24","","",""
2490 GOTO 2020
2500 SEL_COST:
2508 X$="Enter total extended cost - F2 key to extend entered cost per M"
2510 A(0)=ML_COST ! CALL "ZZENTR","NF",A{ALL},A$,X4$,X3$,45,18,0,621,C0,M0$,"{3"+X$,"","IC2LAG26","","",""
2515 REM IF C0<>11 THEN GOTO 2520  ! SSP219402 jdf
2516 REM IF A$(125,4)="    " THEN N=A[4]*A[3] ELSE N=A[4]*A[2]*A[3] ! SSP219402 jdf
2517 REM C0=1; CALL "FM2EXT",Z[13],0,"M   ",1000,N,A[0],E,2 ! SSP219402 jdf
2518 REM A[0]=E,ML_COST=A[0],REFRESH_FLG=1 ! ; PRINT @(45,18),A[0]:M0$, ! SSP219402 jdf
2520 REM %ML_COST=%ML_COST+ML_COST ! SSP219402 jdf
2540 RETURN 
2550 SEL_FREIGHT:
2560 A(1)=ML_FREIGHT ! CALL "ZZENTR","N&",A{ALL},A$,X4$,X3$,45,19,1,621,C0,M0$,"{3"+X$,"","IC2LAG28","","",""
2590 RETURN 
2600 SEL_BIN_NUMBER:
2610 A$(100,10)=ML_BIN_NUM$
2640 GOTO 2020
2650 REM "Order number
2655 GOTO 2020
2660 CALL "ZZENTR","A",A{ALL},A$,X4$,X3$,66,12,110,8,C0,"O/P","{3"+X$,"","IC2LAB32","FS1","FM2ODA",""; IF C0=6 THEN GOSUB 6400; C0=1
2670 IF V9<>-2 THEN FIND (Z[5],KEY=A$(110,8),DOM=2671)IOL=0350
2690 GOTO 2020
2700 REM "Line number on order
2710 CALL "ZZENTR","Z",A{ALL},A$,X4$,X3$,76,12,118,3,C0,"","{3"+X$,"","IC2LAB34","FS2","FM2ODB",""; IF C0=6 THEN GOSUB 6400; C0=1
2720 IF V9<>-2 THEN FIND (Z[8],KEY=A$(118,3),DOM=2721)IOL=0360
2740 GOTO 2020
2750 REM "Primary unit
2754 IF A[4]=0 THEN GOTO 2020
2755 J1=1; GOSUB 8500
2758 SEL_PRIMARY_UNIT:
2760 A$(121,4)=ML_PRIMARY_UNIT$ ! CALL "ZZENTR","SU",A{ALL},A$,X4$,X3$,J0,15,121,4,C0,"","{3"+X$,"","IC2LAG36","","",""
2764 FIND (Z[13],KEY="U/M"+A$(121,4),DOM=NO_PUM)
2765 GOSUB 8500
2770 RETURN 
2782 NO_PUM: NEXT_ID=ML_PRIMARY_UNIT.CTL,ML_PRIMARY_UNIT$="",REFRESH_FLG=1; EXIT 
2800 REM "Packaging unit
2803 IF A[2]=0 THEN GOTO 2840
2804 IF ABS(C0)>1 AND POS(" "<>A$(125,4))=0 THEN GOTO 2840
2805 J1=3; GOSUB 8500
2807 SEL_PACK_UNIT:
2810 A$(125,4)=ML_PACK_UNIT$ ! CALL "ZZENTR","SU",A{ALL},A$,X4$,X3$,J0,15,125,4,C0,"","{3"+X$,"","IC2LAG38","","",""
2814 IF POS(" "<>A$(125,4))<>0 THEN FIND (Z[13],KEY="U/M"+A$(125,4),DOM=2810)
2815 ! IF A$(125,4)="    " THEN IF A[3]=0 THEN A[3]=A[2],A[2]=0,F0$="*"; J1=-1; GOSUB 8500 ELSE A[2]=0,J1=-1; GOSUB 8500
2816 GOSUB 8200; GOSUB 8350
2820 GOSUB 8500
2840 RETURN 
2850 REM "Units per package
2854 IF A[4]=0 THEN GOTO 2020
2855 J1=2; GOSUB 8500
2857 SEL_UNIT_PP:
2860 A[2]=ML_UNIT_PP ! CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,J0,15,2,601,C0,M3$,"{3"+X$,"","IC2LAG40","","",""
2864 IF A[2]=0 THEN A$(125,4)="",ML_PACK_UNIT$="",REFRESH_FLG=1,J1=-1; GOSUB 8500
2865 GOSUB 8500
2875 GOSUB 8200; GOSUB 8350
2890 RETURN 
2900 REM "Units per primary/package unit
2903 IF A[4]=0 THEN GOTO 2020
2904 IF F0$="*" THEN F0$=""; GOTO 2940
2905 SEL_UPPU:
2908 SEL_UM_PRIMARY:
2910 A[3]=ML_UPPU ! CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,J0,15,3,601,C0,M3$,"{3"+X$,"","IC2LAG42","","",""
2920 J1=-1; GOSUB 8500
2925 GOSUB 8200; GOSUB 8350
2940 RETURN 
2950 REM "Quantity
2955 J1=0; GOSUB 8500
2958 SEL_QTY:
2960 A(4)=ML_QTY ! CALL "ZZENTR","NM&",A{ALL},A$,X4$,X3$,18,15,4,702,C0,M4$,"{3"+X$,"","IC2LAG44","","TPALAA",""; IF C0=6 THEN GOSUB 6400; C0=1
2963 REM %ML_QTY=%ML_QTY+ML_QTY ! SSP219402 jdf
2965 GOSUB 8500
2975 GOSUB 8200; GOSUB 8350
2977 ! IF ML_QTY=0 THEN NEXT_ID=CB_RUNT.CTL
2990 RETURN 
3000 SEL_SALES_PRICE:
3010 A[5]=ML_SALES_PRICE
3030 IF A[5]=0 THEN A$(129,4)="",ML_UM$="",A[6]=0,ML_UNITS_PER_UM=0; REFRESH_FLG=1
3040 GOTO 2020
3050 SEL_UM:
3060 A$(129,4)=ML_UM$
3065 IF A$(129,4)="    " AND A[5]<>0 THEN NEXT_ID=ML_UM.CTL; RETURN 
3070 IF A$(129,4)<>"    " THEN FIND (Z[13],KEY="U/M"+A$(129,4),DOM=ML_UM_MISSING)IOL=0376 ELSE A[6]=0; GOTO 3085
3080 IF G6$(21,1)="Y" THEN NEXT_ID=ML_UM.CTL; RETURN ELSE IF G6$(20,1)="Y" THEN IF G6[0]<>0 THEN A[6]=G6[0] ELSE A[6]=G6[1] END_IF ; ML_UNITS_PER_UM=A[6],REFRESH_FLG=1
3090 GOTO 2020
3095 ML_UM_MISSING: NEXT_ID=ML_UM.CTL; RETURN 
3100 SEL_UNITS_PER_UM:
3110 A[6]=ML_UNITS_PER_UM
3120 IF A[6]=0 THEN NEXT_ID=ML_UNITS_PER_UM
3140 GOTO 2020
3150 SEL_CUST_PO:
3160 A$(133,15)=ML_CUST_PO$
3190 GOTO 2020
3200 REM "Invoice number
3205 GOTO 2020
3210 CALL "ZZENTR","A",A{ALL},A$,X4$,X3$,71,15,148,7,C0,"A%R6","{3"+X$,"","IC2LAB54","","",""
3240 GOTO 2020
3250 SEL_RUNT:
3260 A$(155,1)=CB_RUNT$ ! CALL "ZZENTR","Y",A{ALL},A$,X4$,X3$,18,16,155,1,C0,"","{3"+X$,"","IC2LAG67","","",""
3290 RETURN 
3300 SEL_COMMENTS:
3310 A$(156,40)=ML_COMMENTS$ ! CALL "ZZENTR","S",A{ALL},A$,X4$,X3$,18,20,156,40,C0,"","{3"+X$,"","IC2LAG48","","",""
3340 RETURN 
3350 SEL_ITEM_REV_DATE:
3360 A$(215,6)=ML_ITEM_REV_DATE$
3390 GOTO 2020
3400 SEL_JOB_NO:
3410 A$(56,12)=ML_FACT_JOB$
3440 GOTO 2020
3450 SEL_STD_COST:
3455 IF P1$(64,1)<>"Y" THEN GOTO 2020
3457 IF SBO$(69,1)="Y" THEN GOTO 2020; REM "WO113448
3460 A[7]=ML_STD_COST
3465 IF A[7]=0 THEN A$(256,4)="",ML_STND_COST_UM$="",A[8]=0,STND_UNIT_COST_QTY=0; REFRESH_FLG=1
3490 GOTO 2020
3500 SEL_STND_COST_UOM:
3510 A$(256,4)=ML_STND_COST_UOM$
3520 IF FNS$(A$(256,4))="" THEN NEXT_ID=ML_STND_COST_UOM.CTL; RETURN ELSE FIND (Z[13],KEY="U/M"+A$(256,4),DOM=ML_STND_COST_UOM_MISSING)IOL=0377
3525 IF G7$(21,1)="Y" THEN NEXT_ID=ML_STND_COST_UOM.CTL; RETURN ELSE IF G7$(20,1)="Y" THEN IF G7[0]<>0 THEN A[8]=G7[0] ELSE A[8]=G7[1] END_IF ; ML_STND_UNIT_COST_QTY=A[8],REFRESH_FLG=1
3540 GOTO 2020
3545 ML_STND_COST_UOM_MISSING: NEXT_ID=ML_STND_COST_UOM.CTL; RETURN 
3550 SEL_STND_UNIT_COST_QTY:
3560 A[8]=ML_STND_UNIT_COST_QTY
3570 IF A[8]=0 THEN NEXT_ID=ML_STND_UNIT_COST_QTY.CTL
3590 GOTO 2020
3600 REM "Storage Expiration Date"
3605 SEL_STORAGE_EXPIRES:
3610 A$(250,6)=ML_STORAGE_EXPIRES$
3640 GOTO 2020
3650 SEL_PROD_CODE:
3660 A$(242,3)=ML_PROD_CODE$
3690 GOTO 2020
3700 SEL_COMM_CODE:
3710 A$(245,5)=ML_COMM_CODE$
3740 GOTO 2020
3750 SEL_FMS_PRICE:
3755 X$="This FMS Price will update to FMZ if entered here"
3760 A[9]=ML_FMS_PRICE
3790 GOTO 2020
3800 SEL_ML_LOT_SLSP:
3810 IF A$(263,4)=DIM(4) THEN A$(263,4)=B$(278,4),ML_LOT_SLSP$=A$(263,4) ! SSP 307499
3812 A$(263,4)=ML_LOT_SLSP$ ! SSP 307499
3815 REFRESH_FLG=1 ! SSP 307499
3890 GOTO 2020
5800 REM "Alt sort keys
5815 IF NOT(DOING_LOT_RETURNS) THEN FIND (Z[6],KEY=A$(41,9),DOM=5816)IOL=0360
5820 FIND (Z[7],KEY=A$(68,10),DOM=5821)IOL=0370
5822 IF MID(G$,402,1)="Y" THEN A[10]=1,ML_CUST_PO_TP$="1" ELSE A[10]=0,ML_CUST_PO_TP$="0" END_IF ; REFRESH_FLG=1 ! SSP#237140                            
5825 FIND (Z[4],KEY="P"+A$(68,10)+A$(78,4),DOM=5826)IOL=0345
5840 FIND (Z[13],KEY="U/M"+A$(121,4),DOM=5841)IOL=0375
5845 FIND (Z[13],KEY="U/M"+A$(129,4),DOM=5846)IOL=0376
5850 FIND (Z[13],KEY="U/M"+A$(256,4),DOM=5851)IOL=0377
5855 GOSUB ASSIGN_LIB
5890 RETURN 
6000 REM "BACKGROUND
6190 RETURN 
6200 REM "DISPLAY DATA
6212 ML_PO_NUMBER$=STP(A$(41,9)) ! CALL "ZZDISP","A",A$(41,9),"P/O",X3$,"","",18,9,X4$
6213 ML_DATE$=A$(25,6)
6214 ! CALL "ZZDISP","A",A$(68,10),"A/P",X3$,"","",18,10,X4$
6216 GOSUB 7500; ML_PLANT_NAME$=L9$; GOSUB 7500
6237 IF D9=1 THEN D9=0; RETURN ; REM "P/O stuff
6292 J1=-1; GOSUB 8500
6295 GOSUB ASSIGN_LIB
6390 RETURN 
6400 REM "WHOLE SCREEN
6490 RETURN 
6500 DELETE_REC:
6505 S1=S1-1
6506 CHANGE_FLG=0
6510 REMOVE (Z[1],KEY=A1$,DOM=6511)
6590 A1$=""
6591 GOSUB 8000
6592 GOSUB CLEAR_FIELDS; GOSUB DISPLAY_KEY; REFRESH_FLG=1
6595 RETURN 
6599 ! *********************************************
6600 REM "ALT KEY DATA READS
6605 FIND (Z[2],KEY=A$(1,10),DOM=6606)IOL=0320
6610 FIND (Z[3],KEY=A$(11,10),DOM=6611)IOL=0330
6615 FIND (Z[4],KEY=A$(21,4),DOM=6616)IOL=0340
6620 IF NOT(DOING_LOT_RETURNS) THEN FIND (Z[6],KEY=A$(41,9),DOM=6621)IOL=0360
6625 READ (Z[7],KEY=A$(68,10),DOM=6626)IOL=0370
6690 RETURN 
6699 ! 
6700 WRITE_REC:
6701 IF MID(F$,361,1)="Y" THEN A[10]=1; REM SSP 198988
6702 IF DOING_LOT_RETURNS THEN GOSUB EXTENSION_CALC ! SSP219402 jdf ssp 272902
6703 IF DOING_LOT_RETURNS THEN A$(110,11)=Q2$
6704 IF A[3]=0 THEN A[3]=A[2]; END_IF ; IF A$(125,4)="    " THEN N0=A[4]*A[3] ELSE N0=A[4]*A[2]*A[3] ! SSP 230171
6705 REM IF A$(125,4)="    " THEN A[3]=A[2],A[2]=0  ! SSP221191 jdf
6706 GOSUB 8150; S0=-1; GOSUB 8300
6707 R9$=A$(33,8),B9$=A$(100,10); DIM B8$(45); B8$(1,15)=A$(133,15),B8$(16,4)=A$(129,4),B8$(20,11)=STR(A[5]),B8$(31,9)=STR(A[6]),B8$(40,6)=A$(215,6); IF POS(" "<>A$(91,9))<>0 THEN J0=NUM(A$(91,9),ERR=6709),N9$=STR(J0+1)
6708 IF LEN(N9$)<9 THEN N9$=" "+N9$; GOTO 6708
6709 REM "If not new write out in old position, else look for new one.
6710 IF ML_UNIT_PP=0 AND ML_UPPU=0 THEN GOTO 6712 ELSE A[3]=ML_UNIT_PP,A[2]=ML_UPPU; IF EXISTING_REC OR Z9<>-1 THEN WRITE (Z[1],KEY=A1$)IOL=0310 ELSE GOSUB 7800 ! SSP219575 jdf SSP 237101 ! SSP245776 jdf SSP 251758
6711 IF LBL_PRT THEN GOSUB WMS_LABELS ! WO251758
6712 CHANGE_FLG=0
6715 RETURN 
6719 ! 
6790 C9=0; IF Z=6 OR K1=0 THEN GOTO 9900 ELSE IF Z<4 THEN GOTO 1000 ELSE C0=-(3.1+(Z-4)/10); GOTO 6800
6800 REM "NEXT ENTRY IN FILE
7200 REM "Forced read
7210 IF ERR<>0 THEN GOTO 9000
7220 CALL "ZZREAD",Z[1],A1$,A$,A{ALL},S8; ON S8 GOTO 7221,1630
7230 GOSUB 6200
7240 MSGBOX MSG("E0"),MSG("MB_ATTN"),"!"; GOTO 7290
7250 MSGBOX MSG("E0A"),MSG("MB_ATTN"),"!"; GOTO 7290
7290 GOTO 1630
7300 REM 
7310 ON FPT(C0)*10 GOTO 7390,7325,7330,7390
7325 IF V8$="" THEN X0=X0+4; GOTO 7390 ELSE X0=NUM(V8$(POS(STR(X0:"00")<=V8$,2),2)); GOTO 7390
7330 IF V8$="" THEN X0=X0-6; GOTO 7335 ELSE X0=POS(STR(X0-1:"00")<=V8$,2)-2; IF X0<0 THEN X0=0; GOTO 7390 ELSE X0=NUM(V8$(X0,2)); GOTO 7390
7335 IF X0<0 THEN X0=0; GOTO 7390
7390 IF X0>0 THEN X0=X0-0
7395 C0=3; RETURN 
7400 REM "EXTRACT
7410 EXTRACT (Z[1],ERR=7200,KEY=A1$,DOM=7440)IOL=0310
7415 IF STP(A$(25,6))="" THEN A$(25,6)=ML_DATE$ ! SSP 181457
7420 C9=1,Z9=1; GOSUB 5800
7440 RETURN 
7450 REM "EXTRACT NEW ENTRY
7460 WRITE (Z[1],KEY=A1$,DOM=7250)IOL=0310; A$(267,3)=MID(C$,109,3); GOTO 7400
7490 RETURN 
7500 REM "Print Vendor/Plant
7505 DIM D1$(200); D1$(16,117)=MID(G$,11,117)
7506 IF POS(" "<>A$(78,4))<>0 THEN FIND (Z[4],KEY="P"+A$(68,14),DOM=7507)IOL=0345
7509 L9$=FNS$(D1$(16,35))
7510 IF POS(" "<>D1$(111,16))<>0 THEN L9$=L9$+" "+FNS$(D1$(111,16))+", "+D1$(127,2)
7512 IF LEN(L9$)>45 THEN L9$=D1$(16,35)
7514 IF 20+LEN(J$)>31 THEN J0=20+LEN(J$) ELSE J0=31
7520 IF DOING_LOT_RETURNS THEN GOTO 7600
7545 RETURN 
7550 REM "Print location
7555 L9$=FNS$(D$(16,35))
7560 IF POS(" "<>D$(111,16))<>0 THEN L9$=L9$+" "+FNS$(D$(111,16))+", "+D$(127,2)
7562 IF LEN(L9$)>37 THEN L9$=D$(16,35)
7565 IF DOING_LOT_RETURNS THEN GOTO 7595
7595 RETURN 
7600 REM 
7610 ! IF LEN(L9$)>44 THEN L9$=L9$(1,44)
7630 RETURN 
7650 REM "Assign next Lot Number
7655 CALL "UPDICF;GET_NEXT_LOT_NUM",Z[13],X3$,NEXT_NUM$; A$(234,8)=NEXT_NUM$
7680 ML_LOT_NUMBER$=A$(234,8),REFRESH_FLG=1
7685 CALL "*WINGRP;SHOW",LOT_NUMBER.GRP$ ! SSP 181457
7690 RETURN 
7700 REM "Default bin number,if necessary
7703 IF POS(" "<>A$(100,10))<>0 THEN GOTO 7745
7705 DIM I9$(50)
7710 FIND (Z[12],KEY=A$(1,24),DOM=7711)IOL=0425
7715 A$(100,10)=I9$(35,10)
7718 FIND (Z[8],KEY=A$(1,20),DOM=7719)IOL=0380; IF POS(""<>A$(215,6))=0 THEN A$(215,6)=H$(167,6)
7745 RETURN 
7800 REM "Write out new transaction ensuring no duplicates
7804 K1=0
7810 WRITE (Z[1],KEY=A1$,DOM=7811)IOL=0310; GOTO 7845
7815 K1=K1+1,A1$(24,2)=FNQ$(K1),A$(31,2)=A1$(24,2)
7820 GOTO 7810
7845 RETURN 
7900 REM "Default based on Q1$ and display
7901 IF Q1$="" OR DOING_LOT_RETURNS THEN RETURN 
7905 A$(41,9)=Q1$(1,9)
7910 IF NOT(DOING_LOT_RETURNS) THEN READ (Z[6],KEY=A$(41,9),DOM=7911)IOL=0360
7915 A$(50,6)=F$(192,6),A$(68,14)=F$(7,14),A$(56,12)=F$(248,12)
7920 DIM G$(100); READ (Z[7],KEY=A$(68,10),DOM=7921)IOL=0370
7925 DIM L$(170),L[27]; READ (Z[10],KEY=A$(41,9)+Q1$(20,3),DOM=7926)IOL=0400
7927 IF POS(" "<>L$(119,12))<>0 THEN A$(56,12)=L$(119,12)
7929 GOSUB 8600
7930 IF B8$<>"" THEN GOTO 7934 ELSE DIM E$(168),E[7]; READ (Z[5],KEY=E0$,DOM=7931)IOL=0350
7932 IF F$(173,1)="S" THEN GOSUB 8650; IF L[21]<>0 THEN A$(129,4)=L$(146,4),A[5]=L[21],A[6]=L[20]
7933 A$(148,7)=E$(40,7),A$(133,15)=F$(328,15); IF L[21]=0 AND E[1]<>0 THEN A$(129,4)=E$(101,4),A[5]=E[1],A[6]=E[2]
7934 A$(1,20)=L$(91,20)
7936 A$(256,4)=L$(164,4),A[7]=L[22],A[8]=L[23],A$(242,3)=L$(156,3),A$(245,5)=L$(159,5),A$(250,6)=L$(150,6)
7945 FIND (Z[2],KEY=A$(1,10),DOM=7946)IOL=0320
7950 FIND (Z[3],KEY=A$(1,20),DOM=7951)IOL=0330
7960 GOSUB 8000
7965 REM "Wait till here to do first background so check can be made
7966 ! IF F2$<>"*" THEN CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,0; GOSUB 6000; F2$="*"
7990 GOSUB 6456; GOSUB 6200
7992 IF F$(173,1)="S" AND L[21]=0 AND E[1]<>0 THEN MSGBOX MSG("ICGLAB_13"),MSG("FYI")
7995 RETURN 
8000 REM "Setup from PO7; only do once per receipt, F0 is used to flag this
8001 REM "%R6$ is for loc entry, %R5$=listof location#(from PO3)
8002 REM "%R4(),%R5(),%R6(),%R7() match %R5$ list, Only room for 25 locations setup now, see line 8013 to change
8003 REM "%R4=qty lotted so far,%R5=qty, %R6=extension, %R7=freight****> being ignored until freight by line implemented;see lines 8040,8070,8315,8365
8004 REM "R$ will be the master PO7 record for this line.
8005 IF F0=1 THEN A$(25,6)=R$(39,6); RETURN ! SSP 230171
8008 REM "Read base PO7 record, if special ship it will pos file for other reads, for general ship, extract so it will be picked up @ 8015
8009 DIM R$(61),R[6]
8010 IF MID(L$,14,1)="Y" THEN READ (Z[9],KEY=Q1$(1,22)+" ",DOM=8011)IOL=0410 ELSE EXTRACT (Z[9],KEY=Q1$(1,22)+" ",DOM=8011)IOL=0410 ! SSP 181457
8012 A$(25,6)=R$(39,6)
8013 DIM R0$(61),R0[6],%R4[25],%R5[25],%R6[25],%R7[25]; %R5$="",%R6$="Select location from:"
8014 REM "Read thru PO7 for lines that match to add to %R5$ and %R5
8015 READ (Z[9],END=8050)IOL=0415
8020 IF R0$(1,22)<>Q1$(1,22) THEN GOTO 8050
8024 REM "Read PO3 record, if not D location then, skip; read for s/o line, p/o line, s/o general, p/o general
8025 READ (Z[11],KEY=R0$(1,8)+" "+R0$(20,4),DOM=8026)IOL=0420; GOTO 8030
8026 READ (Z[11],KEY=R0$(1,9)+R0$(20,4),DOM=8027)IOL=0420; GOTO 8030
8027 READ (Z[11],KEY=R0$(1,8)+" "+"   "+R0$(23,1),DOM=8028)IOL=0420; GOTO 8030
8028 READ (Z[11],KEY=R0$(1,9)+"   "+R0$(23,1),DOM=8015)IOL=0420
8030 IF S9$(11,1)<>"D" THEN GOTO 8015
8035 %R5$=%R5$+S9$(12,4),%R6$=%R6$+" "+S9$(12,4)
8040 I0=INT(LEN(%R5$)/4),%R5[I0]=R0[0],%R6[I0]=R0[2]; REM ",%R7(I0)=NUM(R0$(51,11),ERR=08041)
8045 GOTO 8015
8049 REM "Now read thru POH and add any existing records
8050 IF %R5$="" THEN CMD_STR$="END"; EXIT ! ;%R5$="0001",%R5=1000,%R5[1]=1000 ! TEST  IF %R5$="" THEN EXITTO 9905
8051 READ (Z[1],KEY=Q1$(1,9)+Q1$(20,3),DOM=8052)
8054 DIM A0$(269),A0[12]; F1$=""
8055 X$=KEY(Z[1],END=8090); READ (Z[1],KEY=X$)IOL=0315
8058 IF X$(1,12)<>Q1$(1,9)+Q1$(20,3) THEN GOTO 8090
8064 F1$="*"
8065 I0=INT(POS(A0$(21,4)=%R5$,4)/4)+1
8066 R9$=A0$(33,8),B9$=A0$(100,10); DIM B8$(45); B8$(1,15)=A0$(133,15),B8$(16,4)=A0$(129,4),B8$(20,11)=STR(A0[5]),B8$(31,9)=STR(A0[6]),B8$(40,6)=A$(215,6); IF POS(" "<>A0$(91,9))<>0 THEN J0=NUM(A0$(91,9),ERR=8067),N9$=STR(J0+1)
8067 IF A0[3]=0 THEN A0[3]=A0[2] ! SSP221191 jdf  
8068 S1=NUM(A0$(31,2),ERR=*NEXT)
8069 IF A0$(125,4)="    " THEN N0=A0[4]*A0[3] ELSE N0=A0[4]*A0[2]*A0[3]
8070 IF _YESNO$="YES" OR STR(_YESNO$)="" THEN %R6[I0]=%R6[I0]-A0[0],%R4[I0]=%R4[I0]+N0 ! SE IF ML_LEFT_TO_DO=0 THEN %R4[I0]=%R5[I0] ELSE %R4[I0]=EXTENSION REM ",%R7(I0)=%R7(I0)-A0(1)  ! SSP221191 jdf  ! SSP234982 jdf SSP 230171
8075 GOTO 8054
8090 F0=1
8091 IF F1$="*" THEN F1$="" ELSE GOTO 8094
8092 IF LEN(N9$)<9 THEN N9$=" "+N9$; GOTO 8092
8093 S1=S1+1,A$(31,2)=STR(S1:"00"),A$(33,8)=R9$,A$(100,10)=B9$,A$(82,9)=N9$; A$(133,15)=B8$(1,15),A$(129,4)=B8$(16,4),A[5]=NUM(B8$(20,11)),A[6]=NUM(B8$(31,11)),A$(215,6)=B8$(40,6)
8095 RETURN 
8100 REM "Display the amount remaining
8102 IF DOING_LOT_RETURNS THEN RETURN 
8105 I0=INT(POS(A$(21,4)=%R5$,4)/4)+1
8107 REM IF %R4[I0]>%R5[I0] THEN %R4[I0]=%R5[I0] ! SSP230730 jdf
8110 ML_LEFT_TO_DO=%R5[I0]-%R4[I0],ML_LEFT_TO_DO$=STR(ML_LEFT_TO_DO); REFRESH_FLG=1 ! SSP221191 jdf
8145 RETURN 
8150 REM "Add amount N0 To %R4$ bucket
8153 IF DOING_LOT_RETURNS THEN Q0=Q0+N0; RETURN 
8155 I0=INT(POS(A$(21,4)=%R5$,4)/4)+1
8156 %R4[I0]=%R4[I0]+N0 ! SSP 230171
8161 IF N0<>0 AND %N0=0 THEN %N0=N0 ! SSP230730 jdf
8163 R10=R10+N0; IF N0=0 THEN IF R10<>%N0 AND R10<>-(EXTENSION) THEN R10=%N0 ! SSP219575 jdf ! SSP230730 jdf
8165 GOSUB 8500
8195 RETURN 
8200 REM "Setup ending number based on starting number
8205 IF POS(" "<>A$(82,9))=0 THEN GOTO 8245
8210 J0=NUM(A$(82,9),ERR=8245)
8213 IF A[3]=0 THEN A[3]=A[2] ! ,A[2]=0  SSP221191 jdf
8215 IF A$(125,4)="    " THEN N0=A[4]*A[3] ELSE N0=A[4]*A[2]*A[3]
8220 J0=J0+N0-1
8230 J$=STR(J0)
8235 IF LEN(J$)<9 THEN J$=" "+J$; GOTO 8235
8238 A$(91,9)=J$
8245 RETURN 
8300 REM "Update cost and freight buckets
8302 IF DOING_LOT_RETURNS THEN Q1=Q1-S0*A[0]; RETURN ; REM 'YES IT IS Q1-S0
8305 I0=INT(POS(A$(21,4)=%R5$,4)/4)+1
8310 %R6[I0]=%R6[I0]+S0*A[0] ! SSP219402 jdf SSP 237017
8315 REM LET %R7(I0)=%R7(I0)+S0*A(1)
8345 RETURN 
8350 REM "Calculate cost and freight
8353 IF DOING_LOT_RETURNS THEN RETURN 
8355 I0=INT(POS(A$(21,4)=%R5$,4)/4)+1
8357 IF A$(125,4)="    " THEN N0=A[4]*A[2] ELSE N0=A[4]*A[2]*A[3]
8360 IF %R5[I0]-%R4[I0]=0 THEN A[0]=0 ELSE A[0]=%R6[I0]*N0/(%R5[I0]-%R4[I0])
8365 REM IF %R5(I0)-%R4(I0)=0 A(1)=0 ELSE LET A(1)=%R7(I0)*N0/(%R5(I0)-%R4(I0))
8370 IF ID$<>"ML_QTY" THEN ML_COST=A[0],REFRESH_FLG=1 ! SSP230730 jdf
8395 RETURN 
8400 REM "Check if qty, cost, and freight are fully extended
8401 IF DOING_LOT_RETURNS THEN RETURN 
8405 X$="",I0=INT(LEN(%R5$)/4)
8406 JUST_EXIT=0 ! SSP 230171
8407 ! 0=INT(LEN(%R5$)/4) ! SSP219575 jdf
8409 REM "See if any non-zero amounts are left to distribute
8410 FOR I=1 TO I0
8411 ! IF (%R5[I]-%R4[I])=0 THEN %R6[I]=0 ! SSP221191 jdf ! SSP230730 jdf SSP 230171 - This line commented out to allow checking of unbalanced costs
8412 IF %R5[I]-%R4[I]<>0 OR (%R6[I]<>0 AND L$(77,4)<>"LOT") OR %R7[I]<>0 THEN EXITTO 8420 ! SSP219575 jdf
8414 NEXT I
8415 OK_TO_EXIT=1,%R10=0,CHANGE_FLG=0; FOR I=1 TO I0; %R4[I]=0,%R5[I]=0,%R6[I]=0,%R7[I]=0; NEXT I; RETURN ; REM "if still here then all are zero, we're ok ! SSP219402 jdf ! SSP230730 jdf
8437 ML_LEFT_TO_DO=%R5[I0]-%R4[I0],ML_LEFT_TO_DO$=STR(ML_LEFT_TO_DO),%ML_LEFT_TO_DO=ML_LEFT_TO_DO,%ML_LEFT_TO_DO$=ML_LEFT_TO_DO$; REFRESH_FLG=1 ! SSP230730 jdf
8438 IF NEW_POH<>1 THEN IF ML_LEFT_TO_DO=EXTENSION THEN ML_LEFT_TO_DO=0,ML_LEFT_TO_DO$="",%ML_LEFT_TO_DO=0,%ML_LEFT_TO_DO$="",CMD_STR$="END"; GOTO 8445 ! SSP249318 jdf  
8440 PROCESS "ICGLAB.1","../ICG/IC.EN"
8445 IF %SKIP_CHECK THEN %SKIP_CHECK=0,OK_TO_EXIT=1 ELSE OK_TO_EXIT=0 ! IF NOT(END_PROG) THEN EXITTO 1100
8446 RETURN 
8500 REM "Display Qty and set J0 to xpos of input of field J1
8501 REM "J1 -1=display, 0=qty, 1=primary unit, 2=units/package, 3=package, 4=unit/primary/package
8505 J0$="",J0=0; IF A[4]=0 THEN RETURN 
8510 IF J1=0 THEN J0$=STR(A[4]:M4$) ELSE J0$=FNR$(STR(A[4]:M4$))
8512 IF J1=1 THEN J0=18+LEN(J0$)
8515 IF POS(" "<>A$(121,4))<>0 THEN IF A[4]>1 THEN J0$=J0$+FNS$(A$(121,4))+"s of " ELSE J0$=J0$+FNS$(A$(121,4))+" of "
8517 IF J1=2 THEN J0=18+LEN(J0$); IF A[3]<>0 AND POS(" "<>A$(125,4))=0 THEN J0$=J0$+S0$(1,LEN(M3$))+" of "
8520 IF A[2]<>0 THEN IF J1=2 THEN J0$=J0$+STR(A[2]:M3$) ELSE J0$=J0$+FNR$(STR(A[2]:M3$))
8522 IF J1=3 THEN J0=18+LEN(J0$); IF A[3]<>0 AND POS(" "<>A$(125,4))=0 THEN J0$=J0$+"     of "
8525 IF POS(" "<>A$(125,4))<>0 THEN IF A[2]>1 THEN J0$=J0$+FNS$(A$(125,4))+"s of " ELSE J0$=J0$+FNS$(A$(125,4))+" of "
8527 IF J1=4 THEN J0=18+LEN(J0$)
8530 IF J1<>4 AND A[3]<>0 THEN J0$=J0$+FNR$(STR(A[3]:M3$))
8535 IF A$(125,4)="    " THEN Q=A[4]*ML_UNIT_PP ELSE Q=A[4]*ML_UPPU*ML_UNIT_PP
8540 EXTENSION=Q,REFRESH_FLG=1 ! @(18,15),J0$,S0$(1,51-LEN(J0$)),Q:M4$,
8545 RETURN 
8600 REM "Setup key E0$ for FS6 read
8602 IF F$(173,1)="S" THEN L$(11,3)=L$(7,3)
8605 E0$=F$(179,10)
8606 REM "This is here because L$(10,1) is set to "I" at line 8240 in FM2ODZ, because a D special shipping record was detected.
8607 IF POS(" "<>L$(91,10))<>0 THEN E0$=E0$+"B"; GOTO 8620
8610 ON POS(L$(10,1)="CXINS") GOTO 8620,8611,8612,8613,8614,8615
8611 E0$=E0$+"B"; GOTO 8620
8612 E0$=E0$+"D"; GOTO 8620
8613 E0$=E0$+"F"; GOTO 8620
8614 E0$=E0$+"H"; GOTO 8620
8615 E0$=E0$+"J"; GOTO 8620
8620 E0$=E0$+L$(101,10)+L$(82,8)+CHR(NUM(L$(11,3))+48)
8640 RETURN 
8650 REM "Ship and bill - stock p/o
8670 FIND (Z[8],KEY=L$(91,20),DOM=8690)IOL=0380
8680 IF H[3]<>0 THEN E$(101,4)=H$(100,4),E[1]=H[3],E[2]=H[4]
8690 RETURN 
8800 REM "Total up any exist records on the same day that belong to this line
8805 DIM A$(269),A[12]
8810 READ (Z[1],KEY=Q1$(1,30),DOM=8811)
8815 READ (Z[1],END=8840)IOL=0310
8819 IF A$(110,11)<>Q2$ THEN GOTO 8815
8825 IF A$(125,4)="    " THEN N0=A[4]*A[3] ELSE N0=A[4]*A[2]*A[3]
8830 Q0=Q0+N0,Q1=Q1+A[0],S1=NUM(A$(31,2),ERR=8831)
8835 GOTO 8815
8845 RETURN 
8850 REM "PRINT P/O AND VENDOR STUFF
8855 CALL "ZZDISP","A",A$(41,9),"P/O",X3$,"","",18,3+V1,X4$
8865 CALL "ZZDISP","A",A$(68,10),"A/P",X3$,J$,"",18,4+V1,X4$
8875 GOSUB 7500
8895 RETURN 
8905 DEF FNP$(Z9$)="("+Z9$(1,3)+") "+Z9$(4,3)+"-"+Z9$(7,4)+" Ext: "+Z9$(11,4)
8910 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
8915 DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
8920 DEF FNB$(Z9$)=X3$(214-6*NUM(Z9$),1)
8925 DEF FNS$(Z9$)=Z9$(1,POS("     "=Z9$+"     ")-1)
8930 DEF FNR$(Z9$)=Z9$(POS(" "<>Z9$))
8935 DEF FNQ$(Z9)=CHR(32+INT(Z9/95))+CHR(32+MOD(Z9,95))
8949 DEF FNC$(Z9$)=Z9$(1,POS(" "=Z9$+" ")-1)
8950 REM "Program flow logic
8951 REM "Q1$:(1,9)=P/O#, (10,10)=A/P INV#, (20,3)=P/O LINE#
8958 REM LET Q1$="00006914 6914      001"
8960 DIM U0$(6); U0$(1)=FID(0),U0$=U0$+"PF"; CLOSE (14); OPEN (14)"ZZPARM"
8970 FIND (14,KEY=U0$,DOM=8990)U0$,U1$
8975 IF U1$="" THEN Q1$=""; GOTO 8990
8980 Q1=NUM(U1$(7,2)),Q1$=U1$(9,Q1),U1$=U1$(Q1+9)
8990 RETURN 
9000 REM "ERROR PROCESSING
9010 Y5=ERR,Y6=TCB(5); IF Y5=68 OR Y5=69 THEN GOTO 9500
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9120 ON Y8 GOTO 9900,0990,9920
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)<>"1" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; SETESC 9300; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9700 REM "PROG FLOW
9710 IF U1$="" THEN REMOVE (Z[13],KEY=U0$,DOM=9900); GOTO 9900
9720 WRITE (Z[13],KEY=U0$)U0$,U1$
9730 RUN U1$(1,6)
9740 RETURN 
9750 REM "FILES
9760 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
9790 RETURN 
9800 REM "EXIT PROGRAM
9900 END_PROG:
9901 IF DOING_LOT_RETURNS THEN GOTO 9920
9902 IF ML_LEFT_TO_DO THEN MSGBOX MSG("ICGLAB_14"),MSG("WARNING"),"STOP"; IGNORE_EXIT=1; EXIT 
9905 Y8=2
9920 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; IF DOING_LOT_RETURNS THEN Q0$=STR(Q0),ARG_3$=Q0$,Q1$=STR(Q1),ARG_4$=Q1$ ELSE Q1$=A1$,ARG_4$=Q1$
9935 EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
10000 ASSIGN_LIB:
10010 ML_CUSTOMER$=A$(1,10),ML_ITEM_CODE$=A$(11,10)
10020 DB_LOC$=A$(21,4),ML_DATE$=A$(25,6),ML_SEQ$=A$(31,2)
10030 ML_REC_REPORT$=A$(33,8),ML_PO_NUMBER$=A$(41,9),ML_PO_DATE$=A$(50,6)
10040 ML_FACT_JOB$=A$(56,12),ML_VENDOR$=A$(68,10),ML_PLANT$=A$(78,4)
10050 ML_START_NUM$=A$(82,9),ML_ENDING_NUM$=A$(91,9),ML_BIN_NUM$=A$(100,10)
10060 ML_CUST_PO$=A$(133,15),ML_ITEM_REV_DATE$=A$(215,6),ML_COMMENTS$=A$(156,40),ML_LOT_SLSP$=A$(263,4)
10065 ML_LOT_NUMBER$=A$(234,8),ML_STORAGE_EXPIRES$=A$(250,6)
10066 ML_STD_COST=A[7],ML_PROD_CODE$=A$(242,3),ML_COMM_CODE$=A$(245,5)
10068 ML_FMS_PRICE=A[9],ML_UM$=A$(129,4),ML_UNITS_PER_UM=A[6]
10069 ML_STND_COST_UOM$=A$(256,4),ML_STND_UNIT_COST_QTY=A[8]
10070 ML_COST=A(0),ML_FREIGHT=A(1),ML_QTY=A(4),REFRESH_FLG=1
10080 ML_SALES_PRICE=A(5),%PLANT_VEND$=ML_VENDOR$,CB_RUNT$=A$(155,1)
10085 ML_PRICE_CLASS$=A$(267,3)
10090 CALL "ZZWLKU;PARSE_CUST",ML_CUSTOMER$,%CUST_DIV$,%CUST_CODE$
10100 ML_PRIMARY_UNIT$=A$(121,4),ML_UNIT_PP=A[2],ML_PACK_UNIT$=A$(125,4),EXTENSION=Q0,ML_UPPU=A[3]
10105 IF A$(125,4)="    " AND A[3]<>0 THEN A[2]=A[3],A[3]=0,ML_UNIT_PP=A[2],ML_UPPU=0
10110 GOSUB 8500
10115 GOSUB 8100 ! SSP 230171
10199 RETURN 
11000 CREATE_STORAGE_EXPIRED:! SSP 200130
11005 IF LEN(L$)=0 THEN RETURN ! ssp 203785
11010 O_D$=ML_DATE$; CALL "ZZWDTE;DISPLAY",O_D$,OUT_D$
11015 IF X3$(48,1)="1" THEN OUT$="%Mz/%Dz/%Yl",MMM=1,DDD=4,YYY=7 ELSE IF X3$(48,1)="2" THEN OUT$="%Dz/%Mz/%Yl",MMM=4,DDD=1,YYY=7 ELSE MMM=5,DDD=7,YYY=1,OUT$="%Yl/%Mz/%Dz"
11020 MM=NUM(MID(O_D$,MMM,2)),DD=NUM(MID(O_D$,DDD,2)),YY=NUM(MID(O_D$,YYY,4))
11025 IF POS(X3$(9,3)="139")<>0 AND L[24]=0 THEN L[24]=12 ! SSP#210491
11030 FOR AA=1 TO L(24)
11040 MM+=1; IF MM=13 THEN MM=1,YY+=1
11050 NEXT 
11055 IF MM=2 AND DD>=29 THEN DD=28
11060 ML_STORAGE_EXPIRES$=DTE(JUL(YY,MM,DD,ERR=BAD_DATE):OUT$,ERR=BAD_DATE)
11070 CALL "ZZWDTE;VALIDATE",ML_STORAGE_EXPIRES$,JJ$,JJJ$
11075 A$(250,6)=ML_STORAGE_EXPIRES$
11080 RETURN 
11090 BAD_DATE: DD=DD-1; GOTO 11060
12000 QUERY_TEST:ENTER VAL$
12010 IF POS(%POH_START_KEY$=VAL$)<>1 THEN EXIT 123
12020 EXIT 
13000 CHECK_CHANGES:
13005 NO_CHANGE=0 ! ssp 227173
13010 IF CHANGE_FLG=0 THEN GOTO *RETURN ! SSP219402 jdf
13020 MSGBOX MSG("REC_ALTERD"),MSG("UPDATE"),"?,Yesno",_YESNO$
13030 IF _YESNO$="NO" THEN CHANGE_FLG=0; %_YESNO$="NO",NO_CHANGE=1; RETURN ! SSP230730 jdf SSP 227173
13035 %_YESNO$="" ! SSP230730 jdf
13040 GOSUB WRITE_REC
13050 GOSUB CLEAR_FIELDS ! SSP219575 jdf
13055 IF DOING_LOT_RETURNS THEN RETURN ! SSP 227173
13058 GOSUB DISPLAY_KEY ! SSP 227173
13060 RETURN 
13100 CLEAR_FIELDS: REFRESH_FLG=1
13110 ML_SEQ$="",ML_REC_REPORT$="",ML_PO_NUMBER$="",ML_PO_DATE$=""
13130 ML_VENDOR2$=ML_VENDOR$,ML_PLANT2$=ML_PLANT$ ! SSP230730 jdf
13140 ML_FACT_JOB$="",ML_VENDOR$="",ML_PLANT$="",ML_START_NUM$="",ML_ENDING_NUM$="",ML_BIN_NUM$=""
13145 ML_CUSTOMER2$=ML_CUSTOMER$,ML_ITEM_CODE2$=ML_ITEM_CODE$,DB_LOC2$=DB_LOC$ ! SSP230730 jdf
13150 ML_UPU=0,ML_CUSTOMER$="",ML_ITEM_CODE$="",DB_LOC$=""
13155 ML_LOT_NUMBER$="",ML_STORAGE_EXPIRES$="",ML_STD_COST=0,ML_PROD_CODE$="",ML_COMM_CODE$="",ML_FMS_PRICE=0,ML_UM$="",ML_UNITS_PER_UM=0,ML_STND_COST_UOM$="",ML_STND_UNIT_COST_QTY=0
13160 ML_CUST_PO$="",ML_ITEM_REV_DATE$="",ML_COMMENTS$="",ML_LOT_SLSP$=""
13170 ML_COST=0,ML_FREIGHT=0,ML_QTY=0,REFRESH_FLG=1,ML_PLANT_NAME$=""
13180 ML_SALES_PRICE=0,%PLANT_VEND$=ML_VENDOR$,CB_RUNT$="N"
13190 ML_PRIMARY_UNIT$="",ML_UNIT_PP=0,ML_PACK_UNIT$="" ! , EXTENSION=0 ! , ML_LEFT_TO_DO=0,ML_LEFT_TO_DO$="" ! SSP221191 jdf
13195 CHANGE_FLG=0
13210 RETURN 
13250 CLEAR_FIELDS2:! SSP230730 jdf
13255 ML_START_NUM$="",ML_ENDING_NUM$="",ML_COST=0,ML_FREIGHT=0,ML_PRICE_CLASS$="",ML_COMMENTS$="",ML_QTY=0,ML_PRIMARY_UNIT$="",ML_UNIT_PP=0,ML_PACK_UNIT$="",ML_UPPU=0,EXTENSION=0,REFRESH_FLG=1 ! SSP230730 jdf
13260 RETURN ! SSP230730 jdf
13300 LOAD_LOC:! load DB_LOC with available locations from %R5$
13305 DROP_BOX LOAD DB_LOC.CTL,"",ERR=*NEXT
13310 IF NUL(%R5$) THEN RETURN 
13320 FOR II=1 TO INT(LEN(%R5$)/4)
13330 DIM D$(100); FIND (Z[4],KEY="D"+DIM(10)+MID(%R5$,(II*4)-3,4),DOM=*CONTINUE)D$(1)
13350 DROP_BOX LOAD DB_LOC.CTL,++DB_INDEX,MID(%R5$,(II*4)-3,4)+" - "+D$(16,35),ERR=*NEXT
13380 NEXT II
13390 DROP_BOX WRITE DB_LOC.CTL,1,ERR=*NEXT
13392 IF LEN(%R5$)=4 THEN DISABLE CONTROL DB_LOC.CTL; NEXT_ID=ML_SEQ.CTL ELSE ENABLE CONTROL DB_LOC.CTL; NEXT_ID=DB_LOC.CTL
13395 RETURN 
13399 ! ***************************************************
13500 SEL_BUTTONS:
13510 FOR BUT=1 TO 5
13515 IF POS(STR(BUT)="135")<>0 THEN VAL=EVN("BT_"+STR(BUT)+".CTL"),VAL$=VAL'TEXT$,DD=POS("{"=VAL$); IF DD<>0 THEN VAL$=VAL$(1,DD-1),VAL'TEXT$=VAL$; CONTINUE
13520 VAL=EVN("BT_"+STR(BUT)+".CTL"),VAL$=VAL'TEXT$,DD=POS("}"=VAL$); IF DD<>0 THEN VAL$=VAL$(DD+1),VAL'TEXT$=VAL$
13525 ! IF BUT=5 THEN VAL'LINE=18.9,VAL'HEIGHT=30
13530 NEXT BUT
13535 IF BT<>0 AND POS(STR(BT)="135")<>0 THEN VAL=EVN("BT_"+STR(BT)+".CTL"),VAL'TEXT$=VAL'TEXT$+"{!Arrow_Down}"; GOTO 13545
13540 IF BT<>0 THEN VAL=EVN("BT_"+STR(BT)+".CTL"),VAL'TEXT$="{!Arrow_Down}"+VAL'TEXT$
13545 ! IF BT=5 THEN VAL'LINE=18.15,VAL'HEIGHT=40
13550 RETURN 
14000 LOAD_REMAINING:! load REMAINING.CTL list box with remaining stuff to do
14005 M0$="###,###.00-",M1$="####,###.00-",M2$="###,##0-",M3$="###,##0-",M4$="#,###,##0-"
14010 LIST_BOX LOAD REMAINING.CTL,"",ERR=*NEXT
14015 FOR I=1 TO INT(LEN(%R5$)/4)
14018 REM IF (%R5[I]-%R4[I])=0 THEN %R6[I]=0 ! SSP221191 jdf ! SSP230730 jdf
14019 AMT_LFT=%R5[I]-%R4[I]; AMT_LFT$=STR(AMT_LFT); REM IF NUM(AMT_LFT$,ERR=*NEXT)<0 THEN IF %R10<>0 AND %_YESNO$<>"NO" THEN AMT_LFT$=STR(-(%R10):M4$) ELSE AMT_LFT$=STR(0:M4$),%OK_TO_EXIT=1,%R6[I]=0 ! SSP230730 jdf
14020 LIST_BOX LOAD REMAINING.CTL,0,""+SEP+%R5$(I*4-3,4)+SEP+AMT_LFT$+SEP+STR(%R6[I]:M0$)+SEP+STR(%R7$:M0$)+SEP+$0A$,ERR=*NEXT ! SSP230730 jdf
14080 NEXT I
14095 RETURN 
14099 ! *************************************
14100 EXIT_CHECKS:! we're getting ready to exit, so check stuff
14101 REM IF ID$="BT_EXIT" AND DOING_LOT_RETURNS THEN CMD_STR$="E"; EXIT ! SPP219402 jdf
14102 GOSUB CHECK_CHANGES
14103 REM R10=R10+N0; ML_LEFT_TO_DO=%R5[I0]-%R4[I0]-Q-R10 ! SSP230730 jdf
14106 IF ID$="BT_EXIT" AND DOING_LOT_RETURNS THEN GOSUB WRITE_REC; CMD_STR$="E",%R10=0,%N0=0; GOTO END_PROG ! EXIT ! SSP219402 jdf ! SSP230730 jdf SSP272120
14110 GOSUB 8400
14120 IF (%OK_TO_EXIT<>0 OR OK_TO_EXIT<>0 OR JUST_EXIT<>0) THEN CMD_STR$="END",ML_LEFT_TO_DO=0,%OK_TO_EXIT=0,ML_LEFT_TO_DO$="",%ML_LEFT_TO_DO=0,%ML_LEFT_TO_DO$="",%R10=0,%N0=0,CHANGE_FLG=0; DIM %R4[25],%R5[25],%R6[25] ELSE CALL "*WINGRP;ENABLE",REAL_KEY.GRP$; NEXT_ID=ML_SEQ.CTL,ML_CUSTOMER$=ML_CUSTOMER2$,ML_ITEM_CODE$=ML_ITEM_CODE2$,DB_LOC$=DB_LOC2$,ML_VENDOR$=ML_VENDOR2$,ML_PLANT$=ML_PLANT2$; REFRESH_FLG=1 ! GOSUB 1200 ! SSP 181457  ! SSP221191 jdf ! SSP230730 jdf  SSP 227173
14140 IF EXISTING_REC AND NO_CHANGE THEN GOSUB WRITE_REC; EXISTING_REC=0,NO_CHANGE=0 ! SSP 230171
14195 RETURN 
14199 ! ********************************************
15000 SELECT_PRICE_CLASS:
15010 ML_PRICE_CLASS$=PAD(ML_PRICE_CLASS$,3)
15050 NOF=0; IF ML_PRICE_CLASS$<>DIM(3) THEN NOF=1; FIND (Z[25],KEY="I"+ML_PRICE_CLASS$,DOM=*NEXT)PRICE_CLASS$; NOF=0
15060 IF NOF THEN MSGBOX MSG("NOF"); NEXT_ID=ML_PRICE_CLASS.CTL ELSE A$(267,3)=ML_PRICE_CLASS$
15090 EXIT 
16000 EXTENSION_CALC:! Calculates the Extension ! SSP219402 jdf
16005 REM IF POS(ML_SEQ$=%BT_ML_SEQ$)>0 AND STP(ID$)="BT_EXIT" THEN GOTO 6711 ! SSP219402 jdf
16010 IF POS(ML_SEQ$+"!"=%BT_ML_SEQ$)>0 THEN {! SSP219402 jdf SSP 307343
16020 SUBT=POS(","=%BT_ML_SEQ$(POS(ML_SEQ$+"!"=%BT_ML_SEQ$)+3)) ! SSP219402 jdf SSP 307343
16030 SUBTRACT_AMT$=%BT_ML_SEQ$((POS(ML_SEQ$+"!"=%BT_ML_SEQ$)+3),SUBT-1) ! SSP219402 jdf SSP 307434
16031 SUB_EXT$=SUBTRACT_AMT$(1,POS(":"=SUBTRACT_AMT$)-1) ! SSP219402 jdf
16032 SUBTRACT_QTY$=SUBTRACT_AMT$(POS(":"=SUBTRACT_AMT$)+1,POS(":"=SUBTRACT_AMT$,1,2)-1-POS(":"=SUBTRACT_AMT$)) ! SSP219402 jdf
16034 SUBTRACT_COST$=SUBTRACT_AMT$(POS(":"=SUBTRACT_AMT$,1,2)+1,SUBT-1-POS(":"=SUBTRACT_AMT$,1,2)) ! SSP219402 jdf
16036 %ML_QTY=%ML_QTY-NUM(SUBTRACT_QTY$)+ML_QTY ! SSP219402 jdf
16038 %ML_COST=%ML_COST-NUM(SUBTRACT_COST$)+ML_COST ! SSP219402 jdf
16040 %EXTENSION=%EXTENSION-NUM(SUB_EXT$)+EXTENSION ! SSP219402 jdf
16045 %BT_ML_SEQ$=STP(SUB(%BT_ML_SEQ$,ML_SEQ$+"!"+SUBTRACT_AMT$,ML_SEQ$+"!"+STR(EXTENSION)+":"+STR(ML_QTY)+":"+STR(ML_COST),1),3) ! SSP219402 jdf SSP307343
16050  } ELSE { %EXTENSION=%EXTENSION+EXTENSION; %ML_QTY=%ML_QTY+ML_QTY; %ML_COST=%ML_COST+ML_COST ! SSP219402 jdf
16060 %BT_ML_SEQ$=%BT_ML_SEQ$+ML_SEQ$+"!"+STR(EXTENSION)+":"+STR(ML_QTY)+":"+STR(ML_COST)+"," } ! SSP219402 jdf SSP 307343
16065 IF STP(ML_PRIMARY_UNIT$)<>"" THEN %ML_PRIMARY_UNIT$=ML_PRIMARY_UNIT$ ! SSP219402 jdf
16067 IF POS(ML_SEQ$+"!"=%BT_ML_SEQ$)>0 AND STP(ID$)="BT_EXIT" THEN GOTO 6712 ! SSP219402 jdf SSP251758 SSP307343
16070 RETURN ! SSP219402 jdf
17000 WMS_LABELS:! WO251758
17010 MSGBOX MSG("PRINT_LBL"),MSG("CONFIRM"),"?,YESNO",_YESNO$; IF _YESNO$="NO" THEN RETURN 
17030 WM1$=A$,WM2$=STR(A[3]),WM3$=B$(11,30)
17050 PROCESS "RFGRFQ","../RFG/RF.EN",X3$,X4$,WM1$,WM2$,WM3$
17090 RETURN 
17099 ! 
56000 ! "181457-GUI, order entry. Cannot enter a negative requisition       
56002 REM "190538-Item price class pricing by bin identifier.                 
56003 REM "198988-Manage Customer Supplied Inventory. Item Setup, Purch ord   
56004 ! "200130-Storage Expiration Date (SED) needs to be entered at the    
56008 ! "203785-Trying to enter an order going back to inventory but she is 
56009 ! "       getting a negative value."
56010 ! "211860-GUI release. In PO Lot receiving, you will get stuck if     
56011 ! "       all you are doing is looking at the initial setup.
56012 REM "219575-Issue with PO receiving and stuck in lot receiving, when.   
56013 REM "219575-Issue with PO receiving and stuck in lot receiving, when.   
56015 REM "219402-Stock return in order entry, doesn't allow me to over ride  
56016 REM "236001-Numbered item issue in PO Receiving                         
56017 REM "230730-Trying to Lot receive a roll item into inventory and getting
56018 REM "245776-Program ICGLAB Zero  Lot records are being created in PO    
56019 REM "251758-How to handle a negative release with WMS Labeling          
56020 REM "266585-GUI PO rec'g - Lot Setup screen for numbered items.  If you 
56021 REM "272902-GUI Returns - if multiple lots are setup during a return,   
56022 REM "307343-Error 47 when doing stock return                            
56023 REM "307483-DBD-457:Support for IMS price in purchase order line        
56024 REM "307499-Salesperson Code not being updated during PO receiving      
