0010 ! ICGMFA - Pricing Table Setup
0035 REM "5.7 - 03/16/15 - 9.776666 - tma - SSP# 271169
0037 REM "271169-Idea Bank:  Pricing Table Setup.  Would like to have a right
0040 REM "Copyright 2015 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "ICGMFA","../ICG/IC.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0114 ! [202450]-Added the IOLIST for XPP at line 115
0115 DIM A[24]
0116 IOLIST A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15],A[16],A[17],A[18],A[19],A[20],A[21],A[22],A[23],A[24]
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=2,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0155 FMPIOL$="IOLIST P_CONSTANT$:[CHR(1,SEP=SEP)],ITEM_PRICE_CLASS$:[CHR(3,SEP=SEP)],CUST_PRICE_CAT$:[CHR(3,SEP=SEP)],PRICE_TBL_DESC$:[CHR(30,SEP=SEP)],CALC_METHOD$:[CHR(1,SEP=SEP)],BASIS_COST$:[CHR(1,SEP=SEP)],SELL_UM$:[CHR(5,SEP=SEP)],FIXED_ITEM_FLAG$:[CHR(1,SEP=SEP)],TF_UNUSED$:[CHR(SEP,SIZ=5)],QTY_SELLING_UNIT,QTY_01,PCNT_01,QTY_02,PCNT_02,QTY_03,PCNT_03,QTY_04,PCNT_04,QTY_05,PCNT_05,QTY_06,PCNT_06,QTY_07,PCNT_07,QTY_08,PCNT_08,QTY_09,PCNT_09,QTY_10,PCNT_10,QTY_11,PCNT_11,QTY_12,PCNT_12"
0156 FMPIOL$=CPL(FMPIOL$)
0157 FMPKEY$="IOLIST P_CONSTANT$:[CHR(1,SEP=SEP)],ITEM_PRICE_CLASS$:[CHR(3,SEP=SEP)],CUST_PRICE_CAT$:[CHR(3,SEP=SEP)]"
0158 FMPKEY$=CPL(FMPKEY$)
0159 FMPPFX$="P"
0160 _FILE_NAME$="FMP"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=FMPIOL$,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=FMPIOL$,REC=_CUR$)_FILE_NAME$
0185 _ZZP=HFN; OPEN (_ZZP)"ZZPARM"
0186 ! [202450]-Added lines 187-189 to open XPP
0187 _XPP_FILE$="XPP"+%C$
0188 _XPP_CHN=HFN
0189 OPEN (_XPP_CHN,ERR=OPEN_ERR)_XPP_FILE$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=3
0430 DIM _KEYS$[1:3]; _KEYS$[1]="P_CONSTANT$",_KEYS$[2]="ITEM_PRICE_CLASS$",_KEYS$[3]="CUST_PRICE_CAT$"
0440 _KEY1=2
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; READ (_FIL_NO,KEY=P_CONSTANT$,ERR=*RETURN)
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0705 FIND (_FIL,KEY=FROM_KEY$,DOM=COPY_ITEM_EXIT)IOL=0116
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(FMPKEY$,ERR=*NEXT) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 ! GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1280 GOSUB COPY_ITEM
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1412 SELL_UM$=" "+SELL_UM$
1415 GOSUB STORE_QTY
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(FMPKEY$,ERR=*NEXT) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1664 ! [202450]-Added lines 1665-1670 to update XPP
1665 READ DATA FROM REC(IOL(_FIL_NO)) TO IOL=0116
1670 CALL "UPDFMP;DUPLICATE_XPP",_XPP_CHN,A$,A{ALL},"D"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0; _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 IF _KEY$(1,1)<>FMPPFX$ THEN GOTO END_OF_FILE
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE)
2231 IF _KEY$(1,1)<>FMPPFX$ THEN GOTO START_OF_FILE
2232 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 READ (_FIL_NO,KEY=P_CONSTANT$,ERR=*NEXT)
2431 _KEY$=KEY(_FIL_NO,ERR=NO_FIRST)
2440 IF _KEY$(1,1)<>FMPPFX$ THEN GOTO NO_FIRST
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 READ (_FIL_NO,KEY=P_CONSTANT$+$FE$,ERR=*NEXT)
2640 _KEY$=KEP(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=FMPKEY$,ERR=*NEXT ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3055 GOSUB NUM_TO_STR; GOSUB SEL_UM
3056 GOSUB SET_PCNT_FMT ! SSP 267128
3058 IF POS(CALC_METHOD$="SD")>0 THEN BASIC_COST$=" "; REFRESH_FLG=1; DROP_BOX DISABLE BASIC_COST.CTL ELSE DROP_BOX ENABLE BASIC_COST.CTL
3060 CHANGE_FLG=0
3070 RETURN 
3080 SET_PCNT_FMT:! SSP 267128
3081 SHOW CONTROL PCNT_HDG1.CTL; SHOW CONTROL PCNT_HDG2.CTL
3082 IF CALC_METHOD$="S" THEN SHOW CONTROL SELL_HDG1.CTL; SHOW CONTROL SELL_HDRG2.CTL
3083 FOR XX=1 TO 12
3085 EXECUTE "PCNT_F$=""PCNT_"+STR(XX:"00")+".CTL"""
3086 PCNT_F=VIN(PCNT_F$)
3087 PCNT_F'FMT$="###.00"
3088 IF CALC_METHOD$="S" THEN PCNT_F'FMT$="###,###.00-"
3089 NEXT XX
3090 REFRESH_FLG=1
3095 RETURN 
3099 ! 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3329 ! [202450]-Added lines 3330-3335 to update XPP
3330 READ DATA FROM REC(IOL(_FIL_NO)) TO IOL=0116
3335 CALL "UPDFMP;DUPLICATE_XPP",_XPP_CHN,A$,A{ALL},"U"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1; _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3525 GOSUB DISPLAY_QTY
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=P_CONSTANT.CTL,_FIRST_FIELD=PRICE_TBL_DESC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
7000 COPY_ITEM:
7010 NEW_KEY$=_KEY$,FROM_KEY$=""
7020 PROCESS "ICGMFA.C","../ICG/IC.EN",NEW_KEY$,FROM_KEY$
7030 IF STP(FROM_KEY$,2)="" THEN GOTO COPY_ITEM_EXIT
7040 FROM_KEY$="P"+FROM_KEY$
7050 FIND (_FIL_NO,KEY=FROM_KEY$,DOM=COPY_ITEM_EXIT)IOL=0116
7060 A$(1,7)=NEW_KEY$
7070 WRITE (_FIL_NO,KEY=NEW_KEY$)IOL=0116
7072 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT)
7080 GOSUB PROCESS_READ; GOSUB DISP_REC
7090 COPY_ITEM_EXIT:
7999 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 QTY_SELLING_UNIT$=STR(QTY_SELLING_UNIT)
10030 QTY_01$=STR(QTY_01)
10040 PCNT_01$=STR(PCNT_01)
10050 QTY_02$=STR(QTY_02)
10060 PCNT_02$=STR(PCNT_02)
10070 QTY_03$=STR(QTY_03)
10080 PCNT_03$=STR(PCNT_03)
10090 QTY_04$=STR(QTY_04)
10100 PCNT_04$=STR(PCNT_04)
10110 QTY_05$=STR(QTY_05)
10120 PCNT_05$=STR(PCNT_05)
10130 QTY_06$=STR(QTY_06)
10140 PCNT_06$=STR(PCNT_06)
10150 QTY_07$=STR(QTY_07)
10160 PCNT_07$=STR(PCNT_07)
10170 QTY_08$=STR(QTY_08)
10180 PCNT_08$=STR(PCNT_08)
10190 QTY_09$=STR(QTY_09)
10200 PCNT_09$=STR(PCNT_09)
10210 QTY_10$=STR(QTY_10)
10220 PCNT_10$=STR(PCNT_10)
10230 QTY_11$=STR(QTY_11)
10240 PCNT_11$=STR(PCNT_11)
10250 QTY_12$=STR(QTY_12)
10260 PCNT_12$=STR(PCNT_12)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="QTY_SELLING_UNIT",_X=QTY_SELLING_UNIT.CTL,QTY_SELLING_UNIT=NUM(QTY_SELLING_UNIT$,ERR=NON_NUMERIC)
11030 _X$="QTY_01",_X=QTY_01.CTL,QTY_01=NUM(QTY_01$,ERR=NON_NUMERIC)
11040 _X$="PCNT_01",_X=PCNT_01.CTL,PCNT_01=NUM(PCNT_01$,ERR=NON_NUMERIC)
11050 _X$="QTY_02",_X=QTY_02.CTL,QTY_02=NUM(QTY_02$,ERR=NON_NUMERIC)
11060 _X$="PCNT_02",_X=PCNT_02.CTL,PCNT_02=NUM(PCNT_02$,ERR=NON_NUMERIC)
11070 _X$="QTY_03",_X=QTY_03.CTL,QTY_03=NUM(QTY_03$,ERR=NON_NUMERIC)
11080 _X$="PCNT_03",_X=PCNT_03.CTL,PCNT_03=NUM(PCNT_03$,ERR=NON_NUMERIC)
11090 _X$="QTY_04",_X=QTY_04.CTL,QTY_04=NUM(QTY_04$,ERR=NON_NUMERIC)
11100 _X$="PCNT_04",_X=PCNT_04.CTL,PCNT_04=NUM(PCNT_04$,ERR=NON_NUMERIC)
11110 _X$="QTY_05",_X=QTY_05.CTL,QTY_05=NUM(QTY_05$,ERR=NON_NUMERIC)
11120 _X$="PCNT_05",_X=PCNT_05.CTL,PCNT_05=NUM(PCNT_05$,ERR=NON_NUMERIC)
11130 _X$="QTY_06",_X=QTY_06.CTL,QTY_06=NUM(QTY_06$,ERR=NON_NUMERIC)
11140 _X$="PCNT_06",_X=PCNT_06.CTL,PCNT_06=NUM(PCNT_06$,ERR=NON_NUMERIC)
11150 _X$="QTY_07",_X=QTY_07.CTL,QTY_07=NUM(QTY_07$,ERR=NON_NUMERIC)
11160 _X$="PCNT_07",_X=PCNT_07.CTL,PCNT_07=NUM(PCNT_07$,ERR=NON_NUMERIC)
11170 _X$="QTY_08",_X=QTY_08.CTL,QTY_08=NUM(QTY_08$,ERR=NON_NUMERIC)
11180 _X$="PCNT_08",_X=PCNT_08.CTL,PCNT_08=NUM(PCNT_08$,ERR=NON_NUMERIC)
11190 _X$="QTY_09",_X=QTY_09.CTL,QTY_09=NUM(QTY_09$,ERR=NON_NUMERIC)
11200 _X$="PCNT_09",_X=PCNT_09.CTL,PCNT_09=NUM(PCNT_09$,ERR=NON_NUMERIC)
11210 _X$="QTY_10",_X=QTY_10.CTL,QTY_10=NUM(QTY_10$,ERR=NON_NUMERIC)
11220 _X$="PCNT_10",_X=PCNT_10.CTL,PCNT_10=NUM(PCNT_10$,ERR=NON_NUMERIC)
11230 _X$="QTY_11",_X=QTY_11.CTL,QTY_11=NUM(QTY_11$,ERR=NON_NUMERIC)
11240 _X$="PCNT_11",_X=PCNT_11.CTL,PCNT_11=NUM(PCNT_11$,ERR=NON_NUMERIC)
11250 _X$="QTY_12",_X=QTY_12.CTL,QTY_12=NUM(QTY_12$,ERR=NON_NUMERIC)
11260 _X$="PCNT_12",_X=PCNT_12.CTL,PCNT_12=NUM(PCNT_12$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12050 IF STP(CALC_METHOD$,3)="" THEN MSGBOX MSG("MUST_PB_C"),MSG("ATTN"),"!"; _W_FLG=0,NEXT_ID=CALC_METHOD.CTL; GOTO *RETURN
12060 IF STP(SELL_UM$,3)="" THEN MSGBOX MSG("MUST_PB_S"),MSG("ATTN"),"!"; _W_FLG=0,NEXT_ID=SELL_UM.CTL; GOTO *RETURN
12070 IF STP(QTY_SELLING_UNIT$,3)="" THEN MSGBOX MSG("MUST_PB_Q"),MSG("ATTN"),"!"; _W_FLG=0,NEXT_ID=QTY_SELLING_UNIT.CTL; GOTO *RETURN
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN P_CONSTANT$="P"
13030 IF _CLR_FLG$="R" THEN ITEM_PRICE_CLASS$=""
13040 IF _CLR_FLG$="R" THEN CUST_PRICE_CAT$=""
13050 PRICE_TBL_DESC$=""
13060 CALC_METHOD$=" "
13070 BASIS_COST$=" "
13080 SELL_UM$=""
13090 FIXED_ITEM_FLAG$=""
13100 TF_UNUSED$=""
13110 QTY_SELLING_UNIT=0
13120 QTY_01=0
13130 PCNT_01=0
13140 QTY_02=0
13150 PCNT_02=0
13160 QTY_03=0
13170 PCNT_03=0
13180 QTY_04=0
13190 PCNT_04=0
13200 QTY_05=0
13210 PCNT_05=0
13220 QTY_06=0
13230 PCNT_06=0
13240 QTY_07=0
13250 PCNT_07=0
13260 QTY_08=0
13270 PCNT_08=0
13280 QTY_09=0
13290 PCNT_09=0
13300 QTY_10=0
13310 PCNT_10=0
13320 QTY_11=0
13330 PCNT_11=0
13340 QTY_12=0
13350 PCNT_12=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=ITEM_PRICE_CLASS.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=CUST_PRICE_CAT.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(34,"N")
15030 IF _ORIG.P_CONSTANT$=_CUR.P_CONSTANT$ OR P_CONSTANT$=_CUR.P_CONSTANT$ THEN GOTO *NEXT ELSE IF _ORIG.P_CONSTANT$=P_CONSTANT$ THEN _CHG2$=_CHG2$+SEP+"P_CONSTANT = "+_CUR.P_CONSTANT$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"P_CONSTANT = "+_CUR.P_CONSTANT$
15040 IF _ORIG.ITEM_PRICE_CLASS$=_CUR.ITEM_PRICE_CLASS$ OR ITEM_PRICE_CLASS$=_CUR.ITEM_PRICE_CLASS$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_PRICE_CLASS$=ITEM_PRICE_CLASS$ THEN _CHG2$=_CHG2$+SEP+"ITEM_PRICE_CLASS = "+_CUR.ITEM_PRICE_CLASS$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"ITEM_PRICE_CLASS = "+_CUR.ITEM_PRICE_CLASS$
15050 IF _ORIG.CUST_PRICE_CAT$=_CUR.CUST_PRICE_CAT$ OR CUST_PRICE_CAT$=_CUR.CUST_PRICE_CAT$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_PRICE_CAT$=CUST_PRICE_CAT$ THEN _CHG2$=_CHG2$+SEP+"CUST_PRICE_CAT = "+_CUR.CUST_PRICE_CAT$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"CUST_PRICE_CAT = "+_CUR.CUST_PRICE_CAT$
15060 IF _ORIG.PRICE_TBL_DESC$=_CUR.PRICE_TBL_DESC$ OR PRICE_TBL_DESC$=_CUR.PRICE_TBL_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.PRICE_TBL_DESC$=PRICE_TBL_DESC$ THEN _CHG2$=_CHG2$+SEP+"PRICE_TBL_DESC = "+_CUR.PRICE_TBL_DESC$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"PRICE_TBL_DESC = "+_CUR.PRICE_TBL_DESC$
15070 IF _ORIG.CALC_METHOD$=_CUR.CALC_METHOD$ OR CALC_METHOD$=_CUR.CALC_METHOD$ THEN GOTO *NEXT ELSE IF _ORIG.CALC_METHOD$=CALC_METHOD$ THEN _CHG2$=_CHG2$+SEP+"CALC_METHOD = "+_CUR.CALC_METHOD$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"CALC_METHOD = "+_CUR.CALC_METHOD$
15080 IF _ORIG.BASIS_COST$=_CUR.BASIS_COST$ OR BASIS_COST$=_CUR.BASIS_COST$ THEN GOTO *NEXT ELSE IF _ORIG.BASIS_COST$=BASIS_COST$ THEN _CHG2$=_CHG2$+SEP+"BASIS_COST = "+_CUR.BASIS_COST$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"BASIS_COST = "+_CUR.BASIS_COST$
15090 IF _ORIG.SELL_UM$=_CUR.SELL_UM$ OR SELL_UM$=_CUR.SELL_UM$ THEN GOTO *NEXT ELSE IF _ORIG.SELL_UM$=SELL_UM$ THEN _CHG2$=_CHG2$+SEP+"SELL_UM = "+_CUR.SELL_UM$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"SELL_UM = "+_CUR.SELL_UM$
15100 IF _ORIG.FIXED_ITEM_FLAG$=_CUR.FIXED_ITEM_FLAG$ OR FIXED_ITEM_FLAG$=_CUR.FIXED_ITEM_FLAG$ THEN GOTO *NEXT ELSE IF _ORIG.FIXED_ITEM_FLAG$=FIXED_ITEM_FLAG$ THEN _CHG2$=_CHG2$+SEP+"FIXED_ITEM_FLAG = "+_CUR.FIXED_ITEM_FLAG$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"FIXED_ITEM_FLAG = "+_CUR.FIXED_ITEM_FLAG$
15110 IF _ORIG.TF_UNUSED$=_CUR.TF_UNUSED$ OR TF_UNUSED$=_CUR.TF_UNUSED$ THEN GOTO *NEXT ELSE IF _ORIG.TF_UNUSED$=TF_UNUSED$ THEN _CHG2$=_CHG2$+SEP+"UNUSED = "+_CUR.TF_UNUSED$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"UNUSED = "+_CUR.TF_UNUSED$
15120 IF _ORIG.QTY_SELLING_UNIT=_CUR.QTY_SELLING_UNIT OR QTY_SELLING_UNIT=_CUR.QTY_SELLING_UNIT THEN GOTO *NEXT ELSE IF _ORIG.QTY_SELLING_UNIT=QTY_SELLING_UNIT THEN _CHG2$=_CHG2$+SEP+"QTY_SELLING_UNIT = "+STR(_CUR.QTY_SELLING_UNIT),_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"QTY_SELLING_UNIT = "+STR(_CUR.QTY_SELLING_UNIT)
15130 IF _ORIG.QTY_01=_CUR.QTY_01 OR QTY_01=_CUR.QTY_01 THEN GOTO *NEXT ELSE IF _ORIG.QTY_01=QTY_01 THEN _CHG2$=_CHG2$+SEP+"QTY_01 = "+STR(_CUR.QTY_01),_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"QTY_01 = "+STR(_CUR.QTY_01)
15140 IF _ORIG.PCNT_01=_CUR.PCNT_01 OR PCNT_01=_CUR.PCNT_01 THEN GOTO *NEXT ELSE IF _ORIG.PCNT_01=PCNT_01 THEN _CHG2$=_CHG2$+SEP+"PCNT_01 = "+STR(_CUR.PCNT_01),_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"PCNT_01 = "+STR(_CUR.PCNT_01)
15150 IF _ORIG.QTY_02=_CUR.QTY_02 OR QTY_02=_CUR.QTY_02 THEN GOTO *NEXT ELSE IF _ORIG.QTY_02=QTY_02 THEN _CHG2$=_CHG2$+SEP+"QTY_02 = "+STR(_CUR.QTY_02),_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"QTY_02 = "+STR(_CUR.QTY_02)
15160 IF _ORIG.PCNT_02=_CUR.PCNT_02 OR PCNT_02=_CUR.PCNT_02 THEN GOTO *NEXT ELSE IF _ORIG.PCNT_02=PCNT_02 THEN _CHG2$=_CHG2$+SEP+"PCNT_02 = "+STR(_CUR.PCNT_02),_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"PCNT_02 = "+STR(_CUR.PCNT_02)
15170 IF _ORIG.QTY_03=_CUR.QTY_03 OR QTY_03=_CUR.QTY_03 THEN GOTO *NEXT ELSE IF _ORIG.QTY_03=QTY_03 THEN _CHG2$=_CHG2$+SEP+"QTY_03 = "+STR(_CUR.QTY_03),_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"QTY_03 = "+STR(_CUR.QTY_03)
15180 IF _ORIG.PCNT_03=_CUR.PCNT_03 OR PCNT_03=_CUR.PCNT_03 THEN GOTO *NEXT ELSE IF _ORIG.PCNT_03=PCNT_03 THEN _CHG2$=_CHG2$+SEP+"PCNT_03 = "+STR(_CUR.PCNT_03),_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"PCNT_03 = "+STR(_CUR.PCNT_03)
15190 IF _ORIG.QTY_04=_CUR.QTY_04 OR QTY_04=_CUR.QTY_04 THEN GOTO *NEXT ELSE IF _ORIG.QTY_04=QTY_04 THEN _CHG2$=_CHG2$+SEP+"QTY_04 = "+STR(_CUR.QTY_04),_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"QTY_04 = "+STR(_CUR.QTY_04)
15200 IF _ORIG.PCNT_04=_CUR.PCNT_04 OR PCNT_04=_CUR.PCNT_04 THEN GOTO *NEXT ELSE IF _ORIG.PCNT_04=PCNT_04 THEN _CHG2$=_CHG2$+SEP+"PCNT_04 = "+STR(_CUR.PCNT_04),_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"PCNT_04 = "+STR(_CUR.PCNT_04)
15210 IF _ORIG.QTY_05=_CUR.QTY_05 OR QTY_05=_CUR.QTY_05 THEN GOTO *NEXT ELSE IF _ORIG.QTY_05=QTY_05 THEN _CHG2$=_CHG2$+SEP+"QTY_05 = "+STR(_CUR.QTY_05),_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"QTY_05 = "+STR(_CUR.QTY_05)
15220 IF _ORIG.PCNT_05=_CUR.PCNT_05 OR PCNT_05=_CUR.PCNT_05 THEN GOTO *NEXT ELSE IF _ORIG.PCNT_05=PCNT_05 THEN _CHG2$=_CHG2$+SEP+"PCNT_05 = "+STR(_CUR.PCNT_05),_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"PCNT_05 = "+STR(_CUR.PCNT_05)
15230 IF _ORIG.QTY_06=_CUR.QTY_06 OR QTY_06=_CUR.QTY_06 THEN GOTO *NEXT ELSE IF _ORIG.QTY_06=QTY_06 THEN _CHG2$=_CHG2$+SEP+"QTY_06 = "+STR(_CUR.QTY_06),_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"QTY_06 = "+STR(_CUR.QTY_06)
15240 IF _ORIG.PCNT_06=_CUR.PCNT_06 OR PCNT_06=_CUR.PCNT_06 THEN GOTO *NEXT ELSE IF _ORIG.PCNT_06=PCNT_06 THEN _CHG2$=_CHG2$+SEP+"PCNT_06 = "+STR(_CUR.PCNT_06),_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"PCNT_06 = "+STR(_CUR.PCNT_06)
15250 IF _ORIG.QTY_07=_CUR.QTY_07 OR QTY_07=_CUR.QTY_07 THEN GOTO *NEXT ELSE IF _ORIG.QTY_07=QTY_07 THEN _CHG2$=_CHG2$+SEP+"QTY_07 = "+STR(_CUR.QTY_07),_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"QTY_07 = "+STR(_CUR.QTY_07)
15260 IF _ORIG.PCNT_07=_CUR.PCNT_07 OR PCNT_07=_CUR.PCNT_07 THEN GOTO *NEXT ELSE IF _ORIG.PCNT_07=PCNT_07 THEN _CHG2$=_CHG2$+SEP+"PCNT_07 = "+STR(_CUR.PCNT_07),_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"PCNT_07 = "+STR(_CUR.PCNT_07)
15270 IF _ORIG.QTY_08=_CUR.QTY_08 OR QTY_08=_CUR.QTY_08 THEN GOTO *NEXT ELSE IF _ORIG.QTY_08=QTY_08 THEN _CHG2$=_CHG2$+SEP+"QTY_08 = "+STR(_CUR.QTY_08),_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"QTY_08 = "+STR(_CUR.QTY_08)
15280 IF _ORIG.PCNT_08=_CUR.PCNT_08 OR PCNT_08=_CUR.PCNT_08 THEN GOTO *NEXT ELSE IF _ORIG.PCNT_08=PCNT_08 THEN _CHG2$=_CHG2$+SEP+"PCNT_08 = "+STR(_CUR.PCNT_08),_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"PCNT_08 = "+STR(_CUR.PCNT_08)
15290 IF _ORIG.QTY_09=_CUR.QTY_09 OR QTY_09=_CUR.QTY_09 THEN GOTO *NEXT ELSE IF _ORIG.QTY_09=QTY_09 THEN _CHG2$=_CHG2$+SEP+"QTY_09 = "+STR(_CUR.QTY_09),_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"QTY_09 = "+STR(_CUR.QTY_09)
15300 IF _ORIG.PCNT_09=_CUR.PCNT_09 OR PCNT_09=_CUR.PCNT_09 THEN GOTO *NEXT ELSE IF _ORIG.PCNT_09=PCNT_09 THEN _CHG2$=_CHG2$+SEP+"PCNT_09 = "+STR(_CUR.PCNT_09),_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"PCNT_09 = "+STR(_CUR.PCNT_09)
15310 IF _ORIG.QTY_10=_CUR.QTY_10 OR QTY_10=_CUR.QTY_10 THEN GOTO *NEXT ELSE IF _ORIG.QTY_10=QTY_10 THEN _CHG2$=_CHG2$+SEP+"QTY_10 = "+STR(_CUR.QTY_10),_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"QTY_10 = "+STR(_CUR.QTY_10)
15320 IF _ORIG.PCNT_10=_CUR.PCNT_10 OR PCNT_10=_CUR.PCNT_10 THEN GOTO *NEXT ELSE IF _ORIG.PCNT_10=PCNT_10 THEN _CHG2$=_CHG2$+SEP+"PCNT_10 = "+STR(_CUR.PCNT_10),_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"PCNT_10 = "+STR(_CUR.PCNT_10)
15330 IF _ORIG.QTY_11=_CUR.QTY_11 OR QTY_11=_CUR.QTY_11 THEN GOTO *NEXT ELSE IF _ORIG.QTY_11=QTY_11 THEN _CHG2$=_CHG2$+SEP+"QTY_11 = "+STR(_CUR.QTY_11),_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"QTY_11 = "+STR(_CUR.QTY_11)
15340 IF _ORIG.PCNT_11=_CUR.PCNT_11 OR PCNT_11=_CUR.PCNT_11 THEN GOTO *NEXT ELSE IF _ORIG.PCNT_11=PCNT_11 THEN _CHG2$=_CHG2$+SEP+"PCNT_11 = "+STR(_CUR.PCNT_11),_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"PCNT_11 = "+STR(_CUR.PCNT_11)
15350 IF _ORIG.QTY_12=_CUR.QTY_12 OR QTY_12=_CUR.QTY_12 THEN GOTO *NEXT ELSE IF _ORIG.QTY_12=QTY_12 THEN _CHG2$=_CHG2$+SEP+"QTY_12 = "+STR(_CUR.QTY_12),_CHG_VAR$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"QTY_12 = "+STR(_CUR.QTY_12)
15360 IF _ORIG.PCNT_12=_CUR.PCNT_12 OR PCNT_12=_CUR.PCNT_12 THEN GOTO *NEXT ELSE IF _ORIG.PCNT_12=PCNT_12 THEN _CHG2$=_CHG2$+SEP+"PCNT_12 = "+STR(_CUR.PCNT_12),_CHG_VAR$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"PCNT_12 = "+STR(_CUR.PCNT_12)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN P_CONSTANT$=_CUR.P_CONSTANT$
16030 IF _CHG_VAR$(2,1)="Y" THEN ITEM_PRICE_CLASS$=_CUR.ITEM_PRICE_CLASS$
16040 IF _CHG_VAR$(3,1)="Y" THEN CUST_PRICE_CAT$=_CUR.CUST_PRICE_CAT$
16050 IF _CHG_VAR$(4,1)="Y" THEN PRICE_TBL_DESC$=_CUR.PRICE_TBL_DESC$
16060 IF _CHG_VAR$(5,1)="Y" THEN CALC_METHOD$=_CUR.CALC_METHOD$
16070 IF _CHG_VAR$(6,1)="Y" THEN BASIS_COST$=_CUR.BASIS_COST$
16080 IF _CHG_VAR$(7,1)="Y" THEN SELL_UM$=_CUR.SELL_UM$
16090 IF _CHG_VAR$(8,1)="Y" THEN FIXED_ITEM_FLAG$=_CUR.FIXED_ITEM_FLAG$
16100 IF _CHG_VAR$(9,1)="Y" THEN TF_UNUSED$=_CUR.TF_UNUSED$
16110 IF _CHG_VAR$(10,1)="Y" THEN QTY_SELLING_UNIT=_CUR.QTY_SELLING_UNIT
16120 IF _CHG_VAR$(11,1)="Y" THEN QTY_01=_CUR.QTY_01
16130 IF _CHG_VAR$(12,1)="Y" THEN PCNT_01=_CUR.PCNT_01
16140 IF _CHG_VAR$(13,1)="Y" THEN QTY_02=_CUR.QTY_02
16150 IF _CHG_VAR$(14,1)="Y" THEN PCNT_02=_CUR.PCNT_02
16160 IF _CHG_VAR$(15,1)="Y" THEN QTY_03=_CUR.QTY_03
16170 IF _CHG_VAR$(16,1)="Y" THEN PCNT_03=_CUR.PCNT_03
16180 IF _CHG_VAR$(17,1)="Y" THEN QTY_04=_CUR.QTY_04
16190 IF _CHG_VAR$(18,1)="Y" THEN PCNT_04=_CUR.PCNT_04
16200 IF _CHG_VAR$(19,1)="Y" THEN QTY_05=_CUR.QTY_05
16210 IF _CHG_VAR$(20,1)="Y" THEN PCNT_05=_CUR.PCNT_05
16220 IF _CHG_VAR$(21,1)="Y" THEN QTY_06=_CUR.QTY_06
16230 IF _CHG_VAR$(22,1)="Y" THEN PCNT_06=_CUR.PCNT_06
16240 IF _CHG_VAR$(23,1)="Y" THEN QTY_07=_CUR.QTY_07
16250 IF _CHG_VAR$(24,1)="Y" THEN PCNT_07=_CUR.PCNT_07
16260 IF _CHG_VAR$(25,1)="Y" THEN QTY_08=_CUR.QTY_08
16270 IF _CHG_VAR$(26,1)="Y" THEN PCNT_08=_CUR.PCNT_08
16280 IF _CHG_VAR$(27,1)="Y" THEN QTY_09=_CUR.QTY_09
16290 IF _CHG_VAR$(28,1)="Y" THEN PCNT_09=_CUR.PCNT_09
16300 IF _CHG_VAR$(29,1)="Y" THEN QTY_10=_CUR.QTY_10
16310 IF _CHG_VAR$(30,1)="Y" THEN PCNT_10=_CUR.PCNT_10
16320 IF _CHG_VAR$(31,1)="Y" THEN QTY_11=_CUR.QTY_11
16330 IF _CHG_VAR$(32,1)="Y" THEN PCNT_11=_CUR.PCNT_11
16340 IF _CHG_VAR$(33,1)="Y" THEN QTY_12=_CUR.QTY_12
16350 IF _CHG_VAR$(34,1)="Y" THEN PCNT_12=_CUR.PCNT_12
16990 RETURN 
17000 SEL_UM: REFRESH_FLG=1
17005 IF MID(SELL_UM$,1,1)=" " THEN SELL_UM$=SELL_UM$(2); GOTO *SAME
17006 SELL_UM$=PAD(SELL_UM$,4," ")
17010 READ (_ZZP,KEY="U/M"+SELL_UM$,DOM=*NEXT)P2$,P1,P2
17015 FIXED_ITEM_FLAG$=MID(P2$,20,1) ! SSP 205064
17018 IF MID(P2$,20,1)="Y" THEN DISABLE CONTROL QTY_SELLING_UNIT.CTL ELSE ENABLE CONTROL QTY_SELLING_UNIT.CTL ! SSP#225462
17020 IF MID(P2$,20,1)="Y" AND P1<>0 THEN QTY_SELLING_UNIT=P1,QTY_SELLING_UNIT$=STR(P1),QTY_SELLING_UNIT$=STR(P1) ELSE IF MID(P2$,20,1)="Y" AND P1=0 THEN QTY_SELLING_UNIT=P2,QTY_SELLING_UNIT$=STR(P2) ! SSP#225462
17021 ! IF MID(P2$,20,1)="Y" THEN DISABLE CONTROL QTY_SELLING_UNIT.CTL; QTY_SELLOING_UNIT=P1,QTY_SELLING_UNIT$=STR(P1) ELSE ENABLE CONTROL QTY_SELLING_UNIT.CTL!SSP#225462
17030 GOSUB DISPLAY_QTY
17040 RETURN 
18000 DISPLAY_QTY: REFRESH_FLG=1
18010 FOR AA=1 TO 12
18020 EXECUTE "QTY"+STR(AA:"00")+"=FN%QTY_IN_UM(QTY_"+STR(AA:"00")+",SELL_UM$,QTY_SELLING_UNIT),QTY_"+STR(AA:"00")+"$=STR(QTY"+STR(AA:"00")+")"
18030 NEXT AA
18040 RETURN 
18050 STORE_QTY:
18060 FOR AA=1 TO 12
18070 EXECUTE "IF mid(P2$,20,1)<>"+QUO+"Y"+QUO+" QTY_"+STR(AA:"00")+"$=STR(NUM(QTY_"+STR(AA:"00")+"$)*QTY_SELLING_UNIT)" ! SSP 205064
18080 NEXT AA
18090 RETURN 
18500 QRY_FMPP: VAL$="" ! ssp#271169
18510 PROCESS "QRY_FMPP","../ICG/IC.EN",VAL$
18520 IF VAL$="" THEN GOTO *RETURN
18530 _KEY$=VAL$
18540 READ (_FIL_NO,KEY=_KEY$)
18550 GOSUB PROCESS_READ
18560 NEXT_ID=PRICE_TBL_DESC.CTL,REFRESH_FLG=1
18570 RETURN 
56000 REM + Modification History
56001 ! "182373-GUI-Pricing Tables do not appear to work at all in GUI      
56002 REM "5.5 - 11/29/06 - 7.893611 - mhe - SSP# 202450
56003 REM "202450-Modify ICGMFA to also call UPDFMP to update XPP after       
56010 ! "205064-Error 47 ln 18070
56012 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56014 REM "225462-When setting up a pricing table, the UOM of EA & EACH come  
56015 REM "267128-In the Pricing Table Setup, cannot enter a 4-digit          
56016 REM "270438-OPS O5 Panel ICGMFA doesn't behave the same way as the old  
56017 REM "271169-Idea Bank:  Pricing Table Setup.  Would like to have a right
