0010 ! ICGMAC - File Maintenance Program for IC1_InventoryLoc (="IC1"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Mar. 6, 2002 15:45
0030 ! ************************************************************************
0035 REM "5.6 - 01/15/08 - 16.091111 - crg - SSP# 211380
0037 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
0040 REM "Copyright 2008 DemandBridge, Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="IC1"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=4
0430 DIM _KEYS$[1:4]; _KEYS$[1]="CUST_DIV$",_KEYS$[2]="CUST_CODE$",_KEYS$[3]="ITEM_CODE$",_KEYS$[4]="LOC_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0700 ! 700 - Set up tabbing between folders
0710 INIT_FOLDER:
0720 GOSUB ENABLE_GROUPS
0730 IF _ENABLE_FLG<>_KEY1 THEN IF TAB_FLG$="<" THEN NEXT_ID=_LAST_TAB ELSE NEXT_ID=_FIRST_TAB
0740 EXIT 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1280 NEXT_FOLDER=_FIRST_FOLDER
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUSTOMER.CTL,_FIRST_FIELD=RO_PT.CTL,_FIRST_FOLDER=FLDR.ICGMAC.1.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 RO_PT$=STR(RO_PT)
10030 LAST_COST$=STR(LAST_COST)
10040 AVG_COST$=STR(AVG_COST)
10050 BEG_BAL$=STR(BEG_BAL)
10060 RECEIPTS$=STR(RECEIPTS)
10070 SALES$=STR(SALES)
10080 ADJUSTMENTS$=STR(ADJUSTMENTS)
10090 TF_COMMITTED$=STR(TF_COMMITTED)
10100 ON_PO$=STR(ON_PO)
10110 LAST_PHYS_CNT$=STR(LAST_PHYS_CNT)
10120 RO_QTY$=STR(RO_QTY)
10130 BO_QTY$=STR(BO_QTY)
10140 CTN_CNT_IN_ICG$=STR(CTN_CNT_IN_ICG)
10150 COMMIT_BY_KIT_PRD_PR$=STR(COMMIT_BY_KIT_PRD_PR)
10160 IC1_UNUSED_2$=STR(IC1_UNUSED_2)
10170 IC1_UNUSED_3$=STR(IC1_UNUSED_3)
10180 IC1_UNUSED_4$=STR(IC1_UNUSED_4)
10190 IC1_UNUSED_5$=STR(IC1_UNUSED_5)
10200 IC1_UNUSED_6$=STR(IC1_UNUSED_6)
10210 IC1_UNUSED_7$=STR(IC1_UNUSED_7)
10220 IC1_UNUSED_8$=STR(IC1_UNUSED_8)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="RO_PT",_X=RO_PT.CTL,RO_PT=NUM(RO_PT$,ERR=NON_NUMERIC)
11030 _X$="LAST_COST",_X=LAST_COST.CTL,LAST_COST=NUM(LAST_COST$,ERR=NON_NUMERIC)
11040 _X$="AVG_COST",_X=AVG_COST.CTL,AVG_COST=NUM(AVG_COST$,ERR=NON_NUMERIC)
11050 _X$="BEG_BAL",_X=BEG_BAL.CTL,BEG_BAL=NUM(BEG_BAL$,ERR=NON_NUMERIC)
11060 _X$="RECEIPTS",_X=RECEIPTS.CTL,RECEIPTS=NUM(RECEIPTS$,ERR=NON_NUMERIC)
11070 _X$="SALES",_X=SALES.CTL,SALES=NUM(SALES$,ERR=NON_NUMERIC)
11080 _X$="ADJUSTMENTS",_X=ADJUSTMENTS.CTL,ADJUSTMENTS=NUM(ADJUSTMENTS$,ERR=NON_NUMERIC)
11090 _X$="COMMITTED",_X=TF_COMMITTED.CTL,TF_COMMITTED=NUM(TF_COMMITTED$,ERR=NON_NUMERIC)
11100 _X$="ON_PO",_X=ON_PO.CTL,ON_PO=NUM(ON_PO$,ERR=NON_NUMERIC)
11110 _X$="LAST_PHYS_CNT",_X=LAST_PHYS_CNT.CTL,LAST_PHYS_CNT=NUM(LAST_PHYS_CNT$,ERR=NON_NUMERIC)
11120 _X$="RO_QTY",_X=RO_QTY.CTL,RO_QTY=NUM(RO_QTY$,ERR=NON_NUMERIC)
11130 _X$="BO_QTY",_X=BO_QTY.CTL,BO_QTY=NUM(BO_QTY$,ERR=NON_NUMERIC)
11140 _X$="CTN_CNT_IN_ICG",_X=CTN_CNT_IN_ICG.CTL,CTN_CNT_IN_ICG=NUM(CTN_CNT_IN_ICG$,ERR=NON_NUMERIC)
11150 _X$="COMMIT_BY_KIT_PRD_PR",_X=COMMIT_BY_KIT_PRD_PR.CTL,COMMIT_BY_KIT_PRD_PR=NUM(COMMIT_BY_KIT_PRD_PR$,ERR=NON_NUMERIC)
11160 _X$="IC1_UNUSED_2",_X=IC1_UNUSED_2.CTL,IC1_UNUSED_2=NUM(IC1_UNUSED_2$,ERR=NON_NUMERIC)
11170 _X$="IC1_UNUSED_3",_X=IC1_UNUSED_3.CTL,IC1_UNUSED_3=NUM(IC1_UNUSED_3$,ERR=NON_NUMERIC)
11180 _X$="IC1_UNUSED_4",_X=IC1_UNUSED_4.CTL,IC1_UNUSED_4=NUM(IC1_UNUSED_4$,ERR=NON_NUMERIC)
11190 _X$="IC1_UNUSED_5",_X=IC1_UNUSED_5.CTL,IC1_UNUSED_5=NUM(IC1_UNUSED_5$,ERR=NON_NUMERIC)
11200 _X$="IC1_UNUSED_6",_X=IC1_UNUSED_6.CTL,IC1_UNUSED_6=NUM(IC1_UNUSED_6$,ERR=NON_NUMERIC)
11210 _X$="IC1_UNUSED_7",_X=IC1_UNUSED_7.CTL,IC1_UNUSED_7=NUM(IC1_UNUSED_7$,ERR=NON_NUMERIC)
11220 _X$="IC1_UNUSED_8",_X=IC1_UNUSED_8.CTL,IC1_UNUSED_8=NUM(IC1_UNUSED_8$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN CUST_DIV$=""
13030 IF _CLR_FLG$="R" THEN CUST_CODE$=""
13040 IF _CLR_FLG$="R" THEN ITEM_CODE$=""
13050 IF _CLR_FLG$="R" THEN LOC_CODE$=""
13060 VARIABLE_SIZE_LOT_YN$=""
13070 IC1_UNUSED_1$=""
13080 LAST_CNT_DATE$=""
13090 BIN_LOC$=""
13100 CYCLE_NUM$=""
13110 LAST_ACTIVE_DATE$=""
13120 BEG_BAL_AS_OF_DATE$=""
13130 RO_PT=0
13140 LAST_COST=0
13150 AVG_COST=0
13160 BEG_BAL=0
13170 RECEIPTS=0
13180 SALES=0
13190 ADJUSTMENTS=0
13200 TF_COMMITTED=0
13210 ON_PO=0
13220 LAST_PHYS_CNT=0
13230 RO_QTY=0
13240 BO_QTY=0
13250 CTN_CNT_IN_ICG=0
13260 COMMIT_BY_KIT_PRD_PR=0
13270 IC1_UNUSED_2=0
13280 IC1_UNUSED_3=0
13290 IC1_UNUSED_4=0
13300 IC1_UNUSED_5=0
13310 IC1_UNUSED_6=0
13320 IC1_UNUSED_7=0
13330 IC1_UNUSED_8=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUST_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=ITEM_CODE.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=LOC_CODE.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(32,"N")
15030 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15040 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15050 IF _ORIG.ITEM_CODE$=_CUR.ITEM_CODE$ OR ITEM_CODE$=_CUR.ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CODE$=ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$
15060 IF _ORIG.LOC_CODE$=_CUR.LOC_CODE$ OR LOC_CODE$=_CUR.LOC_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_CODE$=LOC_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_CODE")+" = "+_CUR.LOC_CODE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_CODE")+" = "+_CUR.LOC_CODE$
15070 IF _ORIG.VARIABLE_SIZE_LOT_YN$=_CUR.VARIABLE_SIZE_LOT_YN$ OR VARIABLE_SIZE_LOT_YN$=_CUR.VARIABLE_SIZE_LOT_YN$ THEN GOTO *NEXT ELSE IF _ORIG.VARIABLE_SIZE_LOT_YN$=VARIABLE_SIZE_LOT_YN$ THEN _CHG2$=_CHG2$+SEP+MSG("VARI_S_L_Y")+" = "+_CUR.VARIABLE_SIZE_LOT_YN$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VARI_S_L_Y")+" = "+_CUR.VARIABLE_SIZE_LOT_YN$
15080 IF _ORIG.IC1_UNUSED_1$=_CUR.IC1_UNUSED_1$ OR IC1_UNUSED_1$=_CUR.IC1_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.IC1_UNUSED_1$=IC1_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.IC1_UNUSED_1$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.IC1_UNUSED_1$
15090 IF _ORIG.LAST_CNT_DATE$=_CUR.LAST_CNT_DATE$ OR LAST_CNT_DATE$=_CUR.LAST_CNT_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.LAST_CNT_DATE$=LAST_CNT_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("LST_CNT_DT")+" = "+_CUR.LAST_CNT_DATE$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LST_CNT_DT")+" = "+_CUR.LAST_CNT_DATE$
15100 IF _ORIG.BIN_LOC$=_CUR.BIN_LOC$ OR BIN_LOC$=_CUR.BIN_LOC$ THEN GOTO *NEXT ELSE IF _ORIG.BIN_LOC$=BIN_LOC$ THEN _CHG2$=_CHG2$+SEP+MSG("BIN_LOC")+" = "+_CUR.BIN_LOC$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BIN_LOC")+" = "+_CUR.BIN_LOC$
15110 IF _ORIG.CYCLE_NUM$=_CUR.CYCLE_NUM$ OR CYCLE_NUM$=_CUR.CYCLE_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.CYCLE_NUM$=CYCLE_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("CYCLE_NUM")+" = "+_CUR.CYCLE_NUM$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CYCLE_NUM")+" = "+_CUR.CYCLE_NUM$
15120 IF _ORIG.LAST_ACTIVE_DATE$=_CUR.LAST_ACTIVE_DATE$ OR LAST_ACTIVE_DATE$=_CUR.LAST_ACTIVE_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.LAST_ACTIVE_DATE$=LAST_ACTIVE_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("LAST_A_D")+" = "+_CUR.LAST_ACTIVE_DATE$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_A_D")+" = "+_CUR.LAST_ACTIVE_DATE$
15130 IF _ORIG.BEG_BAL_AS_OF_DATE$=_CUR.BEG_BAL_AS_OF_DATE$ OR BEG_BAL_AS_OF_DATE$=_CUR.BEG_BAL_AS_OF_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.BEG_BAL_AS_OF_DATE$=BEG_BAL_AS_OF_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("B_B_A_O_D")+" = "+_CUR.BEG_BAL_AS_OF_DATE$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("B_B_A_O_D")+" = "+_CUR.BEG_BAL_AS_OF_DATE$
15140 IF _ORIG.RO_PT=_CUR.RO_PT OR RO_PT=_CUR.RO_PT THEN GOTO *NEXT ELSE IF _ORIG.RO_PT=RO_PT THEN _CHG2$=_CHG2$+SEP+MSG("RO_PT")+" = "+STR(_CUR.RO_PT),_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RO_PT")+" = "+STR(_CUR.RO_PT)
15150 IF _ORIG.LAST_COST=_CUR.LAST_COST OR LAST_COST=_CUR.LAST_COST THEN GOTO *NEXT ELSE IF _ORIG.LAST_COST=LAST_COST THEN _CHG2$=_CHG2$+SEP+MSG("LAST_COST")+" = "+STR(_CUR.LAST_COST),_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_COST")+" = "+STR(_CUR.LAST_COST)
15160 IF _ORIG.AVG_COST=_CUR.AVG_COST OR AVG_COST=_CUR.AVG_COST THEN GOTO *NEXT ELSE IF _ORIG.AVG_COST=AVG_COST THEN _CHG2$=_CHG2$+SEP+MSG("AVG_COST")+" = "+STR(_CUR.AVG_COST),_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("AVG_COST")+" = "+STR(_CUR.AVG_COST)
15170 IF _ORIG.BEG_BAL=_CUR.BEG_BAL OR BEG_BAL=_CUR.BEG_BAL THEN GOTO *NEXT ELSE IF _ORIG.BEG_BAL=BEG_BAL THEN _CHG2$=_CHG2$+SEP+MSG("BEG_BAL")+" = "+STR(_CUR.BEG_BAL),_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BEG_BAL")+" = "+STR(_CUR.BEG_BAL)
15180 IF _ORIG.RECEIPTS=_CUR.RECEIPTS OR RECEIPTS=_CUR.RECEIPTS THEN GOTO *NEXT ELSE IF _ORIG.RECEIPTS=RECEIPTS THEN _CHG2$=_CHG2$+SEP+MSG("RECEIPTS")+" = "+STR(_CUR.RECEIPTS),_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RECEIPTS")+" = "+STR(_CUR.RECEIPTS)
15190 IF _ORIG.SALES=_CUR.SALES OR SALES=_CUR.SALES THEN GOTO *NEXT ELSE IF _ORIG.SALES=SALES THEN _CHG2$=_CHG2$+SEP+MSG("SALES")+" = "+STR(_CUR.SALES),_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SALES")+" = "+STR(_CUR.SALES)
15200 IF _ORIG.ADJUSTMENTS=_CUR.ADJUSTMENTS OR ADJUSTMENTS=_CUR.ADJUSTMENTS THEN GOTO *NEXT ELSE IF _ORIG.ADJUSTMENTS=ADJUSTMENTS THEN _CHG2$=_CHG2$+SEP+MSG("ADJU")+" = "+STR(_CUR.ADJUSTMENTS),_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ADJU")+" = "+STR(_CUR.ADJUSTMENTS)
15210 IF _ORIG.TF_COMMITTED=_CUR.TF_COMMITTED OR TF_COMMITTED=_CUR.TF_COMMITTED THEN GOTO *NEXT ELSE IF _ORIG.TF_COMMITTED=TF_COMMITTED THEN _CHG2$=_CHG2$+SEP+MSG("COMMITTED")+" = "+STR(_CUR.TF_COMMITTED),_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMMITTED")+" = "+STR(_CUR.TF_COMMITTED)
15220 IF _ORIG.ON_PO=_CUR.ON_PO OR ON_PO=_CUR.ON_PO THEN GOTO *NEXT ELSE IF _ORIG.ON_PO=ON_PO THEN _CHG2$=_CHG2$+SEP+MSG("ON_PO")+" = "+STR(_CUR.ON_PO),_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ON_PO")+" = "+STR(_CUR.ON_PO)
15230 IF _ORIG.LAST_PHYS_CNT=_CUR.LAST_PHYS_CNT OR LAST_PHYS_CNT=_CUR.LAST_PHYS_CNT THEN GOTO *NEXT ELSE IF _ORIG.LAST_PHYS_CNT=LAST_PHYS_CNT THEN _CHG2$=_CHG2$+SEP+MSG("LST_PHY_CN")+" = "+STR(_CUR.LAST_PHYS_CNT),_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LST_PHY_CN")+" = "+STR(_CUR.LAST_PHYS_CNT)
15240 IF _ORIG.RO_QTY=_CUR.RO_QTY OR RO_QTY=_CUR.RO_QTY THEN GOTO *NEXT ELSE IF _ORIG.RO_QTY=RO_QTY THEN _CHG2$=_CHG2$+SEP+MSG("RO_QTY")+" = "+STR(_CUR.RO_QTY),_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RO_QTY")+" = "+STR(_CUR.RO_QTY)
15250 IF _ORIG.BO_QTY=_CUR.BO_QTY OR BO_QTY=_CUR.BO_QTY THEN GOTO *NEXT ELSE IF _ORIG.BO_QTY=BO_QTY THEN _CHG2$=_CHG2$+SEP+MSG("BO_QTY")+" = "+STR(_CUR.BO_QTY),_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BO_QTY")+" = "+STR(_CUR.BO_QTY)
15260 IF _ORIG.CTN_CNT_IN_ICG=_CUR.CTN_CNT_IN_ICG OR CTN_CNT_IN_ICG=_CUR.CTN_CNT_IN_ICG THEN GOTO *NEXT ELSE IF _ORIG.CTN_CNT_IN_ICG=CTN_CNT_IN_ICG THEN _CHG2$=_CHG2$+SEP+MSG("CTN_C_I_I")+" = "+STR(_CUR.CTN_CNT_IN_ICG),_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CTN_C_I_I")+" = "+STR(_CUR.CTN_CNT_IN_ICG)
15270 IF _ORIG.COMMIT_BY_KIT_PRD_PR=_CUR.COMMIT_BY_KIT_PRD_PR OR COMMIT_BY_KIT_PRD_PR=_CUR.COMMIT_BY_KIT_PRD_PR THEN GOTO *NEXT ELSE IF _ORIG.COMMIT_BY_KIT_PRD_PR=COMMIT_BY_KIT_PRD_PR THEN _CHG2$=_CHG2$+SEP+MSG("C_B_K_P_P")+" = "+STR(_CUR.COMMIT_BY_KIT_PRD_PR),_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("C_B_K_P_P")+" = "+STR(_CUR.COMMIT_BY_KIT_PRD_PR)
15280 IF _ORIG.IC1_UNUSED_2=_CUR.IC1_UNUSED_2 OR IC1_UNUSED_2=_CUR.IC1_UNUSED_2 THEN GOTO *NEXT ELSE IF _ORIG.IC1_UNUSED_2=IC1_UNUSED_2 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC1_UNUSED_2),_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC1_UNUSED_2)
15290 IF _ORIG.IC1_UNUSED_3=_CUR.IC1_UNUSED_3 OR IC1_UNUSED_3=_CUR.IC1_UNUSED_3 THEN GOTO *NEXT ELSE IF _ORIG.IC1_UNUSED_3=IC1_UNUSED_3 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC1_UNUSED_3),_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC1_UNUSED_3)
15300 IF _ORIG.IC1_UNUSED_4=_CUR.IC1_UNUSED_4 OR IC1_UNUSED_4=_CUR.IC1_UNUSED_4 THEN GOTO *NEXT ELSE IF _ORIG.IC1_UNUSED_4=IC1_UNUSED_4 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC1_UNUSED_4),_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC1_UNUSED_4)
15310 IF _ORIG.IC1_UNUSED_5=_CUR.IC1_UNUSED_5 OR IC1_UNUSED_5=_CUR.IC1_UNUSED_5 THEN GOTO *NEXT ELSE IF _ORIG.IC1_UNUSED_5=IC1_UNUSED_5 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC1_UNUSED_5),_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC1_UNUSED_5)
15320 IF _ORIG.IC1_UNUSED_6=_CUR.IC1_UNUSED_6 OR IC1_UNUSED_6=_CUR.IC1_UNUSED_6 THEN GOTO *NEXT ELSE IF _ORIG.IC1_UNUSED_6=IC1_UNUSED_6 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC1_UNUSED_6),_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC1_UNUSED_6)
15330 IF _ORIG.IC1_UNUSED_7=_CUR.IC1_UNUSED_7 OR IC1_UNUSED_7=_CUR.IC1_UNUSED_7 THEN GOTO *NEXT ELSE IF _ORIG.IC1_UNUSED_7=IC1_UNUSED_7 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC1_UNUSED_7),_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC1_UNUSED_7)
15340 IF _ORIG.IC1_UNUSED_8=_CUR.IC1_UNUSED_8 OR IC1_UNUSED_8=_CUR.IC1_UNUSED_8 THEN GOTO *NEXT ELSE IF _ORIG.IC1_UNUSED_8=IC1_UNUSED_8 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC1_UNUSED_8),_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.IC1_UNUSED_8)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16030 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN ITEM_CODE$=_CUR.ITEM_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN LOC_CODE$=_CUR.LOC_CODE$
16060 IF _CHG_VAR$(5,1)="Y" THEN VARIABLE_SIZE_LOT_YN$=_CUR.VARIABLE_SIZE_LOT_YN$
16070 IF _CHG_VAR$(6,1)="Y" THEN IC1_UNUSED_1$=_CUR.IC1_UNUSED_1$
16080 IF _CHG_VAR$(7,1)="Y" THEN LAST_CNT_DATE$=_CUR.LAST_CNT_DATE$
16090 IF _CHG_VAR$(8,1)="Y" THEN BIN_LOC$=_CUR.BIN_LOC$
16100 IF _CHG_VAR$(9,1)="Y" THEN CYCLE_NUM$=_CUR.CYCLE_NUM$
16110 IF _CHG_VAR$(10,1)="Y" THEN LAST_ACTIVE_DATE$=_CUR.LAST_ACTIVE_DATE$
16120 IF _CHG_VAR$(11,1)="Y" THEN BEG_BAL_AS_OF_DATE$=_CUR.BEG_BAL_AS_OF_DATE$
16130 IF _CHG_VAR$(12,1)="Y" THEN RO_PT=_CUR.RO_PT
16140 IF _CHG_VAR$(13,1)="Y" THEN LAST_COST=_CUR.LAST_COST
16150 IF _CHG_VAR$(14,1)="Y" THEN AVG_COST=_CUR.AVG_COST
16160 IF _CHG_VAR$(15,1)="Y" THEN BEG_BAL=_CUR.BEG_BAL
16170 IF _CHG_VAR$(16,1)="Y" THEN RECEIPTS=_CUR.RECEIPTS
16180 IF _CHG_VAR$(17,1)="Y" THEN SALES=_CUR.SALES
16190 IF _CHG_VAR$(18,1)="Y" THEN ADJUSTMENTS=_CUR.ADJUSTMENTS
16200 IF _CHG_VAR$(19,1)="Y" THEN TF_COMMITTED=_CUR.TF_COMMITTED
16210 IF _CHG_VAR$(20,1)="Y" THEN ON_PO=_CUR.ON_PO
16220 IF _CHG_VAR$(21,1)="Y" THEN LAST_PHYS_CNT=_CUR.LAST_PHYS_CNT
16230 IF _CHG_VAR$(22,1)="Y" THEN RO_QTY=_CUR.RO_QTY
16240 IF _CHG_VAR$(23,1)="Y" THEN BO_QTY=_CUR.BO_QTY
16250 IF _CHG_VAR$(24,1)="Y" THEN CTN_CNT_IN_ICG=_CUR.CTN_CNT_IN_ICG
16260 IF _CHG_VAR$(25,1)="Y" THEN COMMIT_BY_KIT_PRD_PR=_CUR.COMMIT_BY_KIT_PRD_PR
16270 IF _CHG_VAR$(26,1)="Y" THEN IC1_UNUSED_2=_CUR.IC1_UNUSED_2
16280 IF _CHG_VAR$(27,1)="Y" THEN IC1_UNUSED_3=_CUR.IC1_UNUSED_3
16290 IF _CHG_VAR$(28,1)="Y" THEN IC1_UNUSED_4=_CUR.IC1_UNUSED_4
16300 IF _CHG_VAR$(29,1)="Y" THEN IC1_UNUSED_5=_CUR.IC1_UNUSED_5
16310 IF _CHG_VAR$(30,1)="Y" THEN IC1_UNUSED_6=_CUR.IC1_UNUSED_6
16320 IF _CHG_VAR$(31,1)="Y" THEN IC1_UNUSED_7=_CUR.IC1_UNUSED_7
16330 IF _CHG_VAR$(32,1)="Y" THEN IC1_UNUSED_8=_CUR.IC1_UNUSED_8
16990 RETURN 
56000 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
