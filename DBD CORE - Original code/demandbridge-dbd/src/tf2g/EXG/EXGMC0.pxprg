0010 ! EXGMC0 - File Maintenance Program for EX0_DBCtl (="EX0"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Dec. 4, 2006 14:09
0030 ! ************************************************************************
0035 REM "5.5 - 05/23/07 - 11.880833 - jme - SSP# 202107
0037 REM "202107-Oracle Database integration with TopForm                    
0040 REM "Copyright 2007 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 IF TCB(29)<7100000 THEN MSGBOX "You must be using Providex Version 7.1 or Higher to access this program"; IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT 
0054 IF TCB(88)=0 THEN {
0055 MSGBOX "You must be using Windx to access this program"
0057  } ELSE {
0058 IF %GUI THEN BB$=FIN(0) ! SSP 197975
0060 PROCESS "EXGMC0","../EXG/EX.EN"
0061 IF %GUI THEN PRINT 'GOTO'(DEC(BB$(10,1))), ! SSP 197975
0065  }
0075 IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="EX0"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$; EX0=_FIL_NO
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="DB_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=DB_CODE.CTL,_FIRST_FIELD=DB_LOC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN DB_CODE$=""
13030 DB_LOC$=""
13040 DB_NAME$=""
13050 CR_TEXT_FILE$=""
13060 CR_TEXT_PC$=""
13070 DB_TYPE$=""
13080 DB_USER$=""
13090 DB_PASSWD$=""
13100 UNUSED_1$=""
13110 UNUSED_2$=""
13120 UNUSED_3$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(11,"N")
15030 IF _ORIG.DB_CODE$=_CUR.DB_CODE$ OR DB_CODE$=_CUR.DB_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.DB_CODE$=DB_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("DB_CODE")+" = "+_CUR.DB_CODE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DB_CODE")+" = "+_CUR.DB_CODE$
15040 IF _ORIG.DB_LOC$=_CUR.DB_LOC$ OR DB_LOC$=_CUR.DB_LOC$ THEN GOTO *NEXT ELSE IF _ORIG.DB_LOC$=DB_LOC$ THEN _CHG2$=_CHG2$+SEP+MSG("DB_LOC")+" = "+_CUR.DB_LOC$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DB_LOC")+" = "+_CUR.DB_LOC$
15050 IF _ORIG.DB_NAME$=_CUR.DB_NAME$ OR DB_NAME$=_CUR.DB_NAME$ THEN GOTO *NEXT ELSE IF _ORIG.DB_NAME$=DB_NAME$ THEN _CHG2$=_CHG2$+SEP+MSG("DB_N")+" = "+_CUR.DB_NAME$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DB_N")+" = "+_CUR.DB_NAME$
15060 IF _ORIG.CR_TEXT_FILE$=_CUR.CR_TEXT_FILE$ OR CR_TEXT_FILE$=_CUR.CR_TEXT_FILE$ THEN GOTO *NEXT ELSE IF _ORIG.CR_TEXT_FILE$=CR_TEXT_FILE$ THEN _CHG2$=_CHG2$+SEP+MSG("CR_TXT_F")+" = "+_CUR.CR_TEXT_FILE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CR_TXT_F")+" = "+_CUR.CR_TEXT_FILE$
15070 IF _ORIG.CR_TEXT_PC$=_CUR.CR_TEXT_PC$ OR CR_TEXT_PC$=_CUR.CR_TEXT_PC$ THEN GOTO *NEXT ELSE IF _ORIG.CR_TEXT_PC$=CR_TEXT_PC$ THEN _CHG2$=_CHG2$+SEP+MSG("CR_TEXT_PC")+" = "+_CUR.CR_TEXT_PC$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CR_TEXT_PC")+" = "+_CUR.CR_TEXT_PC$
15080 IF _ORIG.DB_TYPE$=_CUR.DB_TYPE$ OR DB_TYPE$=_CUR.DB_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.DB_TYPE$=DB_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("DB_TYPE")+" = "+_CUR.DB_TYPE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DB_TYPE")+" = "+_CUR.DB_TYPE$
15090 IF _ORIG.DB_USER$=_CUR.DB_USER$ OR DB_USER$=_CUR.DB_USER$ THEN GOTO *NEXT ELSE IF _ORIG.DB_USER$=DB_USER$ THEN _CHG2$=_CHG2$+SEP+MSG("DB_USER")+" = "+_CUR.DB_USER$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DB_USER")+" = "+_CUR.DB_USER$
15100 IF _ORIG.DB_PASSWD$=_CUR.DB_PASSWD$ OR DB_PASSWD$=_CUR.DB_PASSWD$ THEN GOTO *NEXT ELSE IF _ORIG.DB_PASSWD$=DB_PASSWD$ THEN _CHG2$=_CHG2$+SEP+MSG("DB_PASSWD")+" = "+_CUR.DB_PASSWD$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DB_PASSWD")+" = "+_CUR.DB_PASSWD$
15110 IF _ORIG.UNUSED_1$=_CUR.UNUSED_1$ OR UNUSED_1$=_CUR.UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.UNUSED_1$=UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("NOT_USED")+" = "+_CUR.UNUSED_1$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NOT_USED")+" = "+_CUR.UNUSED_1$
15120 IF _ORIG.UNUSED_2$=_CUR.UNUSED_2$ OR UNUSED_2$=_CUR.UNUSED_2$ THEN GOTO *NEXT ELSE IF _ORIG.UNUSED_2$=UNUSED_2$ THEN _CHG2$=_CHG2$+SEP+MSG("NOT_USED")+" = "+_CUR.UNUSED_2$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NOT_USED")+" = "+_CUR.UNUSED_2$
15130 IF _ORIG.UNUSED_3$=_CUR.UNUSED_3$ OR UNUSED_3$=_CUR.UNUSED_3$ THEN GOTO *NEXT ELSE IF _ORIG.UNUSED_3$=UNUSED_3$ THEN _CHG2$=_CHG2$+SEP+MSG("NOT_USED")+" = "+_CUR.UNUSED_3$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NOT_USED")+" = "+_CUR.UNUSED_3$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN DB_CODE$=_CUR.DB_CODE$
16030 IF _CHG_VAR$(2,1)="Y" THEN DB_LOC$=_CUR.DB_LOC$
16040 IF _CHG_VAR$(3,1)="Y" THEN DB_NAME$=_CUR.DB_NAME$
16050 IF _CHG_VAR$(4,1)="Y" THEN CR_TEXT_FILE$=_CUR.CR_TEXT_FILE$
16060 IF _CHG_VAR$(5,1)="Y" THEN CR_TEXT_PC$=_CUR.CR_TEXT_PC$
16070 IF _CHG_VAR$(6,1)="Y" THEN DB_TYPE$=_CUR.DB_TYPE$
16080 IF _CHG_VAR$(7,1)="Y" THEN DB_USER$=_CUR.DB_USER$
16090 IF _CHG_VAR$(8,1)="Y" THEN DB_PASSWD$=_CUR.DB_PASSWD$
16100 IF _CHG_VAR$(9,1)="Y" THEN UNUSED_1$=_CUR.UNUSED_1$
16110 IF _CHG_VAR$(10,1)="Y" THEN UNUSED_2$=_CUR.UNUSED_2$
16120 IF _CHG_VAR$(11,1)="Y" THEN UNUSED_3$=_CUR.UNUSED_3$
16990 RETURN 
20000 SELECT_CREATE_MAP:
20005 IOLIST EX0$
20007 CR_TYPE$="M"
20010 MSGBOX MSG("UPDATE_NOW"),MSG("CONFIRM"),"?,YESNO",ANS$
20050 IF ANS$="YES" THEN {! 20080
20055 READ DATA FROM REC(IOL(_FIL_NO)) TO IOL=20005
20060 PFX_NAME$=""; CALL "UPDEX1;UPDATE_ALL_PATHS",EX0,EX0$,%X3$,%X4$,CR_TYPE$,PFX_NAME$
20070 MSGBOX MSG("UPD_CPL")
20080  }
20090 RETURN 
20100 SELECT_CREATE_TABLE:
20105 IOLIST EX0$
20107 CR_TYPE$="T"
20110 MSGBOX MSG("UPDATE_NOW"),MSG("CONFIRM"),"?,YESNO",ANS$
20150 IF ANS$="YES" THEN {! 20080
20155 READ DATA FROM REC(IOL(_FIL_NO)) TO IOL=20005
20160 PFX_NAME$=""; CALL "UPDEX1;UPDATE_ALL_PATHS",EX0,EX0$,%X3$,%X4$,CR_TYPE$,PFX_NAME$
20170 MSGBOX MSG("UPD_CPL")
20180  }
20190 RETURN 
21000 SELECT_UPDATE_DATA:
21002 IOLIST A$,A0$,A1$,A2$,A3$,A4$,A5$,A6$,A7$,A8$,A9$,A10$,A11$,A12$,A13$,A14$,A15$,A16$,A17$,A18$,A19$,A20$,A21$,A22$,A23$,A24$,A25$,A26$,A27$,A28$,A29$,A30$,A31$,A32$,A33$,A34$,A35$,A36$,A37$,A38$,A39$,A40$,A41$,A42$,A43$,A44$,A45$,A46$,A47$,A48$,A49$,A50$,A51$,A52$,A53$,A54$,A55$,A56$,A57$,A58$,A59$,A60$,A61$,A62$,A63$,A64$,A65$,A66$,A67$,A68$,A69$,A70$,A71$,A72$,A73$,A74$,A75$
21005 IOLIST EX0$
21010 MSGBOX MSG("UPDATE_NOW"),MSG("CONFIRM"),"?,YESNO",ANS$
21050 IF ANS$="YES" THEN {
21055 ZZPARM=HFN; OPEN (ZZPARM)"ZZPARM"; ZZPARM$=PTH(ZZPARM); CLOSE (ZZPARM); XP=POS("ZZPARM"=ZZPARM$); DATA_PATH$=ZZPARM$(1,XP-1)
21080 DDF=HFN; OPEN (DDF,IOL=*)"providex.ddf"
21085 READ (DDF,KEY="",DOM=*NEXT,KNO=1)
21090 KY$="",KY$=KEY(DDF,ERR=*NEXT)
21100 WHILE KY$<>""
21110 READ (DDF); DDF_KEY$=KEC(DDF)
21210 IF POS("VIEW:"=UCS(KY$))=0 AND POS("{"=KY$)=0 THEN {! skip views and global dics
21215 PRINT NAME$; INPUT (0,LEN=1,TIM=3,ERR=*NEXT)JME$
21310 FILE_1=HFN; OPEN (FILE_1,ERR=21880)DATA_PATH$+NAME$(1,3)+%C$
21320 FILE_2=HFN; OPEN (FILE_2,ERR=21880)NAME$(1,3)+%C$
21330 PF1$=PTH(FILE_1); PF2$=PTH(FILE_2); IF PF1$=PF2$ THEN GOTO 21880
21400 KY1$="",KY1$=KEY(FILE_1,END=*NEXT)
21410 WHILE KY1$<>""
21500 WR=0,WR$=NAME$(1,3); DIM A[80]
21502 IF WR$="AP0" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21504 IF WR$="AP3" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21506 IF WR$="AP8" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21508 IF WR$="APR" THEN WR=1; READ (FILE_1,KEY=KY1$)A$,A[0],A[1]; WRITE (FILE_2,KEY=KY1$)A$,A[0],A[1]
21510 IF WR$="APX" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21512 IF WR$="AR3" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21514 IF WR$="AR6" THEN WR=1; READ (FILE_1,KEY=KY1$)A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14]
21515 IF WR$="AR6" THEN IF A$(141,2)="20" THEN A$(141,2)="02" ELSE IF A$(141,4)="0931" THEN A$(141,4)="0930"
21516 IF WR$="AR6" THEN WRITE (FILE_2,KEY=KY1$)A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14]
21518 IF WR$="ARG" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21520 IF WR$="ARH" THEN WR=1; READ (FILE_1,KEY=KY1$)A$,A[0]; WRITE (FILE_2,KEY=KY1$)A$,A[0]
21522 IF WR$="ARI" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21524 IF WR$="ARK" THEN WR=1; READ (FILE_1,KEY=KY1$)A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15]
21526 IF WR$="ARK" THEN IF A$(19,5)<>DIM(5) AND A$(24,1)=DIM(1) THEN A$(24,1)="1"
21528 IF WR$="ARK" THEN WRITE (FILE_2,KEY=KY1$)A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15]
21530 IF WR$="ARL" THEN WR=1; READ (FILE_1,KEY=KY1$)A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8]
21531 IF WR$="ARL" THEN IF LEN(A$)<47 THEN A$=PAD(A$,47)
21532 IF WR$="ARL" THEN IF A$(46,1)=" " THEN A$(46,1)="1"
21533 IF WR$="ARL" THEN IF A$(43,4)="0931" THEN A$(43,4)="0930" ELSE IF A$(43,4)="0631" THEN A$(43,4)="0630" ELSE IF A$(43,4)="1131" THEN A$(43,4)="1130" ELSE IF A$(43,4)="0431" THEN A$(43,4)="0430"
21535 IF WR$="ARL" THEN WRITE (FILE_2,KEY=KY1$)A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8]
21540 IF WR$="ARV" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21545 IF WR$="ARZ" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; A$=PAD(A$,100); WRITE (FILE_2,KEY=KY1$)A$
21550 IF WR$="AS5" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; A$=PAD(A$,100); WRITE (FILE_2,KEY=KY1$)A$
21555 IF WR$="ASI" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21560 IF WR$="ASJ" THEN WR=1; READ (FILE_1,KEY=KY1$)A$,A[0]
21565 IF WR$="ASJ" THEN IF A$(294,1)=" " THEN A$(294,1)="1"
21567 IF WR$="ASJ" THEN IF A$(297,2)="20" THEN A$(297,2)="02"
21570 IF WR$="ASJ" THEN WRITE (FILE_2,KEY=KY1$)A$,A[0]
21575 IF WR$="ASL" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21580 IF WR$="ASN" THEN WR=1; READ (FILE_1,KEY=KY1$)A$,A[0],A[1]; WRITE (FILE_2,KEY=KY1$)A$,A[0],A[1]
21585 IF WR$="ASP" THEN WR=1; READ (FILE_1,KEY=KY1$)A$
21587 IF WR$="ASP" THEN IF LEN(A$)=255 THEN A$=A$(144)
21590 IF WR$="ASP" THEN WR=1; WRITE (FILE_2,KEY=KY1$)A$
21595 IF WR$="ASQ" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21600 IF WR$="ASY" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21605 IF WR$="ASZ" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21610 IF WR$="ECG" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21615 IF WR$="ECH" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21620 IF WR$="ECO" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21625 IF WR$="ECU" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21630 IF WR$="ECV" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21635 IF WR$="ECX" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21640 IF WR$="ECY" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21645 IF WR$="EDA" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21650 IF WR$="EDC" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21655 IF WR$="EDW" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21660 IF WR$="EE2" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21665 IF WR$="EF0" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21670 IF WR$="EF1" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21675 IF WR$="EF2" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21680 IF WR$="EF3" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21685 IF WR$="FE2" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21690 IF WR$="FE5" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$
21700 IF WR$="FM1" THEN WR=1; READ (FILE_1,KEY=KY1$)A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15],A[16],A[17],A[18],A[19],A[20],A[21],A[22],A[23],A[24],A[25],A[26],A[27],A[28],A[29],A[30],A[31]
21702 IF WR$="FM1" AND ABS(A[24])>99999999999 THEN A[24]=0
21705 IF WR$="FM1" THEN WR=1; WRITE (FILE_2,KEY=KY1$)A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15],A[16],A[17],A[18],A[19],A[20],A[21],A[22],A[23],A[24],A[25],A[26],A[27],A[28],A[29],A[30],A[31]
21710 IF WR$="FM3" THEN WR=1; READ (FILE_1,KEY=KY1$)A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13]
21711 IF WR$="FM3" AND ABS(A[8])>99999999999 THEN A[8]=0
21712 IF WR$="FM3" AND ABS(A[2])>99999999999 THEN A[2]=0
21713 IF WR$="FM3" AND ABS(A[3])>99999999999 THEN A[3]=0
21714 IF WR$="FM3" AND ABS(A[7])>99999999999 THEN A[7]=0
21715 IF WR$="FM3" THEN WR=1; WRITE (FILE_2,KEY=KY1$)A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13]
21720 IF WR$="FM4" THEN WR=1; READ (FILE_1,KEY=KY1$,ERR=*NEXT)A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15],A[16]; GOTO 21722
21721 IF WR$="FM4" THEN WR=1; READ (FILE_1,KEY=KY1$)A$,B$,A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15],A[16]; GOTO 21722
21722 IF WR$="FM4" THEN IF A$(89,6)="J"+DIM(5) THEN A$(89,6)=DIM(6)
21723 IF WR$="FM4" AND ABS(A[1])>99999999999 THEN A[1]=0
21724 IF WR$="FM4" THEN IF A$(83,4)<>DIM(4) AND A$(87,2)=DIM(2) THEN A$(87,2)="01" ELSE IF A$(89,6)="A"+DIM(5) THEN A$(89,6)=DIM(6)
21725 IF WR$="FM4" THEN WR=1; WRITE (FILE_2,KEY=KY1$)A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15],A[16]
21730 IF WR$="FM8" THEN WR=1; READ (FILE_1,KEY=KY1$)A$; WRITE (FILE_2,KEY=KY1$)A$

21737 IF WR$="FMC" THEN IF A$(93,4)<>DIM(4) AND A$(97,2)=DIM(2) THEN A$(93,6)=DIM(6)
21740 IF WR$="FMC" THEN WRITE (FILE_2,KEY=KY1$)A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15],A[16],A[17],A[18],A[19],A[20],A[21],A[22],A[23],A[24],A[25],A[26],A[27],A[28],A[29],A[30],A[31],A[32],A[33],A[34],A[35],A[36],A[37],A[38],A[39],A[40],A[41],A[42],A[43],A[44],A[45],A[46],A[47],A[48],A[49],A[50],A[51],A[52],A[53],A[54],A[55],A[56],A[57],A[58],A[59],A[60],A[61],A[62],A[63],A[64],A[65],A[66],A[67],A[68],A[69],A[70],A[71],A[72],A[73],A[74],A[75]

21743 IF WR$="FMD" THEN IF A$(93,4)<>DIM(4) AND A$(97,2)=DIM(2) THEN A$(93,6)=DIM(6)
21745 IF WR$="FMD" THEN WRITE (FILE_2,KEY=KY1$)A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15],A[16],A[17],A[18],A[19],A[20],A[21],A[22],A[23],A[24],A[25],A[26],A[27],A[28],A[29],A[30],A[31],A[32],A[33],A[34],A[35],A[36],A[37],A[38],A[39],A[40],A[41],A[42],A[43],A[44],A[45],A[46],A[47],A[48],A[49],A[50],A[51],A[52],A[53],A[54],A[55],A[56],A[57],A[58],A[59],A[60],A[61],A[62],A[63],A[64],A[65],A[66],A[67],A[68],A[69],A[70],A[71],A[72],A[73],A[74],A[75]
21782 IF NOT(WR) THEN READ (FILE_1,KEY=KY1$)IOL=21002; WRITE (FILE_2,KEY=KY1$)IOL=21002
21790 KY1$="",KY1$=KEY(FILE_1,END=*NEXT)
21800 WEND 
21850  } ! 21210
21880 CLOSE (FILE_1); CLOSE (FILE_2)
21890 KY$="",KY$=KEY(DDF,ERR=*NEXT)
21900 WEND 
21910 MSGBOX MSG("UPD_CPL")
21950  } ! 21050
21990 RETURN 
23000 SELECT_UPGRADE_TABLES:
23010 IOL_EX0:IOLIST EX0$
23020 CR_TYPE$="U"
23030 MSGBOX MSG("UPDATE_NOW"),MSG("CONFIRM"),"?,YESNO",ANS$
23040 IF ANS$="YES" THEN {
23050 READ DATA FROM REC(IOL(_FIL_NO)) TO IOL=IOL_EX0
23060 PFX_NAME$=""; CALL "UPDEX1;UPGRADE_ALL_TABLES",EX0,EX0$,%X3$,%X4$,CR_TYPE$
23070 MSGBOX MSG("UPD_CPL")
23080  }
23090 RETURN 
56000 REM "202107-Oracle, MySQL Database definition                           
