0010 ! DRGMBA - File Maintenance Program for DR1_FilesToReplicate (="DR1"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Jan. 20, 2003 12:12
0030 ! ************************************************************************
0035 REM "5.7 - 08/13/18 - 13.530555 - jvv - SSP# 301133
0037 REM "301133-Controls on some selections for the Data Rep Target setup   
0040 REM "Copyright 2018 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "DRGMBA","../DRG/DR.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="DR1"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=2
0430 DIM _KEYS$[1:2]; _KEYS$[1]="FILE_TO_REPLICATE$",_KEYS$[2]="SEQ_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1011 IF ID$="FILE_TO_REPLICATE" THEN IF MID(FILE_TO_REPLICATE$,1,2)="DR" THEN MSGBOX MSG("DRGMBA_01",FILE_TO_REPLICATE$),MSG("FYI"),"!"; NEXT_ID=FILE_TO_REPLICATE.CTL; FILE_TO_REPLICATE$=""; REFRESH_FLG=1; EXIT ! SSP 301133
1012 IF ID$<>"SEQ_NUM" THEN GOTO 1020
1015 SEQ_NUM$=STR(NUM(SEQ_NUM$):"00",ERR=*NEXT); GOTO 1020
1017 SEQ_NUM$=PAD(SEQ_NUM$,2," ")
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" THEN _KEY$=QRY_VAL$,NEXT_ID=REP_DESC.CTL,FILE_TO_REPLICATE$=MID(QRY_VAL$,1,8),SEQ_NUM$=MID(QRY_VAL$,9,2),REFRESH_FLG=1,_ENABLE_FLG=1,_KCNT=2,QRY_VAL$="" ELSE RETURN ! SSP#231243
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1265 GOSUB CHECK_FILE_EXISTS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3345 GOSUB UPDATE_IOPROG
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3805 IF FILE_TO_REPLICATE$="" THEN RETURN ! SSP 301133
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=FILE_TO_REPLICATE.CTL,_FIRST_FIELD=REP_DESC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN FILE_TO_REPLICATE$="",SEQ_NUM$=""
13030 REP_DESC$=""
13040 DR_TARGET$=""
13050 DATA_PATH$=""
13060 OPTIONS$=""
13070 REPLICATE$="N"
13080 LAST_CHANGE$=""
13090 DATE_INITIALIZED$=""
13100 DATA_DICT_NAME$=""
13110 LOG_ACTIVITY$="N"
13112 DB_TYPE$=""
13114 QUE_PRIORITY$=""
13116 NO_UPDATE_DD$="N"
13117 BYPASS_FILTERS$="" ! 266976
13120 DR1_UNUSED$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=SEQ_NUM.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(16,"N")
15030 IF _ORIG.FILE_TO_REPLICATE$=_CUR.FILE_TO_REPLICATE$ OR FILE_TO_REPLICATE$=_CUR.FILE_TO_REPLICATE$ THEN GOTO *NEXT ELSE IF _ORIG.FILE_TO_REPLICATE$=FILE_TO_REPLICATE$ THEN _CHG2$=_CHG2$+SEP+MSG("FILE2REP")+" = "+_CUR.FILE_TO_REPLICATE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FILE2REP")+" = "+_CUR.FILE_TO_REPLICATE$
15031 IF _ORIG.SEQ_NUM$=_CUR.SEQ_NUM$ OR SEQ_NUM$=_CUR.SEQ_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.SEQ_NUM$=SEQ_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("SEQ")+" = "+_CUR.SEQ_NUM$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEQ")+" = "+_CUR.SEQ_NUM$
15040 IF _ORIG.REP_DESC$=_CUR.REP_DESC$ OR REP_DESC$=_CUR.REP_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.REP_DESC$=REP_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("REP_DESC")+" = "+_CUR.REP_DESC$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("REP_DESC")+" = "+_CUR.REP_DESC$
15050 IF _ORIG.DR_TARGET$=_CUR.DR_TARGET$ OR DR_TARGET$=_CUR.DR_TARGET$ THEN GOTO *NEXT ELSE IF _ORIG.DR_TARGET$=DR_TARGET$ THEN _CHG2$=_CHG2$+SEP+MSG("DR_TARGET")+" = "+_CUR.DR_TARGET$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DR_TARGET")+" = "+_CUR.DR_TARGET$
15060 IF _ORIG.DATA_PATH$=_CUR.DATA_PATH$ OR DATA_PATH$=_CUR.DATA_PATH$ THEN GOTO *NEXT ELSE IF _ORIG.DATA_PATH$=DATA_PATH$ THEN _CHG2$=_CHG2$+SEP+MSG("DATA_PATH")+" = "+_CUR.DATA_PATH$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DATA_PATH")+" = "+_CUR.DATA_PATH$
15070 IF _ORIG.OPTIONS$=_CUR.OPTIONS$ OR OPTIONS$=_CUR.OPTIONS$ THEN GOTO *NEXT ELSE IF _ORIG.OPTIONS$=OPTIONS$ THEN _CHG2$=_CHG2$+SEP+MSG("OPTIONS")+" = "+_CUR.OPTIONS$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OPTIONS")+" = "+_CUR.OPTIONS$
15080 IF _ORIG.REPLICATE$=_CUR.REPLICATE$ OR REPLICATE$=_CUR.REPLICATE$ THEN GOTO *NEXT ELSE IF _ORIG.REPLICATE$=REPLICATE$ THEN _CHG2$=_CHG2$+SEP+MSG("REP_NOW")+" = "+_CUR.REPLICATE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("REP_NOW")+" = "+_CUR.REPLICATE$
15090 IF _ORIG.LAST_CHANGE$=_CUR.LAST_CHANGE$ OR LAST_CHANGE$=_CUR.LAST_CHANGE$ THEN GOTO *NEXT ELSE IF _ORIG.LAST_CHANGE$=LAST_CHANGE$ THEN _CHG2$=_CHG2$+SEP+"TopForm Date Format = "+_CUR.LAST_CHANGE$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"TopForm Date Format = "+_CUR.LAST_CHANGE$
15100 IF _ORIG.DATE_INITIALIZED$=_CUR.DATE_INITIALIZED$ OR DATE_INITIALIZED$=_CUR.DATE_INITIALIZED$ THEN GOTO *NEXT ELSE IF _ORIG.DATE_INITIALIZED$=DATE_INITIALIZED$ THEN _CHG2$=_CHG2$+SEP+"TopForm Date Format = "+_CUR.DATE_INITIALIZED$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"TopForm Date Format = "+_CUR.DATE_INITIALIZED$
15110 IF _ORIG.DATA_DICT_NAME$=_CUR.DATA_DICT_NAME$ OR DATA_DICT_NAME$=_CUR.DATA_DICT_NAME$ THEN GOTO *NEXT ELSE IF _ORIG.DATA_DICT_NAME$=DATA_DICT_NAME$ THEN _CHG2$=_CHG2$+SEP+MSG("DD_NAME")+" = "+_CUR.DATA_DICT_NAME$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DD_NAME")+" = "+_CUR.DATA_DICT_NAME$
15120 IF _ORIG.LOG_ACTIVITY$=_CUR.LOG_ACTIVITY$ OR LOG_ACTIVITY$=_CUR.LOG_ACTIVITY$ THEN GOTO *NEXT ELSE IF _ORIG.LOG_ACTIVITY$=LOG_ACTIVITY$ THEN _CHG2$=_CHG2$+SEP+MSG("LOG_ACTIVE")+" = "+_CUR.LOG_ACTIVITY$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOG_ACTIVE")+" = "+_CUR.LOG_ACTIVITY$
15122 IF _ORIG.DB_TYPE$=_CUR.DB_TYPE$ OR DB_TYPE$=_CUR.DB_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.DB_TYPE$=DB_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("DB_TYPE")+" = "+_CUR.DB_TYPE$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DB_TYPE")+" = "+_CUR.DB_TYPE$
15124 IF _ORIG.QUE_PRIORITY$=_CUR.QUE_PRIORITY$ OR QUE_PRIORITY$=_CUR.QUE_PRIORITY$ THEN GOTO *NEXT ELSE IF _ORIG.QUE_PRIORITY$=QUE_PRIORITY$ THEN _CHG2$=_CHG2$+SEP+MSG("Q_PRIORITY")+" = "+_CUR.QUE_PRIORITY$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("Q_PRIORITY")+" = "+_CUR.QUE_PRIORITY$
15125 IF _ORIG.NO_UPDATE_DD$=_CUR.NO_UPDATE_DD$ OR NO_UPDATE_DD$=_CUR.NO_UPDATE_DD$ THEN GOTO *NEXT ELSE IF _ORIG.NO_UPDATE_DD$=NO_UPDATE_DD$ THEN _CHG2$=_CHG2$+SEP+MSG("NO_UPDT_DD")+" = "+_CUR.NO_UPDATE_DD$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NO_UPDT_DD")+" = "+_CUR.NO_UPDATE_DD$
15130 IF _ORIG.DR1_UNUSED$=_CUR.DR1_UNUSED$ OR DR1_UNUSED$=_CUR.DR1_UNUSED$ THEN GOTO *NEXT ELSE IF _ORIG.DR1_UNUSED$=DR1_UNUSED$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.DR1_UNUSED$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.DR1_UNUSED$
15135 IF _ORIG.BYPASS_FILTERS$=_CUR.BYPASS_FILTERS$ OR BYPASS_FILTERS$=_CUR.BYPASS_FILTERS$ THEN GOTO *NEXT ELSE IF _ORIG.BYPASS_FILTERS$=BYPASS_FILTERS$ THEN _CHG2$=_CHG2$+SEP+MSG("BYPASS_FIL")+" = "+_CUR.BYPASS_FILTERS$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BYPASS_FIL")+" = "+_CUR.BYPASS_FILTERS$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN FILE_TO_REPLICATE$=_CUR.FILE_TO_REPLICATE$
16021 IF _CHG_VAR$(15,1)="Y" THEN SEQ_NUM$=_CUR.SEQ_NUM$
16030 IF _CHG_VAR$(2,1)="Y" THEN REP_DESC$=_CUR.REP_DESC$
16040 IF _CHG_VAR$(3,1)="Y" THEN DR_TARGET$=_CUR.DR_TARGET$
16050 IF _CHG_VAR$(4,1)="Y" THEN DATA_PATH$=_CUR.DATA_PATH$
16060 IF _CHG_VAR$(5,1)="Y" THEN OPTIONS$=_CUR.OPTIONS$
16070 IF _CHG_VAR$(6,1)="Y" THEN REPLICATE$=_CUR.REPLICATE$
16080 IF _CHG_VAR$(7,1)="Y" THEN LAST_CHANGE$=_CUR.LAST_CHANGE$
16090 IF _CHG_VAR$(8,1)="Y" THEN DATE_INITIALIZED$=_CUR.DATE_INITIALIZED$
16100 IF _CHG_VAR$(9,1)="Y" THEN DATA_DICT_NAME$=_CUR.DATA_DICT_NAME$
16110 IF _CHG_VAR$(10,1)="Y" THEN LOG_ACTIVITY$=_CUR.LOG_ACTIVITY$
16112 IF _CHG_VAR$(11,1)="Y" THEN DB_TYPE$=_CUR.DB_TYPE$
16114 IF _CHG_VAR$(12,1)="Y" THEN QUE_PRIORITY$=_CUR.QUE_PRIORITY$
16116 IF _CHG_VAR$(13,1)="Y" THEN NO_UPDT_DD$=_CUR.NO_UPDT_DD$
16117 IF _CHG_VAR$(16,1)="Y" THEN BYPASS_FILTERS$=_CUR.BYPASS_FILTERS$ ! 266976
16120 IF _CHG_VAR$(14,1)="Y" THEN DR1_UNUSED$=_CUR.DR1_UNUSED$
16990 RETURN 
17000 ! 
17010 UPDATE_IOPROG:
17020 DR0=HFN; OPEN (DR0,ERR=ERR_OPEN_DR0)"DR0"+%C$
17025 READ (DR0,KEY=PAD(DR_TARGET$,20),DOM=ERR_NO_TARGET)DR0$
17030 IF REPLICATE$="Y" THEN {
17035 IO_PROG$=STP(DR0$(171,10))
17040 UPDATE_DD_OPT$=NO_UPDATE_DD$
17045 CALL "DR2PFX",%X3$,%X4$,STP(DATA_DICT_NAME$)+"|"+PAD(FILE_TO_REPLICATE$,8)+SEQ_NUM$,STP(DATA_PATH$),IO_PROG$,UPDATE_DD_OPT$
17050  }
17060 GOTO SD_DONE
17095 RETURN 
17100 ! 
17110 SETUP_DATAPATH:! Get datapath from Target and replace tokens
17120 DR0=HFN; OPEN (DR0,ERR=ERR_OPEN_DR0)"DR0"+%C$
17130 READ (DR0,KEY=PAD(DR_TARGET$,20),DOM=ERR_NO_TARGET)DR0$
17131 DR_TARGET_DESC$=DR0$(21,30)
17132 DB_TYPE$=DR0$(181,1)
17140 DATA_PATH$=DR0$(51,120) ! if changed then default to model, 271011
17150 DATA_PATH$=SUB(DATA_PATH$,"&TF",STP(FILE_TO_REPLICATE$)) ! &TF replaced with file name
17160 GOSUB SET_DD_NAME; DATA_PATH$=SUB(DATA_PATH$,"&DD",STP(DATA_DICT_NAME$)) ! &DD replaced with data dictionary name
17170 GOTO SD_DONE
17180 ! 
17181 ERR_OPEN_DR0: MSGBOX "Error opening DR0 file"; GOTO SD_DONE
17190 ERR_NO_TARGET: MSGBOX "Target specified does not exist: "+DR_TARGET$; GOTO SD_DONE
17200 ! 
17201 SD_DONE:
17210 CLOSE (DR0)
17211 REFRESH_FLG=1
17220 RETURN 
17230 ! 
17240 SET_DD_NAME:! Set the data dictionary name from the file name
17250 TMP$=MID(FILE_TO_REPLICATE$,1,3)
17260 DDF=HFN; OPEN (DDF)"providex.ddf"; READ (DDF,KNO=1,KEY=TMP$,DOM=*NEXT)
17270 TMPKEY$=KEY(DDF,KNO=1,END=SDN_DONE); READ (DDF,KEY=TMPKEY$,KNO=1)DDFNAME$; IF MID(TMPKEY$,1,3)<>TMP$ THEN GOTO SDN_DONE ! 212004
17280 DATA_DICT_NAME$=DDFNAME$ ! 212004
17290 SDN_DONE:! done
17291 CLOSE (DDF)
17295 RETURN 
17299 ! 
17500 CHECK_FILE_EXISTS:! check to see if file exists, give message if not
17501 IOL_ZZE:IOLIST ZZE$,ZZE[0],ZZE[1]
17502 OPEN (HFN)"ZZE"; _ZZE=LFO
17503 DIM ZZE$(70),ZZE[10]; FIND (_ZZE,KEY=MID(FILE_TO_REPLICATE$,1,3)+DIM(3),DOM=*NEXT)IOL=IOL_ZZE; REP_DESC$=ZZE$(7,39)
17505 CH=HFN; OPEN (CH,ERR=*NEXT)STP(FILE_TO_REPLICATE$); GOTO FILE_FOUND
17510 MSGBOX "File "+STP(FILE_TO_REPLICATE$)+" cannot be found.",MSG("ERROR"),"OK,!"
17530 FILE_FOUND:CLOSE (CH,ERR=*PROCEED),(_ZZE,ERR=*PROCEED)
17545 RETURN 
17549 ! 
56000 REM "209252-Modify Data Rep to allow output to multiple database
56001 REM "212004-Ver 7 Pvx DataRep refers to table names in all caps
56002 REM "266976-Ability to disable filtering at the table level if target   
56003 REM "271011-Datarep target model is being truncated  
56004 REM "301133-Controls on some selections for the Data Rep Target setup   
