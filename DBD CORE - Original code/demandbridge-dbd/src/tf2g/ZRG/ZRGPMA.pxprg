0010 ! ZRGPMA - File Maintenance Program for ZRY_PDFUserParms (="ZRY"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Dec. 5, 2003 13:33
0030 ! ************************************************************************
0035 REM "5.7 - 03/26/18 - 16.388611 - crg - SSP# 299565
0037 REM "299565-Proxy printing is not working on the new PxPlus 2017.       
0040 REM "Copyright 2018 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 IF TCB(13)=1 THEN BEGIN 
0052 IF NUL(%WDX$) THEN MSGBOX MSG("WARN_WINDX"),MSG("ERROR"),"OK"; GOTO 0075 ! SSP245712
0055 IF NOT(%GUI) THEN CHUI_MODE=1; %GUI=1; PRINT 'SHOW'(0)
0060 PROCESS "ZRGPMA","../ZRG/ZR.EN"
0065 IF CHUI_MODE THEN %GUI=0; PRINT 'SHOW'(1); RUN "ZMENU"
0075 IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZRY"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:2]; _KEYS$[1]="COMPANY_CODE$",_KEYS$[2]="OPERATOR$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1255 ! CALL "[wdx]*winapi;gettemppath",TEMP_DIR$
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=MID(_KEY$,4); TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3065 GOSUB LOAD_DEF_PRINTER; REFRESH_FLG=1
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=COMPANY_CODE.CTL,_FIRST_FIELD=USER_READER_LOCATION.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN COMPANY_CODE$=%C$
13030 IF _CLR_FLG$="R" THEN OPERATOR$=""
13040 USER_READER_LOCATION$=""
13050 USER_TEMP_DIR$=""
13055 DO_NOT_ARCHIVE$="Y" ! SSP#232853
13060 DEF_PRINTER$=""
13070 DEF_PRINT_DRIVER$=""
13075 PRT_WAIT_INTVL$="" ! SSP 276928
13080 ZRY_UNUSED$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=OPERATOR.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(8,"N")
15030 IF _ORIG.COMPANY_CODE$=_CUR.COMPANY_CODE$ OR COMPANY_CODE$=_CUR.COMPANY_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.COMPANY_CODE$=COMPANY_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("COMP_CODE")+" = "+_CUR.COMPANY_CODE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMP_CODE")+" = "+_CUR.COMPANY_CODE$
15040 IF _ORIG.OPERATOR$=_CUR.OPERATOR$ OR OPERATOR$=_CUR.OPERATOR$ THEN GOTO *NEXT ELSE IF _ORIG.OPERATOR$=OPERATOR$ THEN _CHG2$=_CHG2$+SEP+MSG("OPERATOR")+" = "+_CUR.OPERATOR$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OPERATOR")+" = "+_CUR.OPERATOR$
15050 IF _ORIG.USER_READER_LOCATION$=_CUR.USER_READER_LOCATION$ OR USER_READER_LOCATION$=_CUR.USER_READER_LOCATION$ THEN GOTO *NEXT ELSE IF _ORIG.USER_READER_LOCATION$=USER_READER_LOCATION$ THEN _CHG2$=_CHG2$+SEP+MSG("READER_LOC")+" = "+_CUR.USER_READER_LOCATION$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("READER_LOC")+" = "+_CUR.USER_READER_LOCATION$
15060 IF _ORIG.USER_TEMP_DIR$=_CUR.USER_TEMP_DIR$ OR USER_TEMP_DIR$=_CUR.USER_TEMP_DIR$ THEN GOTO *NEXT ELSE IF _ORIG.USER_TEMP_DIR$=USER_TEMP_DIR$ THEN _CHG2$=_CHG2$+SEP+MSG("TEMP_DIR")+" = "+_CUR.USER_TEMP_DIR$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TEMP_DIR")+" = "+_CUR.USER_TEMP_DIR$
15070 IF _ORIG.DEF_PRINTER$=_CUR.DEF_PRINTER$ OR DEF_PRINTER$=_CUR.DEF_PRINTER$ THEN GOTO *NEXT ELSE IF _ORIG.DEF_PRINTER$=DEF_PRINTER$ THEN _CHG2$=_CHG2$+SEP+MSG("DEF_PRIN")+" = "+_CUR.DEF_PRINTER$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DEF_PRIN")+" = "+_CUR.DEF_PRINTER$
15080 IF _ORIG.DEF_PRINT_DRIVER$=_CUR.DEF_PRINT_DRIVER$ OR DEF_PRINT_DRIVER$=_CUR.DEF_PRINT_DRIVER$ THEN GOTO *NEXT ELSE IF _ORIG.DEF_PRINT_DRIVER$=DEF_PRINT_DRIVER$ THEN _CHG2$=_CHG2$+SEP+MSG("DEF_PRN_DR")+" = "+_CUR.DEF_PRINT_DRIVER$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DEF_PRN_DR")+" = "+_CUR.DEF_PRINT_DRIVER$
15085 IF _ORIG.PRT_WAIT_INTVL$=_CUR.PRT_WAIT_INTVL$ OR PRT_WAIT_INTVL$=_CUR.PRT_WAIT_INTVL$ THEN GOTO *NEXT ELSE IF _ORIG.PRT_WAIT_INTVL$=PRT_WAIT_INTVL$ THEN _CHG2$=_CHG2$+SEP+MSG("WAIT_TIME")+" = "+_CUR.PRT_WAIT_INTVL$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WAIT_TIME")+" = "+_CUR.PRT_WAIT_INTVL$ ! SSP0 276928
15090 IF _ORIG.ZRY_UNUSED$=_CUR.ZRY_UNUSED$ OR ZRY_UNUSED$=_CUR.ZRY_UNUSED$ THEN GOTO *NEXT ELSE IF _ORIG.ZRY_UNUSED$=ZRY_UNUSED$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.ZRY_UNUSED$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.ZRY_UNUSED$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN COMPANY_CODE$=_CUR.COMPANY_CODE$
16030 IF _CHG_VAR$(2,1)="Y" THEN OPERATOR$=_CUR.OPERATOR$
16040 IF _CHG_VAR$(3,1)="Y" THEN USER_READER_LOCATION$=_CUR.USER_READER_LOCATION$
16050 IF _CHG_VAR$(4,1)="Y" THEN USER_TEMP_DIR$=_CUR.USER_TEMP_DIR$
16060 IF _CHG_VAR$(5,1)="Y" THEN DEF_PRINTER$=_CUR.DEF_PRINTER$
16070 IF _CHG_VAR$(6,1)="Y" THEN DEF_PRINT_DRIVER$=_CUR.DEF_PRINT_DRIVER$
16080 IF _CHG_VAR$(7,1)="Y" THEN ZRY_UNUSED$=_CUR.ZRY_UNUSED$
16085 IF _CHG_VAR$(8,1)="Y" THEN PRT_WAIT_INTVL$=_CUR.PRT_WAIT_INTVL$ ! SSP 276928
16990 RETURN 
20000 GET_ADOBE:! Find adobe reader
20010 IF NUL(USER_READER_LOCATION$) THEN USER_READER_LOCATION$="C:/Program Files/gs/gs8.53/bin/gswin32c.exe"
20011 ! IF NUL(USER_READER_LOCATION$) THEN USER_READER_LOCATION$="C:/Program Files/Adobe/Acrobat 6.0/Reader/AcroRd32.exe"
20015 M=MSK(USER_READER_LOCATION$,"^.*/"); IF M THEN READER_DIR$=MID(USER_READER_LOCATION$,M,MSL) ELSE READER_DIR$="C:/"
20045 ADOBE_PATH$=%WDX$+USER_READER_LOCATION$,ADOBE_DIR$=%WDX$+READER_DIR$
20050 GET_FILE_BOX READ ADOBE_PATH$,ADOBE_DIR$,MSG("ADOBE_1"),MSG("APP")+"|*.EXE,",ERR=*NEXT
20065 IF MID(ADOBE_PATH$,1,LEN(%WDX$))=%WDX$ THEN USER_READER_LOCATION$=MID(ADOBE_PATH$,LEN(%WDX$)+1) ELSE USER_READER_LOCATION$=ADOBE_PATH$
20070 REFRESH_FLG=1
20095 RETURN 
20100 CHECK_TEMP_DIR:! Verify that temp dir exists
20110 IF NOT(NUL(USER_TEMP_DIR$)) AND USER_TEMP_DIR$<>PRIOR_VAL$ THEN {
20115 CK=HFN; OPEN (CK,ERR=BAD_TEMP_DIR)%WDX$+STP(USER_TEMP_DIR$,1); CLOSE (CK)
20140  }
20145 RETURN 
20150 BAD_TEMP_DIR:! bad temp directory
20155 MSGBOX MSG("ZRGZAA_01",STP(USER_TEMP_DIR$,1)),MSG("MB_ATTN"),"!"
20160 NEXT_ID=_CUR_ID
20195 RETURN 
20199 ! ******************************************************
20200 LOAD_DEF_PRINTER:! load printer drop box
20205 DROP_BOX LOAD DEF_PRINTER.CTL,"",ERR=*NEXT
20210 WINPRT_SETUP DIRECTORY PRINTER_LIST$,ERR=*NEXT
20220 DROP_BOX LOAD DEF_PRINTER.CTL,PRINTER_LIST$,ERR=*NEXT
20250 DROP_BOX WRITE DEF_PRINTER.CTL,STP(DEF_PRINTER$,1),ERR=*NEXT
20280 REFRESH_FLG=1
20295 RETURN 
20299 ! 
20300 SET_PRINTER_DRIVER:! Attempt to get printer driver for the printer
20310 FOUND_PRINTER=0
20315 CALL "[wdx]*winapi;gettemppath",TDIR$
20320 INVOKE %WDX$+"regedit /E "+TDIR$+"pd.reg "+QUO+"HKEY_LOCAL_MACHINE\SYSTEM\CURRENTCONTROLSET\CONTROL\PRINT\PRINTERS"+QUO,ERR=GIVE_UP
20325 TCHAN=HFN; OPEN (TCHAN,ERR=GIVE_UP)%WDX$+TDIR$+"pd.reg"
20330 READ_NEXT:READ (TCHAN,END=FILE_DONE)REG_LINE$; REG_LINE$=STP(REG_LINE$,3,$00$) ! read in and remove all nulls
20335 IF NOT(FOUND_PRINTER) THEN IF MID(REG_LINE$,2,4)<>"Name" THEN GOTO READ_NEXT ELSE REG_LINE$=SUB(MID(REG_LINE$,9,LEN(REG_LINE$)-10),"\\","\"); IF REG_LINE$=STP(DEF_PRINTER$,1) THEN FOUND_PRINTER=1 END_IF ; GOTO READ_NEXT
20340 IF FOUND_PRINTER THEN IF MID(REG_LINE$,2,14)="Printer Driver" THEN DEF_PRINT_DRIVER$=MID(REG_LINE$,19,LEN(REG_LINE$)-20),REFRESH_FLG=1; GOTO FILE_DONE ELSE GOTO READ_NEXT
20360 FILE_DONE:
20390 GIVE_UP:
20395 RETURN 
20399 ! 
20400 POST_DEF_PRINTER:
20410 ! IF DEF_PRINTER$<>PRIOR_VAL$ THEN GOSUB SET_PRINTER_DRIVER
20495 RETURN 
20499 ! 
20500 TEST_PRINTER:! 278082: Issue a test print job using the current user proxy print default settings
20510 PC_TEMP_DIR$=STP(USER_TEMP_DIR$,1)
20520 IF PC_TEMP_DIR$="" THEN PC_TEMP_DIR$="C:/" ELSE IF POS("/\"=PC_TEMP_DIR$(LEN(PC_TEMP_DIR$),1))=0 THEN PC_TEMP_DIR$=PC_TEMP_DIR$+"/"
20530 READER_LOCATION$=STP(USER_READER_LOCATION$,1),PRINTER$=DEF_PRINTER$
20540 TESTJOBFILE$="PPTEST.ps"; IF TEST_JOB_TYPE$="2" THEN TESTJOBFILE$="PPTEST.pcl"
20550 ! 
20560 DOC_CHAN=HFN; OPEN INPUT (DOC_CHAN,ISZ=8000,ERR=ERR_TEST_PRINTER)TESTJOBFILE$ ! If another session has consumed this job we will see an ERR 12 here, ignore it
20570 F$=PC_TEMP_DIR$+"TOPFORM"+%X3$(40,3)+"_TEST.PDF"; IF NUL(READER_LOCATION$) THEN F$="*WINDEV*;"+STP(PRINTER$); GOTO SETUP_TRANSFER
20580 ! 
20590 SERIAL %WDX$+F$,ERR=*PROCEED
20600 TMP_CHAN=HFN; OPEN PURGE (TMP_CHAN,ISZ=1,ERR=*NEXT)%WDX$+F$; GOTO DO_TRANSFER
20610 GOTO ERR_TEST_PRINTER
20620 ! 
20630 SETUP_TRANSFER: TMP_CHAN=HFN; OPEN (TMP_CHAN,ISZ=1,ERR=*NEXT)%WDX$+F$; GOTO DO_TRANSFER ! 271499
20640 GOTO ERR_TEST_PRINTER
20650 ! 
20660 DO_TRANSFER:READ RECORD (DOC_CHAN,END=*NEXT)J$; GOSUB REPLACE_TAGS; WRITE RECORD (TMP_CHAN,SIZ=LEN(J$))J$; GOTO *SAME
20670 CLOSE (TMP_CHAN),(DOC_CHAN)
20680 IF NUL(READER_LOCATION$) THEN GOTO TEST_PRINTER_DONE ! We are done, job has been streamed directly to printer
20690 WCMD$=QUO+READER_LOCATION$+QUO+" -sDEVICE=mswinpr2 -sOutputFile="+QUO+"%printer%"+STP(PRINTER$)+QUO+" -dQUIET -dNOPAUSE -dBATCH "+F$ ! Use ghostscript to stream job to printer
20700 INVOKE HIDE WAIT %WDX$+WCMD$
20710 ! 
20720 TEST_PRINTER_DONE: MSGBOX "Test print job has been sent.","Test Job","OK"
20745 RETURN 
20749 ! 
20750 ERR_TEST_PRINTER:
20760 TERR=ERR,TLINE=TCB(5)
20770 MSGBOX "Error sending test print job"+"\nLine "+STR(TLINE)+": "+MSG(TERR),"Test Job Error","OK"
20795 RETURN 
20799 ! 
20800 REPLACE_TAGS:
20810 J$=SUB(J$,"_DBD_PP_DTE_",DTE(0,TIM:"%Y/%Mz/%Dz - %Hz:%mz:%sz"))
20820 J$=SUB(J$,"_DBD_PP_OPERATOR_",OPERATOR$)
20830 J$=SUB(J$,"_DBD_PP_PRINTER_",PRINTER$)
20840 J$=SUB(J$,"_DBD_PP_READER_",READER_LOCATION$)
20850 J$=SUB(J$,"_DBD_PP_JOBFILE_",TESTJOBFILE$)
20895 RETURN 
20899 ! 
56000 REM "232853-ZRGPMA - PDF Operator Defaults - "Do Not Archve" question   
56002 REM "245712-The name "PDF Printing" is not accurate or appropriate for  
56003 REM "276928-User Specific Proxy Printing - does not print all copies of 
56004 REM "278082-Unable to print an invoice thru Proxy Printing.             
