0010 ! ZRGRBS - Repository Document code print
0035 REM "5.7 - 08/16/10 - 12.715277 - tma - SSP# 240435
0037 REM "240435-Compare of programs/panels from DEV to Release              
0040 REM "Copyright 2010 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "ZRGRBS","../ZRG/ZR.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0115 REPORT_SELE$="ZZXAR6ZZXZR4ZRXZRT"
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZZS"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0185 _ZR0=HFN; OPEN (_ZR0,IOL=*,REC=ZR0$,ERR=OPEN_ERR)"ZR0"+%C$
0186 _ZZPARM=HFN; OPEN (_ZZPARM,ERR=OPEN_ERR)"ZZPARM"; FIND (_ZZPARM,KEY=FID(0)+"      ")X3$,*,X4$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="PRG_NAME$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 ARG_1$="ZR2RBA            ",%K9$="ZR2RBA"
0536 DIM A$(140),R0$(125),RNG(4)
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT)IOL=20020,IOL=20030; GOTO 0560
0551 DIM A$(140),R0$(128),W$(37),RNG(4)
0552 IF ID$="RPT_SELEC" THEN A$(1,6)="ZR2RBA",A$(7,12)=RPT_SELEC$
0560 NXT_OPTION:
0562 GOSUB ASSIGN_LIB; CHANGE_FLG=0; GOSUB SEL_REPOSITORY
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 IF _ZR0<>0 THEN CLOSE (_ZR0); _ZR0=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$; _KEY$=STP(_KEY$,1)
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$; _KEY$=STP(_KEY$,1)
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=*NEXT)IOL=20020,IOL=20030; CHANGE_FLG=0; GOTO 3360
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3805 GOSUB ASSIGN_PRG
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=PRG_NAME.CTL,_FIRST_FIELD=RPT_SELEC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX MSG("UPD_RPT_1")+SEP+MSG("UPD_RPT_2"),MSG("CONFIRM"),"?,YESNO",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRT
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 RPT_NUM1$=STR(RPT_NUM1)
10030 RPT_NUM2$=STR(RPT_NUM2)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="RPT_NUM1",_X=RPT_NUM1.CTL,RPT_NUM1=NUM(RPT_NUM1$,ERR=NON_NUMERIC)
11030 _X$="RPT_NUM2",_X=RPT_NUM2.CTL,RPT_NUM2=NUM(RPT_NUM2$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN PRG_NAME$=""
13030 RPT_SELEC$=""
13040 RPT_DESC$=""
13050 RPT_OPT$=""
13060 RPT_SEQ$=""
13070 RPT_SHIPTO$=" "
13080 RPT_AGEINV$=""
13090 RPT_REPTYPE$=""
13100 RPT_ZEROBAL$=""
13110 RPT_POSTAGE$=""
13120 RPT_NAMEADD$=""
13130 RPT_INVRPT$=""
13140 RPT_FISYR$=""
13150 RPT_PER$=""
13160 RPT_CCINV$=""
13170 RPT_AGEDATE$=""
13180 RPT_PTD$=""
13190 RPT_RECAP$=""
13200 DATE_FLD1$=""
13210 DATE_FLD2$=""
13220 DATE_FLD3$=""
13230 DATE_FLD4$=""
13240 RPT_CMT1$=""
13250 RPT_CMT2$=""
13260 COMMENTS_3$=""
13270 COMMENTS_4$=""
13280 PRT_MODE$=""
13290 RPT_OUTDEV$=""
13300 RPT_VERT$=""
13310 RPT_HORIZ$=""
13320 RPT_AUX1$=""
13330 RPT_AUX2$=""
13340 RPT_AUX3$=""
13350 RPT_AUX4$=""
13360 RPT_LINES$=""
13370 RPT_FORMCODE$=""
13380 NOT_USED$=""
13390 UNUSED_1$=""
13400 UNUSED_2$=""
13410 UNUSED_3$=""
13420 UNUSED_4$=""
13430 UNUSED_5$=""
13440 UNUSED_6$=""
13450 RPT_JOBCARD$=""
13460 RPT_JOBCARD_FLG$=""
13470 RPT_NUM1=0
13480 RPT_NUM2=0
13490 BANK_CODE$=""
13500 PRT_DE_ITEM$=""
13510 GL_START$=""
13520 GL_END$=""
13530 START_FISCAL$=""
13540 START_ACCTPD$=""
13550 END_ACCTPD$=""
13560 ML_SOURCE_JOUR$=""
13570 ML_AUDIT_NO$=""
13580 PRT_EXT_POS$=""
13590 PRT_IND_DEPT$=""
13600 CONS_STA_DEPT$=""
13610 INA_ACCT_PRT$=""
13620 INC_STA_PRT_SUBACCT$=""
13630 INC_STA_FMT$=""
13640 BAL_SHE_FMT$=""
13650 BAL_SHE_SUBACT$=""
13660 FS_REPRT_RECA$=""
13670 MAIL_CODE_1$=""
13680 MAIL_CODE_2$=""
13690 MAIL_CODE_3$=""
13700 MAIL_CODE_4$=""
13710 MAIL_CODE_5$=""
13720 MAIL_CODE_6$=""
13730 MAIL_CODE_7$=""
13740 MAIL_CODE_8$=""
13750 MAIL_CODE_9$=""
13760 CB_PR_COMP_COUNT$=""
13770 CB_PAGE_BREAK$=""
13780 CB_VARIANCE$=""
13790 CB_ITEM_NO$=""
13800 CB_ONLY_ITEM$=""
13810 CB_VAL_VAR$=""
13820 ML_LOC_START$=""
13830 ML_LOC_END$=""
13840 ML_BIN_START$=""
13850 ML_BIN_END$=""
13860 ML_CUST_START$=""
13870 ML_CUST_END$=""
13880 ML_ITEM_START$=""
13890 ML_ITEM_END$=""
13900 ML_SEQ_START$=""
13910 ML_SEQ_END$=""
13920 ML_PROD_START$=""
13930 ML_PROD_END$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
20000 VIEW_REPORT:
20005 PRINT_REPORT:
20010 ! View Report Routine.
20020 IOLIST A$(1)
20030 IOLIST R0$(1),W$,RNG{ALL}
20040 ZZP=HFN
20050 OPEN (ZZP,ERR=OPEN_ERR)"ZZP"
20060 ! 
20062 IOLIST X3$,M1$,X4$,D0$,X$,A9$
20070 DIM A$(140),R0$(128),W$(37)
20075 IF CHANGE_FLG THEN GOSUB CHECK_CHANGES ELSE GOSUB ASSIGN_PRG
20090 IF ID$="RPT_VEIW" THEN R0$(2,6)="P_    "
20260 K$=X3$(1,8),T1$="ZR1..."
20267 %B_WINDATE_FMT$=%WINDATE_FMT$,%WINDATE_FMT$="YYYYMMDD",JJ$=DTE(0:"%Yl%Mz%Dz"); CALL "ZZWDTE;VALIDATE",JJ$,JJJ$,JJJJ$; X3$(21,6)=JJ$
20269 X3$(174,4)="",X3$(178,6)=""
20270 WRITE (ZZP,KEY=K$)X3$,X4$,T1$,R0$,W$,A$
20271 PRINT 'CURSOR'(1)
20280 CALL "ZR2RBA"
20281 PRINT 'CURSOR'(0)
20285 CMD_STR$="END"
20290 RETURN 
22000 ASSIGN_LIB:
22020 ! Output Option
22030 IF NUM(A$(71,1))=0 THEN A$(71,1)="1"
22120 PRT_MODE$=R0$(1,1),RPT_OUTDEV$=R0$(2,2)
22130 RPT_VERT$=R0$(9,1),RPT_HORIZ$=R0$(10,1)
22140 RPT_AUX1$=R0$(11,1),RPT_AUX2$=R0$(12,1)
22160 RPT_LINES$=R0$(15,2),RPT_FORMCODE$=R0$(17,1)
22170 RPT_JOBCARD$=R0$(65,60),RPT_JOBCARD_FLG$=R0$(125,1),RPT_SELEC$=A$(73,10),RPT_AGEINV$=A$(83,1),RPT_CMT2$=A$(138,2),BANK_CODE$=A$(84,3),RPT_CMT1$=A$(87,20)
22500 ! Selection Options
22510 RPT_SELEC$=A$(73,10),RPT_DESC$=A$(19,40),RPT_OPT$=A$(59,12),RPT_SEQ$=A$(71,1),REFRESH_FLG=1
22511 IF STP(RPT_SELEC$)="" THEN RPT_SELEC$=""
22515 IF STP(RPT_OPT$)="" THEN RPT_OPT$=""
22518 SWITCH XX
22519 CASE 1
22520 IF STP(W$(1,10))="" THEN CUST_START$="" ELSE CUST_START$=W$(1,10)
22530 IF STP(W$(11,10))="" OR W$(11,10)="~~~~~~~~~~" THEN CUST_END$="" ELSE CUST_END$=W$(11,10)
22532 IF STP(W$(21,8))="" THEN INV_START$="" ELSE INV_START$=W$(21,8)
22534 IF STP(W$(29,8))="" OR W$(29,8)="~~~~~~~~" THEN INV_END$="" ELSE INV_END$=W$(29,8)
22535 BREAK
22540 CASE 2
22550 IF STP(W$(1,6))="" THEN REPORT_DATE$="" ELSE REPORT_DATE$=W$(1,6)
22560 IF STP(W$(7,6))="" OR W$(7,6)="~~~~~~" THEN REPORT_END$="" ELSE REPORT_END$=W$(7,6)
22570 IF STP(W$(13,6))="" THEN AUDIT_START$="" ELSE AUDIT_START$=W$(13,6)
22580 IF STP(W$(19,6))="" OR W$(19,6)="~~~~~~" OR W$(19,6)="999999" THEN AUDIT_END$="" ELSE AUDIT_END$=W$(19,6)
22590 BREAK
22600 CASE 3
22610 BREAK
22620 END SWITCH 
22900 RETURN 
23000 ASSIGN_PRG:
23010 A$(1,6)=ARG_1$,A$(19,40)=RPT_DESC$,A$(59,12)=RPT_OPT$,A$(71,1)=RPT_SEQ$,A$(73,10)=RPT_SELEC$
23015 IF RD_ALT$="1" THEN A$(7,12)=RPT_SELEC$,_KEY$(7,10)=RPT_SELEC$
23020 A$(59,12)=RPT_OPT$; A$(71,1)=RPT_SEQ$
23030 ! 
23040 R0$(1,1)=PRT_MODE$; R0$(2,6)=MID(RPT_OUTDEV$,1,2)+"    "
23050 R0$(9,1)=RPT_VERT$; R0$(10,1)=RPT_HORIZ$
23060 R0$(11,1)=RPT_AUX1$; R0$(12,1)=RPT_AUX2$
23070 R0$(13,1)=RPT_AUX3$,R0$(14,1)=RPT_AUX4$
23080 R0$(15,2)=RPT_LINES$; R0$(17,1)=RPT_FORMCODE$
23090 R0$(65,60)=RPT_JOBCARD$; R0$(125,1)=RPT_JOBCARD_FLG$
23092 SWITCH XX
23095 CASE 1
23098 A$(107,4)="1008",W$=PAD(W$,37)
23100 IF CUST_START$="" THEN W$(1,10)=PAD("",12," ") ELSE W$(1,10)=CUST_START$
23110 IF CUST_END$="" THEN W$(11,10)=PAD("",12,"~") ELSE W$(11,10)=CUST_END$
23112 IF INV_START$="" THEN W$(21,8)=PAD("",12," ") ELSE W$(21,8)=INV_START$
23115 IF INV_END$="" THEN W$(29,8)=PAD("",12,"~") ELSE W$(29,8)=INV_END$
23118 BREAK
23120 CASE 2
23125 A$(107,4)="0606"
23130 IF REPORT_DATE$="" THEN W$(1,6)=PAD("",6," ") ELSE W$(1,6)=REPORT_DATE$
23135 IF REPORT_END$="" THEN W$(7,6)=PAD("",6,"~") ELSE W$(7,6)=REPORT_END$
23140 IF AUDIT_START$="" THEN W$(13,6)=PAD("",6," ") ELSE W$(13,6)=AUDIT_START$
23150 IF AUDIT_END$="" THEN W$(19,6)=PAD("",6,"9") ELSE W$(19,6)=AUDIT_END$
23160 BREAK
23170 CASE 3
23180 A$(107,4)="0606"
23190 BREAK
23200 END SWITCH 
23890 A$(73,10)=RPT_SELEC$,A$(83,1)=RPT_AGEINV$,A$(138,2)=RPT_CMT2$,A$(84,3)=BANK_CODE$,A$(87,20)=RPT_CMT1$
23900 RETURN 
40000 ALT_SELECTION:
40010 IF RD_ALT$="1" THEN CALL "*WINGRP;SHOW",ALT.GRP$ ELSE CALL "*WINGRP;HIDE",ALT.GRP$; GOTO 0535
40020 GOTO 0551
40500 SEL_QUERY:
40510 VAL$=""
40520 PROCESS "QRY_ZZS_1","../ZZG/ZZ.EN",VAL$
40530 IF STP(VAL$)="" THEN RETURN 
40540 _KEY$="ZR2RAA"+VAL$,RPT_SELEC$=VAL$(1,10)
40550 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT)IOL=20020,IOL=20030; GOTO 0560
40560 RETURN 
60000 SELECT_SELECTION:
60010 _KEY$="ZR2RBA"+RPT_SELEC$,_KEY$=PAD(_KEY$,18," ")
60020 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD1)A$,R0$,W$,RNG{ALL}
60030 GOTO NXT_OPTION
60500 NEW_RECORD1:
60510 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
60520 IF _YESNO$="NO" THEN GOSUB MAIN_POST_DISPLAY; EXIT 
60530 DIM A$(126),R0$(125),W$(25),RNG(4)
60540 A$(71,1)="1",A$(1,6)="GL2RBA",A$(7,LEN(RPT_SELEC$))=RPT_SELEC$
60550 WRITE (_FIL_NO,KEY=_KEY$)A$,R0$,W$,RNG{ALL}
60560 GOTO NXT_OPTION
61000 SEL_REPOSITORY: REFRESH_FLG=1
61005 IF ID$="RPT_SELEC" AND _EOM$=$00$ AND QRY_VAL$="" THEN RETURN 
61010 RPT_SELEC$=PAD(RPT_SELEC$,10)
61020 READ (_ZR0,KEY=RPT_SELEC$,DOM=NO_RECS)
61025 XX=1 ! XX=POS(ZR0.REPORT_SELECT_METHOD$=REPORT_SELE$,6),XX=INT(XX/6)+1
61028 EXECUTE "NEXT_FOLDER=FLDR.ZR1."+STR(XX)+".CTL"
61029 IF XX=1 THEN RPT_SEQDESC$="By Customer" ELSE IF XX=2 THEN RPT_SEQDESC$="By Date and Audit Number" ELSE RPT_SEQDESC$=""
61030 IF ID$="RPT_SELEC" THEN A$(73,10)=RPT_SELEC$,ARG_1$=A$(1,18); GOTO NEW
61035 RETURN 
61038 NO_RECS: RPT_SELEC$="",NEXT_ID=RPT_SELEC.CTL; EXIT 
61039 NEW:
61040 DIM A$(140),R0$(125),RNG(4)
61050 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
61060 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT)IOL=20020,IOL=20030
61065 IF MID(A$,73,10)=RPT_SELEC$ THEN GOTO 61080
61070 DIM A$(140),R0$(128),W$(37),RNG(4)
61075 A$(1,6)="ZR2RBA",A$(73,10)=RPT_SELEC$
61080 GOSUB ASSIGN_LIB; CHANGE_FLG=0
61090 RETURN 
