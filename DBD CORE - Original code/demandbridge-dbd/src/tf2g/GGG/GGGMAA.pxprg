0010 ! GGGMAA - G/L Gateway Setup
0035 ! "6.0 - 06/05/03 - 7.144166 - jir
0040 ! "Copyright 2003 Computer Software Inc.; Norcross, Georgia
0041 ! "        Licensed Software - All Rights Reserved.
0050 PROCESS "GGGMAA","../GLG/GL.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0115 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="GG0"+%C$
0165 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0171 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0172 _FILE_NAME$="GL1"+%C$,_GL1=HFN; OPEN (_GL1,IOL=*,REC=_GL1$,ERR=OPEN_ERR)_FILE_NAME$
0174 _FILE_NAME$="GL5"+%C$,_GL5=HFN; OPEN (_GL5,IOL=*,REC=_GL5$,ERR=OPEN_ERR)_FILE_NAME$
0176 _FILE_NAME$="ZZPARM",_ZZP=HFN; OPEN (_ZZP,ERR=OPEN_ERR)_FILE_NAME$; READ (_ZZP,KEY=FID(0)+"      ")X3$,*,X4$; READ (_ZZP,KEY=X3$(9,3)+"G/L")P0$; METHODS_TO_UPDATE$=P0$(40,1)
0190 RETURN 
0199 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="SEQ_NUMBER$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0515 IF P0$(40,1)+P0$(180,1)="CY" THEN CALL "*WINGRP;SHOW",MTD.GRP$
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1011 SEQ_NUMBER$=PAD(SEQ_NUMBER$,6,0,"0"),SEQ_NUMBER.CTL'VALUE$=SEQ_NUMBER$
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=START_FISCAL.CTL
1105 CALL "*WINGRP;ENABLE",FIELDS.GRP$; CALL "*WINGRP;ENABLE",BUTTONS.GRP$
1106 CHANGE_FLG=0
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1260 _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=START_FISCAL.CTL
1280 ENTER_MEMO$="Y",REFRESH_FLG=1,METHODS_TO_UPDATE$="A"; GOSUB RES_BT
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY,METHODS_TO_UPDATE$="A"; GOSUB RES_BT
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0,START_FISCAL$=FISC_YR_END$,START_ACCTPD$=ACCT_PER$,METHODS_TO_UPDATE$=STP(METH_TO_UPDT$); IF METHODS_TO_UPDATE$="CA" THEN METHODS_TO_UPDATE$="B"
3070 GOSUB SEL_SJ
3080 CALL "*WINGRP;ENABLE",FIELDS.GRP$; CALL "*WINGRP;ENABLE",BUTTONS.GRP$
3085 PERFORM "GLGRRS;GET_FY_DATES"; ML_ENDING_PERIOD$=ML_DTE_1$
3090 GOSUB RES_BT ! IF BT_C THEN BT_C'TEXTCOLOR$="Light BLue"
3092 BT_C=EVN("BT_"+METHODS_TO_UPDATE$+".CTL")
3100 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:IF METHODS_TO_UPDATE$="B" THEN METHODS_TO_UPDATE$="CA"
3330 WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=SEQ_NUMBER.CTL,_FIRST_FIELD=START_FISCAL.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR"),_MSG_DIRECTORY$=MSG("DIRECTORY"),_MSG_END_OF_FIL$=MSG("END_OF_FIL"),_MSG_FILOPNERR1$=MSG("FILOPNERR1"),_MSG_JUST_CHECK$=MSG("JUST_CHECK"),_MSG_MANDATORY$=MSG("MANDATORY"),_MSG_NEXT$=MSG("NEXT"),_MSG_NON_NUMER$=MSG("NON_NUMER"),_MSG_NOT_FOUND$=MSG("NOT_FOUND"),_MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG"),_MSG_PRECEDING$=MSG("PRECEDING"),_MSG_PREFIX$=MSG("PREFIX"),_MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD"),_MSG_REC_CR_NEW$=MSG("REC_CR_NEW"),_MSG_REC_LOCKED$=MSG("REC_LOCKED"),_MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1),_MSG_REC_NOTFND$=MSG("REC_NOTFND"),_MSG_REC_NO_1ST$=MSG("REC_NO_1ST"),_MSG_REC_NO_LST$=MSG("REC_NO_LST"),_MSG_REC_REMOVE$=MSG("REC_REMOVE"),_MSG_REC_UPDADD$=MSG("REC_UPDADD"),_MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS"),_MSG_START_FILE$=MSG("START_FILE"),_MSG_UPDATE$=MSG("UPDATE"),_MSG_UPD_OTHER1$=MSG("UPD_OTHER1"),_MSG_UPD_OTHER2$=MSG("UPD_OTHER2"),_MSG_UPD_SAME$=MSG("UPD_SAME"),_MSG_WARNING$=MSG("WARNING"),_MSG_CANNOT_WRITE$=MSG("CANT_WRITE"),_MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 FISC_YR_END$=START_FISCAL$,ACCT_PER$=START_ACCTPD$,METH_TO_UPDT$=METHODS_TO_UPDATE$; IF METH_TO_UPDT$="B" THEN METH_TO_UPDT$="CA"
11030 IF LEN(FISC_YR_END$)>4 THEN FISC_YR_END$=%CR_YEAR$,ACCT_PER$=%CR_PD$
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12030 GOSUB SEL_SJ; IF SOURCE_JRNL$="" THEN NEXT_ID=SOURCE_JRNL.CTL,_W_FLG=0; GOTO *RETURN
12035 IF STP(JRNL_REF_CODE$)="" THEN NEXT_ID=JRNL_REF_CODE.CTL,_W_FLG=0; GOTO *RETURN
12050 IF STP(TRANS_DATE$)="" THEN NEXT_ID=TRANS_DATE.CTL,_W_FLG=0; GOTO *RETURN
12070 IF NUM(GL_ACCOUNT$,ERR=*NEXT)=0 THEN NEXT_ID=GL_ACCOUNT.CTL,_W_FLG=0; GOTO *RETURN
12080 IF NUM(AMOUNT$)=0 THEN _W_FLG=0,NEXT_ID=AMOUNT.CTL; GOTO *RETURN
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN SEQ_NUMBER$=""
13030 FISC_YR_END$="",ACCT_PER$="",SOURCE_JRNL$="",JRNL_REF_CODE$="",REV_FY_END$="",REV_A_P$="",DESC_L_1$="",DESC_L_2$="",DESC_L_3$="",TRANS_DATE$="",ENTER_MEMO$="",GL_ACCOUNT$="",JOB_NUM$="",JOB_COST_CODE$="",COST_CODE_TYPE$="",DETAIL_MEMO$="",VALID_FLAG$="",GG0_UNUSED_1$="",HOURS$="",UNITS$="",RATE$="",AMOUNT$="",SJ_DESC$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(24,"N")
15030 IF _ORIG.SEQ_NUMBER$=_CUR.SEQ_NUMBER$ OR SEQ_NUMBER$=_CUR.SEQ_NUMBER$ THEN GOTO *NEXT ELSE IF _ORIG.SEQ_NUMBER$=SEQ_NUMBER$ THEN _CHG2$=_CHG2$+SEP+MSG("SEQ")+" = "+_CUR.SEQ_NUMBER$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEQ")+" = "+_CUR.SEQ_NUMBER$
15040 IF _ORIG.FISC_YR_END$=_CUR.FISC_YR_END$ OR FISC_YR_END$=_CUR.FISC_YR_END$ THEN GOTO *NEXT ELSE IF _ORIG.FISC_YR_END$=FISC_YR_END$ THEN _CHG2$=_CHG2$+SEP+MSG("FY_ENDING")+" = "+_CUR.FISC_YR_END$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FY_ENDING")+" = "+_CUR.FISC_YR_END$
15050 IF _ORIG.ACCT_PER$=_CUR.ACCT_PER$ OR ACCT_PER$=_CUR.ACCT_PER$ THEN GOTO *NEXT ELSE IF _ORIG.ACCT_PER$=ACCT_PER$ THEN _CHG2$=_CHG2$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCT_PER$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCT_PER$
15060 IF _ORIG.SOURCE_JRNL$=_CUR.SOURCE_JRNL$ OR SOURCE_JRNL$=_CUR.SOURCE_JRNL$ THEN GOTO *NEXT ELSE IF _ORIG.SOURCE_JRNL$=SOURCE_JRNL$ THEN _CHG2$=_CHG2$+SEP+MSG("SRC_JRNL")+" = "+_CUR.SOURCE_JRNL$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SRC_JRNL")+" = "+_CUR.SOURCE_JRNL$
15070 IF _ORIG.JRNL_REF_CODE$=_CUR.JRNL_REF_CODE$ OR JRNL_REF_CODE$=_CUR.JRNL_REF_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.JRNL_REF_CODE$=JRNL_REF_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("JRNL_R_C")+" = "+_CUR.JRNL_REF_CODE$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("JRNL_R_C")+" = "+_CUR.JRNL_REF_CODE$
15080 IF _ORIG.REV_FY_END$=_CUR.REV_FY_END$ OR REV_FY_END$=_CUR.REV_FY_END$ THEN GOTO *NEXT ELSE IF _ORIG.REV_FY_END$=REV_FY_END$ THEN _CHG2$=_CHG2$+SEP+MSG("REVE_I_F")+" "+MSG("ENDING")+" = "+_CUR.REV_FY_END$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("REVE_I_F")+" "+MSG("ENDING")+" = "+_CUR.REV_FY_END$
15090 IF _ORIG.REV_A_P$=_CUR.REV_A_P$ OR REV_A_P$=_CUR.REV_A_P$ THEN GOTO *NEXT ELSE IF _ORIG.REV_A_P$=REV_A_P$ THEN _CHG2$=_CHG2$+SEP+MSG("REVE_I_A")+" = "+_CUR.REV_A_P$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("REVE_I_A")+" = "+_CUR.REV_A_P$
15100 IF _ORIG.DESC_L_1$=_CUR.DESC_L_1$ OR DESC_L_1$=_CUR.DESC_L_1$ THEN GOTO *NEXT ELSE IF _ORIG.DESC_L_1$=DESC_L_1$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC_L_1")+" = "+_CUR.DESC_L_1$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC_L_1")+" = "+_CUR.DESC_L_1$
15110 IF _ORIG.DESC_L_2$=_CUR.DESC_L_2$ OR DESC_L_2$=_CUR.DESC_L_2$ THEN GOTO *NEXT ELSE IF _ORIG.DESC_L_2$=DESC_L_2$ THEN _CHG2$=_CHG2$+SEP+MSG("LINE_2")+" = "+_CUR.DESC_L_2$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_2")+" = "+_CUR.DESC_L_2$
15120 IF _ORIG.DESC_L_3$=_CUR.DESC_L_3$ OR DESC_L_3$=_CUR.DESC_L_3$ THEN GOTO *NEXT ELSE IF _ORIG.DESC_L_3$=DESC_L_3$ THEN _CHG2$=_CHG2$+SEP+MSG("LINE_3")+" = "+_CUR.DESC_L_3$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_3")+" = "+_CUR.DESC_L_3$
15130 IF _ORIG.METH_TO_UPDT$=_CUR.METH_TO_UPDT$ OR METH_TO_UPDT$=_CUR.METH_TO_UPDT$ THEN GOTO *NEXT ELSE IF _ORIG.METH_TO_UPDT$=METH_TO_UPDT$ THEN _CHG2$=_CHG2$+SEP+MSG("METH_T_U")+" = "+_CUR.METH_TO_UPDT$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("METH_T_U")+" = "+_CUR.METH_TO_UPDT$
15140 IF _ORIG.TRANS_DATE$=_CUR.TRANS_DATE$ OR TRANS_DATE$=_CUR.TRANS_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.TRANS_DATE$=TRANS_DATE$ THEN _CHG2$=_CHG2$+SEP+"TopForm Date Format = "+_CUR.TRANS_DATE$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"TopForm Date Format = "+_CUR.TRANS_DATE$
15150 IF _ORIG.ENTER_MEMO$=_CUR.ENTER_MEMO$ OR ENTER_MEMO$=_CUR.ENTER_MEMO$ THEN GOTO *NEXT ELSE IF _ORIG.ENTER_MEMO$=ENTER_MEMO$ THEN _CHG2$=_CHG2$+SEP+MSG("ENT_MEMO")+" = "+_CUR.ENTER_MEMO$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ENT_MEMO")+" = "+_CUR.ENTER_MEMO$
15160 IF _ORIG.GL_ACCOUNT$=_CUR.GL_ACCOUNT$ OR GL_ACCOUNT$=_CUR.GL_ACCOUNT$ THEN GOTO *NEXT ELSE IF _ORIG.GL_ACCOUNT$=GL_ACCOUNT$ THEN _CHG2$=_CHG2$+SEP+MSG("GL_ACCT")+" = "+_CUR.GL_ACCOUNT$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GL_ACCT")+" = "+_CUR.GL_ACCOUNT$
15170 IF _ORIG.JOB_NUM$=_CUR.JOB_NUM$ OR JOB_NUM$=_CUR.JOB_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.JOB_NUM$=JOB_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("JOB_NUM")+" = "+_CUR.JOB_NUM$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("JOB_NUM")+" = "+_CUR.JOB_NUM$
15180 IF _ORIG.JOB_COST_CODE$=_CUR.JOB_COST_CODE$ OR JOB_COST_CODE$=_CUR.JOB_COST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.JOB_COST_CODE$=JOB_COST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("JOB_C_C")+" = "+_CUR.JOB_COST_CODE$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("JOB_C_C")+" = "+_CUR.JOB_COST_CODE$
15190 IF _ORIG.COST_CODE_TYPE$=_CUR.COST_CODE_TYPE$ OR COST_CODE_TYPE$=_CUR.COST_CODE_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.COST_CODE_TYPE$=COST_CODE_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("COST_C_T")+" = "+_CUR.COST_CODE_TYPE$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COST_C_T")+" = "+_CUR.COST_CODE_TYPE$
15200 IF _ORIG.DETAIL_MEMO$=_CUR.DETAIL_MEMO$ OR DETAIL_MEMO$=_CUR.DETAIL_MEMO$ THEN GOTO *NEXT ELSE IF _ORIG.DETAIL_MEMO$=DETAIL_MEMO$ THEN _CHG2$=_CHG2$+SEP+MSG("MEMO")+" = "+_CUR.DETAIL_MEMO$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MEMO")+" = "+_CUR.DETAIL_MEMO$
15210 IF _ORIG.VALID_FLAG$=_CUR.VALID_FLAG$ OR VALID_FLAG$=_CUR.VALID_FLAG$ THEN GOTO *NEXT ELSE IF _ORIG.VALID_FLAG$=VALID_FLAG$ THEN _CHG2$=_CHG2$+SEP+MSG("VAL_FLAG")+" = "+_CUR.VALID_FLAG$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VAL_FLAG")+" = "+_CUR.VALID_FLAG$
15220 IF _ORIG.GG0_UNUSED_1$=_CUR.GG0_UNUSED_1$ OR GG0_UNUSED_1$=_CUR.GG0_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.GG0_UNUSED_1$=GG0_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.GG0_UNUSED_1$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.GG0_UNUSED_1$
15230 IF _ORIG.HOURS$=_CUR.HOURS$ OR HOURS$=_CUR.HOURS$ THEN GOTO *NEXT ELSE IF _ORIG.HOURS$=HOURS$ THEN _CHG2$=_CHG2$+SEP+MSG("HOURS")+" = "+_CUR.HOURS$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("HOURS")+" = "+_CUR.HOURS$
15240 IF _ORIG.UNITS$=_CUR.UNITS$ OR UNITS$=_CUR.UNITS$ THEN GOTO *NEXT ELSE IF _ORIG.UNITS$=UNITS$ THEN _CHG2$=_CHG2$+SEP+MSG("UNITS")+" = "+_CUR.UNITS$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNITS")+" = "+_CUR.UNITS$
15250 IF _ORIG.RATE$=_CUR.RATE$ OR RATE$=_CUR.RATE$ THEN GOTO *NEXT ELSE IF _ORIG.RATE$=RATE$ THEN _CHG2$=_CHG2$+SEP+MSG("RATE")+" = "+_CUR.RATE$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RATE")+" = "+_CUR.RATE$
15260 IF _ORIG.AMOUNT$=_CUR.AMOUNT$ OR AMOUNT$=_CUR.AMOUNT$ THEN GOTO *NEXT ELSE IF _ORIG.AMOUNT$=AMOUNT$ THEN _CHG2$=_CHG2$+SEP+MSG("AMT")+" = "+_CUR.AMOUNT$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("AMT")+" = "+_CUR.AMOUNT$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN SEQ_NUMBER$=_CUR.SEQ_NUMBER$
16030 IF _CHG_VAR$(2,1)="Y" THEN FISC_YR_END$=_CUR.FISC_YR_END$
16040 IF _CHG_VAR$(3,1)="Y" THEN ACCT_PER$=_CUR.ACCT_PER$
16050 IF _CHG_VAR$(4,1)="Y" THEN SOURCE_JRNL$=_CUR.SOURCE_JRNL$
16060 IF _CHG_VAR$(5,1)="Y" THEN JRNL_REF_CODE$=_CUR.JRNL_REF_CODE$
16070 IF _CHG_VAR$(6,1)="Y" THEN REV_FY_END$=_CUR.REV_FY_END$
16080 IF _CHG_VAR$(7,1)="Y" THEN REV_A_P$=_CUR.REV_A_P$
16090 IF _CHG_VAR$(8,1)="Y" THEN DESC_L_1$=_CUR.DESC_L_1$
16100 IF _CHG_VAR$(9,1)="Y" THEN DESC_L_2$=_CUR.DESC_L_2$
16110 IF _CHG_VAR$(10,1)="Y" THEN DESC_L_3$=_CUR.DESC_L_3$
16120 IF _CHG_VAR$(11,1)="Y" THEN METH_TO_UPDT$=_CUR.METH_TO_UPDT$
16130 IF _CHG_VAR$(12,1)="Y" THEN TRANS_DATE$=_CUR.TRANS_DATE$
16140 IF _CHG_VAR$(13,1)="Y" THEN ENTER_MEMO$=_CUR.ENTER_MEMO$
16150 IF _CHG_VAR$(14,1)="Y" THEN GL_ACCOUNT$=_CUR.GL_ACCOUNT$
16160 IF _CHG_VAR$(15,1)="Y" THEN JOB_NUM$=_CUR.JOB_NUM$
16170 IF _CHG_VAR$(16,1)="Y" THEN JOB_COST_CODE$=_CUR.JOB_COST_CODE$
16180 IF _CHG_VAR$(17,1)="Y" THEN COST_CODE_TYPE$=_CUR.COST_CODE_TYPE$
16190 IF _CHG_VAR$(18,1)="Y" THEN DETAIL_MEMO$=_CUR.DETAIL_MEMO$
16200 IF _CHG_VAR$(19,1)="Y" THEN VALID_FLAG$=_CUR.VALID_FLAG$
16210 IF _CHG_VAR$(20,1)="Y" THEN GG0_UNUSED_1$=_CUR.GG0_UNUSED_1$
16220 IF _CHG_VAR$(21,1)="Y" THEN HOURS$=_CUR.HOURS$
16230 IF _CHG_VAR$(22,1)="Y" THEN UNITS$=_CUR.UNITS$
16240 IF _CHG_VAR$(23,1)="Y" THEN RATE$=_CUR.RATE$
16250 IF _CHG_VAR$(24,1)="Y" THEN AMOUNT$=_CUR.AMOUNT$
16990 RETURN 
17000 SEL_SJ: REFRESH_FLG=1
17010 READ (_GL5,KEY=SOURCE_JRNL$,DOM=NO_GL5)
17020 SJ_DESC$=_GL5.GL_ACCT_DESC$
17030 RETURN 
17040 NO_GL5: SJ_DESC$=MSG("NOT_FOUND"),SOURCE_JRNL$=""; RETURN 
17100 ASSIGN_NUMBER:
17110 READ (_ZZP,KEY=X3$(9,3)+"G/L")P0$
17120 JRNL_REF_CODE$=P0$(244,6); IF P0$(244,6)="999999" THEN P0$(244,6)="000000"
17130 REFRESH_FLG=1,P0$(244,6)=STR(NUM(P0$(244,6))+1:"000000"); WRITE (_ZZP,KEY=P0$(1,6))P0$
17140 BUTTON HIDE BT_NXT.CTL
17150 NEXT_ID=TRANS_DATE.CTL
17160 RETURN 
23000 REVERSE:
23105 DROP_BOX LOAD REV_FY_END.CTL,REV_FISCAL$
23110 DROP_BOX WRITE REV_FY_END.CTL,"    "
23115 DROP_BOX LOAD REV_A_P.CTL,REV_ACCTPD$,ERR=*NEXT
23116 DROP_BOX WRITE START_ACCTPD.CTL,CR_PD$,ERR=*NEXT
23120 DROP_BOX WRITE REV_A_P.CTL,"  ",ERR=*NEXT
23150 RETURN 
23160 SEL_REVERSE_YEAR: REFRESH_FLG=1
23180 FIND (_ZZP,KEY=X3$(9,3)+"G/LYE"+REV_FY_END$,DOM=*NEXT)REV$
23190 REV_A_P$="01"; IF STP(REV_FY_END$)="" THEN REV_A_P$="  "
23200 DATES_REV: REFRESH_FLG=1
23205 IF STP(REV_A_P$)="" THEN ML_DESC5$=""; GOTO *RETURN
23210 ML_DESC5$=MSG("ENDING")+": "+FND$(REV$(NUM(REV_A_P$)*6+15,6),ERR=*RETURN)
23220 RETURN 
25000 CHECK_WRITE:
25010 MSGBOX MSG("WRITE_REC"),MSG("CONFIRM"),"?,YESNO",ANSWER$
25020 IF ANSWER$="YES" THEN GOTO WRITE_REC
25040 CHECK_WRITE_END:RETURN 
25045 ! 
60100 RES_BT:
60110 FOR DD=65 TO 67
60120 BTC=EVN("BT_"+CHR(DD)+".CTL")
60125 IF BTC=0 THEN CONTINUE
60130 BTC'TEXTCOLOR$="DEFAULT",BTC'HEIGHT=22,TXT$=BTC'TEXT$,XX=POS("}"=TXT$); IF XX<>0 THEN BTC'TEXT$=TXT$(XX+1)
60140 NEXT DD
60150 BTC=EVN("BT_"+METHODS_TO_UPDATE$+".CTL")
60160 IF BTC THEN BTC'TEXTCOLOR$="Light Blue",BTC'HEIGHT=40,TXT$=BTC'TEXT$,BTC'TEXT$="{!Arrow_Right}"+TXT$
60170 RETURN 
