0010 ! FEGMAA - File Maintenance Program for FE0_QuoteFormGrp (="FE0"+%C$)
0020 ! ************************************************************************
0030 REM "5.7 - 05/09/12 - 9.088611 - sns - SSP# 252715"
0035 REM "5.7 - 02/08/16 - 16.607777 - crg - SSP# 281803
0037 REM "281803-Cannot add an Item Group Code in Feature Driven Pricing in  
0040 REM "Copyright 2016 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 REM "Copyright 2014 Demand Bridge, LLC.; Norcross, Georgia"
0060 REM "        Licensed Software - All Rights Reserved."
0070 CLEAR ; SETESC ERROR_PROCESSING; SETERR ERROR_PROCESSING
0080 IF TCB(88)=0 THEN MSGBOX "You must be using Windx to access this program" ELSE PROCESS "FEGMAA","../FEG/FE.EN"
0090 IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT 
0095 EXIT 
0100 ! 100 - Initialization
0110 INIT:
0120 GOSUB INSERT_VERSION
0130 GOSUB CLEAR_FIELDS
0140 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0150 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0160 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0170 GOSUB SETUP_KEYS
0180 _FILE_NAME$="FE0"+%C$
0190 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0200 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0210 _FE0_NO=HFN; _FILE_NAME$="FE0"+%C$; OPEN (_FE0_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0220 OPEN (HFN)"ZZPARM"; ZZPARM=LFO
0230 RETURN 
0240 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0250 CMD_STR$="END"
0260 RETURN 
0270 ! 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO SET_MSG
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0380 ! 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=2,_CUR_KEY$=""
0430 DIM _KEYS$[1:3]; _KEYS$[1]="VENDOR$",_KEYS$[2]="ITEM_GROUP_CODE$"
0440 _KEY1=1
0450 RETURN 
0460 ! 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0580 ! 
0590 ERROR_PROCESSING:
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 CLOSE (ZZPARM)
0960 MESSAGE_LIB _SV_MSGLIB$
0970 SET_PARAM 'KR'=_SV_KR
0980 RETURN 
0990 ! 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 IF ID$="VENDOR" THEN CALL "ZZWLKU;PARSE_VEND",VENDOR$,%VEND_DIV$,%VEND_CODE$,VEND_NAME$=MID(VENDOR$,3,35)
1030 CALL "*wingrp;Enable",BUTTONS.GRP$; REFRESH_FLG=1
1040 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1050 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1055 IF ID$="VENDOR" AND NUL(VENDOR$) THEN NEXT_ID=VENDOR.CTL,REFRESH_FLAG=1; CALL "*wingrp;Disable",BUTTONS.GRP$; EXIT 
1060 IF ID$="ITEM_GROUP_CODE" AND NUL(ITEM_GROUP_CODE$) THEN NEXT_ID=ITEM_GROUP_CODE.CTL,REFRESH_FLAG=1; EXIT 
1065 IF ID$="ITEM_GROUP_CODE" AND NOT(NUL(ITEM_GROUP_CODE$)) THEN GOSUB FIND_ITEM_GROUP
1070 IF ID$="ITEM_GROUP_CODE" AND NOT(NUL(ITEM_GROUP_CODE$)) THEN CHANGE_FLG=1; NEXT_ID=PROD_CODE.CTL; REFRESH_FLG=1; GOTO CALL_ZZWLKU
1075 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1080 CALL_ZZWLKU:CALL "ZZWLKU;PARSE_VEND",VENDOR$,VEND_DIV$,VEND_CODE$; VENDOR$=VEND_DIV$+VEND_CODE$
1085 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1090 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1100 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1110 GOSUB PROCESS_READ
1120 GOSUB NUM_TO_STR
1130 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=PROD_CODE.CTL
1140 GOTO DISP_REC
1150 EXIT 
1160 ! 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=ITEM_GROUP_CODE.CTL
1290 RETURN 
1300 ! 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE; IF _ABORT_WRITE THEN _ABORT_WRITE=0; RETURN 
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0; _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1480 NEXT_ID=VENDOR.CTL
1490 EXIT 
1500 ! 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0; _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1730 ! 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
1870 ! 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 IF _KEY$=_CUR_KEY$ THEN _KEY$=KEN(_FIL_NO,END=END_OF_FILE) ! Get past extracted record
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2110 ! 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2280 ! 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2470 ! 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
2670 ! 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3035 VENDOR$=VEND_DIV$+VEND_CODE$; %VENDOR$=VENDOR$; REFRESH_FLG=1
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 RETURN 
3070 ! 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT,ERR=*RETURN)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1; _CLR_FLG$="R"; GOSUB CLEAR_FIELDS; NEXT_ID=VENDOR.CTL
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3410 ! 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 CALL "*wingrp;Disable",KEY1.GRP$
3540 GOSUB FIND_QTY_BREAKS
3550 REFRESH_FLG=1
3560 RETURN 
3570 ! 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3650 ! 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=VENDOR.CTL,_FIRST_FIELD=ITEM_GROUP_CODE.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
3880 ! 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF UCS(_KEYS$[_CURKEY])=UCS(ID$)+"$" OR UCS(_KEYS$[_CURKEY])=UCS(ID$) THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9360 END 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 COST_QTY_PER$=STR(COST_QTY_PER)
10030 QTY_BREAK_1$=""; QTY_BREAK_2$=""; QTY_BREAK_3$=""; QTY_BREAK_4$=""; QTY_BREAK_5$=""; QTY_BREAK_6$=""; QTY_BREAK_7$=""; QTY_BREAK_8$=""; QTY_BREAK_9$=""; QTY_BREAK_10$=""; QTY_BREAK_11$=""; QTY_BREAK_12$=""
10040 QTY_BREAK_1$=STR(QTY_BREAK_1)
10050 QTY_BREAK_2$=STR(QTY_BREAK_2)
10060 QTY_BREAK_3$=STR(QTY_BREAK_3)
10070 QTY_BREAK_4$=STR(QTY_BREAK_4)
10080 QTY_BREAK_5$=STR(QTY_BREAK_5)
10090 QTY_BREAK_6$=STR(QTY_BREAK_6)
10100 QTY_BREAK_7$=STR(QTY_BREAK_7)
10110 QTY_BREAK_8$=STR(QTY_BREAK_8)
10120 QTY_BREAK_9$=STR(QTY_BREAK_9)
10130 QTY_BREAK_10$=STR(QTY_BREAK_10)
10140 QTY_BREAK_11$=STR(QTY_BREAK_11)
10150 QTY_BREAK_12$=STR(QTY_BREAK_12)
10160 RETURN 
10170 ! 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="COST_QTY_PER",_X=COST_QTY_PER.CTL,COST_QTY_PER=NUM(COST_QTY_PER$,ERR=NON_NUMERIC)
11030 RETURN 
11040 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11050 NEXT_ID=_X
11060 EXIT 
11070 ! 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 IF ITEM_GROUP_CODE$="" THEN {
12030 CALL "*wingrp;Enable",KEY2.GRP$
12040 CALL "*wingrp;Disable",FIELDS.GRP$
12050 MSGBOX "Missing value for Item Group"
12060 _W_FLG=0; NEXT_ID=ITEM_GROUP_CODE.CTL; REFRESH_FLG=1
12070 RETURN 
12080  }
12090 IF PROD_CODE$="" THEN MSGBOX "Missing value for Product Code"; _W_FLG=0; NEXT_ID=PROD_CODE.CTL; REFRESH_FLG=1; RETURN 
12100 IF COST_UM$="" THEN MSGBOX "Missing value for Cost U/M"; _W_FLG=0; NEXT_ID=COST_UM.CTL; REFRESH_FLG=1; RETURN 
12110 IF COST_QTY_PER$="" THEN MSGBOX "Missing value for Qty per U/M"; _W_FLG=0; NEXT_ID=COST_QTY_PER.CTL; REFRESH_FLG=1; RETURN 
12120 IF COST_QTY_PER$="0" THEN MSGBOX "Qty per U/M must be greater than zero"; _W_FLG=0; NEXT_ID=COST_QTY_PER.CTL; REFRESH_FLG=1; RETURN 
12130 _W_FLG=1
12140 RETURN 
12150 ! 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN {
13030 VENDOR$=""; %VENDOR$=""; %VEND_NAME$=""; VEND_NAME$=""; %VEND_CODE$=""
13040 ITEM_GROUP_CODE$=""; ITEM_DESC$=""
13050 PROD_CODE$=""
13060 COST_UM$=""
13070 COST_QTY_PER$=""
13080  }
13088 %COST_QTY_PER=0
13090 QTY_BREAK_1=0; QTY_BREAK_2=0; QTY_BREAK_3=0; QTY_BREAK_4=0; QTY_BREAK_5=0; QTY_BREAK_6=0; QTY_BREAK_7=0; QTY_BREAK_8=0; QTY_BREAK_9=0; QTY_BREAK_10=0; QTY_BREAK_11=0; QTY_BREAK_12=0
13100 DISP_QTY_BREAK_1$=""; DISP_QTY_BREAK_2$=""; DISP_QTY_BREAK_3$=""; DISP_QTY_BREAK_4$=""; DISP_QTY_BREAK_5$=""; DISP_QTY_BREAK_6$=""; DISP_QTY_BREAK_7$=""; DISP_QTY_BREAK_8$=""; DISP_QTY_BREAK_9$=""; DISP_QTY_BREAK_10$=""; DISP_QTY_BREAK_11$=""; DISP_QTY_BREAK_12$=""
13110 SPECIAL_NOTE_1$=""; SPECIAL_NOTE_2$=""; SPECIAL_NOTE_3$=""; SPECIAL_NOTE_4$=""; SPECIAL_NOTE_5$=""; SPECIAL_NOTE_6$=""; SPECIAL_NOTE_7$=""
13120 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=VENDOR.CTL
13130 RETURN 
13140 ! 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=dont!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=1 THEN CALL "*wingrp;Enable",KEY1.GRP$; NEXT_ID=VENDOR.CTL ELSE CALL "*wingrp;Disable",KEY1.GRP$
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=VENDOR.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14050 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14060 RETURN 
14070 ! 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(25,"N")
15030 IF _ORIG.VENDOR$=_CUR.VENDOR$ OR VENDOR$=_CUR.VENDOR$ THEN GOTO *NEXT ELSE IF _ORIG.VENDOR$=VENDOR$ THEN _CHG2$=_CHG2$+SEP+MSG("VENDOR")+" = "+_CUR.VENDOR$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VENDOR")+" = "+_CUR.VENDOR$
15040 IF _ORIG.ITEM_GROUP_CODE$=_CUR.ITEM_GROUP_CODE$ OR ITEM_GROUP_CODE$=_CUR.ITEM_GROUP_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_GROUP_CODE$=ITEM_GROUP_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_GROUP_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_GROUP_CODE$
15050 IF _ORIG.ITEM_DESC$=_CUR.ITEM_DESC$ OR ITEM_DESC$=_CUR.ITEM_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_DESC$=ITEM_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_DESC")+" = "+_CUR.ITEM_DESC$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_DESC")+" = "+_CUR.ITEM_DESC$
15060 IF _ORIG.PROD_CODE$=_CUR.PROD_CODE$ OR PROD_CODE$=_CUR.PROD_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PROD_CODE$=PROD_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PROD_CODE")+" = "+_CUR.PROD_CODE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PROD_CODE")+" = "+_CUR.PROD_CODE$
15070 IF _ORIG.COST_UM$=_CUR.COST_UM$ OR COST_UM$=_CUR.COST_UM$ THEN GOTO *NEXT ELSE IF _ORIG.COST_UM$=COST_UM$ THEN _CHG2$=_CHG2$+SEP+MSG("COST_UM")+" = "+_CUR.COST_UM$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COST_UM")+" = "+_CUR.COST_UM$
15080 IF _ORIG.COST_QTY_PER$=_CUR.COST_QTY_PER$ OR COST_QTY_PER$=_CUR.COST_QTY_PER$ THEN GOTO *NEXT ELSE IF _ORIG.COST_QTY_PER$=COST_QTY_PER$ THEN _CHG2$=_CHG2$+SEP+MSG("COST_QTY_PER")+" = "+_CUR.COST_QTY_PER$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COST_QTY_PER")+" = "+_CUR.COST_QTY_PER$
15090 IF _ORIG.SPECIAL_NOTE_1$=_CUR.SPECIAL_NOTE_1$ OR SPECIAL_NOTE_1$=_CUR.SPECIAL_NOTE_1$ THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_NOTE_1$=SPECIAL_NOTE_1$ THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_N_1")+" = "+_CUR.SPECIAL_NOTE_1$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_N_1")+" = "+_CUR.SPECIAL_NOTE_1$
15100 IF _ORIG.SPECIAL_NOTE_2$=_CUR.SPECIAL_NOTE_2$ OR SPECIAL_NOTE_2$=_CUR.SPECIAL_NOTE_2$ THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_NOTE_2$=SPECIAL_NOTE_2$ THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_N_2")+" = "+_CUR.SPECIAL_NOTE_2$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_N_2")+" = "+_CUR.SPECIAL_NOTE_2$
15110 IF _ORIG.SPECIAL_NOTE_3$=_CUR.SPECIAL_NOTE_3$ OR SPECIAL_NOTE_3$=_CUR.SPECIAL_NOTE_3$ THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_NOTE_3$=SPECIAL_NOTE_3$ THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_N_3")+" = "+_CUR.SPECIAL_NOTE_3$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_N_3")+" = "+_CUR.SPECIAL_NOTE_3$
15120 IF _ORIG.SPECIAL_NOTE_4$=_CUR.SPECIAL_NOTE_4$ OR SPECIAL_NOTE_4$=_CUR.SPECIAL_NOTE_4$ THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_NOTE_4$=SPECIAL_NOTE_4$ THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_N_4")+" = "+_CUR.SPECIAL_NOTE_4$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_N_4")+" = "+_CUR.SPECIAL_NOTE_4$
15130 IF _ORIG.SPECIAL_NOTE_5$=_CUR.SPECIAL_NOTE_5$ OR SPECIAL_NOTE_5$=_CUR.SPECIAL_NOTE_5$ THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_NOTE_5$=SPECIAL_NOTE_5$ THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_N_5")+" = "+_CUR.SPECIAL_NOTE_5$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_N_5")+" = "+_CUR.SPECIAL_NOTE_5$
15140 IF _ORIG.SPECIAL_NOTE_6$=_CUR.SPECIAL_NOTE_6$ OR SPECIAL_NOTE_6$=_CUR.SPECIAL_NOTE_6$ THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_NOTE_6$=SPECIAL_NOTE_6$ THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_N_6")+" = "+_CUR.SPECIAL_NOTE_6$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_N_6")+" = "+_CUR.SPECIAL_NOTE_6$
15150 IF _ORIG.SPECIAL_NOTE_7$=_CUR.SPECIAL_NOTE_7$ OR SPECIAL_NOTE_7$=_CUR.SPECIAL_NOTE_7$ THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_NOTE_7$=SPECIAL_NOTE_7$ THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_N_7")+" = "+_CUR.SPECIAL_NOTE_7$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_N_7")+" = "+_CUR.SPECIAL_NOTE_7$
15160 IF _ORIG.QTY_BREAK_1=_CUR.QTY_BREAK_1 OR QTY_BREAK_1=_CUR.QTY_BREAK_1 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_1=QTY_BREAK_1 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_1")+" = "+STR(_CUR.QTY_BREAK_1),_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_1")+" = "+STR(_CUR.QTY_BREAK_1)
15170 IF _ORIG.QTY_BREAK_2=_CUR.QTY_BREAK_2 OR QTY_BREAK_2=_CUR.QTY_BREAK_2 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_2=QTY_BREAK_2 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_2")+" = "+STR(_CUR.QTY_BREAK_2),_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_2")+" = "+STR(_CUR.QTY_BREAK_2)
15180 IF _ORIG.QTY_BREAK_3=_CUR.QTY_BREAK_3 OR QTY_BREAK_3=_CUR.QTY_BREAK_3 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_3=QTY_BREAK_3 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_3")+" = "+STR(_CUR.QTY_BREAK_3),_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_3")+" = "+STR(_CUR.QTY_BREAK_3)
15190 IF _ORIG.QTY_BREAK_4=_CUR.QTY_BREAK_4 OR QTY_BREAK_4=_CUR.QTY_BREAK_4 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_4=QTY_BREAK_4 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_4")+" = "+STR(_CUR.QTY_BREAK_4),_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_4")+" = "+STR(_CUR.QTY_BREAK_4)
15200 IF _ORIG.QTY_BREAK_5=_CUR.QTY_BREAK_5 OR QTY_BREAK_5=_CUR.QTY_BREAK_5 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_5=QTY_BREAK_5 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_5")+" = "+STR(_CUR.QTY_BREAK_5),_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_5")+" = "+STR(_CUR.QTY_BREAK_5)
15210 IF _ORIG.QTY_BREAK_6=_CUR.QTY_BREAK_6 OR QTY_BREAK_6=_CUR.QTY_BREAK_6 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_6=QTY_BREAK_6 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_6")+" = "+STR(_CUR.QTY_BREAK_6),_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_6")+" = "+STR(_CUR.QTY_BREAK_6)
15220 IF _ORIG.QTY_BREAK_7=_CUR.QTY_BREAK_7 OR QTY_BREAK_7=_CUR.QTY_BREAK_7 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_7=QTY_BREAK_7 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_7")+" = "+STR(_CUR.QTY_BREAK_7),_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_7")+" = "+STR(_CUR.QTY_BREAK_7)
15230 IF _ORIG.QTY_BREAK_8=_CUR.QTY_BREAK_8 OR QTY_BREAK_8=_CUR.QTY_BREAK_8 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_8=QTY_BREAK_8 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_8")+" = "+STR(_CUR.QTY_BREAK_8),_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_8")+" = "+STR(_CUR.QTY_BREAK_8)
15240 IF _ORIG.QTY_BREAK_9=_CUR.QTY_BREAK_9 OR QTY_BREAK_9=_CUR.QTY_BREAK_9 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_9=QTY_BREAK_9 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_9")+" = "+STR(_CUR.QTY_BREAK_9),_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_9")+" = "+STR(_CUR.QTY_BREAK_9)
15250 IF _ORIG.QTY_BREAK_10=_CUR.QTY_BREAK_10 OR QTY_BREAK_10=_CUR.QTY_BREAK_10 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_10=QTY_BREAK_10 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_10")+" = "+STR(_CUR.QTY_BREAK_10),_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_10")+" = "+STR(_CUR.QTY_BREAK_10)
15260 IF _ORIG.QTY_BREAK_11=_CUR.QTY_BREAK_11 OR QTY_BREAK_11=_CUR.QTY_BREAK_11 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_11=QTY_BREAK_11 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_11")+" = "+STR(_CUR.QTY_BREAK_11),_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_11")+" = "+STR(_CUR.QTY_BREAK_11)
15270 IF _ORIG.QTY_BREAK_12=_CUR.QTY_BREAK_12 OR QTY_BREAK_12=_CUR.QTY_BREAK_12 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BREAK_12=QTY_BREAK_12 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_12")+" = "+STR(_CUR.QTY_BREAK_12),_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_12")+" = "+STR(_CUR.QTY_BREAK_12)
15280 RETURN 
15290 ! 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN VENDOR$=_CUR.VENDOR$
16030 IF _CHG_VAR$(2,1)="Y" THEN ITEM_GROUP_CODE$=_CUR.ITEM_GROUP_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN ITEM_DESC$=_CUR.ITEM_DESC$
16050 IF _CHG_VAR$(4,1)="Y" THEN PROD_CODE$=_CUR.PROD_CODE$
16060 IF _CHG_VAR$(5,1)="Y" THEN COST_UM$=_CUR.COST_UM$
16070 IF _CHG_VAR$(6,1)="Y" THEN COST_QTY_PER$=_CUR.COST_QTY_PER$
16080 IF _CHG_VAR$(7,1)="Y" THEN SPECIAL_NOTE_1$=_CUR.SPECIAL_NOTE_1$
16090 IF _CHG_VAR$(8,1)="Y" THEN SPECIAL_NOTE_2$=_CUR.SPECIAL_NOTE_2$
16100 IF _CHG_VAR$(9,1)="Y" THEN SPECIAL_NOTE_3$=_CUR.SPECIAL_NOTE_3$
16110 IF _CHG_VAR$(10,1)="Y" THEN SPECIAL_NOTE_4$=_CUR.SPECIAL_NOTE_4$
16120 IF _CHG_VAR$(11,1)="Y" THEN SPECIAL_NOTE_5$=_CUR.SPECIAL_NOTE_5$
16130 IF _CHG_VAR$(12,1)="Y" THEN SPECIAL_NOTE_6$=_CUR.SPECIAL_NOTE_6$
16140 IF _CHG_VAR$(13,1)="Y" THEN SPECIAL_NOTE_7$=_CUR.SPECIAL_NOTE_7$
16150 IF _CHG_VAR$(14,1)="Y" THEN QTY_BREAK_1=_CUR.QTY_BREAK_1
16160 IF _CHG_VAR$(15,1)="Y" THEN QTY_BREAK_2=_CUR.QTY_BREAK_2
16170 IF _CHG_VAR$(16,1)="Y" THEN QTY_BREAK_3=_CUR.QTY_BREAK_3
16180 IF _CHG_VAR$(17,1)="Y" THEN QTY_BREAK_4=_CUR.QTY_BREAK_4
16190 IF _CHG_VAR$(18,1)="Y" THEN QTY_BREAK_5=_CUR.QTY_BREAK_5
16200 IF _CHG_VAR$(19,1)="Y" THEN QTY_BREAK_6=_CUR.QTY_BREAK_6
16210 IF _CHG_VAR$(20,1)="Y" THEN QTY_BREAK_7=_CUR.QTY_BREAK_7
16220 IF _CHG_VAR$(21,1)="Y" THEN QTY_BREAK_8=_CUR.QTY_BREAK_8
16230 IF _CHG_VAR$(22,1)="Y" THEN QTY_BREAK_9=_CUR.QTY_BREAK_9
16240 IF _CHG_VAR$(23,1)="Y" THEN QTY_BREAK_10=_CUR.QTY_BREAK_10
16250 IF _CHG_VAR$(24,1)="Y" THEN QTY_BREAK_11=_CUR.QTY_BREAK_11
16260 IF _CHG_VAR$(25,1)="Y" THEN QTY_BREAK_12=_CUR.QTY_BREAK_12
16270 RETURN 
16280 ! 
17000 ! 17000 - right query for VENDOR field
17010 VENDOR_RIGHT_QUERY:
17020 VAL$="",%VENDOR$=""
17030 PROCESS "QRY_FE0.4","../FEG/FE.EN",VAL$
17040 IF STP(VAL$)="" THEN NEXT_ID=VENDOR.CTL; EXIT 
17050 VEND_DIV$=MID(VAL$,1,2)
17060 VEND_CODE$=MID(VAL$,3,8)
17070 VENDOR$=VEND_DIV$+VEND_CODE$
17080 %VEND_NAME$=MID(VENDOR$,11,35)
17090 ITEM_GROUP_CODE$=MID(VAL$,11,10)
17100 GOSUB CALL_ZZWLKU
17110 NEXT_ID=PROD_CODE.CTL
17120 CALL "*wingrp;Enable",KEY2.GRP$
17130 REFRESH_FLG=1
17140 RETURN 
17150 ! 
17300 ! validate the incoming ITEM_GROUP_CODE
17310 FIND_ITEM_GROUP:
17320 DIM FE0$(484),FE0[12]
17330 FIND (_FE0_NO,KEY=VENDOR$+PAD(ITEM_GROUP_CODE$,10),ERR=NOREC,END=NOREC)FE0$,FE0{ALL}
17340 NEXT_ID=PROD_CODE.CTL; REFRESH_FLG=1
17350 RETURN 
17360 NOREC:
17370 ! MSGBOX ("No record found for "+CHR(34)+VENDOR$+PAD(ITEM_GROUP_CODE$,10)+CHR(34))
17380 ITEM_DESC$=""
17390 NEXT_ID=ITEM_GROUP_CODE.CTL; REFRESH_FLG=1
17400 RETURN 
17410 ! 
18000 ! 18000 - load values into the QTY BREAK fields;
18010 ! autofill the QTY PER U/M field and gray it out if UOM is predefined;
18020 ! recalculate and display the QTY_BREAK_* fields;
18030 FIND_QTY_BREAKS:
18040 QTY_BREAK_1$=""; QTY_BREAK_2$=""; QTY_BREAK_3$=""; QTY_BREAK_4$=""; QTY_BREAK_5$=""; QTY_BREAK_6$=""; QTY_BREAK_7$=""; QTY_BREAK_8$=""; QTY_BREAK_9$=""; QTY_BREAK_10$=""; QTY_BREAK_11$=""; QTY_BREAK_12$=""
18050 DISP_QTY_BREAK_1$=""; DISP_QTY_BREAK_2$=""; DISP_QTY_BREAK_3$=""; DISP_QTY_BREAK_4$=""; DISP_QTY_BREAK_5$=""; DISP_QTY_BREAK_6$=""; DISP_QTY_BREAK_7$=""; DISP_QTY_BREAK_8$=""; DISP_QTY_BREAK_9$=""; DISP_QTY_BREAK_10$=""; DISP_QTY_BREAK_11$=""; DISP_QTY_BREAK_12$=""
18060 MODE=2 ! 1=display data;   2=get data for field COST_QTY_PER
18070 U$=STR(COST_UM$)
18080 U_QPM=COST_QTY_PER
18090 ! MSGBOX "in:"+STR(COST_QTY_PER$)+"|["+STR(U$)+"/"+STR(U_QPM)+"]/STR: "+DISP_QTY_BREAK_1$+"/NUM: "+STR(QTY_BREAK_1)
18100 IF QTY_BREAK_1>=0 THEN QTY_IN_EACHES=QTY_BREAK_1; GOSUB CALC_QTY_BREAK; DISP_QTY_BREAK_1$=STR(DISPLAY_QTY)
18110 IF QTY_BREAK_2>=0 THEN QTY_IN_EACHES=QTY_BREAK_2; GOSUB CALC_QTY_BREAK; DISP_QTY_BREAK_2$=STR(DISPLAY_QTY)
18120 IF QTY_BREAK_3>=0 THEN QTY_IN_EACHES=QTY_BREAK_3; GOSUB CALC_QTY_BREAK; DISP_QTY_BREAK_3$=STR(DISPLAY_QTY)
18130 IF QTY_BREAK_4>=0 THEN QTY_IN_EACHES=QTY_BREAK_4; GOSUB CALC_QTY_BREAK; DISP_QTY_BREAK_4$=STR(DISPLAY_QTY)
18140 IF QTY_BREAK_5>=0 THEN QTY_IN_EACHES=QTY_BREAK_5; GOSUB CALC_QTY_BREAK; DISP_QTY_BREAK_5$=STR(DISPLAY_QTY)
18150 IF QTY_BREAK_6>=0 THEN QTY_IN_EACHES=QTY_BREAK_6; GOSUB CALC_QTY_BREAK; DISP_QTY_BREAK_6$=STR(DISPLAY_QTY)
18160 IF QTY_BREAK_7>=0 THEN QTY_IN_EACHES=QTY_BREAK_7; GOSUB CALC_QTY_BREAK; DISP_QTY_BREAK_7$=STR(DISPLAY_QTY)
18170 IF QTY_BREAK_8>=0 THEN QTY_IN_EACHES=QTY_BREAK_8; GOSUB CALC_QTY_BREAK; DISP_QTY_BREAK_8$=STR(DISPLAY_QTY)
18180 IF QTY_BREAK_9>=0 THEN QTY_IN_EACHES=QTY_BREAK_9; GOSUB CALC_QTY_BREAK; DISP_QTY_BREAK_9$=STR(DISPLAY_QTY)
18190 IF QTY_BREAK_10>=0 THEN QTY_IN_EACHES=QTY_BREAK_10; GOSUB CALC_QTY_BREAK; DISP_QTY_BREAK_10$=STR(DISPLAY_QTY)
18200 IF QTY_BREAK_11>=0 THEN QTY_IN_EACHES=QTY_BREAK_11; GOSUB CALC_QTY_BREAK; DISP_QTY_BREAK_11$=STR(DISPLAY_QTY)
18210 IF QTY_BREAK_12>=0 THEN QTY_IN_EACHES=QTY_BREAK_12; GOSUB CALC_QTY_BREAK; DISP_QTY_BREAK_12$=STR(DISPLAY_QTY)
18220 REFRESH_FLG=1
18230 RETURN 
18240 ! 
18300 ! 18300 - update the QTY PER U/M field, based on data in COST UOM field;
18310 ! recalculate and display the QTY_BREAK_* fields as needed;
18320 UPDATE_QTY_UOM:
18330 MODE=1 ! 1=display data;   2=get data for field COST_QTY_PER
18340 U$=STR(COST_UM$)
18350 U_QPM=NUM(COST_QTY_PER$)
18360 ON QTY_BREAK_NUM GOTO QB_DONE,QB1,QB2,QB3,QB4,QB5,QB6,QB7,QB8,QB9,QB10,QB11,QB12,QB_DONE
18370 QB1: DISPLAY_QTY=NUM(DISP_QTY_BREAK_1$); GOSUB CALC_QTY_BREAK; QTY_BREAK_1=QTY_IN_EACHES; GOTO QB_DONE
18380 QB2: DISPLAY_QTY=NUM(DISP_QTY_BREAK_2$); GOSUB CALC_QTY_BREAK; QTY_BREAK_2=QTY_IN_EACHES; GOTO QB_DONE
18390 QB3: DISPLAY_QTY=NUM(DISP_QTY_BREAK_3$); GOSUB CALC_QTY_BREAK; QTY_BREAK_3=QTY_IN_EACHES; GOTO QB_DONE
18400 QB4: DISPLAY_QTY=NUM(DISP_QTY_BREAK_4$); GOSUB CALC_QTY_BREAK; QTY_BREAK_4=QTY_IN_EACHES; GOTO QB_DONE
18410 QB5: DISPLAY_QTY=NUM(DISP_QTY_BREAK_5$); GOSUB CALC_QTY_BREAK; QTY_BREAK_5=QTY_IN_EACHES; GOTO QB_DONE
18420 QB6: DISPLAY_QTY=NUM(DISP_QTY_BREAK_6$); GOSUB CALC_QTY_BREAK; QTY_BREAK_6=QTY_IN_EACHES; GOTO QB_DONE
18430 QB7: DISPLAY_QTY=NUM(DISP_QTY_BREAK_7$); GOSUB CALC_QTY_BREAK; QTY_BREAK_7=QTY_IN_EACHES; GOTO QB_DONE
18440 QB8: DISPLAY_QTY=NUM(DISP_QTY_BREAK_8$); GOSUB CALC_QTY_BREAK; QTY_BREAK_8=QTY_IN_EACHES; GOTO QB_DONE
18450 QB9: DISPLAY_QTY=NUM(DISP_QTY_BREAK_9$); GOSUB CALC_QTY_BREAK; QTY_BREAK_9=QTY_IN_EACHES; GOTO QB_DONE
18460 QB10: DISPLAY_QTY=NUM(DISP_QTY_BREAK_10$); GOSUB CALC_QTY_BREAK; QTY_BREAK_10=QTY_IN_EACHES; GOTO QB_DONE
18470 QB11: DISPLAY_QTY=NUM(DISP_QTY_BREAK_11$); GOSUB CALC_QTY_BREAK; QTY_BREAK_11=QTY_IN_EACHES; GOTO QB_DONE
18480 QB12: DISPLAY_QTY=NUM(DISP_QTY_BREAK_12$); GOSUB CALC_QTY_BREAK; QTY_BREAK_12=QTY_IN_EACHES; GOTO QB_DONE
18490 QB_DONE:
18500 REFRESH_FLG=1
18510 RETURN 
18520 ! 
18600 ! 18600 - calculate values to loaded into the QTY BREAK fields
18610 CALC_QTY_BREAK:
18620 ! 
18630 ! MODE		! 1=display data;   2=get data
18640 ! U$		! Unit of measure "BOX ", "M   ", etc
18650 ! U_QPM		! Qty per unit; 1 or 250 (if it is an EACH/1 or Box/250 respectively) etc
18660 ! QTY_IN_EACHES	! Raw qty to be stored in DB/d files in extended form (also called eaches interchangeably)
18670 ! DISPLAY_QTY	! Qty displayed on screen in terms of UOM, ex: "10" BOX/250
18680 ! 
18690 ON MODE GOSUB *RETURN,GET_EACHES_QTY,GET_DISPLAY_QTY,*RETURN
18700 RETURN 
18710 ! 
18720 ! Given U$ and U_QPM, get components required to calculate display units
18730 GET_UOM_FORMATTED:
18740 U=1 ! minimum allowed unit of measure
18750 DIM UOM[2]
18760 FIND (ZZPARM,KEY="U/M"+PAD(U$,4),DOM=*RETURN)UOM$,UOM[0],UOM[1]
18770 IF UOM$(20,1)="Y" THEN {
18780 U=UOM[1]
18790 CALL "*wingrp;Disable",COST_QTY_PER.GRP$
18800  } ELSE {
18810 U=U_QPM
18820 CALL "*wingrp;Enable",COST_QTY_PER.GRP$
18830  }
18840 IF U=0 THEN U=1
18850 COST_QTY_PER=U; IF UOM$(20,1)="Y" THEN COST_QTY_PER=MAX(MAX(UOM[0],UOM[1]),1) END_IF ; COST_QTY_PER$=STR(COST_QTY_PER)
18860 RETURN 
18870 ! 
18900 GET_EACHES_QTY:
18910 GOSUB GET_UOM_FORMATTED
18920 QTY_IN_EACHES=DISPLAY_QTY*U
18930 RETURN 
18940 ! 
18950 GET_DISPLAY_QTY:
18960 GOSUB GET_UOM_FORMATTED
18970 DISPLAY_QTY=QTY_IN_EACHES/U
18980 RETURN 
30000 ! 
30010 INSERT_VERSION:
30020 VERS$="$Revision: 1.2 $"
30030 VERSION$=MID(VERS$,2,LEN(VERS$)-2)
30040 REFRESH_FLG=1
30050 RETURN 
