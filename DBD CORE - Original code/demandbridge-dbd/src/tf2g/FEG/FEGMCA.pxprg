0010 ! FEGMCA - File Maintenance Program for FE2_QuoteFormType (="FE2"+%C$)
0020 ! ************************************************************************
0030 REM "5.7 - 05/09/12 - 9.088611 - sns - SSP# 252715"
0035 REM "5.7 - 07/21/15 - 15.245555 - sns - SSP# 252715
0037 REM "252715-Add E/Q menu options to GUI.                                
0040 REM "Copyright 2015 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 REM "Copyright 2014 Demand Bridge, LLC.; Norcross, Georgia"
0060 REM "        Licensed Software - All Rights Reserved."
0070 CLEAR ; SETESC ERROR_PROCESSING; SETERR ERROR_PROCESSING
0080 IF TCB(88)=0 THEN MSGBOX "You must be using Windx to access this program" ELSE PROCESS "FEGMCA","../FEG/FE.EN"
0090 IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT 
0095 EXIT 
0100 ! 100 - Initialization
0110 INIT:
0120 GOSUB INSERT_VERSION
0130 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0140 GOSUB SETUP_LIBRARY
0150 IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0160 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0170 GOSUB SETUP_KEYS
0180 _FILE_NAME$="FE2"+%C$
0190 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0200 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0205 _FE0_NO=HFN; OPEN (_FE0_NO,IOL=*,ERR=OPEN_ERR)"FE0"+%C$
0210 _FE1_NO=HFN; OPEN (_FE1_NO,IOL=*,ERR=OPEN_ERR)"FE1"+%C$
0220 _FE2_NO=HFN; OPEN (_FE2_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0240 RETURN 
0250 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0260 CMD_STR$="END"
0270 RETURN 
0280 ! 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO SET_MSG
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0380 ! 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="ITEM_TYPE$"
0440 _KEY1=1
0450 RETURN 
0460 ! 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 MYGRID=GRID_1.CTL
0540 GOSUB CLEAR_REC
0550 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0560 _KEY$=ARG_1$
0570 READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0580 _ENABLE_FLG=-1
0590 GOSUB PROCESS_READ
0600 GOSUB DISP_REC
0610 RETURN 
0620 ! 
0630 ERROR_PROCESSING:
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 IF _FE0_NO=HFN<>0 THEN CLOSE (_FE0_NO); _FE0_NO=0
0950 IF _FE1_NO=HFN<>0 THEN CLOSE (_FE1_NO); _FE1_NO=0
0960 IF _FE2_NO=HFN<>0 THEN CLOSE (_FE2_NO); _FE2_NO=0
0970 MESSAGE_LIB _SV_MSGLIB$
0980 SET_PARAM 'KR'=_SV_KR
0990 RETURN 
0995 ! 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[1]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN 
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 %ITEM_TYPE$=ITEM_TYPE$
1100 GOSUB NUM_TO_STR
1110 GOSUB LOAD_SCREEN
1120 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1130 RETURN 
1140 ! 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 MSGBOX "Do you wish to add this entry?",MSG("CONFIRM"),"?,YESNO",_YESNO$
1230 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1240 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1250 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=ITEM_GROUP.CTL
1260 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1270 RETURN 
1280 ! 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 VEND_DIV$=MID(VENDOR$,1,2); VEND_CODE$=MID(VENDOR$,3,8)
1430 GOSUB STR_TO_NUM
1440 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1450 GOSUB REVIEW_FEATURE_LIST ! returns NEW_FEATURE_LIST
1460 GOSUB REVIEW_WRITE; IF _ABORT_WRITE THEN _ABORT_WRITE=0; RETURN 
1470 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1480 CHANGE_FLG=0
1490 NEXT_ID=_FIRST_KEY
1500 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1510 ITEM_TYPE$=""
1520 EXIT 
1530 ! 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1680 CHANGE_FLG=0
1690 NEXT_ID=_FIRST_KEY
1700 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1730 ! 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 GOSUB CLEAR_GRID
1850 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1860 ITEM_TYPE$=""; VENDOR$=""; ITEM_GROUP_CODE$=""
1870 CHANGE_FLG=0; REFRESH_FLG=1
1880 RETURN 
1890 ! 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2060 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2070 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2080 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2090 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2100 ! 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2280 ! 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2440 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2450 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2460 ! 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2640 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2650 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
2660 ! 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 VENDOR$=VEND_DIV$+VEND_CODE$; %VENDOR$=VENDOR$
3050 REFRESH_FLG=1
3060 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3070 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO)
3080 CHANGE_FLG=0
3090 RETURN 
3100 ! 
3110 ! 3200 - Review record for changes before WRITE
3120 REVIEW_WRITE:
3130 IF FEATURE_LIST$="" THEN FEATURE_LIST$=NEW_FEATURE_LIST$
3140 _CHG1$="",_CHG2$="",_ABORT_WRITE=0
3150 EXTRACT (_FIL_NO,KEY=KEC(_FIL_NO),REC=_CUR$,DOM=WRT,ERR=REC_BUSY)
3160 GOSUB DETERMINE_CHGS
3170 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3180 IF _CHG1$="" THEN GOTO CHK2
3190 IF _CHG2$="" THEN GOTO WRT
3200 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3210 GOSUB INCORPORATE_CHGS
3220 WRT:
3230 WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3240 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO)
3250 GOSUB NUM_TO_STR
3260 GOTO FIND_REC
3270 VENDOR$=""; %VENDOR$=""
3280 REFRESH_FLG=1
3290 RETURN 
3300 ! 
3310 WRITE_ERROR:
3320 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3330 RETURN 
3340 ! 
3350 REC_BUSY:
3360 IF ERR=0 THEN MSGBOX _MSG_REC_LOCKED$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG_CANNOT_WRITE$+SEP+MSG(ERR),_ERROR$
3370 _ABORT_WRITE=1
3380 RETURN 
3390 ! 
3400 ! 3500 - Display a record
3410 DISP_REC:
3420 GOSUB NUM_TO_STR
3430 GOSUB LOAD_SCREEN
3440 RETURN 
3450 ! 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3650 ! 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=ITEM_TYPE.CTL,_FIRST_FIELD=VENDOR.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
3880 ! 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF UCS(_KEYS$[_CURKEY])=UCS(ID$)+"$" OR UCS(_KEYS$[_CURKEY])=UCS(ID$) THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
4060 ! 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9360 ! 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 RETURN 
10030 ! 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 RETURN 
11030 ! 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 IF VENDOR$="" THEN MSGBOX "Missing value for Vendor"; _W_FLG=0; NEXT_ID=VENDOR.CTL; REFRESH_FLG=1; RETURN 
12030 IF ITEM_GROUP_CODE$="" THEN MSGBOX "Missing value for Item Group"; _W_FLG=0; NEXT_ID=ITEM_GROUP_CODE.CTL; REFRESH_FLG=1; RETURN 
12040 _W_FLG=1
12050 RETURN 
12060 ! 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN {
13030 VENDOR$=""; %VENDOR$=""; %VEND_NAME$=""; VEND_NAME$=""; %VEND_CODE$=""; VEND_CODE$=""; VEND_DIV$=""; %VEND_DIV$=""
13040 ITEM_GROUP_CODE$=""; ITEM_DESC$=""
13050 FEATURE_LIST$=""
13060  }
13070 GOSUB CLEAR_GRID
13080 GOSUB NUM_TO_STR
13090 REFRESH_FLG=1
13100 RETURN 
13110 ! 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG>0 THEN {
14040 CALL "*wingrp;Enable",KEY1.GRP$
14050 CALL "*wingrp;Disable",FIELDS.GRP$
14060 CALL "*wingrp;Disable",BUTTONS.GRP$
14070  } ELSE {
14080 CALL "*wingrp;Disable",KEY1.GRP$
14090 CALL "*wingrp;Enable",FIELDS.GRP$
14100 CALL "*wingrp;Enable",BUTTONS.GRP$
14110  }
14120 RETURN 
14130 ! 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(4,"N")
15030 IF _ORIG.ITEM_TYPE$=_CUR.ITEM_TYPE$ OR ITEM_TYPE$=_CUR.ITEM_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_TYPE$=ITEM_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_TYPE")+" = "+_CUR.ITEM_TYPE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_TYPE")+" = "+_CUR.ITEM_TYPE$
15040 IF _ORIG.VENDOR$=_CUR.VENDOR$ OR VENDOR$=_CUR.VENDOR$ THEN GOTO *NEXT ELSE IF _ORIG.VENDOR$=VENDOR$ THEN _CHG2$=_CHG2$+SEP+MSG("VENDOR")+" = "+_CUR.VENDOR$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VENDOR")+" = "+_CUR.VENDOR$
15050 IF _ORIG.ITEM_GROUP_CODE$=_CUR.ITEM_GROUP_CODE$ OR ITEM_GROUP_CODE$=_CUR.ITEM_GROUP_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_GROUP_CODE$=ITEM_GROUP_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_GROUP_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_GROUP_CODE$
15060 ! check to see if FEATURE_LIST has changed
15090 FEATURE_LIST$=NEW_FEATURE_LIST$
15100 IF _ORIG.FEATURE_LIST$=_CUR.FEATURE_LIST$ OR FEATURE_LIST$=_CUR.FEATURE_LIST$ THEN GOTO *NEXT ELSE IF _ORIG.FEATURE_LIST$=FEATURE_LIST$ THEN _CHG2$=_CHG2$+SEP+MSG("FEATURE_LIST")+" = "+_CUR.FEATURE_LIST$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FEATURE_LIST")+" = "+_CUR.FEATURE_LIST$
15110 RETURN 
15120 ! 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN ITEM_TYPE$=_CUR.ITEM_TYPE$
16030 IF _CHG_VAR$(2,1)="Y" THEN VENDOR$=_CUR.VENDOR$
16040 IF _CHG_VAR$(3,1)="Y" THEN ITEM_GROUP_CODE$=_CUR.ITEM_GROUP_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN FEATURE_LIST$=_CUR.FEATURE_LIST$
16060 RETURN 
16070 ! 
16080 ! validate the incoming ITEM_GROUP_CODE
16090 FIND_ITEM_GROUP:
16100 DIM FE0$(484),FE0[12]
16110 FIND (_FE0_NO,KEY=VENDOR$+PAD(ITEM_GROUP_CODE$,10),ERR=NOITEMGROUPREC,END=NOITEMGROUPREC)FE0$,FE0{ALL}
16120 GOSUB LOAD_SCREEN
16130 RETURN 
16140 NOITEMGROUPREC:
16150 MSGBOX ("No record found for "+CHR(34)+VENDOR$+PAD(ITEM_GROUP_CODE$,10)+CHR(34))
16160 ITEM_GROUP_CODE$=""
16170 ITEM_DESC$=""
16180 GOSUB CLEAR_GRID
16190 NEXT_ID=ITEM_GROUP_CODE.CTL; REFRESH_FLG=1
16200 RETURN 
16210 ! 
16220 ! populate the ITEM_DESC field, then clear and load the grid
16230 LOAD_SCREEN:
16240 GOSUB LOAD_ITEM_DESC
16250 GOSUB CLEAR_GRID
16260 GOSUB LOAD_GRID
16270 REFRESH_FLG=1
16280 RETURN 
16290 ! 
16300 ! look up the ITEM DESC and populate the field
16310 LOAD_ITEM_DESC:
16320 DIM FE0$(484),FE0[12]
16330 FIND (_FE0_NO,KEY=VENDOR$+PAD(ITEM_GROUP_CODE$,10),ERR=NOITEMDESC,END=NOITEMDESC)FE0$,FE0{ALL}
16340 ITEM_DESC$=FE0$(21,35)
16350 REFRESH_FLG=1
16360 RETURN 
16370 NOITEMDESC:
16380 MSGBOX ("No record found for "+CHR(34)+VENDOR$+PAD(ITEM_GROUP_CODE$,10)+CHR(34))
16390 ITEM_DESC$=""
16400 NEXT_ID=ITEM_GROUP_CODE.CTL; REFRESH_FLG=1
16410 RETURN 
16420 ! 
17000 ! look up the VENDOR and refresh the field
17010 FIND_VEND_REC:
17020 VEND_NAME$=MID(VENDOR$,3,35)
17030 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[1]) THEN QRY_VAL$="" ELSE RETURN 
17040 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
17050 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
17060 CALL_ZZWLKU:CALL "ZZWLKU;PARSE_VEND",VENDOR$,VEND_DIV$,VEND_CODE$; VENDOR$=VEND_DIV$+VEND_CODE$; %VENDOR$=VENDOR$
17070 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
17080 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
17090 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
17100 GOSUB PROCESS_READ
17110 GOSUB NUM_TO_STR
17120 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
17130 EXIT 
17140 ! 
17150 ! load the grid with information from FE1
17160 LOAD_GRID:
17170 MYGRID'VISIBLE=1
17180 GRID LOCK MYGRID,0,0 ! lock the entire grid; we later unlock it one row at a time
17190 NEXTROW=1
17210 MAXFEATURES=70 ! max number of 3-char feature codes that will fit in the field FE2/FEATURE_LIST
17220 DIM ALLFEATURES$[MAXFEATURES,2] ! initialize an array for all known FEATURE CODEs from FE1
17230 READ (_FE1_NO,KEY=VENDOR$+PAD(ITEM_GROUP_CODE$,10),DOM=*NEXT)
17240 LOAD_GRID_NEXT:
17250 KFE1$=KEY(_FE1_NO,ERR=LAST_FEATURE,END=LAST_FEATURE)
17260 READ (_FE1_NO,KEY=KFE1$)FE1$
17270 IF MID(KFE1$,1,20)<>VENDOR$+PAD(ITEM_GROUP_CODE$,10) THEN GOTO LAST_FEATURE
17280 XVENDOR$=FE1$(1,10)
17290 XITEM$=FE1$(11,10)
17300 XFEATURE$=FE1$(21,3)
17310 XDESC$=FE1$(24,40)
17320 ALLFEATURES$[NEXTROW,0]=XFEATURE$
17330 ALLFEATURES$[NEXTROW,1]="N"
17340 ! 
17350 ! FE1 record must match keys for current FE2 record
17360 GRID LOAD MYGRID,1,0,SEP
17370 MYGRID'ROW=NEXTROW,MYGRID'COLUMN=-1,MYGRID'ALIGN$="C",MYGRID'VALUE$=STR(NEXTROW) ! show row number
17380 MYGRID'ROW=NEXTROW,MYGRID'COLUMN=2,MYGRID'ALIGN$="C",MYGRID'VALUE$=XFEATURE$ ! show FEATURE code
17390 MYGRID'ROW=NEXTROW,MYGRID'COLUMN=3,MYGRID'ALIGN$="L",MYGRID'VALUE$=XDESC$ ! show DESCRIPTION
17400 MYGRID'ROW=NEXTROW,MYGRID'COLUMN=1,MYGRID'VALUE$="0" ! set checkbox OFF by default
17410 GRID UNLOCK MYGRID,1,NEXTROW ! unlock only the checkbox column
17420 IF POS(XFEATURE$=FEATURE_LIST$,3) THEN {
17430 MYGRID'ROW=NEXTROW
17440 MYGRID'COLUMN=1
17450 MYGRID'VALUE$="1"
17460 ALLFEATURES$[NEXTROW,1]="Y" ! display checkbox ON
17470  }
17480 NEXTROW=NEXTROW+1
17490 GOTO LOAD_GRID_NEXT
17500 ! 
17510 LAST_FEATURE:
17520 NUMFEATURES=NEXTROW-1
17530 REFRESH_FLG=1
17540 RETURN 
17550 ! 
17560 ! compare each item in FEATURE_LIST with current value of checkbox in grid;
17570 ! reviews array ALLFEATURES[] to see if FEATURE_LIST has changed;
17580 REVIEW_FEATURE_LIST:
17590 NEW_FEATURE_LIST$=""
17600 FOR XX=1 TO NUMFEATURES
17610 MYGRID'ROW=XX,MYGRID'COLUMN=1
17620 CHANGED$=MYGRID'VALUE$
17630 CODE$=ALLFEATURES$[XX,0]
17640 IF CHANGED$="1" THEN NEW_FEATURE_LIST$=NEW_FEATURE_LIST$+CODE$
17650 NEXT XX
17660 ! MSGBOX "Found features fater review: "+NEW_FEATURE_LIST$
17670 RETURN 
17680 ! 
17690 CLEAR_GRID:
17700 GRID LOAD MYGRID,0,0,""
17710 RETURN 
17720 ! 
30000 INSERT_VERSION:
30010 VERS$="$Revision: 6.2 $"
30020 VERSION$=MID(VERS$,2,LEN(VERS$)-2)
30030 REFRESH_FLG=1
30040 RETURN 
