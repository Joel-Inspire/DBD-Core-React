0010 ! ARGMKA - Commission Chargeback Maintenance (="AS0"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Sep. 20, 2002 16:24
0030 ! ************************************************************************
0035 REM "5.7 - 07/15/15 - 13.633333 - jvv - SSP# 278090
0037 REM "278090-GUI chargeback entry will sometimes allow the entry to be   
0040 REM "Copyright 2015 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "ARGMKA","../ARG/AR.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="AS0"+%C$
0165 X2=1; X0=-1; CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2
0170 DIM Z[NUM(X3$(60,3))],A[2],C[16]
0175 Z$="01O AS0...  02O AR3...  03O AR4...  13O ZZPARM  "
0180 CALL "ZZFLES",X3$,X1$,Y0$,Z$,Z{ALL},Z0,Z1
0185 ! iolist
0190 IOLIST A$,A[0],A[1],A[2]
0200 IOLIST B$
0210 IOLIST C$,C[0],C[1],C[2],C[3],C[4],C[5],C[6],C[7],C[8],C[9],C[10],C[11],C[12],C[13],C[14],C[15],C[16]
0290 RETURN 
0294 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0296 CMD_STR$="END"
0298 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=4
0430 DIM _KEYS$[1:4]; _KEYS$[1]="CR_FY$",_KEYS$[2]="ACCOUNTING_PER$",_KEYS$[3]="SALESPERSON$",_KEYS$[4]="CHARGE_BACK_NO$" ! SSP251235 jdf
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0532 GOSUB LOAD_FY ! SSP251235 jdf
0534 CR_FY$=CUR_FY$; GOSUB CHK_CLOSED_FY ! SSP251235 jdf
0536 NEXT_ID=CR_FY.CTL; REM IF POS(P1$(99,1)="CR")<>0 THEN NEXT_ID=CR_FY.CTL ELSE NEXT_ID=ACCOUNTING_PER.CTL ! SSP251235 jdf
0538 REFRESH_FLG=1 ! SSP251235 jdf
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (Z[1],KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(Z[1],ERR=*NEXT)
0930 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},Z0,Z1
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(Z[1]:KEY,ERR=*NEXT)) TO _KEY$
1055 _KEY$(1,4)=CR_FY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (Z[1],KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=CHARGE_BACK_DATE.CTL ! _FIRST_FIELD
1275 COMMISSION_CODE$=MID(B$,219,5),REFRESH_FLG=1 ! SSP251235 jdf
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0; GOSUB CLEAR_REC ! SSP#241258
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(Z[1]:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (Z[1],KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0; GOSUB CLEAR_REC ! SSP#241258
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 AND ID$<>"BUTTON_1" AND ID$<>"DELETE_1" THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1835 CALL "*wingrp;Enable",KEY1.GRP$ ! SSP251235 jdf
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(Z[1],END=END_OF_FILE)
2060 READ (Z[1],KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(Z[1],KEY=_KEY$,END=END_OF_FILE); READ (Z[1],KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2194 RETURN 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(Z[1],END=START_OF_FILE); READ (Z[1],KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(Z[1],KEY=_KEY$,END=START_OF_FILE); READ (Z[1],KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(Z[1],ERR=NO_FIRST)
2450 READ (Z[1],KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(Z[1],ERR=NO_LAST)
2650 READ (Z[1],KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(Z[1]:KEY,ERR=*NEXT); CALL "*wingrp;Disable",KEY1.GRP$ ! load fields from external key  ! SSP251235 jdf
3035 CR_FY$=FISCAL_YEAR$,REFRESH_FLG=1; GOSUB CHK_CLOSED_FY ! SSP251235 jdf
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(Z[1],ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(Z[1]) ! Save record for review
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (Z[1],KEY=KEC(Z[1]),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (Z[1],KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(Z[1],ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(Z[1]) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CR_FY.CTL,_FIRST_FIELD=CHARGE_BACK_DATE.CTL ! SSP251235 jdf
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_CHARGEBACK ! SSP251235 jdf
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 G_P_ADJUSTMENT$=STR(G_P_ADJUSTMENT)
10030 COMMSSION_ADJ$=STR(COMMSSION_ADJ)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="G_P_ADJUSTMENT",_X=G_P_ADJUSTMENT.CTL,G_P_ADJUSTMENT=NUM(G_P_ADJUSTMENT$,ERR=NON_NUMERIC)
11030 _X$="COMMSSION_ADJ",_X=COMMSSION_ADJ.CTL,COMMSSION_ADJ=NUM(COMMSSION_ADJ$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN CR_FY$="" ! SSP251235 jdf
13030 IF _CLR_FLG$="R" THEN ACCOUNTING_PER$=""
13040 IF _CLR_FLG$="R" THEN SALESPERSON$=""
13050 IF _CLR_FLG$="R" THEN CHARGE_BACK_NO$=""
13060 CHARGE_BACK_DATE$=""
13070 TF_DESC$=""
13080 COMMISSION_CODE$=""
13090 G_P_ADJUSTMENT=0
13100 COMMSSION_ADJ=0
13110 OK=0 ! SSP 278090
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=ACCOUNTING_PER.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=SALESPERSON.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=CHARGE_BACK_NO.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(9,"N")
15030 IF _ORIG.CR_FY$=_CUR.CR_FY$ OR CR_FY$=_CUR.CR_FY$ THEN GOTO *NEXT ELSE IF _ORIG.CR_FY$=CR_FY$ THEN _CHG2$=_CHG2$+SEP+MSG("FY")+" = "+_CUR.CR_FY$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FY")+" = "+_CUR.CR_FY$ ! SSP251235 jdf
15040 IF _ORIG.ACCOUNTING_PER$=_CUR.ACCOUNTING_PER$ OR ACCOUNTING_PER$=_CUR.ACCOUNTING_PER$ THEN GOTO *NEXT ELSE IF _ORIG.ACCOUNTING_PER$=ACCOUNTING_PER$ THEN _CHG2$=_CHG2$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCOUNTING_PER$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCOUNTING_PER$
15050 IF _ORIG.SALESPERSON$=_CUR.SALESPERSON$ OR SALESPERSON$=_CUR.SALESPERSON$ THEN GOTO *NEXT ELSE IF _ORIG.SALESPERSON$=SALESPERSON$ THEN _CHG2$=_CHG2$+SEP+MSG("SPER")+" = "+_CUR.SALESPERSON$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPER")+" = "+_CUR.SALESPERSON$
15060 IF _ORIG.CHARGE_BACK_NO$=_CUR.CHARGE_BACK_NO$ OR CHARGE_BACK_NO$=_CUR.CHARGE_BACK_NO$ THEN GOTO *NEXT ELSE IF _ORIG.CHARGE_BACK_NO$=CHARGE_BACK_NO$ THEN _CHG2$=_CHG2$+SEP+MSG("CHAR_B_N")+" = "+_CUR.CHARGE_BACK_NO$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CHAR_B_N")+" = "+_CUR.CHARGE_BACK_NO$
15070 IF _ORIG.CHARGE_BACK_DATE$=_CUR.CHARGE_BACK_DATE$ OR CHARGE_BACK_DATE$=_CUR.CHARGE_BACK_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.CHARGE_BACK_DATE$=CHARGE_BACK_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("CHAR_B_D")+" = "+_CUR.CHARGE_BACK_DATE$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CHAR_B_D")+" = "+_CUR.CHARGE_BACK_DATE$
15080 IF _ORIG.TF_DESC$=_CUR.TF_DESC$ OR TF_DESC$=_CUR.TF_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.TF_DESC$=TF_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC")+" = "+_CUR.TF_DESC$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC")+" = "+_CUR.TF_DESC$
15090 IF _ORIG.COMMISSION_CODE$=_CUR.COMMISSION_CODE$ OR COMMISSION_CODE$=_CUR.COMMISSION_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.COMMISSION_CODE$=COMMISSION_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("COMM_CODE")+" = "+_CUR.COMMISSION_CODE$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMM_CODE")+" = "+_CUR.COMMISSION_CODE$
15100 IF _ORIG.G_P_ADJUSTMENT=_CUR.G_P_ADJUSTMENT OR G_P_ADJUSTMENT=_CUR.G_P_ADJUSTMENT THEN GOTO *NEXT ELSE IF _ORIG.G_P_ADJUSTMENT=G_P_ADJUSTMENT THEN _CHG2$=_CHG2$+SEP+MSG("G_P_A")+" = "+STR(_CUR.G_P_ADJUSTMENT),_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("G_P_A")+" = "+STR(_CUR.G_P_ADJUSTMENT)
15110 IF _ORIG.COMMSSION_ADJ=_CUR.COMMSSION_ADJ OR COMMSSION_ADJ=_CUR.COMMSSION_ADJ THEN GOTO *NEXT ELSE IF _ORIG.COMMSSION_ADJ=COMMSSION_ADJ THEN _CHG2$=_CHG2$+SEP+MSG("COMM_ADJ")+" = "+STR(_CUR.COMMSSION_ADJ),_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMM_ADJ")+" = "+STR(_CUR.COMMSSION_ADJ)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CR_FY$=_CUR.CR_FY$ ! SSP251235 jdf
16030 IF _CHG_VAR$(2,1)="Y" THEN ACCOUNTING_PER$=_CUR.ACCOUNTING_PER$
16040 IF _CHG_VAR$(3,1)="Y" THEN SALESPERSON$=_CUR.SALESPERSON$
16050 IF _CHG_VAR$(4,1)="Y" THEN CHARGE_BACK_NO$=_CUR.CHARGE_BACK_NO$
16060 IF _CHG_VAR$(5,1)="Y" THEN CHARGE_BACK_DATE$=_CUR.CHARGE_BACK_DATE$
16070 IF _CHG_VAR$(6,1)="Y" THEN TF_DESC$=_CUR.TF_DESC$
16080 IF _CHG_VAR$(7,1)="Y" THEN COMMISSION_CODE$=_CUR.COMMISSION_CODE$
16090 IF _CHG_VAR$(8,1)="Y" THEN G_P_ADJUSTMENT=_CUR.G_P_ADJUSTMENT
16100 IF _CHG_VAR$(9,1)="Y" THEN COMMSSION_ADJ=_CUR.COMMSSION_ADJ
16990 RETURN 
20000 ! Populate info if there...
20010 GET_INV_INFO:
20012 IF NUL(CR_FY$) THEN NEXT_ID=CR_FY.CTL; REFRESH_FLG=1; GOTO *RETURN ELSE IF NUL(ACCOUNTING_PER$) THEN NEXT_ID=ACCOUNTING_PER.CTL; REFRESH_FLG=1; GOTO *RETURN ELSE IF NUL(SALESPERSON$) THEN NEXT_ID=SALESPERSON.CTL; REFRESH_FLG=1; GOTO *RETURN ! SSP251235 jdf
20015 IF NUL(CHARGE_BACK_NO$)=0 THEN CHARGE_BACK_NO$=PAD(CHARGE_BACK_NO$,6,0,"0") ELSE NEXT_ID=CHARGE_BACK_NO.CTL; REFRESH_FLG=1; GOTO *RETURN
20020 IF LEN(CR_FY$)>4 AND LOOKUP_FLG=1 THEN KEY_1$=CR_FY$ ELSE KEY_1$=CR_FY$+ACCOUNTING_PER$+SALESPERSON$+CHARGE_BACK_NO$ ! SSP251235 jdf
20025 IF LEN(CR_FY$)=4 AND LOOKUP_FLG=1 THEN LOOKUP_FLG=0; RETURN ! SSP251235 jdf
20030 READ (Z[1],KEY=KEY_1$,DOM=NEW_CHARGE_BACK)IOL=0190
20040 CR_FY$=A$(1,4); ACCOUNTING_PER$=A$(5,2); SALESPERSON$=A$(7,4) ! SSP251235 ! SSP251235 jdf
20050 CHARGE_BACK_NO$=A$(11,6); CHARGE_BACK_DATE$=A$(17,6); TF_DESC$=A$(23,40)
20060 COMMISSION_CODE$=A$(63,5)
20070 G_P_ADJUSTMENT=A[0]; COMMSSION_ADJ=A[1]
20072 CALL "*wingrp;Disable",KEY1.GRP$ ! SSP251235 jdf
20075 GOSUB CHK_CLOSED_FY; IF CLOSED THEN GOTO 20180
20170 GOSUB ENABLE_BUTTONS
20180 REFRESH_FLG=1; LOOKUP_FLG=0
20190 RETURN 
20200 ! Create new charge back record
20210 NEW_CHARGE_BACK:
20220 GOSUB NEW_CHARGEBACK_MSG
20230 KEY_1$=CR_FY$+ACCOUNTING_PER$+SALESPERSON$+CHARGE_BACK_NO$ ! SSP251235 jdf
20250 RETURN 
20500 ! write Charge back Information
20510 WRITE_CHARGEBACK:
20515 GOSUB CHECK_DFLT_COMM; IF NOT(OK) THEN NEXT_ID=COMMISSION_CODE.CTL; REFERSH_FLG=1; EXIT ! SSP 278090
20520 KEY_1$=CR_FY$+ACCOUNTING_PER$+SALESPERSON$+CHARGE_BACK_NO$ ! SSP251235 jdf
20522 IF LEN(KEY_1$)<16 THEN GOTO 20590
20525 TF_DESC$=PAD(TF_DESC$,40,1," ")
20530 A$=KEY_1$+CHARGE_BACK_DATE$+TF_DESC$+COMMISSION_CODE$
20540 A[0]=G_P_ADJUSTMENT; A[1]=COMMSSION_ADJ
20550 WRITE (Z[1],KEY=KEY_1$)IOL=0190
20555 IF ID$="BUTTON_1" OR ID$="DELETE_1" THEN GOSUB CLEAR_REC ! SSP251235 jdf
20560 ! GOSUB CLEAR_CB_FIELDS
20570 REM GOSUB DISABLE_BUTTONS
20580 ! CHANGE_FLG=0; NEXT_ID=_FIRST_KEY; REFRESH_FLG=1 ! _KCNT=2,_ENABLE_FLG=1; GOSUB FIND_REC ! NEXT_ID=CHARGE_BACK_NO.CTL
20590 RETURN 
21000 ! new Charge Back Message
21005 NEW_CHARGEBACK_MSG:
21010 MSG_1$="Chargeback #: "+CHARGE_BACK_NO$+" is not on file!  Would you like to add? "
21020 MSGBOX MSG_1$,"Chargeback not found","YesNo",ANS$
21030 IF ANS$="NO" THEN CHARGE_BACK_NO$=""; CHANGE_FLG=0; NEXT_ID=CHARGE_BACK_NO.CTL; REFRESH_FLG=1; RETURN ! SSP251235 jdf
21040 RETURN 
21400 ! Enable buttons
21410 ENABLE_BUTTONS:
21420 BUTTON SHOW BUTTON_1.CTL; BUTTON ENABLE BUTTON_1.CTL; NEXT_ID=BUTTON_1.CTL
21430 BUTTON SHOW MODIFY_1.CTL; BUTTON ENABLE MODIFY_1.CTL
21440 BUTTON SHOW DELETE_1.CTL; BUTTON ENABLE DELETE_1.CTL
21450 RETURN 
21500 ! disable buttons
21510 DISABLE_BUTTONS:
21520 BUTTON HIDE BUTTON_1.CTL; BUTTON DISABLE BUTTON_1.CTL
21530 BUTTON HIDE MODIFY_1.CTL; BUTTON DISABLE MODIFY_1.CTL
21540 BUTTON HIDE DELETE_1.CTL; BUTTON DISABLE DELETE_1.CTL
21550 RETURN 
21700 ! clear fields
21710 CLEAR_CB_FIELDS:
21720 CHARGE_BACK_NO$=""; CHARGE_BACK_DATE$=""
21730 TF_DESC$=""; COMMISSION_CODE$=""; %COMMISSION_DESC$=""
21740 G_P_ADJUSTMENT=0; COMMSSION_ADJ=0
21750 RETURN 
21800 ! Clear key information
21810 CLEAR_KEYS:
21820 CR_FY$=""; ACCOUNTING_PER$="" ! SSP251235 jdf
21830 SALESPERSON$=""; %SALES_NAME$=""
21840 RETURN 
21900 ! load Accounting Period
21910 LOAD_ACCT_PER:
21915 IF NUL(ACCOUNTING_PER$)=0 THEN ACCT_PER$=ACCOUNTING_PER$
21917 ACCOUNTING_PER$=""
21920 FOR I9=1 TO 12
21930 ACCOUNTING_PER$=ACCOUNTING_PER$+STR(I9:"00")+"/"
21940 NEXT I9
21945 DROP_BOX LOAD ACCOUNTING_PER.CTL,ACCOUNTING_PER$
21950 IF NUL(ACCT_PER$)=0 THEN ACCOUNTING_PER$=ACCT_PER$
21960 DROP_BOX WRITE ACCOUNTING_PER.CTL,ACCT_PER$
21990 RETURN 
22000 ! get salesman information
22010 GET_SALESMAN_INFO:
22015 IF NUL(CR_FY$) THEN NEXT_ID=CR_FY.CTL; REFRESH_FLG=1; GOTO *RETURN ELSE IF NUL(ACCOUNTING_PER$) THEN NEXT_ID=ACCOUNTING_PER.CTL; REFRESH_FLG=1; GOTO *RETURN ELSE IF NUL(SALESPERSON$) THEN NEXT_ID=SALESPERSON.CTL; REFRESH_FLG=1; GOTO *RETURN ! SSP251235 jdf
22020 KEY_2$=SALESPERSON$
22030 DFLT_COMM$=""; READ (Z[2],KEY=KEY_2$,DOM=*RETURN)IOL=0200; DFLT_COMM$=B$(219,5) ! SSP 278090
22040 RETURN 
22100 ! Get Commission infomation
22110 GET_COMM_INFO:
22120 DIM B$(300); KEY_3$=COMMISSION_CODE$
22125 IF NUL(COMMISSION_CODE$) THEN NEXT_ID=COMMISSION_CODE.CTL; REFRESH_FLG=1; GOTO *RETURN ! SSP#272372
22130 READ (Z[3],KEY=KEY_3$,DOM=*RETURN)IOL=0210
22135 %COMMISSION_DESC$=C$(6,25),REFRESH_FLG=1 ! SSP251235 jdf
22140 RETURN 
23000 CHECK_DFLT_COMM:! SSP 278090
23010 OK=0
23020 IF NUL(COMMISION_CODE$) AND NOT(NUL(DFLT_COMM$)) THEN COMMISION_CODE$=DFLT_COMM$
23030 IF NUL(COMMISSION_CODE$) THEN MSGBOX ("Please enter a Commission Code"); RETURN 
23040 OK=1
23050 RETURN 
25000 ! Delete Chargeback Entry
25010 DELETE_CB_ENTRY:
25020 GOSUB DELETE_VERIFY_MSG
25030 IF ANS$="NO" THEN RETURN 
25040 REMOVE (Z[1],KEY=KEY_1$,DOM=*RETURN)
25050 ! GOSUB CLEAR_KEYS
25060 ! GOSUB CLEAR_CB_FIELDS
25065 GOSUB CLEAR_REC ! SSP251235 jdf
25070 NEXT_ID=CR_FY.CTL ! SSP251235 jdf
25080 REFRESH_FLG=1
25180 MSGBOX "Chargeback Entry Deleted","Delete"
25190 RETURN 
25200 ! delete message
25210 DELETE_VERIFY_MSG:
25220 MSGBOX "Do you wish to delete this record","Delete Verify","YesNo",ANS$
25230 RETURN 
25250 QRY_AS0:
25255 QRY_VAL$=""; PROCESS "QRY_AS0","",QRY_VAL$
25260 IF NUL(QRY_VAL$) THEN NEXT_ID=CR_FY.CTL; REFRESH_FLG=1; GOTO *RETURN ! SSP251235 jdf
25265 CR_FY$=MID(QRY_VAL$,1,4); REM GOSUB CHK_CLOSED_FY ! SSP251235 jdf
25266 ACCOUNTING_PER$=MID(QRY_VAL$,5,2)
25267 SALESPERSON$=MID(QRY_VAL$,7,4)
25268 CHARGE_BACK_NO$=MID(QRY_VAL$,11,6)
25270 GOTO GET_INV_INFO
25295 RETURN 
25299 ! 
40000 LOAD_FY:! SSP251235 jdf
40010 ! ONLY_OPEN$="Y" means only load open FY's, TF_MODULE$ can be set to second part of key for that system parameter record, ie A/P, A/R, I/C
40020 ONLY_OPEN$="Y"
40030 CUR_FY$="",CUR_ACCTPD$=""; READ (Z[13],KEY=%C$+"A/R",DOM=*NEXT)SYS_PARMS$; CUR_FY$=SYS_PARMS$(7,4),CUR_ACCTPD$=SYS_PARMS$(11,2)
40033 IF NOT(NUL(CR_FY$)) THEN CUR_FY$=CR_FY$; CR_FY$=""
40035 IF NOT(NUL(CR_ACCTPD$)) THEN CUR_ACCTPD$=CR_ACCTPD$; CR_ACCTPD$=""
40040 DIM GL$(300); READ (Z[13],KEY=%C$+"G/L")GL$(1)
40050 DIM OSEC$(255); READ (Z[13],KEY="osec"+%X3_OP_ID$,DOM=*NEXT)OSEC$
40060 READ (Z[13],KEY=%C$+"G/LYE",DOM=*NEXT)
40070 K$=KEY(Z[13],END=LOAD_FY_DROP_BOX); READ (Z[13],KEY=K$)GLYE$
40080 IF LEN(K$)<8 OR K$(1,8)<>%C$+"G/LYE" THEN GOTO LOAD_FY_DROP_BOX
40090 IF ONLY_OPEN$="Y" AND POS(GLYE$(99,1)="CR")>0 THEN GOTO 40070
40100 IF GL$(256,1)="Y" AND MID(OSEC$,58,1)<>"Y" AND K$(9,4)<GL$(34,4) THEN GOTO 40070
40110 CR_FY$=CR_FY$+K$(9,4)+"/"
40120 GOTO 40070
40130 LOAD_FY_DROP_BOX:
40140 DROP_BOX LOAD CR_FY.CTL,CR_FY$
40150 DROP_BOX WRITE CR_FY.CTL,CUR_FY$
40160 IF CUR_FY$<>"" THEN IF GL$(256,1)="Y" AND MID(OSEC$,58,1)<>"Y" AND CUR_FY$<GL$(34,4) THEN CUR_FY$=GL$(34,4),CUR_ACCTPD$=GL$(38,2)
40170 IF CUR_ACCTPD$<>"" THEN IF GL$(256,1)="Y" AND MID(OSEC$,58,1)<>"Y" AND CUR_FY$+CUR_ACCTPD$<GL$(34,6) THEN CUR_ACCTPD$=GL$(38,2) ! Fix for 173826
40180 IF CUR_FY$<>"" THEN DROP_BOX WRITE FY.CTL,CUR_FY$
40190 CR_FY$=CUR_FY$; %FY$=CR_FY$
40200 IF CUR_FY$<>"" THEN FROM_FY$="Y",CR_FY$=CUR_FY$; GOSUB LOAD_ACCTPD
40210 LOAD_FY_END:RETURN 
40220 ! 
40230 LOAD_ACCTPD:
40240 ! FY$ should be set to a valid fiscal year
40250 CR_ACCTPD$=""; FROM_FY$="Y"
40260 IF FROM_FY$="Y" THEN GOTO 40270
40270 READ (Z[13],KEY=%C$+"G/LYE"+CR_FY$,DOM=LOAD_ACCTPD_END)GLYE$
40280 PDS=12; PDS=NUM(GLYE$(13,2),ERR=*NEXT) ! Number of periods in this FY
40290 FOR X=1 TO PDS
40300 X$=STR(X:"00"),FLAG$="NO"; CALL "ARGDTE",%X3$,%X4$,CR_FY$+X$,FLAG$; IF FLAG$<>"*" THEN CR_ACCTPD$=CR_ACCTPD$+X$+"/" ! Checks osec, only load valid periods
40310 NEXT X
40320 DROP_BOX LOAD CR_ACCTPD.CTL,CR_ACCTPD$
40330 IF FROM_FY$="Y" AND CUR_ACCTPD$<>"" THEN DROP_BOX WRITE CR_ACCTPD.CTL,CUR_ACCTPD$
40340 CR_ACCTPD$=CUR_ACCTPD$; %AP$=CR_ACCTPD$
40350 GOSUB LOAD_ENDING_DATE
40360 LOAD_ACCTPD_END:RETURN 
40370 ! 
40380 LOAD_ENDING_DATE:! SSP251235 jdf
40390 KE$=%C$+"G/LYE"
40400 IF LEN(CR_FY$)>4 THEN VAL$=CR_YEAR$ ELSE VAL$=CR_FY$
40410 FIND (Z[13],KEY=KE$+VAL$)Z9$; CC$=Z9$(21)
40420 IF LEN(CR_ACCTPD$)>2 THEN VAL=NUM(CR_PD$) ELSE VAL=NUM(CR_ACCTPD$)
40425 IF VAL=0 THEN VAL=1 ! SSP231224 jdf
40430 CC$=CC$(VAL*6-5,6),END_DATE$=CC$,REFRESH_FLG=1
40440 RETURN 
40500 CHK_CLOSED_FY:! Check to see if fiscal year is closed ! SSP251235 jdf  
40503 ERR_MSG$=""
40504 REM IF STP(CR_FY$)="" THEN ERR_MSG$="Year Required"; GOTO 40526 ! SSP251235 jdf
40505 CALL "ZZWLKU;GL_FISCALYEAR_VAL",CR_FY$,ERR_MSG$,VAR_TAG$
40510 READ (Z[13],KEY=%C$+"G/LYE"+CR_FY$,DOM=*NEXT)P1$
40520 REM IF POS(P1$(99,1)="CR")<>0 THEN MSGBOX MSG("ARGEAA_13"),MSG("WARNING"); CUR_ACCTPD$=""; CR_ACCTPD$=""; CR_FY$=""; REFRESH_FLG=1; NEXT_ID=CR_FY.CTL ! EXIT 
40525 REM IF STP(ERR_MSG$)<>"" THEN MSGBOX MSG(ERR_MSG$),MSG("WARNING"); CUR_ACCTPD$=""; CR_ACCTPD$=""; _CLR_FLG$="R"; GOSUB CLEAR_FIELDS; REFRESH_FLG=1; NEXT_ID=ID; BUTTON DISABLE BUTTON_1.CTL; BUTTON DISABLE DELETE_1.CTL; EXIT 
40526 IF STP(ERR_MSG$)<>"" THEN MSGBOX MSG(ERR_MSG$),MSG("WARNING"); CUR_ACCTPD$=""; CR_ACCTPD$=""; CLOSED=1; REFRESH_FLG=1; NEXT_ID=ID; _ENABLE_FLG=1; GOSUB ENABLE_GROUPS; EXIT ELSE IF _ENABLE_FLG=1 THEN _ENABLE_FLG=-1; GOSUB ENABLE_GROUPS; REM BUTTON DISABLE BUTTON_1.CTL; BUTTON DISABLE DELETE_1.CTL; EXIT 
40550 RETURN 
56000 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56001 REM "236559-ARGMKA-Commission chargeback-allows entry of an invalid year
56002 REM "241258-In the Open Invoice Inquiry Maintenance Panel (ARGMAK) issue
56003 REM "251235-Starting next month we will be assessing a 1.5% finance     
56004 REM "272372-Commission Chargeback Entry should require a Commission Code
56005 REM "278090-GUI chargeback entry will sometimes allow the entry to be   
