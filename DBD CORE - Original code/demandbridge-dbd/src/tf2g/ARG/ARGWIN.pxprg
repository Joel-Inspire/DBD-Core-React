0010 ! *winqry -- Process Query object
0020 ! (c) Copyright 2001 Best Software Canada Ltd.
0030 ! Version 2 - December 1997 -jr
0031 ! - Reduce RNO access / Alternate scroll bars for large files (no RNOs)
0040 ! Version 2.1 - July 1999 - jr
0041 ! - Prefix/range matching for alternate keys
0042 ! - Descending keys
0043 ! Version 4.15- aka Winqry II - April 2000 - jr
0044 ! - Added odbc / memory file handling
0047 ! 
0048 ! ---------------------------------------------------------------------------------
0049 ! 
0050 ! Initialization phase
0060 SETERR ERR_EXIT
0070 _SV_KR=PRM('KR'),_SV_XI=PRM('XI'),_SV_FI=PRM('FI'); SET_PARAM 'KR'=0,'XI'=1,'FI'=1
0075 IF %NOMAD_ENTER_TAB THEN PRINT '-E',
0080 GOSUB SETUP_MESSAGES
0090 GOSUB SETUP_VARIABLES
0100 GOSUB PROCESS_HDR_REC
0110 GOSUB OPEN_FILE
0120 GOSUB SETUP_FONTS_AND_COLORS
0130 GOSUB CREATE_WINDOW
0140 GOSUB PROCESS_SCR_LIB
0142 IF _TOT_COL=0 THEN MSGBOX _MSG_NO_COLUMNS$,_FYI$; GOTO WRAPUP
0145 GOSUB OPEN_XREF_FILES
0150 GOSUB DRAW_DISPLAY_AREA
0151 IF _MEM_FLG THEN _MEMKEY=_SORTKEY,_SORTKEY=0
0160 GOSUB GET_SELECTION_CRITERIA
0165 GOSUB LOAD_SORT_KEYS
0170 GOSUB CHECK_DESCENDING
0190 _V_LN=1; GOSUB DISP_TTL
0210 IF _MAN_PFX$<>"" THEN GOSUB DIM_MANFILE_FIELDS
0220 GOSUB GET_FILE_INFO
0250 _FOCUS_AREA=1; SET_FOCUS _FOCUS[_FOCUS_AREA]
0260 _PG_RNO=1,_CUR_LN=1
0270 IF ARG_1$="" THEN _K$=""; GOSUB DISP_PAGE ELSE MULTI_LINE WRITE 10,ARG_1$; OBTAIN (0,SIZ=1)*; IF _STRT_CNT>-1 THEN _STRT_CNT=-1; GOSUB POS_FILE ELSE ARG_1$=""; GOSUB POS_FOUND
0280 IF _REC_FLG=0 THEN GOSUB NO_DATA
0300 ! ^100 - Main polling loop
0310 MAIN_LOOP:
0320 IF _VSBAR=1 THEN IF _ALTSEL=0 THEN V_SCROLLBAR WRITE 11,_PG_RNO+_CUR_LN-1,_NUM_REC,ERR=*NEXT ELSE V_SCROLLBAR WRITE 11,_RN-_BSE_RNO,_MAX_RNO-_BSE_RNO,ERR=*NEXT; _LST_RN=_RN ELSE _SV=DEC($00$+_SK$(_SCROLL_OFS,2))-_SCROLL_1+1; V_SCROLLBAR WRITE 11,_SV,_SCROLL_RANGE,ERR=*NEXT; _LST_SV=_SV
0330 OBTAIN (0,SIZ=1)'ME',@(0,_CUR_LN+_QROW),_X$,'MN'
0335 _ANT=CTL
0340 IF CTL=4 OR CTL=-1999 THEN GOTO WRAPUP
0341 IF CTL=15 THEN GOTO MAIN_LOOP
0350 IF CTL=5 THEN MULTI_LINE WRITE 10,_X$; _FOCUS_AREA=1; GOSUB RESET_FOCUS; GOTO MAIN_LOOP
0360 IF CTL=10 THEN GOSUB POS_FILE; GOTO MAIN_LOOP
0365 IF CTL=13 THEN DELETE 8135 ! gui
0370 IF CTL=13 THEN GOSUB CHANGE_KEY; GOTO MAIN_LOOP
0380 IF CTL=16 THEN GOSUB FILE_MAINTENANCE; GOTO MAIN_LOOP
0381 IF CTL=17 THEN GOSUB REFRESH_MEMORY; GOTO MAIN_LOOP
0390 IF CTL=-6 THEN GOSUB SUB_QRY; GOTO MAIN_LOOP
0400 IF CTL=14 THEN GOSUB PRINT_QUERY; GOTO MAIN_LOOP
0401 IF CTL>100 AND CTL<200 THEN _SORTKEY=CTL-100+1; DROP_BOX WRITE 13,_SORTKEY,ERR=*PROCEED; GOSUB CHANGE_KEY; GOTO MAIN_LOOP
0410 IF CTL=0 THEN GOTO RET_SEL
0420 IF CTL=-1004 THEN GOSUB COL_LEFT; GOTO MAIN_LOOP
0430 IF CTL=-1005 THEN GOSUB COL_RIGHT; GOTO MAIN_LOOP
0440 IF CTL=-1011 THEN GOSUB LINE_UP; GOTO MAIN_LOOP
0450 IF CTL=-1012 THEN GOSUB LINE_DOWN; GOTO MAIN_LOOP
0460 IF CTL=-1013 THEN GOSUB PAGE_UP; GOTO MAIN_LOOP
0470 IF CTL=-1014 THEN GOSUB PAGE_DOWN; GOTO MAIN_LOOP
0480 IF CTL=11 THEN GOSUB V_SBAR; GOTO MAIN_LOOP
0490 IF CTL=12 THEN GOSUB H_SBAR; GOTO MAIN_LOOP
0500 IF CTL=-1015 OR CTL=-1016 THEN GOSUB TAB_IT; GOTO MAIN_LOOP
0510 IF CTL=-1080 THEN GOTO MAIN_LOOP
0520 IF CTL=-1081 THEN GOSUB MSE_HIT; GOTO MAIN_LOOP
0530 IF CTL=-1105 THEN GOSUB RESIZE_LOGIC; GOTO MAIN_LOOP
0540 IF CTL=-5 THEN GOSUB DO_HELP; GOTO MAIN_LOOP
0550 IF CTL<0 AND CTL>-1000 THEN CALL "*control"
0556 IF CTL=99 THEN GOSUB SEL_REC ! gui
0557 IF CTL=32000 THEN GOSUB OPTIONS ! gui
0560 GOTO 0330
0600 ! ^100 - Return selection
0610 RET_SEL:
0620 IF _NO_RET THEN ARG_1$=_SAVE_RET$; GOTO 0680
0630 IF _MEM_FLG THEN _IN_FN=_SV_FN,_MEM_FLG=0,_KEYADJ=0
0640 _NO_FMT=1,_K$=PRIME_KEY$
0660 READ (_IN_FN,KEY=_K$,KNO=0,DOM=*NEXT); GOSUB SELECT_RECORD; GOTO 0670
0661 MSGBOX PRIME_KEY$+SEP+_MSG_NOT_AVAILABLE$,_MSG_WARNING$; GOTO WRAPUP
0670 IF POS("ENTIRE_RECORD$"=_RET_VAL$)=0 THEN ARG_1$=EVS("STR("+_RET_VAL$+")",ERR=WRAPUP) ELSE ARG_1$=REC(IOL(_IN_FN),REC=_MN_$); _P=POS("PRIME_KEY$"=_RET_VAL$); IF _P=1 THEN ARG_1$=PRIME_KEY$+SEP+ARG_1$ ELSE IF _P>1 THEN ARG_1$+=PRIME_KEY$
0680 IF _AUTOTAB THEN PREINPUT NEXT -1015
0690 GOTO WRAPUP
0700 ! ^100 - Error handler
0701 ERR_EXIT:
0702 IF ERR=31 OR ERR=33 THEN IF _M_FN>0 THEN CLOSE (_M_FN,ERR=*NEXT)
0710 MSGBOX _MSG_QRY_ERROR$+SEP+MSG(ERR)+SEP+SEP+"["+STR(TCB(5))+"]",_ERROR$,"!"
0711 PRINT 'CURSOR'(0),
0720 GOTO WRAPUP
0800 ! ^100 - Wrapup - Restore params, msg lib, setup ret val, close files
0810 WRAPUP:
0811 IF ARG_1$="" AND _SAVE_RET$<>"" THEN ARG_1$=_SAVE_RET$
0820 SET_PARAM 'KR'=_SV_KR,'XI'=_SV_XI,'FI'=_SV_FI
0840 %NOMAD_QUERY_RETKNO=_SORTKEY
0850 SETERR 0000
0860 PERFORM "*winproc;Wrapup"
0865 IF %NOMAD_ENTER_TAB THEN PRINT '+E',
0870 IF _IN_FN<>0 THEN CLOSE (_IN_FN,ERR=*NEXT)
0871 IF _SV_FN<>0 THEN CLOSE (_SV_FN,ERR=*NEXT)
0872 IF _M_FN<>0 THEN CLOSE (_M_FN,ERR=*NEXT)
0880 IF _SC_FN<>0 THEN CLOSE (_SC_FN,ERR=*NEXT)
0881 IF _DB_FN<>0 THEN CLOSE (_DB_FN,ERR=*NEXT)
0890 IF _NXREF=0 THEN GOTO 0930
0900 FOR _I=1 TO _NXREF
0910 IF _XFN[_I]<>0 THEN CLOSE (_XFN[_I],ERR=*NEXT)
0920 NEXT _I
0930 PRINT 'CURSOR'(0),
0940 END 
1000 ! ^1000 - Initialization Routines --------------------------------------
1100 ! ^100 - Set up initial values for counters, flags, etc.
1110 SETUP_VARIABLES:
1112 IF MID(MSE,22,1)>$00$ AND MID(MSE,22,1)<$FF$ THEN _WDX$="[wdx]" ELSE _WDX$=""
1116 _SAVE_RET$=ARG_1$,_SV_STRT$="",_MAINT_KEY$="",_STRT_CNT=0
1118 _ST_CASE$="C",_NO_RET=0,_NO_PRT=0,_NO_SRT=0,_RD_REC=0,_VS_FLG=1,_MEM_FLG=0
1120 _PRT_CRSR$="",_PRT_MARG=8,_PRT_LN=0,_V_LN=0,_SL=1
1130 _FLD_MX=0,_SORTKEY=0,_REC_FLG=0,_SV_FN=0,_SC_FN=0,_NUM_KEYS=0,_OLD_FOCUS=0,_USE_ARRAY=0,_NO_FMT=0,_ODB=0
1131 DIM _ALT_PFX$[0:15]
1140 _RN=1,_LST_RN=1
1150 _LNK_PFX$="_MN_.",_MAN_PFX$=""
1160 _PROGCNT=0,_PROGMSG$=""
1170 DIM _FOCUS[0:6]; _FOCUS[0]=0,_FOCUS[1]=10,_FOCUS[2]=17,_FOCUS[3]=16,_FOCUS[4]=-6,_FOCUS[5]=14,_FOCUS[6]=13 ! query list,searchbox,maintenance,query,print,keylist

1190 RETURN 
1200 ! ^100 - Process the data in the query header record
1210 PROCESS_HDR_REC:
1220 READ (%SCR_LIB,KEY=SCRN_K$+"0000")IOL=13010
1230 GOSUB GET_HELP
1231 IF OBJ_DSP$<>"" THEN GOSUB INIT_PROCEDURE
1240 _SORTKEY=%NOMAD_QUERY_KNO; IF _SORTKEY=0 THEN _SORTKEY=MAX(NUM(OBJ_VAL$,ERR=*NEXT),0)
1250 _AUTOTAB=OBJ_TAB
1260 _STAT_COLS=NUM(OBJ_TAG$,ERR=*NEXT)
1270 _X$=OBJ_CLASS$; GOSUB CHANGE_FLDX; _RET_VAL$=_X$
1280 IF MID(OBJ_TXT$,1,1)<>"=" THEN _MAIN_TITLE$=OBJ_TXT$ ELSE _MAIN_TITLE$=EVS(OBJ_TXT$(2))
1290 _PRT_TITLE$=_MAIN_TITLE$
1300 IF POS("*FILE=="=UCS(OBJ_NME$))=1 THEN _PRT_SUBTITLE$=OBJ_NME$(1,6)+EVS(OBJ_NME$(8)) ELSE IF OBJ_NME$(1,1)="=" THEN _PRT_SUBTITLE$=EVS(OBJ_NME$(2)) ELSE _PRT_SUBTITLE$=OBJ_NME$
1310 IF MID(OBJ_MSG$,1,1)<>"=" THEN _MESS$=OBJ_MSG$ ELSE _MESS$=EVS(OBJ_MSG$(2))
1320 _PRT_COLOR$=OBJ_COLOR$,_PRT_FONT$=OBJ_FONT$
1321 IF POS("R"=OBJ_NULL$)<>0 THEN _RD_REC=1
1322 IF POS("P"=OBJ_NULL$)<>0 THEN _NO_PRT=1
1323 IF POS("K"=OBJ_NULL$)<>0 THEN _NO_SRT=1
1324 IF POS("V"=OBJ_NULL$)<>0 THEN _NO_RET=1
1325 _P=POS("CUL":OBJ_NULL$); IF _P=0 THEN _ST_CASE$="C" ELSE _ST_CASE$=OBJ_NULL$(_P,1)
1326 IF POS("S"=OBJ_NULL$)<>0 THEN _VS_FLG=0
1327 IF POS("M"=OBJ_NULL$)<>0 THEN _MEM_FLG=1
1328 IF %NOMAD_QUERY_ODB_IGNORE=0 AND POS("O"=OBJ_NULL$)<>0 THEN _ODB=1
1330 RETURN 
1400 ! ^100 - Process the file name and open it with/without dd iolist
1410 OPEN_FILE:
1420 IF POS("*FILE="=UCS(OBJ_NME$))=1 THEN OBJ_DEF$=OBJ_NME$(7),_MAN_PFX$="_MN_."; GOTO NO_DD
1421 IF _ODB AND OBJ_NME$(1,1)="=" THEN OBJ_NME$=EVS(OBJ_NME$(2))
1430 IF NUM(OBJ_IDX$)>0 THEN GOTO NO_DD
1440 _NO_DICT=0
1450 IF POS("="=OBJ_DEF$)=1 THEN OBJ_DEF$=EVS(OBJ_DEF$(2))
1452 IF _ODB THEN _FILENAME$="[odb]"+OBJ_DEF$+";"+OBJ_NME$+";KEY="+OBJ_GRP$+OBJ_TBL$ ELSE _FILENAME$=OBJ_DEF$
1453 GOSUB CHECK_ODB
1454 IF _MEM_FLG=0 THEN _IN_FN=HFN; OPEN (_IN_FN,IOL=*,REC=_MN_$,ERR=OPEN_ERR)_FILENAME$
1461 RETURN 
1470 NO_DD: _NO_DICT=1
1480 IF POS("="=OBJ_DEF$)=1 THEN OBJ_DEF$=EVS(OBJ_DEF$(2))
1482 _FILENAME$=OBJ_DEF$
1483 IF _ODB=0 THEN GOSUB CHECK_ODB
1490 IF _MEM_FLG=0 THEN _IN_FN=HFN; IF _RD_REC=0 THEN OPEN (_IN_FN,IOL=13020,REC=_MN_$,ERR=OPEN_ERR)_FILENAME$ ELSE _IO$=CPL("IOLIST _MN_.FIELD$[1]"); OPEN (_IN_FN,IOL=_IO$,ERR=OPEN_ERR)_FILENAME$
1491 IF _MEM_FLG THEN _MAN_KEY$="_PK$" ELSE _MAN_KEY$="_K0$"
1500 RETURN 
1510 OPEN_ERR:
1511 IF ERR=15 THEN _M$=SEP+MSG(-1) ELSE _M$=""
1512 MSGBOX _MSG_FILOPNERRQ$+" "+_FILENAME$+SEP+MSG(ERR)+_M$+SEP+SEP+"["+STR(TCB(5))+"]",_ERROR$,"!"; EXITTO WRAPUP
1520 ! 
1530 CHECK_ODB:
1540 _DB_FN=0,_X=GFN; OPEN (_X,ERR=OPEN_ERR)_FILENAME$
1550 IF _ODB=0 THEN IF UCS(MID(PTH(_X),1,5))="[ODB]" THEN _ODB=1,_MEM_FLG=1,_FILENAME$=PTH(_X)
1560 IF _ODB THEN _DB_FN=_X ELSE CLOSE (_X)
1570 RETURN 
1600 ! ^100 - Set up the fonts and colors
1610 SETUP_FONTS_AND_COLORS:
1620 IF _PRT_FONT$="" THEN _PRT_FONT$=%NOMAD_PNL_DEF_FONT$; IF _PRT_FONT$="" THEN _PRTR_FONT$="",_PRTR_ATTR$="",_LBL_FONT$=""; GOTO 1650
1621 _PRT_FONT$=STP(_PRT_FONT$,3,QUO)
1630 _P=POS(","=_PRT_FONT$,1,2); IF _P THEN _TMP_FONT$=_PRT_FONT$(_P+1),_TMP_FONT$=STP(_TMP_FONT$,3,"S"); _TMP_FONT$=STP(_TMP_FONT$,3,"R"),_TMP_FONT$=STP(_TMP_FONT$,3,"C"); _PRT_FONT$=_PRT_FONT$(1,_P-1)+TBL(_TMP_FONT$="",","+_TMP_FONT$,"") ! Strip out 'S','C',& 'R' attributes
1640 _PRTR_FONT$=_PRT_FONT$(1,POS(","=_PRT_FONT$)-1),_P=POS(","=_PRT_FONT$,1,2); IF _P=0 THEN _PRTR_ATTR$="" ELSE _PRTR_ATTR$=_PRT_FONT$(_P+1)
1650 IF POS("&"=_PRTR_ATTR$)=0 THEN _LBL_FONT$=_PRTR_FONT$+",1,"+_PRTR_ATTR$+"&" ELSE _LBL_FONT$=_PRT_FONT$,_PRTR_ATTR$=STP(_PRTR_ATTR$,3,"&"),_PRT_FONT$=STP(_PRT_FONT$,3,"&"),_PRT_FONT$=STP(_PRT_FONT$,1,",")
1660 IF _PRT_COLOR$="" THEN _PRT_COLOR$=%NOMAD_PNL_DEF_COLOUR$; IF _PRT_COLOR$="" THEN _PRT_COLOR$="000F"
1670 _QRY_COLOR$=$000F$,_TTL_CLR$='BLUE'
1680 DIM _CLR$[0:1],_CRS$[0:1]
1690 _CLR$[0]='BLACK'+'_WHITE',_CRS$[0]='BLUE'+'_WHITE'; IF POS("="=OBJ_STS$)=0 OR %NOMAD_QUERY_NO_GRAY=1 THEN _GW=0,_CLR$[1]=_CLR$[0],_CRS$[1]=_CRS$[0] ELSE _GW=1,_CLR$[1]='MODE'(_QRY_COLOR$),_CRS$[1]='MODE'($040F$)
1700 RETURN 
1800 ! ^100 - Set up the init display variables and arrays
1810 PROCESS_SCR_LIB:
1820 _QROW=5,_MIN_W=42,_MIN_H=10,_FORMULA=0,_FORMULA_CNT=0
1821 IF _NO_SRT THEN _QROW=3 ELSE _QROW=5
1830 OBJ_W=OBJ_W-2
1840 DIM _COL_TBL[100],_FORMAT_PGM$[100],_NME_TBL$[100],_FLD_NME$[100],_K$[_LNE_MAX],_K0$[_LNE_MAX]
1841 DIM OBJ_NME$[100],OBJ_TXT$[100],OBJ_TIP$[100],OBJ_VAL$[100],OBJ_DEF$[100],OBJ_QRY$[100],OBJ_STS$[100]
1842 DIM _COL_KEY$[100],_KEY_WID[100]
1850 _X=1,_TOT_WID=-1,_TRU_W=OBJ_W,_TRU_H=OBJ_H,_COL_OFS=1,_COL_CUR=1,_STAT_W=0
1860 RD_SCRLIB:READ (%SCR_LIB,KEY=SCRN_K$+STR(_X:"0000"),DOM=DONE_SCRLIB)IOL=13010
1861 IF OBJ_TYPE$="U" THEN OBJ_NME$=OBJ_IDX$
1863 IF POS("="=OBJ_TXT$)=1 THEN OBJ_TXT$=EVS(OBJ_TXT$(2))
1864 GOSUB GET_PREFIX ! make sure prefix is in obj_tip$
1865 OBJ_NME$[_X]=OBJ_NME$,OBJ_TXT$[_X]=OBJ_TXT$,OBJ_VAL$[_X]=OBJ_VAL$
1866 OBJ_TIP$[_X]=OBJ_TIP$,OBJ_QRY$[_X]=OBJ_QRY$
1867 IF MID(OBJ_DEF$,1,1)="=" THEN OBJ_DEF$=EVS(OBJ_DEF$(2)) END_IF ; OBJ_DEF$[_X]=OBJ_DEF$
1868 IF _MEM_FLG THEN OBJ_STS$[_X]=OBJ_STS$; IF OBJ_VAL$="S" THEN _KEY_WID[_X]=NUM(OBJ_FCS$); IF OBJ_DSP$<>"" THEN IF _NO_DICT=0 THEN _COL_KEY$[_X]=OBJ_DSP$ ELSE _X$=OBJ_DSP$; GOSUB CHANGE_FLDX; _COL_KEY$[_X]=_X$
1869 IF POS("Fld#"=OBJ_NME$)=1 THEN _X$=OBJ_NME$(5)+"("; _O=POS("("=_X$),_X1$=_X$(_O); _X$="FIELD$["+_X$(1,_O-1)+"]"+_X1$(1,LEN(_X1$)-1); IF POS("FIELD$[0]"=_X$)=1 THEN _TMP$=UCS(_X$),_X$=_MAN_KEY$+_X$(10) ELSE _X$=OBJ_TIP$+"."+_X$,_TMP$=UCS(_X$) END_IF ; GOSUB CHANGE_FIELDX; _FLD_NME$[_X]=_TMP$; IF OBJ_VAL$="N" THEN _X$="NUM("+_X$+")" END_IF ; GOTO 1873
1870 IF POS("Formula:"=OBJ_NME$)=1 THEN _X$=OBJ_NME$(9); GOSUB CHANGE_FLDX; GOTO 1873
1871 _X$=OBJ_TIP$+"."+OBJ_NME$; IF OBJ_VAL$="S" THEN _X$+="$"
1873 _NME_TBL$[_X]=_X$
1876 _COL_TBL[_X]=OBJ_W,_TOT_WID=_TOT_WID+OBJ_W+1; IF _X<=_STAT_COLS AND _TOT_WID<_TRU_W THEN _STAT_W=_TOT_WID
1880 _FORMAT_PGM$[_X]=OBJ_OUT$
1890 _X=_X+1
1900 IF OBJ_TYPE$="U" THEN OBJ_NME$=OBJ_IDX$ ! User DD
1910 IF POS("FLD#"=UCS(OBJ_NME$))<>1 THEN GOTO RD_SCRLIB
1920 _X$=OBJ_NME$(5)+"(",_FLD_MX=MAX(_FLD_MX,NUM(_X$(1,POS("("=_X$)-1)))
1930 GOTO RD_SCRLIB
1940 DONE_SCRLIB: _TOT_COL=_X-1
1950 IF _TOT_WID>_TRU_W THEN _TRU_H=_TRU_H-1
1960 _NUM_LN=_TRU_H-_QROW-1
1970 RETURN 
2000 ! ^100 -
2010 GET_SELECTION_CRITERIA:
2020 _RCD_PFX$="",_RCD_MIN$="",_RCD_MAX$="",_RCD_TST$="",_R_MIN$="",_R_MAX$="",_R_TST$=""
2030 READ (%SCR_LIB,KEY=SCRN_K$+"SLCT",DOM=*RETURN)IOL=13010
2040 IF OBJ_DEF$<>"" THEN _X$=OBJ_DEF$; GOSUB CNV_EXPR; _RCD_PFX$=_X$
2050 IF OBJ_TXT$<>"" THEN _X$=OBJ_TXT$; GOSUB CNV_EXPR; _RCD_MIN$=_X$
2060 IF OBJ_VAL$<>"" THEN _X$=OBJ_VAL$; GOSUB CNV_EXPR; _RCD_MAX$=_X$
2070 IF OBJ_SEL$<>"" THEN _RCD_TST$=OBJ_SEL$; _X$=_RCD_TST$(2); GOSUB CHANGE_FLDX; _RCD_TST$=_RCD_TST$(1,1)+_X$
2080 _R_MIN$=_RCD_PFX$+_RCD_MIN$,_R_MAX$=_RCD_PFX$+_RCD_MAX$; _R_TST$=_RCD_PFX$+_RCD_MIN$+_RCD_MAX$+_RCD_TST$
2081 IF _MEM_FLG THEN _M_TST$=_RCD_TST$,_R_TST$="",_RCD_TST$=""
2082 IF _MEM_FLG AND _MEMKEY>0 AND POS("S"=OBJ_NULL$)=0 THEN _TEST_PRIME=1 ELSE _TEST_PRIME=0
2090 RETURN 
2100 ! ^100 - Get file info
2110 GET_FILE_INFO:
2120 IF _MEM_FLG THEN GOSUB LOAD_MEMORY ELSE _X$=FIB(_IN_FN),_NUM_REC=DEC($00$+_X$(1,3)),_TOT_REC=_NUM_REC
2130 IF _VS_FLG=0 AND %NOMAD_QUERY_SBAR_MAX<>0 AND _NUM_REC>=%NOMAD_QUERY_SBAR_MAX THEN _VSBAR=0 ELSE _VSBAR=1
2140 GOSUB GET_RECORD_RANGE
2280 IF _NUM_REC=0 THEN GOTO NO_DATA
2290 RETURN 
2300 NO_DATA:! No data to query
2310 IF _MAINT$="N" THEN MSGBOX _MSG_NO_DATA_Q$,_FYI$,"!"; GOTO WRAPUP ! ! previously: IF MAINT$="N" OR TOT_REC>0 ...
2320 MSGBOX _MSG_NO_DATA_Q$+SEP+_MSG_DO_MAINT$,_FYI$,"YESNO",_YESNO$
2330 IF _YESNO$="NO" THEN EXITTO WRAPUP
2340 GOSUB FILE_MAINTENANCE
2350 RETURN 
2400 ! ^100 - Convert Pfx/Max/Min expressions
2410 CNV_EXPR:
2420 IF _X$="" THEN RETURN 
2430 IF _X$(1,1)="=" THEN _X$=EVS(_X$(2),ERR=CNVEXP_ERR)
2440 RETURN 
2450 CNVEXP_ERR: MSGBOX _MSG_CNVEXP_ERR$+SEP+_X$,_MSG_QRY_RNGINI$,"!"; _X$=""
2460 RETURN 
2500 ! ^100 - Open the cross reference files
2510 OPEN_XREF_FILES:
2520 _KX$="F999",_NXREF=0
2530 READ (%SCR_LIB,KEY=SCRN_K$+_KX$,DOM=*NEXT); GOTO OPNX1
2540 _KX$=KEP(%SCR_LIB,END=*RETURN); IF _KX$(13,1)<>"F" THEN GOTO *RETURN
2550 OPNX1: _NXREF=NUM(_KX$(14)); DIM _XFN[_NXREF],_XKEY$[_NXREF],_XKNO[_NXREF],_XREC[_NXREF],_XREC$[_NXREF],_XFIL$[_NXREF]
2560 FOR _NXR=1 TO _NXREF
2570 READ (%SCR_LIB,KEY=SCRN_K$+"F"+STR(_NXR:"000"))IOL=13010
2580 IF OBJ_TIP$="" THEN OBJ_TIP$=OBJ_MSG$,OBJ_MSG$=""; GOSUB FIX_SCRLIB
2590 _LNK_PFX$=_LNK_PFX$+PAD(OBJ_TIP$+".",5)
2600 IF POS("*File="=OBJ_NME$)=1 THEN _MAN_PFX$=_MAN_PFX$+PAD(OBJ_TIP$+".",5)
2601 IF POS("R"=OBJ_NULL$) THEN _XREC[_NXR]=1
2610 _XFN[_NXR]=HFN
2620 IF POS("="=OBJ_TXT$)=1 THEN OBJ_TXT$=EVS(OBJ_TXT$(2))
2621 IF POS("O"=OBJ_NULL$)>0 THEN OBJ_TXT$="[odb]"+OBJ_TXT$+";"; IF OBJ_NME$(1,1)="=" THEN OBJ_NME$=EVS(OBJ_NME$(2)) END_IF ; OBJ_TXT$+=OBJ_NME$+";KEY="+OBJ_GRP$+OBJ_TBL$
2630 IF POS("*File="=OBJ_NME$)<>1 THEN OPEN (_XFN[_NXR],IOL=*,REC=VIS(OBJ_TIP$),ERR=*NEXT)OBJ_TXT$; GOTO 2650 ELSE IF _XREC[_NXR]=0 THEN OPEN (_XFN[_NXR],IOL=13020,REC=VIS(OBJ_TIP$),ERR=*NEXT)OBJ_TXT$; GOTO 2650 ELSE _IO$=CPL("IOLIST "+OBJ_TIP$+".FIELD$[1]"); OPEN (_XFN[_NXR],IOL=_IO$,ERR=*NEXT)OBJ_TXT$; GOTO 2650
2640 _XFN[_NXR]=0; MSGBOX _MSG_FILFNDERRX$+SEP+_MSG_FILE$+" "+OBJ_NME$+SEP+_MSG_PATH$+" "+OBJ_TXT$+SEP+MSG(ERR),_ERROR$; CONTINUE ! Xref error
2650 _X$=OBJ_DEF$; GOSUB CHANGE_FLDX; _XKEY$[_NXR]=_X$
2660 _XKNO[_NXR]=NUM(OBJ_VAL$)
2661 IF _MEM_FLG THEN _XREC$[_NXR]=OBJ_TIP$,_XFIL$[_NXR]=OBJ_TXT$
2670 NEXT _NXR
2680 RETURN 
2700 ! ^100 - Load the sort key selection box
2710 LOAD_SORT_KEYS:
2711 DIM _KEYSTR$[0:MAX(16,_TOT_COL)],_KEYMSK$[0:MAX(16,_TOT_COL)]
2712 IF _MEM_FLG THEN DIM _KEYDEF$[0:_TOT_COL],_COL_FMT$[0:_TOT_COL],_ORDER[0:_TOT_COL]; DIM _COL_TOT[1:_TOT_COL],_COL_MIN[1:_TOT_COL],_COL_MAX$[1:_TOT_COL],_COL_TIP$[1:_TOT_COL]
2720 IF _ODB THEN GOSUB ODBC_SORT_KEYS; GOTO LSK4
2722 _PFX_LEN=MAX(LEN(_R_MIN$),LEN(_R_MAX$)),_PKEY_LEN=0
2726 IF _MEM_FLG THEN _IN_FN=HFN; IF _NO_DICT=0 THEN OPEN (_IN_FN,IOL=*,REC=_MN_$,ERR=OPEN_ERR)_FILENAME$ ELSE IF _RD_REC=0 THEN OPEN (_IN_FN,IOL=13020,REC=_MN_$,ERR=OPEN_ERR)_FILENAME$ ELSE _IO$=CPL("IOLIST _MN_.FIELD$[1]"); OPEN (_IN_FN,IOL=_IO$,ERR=OPEN_ERR)_FILENAME$
2730 _X$=FIB(_IN_FN),_EXKEY=DEC(_X$(11,1)),_X$=_X$(85,384)
2740 IF _EXKEY=0 THEN GOTO LSK1
2742 IF _NO_DICT=0 THEN _DTA_IOL$=IOL(_IN_FN),_KEY_IOL$=IOL(_IN_FN:KEY,ERR=*NEXT)
2750 _GETEX=1,_KEYNUM=0,_KSEG=1,_KEYOFS=0,_KEYLEN=_EXKEY,_KEYSEQ$="",_FLDNUM=0,_FLD=0,_SV_EX$="0",_SV_FLG=0
2751 _KEYMSK$[0]=DIM(_EXKEY,$00$)
2760 SEG_NM:GOSUB SEGMENT_NAME
2770 IF _GETEX=0 THEN IF _EXFLG THEN _I=1,_X$=_X$(5); GOTO LSK2 ELSE GOTO LSK1
2771 IF _KSEG=1 THEN _SV_EX$=DDF_NAME$,_SV_FLD=_FLDNUM
2780 _KSEG=_KSEG+1
2790 GOTO SEG_NM
2800 LSK1: _I=0
2810 LSK2: _SV_KNUM=-1,_KSEG=1
2820 LSK3:
2821 IF MID(_X$,5,1)=$FE$ THEN _KDAT$=_X$(1,8),_X$=_X$(9) ELSE _KDAT$=_X$(1,4),_X$=_X$(5)
2830 IF _KDAT$(1,1)=$FF$ THEN GOTO LSK4
2840 _KEYNUM=DEC(AND(_KDAT$(1,1),$0F$)); IF _KEYNUM=_SV_KNUM THEN _KSEG=_KSEG+1 ELSE _SV_KNUM=_KEYNUM,_KSEG=1,_PKEY_LEN=0
2841 IF _MEM_FLG AND _KEYNUM>0 THEN IF _KEYNUM<_MEMKEY THEN GOTO 2910 ELSE IF _KEYNUM>_MEMKEY THEN GOTO LSK4
2850 _FLDNUM=DEC($00$+_KDAT$(2,1)); IF _FLDNUM=255 THEN _FLDNUM=0
2860 _KEYOFS=16*DEC($00$+AND($F0$,_KDAT$(1,1)))+DEC($00$+_KDAT$(3,1)); IF _KEYOFS=0 THEN _KEYOFS$="(" ELSE _KEYOFS$="("+STR(_KEYOFS+1)+","
2870 _KEYLEN=DEC(_KDAT$(4,1))
2880 IF _KEYLEN>0 THEN _KEYSEQ$="",_KMSK$=DIM(_KEYLEN,$00$) ELSE _KEYLEN=128+_KEYLEN,_KEYSEQ$="/d",_KMSK$=DIM(_KEYLEN,$FF$)
2890 _KEYLEN$=STR(_KEYLEN)+")"
2892 _KEYMSK$[_KEYNUM]+=_KMSK$
2900 GOSUB SEGMENT_NAME
2910 _I=_I+1; GOTO LSK3
2920 LSK4:
2921 _NUM_KEYS=_KEYNUM+1
2922 IF _MEM_FLG THEN _M_EXFLG=_EXFLG,_EXFLG=0
2923 IF _MEM_FLG AND _ODB=0 THEN _KEYSTR$[_MEMKEY]+=" ("+_MSG_DEFAULT$+")",_PK_LEN=LEN(_KEYMSK$[0]); IF _MEMKEY>0 THEN _KEYSTR$[0]=_KEYSTR$[_MEMKEY],_KEYSTR$[_MEMKEY]=""; _KEYMSK$[0]=_KEYMSK$[_MEMKEY]+_KEYMSK$[0],_KEYMSK$[_MEMKEY]="" END_IF ; GOSUB LOAD_COLUMN_KEYS; CLOSE (_IN_FN)
2925 IF _NO_SRT=1 THEN GOTO 2952
2930 DROP_BOX LOAD 13,_KEYSTR${ALL}
2940 DROP_BOX WRITE 13,_SORTKEY+1
2950 IF _NUM_KEYS=1 THEN DROP_BOX DISABLE 13
2952 IF _MEM_FLG=0 AND _RCD_PFX$+_RCD_MIN$+_RCD_MAX$<>"" AND _NUM_KEYS>1 THEN FOR _I=1 TO _KEYNUM; IF _ALT_PFX$[0]<>_ALT_PFX$[_I] THEN _ALT_PFX$[_I]="" END_IF ; NEXT _I
2953 _KEYLEN=0,_KEYADJ=0,_K0_LEN=0
2960 RETURN 
3000 ! ^100
3010 SEGMENT_NAME:
3020 _FLD_NAME$=_MSG_FLD$+STR(_FLDNUM); IF _FLDNUM=0 THEN IF _EXKEY=0 THEN _FLDNUM=1 ELSE _FLD_NAME$=_MSG_PRIME_KEY$
3030 _KEYNUM$=STR(_KEYNUM+1)
3031 IF _NO_DICT THEN _GETEX=0; IF _EXKEY THEN _EXFLG=1; GOTO INI_SLOOP ELSE GOTO INI_SLOOP
3040 IF _EXKEY=0 THEN _IDX=1,_INC=1 ELSE _IDX=-1,_INC=-1
3050 RD_DICT:DICTIONARY READ (_IN_FN,IND=_IDX,ERR=DONE_DICT,END=DONE_DICT)IOL=13030
3060 IF DDF_KEYDEF$="" THEN GOTO RD_NXT_DICT
3070 _KEYCHK$=","+DDF_KEYDEF$; _P=POS(","+_KEYNUM$+":"=_KEYCHK$); IF _P=0 THEN GOTO RD_NXT_DICT
3080 _KX$=_KEYCHK$(_P+1),_P1=POS(":"=_KX$),_P2=POS(":"=_KX$,1,2),_KX=NUM(_KX$(_P1+1,_P2-_P1-1)); IF _KX=_KSEG THEN GOTO CHK_DSC
3090 RD_NXT_DICT: _IDX=_IDX+_INC; GOTO RD_DICT
3100 DONE_DICT:IF _INC=1 THEN GOTO INI_SLOOP ELSE IF _GETEX=0 THEN _INC=1,_IDX=1; GOTO RD_DICT ELSE _GETEX=0,_EXFLG=_IDX+1; GOTO *RETURN
3110 CHK_DSC:IF DDF_DESC$<>"" THEN _FLD_NAME$=DDF_DESC$ ELSE _FLD_NAME$=DDF_NAME$
3111 IF MID(_FLD_NAME$,1,1)="=" THEN _FLD_NAME$=EVS(_FLD_NAME$(2),ERR=*NEXT)
3120 _P=POS(","=_KX$); IF _P<>0 THEN _KX$=_KX$(1,_P-1)
3130 _P1=POS(":"=_KX$,1,3); IF _P1=0 THEN _KEYOFS$="",_KEYLEN$=""; GOTO INI_SLOOP
3140 _P2=POS(":"=_KX$,1,4); IF _P2=0 THEN _KEYOFS$="(1,",_KEYLEN$=STR(NUM(_KX$(_P1+1)))+")" ELSE _KEYOFS$="("+STR(NUM(_KX$(_P2+1)))+",",_KEYLEN$=STR(NUM(_KX$(_P1+1,_P2-_P1-1)))+")"
3150 INI_SLOOP: _X=1
3160 SLOOP:
3170 IF _X>_TOT_COL THEN GOTO KEYSTR
3180 IF OBJ_TIP$[_X]<>"_MN_" THEN GOTO SLOOP_BACK
3190 IF POS("Fld#"=OBJ_NME$[_X])<>1 THEN GOTO GET_FLD_NAME
3200 _XX$=OBJ_NME$[_X](5)
3210 _P=POS("("=_XX$); IF _P<>0 THEN _XX$=_XX$(1,_P-1)
3220 IF _FLDNUM<>NUM(_XX$) THEN GOTO SLOOP_BACK ! check match for Fld# format
3230 IF OBJ_TXT$[_X]<>"" THEN _FLD_NAME$=OBJ_TXT$[_X]
3240 GOTO KEYSTR
3250 GET_FLD_NAME:IF OBJ_NME$[_X]=DDF_NAME$ THEN IF OBJ_TXT$[_X]="" THEN _FLD_NAME$=OBJ_NME$[_X]; GOTO KEYSTR ELSE _FLD_NAME$=OBJ_TXT$[_X]; GOTO KEYSTR ! matched regular format
3260 SLOOP_BACK: _X=_X+1; GOTO SLOOP
3270 KEYSTR:
3272 IF _KEYSTR$[_KEYNUM]<>"" THEN _KEYSTR$[_KEYNUM]=_KEYSTR$[_KEYNUM]+" + "
3280 _FLD_NAME$=_FLD_NAME$+_KEYOFS$+_KEYLEN$+_KEYSEQ$
3290 _KEYSTR$[_KEYNUM]=_KEYSTR$[_KEYNUM]+_FLD_NAME$
3291 IF _MEM_FLG THEN RETURN 
3300 IF _PKEY_LEN>=_PFX_LEN THEN RETURN 
3301 IF _EXKEY AND _SV_EX$=DDF_NAME$ THEN _FLDNUM=_SV_FLD
3310 _ALT_PFX$[_KEYNUM]+=_KEYSEQ$+STR(_FLDNUM)+":"+STR(_KEYOFS)+":"
3320 IF _IDX<0 THEN _KEYLEN=NUM(DDF_LEN$)
3330 _PKEY_LEN+=_KEYLEN,_KEYOFS+=_KEYLEN
3340 IF _PKEY_LEN<_PFX_LEN THEN _ALT_PFX$[_KEYNUM]+=STR(_KEYLEN)+"+"
3350 RETURN 
3400 ! ^100 - Dimension xxx.FIELDS$[] arrays for manual files
3410 DIM_MANFILE_FIELDS:
3420 MLOOP:IF _MAN_PFX$="" THEN GOTO *RETURN
3430 IF _FLD_MX>0 THEN _DIM1=1 ELSE _DIM1=0
3440 _C$="DIM "+STP(_MAN_PFX$(1,5),1)+"FIELD$[_DIM1:_FLD_MX]"; IF _MEM_FLG THEN _C$+=","+STP(_MAN_PFX$(1,5),1)+"FIELD[_DIM1:_FLD_MX]"
3441 EXECUTE _C$; _MAN_PFX$=_MAN_PFX$(6); GOTO MLOOP
3450 RETURN 
3500 ! ^100 Process selection criteria
3510 GET_RECORD_RANGE:
3511 GOSUB CHECK_DIVISION ! gui
3520 _NUM_REC=_TOT_REC
3521 IF _MEM_FLG=0 THEN _START.CTL'LEN=LEN(_KEYMSK$[_SORTKEY]) ELSE _START.CTL'LEN=LEN(_KEYMSK$[_COLKEY])
3530 IF _VSBAR THEN _BSE_RNO=0,_MAX_RNO=_NUM_REC,_LO_RNO=0,_HI_RNO=_NUM_REC ELSE _KEF$=KEF(_IN_FN,KNO=_SORTKEY),_KEL$=KEL(_IN_FN,KNO=_SORTKEY) ! defaults
3540 IF STP(_R_MIN$,1,$FF$)="" OR _ALT_PFX$[_SORTKEY]="" THEN GOTO 3590
3550 _X$=MID(_R_MIN$,1,LEN(_KEYMSK$[_SORTKEY]))
3560 READ (_IN_FN,KEY=_X$,KNO=_SORTKEY,DOM=*NEXT)*; GOTO 3580
3570 _X$=KEY(_IN_FN,KNO=_SORTKEY,END=NO_DATA); GOTO 3560
3580 IF _VSBAR THEN _LO_RNO=RNO(_IN_FN,KEY=_X$,KNO=_SORTKEY)-1 ELSE _KEF$=KEC(_IN_FN,KNO=_SORTKEY)
3600 IF STP(_R_MAX$,1,$FF$)="" OR _ALT_PFX$[_SORTKEY]="" THEN GOTO 3650
3610 _X$=MID(_R_MAX$,1,LEN(_KEYMSK$[_SORTKEY]))
3620 READ (_IN_FN,KEY=_X$,KNO=_SORTKEY,DOM=3630)*; GOTO 3640
3630 _HI_RNO=_NUM_REC,_X$=KEY(_IN_FN,KNO=_SORTKEY,END=3650); GOTO 3620
3640 IF _VSBAR THEN _HI_RNO=RNO(_IN_FN,KEY=_X$,KNO=_SORTKEY)-1 ELSE _KEL$=KEP(_IN_FN,KNO=_SORTKEY)
3650 IF _VSBAR THEN _NUM_REC=_HI_RNO-_LO_RNO
3660 _ALTSEL=0; IF _R_TST$<>"" THEN _ALTSEL=_SORTKEY; IF _SORTKEY=0 AND _RCD_TST$<>"" THEN _ALTSEL=-1
3670 IF _VSBAR=1 THEN IF _ALTSEL<1 OR _ALT_PFX$[_SORTKEY]<>"" THEN _BSE_RNO=_LO_RNO,_MAX_RNO=_HI_RNO ELSE _BSE_RNO=0,_MAX_RNO=_TOT_REC END_IF ; RETURN 
3680 ! 
3690 _SCROLL_LEN=MAX(LEN(_KEF$),LEN(_KEL$))
3700 _KEF$=PAD(_KEF$,_SCROLL_LEN+2,$00$),_KEL$=PAD(_KEL$,_SCROLL_LEN+2,$00$)
3710 _SCROLL_OFS=0
3720 FOR _SCROLL_IDX=1 TO _SCROLL_LEN
3730 IF _KEF$(_SCROLL_IDX,1)<>_KEL$(_SCROLL_IDX,1) THEN EXITTO 3760
3740 _SCROLL_OFS=_SCROLL_IDX
3750 NEXT _SCROLL_IDX
3760 _SCROLL_OFS+=1,_SCROLL_PFX$=_KEF$(1,_SCROLL_OFS-1)
3770 _SCROLL_1=DEC($00$+_KEF$(_SCROLL_OFS,2)),_SCROLL_2=DEC($00$+_KEL$(_SCROLL_OFS,2)),_SCROLL_RANGE=_SCROLL_2-_SCROLL_1+1
3780 RETURN 
3800 ! ^100
3810 CHECK_DESCENDING:
3820 IF _R_MIN$+_R_MAX$="" THEN RETURN 
3830 _M1$=PAD(_R_MIN$,LEN(_KEYMSK$[0]),$00$)
3840 _M2$=PAD(_R_MAX$,LEN(_KEYMSK$[0]),$00$)
3850 IF _R_MIN$<>"" AND _R_MAX$<>"" THEN IF XOR(_M1$,_KEYMSK$[0])>XOR(_M2$,_KEYMSK$[0]) THEN _SV_MIN$=_R_MIN$,_R_MIN$=_R_MAX$,_R_MAX$=_SV_MIN$
3860 _XMIN$=XOR(_R_MIN$,PAD(_KEYMSK$[0],LEN(_R_MIN$))); _XMAX$=XOR(_R_MAX$,PAD(_KEYMSK$[0],LEN(_R_MAX$)))+$FF$
3870 IF (_R_MIN$="" AND MID(_KEYMSK$[0],LEN(_KEYMSK$[0]),1)=$FF$) OR (_R_MIN$<>"" AND MID(_KEYMSK$[0],LEN(_R_MIN$),1)=$FF$) THEN _R_MIN$+=$FF$
3880 IF (_R_MAX$="" AND MID(_KEYMSK$[0],LEN(_KEYMSK$[0]),1)<>$FF$) OR (_R_MAX$<>"" AND MID(_KEYMSK$[0],LEN(_R_MAX$),1)<>$FF$) THEN _R_MAX$+=$FF$
3885 IF _MEM_FLG THEN _M_MIN$=_R_MIN$,_R_MIN$="",_RCD_MIN$=""; _M_MAX$=_R_MAX$,_R_MAX$="",_RCD_MAX$=""
3890 RETURN 
4000 ! ^10 - Tab between spots (area 0=list, 1=search, 2=maintenance, 3=query, 4=print, 5=sortkey)
4020 TAB_IT:
4030 _FOCUS_AREA=_FOCUS_AREA+1
4031 IF _FOCUS_AREA=2 AND _MEM_FLG=0 THEN _FOCUS_AREA=_FOCUS_AREA+1
4040 IF _FOCUS_AREA=3 AND _MAINT$="N" THEN _FOCUS_AREA=_FOCUS_AREA+1
4050 IF _FOCUS_AREA=4 AND _QRYBTN$="N" THEN _FOCUS_AREA=_FOCUS_AREA+1
4051 IF _FOCUS_AREA=5 AND _NO_PRT=1 THEN _FOCUS_AREA=_FOCUS_AREA+1
4060 IF _FOCUS_AREA=7 THEN _FOCUS_AREA=0
4070 GOSUB RESET_FOCUS
4080 RETURN 
4100 ! ^100
4110 RESET_FOCUS:
4120 SET_FOCUS _FOCUS[_FOCUS_AREA],ERR=*NEXT; GOTO 4140
4130 _FOCUS_AREA=0; GOTO 4120
4140 IF (_OLD_FOCUS=0 AND _FOCUS_AREA=0) OR (_OLD_FOCUS<>0 AND _FOCUS_AREA<>0) THEN _OLD_FOCUS=_FOCUS_AREA ELSE GOSUB LN_REDRAW
4150 RETURN 
4200 ! ^100 - Position file
4210 POS_FILE:
4220 MULTI_LINE READ 10,_K$,_X$; IF ARG_1$<>"" THEN _K$=ARG_1$,ARG_1$=""
4222 IF _ST_CASE$="U" THEN _K$=UCS(_K$) ELSE IF _ST_CASE$="L" THEN _K$=LCS(_K$)
4230 _FOCUS_AREA=1,_CMP_KEY$=""
4240 IF _X$=$0D$ THEN GOTO RET_SEL
4242 IF _MEM_FLG=0 THEN _KEYMSK$=_KEYMSK$[_SORTKEY] ELSE _KEYMSK$=_KEYMSK$[_COLKEY]; IF _ORDER[_COLKEY]=2 THEN IF _COLKEY=0 THEN _KEYMSK$=DIM(LEN(_KEYMSK$),$FF$) ELSE _KEYMSK$=DIM(LEN(_KEYMSK$)-LEN(_KEYMSK$[0]),$FF$)+DIM(LEN(_KEYMSK$[0]),$00$)
4243 IF LEN(_K$)>LEN(_KEYMSK$) THEN _K$=_K$(1,LEN(_KEYMSK$))
4245 _SV_STRT$=_K$
4250 IF (_SORTKEY>0 AND _ALT_PFX$[_SORTKEY]="") THEN GOTO 4280
4260 IF _MEM_FLG=0 OR (_MEM_FLG=1 AND _COLKEY=0) THEN _K$=_RCD_PFX$+_K$
4261 IF _COLKEY=0 OR _COL_KEY$[_COLKEY]="" OR POS("Formula:"=OBJ_NME$[_COLKEY])=1 THEN GOTO 4267
4262 _XNME$=_NME_TBL$[_COLKEY]; IF _NO_DICT AND MID(_XNME$,1,3)="_PK$" THEN _XNME$="PRIME_KEY$"+MID(_XNME$,4)
4263 IF POS(_XNME$=_COL_KEY$[_COLKEY])=0 THEN GOTO 4267
4264 _TMP$=_COL_KEY$[_COLKEY]
4265 _P=POS(UCS(_XNME$)=UCS(_TMP$)); IF _P THEN _TMP$=_TMP$(1,_P-1)+"_K$"+_TMP$(_P+LEN(_XNME$)); GOTO *SAME
4266 _K$=STP(EVS(_TMP$))
4267 _CMP_KEY$=XOR(_K$,PAD(_KEYMSK$,LEN(_K$)))
4270 IF STP(_R_MIN$,1,$FF$)<>"" AND _CMP_KEY$<_XMIN$ THEN _K$=_R_MIN$ ELSE IF STP(_R_MAX$,1,$FF$)<>"" AND _CMP_KEY$>_XMAX$ THEN _K$=_R_MAX$
4271 _K$=MID(_K$,1,LEN(_KEYMSK$))
4272 IF _MEM_FLG AND _COL_FMT$[_COLKEY]<>"" THEN IF _K$="-" OR _K$="+" THEN _K$=_K$+"0" END_IF ; _K$=STR(NUM(MID(_K$,1,LEN(_COL_FMT$[_COLKEY])),ERR=*NEXT):_COL_FMT$[_COLKEY]); IF _K$(1,1)="+" THEN _K$(1,1)=XOR(_K$(1,1),$FF$) ELSE IF _K$(1,1)="-" THEN _K$=XOR(_K$,DIM(LEN(_K$),$FF$))
4273 IF _MEM_FLG AND _ORDER[_COLKEY]=2 THEN _K$=XOR(_K$,_KEYMSK$(1,LEN(_K$)))
4280 IF _K$=_K$[_CUR_LN] THEN RETURN 
4290 _SV_K$=_K$+_KEYMSK$(LEN(_K$)+1); _CMP_K$=XOR(PAD(_K$,LEN(_KEYMSK$),$00$),_KEYMSK$)
4300 IF XOR(PAD(_K$[1],LEN(_KEYMSK$),$00$),_KEYMSK$)>_CMP_K$ THEN GOTO 4370
4310 FOR _I=1 TO _NUM_LN
4311 IF _K$[_I]="" THEN EXITTO 4370
4320 IF XOR(PAD(_K$[_I],LEN(_KEYMSK$),$00$),_KEYMSK$)>=_CMP_K$ THEN EXITTO 4340
4330 NEXT ; GOTO 4370
4340 IF _CUR_LN=_I THEN RETURN 
4350 _CUR_LN=_I; GOSUB LN_REDRAW
4360 RETURN 
4370 READ (_IN_FN,KEY=_K$,KNO=_SORTKEY,ERR=*NEXT); GOTO 4400
4380 IF ERR=46 THEN _K$=_K$(1,LEN(_K$)-1); GOTO 4370
4390 READ (_IN_FN,KNO=_SORTKEY,END=4430)
4400 GOSUB SELECT_RECORD; IF _REJECT=1 THEN GOTO 4430 ELSE IF _REJECT>1 THEN GOTO 4390
4410 GOTO POS_FOUND
4420 ! Beyond upper limit - Read backwards to previous record
4430 IF _SORTKEY>0 THEN GOTO 4500
4440 ! Read prime key backwards
4450 IF _R_MAX$<>"" THEN _K$=MID(_R_MAX$,1,LEN(_KEYMSK$)) ELSE _K$=KEL(_IN_FN)
4460 READ (_IN_FN,KEY=_K$,KNO=0,DOM=*NEXT); GOTO 4480
4470 _K$=KEP(_IN_FN,KNO=0,END=POS_FOUND); READ (_IN_FN,KEY=_K$,KNO=0)
4480 GOSUB SELECT_RECORD; IF _REJECT>0 THEN GOTO 4470 ELSE IF _REJECT=-1 THEN RETURN 
4490 GOTO POS_FOUND
4500 ! Read alternate key backwards
4501 _K$=_SV_K$; IF _ALT_PFX$[_SORTKEY]<>"" AND _R_MAX$<>"" THEN IF XOR(_SV_K$,PAD(_KEYMSK$,LEN(_SV_K$)))>_XMAX$ THEN _K$=MID(_R_MAX$,1,LEN(_KEYMSK$))
4510 READ (_IN_FN,KEY=_K$,KNO=_SORTKEY,END=4530,DOM=*NEXT); GOTO 4550
4520 READ (_IN_FN,KNO=_SORTKEY,END=*NEXT); GOTO 4550
4530 _K$=KEL(_IN_FN,KNO=_SORTKEY); READ (_IN_FN,KEY=_K$,KNO=_SORTKEY) ! position @end to read backwards
4540 READ (_IN_FN,KNO=_SORTKEY,END=*NEXT); GOTO *SAME ! read to end in case of dup keys
4550 _K$=KEC(_IN_FN,KNO=0),_IX=IND(_IN_FN,KEY=_K$,KNO=0)
4560 READ (_IN_FN,IND=_IX,KNO=_SORTKEY,END=POS_FOUND); GOSUB SELECT_RECORD; IF _REJECT<>0 THEN READ (_IN_FN,KNO=_SORTKEY,IND=_IX,DIR=-1,END=*RETURN); _IX=IND(_IN_FN,KNO=_SORTKEY,END=*RETURN); GOTO *SAME
4570 POS_FOUND:
4580 _CUR_LN=1,_K$=_K0$; GOSUB DISP_PAGE
4585 IF _VSBAR AND _ALTSEL=0 THEN _RN=_TOT_REC,_RN=RNO(_IN_FN,KNO=_SORTKEY,END=*NEXT)-1
4586 IF _VSBAR AND _ALTSEL=0 THEN _PG_RNO=_RN-_BSE_RNO
4590 RETURN 
4600 ! ^100
4610 CHANGE_KEY:
4620 DROP_BOX READ 13,_SORTKEY,ERR=*NEXT
4630 _SORTKEY=_SORTKEY-1
4640 IF _MEM_FLG THEN GOSUB CHANGE_MEMORY_FILE
4650 GOSUB GET_RECORD_RANGE
4660 IF _REFRESH_VAL$="" THEN _PG_RNO=1,_CUR_LN=1,_K$="" ELSE _K$=_REFRESH_VAL$
4670 GOSUB DISP_PAGE
4680 _FOCUS_AREA=0; GOSUB RESET_FOCUS
4690 RETURN 
4700 ! ^100 - File maintenance
4710 FILE_MAINTENANCE:
4720 SET_PARAM 'KR'=_SV_KR,'XI'=_SV_XI,'FI'=_SV_FI,'TU'=_SV_TU
4740 _KX$=_K0$[_CUR_LN],_MAINT_KEY$=_KX$
4741 IF _MEM_FLG THEN _MAINT_KEY$=PRIME_KEY$; IF _ORDER[_COLKEY]=2 THEN _KX$=XOR(_KX$,DIM(LEN(_KX$),$FF$))
4750 _SAVE_OBJ_QRY$=_OBJ_QRY$,_P=POS(",;":_OBJ_QRY$); IF _P=0 THEN _OLIB$="" ELSE _OLIB$=_OBJ_QRY$(_P+1),_OBJ_QRY$=_OBJ_QRY$(1,_P-1) ! tf187842
4760 PROCESS _OBJ_QRY$,_OLIB$,_MAINT_KEY$
4765 _OBJ_QRY$=_SAVE_OBJ_QRY$ ! tf187842
4770 SET_PARAM 'KR'=0,'XI'=1,'FI'=1,'TU'
4800 IF _MEM_FLG=0 THEN READ (_IN_FN,KEY="",KNO=0,DOM=*PROCEED); GOSUB GET_FILE_INFO ELSE GOSUB REFRESH_MEMORY
4820 IF _MAINT_KEY$="" THEN _MAINT_KEY$=_KX$; IF _MAINT_KEY$="" THEN GOTO 4860
4830 IF _SORTKEY>0 THEN READ (_IN_FN,KEY=_MAINT_KEY$,KNO=0); _MAINT_KEY$=KEC(_IN_FN,KNO=_SORTKEY)
4840 _K${ALL}="",_K0${ALL}=""
4850 IF _RCD_PFX$<>"" AND (_SORTKEY=0 OR _ALT_PFX$[_SORTKEY]<>"") THEN IF _MAINT_KEY$(1,LEN(_RCD_PFX$))=_RCD_PFX$ THEN _MAINT_KEY$=_MAINT_KEY$(LEN(_RCD_PFX$)+1)
4860 MULTI_LINE WRITE 10,_MAINT_KEY$ ! triggers positioning and redisplay
4870 _MAINT_KEY$=""
4880 _FOCUS_AREA=2; GOSUB RESET_FOCUS
4890 RETURN 
4900 ! ^100 - Sub query
4910 SUB_QRY:
4920 READ (%SCR_LIB,KEY=SCRN_K$+STR(_COL_CUR:"0000"),DOM=*RETURN)IOL=13010
4930 IF OBJ_QRY$[_COL_CUR]="" THEN MSGBOX _MSG_NO_SUB_QRY$,_FYI$,"INFO"; GOTO 4990
4940 IF _RD_REC=0 THEN READ (_IN_FN,KEY=_K0$[_CUR_LN],KNO=0,DOM=*RETURN) ELSE READ RECORD (_IN_FN,KEY=_K0$[_CUR_LN],KNO=0,DOM=*RETURN)
4950 IF _MEM_FLG=0 THEN GOSUB READ_XREF_FILES
4960 IF _NO_DICT=0 THEN _X$=_NME_TBL$[_COL_CUR]; IF OBJ_VAL$[_COL_CUR]="S" THEN _X$=EVS(_X$) ELSE _X$=STR(EVN(_X$)) ELSE _X$=_FLD_NME$[_COL_CUR]; _X$=EVS(_X$)
4970 _QUERY$=OBJ_QRY$[_COL_CUR]; _P=POS(",;":_QUERY$); IF _P=0 THEN _OLIB$="" ELSE _OLIB$=_QUERY$(_P+1),_QUERY$=_QUERY$(1,_P-1)
4980 PROCESS _QUERY$,_OLIB$,_X$
4990 _FOCUS_AREA=4; GOSUB RESET_FOCUS
5000 RETURN 
5100 ! ^100
5110 PRINT_QUERY:
5120 IF _NUM_REC=0 THEN MSGBOX _MSG_NO_DATA$,_ERROR$,"!"; GOTO 5430
5121 MESSAGE_LIB _QRY_MSGLIB$
5130 PROCESS "Qryprint","*scrnlib.en",_PRTR_FONT$,_PRT_OPT$,_CANCEL$
5131 MESSAGE_LIB _SV_MSGLIB$
5140 IF _CANCEL$="CANCEL" THEN GOTO 5430
5150 _PRT_FN=HFN; OPEN (_PRT_FN,ERR=5430)_WDX$+"*winprt*"+_PRT_OPT$
5160 PRINT (_PRT_FN)'FONT'(_PRTR_FONT$,1,_PRTR_ATTR$),'FILL'(0,0),'DF',
5170 _PRT_MXC=MXC(_PRT_FN)+1
5180 _PRT_BOX=0,_PRT_PG=0
5190 _PRT_MARG=8,_X_MARG=@X(_PRT_MARG-.5,_PRT_FN)
5200 _PRT_WID=_TOT_WID+(_PRT_MARG*2)+1
5210 _PRT_SIZ=MIN(_PRT_MXC/_PRT_WID,1)
5220 PRINT (_PRT_FN)'FONT'(_PRTR_FONT$,_PRT_SIZ,_PRTR_ATTR$),'FILL'(0,0),'DF',
5230 _PRT_MXL=MXL(_PRT_FN)-1,_PRT_LN=_PRT_MXL
5240 _PRT_WID=MAX(_TOT_WID+_PRT_MARG+1,_PRT_MXC-_PRT_MARG+1)
5245 _TTL_SIZ=MIN(3,MAX(1,INT((_PRT_MXC-(_PRT_MARG*2))/MAX(1,LEN(_PRT_TITLE$)))))
5250 _REC_CNT=0,_BARSIZE=30; IF _NUM_REC<_BARSIZE THEN _BARSTEP=1 ELSE _BARSTEP=INT(_NUM_REC/_BARSIZE+.5)
5260 CALL "*progbar;Init","Print Query",_BARSIZE
5270 IF _SORTKEY=0 OR _ALT_PFX$[_SORTKEY]<>"" THEN _K$=MID(_R_MIN$,1,LEN(_KEYMSK$[_SORTKEY])) ELSE _K$=""
5275 IF _K$="" THEN _K$=KEF(_IN_FN,KNO=_SORTKEY)
5280 READ (_IN_FN,KEY=_K$,KNO=_SORTKEY,DOM=5360)
5290 GOSUB SELECT_RECORD; IF _REJECT=1 THEN GOTO 5370 ELSE IF _REJECT>1 THEN GOTO 5360
5300 _PRT_LN=_PRT_LN+1
5310 IF _PRT_LN>_PRT_MXL THEN GOSUB PRT_HEADING
5320 PRINT (_PRT_FN,ERR=*NEXT)@(_PRT_MARG,_PRT_LN),IOL=_PRT_IOL$; GOTO 5340
5330 PRINT (_PRT_FN)_MSG_DATA_ERROR$
5340 _REC_CNT=_REC_CNT+1; IF _REC_CNT|_BARSTEP<>0 AND _REC_CNT<>_NUM_REC THEN GOTO 5360
5350 IF _RCD_TST$="" THEN CALL "*progbar;update_percent",ERR=5390,STR(_REC_CNT)+_MSG_REC_PRT_OF1$+STR(_NUM_REC)+_MSG_REC_PRT_OF2$,_REC_CNT*100/_NUM_REC ELSE CALL "*progbar;Update",ERR=5390,STR(_REC_CNT)+_MSG_REC_PRT$
5360 READ (_IN_FN,KNO=_SORTKEY,END=5370); _K$=KEC(_IN_FN,KNO=_SORTKEY); GOTO 5290
5370 IF _PRT_BOX<>0 THEN PRINT (_PRT_FN)'PEN'(1,7,0),'FILL'(0,0),'RECTANGLE'(_X_MARG,@Y(_PRT_BOX),@X(_PRT_WID),@Y(_PRT_LN+1.5)),'PEN'(1,1,0),
5380 IF _RCD_TST$="" THEN CALL "*progbar;update_percent",ERR=*NEXT,STR(_REC_CNT)+_MSG_REC_PRT_OF1$+STR(_NUM_REC)+_MSG_REC_PRT_OF2$,_REC_CNT*100/_NUM_REC ELSE CALL "*progbar;Update",ERR=*NEXT,STR(_REC_CNT)+_MSG_REC_PRT$
5390 CALL "*progbar;Wrap_up"
5400 PRINT (_PRT_FN)'FF',
5410 CLOSE (_PRT_FN)
5420 _PROGMSG$=""; PRINT 'CURSOR'(0),'MESSAGE'(_MESS$),
5430 _FOCUS_AREA=5; GOSUB RESET_FOCUS
5440 RETURN 
5500 ! ^100
5510 PRT_HEADING:
5520 IF _PRT_BOX<>0 THEN PRINT (_PRT_FN)'PEN'(1,7,0),'FILL'(0,0),'RECTANGLE'(_X_MARG,@Y(_PRT_BOX),@X(_PRT_WID),@Y(_PRT_LN+.5)),'PEN'(1,1,0),; _PRT_BOX=0
5530 IF _PRT_PG>0 THEN PRINT (_PRT_FN)'FF',
5540 _PRT_PG=_PRT_PG+1; PRINT (_PRT_FN)@(_PRT_WID-10,0),PAD(_MSG_PAGE$+STR(_PRT_PG),10,0),
5550 PRINT (_PRT_FN)'FILL'(0,0),'RECTANGLE'(_X_MARG,@Y(2),@X(_PRT_WID),@Y(5)+4),'FONT'(_PRTR_FONT$,_TTL_SIZ,"BC"),'TEXT'(_X_MARG+(@X(_PRT_WID)-_X_MARG)/2,@Y(2),_PRT_TITLE$),
5560 PRINT (_PRT_FN)'FILL'(0,0),'RECTANGLE'(_X_MARG,@Y(6),@X(_PRT_WID),@Y(8)),'FONT'(_PRTR_FONT$,2),'TEXT'(@X(_PRT_MARG),@Y(6),_PRT_SUBTITLE$),
5570 _PRT_LN=9; PRINT (_PRT_FN)'PEN'(1,7,0),'FILL'(0,0),'RECTANGLE'(_X_MARG,@Y(_PRT_LN-.5),@X(_PRT_WID),@Y(_PRT_LN+1.5)),'PEN'(1,1,0),'FONT'(_PRTR_FONT$,_PRT_SIZ,_PRTR_ATTR$),IOL=_PRT_HDR$,
5580 _PRT_LN=_PRT_LN+2,_PRT_BOX=_PRT_LN-.5
5590 RETURN 
5600 ! ^100
5610 INIT_PRINTER:
5620 _PRTR_FONT$=ARG_1$,_PRT_OPT$="",ARG_2$="",ARG_3$="CANCEL"
5630 WINPRT_SETUP READ PRTR_NAME$,ERR=*NEXT; GOTO 5640
5631 CMD_STR$="END"; EXIT ! no printers defined
5640 WINPRT_SETUP READ PROPERTIES _PROPS$; _PROPS$=_PROPS$+";"
5650 _P=POS("COPIES="=_PROPS$); IF _P=0 THEN COPIES$="1" ELSE _X$=_PROPS$(_P+7),_P=POS(";"=_X$); COPIES$=_X$(1,_P-1)
5660 COPIES$=MSG("COPIES")+"="+COPIES$
5670 _P=POS("RESOLUTION="=_PROPS$); IF _P=0 THEN RESOLUTION$="" ELSE _X$=_PROPS$(_P+11),_P=POS(";"=_X$); RESOLUTION$=_X$(1,_P-1)
5680 IF RESOLUTION$<>"" THEN RESOLUTION$=MSG("RESOLUTION")+"="+RESOLUTION$
5690 _P=POS("FILE=+"=_PROPS$); IF _P=0 THEN PRINT_TO_FILE$="" ELSE PRINT_TO_FILE$=MSG("PRT_TO_FIL")
5700 IF POS("PORTRAIT"=_PROPS$) THEN ORIENTATION$="1",_OR_FLG$="1" ELSE ORIENTATION$="2",_OR_FLG$="2"
5710 _GR$="<Default Graphic Font>",_FX$="<Default Fixed Font>"
5720 FONT_LST$=_GR$+","+_FX$+","+SRT('FONT'(LIST *),",")
5730 IF _PRTR_FONT$="" THEN _PRTR_FONT$=_GR$ ELSE IF _PRTR_FONT$="*" THEN _PRTR_FONT$=_FX$
5731 IF POS(UCS(_PRTR_FONT$)=UCS(FONT_LST$)) THEN FONT_LIST$=_PRTR_FONT$,REFRESH_FLG=1
5740 EXIT 
5800 ! ^100 - Update the printer properties and set exit args
5810 UPDATE_PRINTER:
5820 _PRT_OPT$=";ASIS"
5830 SETUP_PRINTER:
5840 IF _OR_FLG$=ORIENTATION$ THEN GOTO 5870
5850 _P$="ORIENTATION="; IF ORIENTATION$="1" THEN _P$=_P$+"PORTRAIT" ELSE _P$=_P$+"LANDSCAPE"
5860 WINPRT_SETUP WRITE PROPERTIES _P$
5870 _X$=""; LIST_BOX READ FONT_LIST.CTL,_X$,ERR=5890
5880 IF _X$=_GR$ THEN _X$="" ELSE IF _X$=_FX$ THEN _X$="*"
5890 ARG_1$=_X$,ARG_2$=_PRT_OPT$,ARG_3$="",CMD_STR$="END"
5900 EXIT 
6000 ! ^1000 - Horizontal/Vertical movement ------------------------------------------
6010 ! ^10 - Scroll left
6020 COL_LEFT:
6030 IF _COL_CUR=1 THEN RETURN 
6040 _COL_CUR=_COL_CUR-1
6050 IF _COL_CUR>=_COL_OFS THEN GOSUB DISP_TTL; RETURN 
6060 _COL_OFS=_COL_CUR
6070 _V_LN=1; GOSUB DISP_TTL
6080 _K$=_K0$[1]; GOSUB DISP_PAGE; RETURN 
6100 ! ^100 - Scroll right
6110 COL_RIGHT:
6120 IF _COL_CUR=_TOT_COL THEN RETURN 
6130 _COL_CUR=_COL_CUR+1; IF _COL_CUR<=_COL_LST THEN GOSUB DISP_TTL; RETURN 
6140 CR: _COL_OFS=_COL_CUR,_W=_COL_TBL[_COL_OFS]+1+_STAT_W
6150 IF _COL_OFS=1 THEN GOTO 6170
6160 _W1=_W+_COL_TBL[_COL_OFS-1]+1; IF _W1<_TRU_W THEN _W=_W1,_COL_OFS=_COL_OFS-1; GOTO 6150
6170 _V_LN=1; GOSUB DISP_TTL
6180 _K$=_K0$[1]; GOSUB DISP_PAGE; RETURN 
6200 ! ^100 - Horizontal Scroll
6210 H_SBAR:
6220 H_SCROLLBAR READ 12,_X,_TOT_COL
6230 IF _X<_COL_OFS THEN _COL_OFS=_X,_COL_CUR=_X; GOTO 6170
6240 _COL_CUR=_X
6250 IF _X>_COL_LST THEN GOTO CR
6260 GOSUB DISP_TTL; RETURN 
6270 ! ^10 - Line up
6280 LINE_UP:
6290 _FOCUS_AREA=0
6300 IF _CUR_LN>1 THEN _CUR_LN=_CUR_LN-1; GOSUB LN_REDRAW; RETURN 
6310 IF _SORTKEY>0 THEN GOTO 6340
6320 READ (_IN_FN,KEY=_K0$[1],KNO=0,DOM=*RETURN)
6330 _K$=KEP(_IN_FN,KNO=0,END=*RETURN); READ (_IN_FN,KEY=_K$,KNO=0)
6331 GOSUB SELECT_RECORD; IF _REJECT=0 THEN GOTO 6380 ELSE IF _REJECT=-1 THEN GOTO 6420 ELSE GOTO 6330
6340 _KIX$=_K0$[1]
6350 _IX=IND(_IN_FN,KEY=_KIX$,KNO=0); READ (_IN_FN,IND=_IX,KNO=_SORTKEY,DIR=-1) ! locate record and set up direction
6360 READ (_IN_FN,KNO=_SORTKEY,END=6420)
6370 GOSUB SELECT_RECORD; IF _REJECT>0 THEN _KIX$=_K0$; GOTO 6350 ELSE IF _REJECT=-1 THEN GOTO 6420
6380 _K${_NUM_LN:2}=_K${_NUM_LN-1:1},_K$[1]=_K$
6390 _K0${_NUM_LN:2}=_K0${_NUM_LN-1:1},_K0$[1]=_K0$
6400 IF _VSBAR THEN _PG_RNO=MAX(1,_PG_RNO-1)
6410 _K$=_K0$[1],_USE_ARRAY=1; GOSUB DISP_PAGE; _USE_ARRAY=0
6420 PRINT 'CURSOR'(0),'MESSAGE'(_MESS$),
6430 RETURN 
6500 ! ^100 - Line down
6510 LINE_DOWN:
6520 _FOCUS_AREA=0
6530 IF _CUR_LN=_NUM_LN THEN GOTO 6580
6540 IF _K$[_CUR_LN+1]="" THEN GOTO 6660
6550 _CUR_LN=_CUR_LN+1
6560 GOSUB LN_REDRAW
6570 RETURN 
6580 READ (_IN_FN,KEY=_K0$[_CUR_LN],KNO=0,DOM=6660)
6590 READ (_IN_FN,KNO=_SORTKEY,END=6660)
6600 GOSUB SELECT_RECORD; IF _REJECT=1 THEN GOTO 6660 ELSE IF _REJECT>1 THEN GOTO 6590
6620 _PG_RNO=_PG_RNO+1
6630 _K${1:_NUM_LN-1}=_K${2:_NUM_LN},_K$[_NUM_LN]=_K$
6640 _K0${1:_NUM_LN-1}=_K0${2:_NUM_LN},_K0$[_NUM_LN]=_K0$
6650 _K$=_K0$[1],_USE_ARRAY=1; GOSUB DISP_PAGE; _USE_ARRAY=0
6660 PRINT 'CURSOR'(0),'MESSAGE'(_MESS$),
6670 RETURN 
6700 ! ^100 - Page Up
6710 PAGE_UP:
6720 _FOCUS_AREA=0,_PU=0
6730 IF _SORTKEY=0 THEN READ (_IN_FN,KNO=_SORTKEY,KEY=_K0$[1]) ELSE _IX=IND(_IN_FN,KEY=_K0$[1],KNO=0)
6740 IF _SORTKEY=0 THEN _K$=KEP(_IN_FN,END=6820); READ (_IN_FN,KEY=_K$,KNO=0) ELSE READ (_IN_FN,KNO=_SORTKEY,IND=_IX,DIR=-1); _IX=IND(_IN_FN,KNO=_SORTKEY,END=6820); READ (_IN_FN,KNO=_SORTKEY,IND=_IX)
6750 GOSUB SELECT_RECORD; IF _REJECT<0 THEN GOTO 6820
6760 IF _REJECT=0 THEN _K${_NUM_LN:2}=_K${_NUM_LN-1:1},_K$[1]=_K$; _K0${_NUM_LN:2}=_K0${_NUM_LN-1:1},_K0$[1]=_K0$; _PG_RNO-=1,_PU+=1
6771 IF _PU<_NUM_LN THEN GOTO 6740
6820 _CUR_LN=1,_K$=_K0$[1],_USE_ARRAY=1; GOSUB DISP_PAGE; _USE_ARRAY=0
6830 RETURN 
7000 ! ^100 - Page down
7010 PAGE_DOWN:
7020 IF _K$[_NUM_LN]="" THEN GOTO 7100
7030 _FOCUS_AREA=0
7040 READ (_IN_FN,KEY=_K0$[_NUM_LN],KNO=0,DOM=7060)
7050 READ (_IN_FN,KNO=_SORTKEY,END=7100)
7060 GOSUB SELECT_RECORD; IF _REJECT=1 THEN GOTO 7100 ELSE IF _REJECT>1 THEN GOTO 7050
7080 _PG_RNO=_PG_RNO+_NUM_LN,_CUR_LN=1
7090 _K$=_K0$; GOSUB DISP_PAGE
7100 PRINT 'CURSOR'(0),'MESSAGE'(_MESS$),
7110 RETURN 
7200 ! ^100 - vertical sbar
7210 V_SBAR:
7220 IF _VSBAR=0 THEN GOTO ALT_VSCROLL
7230 IF _ALTSEL<>0 THEN GOTO 7340
7240 V_SCROLLBAR READ 11,_X,_NUM_REC,_NUM_LN,ERR=*NEXT; V_SCROLLBAR WRITE 11,_X,_NUM_REC,ERR=*NEXT
7250 IF _X=_PG_RNO+_NUM_LN AND _CUR_LN=_NUM_LN THEN GOTO LINE_DOWN
7260 IF _X=_PG_RNO-1 AND _CUR_LN=1 THEN GOTO LINE_UP
7270 IF _X<_PG_RNO OR _X>=_PG_RNO+_NUM_LN THEN GOTO 7300
7280 _CUR_LN=_X-_PG_RNO+1; GOSUB LN_REDRAW
7290 RETURN 
7300 READ (_IN_FN,KNO=_SORTKEY,RNO=_X+_BSE_RNO,ERR=*NEXT); _K$=KEC(_IN_FN,KNO=0)
7310 _PG_RNO=_X,_CUR_LN=1
7320 GOSUB DISP_PAGE
7330 RETURN 
7340 ! Normal scroll bar - Selection criteria
7350 V_SCROLLBAR READ 11,_RN,_MAX_RNO-_BSE_RNO,_NUM_LN,ERR=*NEXT; V_SCROLLBAR WRITE 11,_RN,_MAX_RNO-_BSE_RNO,ERR=*NEXT
7360 _RN=_RN+_BSE_RNO
7370 IF _RN=_LST_RN THEN GOTO *RETURN
7380 _XRN=_RN-_LST_RN
7390 IF _XRN=-1 THEN GOTO LINE_UP
7400 IF _XRN=1 THEN GOTO LINE_DOWN
7410 IF _XRN=_NUM_LN*-1 THEN GOTO PAGE_UP
7420 IF _XRN=_NUM_LN THEN GOTO PAGE_DOWN
7430 IF _RN<_LST_RN THEN _DIRECTION=-1 ELSE _DIRECTION=1
7440 IF _SORTKEY=0 THEN GOTO VS0_RD ELSE GOTO VS_RD
7450 ALT_VSCROLL:
7460 V_SCROLLBAR READ 11,_SV,_SCROLL_RANGE,_NUM_LN,ERR=*NEXT; V_SCROLLBAR WRITE 11,_SV,_SCROLL_RANGE,ERR=*NEXT
7470 _XSV=_SV-_LST_SV
7480 IF _XSV=-1 OR (_XSV=0 AND _SV=1) THEN GOTO LINE_UP
7490 IF _XSV=1 OR (_XSV=0 AND _SV=_SCROLL_RANGE) THEN GOTO LINE_DOWN
7500 IF _XSV=_NUM_LN*-1 THEN GOTO PAGE_UP
7510 IF _XSV=_NUM_LN THEN GOTO PAGE_DOWN
7520 _SCROLL_KEY$=_SCROLL_PFX$+BIN(_SV+_SCROLL_1-1,2)
7530 IF _SV>_LST_SV THEN _DIRECTION=1 ELSE _DIRECTION=-1
7540 IF _SORTKEY=0 THEN GOTO VS0_RD ELSE GOTO VS_RD
7550 ! Read for primary key
7560 VS0_RD:
7570 PRINT 'CURSOR'(1),
7580 IF _VSBAR THEN _K$=KEY(_IN_FN,KNO=0,RNO=_RN); GOTO VS0_SEL
7590 READ (_IN_FN,KNO=0,KEY=_SCROLL_KEY$,DOM=*NEXT); GOTO 7610
7600 READ (_IN_FN,KNO=0)
7610 _K$=KEC(_IN_FN,KNO=0)
7620 IF _DIRECTION=-1 THEN _K$=KEP(_IN_FN,END=*NEXT) ! set up to go backwards
7630 VS0_SEL:
7640 READ (_IN_FN,KEY=_K$)
7650 GOSUB SELECT_RECORD; IF _REJECT=0 THEN GOTO SCROLL_DONE
7660 IF _REJECT<>_DIRECTION THEN IF _DIRECTION=1 THEN _K$=KEY(_IN_FN,END=*NEXT) ELSE _K$=KEP(_IN_FN,END=*NEXT) END_IF ; GOTO VS0_SEL
7670 _DIRECTION=_DIRECTION*(-1); GOTO VS0_RD ! No matches - Turn around and go the other way!
7680 ! Read for alternate keys
7690 VS_RD:
7700 PRINT 'CURSOR'(1),
7710 IF _VSBAR THEN _IX=IND(_IN_FN,KNO=_SORTKEY,RNO=_RN); GOTO VS_SEL
7720 READ (_IN_FN,KNO=_SORTKEY,KEY=_SCROLL_KEY$,DOM=*NEXT); GOTO 7740
7730 READ (_IN_FN,KNO=_SORTKEY)
7740 _K0$=KEC(_IN_FN,KNO=0),_IX=IND(_IN_FN,KNO=0,KEY=_K0$)
7750 IF _DIRECTION=-1 THEN READ (_IN_FN,IND=_IX,KNO=_SORTKEY,DIR=-1); _IX=IND(_IN_FN,KNO=_SORTKEY,END=7780) ! set up to go backwards
7760 VS_SEL:READ (_IN_FN,IND=_IX,KNO=_SORTKEY); GOSUB SELECT_RECORD; IF _REJECT=0 THEN GOTO SCROLL_DONE
7770 IF _REJECT<>_DIRECTION THEN READ (_IN_FN,KNO=_SORTKEY,IND=_IX,DIR=_DIRECTION,END=*NEXT); _IX=IND(_IN_FN,KNO=_SORTKEY,END=*NEXT); GOTO VS_SEL
7780 _DIRECTION=_DIRECTION*(-1); GOTO VS_RD ! No matches - Turn around and go the other way!
7790 ! Scrolling position located
7800 SCROLL_DONE:
7810 _CUR_LN=1,_K$=_K0$; GOSUB DISP_PAGE
7820 PRINT 'CURSOR'(0),
7830 RETURN 
8000 ! ^1000 - Read/process record data -------------------------------------
8010 ! ^10 - Record selection
8020 SELECT_RECORD:
8030 _PROGCNT=_PROGCNT+1; IF _PROGCNT>=20 THEN _PROGCNT=0,_PROGMSG$=_PROGMSG$+"|"; PRINT 'CURSOR'(1),'MESSAGE'(_PROGMSG$),; IF LEN(_PROGMSG$)>50 THEN _PROGMSG$=""
8040 _REJECT=0,_SV_PRIME$=PRIME_KEY$
8050 _K$=KEC(_IN_FN,KNO=_SORTKEY),_K0$=KEC(_IN_FN,KNO=0),PRIME_KEY$=_K0$(_KEYADJ+1)
8052 IF _RD_REC THEN IF _SORTKEY=0 THEN READ RECORD (_IN_FN,KEY=_K0$) ELSE _IX=IND(_IN_FN,KEY=_K0$); READ RECORD (_IN_FN,IND=_IX,KNO=_SORTKEY)
8060 IF _EXFLG AND _NO_DICT=0 THEN _EXKEY$=_K0$; GOSUB PARSE_EXKEY
8061 IF _MEM_FLG THEN GOTO 8150
8070 GOSUB READ_XREF_FILES
8080 IF _R_MIN$+_R_MAX$="" THEN GOTO 8120
8090 IF _ALTSEL>0 AND _ALT_PFX$[_SORTKEY]="" THEN _CMP_KEY$=XOR(_K0$,PAD(_KEYMSK$[0],LEN(_K0$))); IF _CMP_KEY$<_XMIN$ OR _CMP_KEY$>_XMAX$ THEN _REJECT=2; GOTO 8140 ELSE GOTO 8120
8091 _CMP_KEY$=XOR(_K$,PAD(_KEYMSK$[0],LEN(_K$)))
8100 IF _CMP_KEY$>_XMAX$ THEN _REJECT=1; GOTO 8140
8110 IF _CMP_KEY$<_XMIN$ THEN _REJECT=-1; GOTO 8140
8120 IF _RCD_TST$<>"" THEN _X_TST$=_RCD_TST$; GOSUB DO_TEST
8130 IF _REJECT=1000 THEN EXITTO WRAPUP
8140 IF _REJECT=0 AND _NO_FMT=0 THEN GOSUB CALL_FORMATTER
8150 IF _REJECT=0 THEN _PROGCNT=0,_PROGMSG$="" ELSE PRIME_KEY$=_SV_PRIME$
8182 RETURN 
8183 ! 
8184 DO_TEST:
8185 IF _X_TST$(1,1)<>"T" THEN GOTO 8195
8186 ! Simple test
8192 IF EVN(_X_TST$(2),ERR=*NEXT)=0 THEN _REJECT=3 END_IF ; RETURN 
8193 _REJECT=3; MSGBOX _MSG_TEST_ERROR$+SEP+SEP+MSG(ERR)+SEP+_MSG_KEY$+_K0$+SEP+SEP+_MSG_CONTINUE$,_ERROR$,"!,YESNO",_YESNO$; IF _YESNO$="NO" THEN _REJECT=1000 END_IF ; RETURN 
8194 ! Called program
8195 _REJECT=4; _C$="CALL "+_X_TST$(2); PERFORM "*winproc.xeq",ERR=*NEXT; _REJECT=0
8197 RETURN 
8200 ! ^100 - Get the record info
8210 PARSE_EXKEY:
8220 _PARSE_OK=0,_SV_REC$=REC(_DTA_IOL$,REC=_MN_$,ERR=*NEXT); _PARSE_OK=1
8230 READ DATA FROM _EXKEY$,REC=_MN_$ TO IOL=_KEY_IOL$
8240 IF _PARSE_OK THEN READ DATA FROM _SV_REC$,REC=_MN_$ TO IOL=_DTA_IOL$
8250 RETURN 
8300 ! ^100 - Call formatter program
8310 CALL_FORMATTER:
8320 FOR _Y=1 TO _TOT_COL
8330 IF _FORMAT_PGM$[_Y]="" THEN CONTINUE
8340 _P$=_FORMAT_PGM$[_Y]
8350 IF _NO_DICT=0 OR _MEM_FLG=0 THEN _TMP$=_NME_TBL$[_Y] ELSE _TMP$=_FLD_NME$[_Y]
8360 _X$=EVS(_TMP$); CALL _P$,ERR=*CONTINUE,_X$
8370 EXECUTE _TMP$+"=_X$"
8380 NEXT 
8390 RETURN 
8400 ! ^100 - Change FLD# in the expression to FIELD$[...
8410 CHANGE_FLDX:
8420 IF POS("FLD#"=UCS(_X$))=0 THEN GOTO *RETURN ! Nothing to do
8421 IF _X$=_RCD_TST$ THEN GOTO CF_LOOP ! Already in ucs
8423 _Q=0; FOR _QI=1 TO LEN(_X$) ! Convert everything outside quotes to ucs
8424 IF _X$(_QI,1)=QUO THEN IF _Q=0 THEN _Q=1 ELSE _Q=0; CONTINUE
8426 IF _Q=0 THEN _X$(_QI,1)=UCS(_X$(_QI,1))
8427 NEXT _QI
8430 CF_LOOP: _P=POS("FLD#"=_X$); IF _P=0 THEN _X$=STP(_X$,1,":"); GOTO *RETURN
8440 _P1=POS("$()+-*/|:=<>":_X$(_P)); IF _P1=0 THEN _P1=LEN(_X$)-_P+2
8450 _FLD_MX=MAX(_FLD_MX,NUM(_X$(_P+4,_P1-5)))
8460 IF MID(_X$,_P+_P1-1,1)="$" THEN _X$=_X$(1,_P-1)+"FIELD$["+_X$(_P+4,_P1-5)+"]"+_X$(_P+_P1); GOTO CF_LOOP ! string variable
8470 _P2=POS("()+-*/":_X$(1,_P),-1)
8480 _X$=_X$(1,_P2)+"NUM("+_X$(_P2+1,_P-_P2-1)+"FIELD$["+_X$(_P+4,_P1-5)+"])"+_X$(_P+_P1-1)
8490 GOTO CF_LOOP
8500 RETURN 
8510 ! ^100 - Change FIELD$[x](n1,n2) in expression to FIELDx.n1.n2$
8520 CHANGE_FIELDX:
8530 _P1=POS("FIELD$["=_TMP$); IF _P1=0 THEN GOTO 8580
8540 _P2=POS("]"=_TMP$(_P1)),_P3=0; IF MID(_TMP$,_P1+_P2,1)="(" THEN _P3=POS(")"=_TMP$(_P1+_P2))
8550 _XTMP$=""; IF _P3>0 THEN _XTMP$="."+_TMP$(_P1+_P2+1,_P3-2); TRANSLATE _XTMP$,".",","
8560 _TMP$=_TMP$(1,_P1-1)+_TMP$(_P1,5)+_TMP$(_P1+7,_P2-8)+_XTMP$+"$"+_TMP$(_P1+_P2+_P3)
8570 GOTO 8530
8580 RETURN 
8600 ! ^100 - Get file prefix (Patch to move prefix from obj_msg$ to obj_tip$)
8610 GET_PREFIX:
8620 IF OBJ_TIP$<>"" THEN RETURN 
8630 IF POS("Formula:"=OBJ_NME$)=1 THEN RETURN 
8640 IF OBJ_MSG$="" OR POS(OBJ_MSG$+"."=_LNK_PFX$)=0 THEN OBJ_TIP$="_MN_"; GOTO FIX_SCRLIB
8650 OBJ_TIP$=OBJ_MSG$,OBJ_MSG$=""
8660 FIX_SCRLIB:IF _SC_FN=0 THEN _SC_FN=HFN; OPEN (_SC_FN,IOL=13010,REC=_SCR$)PTH(%SCR_LIB)
8670 _SK$=KEC(%SCR_LIB); READ (_SC_FN,KEY=_SK$,ERR=*RETURN)
8680 _SCR.OBJ_MSG$=OBJ_MSG$,_SCR.OBJ_TIP$=OBJ_TIP$
8690 WRITE (_SC_FN,KEY=_SK$,ERR=*RETURN)
8700 RETURN 
8800 ! ^100 - Read the cross-reference files
8810 READ_XREF_FILES:
8820 IF _NXREF=0 THEN GOTO *RETURN
8830 FOR _NXR=1 TO _NXREF
8840 IF _XFN[_NXR]=0 THEN CONTINUE
8850 IF _XREC[_NXR]=0 THEN READ (_XFN[_NXR],KEY=EVS(_XKEY$[_NXR]),KNO=_XKNO[_NXR],ERR=8860); CONTINUE
8851 IF _XREC[_NXR]=1 THEN READ RECORD (_XFN[_NXR],KEY=EVS(_XKEY$[_NXR]),KNO=_XKNO[_NXR],ERR=8860)
8852 CONTINUE
8860 READ DATA FROM "",REC=VIS(REC(FILE _XFN[_NXR])) TO IOL=IOL(_XFN[_NXR],ERR=*NEXT) ! Read error - blank fields
8870 NEXT _NXR
8880 RETURN 
9000 ! ^1000 - Display query ------------------------------------------------
9010 ! ^10 - Display title lines
9020 DISP_TTL:
9025 _EXCEL_COUNT+=1; IF _EXCEL_COUNT=1 THEN _EXCEL_REC$="",_EXCEL_HEADER$="",_EXCEL_LEN$="",_EXCEL_TXT$="" ! gui
9030 _X=1,_XS=0,_XP=_PRT_MARG,_V_LN$="",_TOT_W=0,_COL_LST=_X,_MIN_COL=0,_MAX_COL=0,_FORMULA_CNT=0; _CUR_IOL$="",_PRT_IOL$="",_PRT_HDR$=""
9031 IF _MEM_FLG=0 THEN _TTL_LN$='MODE'(_QRY_COLOR$) ELSE _MWR_IOL$="",_MEM_IOL$="",_MXM_IOL$=""
9040 IF _X>_TOT_COL THEN GOTO 9310
9070 _W=_COL_TBL[_X],_W1=_W; IF _X>=_COL_OFS THEN IF _TOT_W+_W>=_TRU_W-2 THEN _W=_TRU_W-_TOT_W ELSE _COL_LST=_X
9080 _X$=_NME_TBL$[_X]
9085 IF _EXCEL_COUNT=1 THEN _EXCEL_LEN$+=STR(_COL_TBL[_X])+"," ! GUI
9090 IF _X=1 AND _RET_VAL$="" THEN _RET_VAL$=_X$
9100 IF _MEM_FLG=0 THEN GOTO 9180
9110 _FORMULA$=_X$; IF POS("Formula:"=OBJ_NME$[_X])=1 THEN _FORMULA_CNT++; _X$="__F"+STR(_FORMULA_CNT)+"__"+TBL(OBJ_VAL$[_X]="S","","$") ELSE IF _NO_DICT THEN _X$=_FLD_NME$[_X]
9120 _MEM_IOL$+=","+_X$,_MXM_IOL$+=","+_X$
9130 _MWR_X1$="",_MWR_X2$=""; IF OBJ_VAL$[_X]="S" AND OBJ_DEF$[_X]<>"" THEN _MWR_X1$="STR(",_MWR_X2$=":"+QUO+OBJ_DEF$[_X]+QUO+")"
9140 _MWR_IOL$+=","+_MWR_X1$+_FORMULA$+_MWR_X2$
9142 IF OBJ_VAL$[_X]="S" AND _COL_KEY$[_X]<>"" THEN _MWR_IOL$+=","+_COL_KEY$[_X],_MEM_IOL$+=",FLDKEY"+STR(_X)+"$"
9150 IF OBJ_VAL$[_X]="N" THEN _MWR_IOL$+=",STR("+_FORMULA$+":"+QUO+_COL_FMT$[_X]+QUO+")"; IF _NO_DICT=0 OR MID(_X$,1,3)="__F" THEN _MEM_IOL$+=","+_X$+"$" ELSE _MEM_IOL$+=",FLDKEY"+STR(_X)+"$"
9160 IF _NO_DICT AND OBJ_VAL$[_X]="N" AND POS("Formula:"=OBJ_NME$[_X])<>1 THEN _X$="NUM("+_X$+")"
9180 ! IF obj_val$[x]="S"   THEN LET x$="TBL("+x$+",_TRN_TBL$)"
9190 IF OBJ_VAL$[_X]="S" THEN _X$="MID(TBL("+_X$+",_TRN_TBL$),1,245)" ! replace with 9180 when 'text' extended
9200 IF OBJ_DEF$[_X]<>"" AND (_MEM_FLG=0 OR (_MEM_FLG=1 AND OBJ_VAL$[_X]="N")) THEN _X$=_X$+":"""+OBJ_DEF$[_X]+""""
9210 IF OBJ_VAL$[_X]="S" THEN _X1$="",_X2$="" ELSE _X1$=","+QUO+"R"+QUO,_X2$=","+QUO+"#"+QUO
9220 _PRT_HDR$+=",'TEXT'(@X("+STR(_XP)+"),@Y(_PRT_LN),@X("+STR(_XP+_W1)+"),@Y(_PRT_LN+1),"+QUO+OBJ_TXT$[_X]+QUO+_X1$+")"
9225 IF _EXCEL_COUNT=1 THEN _EXCEL_HEADER$+=OBJ_TXT$[_X]+SEP ! GUI
9230 _PRT_IOL$+=",'TEXT'(@X("+STR(_XP)+"),@Y(_PRT_LN),@X("+STR(_XP+_W1)+"),@Y(_PRT_LN+1),STR("+_X$+")"+_X2$+")"; _XP=_XP+_W1+1
9231 IF _MEM_FLG THEN TRISTATE_BOX REMOVE 100+_X,ERR=*NEXT
9240 IF _X>_STAT_COLS AND (_TOT_W>=_TRU_W-2 OR _X<_COL_OFS) THEN GOTO 9295 ! gui
9241 _MAX_COL=_X; IF _MIN_COL=0 THEN _MIN_COL=_X
9250 _CUR_IOL$=_CUR_IOL$+",'TEXT'(@X("+STR(_XS)+"),@Y(_LN+_QROW),@X("+STR(_XS+_W)+"),@Y(_LN+_QROW+1)-_SL,STR("+_X$+")"+_X2$+")"
9251 _ERR_COL=_XS
9260 IF _COL_CUR=_X THEN IF _MEM_FLG=0 THEN _TTL_LN$=_TTL_LN$+_TTL_CLR$ END_IF ; IF OBJ_QRY$[_X]<>"" THEN BUTTON ENABLE -6; _QRYBTN$="Y" ELSE BUTTON DISABLE -6; _QRYBTN$="N"
9270 IF _MEM_FLG=0 THEN _TTL_LN$=_TTL_LN$+'TEXT'(@X(_XS),@Y(_QROW),@X(_XS+_W),@Y(_QROW+1)-_SL,OBJ_TXT$[_X],"C") ELSE IF _XS=0 THEN _XS_ADJ=.5 ELSE _XS_ADJ=1 END_IF ; TRISTATE_BOX 100+_X,@(MAX(_XS-.5,0),_QROW-.25,_W+_XS_ADJ,1.25)=OBJ_TXT$[_X]+"{|!Up|!Down}"; IF OBJ_STS$[_X]<>"" THEN _TRISTATE.CTL=100+_X,_TRISTATE.CTL'TIP$=_COL_TIP$[_X] END_IF ; IF _COLKEY=_X THEN TRISTATE_BOX WRITE 100+_X,STR(_ORDER[_COLKEY])
9272 _XS=_XS+_W+1
9280 IF _COL_CUR=_X THEN IF _MEM_FLG=0 THEN _TTL_LN$=_TTL_LN$+'MODE'(_QRY_COLOR$) ELSE _TRISTATE.CTL=100+_X,_TRISTATE.CTL'TEXTCOLOUR$="BLUE"
9290 _TOT_W=_TOT_W+_W; IF _TOT_W<_TRU_W-2 THEN _TOT_W=_TOT_W+1; _V_LN$=_V_LN$+'LINE'(@X(_TOT_W-.5),@Y(_QROW+1),@X(_TOT_W-.5),@Y(_TRU_H)); IF _MEM_FLG=0 THEN _TTL_LN$=_TTL_LN$+'LINE'(@X(_TOT_W-.5),@Y(_QROW),@X(_TOT_W-.5),@Y(_QROW+1)-_SL)
9295 IF _EXCEL_COUNT=1 AND OBJ_VAL$[_X]="S" THEN _EXCEL_TXT$+="@",_EXCEL_REC$+="str("+_X$+")"+SEP ELSE IF _EXCEL_COUNT=1 AND OBJ_VAL$[_X]<>"S" THEN _EXCEL_REC$+="STR("+_X$+")"+SEP,_EXCEL_TXT$+=" " ! gui
9296 IF _FORMAT_PGM$[_X]="ZZWDTE;DISPLAY" THEN _EXCEL_TXT$(LEN(_EXCEL_TXT$),1)="D" ! GUI
9300 _X=_X+1; GOTO 9040
9310 IF _PRT_IOL$="" THEN GOTO 9400
9311 IF _MEM_FLG THEN BUTTON REMOVE 100+_X,ERR=*PROCEED; IF _XS<_TRU_W THEN BUTTON 100+_X,@(MAX(_XS-.5,0),_QROW-.25,_TRU_W-_XS+1,1.25)=""; BUTTON DISABLE 100+_X ! dummy fill button
9320 _PRT_HDR$=_PRT_HDR$(2),_PRT_HDR$=CPL("IOLIST "+_PRT_HDR$,ERR=*NEXT)
9330 _PRT_IOL$=_PRT_IOL$(2),_PRT_IOL$=CPL("IOLIST "+_PRT_IOL$,ERR=9400)
9331 IF _MEM_FLG THEN _MEM_IOL$=_MEM_IOL$(2),_MEM_IOL$=CPL("IOLIST "+_MEM_IOL$,ERR=9400); _MWR_IOL$=_MWR_IOL$(2),_MWR_IOL$=CPL("IOLIST "+_MWR_IOL$,ERR=9400); _MXM_IOL$=_MXM_IOL$(2),_MXM_IOL$=CPL("IOLIST "+_MXM_IOL$,ERR=9400)
9340 _CUR_IOL$=CPL("IOLIST "+_CUR_IOL$(2),ERR=9400)
9350 IF _MEM_FLG=0 THEN PRINT '-U','IMAGE'(DELETE "Title"),'IMAGE'("Title"),'FILL'(0,0),'RECTANGLE'(@X(0),@Y(_QROW),@X(_TRU_W),@Y(_QROW+1)-_SL),_TTL_LN$,'IMAGE'(""),
9360 IF _V_LN THEN PRINT 'IMAGE'(DELETE "V_lines"),'IMAGE'("V_lines"),_V_LN$,'IMAGE'(""),; _V_LN=0
9370 PRINT '+U',
9380 H_SCROLLBAR WRITE 12,_COL_CUR,_TOT_COL,ERR=*NEXT
9390 RETURN 
9400 IF _PRT_IOL$<>"" THEN _X$=_PRT_IOL$ ELSE _X$=_MSG_NO_ITM_SEL$
9410 MSGBOX _MSG_CR_LST_ERR$+SEP+_X$,_ERROR$,"!"; GOTO WRAPUP
9500 ! ^100 - Display page
9510 DISP_PAGE:
9520 _LN=1,_KNUM=0,_K${ALL}=""
9530 WAIT 0; PRINT '-U','IMAGE'(DELETE "Prtline"),'IMAGE'(DELETE "Page"),'IMAGE'("Page"),
9540 IF _K$="" AND (_SORTKEY=0 OR _ALT_PFX$[_SORTKEY]<>"") THEN _K$=MID(_R_MIN$,1,LEN(_KEYMSK$[_SORTKEY])),_KNUM=_SORTKEY
9541 IF _K$="" THEN _KNUM=_SORTKEY,_K$=KEF(_IN_FN,KNO=_KNUM)
9550 READ (_IN_FN,KEY=_K$,KNO=_KNUM,DOM=9600,ERR=9640)
9560 GOSUB SELECT_RECORD; IF _REJECT=1 THEN GOTO 9601 ELSE IF _REJECT>1 THEN GOTO 9600
9570 _K$[_LN]=_K$,_K0$[_LN]=_K0$,_REC_FLG=1
9580 PRINT (0,ERR=9650)IOL=_CUR_IOL$,
9590 _LN=_LN+1; IF _LN>_NUM_LN THEN GOTO 9610
9600 IF _USE_ARRAY=0 THEN READ (_IN_FN,KNO=_SORTKEY,END=*NEXT,ERR=9640); GOTO 9560 ELSE IF _K0$[_LN]<>"" THEN READ (_IN_FN,KEY=_K0$[_LN],KNO=0); GOTO 9560
9601 _K0${_LN:_NUM_LN}=""
9610 PRINT 'IMAGE'(""),'+U',; WAIT 0; GOSUB LN_REDRAW
9630 RETURN 
9640 PRINT 'TEXT'(@X(0),@Y(_LN+_QROW),_MSG_DATA_RDERR$+MSG(ERR)),; GOTO 9590
9650 PRINT 'TEXT'(@X(_ERR_COL),@Y(_LN+_QROW),_MSG_DATA_ERROR$+MSG(ERR)),; GOTO 9590
9700 ! ^100 - Redraw line
9710 LN_REDRAW:
9720 IF _FOCUS_AREA=0 THEN _CURCLR=12,_FILL$='FILL'(1,_CURCLR),_PRT_CLR$='_BLUE'+'WHITE' ELSE _CURCLR=4,_FILL$='FILL'(0,_CURCLR),_PRT_CLR$=_CRS$[(_CUR_LN+1)|2]
9730 _PRT_CRSR$=_FILL$+'PEN'(1,1,_CURCLR)+'RECTANGLE'(0,@Y(_CUR_LN+_QROW),@X(_TRU_W),@Y(_CUR_LN+_QROW+1)-_SL)
9740 GOSUB PRT_REC
9750 _PRT_CRSR$="",_PRT_CLR$="",_OLD_FOCUS=_FOCUS_AREA
9760 RETURN 
9800 ! ^100 - Print record at current line
9810 PRT_REC:
9820 _K0$=_K0$[_CUR_LN]; IF _RD_REC=0 THEN READ (_IN_FN,KEY=_K0$,KNO=0,DOM=9920,ERR=9930) ELSE READ RECORD (_IN_FN,KEY=_K0$,KNO=0,DOM=9920,ERR=9930)
9830 IF _VSBAR=0 THEN _SK$=PAD(KEC(_IN_FN,KNO=_SORTKEY),_SCROLL_LEN+2,$00$) ELSE IF _ALTSEL<>0 THEN _RN=_TOT_REC,_RN=RNO(_IN_FN,KNO=_SORTKEY,END=*NEXT)-1
9840 PRIME_KEY$=_K0$(_KEYADJ+1)
9850 IF _EXFLG AND _NO_DICT=0 THEN _EXKEY$=_K0$; GOSUB PARSE_EXKEY
9860 IF _MEM_FLG=0 THEN GOSUB READ_XREF_FILES; GOSUB CALL_FORMATTER
9870 _LN=_CUR_LN
9880 WAIT 0; PRINT 'IMAGE'(DELETE "Prtline"),
9890 WAIT 0; PRINT (0,ERR=9940)'IMAGE'("Prtline"),_PRT_CRSR$,_PRT_CLR$,IOL=_CUR_IOL$,'IMAGE'(""),'RM',; WAIT 0
9900 _PROGMSG$=""; PRINT 'CURSOR'(0),'MESSAGE'(_MESS$),; WAIT 0
9910 RETURN 
9920 IF _K0$[_CUR_LN]<>"" THEN _EMSG$=_MSG_REREAD_ERR$+" "+_K0$[_CUR_LN] ELSE _EMSG$=_MSG_NO_DATA_Q$ END_IF ; GOTO 9950
9930 _EMSG$=_MSG_DATA_RDERR$+MSG(ERR); GOTO 9950
9940 _EMSG$=_MSG_DATA_ERROR$+MSG(ERR); GOTO 9950
9950 WAIT 0; PRINT 'IMAGE'(DELETE "Prtline")
9960 WAIT 0; PRINT 'IMAGE'("Prtline"),_PRT_CRSR$,_PRT_CLR$,'TEXT'(0,@Y(_CUR_LN+_QROW),_EMSG$),'IMAGE'(""),'RM',; WAIT 0
9970 _PROGMSG$=""; PRINT 'CURSOR'(0),'MESSAGE'(_MESS$),
9980 RETURN 
10000 ! ^1000 - Mouse hit ----------------------------------------------------
10010 MSE_HIT:
10020 _M$=MSE,_M_LN=DEC(_M$(3,1))-_QROW
10030 IF _M_LN<0 OR _M_LN>_NUM_LN THEN _FOCUS_AREA=1; GOTO MSE_SET_FCS
10040 _FOCUS_AREA=0
10050 IF _M_LN=0 THEN GOTO MSE_COL_SEL
10060 IF EOM=$00FF91$ AND _CUR_LN=_M_LN THEN GOTO RET_SEL
10070 IF _K$[_M_LN]="" THEN GOTO MSE_SET_FCS
10080 _CUR_LN=_M_LN; GOSUB LN_REDRAW
10090 MSE_SET_FCS:GOSUB RESET_FOCUS
10100 RETURN 
10110 ! ^
10120 ! 100 - Select column by mouse
10130 MSE_COL_SEL:
10140 _C=_COL_OFS,_W=0,_M_CL=DEC(_M$(2,1))
10150 IF _M_CL>_COL_TBL[_C]+_W THEN _W=_W+1+_COL_TBL[_C],_C=_C+1; IF _C<=_COL_LST THEN GOTO *SAME ELSE IF _C<=_TOT_COL THEN _COL_CUR=_C; GOTO CR ELSE GOTO MSE_SET_FCS
10160 _COL_CUR=_C; GOSUB DISP_TTL; GOTO MSE_SET_FCS
11000 ! ^1000 - Panel GUI display --------------------------------------------
11010 ! ^10 - Create the initial dialogue box
11020 CREATE_WINDOW:
11030 _XX$=MSE,_XCHAR=DEC($00$+_XX$(10,1)),_YCHAR=DEC($00$+_XX$(11,1)),_XMAX=DEC(_XX$(27,2)),_YMAX=DEC(_XX$(29,2)),_COL_MAX=INT(_XMAX/_XCHAR)+3,_LNE_MAX=INT(_YMAX/_YCHAR)
11040 OBJ_W=MIN(OBJ_W,_COL_MAX),OBJ_H=MIN(OBJ_H,_LNE_MAX)
11050 _OBJ_W=OBJ_W,_OBJ_H=OBJ_H
11060 IF POS("+"=OBJ_STS$)<>0 THEN PERFORM "*winproc;Center_wdw" ELSE IF POS("R"=OBJ_STS$)<>0 THEN PERFORM "*winproc;Relative_wdw" ELSE GOTO DO_DIALOGUE
11070 OBJ_C=_OBJ_C,OBJ_L=_OBJ_L
11080 DO_DIALOGUE:
11082 IF %NOMAD_PANEL_INFO_PROG$<>"" THEN _SV_MAX=0,_SV_C=OBJ_C,_SV_L=OBJ_L,_SV_W=OBJ_W,_SV_H=OBJ_H; CALL %NOMAD_PANEL_INFO_PROG$+";Get_panel_info",ERR=*NEXT,SCRN_K$,PTH(%SCR_LIB),_SV_MAX,_SV_C,_SV_L,_SV_W,_SV_H; OBJ_C=_SV_C,OBJ_L=_SV_L,OBJ_W=_SV_W,OBJ_H=_SV_H; OBJ_C=MAX(0,MIN(OBJ_C,_COL_MAX-10)),OBJ_L=MAX(0,MIN(OBJ_L,_LNE_MAX-3))
11084 PRINT 'DIALOGUE'(0,0-_LNE_MAX-4,_COL_MAX+3,_LNE_MAX+2,_MAIN_TITLE$+" - "+SCRN_K$,'MODE'(ATH(_PRT_COLOR$))+'CS',OPT="-mZS"),'SR','SIZE'(OBJ_W,OBJ_H),'MOVE'(OBJ_C,OBJ_L),
11086 IF %NOMAD_QUERY_CLEAR_STATUS<>0 THEN PRINT 'MESSAGE'(DEF -0),
11087 IF _SV_MAX THEN PRINT 'SHOW'(2),
11090 _X$=OBJ(0),OBJ_W=DEC($00$+_X$(33,2)),OBJ_H=DEC($00$+_X$(35,2))
11100 _CUR_OBJ_W=OBJ_W,_CUR_OBJ_H=OBJ_H
11110 _WDW=1 ! Important - Do not delete this line
11120 IF NOT(NUL(_OBJ_QRY$)) THEN _MAINT$="Y" ELSE _MAINT$="N"
11130 GOSUB DRAW_CONTROLS
11140 RETURN 
11200 ! ^100 - Draw the controls for the option area
11210 DRAW_CONTROLS:
11211 PRINT 'MODE'(ATH(_PRT_COLOR$)),'FONT'(_LBL_FONT$),'GF','TEXT'(@X(0),@Y(1),_MSG_START_FROM$),; IF _NO_SRT=0 THEN PRINT 'TEXT'(@X(0),@Y(3),_MSG_SORT_BY$),
11230 _COLS=OBJ_W-1,_C=_COLS-1
11240 _BTN=1; IF _MAINT$="Y" THEN _BTN=_BTN++
11250 IF _NO_PRT=0 THEN _BTN=_BTN++
11260 IF _MEM_FLG THEN _BTN=_BTN++
11270 IF _BTN=1 THEN _X=20 ELSE IF _BTN<4 THEN _X=26 ELSE _X=30
11280 IF _BTN<3 THEN _BW=6 ELSE _BW=4
11290 MULTI_LINE 10,@(11,1,MAX(10,_COLS-_X),1),OPT="A",KEY="F"; _START.CTL=10
11300 ! MULTI_LINE SET_FOCUS 10,15
11310 MULTI_LINE WRITE 10,_SV_STRT$; OBTAIN (0,SIZ=1)*
11320 IF _NO_PRT THEN GOTO 11360
11330 _C=_C-_BW; BUTTON 14,@(_C,.75,_BW,1.6)=_MSG_PRINT$
11335 _PRINT.CTL=14,_PRINT.CTL'TIP$="Press to Print Query Info"
11340 WINPRT_SETUP READ _PRTR_NAME$,ERR=*NEXT; GOTO 11360
11350 BUTTON DISABLE 14 ! no printers
11360 _C=_C-_BW; BUTTON -6,@(_C,.75,_BW,1.6)=_MSG_QUERY$
11365 BUTTON HIDE -6; BUTTON 32000,@(_C,.75,_BW,1.6)="{!Tools}",MNU=99; _EXCEL.CTL=32000,_EXCEL.CTL'TIP$="Tools>Export to Excel - Selection" ! gui
11370 IF _MAINT$="Y" THEN _C=_C-_BW; BUTTON 16,@(_C,.75,_BW,1.6)=_MSG_MAINT$
11375 IF _MAINT$="Y" THEN _MAINTENANCE.CTL=16,_MAINTENANCE.CTL'TIP$="Press to Perform File Maintenance"
11380 IF _MEM_FLG THEN _C=_C-_BW,_REFRESH.CTL=17; BUTTON _REFRESH.CTL,@(_C,.75,_BW,1.6)=_MSG_REFRESH$
11390 IF _NO_SRT THEN GOTO 11440
11400 IF _NUM_KEYS=0 THEN _DRP_H=MIN(17,OBJ_H-4) ELSE _DRP_H=_NUM_KEYS+2
11410 DROP_BOX 13,@(11,3,_COLS-12,_DRP_H),KEY="S"
11420 IF _NUM_KEYS>0 THEN DROP_BOX LOAD 13,_KEYSTR${ALL}; DROP_BOX WRITE 13,_SORTKEY+1
11430 IF _NUM_KEYS=1 THEN DROP_BOX DISABLE 13
11440 PRINT 'FONT'(_PRT_FONT$),'GF','MODE'(_QRY_COLOR$),
11450 RETURN 
11500 ! ^100 - Setup the area where the query data is displayed
11510 DRAW_DISPLAY_AREA:
11520 IF _TOT_WID>_TRU_W THEN H_SCROLLBAR 12,@(0,_TRU_H,_TRU_W,1)
11530 V_SCROLLBAR 11,@(_TRU_W,_QROW,2,_TRU_H-_QROW)
11540 PRINT 'MODE'(_QRY_COLOR$),@(0,_QROW),'CL',
11550 PRINT 'BLACK','_WHITE','SF','DF',@(0,_QROW+1),'CE',
11560 IF _GW THEN FOR _L=1 TO _NUM_LN; PRINT @(0,_L+_QROW),_CLR$[(_L+1)|2],'CL',; NEXT _L
11570 RETURN 
11600 ! ^100 - Resize event logic
11610 RESIZE_LOGIC:
11620 _X$=OBJ(0),OBJ_W=DEC($00$+_X$(33,2)),OBJ_H=DEC($00$+_X$(35,2))
11630 IF OBJ_W<_MIN_W OR OBJ_H<_MIN_H THEN OBJ_W=MAX(OBJ_W,_MIN_W),OBJ_H=MAX(OBJ_H,_MIN_H); PRINT 'SIZE'(OBJ_W,OBJ_H),
11640 IF OBJ_W=_CUR_OBJ_W AND OBJ_H=_CUR_OBJ_H THEN GOTO *RETURN ! no change
11650 _CUR_OBJ_W=OBJ_W,_CUR_OBJ_H=OBJ_H
11660 GOSUB REMOVE_CONTROLS
11670 GOSUB DRAW_CONTROLS
11680 OBJ_W=OBJ_W-2,_TRU_W=OBJ_W
11690 _TRU_H=OBJ_H; IF _TOT_WID>_TRU_W THEN _TRU_H=_TRU_H-1 ELSE _COL_OFS=1
11700 _NUM_LN=_TRU_H-_QROW-1
11710 GOSUB DRAW_DISPLAY_AREA
11720 _V_LN=1; GOSUB DISP_TTL
11730 IF _CUR_LN>_NUM_LN THEN _CUR_LN=_NUM_LN
11740 _K$=_K0$[1]; GOSUB DISP_PAGE
11750 RETURN 
11800 ! ^100 - Remove the controls
11810 REMOVE_CONTROLS:
11820 MULTI_LINE REMOVE 10,ERR=*NEXT
11830 DROP_BOX REMOVE 13,ERR=*NEXT
11840 BUTTON REMOVE 14,ERR=*NEXT
11850 BUTTON REMOVE -6,ERR=*NEXT
11860 IF _MAINT$="Y" THEN BUTTON REMOVE 16,ERR=*NEXT
11870 IF _MEM_FLG THEN BUTTON REMOVE 17,ERR=*NEXT
11880 V_SCROLLBAR REMOVE 11,ERR=*NEXT
11890 H_SCROLLBAR REMOVE 12,ERR=*NEXT
11895 BUTTON REMOVE 32000,ERR=*NEXT ! gui
11900 RETURN 
11910 ! 
11920 ENABLE_CONTROLS:
11930 MULTI_LINE ENABLE 10
11935 FOR _I=1 TO _TOT_COL; TRISTATE_BOX ENABLE 100+_I,ERR=*PROCEED; NEXT 
11936 IF _NO_PRT=0 THEN BUTTON ENABLE 14,ERR=*NEXT
11937 IF _MAINT$="Y" THEN BUTTON ENABLE 16
11938 IF _MEM_FLG THEN BUTTON ENABLE 17
11939 IF _NO_SRT=0 AND _NUM_KEYS>1 THEN DROP_BOX ENABLE 13
11940 ! print '+D',
11941 RETURN 
11950 DISABLE_CONTROLS:
11951 ! print '-D',
11960 MULTI_LINE DISABLE 10
11961 FOR _I=1 TO _TOT_COL; TRISTATE_BOX DISABLE 100+_I,ERR=*PROCEED; NEXT 
11966 IF _NO_PRT=0 THEN BUTTON DISABLE 14,ERR=*NEXT
11967 IF _MAINT$="Y" THEN BUTTON DISABLE 16
11968 IF _MEM_FLG THEN BUTTON DISABLE 17
11969 IF _NO_SRT=0 AND _NUM_KEYS>1 THEN DROP_BOX DISABLE 13
11970 RETURN 
12000 ! ^1000 - HELP stuff ---------------------------------------------------
12010 DO_HELP:
12020 IF _HELP_ID$="" THEN MSGBOX _MSG_SORRY$+SEP+_MSG_HLP_NO_FLD$,_MSG_HLP_SUBSYS$,"INFO"; RETURN 
12030 SYSTEM_HELP _HELP_FL$,_HELP_ID$,ERR=HELP_ERR
12040 RETURN 
12050 HELP_ERR: MSGBOX _MSG_HLP_INVDEF$,_MSG_HLP_SUBSYS$,"!"; RETURN 
12100 ! ^100 - Get help file and reference id
12110 GET_HELP:
12120 _HELP_ID$=%SCR_DEF_H_ID$,_HELP_FL$=%SCR_DEF_H_FL$
12130 _X$=OBJ_HLP$; IF _X$="" THEN RETURN 
12140 IF _X$(1,1)=QUO THEN _X$=EVS(_X$,ERR=BAD_HELP) ELSE IF _X$(1,1)="=" THEN _X$=EVS(_X$(2),ERR=BAD_HELP)
12150 _O=POS(";"=_X$); IF _O<>0 THEN _HELP_FL$=_X$(1,_O-1),_X$=_X$(_O+1)
12160 _HELP_ID$=_X$; RETURN 
12170 BAD_HELP: MSGBOX _MSG_HLP_INVSPC$+SEP+_X$,_MSG_HLP_SUBSYS$,"!"; RETURN 
12500 ! ^500  - Initialization Procedure
12510 INIT_PROCEDURE:
12520 _X$=LST($000098050000FF$); _P=POS(QUO=_X$),_X$=_X$(1,_P-1)+OBJ_DSP$
12540 EXECUTE _X$
12550 RETURN 
13000 ! ^1000 - IOLISTS ------------------------------------------------------
13010 IOLIST OBJ_NME$,OBJ_C,OBJ_L,OBJ_W,OBJ_H,OBJ_TYPE$,OBJ_TXT$,OBJ_VAL$,OBJ_TAB,OBJ_DEF$,OBJ_DSP$,OBJ_FCS$,OBJ_SEL$,OBJ_MSG$,OBJ_HLP$,OBJ_ATTR$,OBJ_IDX$,OBJ_HOTKEY$,OBJ_QRY$,OBJ_SEC$,OBJ_STS$,OBJ_GRP$,OBJ_NULL$,OBJ_TAG$,OBJ_TBL$,OBJ_INP$,OBJ_OUT$,OBJ_VALID$,OBJ_CLASS$,OBJ_TIP$,OBJ_ORIG$,OBJ_FONT$,OBJ_COLOR$,OBJ_LISTBOX_TYPE$,OBJ_SEP$,OBJ_SCRATCH$,OBJ_POPUP$,OBJ_SIZING$,OBJ_LOGIC1$,OBJ_LOGIC2$,OBJ_POPUP_LOGIC$
13020 IOLIST FIELD${ALL}
13030 IOLIST DDF_IOLOBJ$,DDF_NAME$,DDF_DESC$,DDF_TYPE$,DDF_LEN$,DDF_OCC$,DDF_FORMAT$,DDF_VALID$,DDF_PRINT$,DDF_HELP$,DDF_NOTES$,DDF_KEYDEF$,DDF_QUERY$,DDF_CLASS$,DDF_FLAGS$,DDF_DFLT$,DDF_ALT_NAME$
14000 ! ^1000 - Get message library info
14010 SETUP_MESSAGES:
14020 _SV_MSGLIB$=MSG(*)
14030 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
14040 _QRY_MSGLIB$="*msglib."+_LANG$; MESSAGE_LIB _QRY_MSGLIB$,ERR=*NEXT; GOTO SET_MSG
14050 _QRY_MSGLIB$="*msglib.en"; MESSAGE_LIB _QRY_MSGLIB$
14060 SET_MSG:
14070 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
14071 _MSG_AVERAGE$=MSG("AVERAGE")
14072 _MSG_ABORT$=MSG("CLICKABORT")
14073 _MSG_CANT_CONT$=MSG("CANT_CONT")
14080 _MSG_CNVEXP_ERR$=MSG("CNVEXP_ERR")
14085 _MSG_X$=MSG("COL_NOTFND","^","^"),_P1=POS("^"=_MSG_X$,1,1),_P2=POS("^"=_MSG_X$,1,2); _MSG_COL_NOT_FND1$=_MSG_X$(1,_P1-1),_MSG_COL_NOT_FND2$=_MSG_X$(_P1+1,_P2-_P1),_MSG_COL_NOT_FND3$=_MSG_X$(_P2+1)
14090 _MSG_CONTINUE$=MSG("CONTINUE?")
14100 _MSG_CR_LST_ERR$=MSG("CR_LST_ERR")
14110 _MSG_DATA_ERROR$=MSG("DATA_ERROR")
14120 _MSG_DATA_RDERR$=MSG("DATA_RDERR")
14121 _MSG_DEFAULT$=MSG("DEFAULT")
14130 _MSG_DO_MAINT$=MSG("DO_MAINT")
14140 _MSG_FILFNDERRX$=MSG("FILFNDERRX")
14150 _MSG_FILE$=MSG("FILE")
14160 _MSG_FILOPNERRQ$=MSG("FILOPNERRQ")
14170 _MSG_FLD$=MSG("FLD#")
14180 _MSG_HLP_INVDEF$=MSG("HLP_INVDEF")
14190 _MSG_HLP_INVSPC$=MSG("HLP_INVSPC")
14200 _MSG_HLP_NO_FLD$=MSG("HLP_NO_FLD")
14210 _MSG_HLP_SUBSYS$=MSG("HLP_SUBSYS")
14220 _MSG_KEY$=MSG("KEY:")
14221 _MSG_NOKEY$=MSG("KEY_INCMPL")
14222 _MSG_LOAD_ERROR$=MSG("ERR_LD_REC")
14230 _MSG_MAINT$=MSG("!MAINT")
14231 _MSG_MAXIMUM$=MSG("MAXIMUM")
14232 _MSG_MINIMUM$=MSG("MINIMUM")
14233 _MSG_NO_COLUMNS$=MSG("QRY_NO_COL")
14240 _MSG_NO_DATA$=MSG("NO_DATA")
14250 _MSG_NO_DATA_Q$=MSG("NO_DATA_Q")
14260 _MSG_NO_ITM_SEL$=MSG("NO_ITM_SEL")
14270 _MSG_NO_SUB_QRY$=MSG("NO_SUB_QRY")
14271 _MSG_NOT_TABLE$=MSG("NOT_TABLE","")
14280 _MSG_PAGE$=MSG("PAGE")
14290 _MSG_PATH$=MSG("PATH")
14300 _MSG_PRIME_KEY$=MSG("PRIME_KEY")
14310 _MSG_PRINT$=MSG("!PRINT")
14320 _MSG_QRY_ERROR$=MSG("QRY_ERROR")
14330 _MSG_QRY_RNGINI$=MSG("QRY_RNGINI")
14340 _MSG_QUERY$=MSG("!QUERY")
14341 _MSG_NOT_AVAILABLE$=MSG("REC_NOTAVL")
14350 _MSG_REC_PRT$=MSG("REC_PRT")
14360 _MSG_REFRESH$=MSG("!REPEAT")
14361 _MSG_X$=MSG("QRY_LD_ERR","^"),_P=POS("^"=_MSG_X$),_MSG_REC_MISSING1$=_MSG_X$(1,_P-1),_MSG_REC_MISSING2$=_MSG_X$(_P+1)
14370 _MSG_X$=MSG("REC_PRT_OF","","^"),_P=POS("^"=_MSG_X$),_MSG_REC_PRT_OF1$=_MSG_X$(1,_P-1),_MSG_REC_PRT_OF2$=_MSG_X$(_P+1)
14371 _MSG_X$=MSG("RELOAD","^"),_P=POS("^"=_MSG_X$),_MSG_RELOAD1$=_MSG_X$(1,_P-1),_MSG_RELOAD2$=_MSG_X$(_P+1)
14380 _MSG_REREAD_ERR$=MSG("REREAD_ERR")
14390 _MSG_TEST_ERROR$=MSG("TEST_ERROR")
14400 _MSG_SORT_BY$=MSG("SORT_BY")
14410 _MSG_SORRY$=MSG("SORRY")
14420 _MSG_START_FROM$=MSG("START_FROM")
14421 _MSG_TOTAL$=MSG("TOTAL")
14422 _MSG_USER_ABORT$=MSG("USER_ABORT")
14423 _MSG_WARNING$=MSG("WARNING")
14430 MESSAGE_LIB _SV_MSGLIB$
14440 RETURN 
15000 ! ^1000 - Memory File Setup routines ----------------------------------------------
15010 ! ^10 - Set up column keys for odbc files
15020 ODBC_SORT_KEYS:
15030 _KEYNUM=0,_FORMULA_CNT=0
15040 DIM _ODB_IOL$[0:_NXREF],_LST_IOL$[0:_NXREF]
15050 FOR _I=0 TO _NXREF
15060 IF _I=0 THEN _O_NAME$=_FILENAME$ ELSE _O_NAME$=PTH(_XFN[_I])
15070 _P=POS(";"=_O_NAME$),_DATABASE$=_O_NAME$(1,_P-1),_TABLENAME$=_O_NAME$(_P+1); _P=POS(";"=_TABLENAME$),_TABLENAME$=TBL(_P>0,_TABLENAME$,_TABLENAME$(1,_P-1))
15080 _ODB_FN=HFN; OPEN (_ODB_FN)_DATABASE$; WRITE RECORD (_ODB_FN)"SELECT * FROM "+QUO+_TABLENAME$+QUO; _ODB_IOL$[_I]=";"+UCS(KEN(_ODB_FN,IND=3)); CLOSE (_ODB_FN)
15090 _ODB_FN=HFN; OPEN (_ODB_FN,IOL=*,ERR=*NEXT)_O_NAME$; _LST_IOL$[_I]=UCS(LST(IOL(_ODB_FN))),_P=POS(" "=_LST_IOL$[_I]),_LST_IOL$[_I]=","+_LST_IOL$[_I](_P+1)+","; CLOSE (_ODB_FN); CONTINUE
15100 MSGBOX _O_NAME$+_MSG_NOT_TABLE$,_MSG_CANT_CONT$,"STOP"; GOTO WRAPUP
15110 NEXT 
15120 ! Primary key
15130 _KNUM=0
15140 _P=POS("KEY="=UCS(_FILENAME$),1,_KNUM+1); IF _P=0 THEN MSGBOX _MSG_NOKEY$,_MSG_WARNING$,"STOP"; GOTO WRAPUP
15141 _PRIME$=_FILENAME$(_P+4),_P=POS(";"=_PRIME$); IF _P THEN _PRIME$=_PRIME$(1,_P-1) END_IF ; _PRIME$+=","
15150 _PS=POS(","=_PRIME$); IF _PS=0 THEN GOTO 15240
15160 _PRIME_SEG$=_PRIME$(1,_PS-1); _X$=_PRIME_SEG$; GOSUB GET_FIELD_INFO
15170 _KEYMSK$[0]+=DIM(_COL_LEN,$00$)
15180 FOR _KSEG=1 TO _TOT_COL
15190 IF _PRIME_SEG$=OBJ_NME$[_KSEG] THEN EXITTO 15210
15200 NEXT _KSEG
15210 IF OBJ_TXT$[_KSEG]<>"" THEN _PRIME_SEG$=OBJ_TXT$[_KSEG]
15220 IF _KNUM=_MEMKEY THEN _KEYSTR$[0]+=_PRIME_SEG$+","
15230 _PRIME$=_PRIME$(_PS+1); GOTO 15150
15240 _KEYSTR$[0]=STP(_KEYSTR$[0],1,",")
15250 _COL_FMT$[0]=""; IF _MEMKEY=0 AND _COL_TYP$="NUM" AND POS(","=_KEYSTR$[0])=0 THEN _COL_FMT$[0]=DIM(_COL_LEN,"0") ! pk is single numeric index
15260 IF _KNUM=0 THEN _PK_LEN=LEN(_KEYMSK$[0])
15270 IF _KNUM<>_MEMKEY THEN _KNUM=_MEMKEY; GOTO 15140
15280 _KEYSTR$[0]+=" ("+_MSG_DEFAULT$+")"
15290 IF _NO_DICT THEN GOSUB LOAD_COLUMN_KEYS; RETURN 
15300 ! Column keys
15310 FOR _KEYNUM=1 TO _TOT_COL
15320 IF OBJ_TXT$[_KEYNUM]="" THEN _KEYSTR$[_KEYNUM]=OBJ_NME$[_KEYNUM] ELSE _KEYSTR$[_KEYNUM]=OBJ_TXT$[_KEYNUM]
15330 IF POS("Formula:"=OBJ_NME$[_KEYNUM])=1 THEN GOSUB DO_FORMULA; CONTINUE
15340 IF OBJ_VAL$[_KEYNUM]="N" THEN _KEYDEF$[_KEYNUM]=_NME_TBL$[_KEYNUM]+"$" ELSE IF _COL_KEY$[_KEYNUM]="" THEN _KEYDEF$[_KEYNUM]=_NME_TBL$[_KEYNUM] ELSE _KEYDEF$[_KEYNUM]="FLDKEY"+STR(_KEYNUM)+"$"
15350 _X$=OBJ_NME$[_KEYNUM]; GOSUB GET_FIELD_INFO
15360 IF _COL_TYP$<>"NUM" THEN _COL_FMT$[_KEYNUM]=""; _KEYMSK$[_KEYNUM]=DIM(_COL_LEN,$00$)+_KEYMSK$[0] ELSE _COL_FMT$[_KEYNUM]="+"+DIM(_N1,"0")+"."+DIM(_N2,"00"); _KEYMSK$[_KEYNUM]=DIM(LEN(_COL_FMT$[_KEYNUM]),$00$)+_KEYMSK$[0]
15370 NEXT _KEYNUM
15380 _NUM_KEYS=_KEYNUM
15390 RETURN 
15400 ! ^100 - Scan odb_iol$ for field info
15410 GET_FIELD_INFO:
15420 _COL_TYP$="",_COL_LEN=0,_N1=0,_N2=0
15430 IF _KEYNUM=0 THEN _O_IDX=0 ELSE _P=POS(_X$=_NME_TBL$[_KEYNUM]),_NME_PFX$=_NME_TBL$[_KEYNUM](1,_P-1); _O_IDX=(POS(_NME_PFX$=_LNK_PFX$)-1)/5
15440 IF _KEYNUM=0 THEN _P=POS(";"+UCS(_X$)+","=_ODB_IOL$[_O_IDX]); GOTO 15480
15450 _I=1,_CHK$="$,:"
15460 _P=POS(","+UCS(_X$)+_CHK$(_I,1)=_LST_IOL$[_O_IDX]); IF _P=0 THEN _I++; IF _I<4 THEN GOTO *SAME ELSE MSGBOX _MSG_COL_NOT_FND1$+_X$+_MSG_COL_NOT_FND2$+_O_NAME$(6,POS(";"=_O_NAME$,1,2)-6)+_MSG_COL_NOT_FND3$,_MSG_WARNING$; _COL_LEN=_COL_TBL[_KEYNUM]; RETURN 
15470 _OC=POS(","=_LST_IOL$[_O_IDX](1,_P),1,0),_P=POS(";"=_ODB_IOL$[_O_IDX],1,_OC)
15480 _P+=+LEN(_X$)+2
15490 _PT=POS(UCS(_ODB_IOL$[_O_IDX](_P,4))="DATETIME"); IF _PT=1 THEN _COL_TYP$="DATE",_COL_LEN=10; GOTO 15520 ELSE IF _PT=5 THEN _COL_TYP$="TIME",_COL_LEN=19; GOTO 15520
15500 _P1=_P+POS(")"=_ODB_IOL$[_O_IDX](_P)); _COL_TYP$=_ODB_IOL$[_O_IDX](_P,3),_L$=_ODB_IOL$[_O_IDX](_P+4,_P1-_P-5)
15510 IF _COL_TYP$="NUM" THEN _P=POS(","=_L$),_N1=NUM(_L$(1,_P-1)),_N2=NUM(_L$(_P+1)),_COL_LEN=_N1+_N2 ELSE _COL_LEN=MIN(NUM(_L$),128)
15520 IF OBJ_DEF$[_KEYNUM]<>"" THEN _COL_LEN=MAX(_COL_LEN,LEN(OBJ_DEF$[_KEYNUM]))
15530 IF _COL_TYP$<>"NUM" AND _KEY_WID[_KEYNUM]>0 THEN _COL_LEN=_KEY_WID[_KEYNUM] ! override
15540 RETURN 
15600 ! ^100 - Get formula info
15610 DO_FORMULA:
15620 _FORMULA_CNT+=1,_KEYDEF$[_KEYNUM]="__F"+STR(_FORMULA_CNT)+"__$"
15630 IF OBJ_VAL$[_KEYNUM]="N" THEN GOTO 15680
15640 IF _KEY_WID[_KEYNUM]>0 THEN _COL_LEN=_KEY_WID[_KEYNUM] ELSE _COL_LEN=_COL_TBL[_KEYNUM]
15650 _COL_FMT$[_KEYNUM]="",_KEYMSK$[_KEYNUM]=DIM(_COL_LEN,$00$)+_KEYMSK$[0]
15660 IF _COL_KEY$[_KEYNUM]<>"" THEN _KEYDEF$[_KEYNUM]="FLDKEY"+STR(_KEYNUM)+"$"
15670 GOTO DONE_FORMULA
15680 _N1=0,_N2=0,_FMT_LEN=LEN(OBJ_DEF$[_KEYNUM])
15690 IF _FMT_LEN>0 THEN _P=POS("."=OBJ_DEF$[_KEYNUM]); IF _P=0 THEN _N1=_FMT_LEN ELSE _N1=_P-1,_N2=_FMT_LEN-_N1-1
15700 IF _COL_TBL[_KEYNUM]>_FMT_LEN THEN _N1+=_COL_TBL[_KEYNUM]-_FMT_LEN
15710 IF _N2=0 THEN _COL_FMT$[_KEYNUM]="+"+DIM(_N1,"0") ELSE _COL_FMT$[_KEYNUM]="+"+DIM(_N1,"0")+"."+DIM(_N2,"0")
15720 _KEYMSK$[_KEYNUM]=DIM(LEN(_COL_FMT$[_KEYNUM]),$00$)+_KEYMSK$[0]
15730 DONE_FORMULA:RETURN 
15800 ! ^100 - Setup column keys for native files
15810 LOAD_COLUMN_KEYS:
15820 _FORMULA_CNT=0
15830 FOR _KEYNUM=1 TO _TOT_COL
15840 IF OBJ_TXT$[_KEYNUM]<>"" THEN _KEYSTR$[_KEYNUM]=OBJ_TXT$[_KEYNUM] ELSE _KEYSTR$[_KEYNUM]=OBJ_NME$[_KEYNUM]
15850 IF POS("Formula:"=OBJ_NME$[_KEYNUM])=1 THEN GOSUB DO_FORMULA; GOTO 15900
15860 IF OBJ_VAL$[_KEYNUM]="S" THEN _COL_FMT$[_KEYNUM]=""; GOSUB GET_KEYMSK; IF _COL_KEY$[_KEYNUM]<>"" THEN _KEYDEF$[_KEYNUM]="FLDKEY"+STR(_KEYNUM)+"$" ELSE IF _NO_DICT=0 THEN _KEYDEF$[_KEYNUM]=_NME_TBL$[_KEYNUM] ELSE _KEYDEF$[_KEYNUM]=_FLD_NME$[_KEYNUM] END_IF END_IF ; CONTINUE
15870 IF OBJ_DEF$[_KEYNUM]="" THEN _COL_FMT$[_KEYNUM]="+"+DIM(_COL_TBL[_KEYNUM],"0")+".00" ELSE IF POS("."=OBJ_DEF$[_KEYNUM])=0 THEN _COL_FMT$[_KEYNUM]="+"+DIM(_COL_TBL[_KEYNUM],"0") ELSE _P=POS("."=OBJ_DEF$[_KEYNUM]); _COL_FMT$[_KEYNUM]="+"+DIM(_P-1,"0")+"."+DIM(LEN(OBJ_DEF$[_KEYNUM])-_P,"0")
15880 _KEYMSK$[_KEYNUM]=DIM(LEN(_COL_FMT$[_KEYNUM]),$00$)+_KEYMSK$[0]
15890 IF _NO_DICT=0 THEN _KEYDEF$[_KEYNUM]=_NME_TBL$[_KEYNUM]+"$" ELSE _KEYDEF$[_KEYNUM]="FLDKEY"+STR(_KEYNUM)+"$"
15900 NEXT _KEYNUM
15910 _NUM_KEYS=_TOT_COL+1
15920 RETURN 
15930 GET_KEYMSK:
15940 IF _KEY_WID[_KEYNUM]>0 THEN _COL_LEN=_KEY_WID[_KEYNUM]; GOTO 16010
15950 _COL_LEN=_COL_TBL[_KEYNUM]; IF _NO_DICT OR MID(OBJ_NME$[_KEYNUM],1,4)="Fld#" THEN GOTO 16010
15960 _P=POS(OBJ_NME$[_KEYNUM]=_NME_TBL$[_KEYNUM]),_NME_PFX$=_NME_TBL$[_KEYNUM](1,_P-1),_IDX=(POS(_NME_PFX$=_LNK_PFX$)-1)/5
15970 IF _IDX=0 THEN _X_FN=_IN_FN ELSE _X_FN=_XFN[_IDX]
15980 _I=1
15990 DICTIONARY READ (_X_FN,IND=_I,ERR=16010)IOL=13030; IF DDF_NAME$<>OBJ_NME$[_KEYNUM] THEN _I++; GOTO *SAME
16000 _COL_LEN=MAX(NUM(DDF_LEN$),LEN(OBJ_DEF$[_KEYNUM]))
16010 _KEYMSK$[_KEYNUM]=DIM(_COL_LEN,$00$)+_KEYMSK$[0]
16020 RETURN 
17000 ! ^ 1000 - Memory File Load routines - Load / change / refresh --------------------
17010 ! ^ 10   - Load a memory file
17020 LOAD_MEMORY:! msgbox lst(MWR_IOL$)+sep+lst(MEM_IOL$)+sep+lst(MXM_IOL$)+sep+lst(CUR_IOL$)+sep+lst(PRT_IOL$),"mwr/mem/mxm/cur/prt" ! ! debug
17025 GOSUB CHECK_DIVISION ! gui
17030 PRINT 'CURSOR'(1),
17031 PRINT 'MESSAGE'(DEF -20),'MESSAGE'('_RED'+'WHITE'+$09$+_MSG_ABORT$,1),
17040 GOSUB DISABLE_CONTROLS
17050 _NUM_REC=0,_CHECKSUM=0,_PROGCNT=0,_K$=""; _COL_TOT{1:_TOT_COL}=0,_COL_MIN{1:_TOT_COL}=0,_COL_MAX{1:_TOT_COL}=0,_COL_TIP${1:_TOT_COL}=""
17060 _K0_LEN=LEN(_KEYMSK$[0]),_KEYLEN=LEN(_KEYMSK$[0])-_PK_LEN,_KEYADJ=_KEYLEN
17070 IF ARG_1$<>"" THEN IF _COL_FMT$[0]="" THEN _START_HERE$=ARG_1$ ELSE _START_HERE$=STR(NUM(ARG_1$,ERR=*NEXT):_COL_FMT$[0])
17080 IF _SV_FN=0 THEN _SV_FN=HFN; IF _NO_DICT=0 THEN OPEN (_SV_FN,IOL=*,REC=_MN_$,ERR=OPEN_ERR)_FILENAME$ ELSE IF _RD_REC=0 THEN OPEN (_SV_FN,IOL=13020,REC=_MN_$,ERR=OPEN_ERR)_FILENAME$ ELSE _IO$=CPL("IOLIST _MN_.FIELD$[1]"); OPEN (_SV_FN,IOL=_IO$,ERR=OPEN_ERR)_FILENAME$
17090 _IN_FN=_SV_FN
17100 _M_FN=HFN; OPEN (_M_FN,IOL=_MEM_IOL$)"*memory*"
17110 IF _M_MIN$="" OR _TEST_PRIME=1 THEN _THE_KEY$=KEF(_IN_FN,KNO=_MEMKEY,END=17370) ELSE _THE_KEY$=_M_MIN$
17120 READ (_IN_FN,KEY=_THE_KEY$,KNO=_MEMKEY,DOM=*NEXT); GOTO 17140
17130 READ (_IN_FN,KNO=_MEMKEY,END=17370); _THE_KEY$=KEC(_IN_FN,KNO=_MEMKEY)
17140 PRIME_KEY$=KEC(_IN_FN,KNO=0)
17150 _PROGCNT=_PROGCNT+1; IF _PROGCNT>=50 THEN _PROGCNT=0,_PROGMSG$=_PROGMSG$+"|"; PRINT 'MESSAGE'(_PROGMSG$),; IF LEN(_PROGMSG$)>20 THEN _PROGMSG$=""
17160 IF _M_MAX$<>"" AND _TEST_PRIME=0 AND XOR(_THE_KEY$,PAD(_KEYMSK$[0],LEN(_THE_KEY$)))>_XMAX$+$FF$ THEN GOTO 17370
17170 IF _TEST_PRIME THEN _CMP_KEY$=XOR(PRIME_KEY$,PAD(_KEYMSK$[0],LEN(PRIME_KEY$))); IF (_M_MIN$<>"" AND _CMP_KEY$<_XMIN$) OR (_M_MAX$<>"" AND _CMP_KEY$>_XMAX$) THEN GOTO 17130
17180 IF _M_EXFLG AND _NO_DICT=0 THEN _EXKEY$=PRIME_KEY$; GOSUB PARSE_EXKEY
17190 IF _NO_DICT AND _EXKEY THEN _PK$=PRIME_KEY$
17200 GOSUB READ_XREF_FILES
17210 IF _M_TST$<>"" THEN _X_TST$=_M_TST$,_REJECT=0; GOSUB DO_TEST; IF _REJECT=1000 THEN EXITTO WRAPUP ELSE IF _REJECT<>0 THEN GOTO 17130
17220 FOR _I=1 TO _TOT_COL
17230 IF OBJ_STS$[_I]<>"" THEN _XN=EVN(_NME_TBL$[_I]),_COL_TOT[_I]+=_XN; IF _NUM_REC>0 THEN _COL_MIN[_I]=MIN(_XN,_COL_MIN[_I]),_COL_MAX[_I]=MAX(_XN,_COL_MAX[_I]) ELSE _COL_MIN[_I]=_XN,_COL_MAX[_I]=_XN
17240 NEXT _I
17250 GOSUB CALL_FORMATTER
17260 _WRITE_KEY$=_THE_KEY$; IF _MEMKEY>0 THEN _WRITE_KEY$=PAD(_WRITE_KEY$,_KEYLEN,$00$)+PRIME_KEY$
17270 WRITE (_M_FN,KEY=_WRITE_KEY$,DOM=17310,ERR=*NEXT)IOL=_MWR_IOL$; _NUM_REC+=1; GOTO 17300
17280 IF ERR=31 OR ERR=33 THEN EXITTO ERR_EXIT
17290 MSGBOX _MSG_LOAD_ERROR$+SEP+PRIME_KEY$+SEP+MSG(ERR)+SEP+SEP+_MSG_CONTINUE$,"Error","YESNO",_YESNO$; IF _YESNO$="NO" THEN EXITTO WRAPUP
17300 IF _COLKEY=0 AND _MAINT_KEY$<>"" THEN IF _MAINT_KEY$=PRIME_KEY$ THEN _MAINT_KEY$=_WRITE_KEY$; ARG_1$=_WRITE_KEY$
17310 IF _NUM_REC=_NUM_LN AND _STRT_CNT=0 THEN _IN_FN=_M_FN,_K$=""; GOSUB DISP_PAGE; _IN_FN=_SV_FN; PRINT 'CURSOR'(1), ! Display the initial page
17320 IF _START_HERE$<>"" AND _STRT_CNT=0 THEN IF _THE_KEY$>=_START_HERE$ THEN _START_HERE$=_THE_KEY$,_STRT_CNT=1
17330 IF _STRT_CNT>0 THEN IF _STRT_CNT<=_NUM_LN THEN _STRT_CNT++ ELSE _STRT_CNT=-1; _IN_FN=_M_FN,_K$=_START_HERE$; GOSUB DISP_PAGE; _IN_FN=_SV_FN,_K0$=_START_HERE$,_START_HERE$=""; PRINT 'CURSOR'(1), ! Display start @ page
17340 _CHECKSUM+=1
17350 OBTAIN (0,TIM=0,ERR=*NEXT)'ME',*,'MN'; IF CTL=-1401 OR CTL=4 OR EOM=$1B$ THEN MSGBOX _MSG_USER_ABORT$,_MSG_WARNING$; GOTO 17370
17360 GOTO 17130
17370 _IN_FN=_M_FN,_TOT_REC=_NUM_REC
17375 IF STP(RESULT$)<>"" THEN GOTO 17382 ! GUI
17380 IF _NUM_REC<_CHECKSUM THEN MSGBOX _MSG_REC_MISSING1$+STR(_CHECKSUM-_NUM_REC)+_MSG_REC_MISSING2$,_MSG_WARNING$
17390 FOR _I=1 TO _TOT_COL
17400 IF OBJ_STS$[_I]="" THEN CONTINUE
17410 IF POS("T"=OBJ_STS$[_I]) THEN _COL_TIP$[_I]+=_MSG_TOTAL$+"="+STR(_COL_TOT[_I])+"   "
17420 IF POS("A"=OBJ_STS$[_I]) AND _TOT_REC>0 THEN _COL_TIP$[_I]+=_MSG_AVERAGE$+"="+STP(STR(_COL_TOT[_I]/_TOT_REC:OBJ_DEF$[_I]),0)+"   "
17430 IF POS("M"=OBJ_STS$[_I]) THEN _COL_TIP$[_I]+=_MSG_MINIMUM$+"="+STP(STR(_COL_MIN[_I]:OBJ_DEF$[_I]),0)+"   "
17440 IF POS("X"=OBJ_STS$[_I]) THEN _COL_TIP$[_I]+=_MSG_MAXIMUM$+"="+STP(STR(_COL_MAX[_I]:OBJ_DEF$[_I]),0)
17450 IF _I>=_MIN_COL AND _I<=_MAX_COL THEN _TRISTATE.CTL=100+_I,_TRISTATE.CTL'TIP$=STP(_COL_TIP$[_I],1)
17460 NEXT _I
17470 _REFRESH.CTL'TIP$=_MSG_RELOAD1$+STR(_TOT_REC)+_MSG_RELOAD2$
17480 PRINT 'CURSOR'(0),'MESSAGE'(DEF -0),'MESSAGE'(_MESS$),
17490 GOSUB ENABLE_CONTROLS
17500 RETURN 
17600 ! ^ 100
17610 CHANGE_MEMORY_FILE:
17620 PRINT 'CURSOR'(1),
17630 GOSUB DISABLE_CONTROLS
17640 IF _COLKEY<>0 AND _SORTKEY<>_COLKEY THEN _ORDER[_COLKEY]=0; TRISTATE_BOX WRITE 100+_COLKEY,"0",ERR=*NEXT
17650 _COLKEY=_SORTKEY,_SORTKEY=0
17660 IF _COLKEY>0 AND _COLKEY<>_COL_CUR THEN _COL_CUR=_COLKEY; GOSUB DISP_TTL
17670 _ORDER[_COLKEY]+=1; IF _ORDER[_COLKEY]=3 THEN _ORDER[_COLKEY]=1
17680 TRISTATE_BOX WRITE 100+_COLKEY,STR(_ORDER[_COLKEY]),ERR=*NEXT
17690 IF _IN_FN<>_M_FN THEN CLOSE (_IN_FN)
17700 IF _COLKEY>0 THEN _KEYLEN=LEN(_KEYMSK$[_COLKEY])-_K0_LEN,_KEYADJ=LEN(_KEYMSK$[_COLKEY])-_PK_LEN ELSE _KEYLEN=LEN(_KEYMSK$[_COLKEY])-_PK_LEN,_KEYADJ=_KEYLEN
17710 IF _COLKEY=0 THEN _IN_FN=_M_FN; GOTO 17810
17720 _IN_FN=HFN; OPEN (_IN_FN,IOL=_MXM_IOL$)"*memory*"
17730 _THE_KEY$=KEF(_M_FN); READ (_M_FN,KEY=_THE_KEY$)
17740 _KEYVAL$=EVS(_KEYDEF$[_COLKEY]); IF _MEMKEY=0 THEN PRIME_KEY$=_THE_KEY$ ELSE PRIME_KEY$=_THE_KEY$(_K0_LEN-_PK_LEN+1)
17750 IF _MAINT_KEY$<>"" THEN IF _MAINT_KEY$=PRIME_KEY$ THEN _MAINT_KEY$=_KEYVAL$; ARG_1$=PAD(_KEYVAL$,LEN(_KEYMSK$[_COLKEY])-LEN(_KEYMSK$[0]),$00$)+_THE_KEY$
17755 IF _FORMAT_PGM$[_COLKEY]="ZZWDTE;DISPLAY" THEN CALL "ZZWDTE;VALIDATE",_KEYVAL$ ! GUI
17760 IF _COL_FMT$[_COLKEY]="" THEN _KEYVAL$=PAD(_KEYVAL$,LEN(_KEYMSK$[_COLKEY])-LEN(_KEYMSK$[0]),$00$) ELSE IF _KEYVAL$(1,1)="+" THEN _KEYVAL$(1,1)=XOR(_KEYVAL$(1,1),$FF$) ELSE _KEYVAL$=XOR(_KEYVAL$,DIM(LEN(_KEYVAL$),$FF$)) ! for sorting
17770 IF _ORDER[_COLKEY]=2 THEN _KEYVAL$=XOR(_KEYVAL$,DIM(LEN(_KEYVAL$),$FF$))
17780 WRITE (_IN_FN,KEY=_KEYVAL$+_THE_KEY$,ERR=*NEXT); GOTO 17800
17790 IF ERR=31 OR ERR=33 THEN EXITTO ERR_EXIT
17800 READ (_M_FN,END=*NEXT); _THE_KEY$=KEC(_M_FN); GOTO 17740
17810 PRINT 'CURSOR'(0),
17820 GOSUB ENABLE_CONTROLS
17830 RETURN 
17900 ! ^ 100
17910 REFRESH_MEMORY:
17920 _REFRESH_VAL$=_K0$[1]
17930 CLOSE (_M_FN); IF _IN_FN<>_M_FN THEN CLOSE (_IN_FN)
17940 GOSUB GET_FILE_INFO
17950 _SORTKEY=_COLKEY+1,_ORDER[_COLKEY]-=1; DROP_BOX WRITE 13,_SORTKEY,ERR=*PROCEED; GOSUB CHANGE_KEY
17960 _REFRESH_VAL$=""
17970 RETURN 
18000 SEL_REC:! GUI 18000-18999
18001 JJ$=""
18002 FOR AA=1 TO 100; IF POS("Formula:"=OBJ_NME$[AA])<>0 THEN JJ$=JJ$+OBJ_NME$[AA]+"\"
18003 NEXT AA
18005 JJ$=JJ$+"\"
18010 PROCESS "UTGSEL","../UTG/UT.EN",_EXCEL_REC$,_EXCEL_HEADER$,_EXCEL_LEN$,_EXCEL_TXT$,RESULT$,JJ$
18015 IF STP(RESULT$)<>"" THEN EXECUTE RESULT$ ELSE RETURN 
18017 IF _MEM_FLG=0 THEN XX=POS("THEN GOTO"=RESULT$),RESULT$=RESULT$(1,XX-1)+"THEN A=A ELSE _REJECT=2",RESULT$(1,5)="08135",_EXCEL_STM$=RESULT$; EXECUTE RESULT$; GOSUB CHANGE_KEY; GOTO 18030
18018 ! IF _MEM_FLG<>0 THEN XX=POS("THEN GOTO"=RESULT$),RESULT$=RESULT$(1,XX-1)+"THEN A=A ELSE _REJECT=2",RESULT$(1,5)="08160",_EXCEL_STM$=RESULT$; EXECUTE RESULT$
18020 GOSUB REFRESH_MEMORY
18025 ! DELETE 8160
18030 RESULT$=""
18040 DELETE 17245
18200 RETURN 
18210 OPTIONS:
18220 OPT_MNU$="[&Export to Excel=1,&Selection=2,E&xit=3]"
18230 POPUP_MENU OPT_MNU$,OP
18240 ON OP GOTO *RETURN,EXCEL,SEL_REC,*RETURN
18250 RETURN 
18260 EXCEL:
18270 CALL "UTGQRY;EXPORT",_EXCEL_REC$,_EXCEL_HEADER$,_EXCEL_LEN$,_EXCEL_TXT$,_TOT_COL,_NXREF,_XFN{ALL},_XREC{ALL},_IN_FN,_TRN_TBL$,_XKEY${ALL},_XKNO{ALL},_FORMAT_PGM${ALL},_NO_DICT,_MEM_FLG,_NME_TBL${ALL},_FLD_NME${ALL},_R_MIN$,_R_MAX$,_EXCEL_STM$,_SORTKEY ! gui
18280 RETURN 
19000 CHECK_DIVISION:
19010 IF NUL(MID(%X3$,333,2)) THEN RETURN 
19015 IF _MEM_FLG THEN STM_NUM$="17245 ",STM_NUM1$=" then goto 17300" ELSE STM_NUM$="08137 ",STM_NUM1$=" then _reject=2"
19020 FOR AA=1 TO _TOT_COL
19030 _TMP_DIV$=_NME_TBL$[AA]
19040 IF POS("_DIV"=_TMP_DIV$)=0 THEN CONTINUE
19045 IF POS("AR1.CUST_DIV$"=_TMP_DIV$)<>0 THEN RESULT$=STM_NUM$+" iF stp(AR1.cust_div$)<>"+QUO+QUO+" and MID(%X3$,333,2)<> AR1.CUST_DIV$ "+STM_NUM1$; EXECUTE RESULT$; EXITTO END_DIVISION
19049 IF POS("FS1.CUST_DIV$"=_TMP_DIV$)<>0 THEN RESULT$=STM_NUM$+" iF stp(fs1.cust_div$)<>"+QUO+QUO+" and MID(%X3$,333,2)<> FS1.CUST_DIV$ "+STM_NUM1$; EXECUTE RESULT$; EXITTO END_DIVISION
19050 IF POS("CUST_DIV$"=_TMP_DIV$)<>0 THEN RESULT$=STM_NUM$+" iF stp(_mn_.cust_div$)<> "+QUO+QUO+" and MID(%X3$,333,2)<> _MN_.CUST_DIV$ "+STM_NUM1$; EXECUTE RESULT$; EXITTO END_DIVISION
19052 IF POS("ORDER_DIV$"=_TMP_DIV$)<>0 THEN RESULT$=STM_NUM$+" IF MID(%X3$,333,2)<> _MN_.ORDER_DIV$ "+STM_NUM1$; EXECUTE RESULT$; EXITTO END_DIVISION
19055 IF POS("QUOTE_DIV$"=_TMP_DIV$)<>0 THEN RESULT$=STM_NUM$+" IF MID(%X3$,333,2)<> _MN_.QUOTE_DIV$ "+STM_NUM1$; EXECUTE RESULT$; EXITTO END_DIVISION
19060 NEXT 
19070 END_DIVISION:
19080 RETURN 
