0010 ! ARGARZ - Conversion of the exp. date in ARZ file to "MMYY"
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 10/05/09 - 13.8425 - jdf - SSP# 231477
0037 REM "231477-After their new release the expiration date in AR-S1-19     
0040 REM "Copyright 2009 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "ARGARZ","../ARG/AR.EN"
0060 EXIT 
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,Q0$,Q1$
0100 SETERR 9000
0105 INIT:
0106 PRINT 'CURSOR'(0) ! SSP#230362 - changed from 8 to 0 to get rid of smiley 
0110 X0$="ARGARZ",X1$="Conversion Expiration Date Utility"
0120 DIM Z0$(80,"-")
0130 K0=20,K1=1
0135 C9=-1
0200 REM "
0240 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; IF X1>0 THEN GOTO 9920
0245 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=0246)
0295 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
0300 REM "IOLISTS
0310 IOLIST A$
0500 REM "FILES
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01O ARZ...  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0600 REM "
0620 GOSUB 8100
0630 PRINT 'CURSOR'(0); RETURN 
0640 IF Q1$="" THEN CALL "ZZPROM",".Y",X3$,Z,"Proceed?","","",0; ON Z GOTO 0641,9900
0650 PROCEED:
0655 GOSUB FIND_FORMAT ! find the date format
0700 REM CALL "ZZINIT",STR(Z[2]:"00"); CALL "ZZINIT",STR(Z[4]:"00")
0750 DIM A$(180)
0950 ML_MESS1.CTL'VALUE$="Converting expiration date of format "+DATE_FT$
0990 READ (Z[1],KEY="",DOM=0991)
1000 K$=KEY(Z[1],END=5000); READ RECORD (Z[1],KEY=K$)A$
1030 GOSUB 3000
1050 GOTO 1000
3000 REM 
3020 REM C=C+1; IF MOD(C,T0)=1 THEN GOSUB 8150
3030 GOSUB UPDATE_DATE
3090 RETURN 
4000 FIND_FORMAT:
4010 SWITCH DATE_FT$
4020 CASE "MM-DD-YYYY","MM/DD/YYYY","MM*DD*YYYY","YYYY/MM/DD","YYYY-MM-DD","YYYY*MM*DD","DD/MM/YYYY","DD-MM-YYYY","DD*MM*YYYY","YYYY/DD/MM","YYYY-DD-MM","YYYY*DD*MM","MM/DD/YY","MM-DD-YY","MM*DD*YY","YY/MM/DD","YY-MM-DD","YY*MM*DD","DD/MM/YY","DD-MM-YY","DD*MM*YY","YY/DD/MM","YY-DD-MM","YY*DD*MM","MM/YYYY","MM-YYYY","MM*YYYY","YYYY/MM","YYYY-MM","YYYY*MM","MM/YY","MM-YY","MM*YY","YY/MM","YY-MM","YY*MM","MMYY","YYMM","MMYYYY","YYYYMM","MMDDYYYY","DDMMYYYY","YYYYMMDD","YYYYDDMM","MMDDYY","DDMMYY","YYMMDD","YYDDMM"
4030 BREAK
4040 CASE "MMM YYYY","MMM YY","YYYY MMM","YY MMM"
4050 BREAK
4300 DEFAULT 
4310 MSGBOX "Unknown Date Format","Error"
4320 NEXT_ID=DATE_FT.CTL; EXIT 
4330 END SWITCH 
4340 RETURN 
4500 UPDATE_DATE:
4510 IF LEN(STP(DATE_FT$))=LEN(STP(A$(40,10))) THEN {
4520 DFS=POS("/"=DATE_FT$,1,0),DFD=POS("-"=DATE_FT$,1,0),DFA=POS("*"=DATE_FT$,1,0)
4530 AVS=POS("/"=A$(40,10),1,0),AVD=POS("-"=A$(40,10),1,0),AVA=POS("*"=A$(40,10),1,0)
4540 IF (DFS=AVS AND DFS=2) OR (DFD=AVD AND DFD=2) OR (DFA=AVA AND DFA=2) AND LEN(STP(DATE_FT$))=10 THEN {
4550 SWITCH (DATE_FT$)
4555 CASE "MM/DD/YYYY","MM-DD-YYYY","MM*DD*YYYY"
4560 A$(40,10)=PAD(A$(40,2)+A$(48,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4565 BREAK
4570 CASE "YYYY/MM/DD","YYYY-MM-DD","YYYY*MM*DD"
4575 A$(40,10)=PAD(A$(45,2)+A$(42,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4580 BREAK
4585 CASE "DD/MM/YYYY","DD-MM-YYYY","DD*MM*YYYY"
4590 A$(40,10)=PAD(A$(43,2)+A$(48,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4595 BREAK
4600 CASE "YYYY/DD/MM","YYYY-DD-MM","YYYY*DD*MM"
4605 A$(40,10)=PAD(A$(48,2)+A$(42,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4610 BREAK
4615 END SWITCH 
4620  }
4625 IF (DFS=AVS AND DFS=2) OR (DFD=AVD AND DFD=2) OR (DFA=AVA AND DFA=2) AND LEN(STP(DATE_FT$))=8 THEN {
4630 SWITCH (DATE_FT$)
4635 CASE "MM/DD/YY","MM-DD-YY","MM*DD*YY"
4640 A$(40,10)=PAD(A$(40,2)+A$(46,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4645 BREAK
4650 CASE "YY/MM/DD","YY-MM-DD","YY*MM*DD"
4655 A$(40,10)=PAD(A$(43,2)+A$(40,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4660 BREAK
4665 CASE "DD/MM/YY","DD-MM-YY","DD*MM*YY"
4670 A$(40,10)=PAD(A$(43,2)+A$(46,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4675 BREAK
4680 CASE "YY/DD/MM","YY-DD-MM","YY*DD*MM"
4685 A$(40,10)=PAD(A$(46,2)+A$(40,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4690 BREAK
4695 END SWITCH 
4700  }
4705 IF (DFS=AVS AND DFS=1) OR (DFD=AVD AND DFD=1) OR (DFA=AVA AND DFA=1) AND LEN(STP(DATE_FT$))=7 THEN {
4710 SWITCH (DATE_FT$)
4715 CASE "MM/YYYY","MM-YYYY","MM*YYYY"
4720 A$(40,10)=PAD(A$(40,2)+A$(45,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4725 BREAK
4730 CASE "YYYY/MM","YYYY-MM","YYYY*MM"
4735 A$(40,10)=PAD(A$(45,2)+A$(42,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4740 BREAK
4745 END SWITCH 
4750  }
4755 IF (DFS=AVS AND DFS=1) OR (DFD=AVD AND DFD=1) OR (DFA=AVA AND DFA=1) AND LEN(STP(DATE_FT$))=5 THEN {
4760 SWITCH (DATE_FT$)
4765 CASE "MM/YY","MM-YY","MM*YY"
4770 A$(40,10)=PAD(A$(40,2)+A$(43,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4775 BREAK
4780 CASE "YY/MM","YY-MM","YY*MM"
4785 A$(40,10)=PAD(A$(43,2)+A$(40,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4790 BREAK
4795 END SWITCH 
4800  }
4805 IF (DFS=AVS AND DFS=0) OR (DFD=AVD AND DFD=0) OR (DFA=AVA AND DFA=0) AND LEN(STP(DATE_FT$))=4 THEN {
4810 SWITCH (DATE_FT$)
4815 CASE "MMYY"
4820 A$(40,10)=PAD(A$(40,2)+A$(42,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4825 BREAK
4830 CASE "YYMM"
4835 A$(40,10)=PAD(A$(42,2)+A$(40,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4840 BREAK
4845 END SWITCH 
4850  }
4855 IF (DFS=AVS AND DFS=0) OR (DFD=AVD AND DFD=0) OR (DFA=AVA AND DFA=0) AND LEN(STP(DATE_FT$))=6 THEN {
4860 SWITCH (DATE_FT$)
4862 CASE "YY MMM"
4863 GOSUB MONTH_CONV_2
4864 BREAK
4865 CASE "MMYYYY"
4870 A$(40,10)=PAD(A$(40,2)+A$(44,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4875 BREAK
4880 CASE "YYYYMM"
4885 A$(40,10)=PAD(A$(44,2)+A$(42,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4890 BREAK
4891 CASE "MMM YY"
4892 GOSUB MONTH_CONV
4893 BREAK
4895 END SWITCH 
4900  }
4902 IF (DFS=AVS AND DFS=0) OR (DFD=AVD AND DFD=0) OR (DFA=AVA AND DFA=0) AND LEN(STP(DATE_FT$))=8 THEN {
4903 SWITCH (DATE_FT$)
4904 CASE "YYYY MMM"
4905 GOSUB MONTH_CONV_2
4906 BREAK
4908 CASE "MMDDYYYY"
4909 A$(40,10)=PAD(A$(40,2)+A$(46,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4910 BREAK
4912 CASE "YYYYMMDD"
4914 A$(40,10)=PAD(A$(44,2)+A$(42,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4916 BREAK
4918 CASE "DDMMYYYY"
4920 A$(40,10)=PAD(A$(42,2)+A$(46,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4922 BREAK
4924 CASE "YYYYDDMM"
4926 A$(40,10)=PAD(A$(46,2)+A$(42,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4927 BREAK
4928 CASE "MMM YYYY"
4929 GOSUB MONTH_CONV
4930 BREAK
4931 END SWITCH 
4932  }
4934 IF (DFS=AVS AND DFS=0) OR (DFD=AVD AND DFD=0) OR (DFA=AVA AND DFA=0) AND LEN(STP(DATE_FT$))=6 THEN {
4936 SWITCH (DATE_FT$)
4938 CASE "MMDDYY"
4940 A$(40,10)=PAD(A$(40,2)+A$(44,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4942 BREAK
4944 CASE "YYMMDD"
4946 A$(40,10)=PAD(A$(42,2)+A$(40,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4948 BREAK
4950 CASE "DDMMYY"
4952 A$(40,10)=PAD(A$(42,2)+A$(44,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4954 BREAK
4956 CASE "YYDDMM"
4958 A$(40,10)=PAD(A$(44,2)+A$(40,2),10," "); WRITE RECORD (Z[1],KEY=K$)A$
4960 BREAK
4962 END SWITCH 
4964  }
4990  }
4995 RETURN 
5000 REM "EOJ
5010 REM C=T; GOSUB 8150
5030 MSGBOX "Process complete!!",MSG("CONFIRMING"),"INFO,TIM=3"
5040 GOTO 9900
6000 REM "BACKGROUND
6001 RETURN 
6005 PRINT (0,ERR=6016)'SB',
6020 REM PRINT @(0,4),"This CSI utility program will rebuild the Invoice/Customer sort file 'ASG' and  the Order/Invoice sort file 'ASU' from the Open invoice file 'AR6' and Invoice  History file 'AR8'",
6165 PRINT (0,ERR=6166)'SF',
6190 RETURN 
7000 MONTH_CONV:
7015 SWITCH UCS(A$(40,3))
7020 CASE "JAN"
7025 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("01"+A$(46,2),10," ")
7030 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("01"+A$(44,2),10," ")
7035 WRITE RECORD (Z[1],KEY=K$)A$
7037 BREAK
7040 CASE "FEB"
7045 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("02"+A$(46,2),10," ")
7050 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("02"+A$(44,2),10," ")
7055 WRITE RECORD (Z[1],KEY=K$)A$
7057 BREAK
7060 CASE "MAR"
7065 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("03"+A$(46,2),10," ")
7070 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("03"+A$(44,2),10," ")
7075 WRITE RECORD (Z[1],KEY=K$)A$
7077 BREAK
7080 CASE "APR"
7085 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("04"+A$(46,2),10," ")
7090 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("04"+A$(44,2),10," ")
7095 WRITE RECORD (Z[1],KEY=K$)A$
7097 BREAK
7100 CASE "MAY"
7105 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("05"+A$(46,2),10," ")
7110 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("05"+A$(44,2),10," ")
7115 WRITE RECORD (Z[1],KEY=K$)A$
7117 BREAK
7120 CASE "JUN"
7125 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("06"+A$(46,2),10," ")
7130 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("06"+A$(44,2),10," ")
7135 WRITE RECORD (Z[1],KEY=K$)A$
7137 BREAK
7140 CASE "JUL"
7145 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("07"+A$(46,2),10," ")
7150 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("07"+A$(44,2),10," ")
7155 WRITE RECORD (Z[1],KEY=K$)A$
7157 BREAK
7160 CASE "AUG"
7165 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("08"+A$(46,2),10," ")
7170 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("08"+A$(44,2),10," ")
7175 WRITE RECORD (Z[1],KEY=K$)A$
7177 BREAK
7180 CASE "SEP"
7185 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("09"+A$(46,2),10," ")
7190 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("09"+A$(44,2),10," ")
7195 WRITE RECORD (Z[1],KEY=K$)A$
7197 BREAK
7200 CASE "OCT"
7205 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("10"+A$(46,2),10," ")
7210 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("10"+A$(44,2),10," ")
7215 WRITE RECORD (Z[1],KEY=K$)A$
7217 BREAK
7220 CASE "NOV"
7225 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("11"+A$(46,2),10," ")
7230 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("11"+A$(44,2),10," ")
7235 WRITE RECORD (Z[1],KEY=K$)A$
7237 BREAK
7240 CASE "DEC"
7245 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("12"+A$(46,2),10," ")
7250 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("12"+A$(44,2),10," ")
7255 WRITE RECORD (Z[1],KEY=K$)A$
7257 BREAK
7260 END SWITCH 
7270 RETURN 
7300 MONTH_CONV_2:
7305 IF LEN(STR(DATE_FT$))=8 THEN MO$=A$(45,3)
7310 IF LEN(STR(DATE_FT$))=6 THEN MO$=A$(43,3)
7315 SWITCH UCS(MO$)
7320 CASE "JAN"
7325 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("01"+A$(42,2),10," ")
7330 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("01"+A$(40,2),10," ")
7335 WRITE RECORD (Z[1],KEY=K$)A$
7340 BREAK
7345 CASE "FEB"
7350 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("02"+A$(42,2),10," ")
7355 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("02"+A$(40,2),10," ")
7360 WRITE RECORD (Z[1],KEY=K$)A$
7365 BREAK
7370 CASE "MAR"
7375 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("03"+A$(42,2),10," ")
7380 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("03"+A$(40,2),10," ")
7385 WRITE RECORD (Z[1],KEY=K$)A$
7390 BREAK
7395 CASE "APR"
7400 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("04"+A$(42,2),10," ")
7405 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("04"+A$(40,2),10," ")
7410 WRITE RECORD (Z[1],KEY=K$)A$
7415 BREAK
7420 CASE "MAY"
7425 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("05"+A$(42,2),10," ")
7430 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("05"+A$(40,2),10," ")
7435 WRITE RECORD (Z[1],KEY=K$)A$
7440 BREAK
7445 CASE "JUN"
7450 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("06"+A$(42,2),10," ")
7455 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("06"+A$(40,2),10," ")
7460 WRITE RECORD (Z[1],KEY=K$)A$
7465 BREAK
7470 CASE "JUL"
7475 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("07"+A$(42,2),10," ")
7480 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("07"+A$(40,2),10," ")
7485 WRITE RECORD (Z[1],KEY=K$)A$
7490 BREAK
7495 CASE "AUG"
7500 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("08"+A$(42,2),10," ")
7505 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("08"+A$(40,2),10," ")
7510 WRITE RECORD (Z[1],KEY=K$)A$
7515 BREAK
7520 CASE "SEP"
7525 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("09"+A$(42,2),10," ")
7530 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("09"+A$(40,2),10," ")
7535 WRITE RECORD (Z[1],KEY=K$)A$
7540 BREAK
7545 CASE "OCT"
7550 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("10"+A$(42,2),10," ")
7555 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("10"+A$(40,2),10," ")
7560 WRITE RECORD (Z[1],KEY=K$)A$
7565 BREAK
7570 CASE "NOV"
7575 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("11"+A$(42,2),10," ")
7580 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("11"+A$(40,2),10," ")
7585 WRITE RECORD (Z[1],KEY=K$)A$
7590 BREAK
7595 CASE "DEC"
7600 IF LEN(STR(DATE_FT$))=8 THEN A$(40,10)=PAD("12"+A$(42,2),10," ")
7605 IF LEN(STR(DATE_FT$))=6 THEN A$(40,10)=PAD("12"+A$(40,2),10," ")
7610 WRITE RECORD (Z[1],KEY=K$)A$
7615 BREAK
7620 END SWITCH 
7625 RETURN 
8100 REM "GOSUB here, once, at the beginning, after the background is set and before the Proceed? question. Set T to total # to do (by calling ZZINFO) and T0 to the reporting interval (report every T0 number of records) this is typically 2% of total; This also prints a message (@8115),so adjust accordingly
8105 REM CALL "ZZINFO",Z[3],T9,X3$,X,T0,K,B,D,S0,S1,F$
8110 CALL "ZZINFO",Z[1],T9,X3$,T,T0,K,B,D,S0,S1,F$; T=T+X
8115 ML_MESS.CTL'VALUE$="There are "+STR(T)+" records to process"
8129 REM "Set T0, we make sure T0 is > 1, because later on we MOD and look for avalue of 1. IF T0 is 1, then nothing would get reported. We look for a result of 1 because this causes the first record to automatically start the reporting instead of waiting until the T0'th record to get the first report
8130 T0=INT(T*.02); IF T0<=1 THEN T0=2
8145 RETURN 
8150 REM "Call this each time to update the bar graph. Display horiz. bar graph given total #, T and current #, C, and time counter T1 (T1 is init'ed here and used here, just don't use it somewhere else)
8155 REM CALL "ZZBARG",X3$,"HG",7.5,1,28,T1,T,C
8195 RETURN 
9000 REM "ERROR PROCESSING
9005 IF ERR=69 THEN GOTO 9500
9010 Y5=ERR,Y6=TCB(5)
9015 SETERR 9016; Y8$=LST(PGM(Y6))
9016 SETERR 9000
9040 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
9045 REM 
9050 ON Y7 GOTO 9060,9100,9800,9070,9090
9055 REM 
9060 RETRY 
9070 SETERR 9080
9075 EXECUTE Y7$
9080 SETERR 9000; RETRY 
9090 SETERR 0000; RETRY 
9100 REM " TRANSFER CONTROL
9180 GOTO 0990
9190 GOTO 9800
9300 SETESC 9350
9310 SETERR 9350
9315 IF X3$(47,1)="N" THEN RETURN ELSE SETESC 0000; RETURN 
9350 SETERR 9000; RETURN 
9500 REM "CTRL LOGIC
9510 SETERR 9000; GOSUB 6400
9520 ON C9 GOTO 1140,2040
9900 REM "END PROGRAM
9901 END_PROC: CMD_STR$="E"
9902 PRINT 'CURSOR'(0)
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9930 SETERR 9940; Q1$=A1$; EXIT 
9940 SETESC 9350
9950 RUN "ZMENU"
9999 END 
56000 REM "231477-After their new release the expiration date in AR-S1-19     
