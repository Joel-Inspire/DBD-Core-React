0010 ! ARGCAE.1 - File Maintenance Program for AR6-A/R Open Invoices (="AR6"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Jul. 31, 2001 10:38
0030 ! ************************************************************************
0035 REM "5.7 - 01/20/25 - 13.428541 - crg - SSP# 307474
0037 REM "307474-DBD-441: Changes related to Cust PO for Summary Bill invoice
0040 REM "Copyright 2025 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 ! 
0095 PNL_INVOKE:
0097 PROCESS "ARGCAE","../ARG/AR.EN"
0098 EXIT 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="AR6"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0182 _FILE_NAME$="AR2"+%C$; _AR2=HFN; OPEN (_AR2,ERR=OPEN_ERR,IOL=*)_FILE_NAME$
0183 _FILE_NAME$="ARG"+%C$; _ARG=HFN; OPEN (_ARG,ERR=OPEN_ERR,IOL=*)_FILE_NAME$
0184 _FILE_NAME$="AR5"+%C$; _AR5=HFN; OPEN (_AR5,ERR=OPEN_ERR,IOL=*)_FILE_NAME$
0185 _FILE_NAME$="ZZPARM"; ZZPARM=HFN; OPEN (ZZPARM,ERR=OPEN_ERR)_FILE_NAME$
0186 _FILE_NAME$="ARN"+%C$; _ARN=HFN; OPEN (_ARN,ERR=OPEN_ERR)_FILE_NAME$
0187 _FILE_NAME$="FMY"+%C$; _FMY=HFN; OPEN (_FMY,ERR=OPEN_ERR)_FILE_NAME$ ! 307474
0190 DIM SEC$(255); FIND (ZZPARM,KEY="osec"+%X3_OP_ID$,DOM=*NEXT)SEC$
0193 DIM PP$(256); FIND (ZZPARM,KEY=%C$+"A/R",DOM=*NEXT)PP$
0194 FIND (ZZPARM,KEY=%C$+"AR1",DOM=*NEXT)AR1_PARAM$; SP_ON_CUST=NUM(MID(AR1_PARAM$,8,1)) ! SSP#232076
0195 IF PP$(118,1)="Y" THEN _FILE_NAME$="ASO"+%C$; _ASO=HFN; OPEN (_ASO,ERR=OPEN_ERR,IOL=*)_FILE_NAME$
0197 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=2
0430 DIM _KEYS$[1:2]; _KEYS$[1]="CUSTOMER$",_KEYS$[2]="INV_NUM$"
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 IF %CUSTOMER$<>"" THEN CUSTOMER$=%CUSTOMER$; DISABLE CONTROL CUSTOMER.CTL
0540 IF ARG_1$="" THEN _ENABLE_FLG=1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0700 ! 700 - Set up tabbing between folders
0710 INIT_FOLDER:
0720 GOSUB ENABLE_GROUPS
0730 IF _ENABLE_FLG<>1 THEN IF TAB_FLG$="<" THEN NEXT_ID=_LAST_TAB ELSE NEXT_ID=_FIRST_TAB
0740 EXIT 
0900 ! 900 - Wrapup
0910 WRAPUP:
0915 IF ARG_1$="" THEN READ DATA FROM "" TO IOL=GLOBAL_IOL
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0942 IF _AR2<>0 THEN CLOSE (_AR2); _AR2=0
0943 IF _ARG<>0 THEN CLOSE (_ARG); _ARG=0
0944 IF _AR5<>0 THEN CLOSE (_AR5); _AR5=0
0945 IF _ARN<>0 THEN CLOSE (_ARN); _ARN=0
0946 IF ZZPARM<>0 THEN CLOSE (ZZPARM); ZZPARM=0
0947 IF _ASO<>0 THEN CLOSE (_ASO); _ASO=0
0948 IF _FMY<>0 THEN CLOSE (_FMY); _FMY=0 ! 307474
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1025 IF ID$="CUSTOMER" THEN CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$; CUSTOMER$=CUST_DIV$+CUST_CODE$,%CUSTOMER$=CUSTOMER$
1030 IF _ENABLE_FLG<0 THEN _KCNT=1,_ENABLE_FLG=1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 ! CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$; CUSTOMER$=CUST_DIV$+CUST_CODE$,%CUSTOMER$=CUSTOMER$,%CUST_DIV$=CUST_DIV$,%CUST_CODE$=CUST_CODE$
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1280 NEXT_FOLDER=_FIRST_FOLDER
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=1,_ENABLE_FLG=1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=1,_ENABLE_FLG=1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=1,_ENABLE_FLG=1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=*NEXT); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2440 MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=*NEXT); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2640 MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3061 CUSTOMER$=CUST_DIV$+CUST_CODE$,%CUSTOMER$=CUSTOMER$,%CUST_DIV$=CUST_DIV$,%CUST_CODE$=CUST_CODE$,ORDER$=ORDER_DIV$+ORDER_NUM$
3063 CUR1=1; DIM CUR$(36)
3065 FOREIGN_CURR_CODE$="",FOR_CURR_EXCH_RATE=0; IF PP$(118,1)="Y" THEN READ (_ASO,KEY=FY$+ACCTPD$+INV_NUM$,DOM=*NEXT); CALL "*wingrp;show",FOREIGN_GRP.GRP$; CALL "*wingrp;enable",FOREIGN_GRP.GRP$ ELSE CALL "*wingrp;hide",FOREIGN_GRP.GRP$
3067 GOSUB SET_CHECK_BOX_FIELD_VALUES; GOSUB CALC_FIELDS
3070 IF GL_DETAIL_LINK THEN CALL "*wingrp;Show",GL_BUTTON.GRP$ ELSE CALL "*wingrp;Hide",GL_BUTTON.GRP$
3080 REFRESH_FLG=1
3095 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUSTOMER.CTL,_FIRST_FIELD=FY.CTL,_FIRST_FOLDER=FLDR.ARGCAE.1.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=1,_ENABLE_FLG=1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9340 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 GL_DETAIL_LINK$=STR(GL_DETAIL_LINK)
10030 TRANS_DETAIL_LINK$=STR(TRANS_DETAIL_LINK)
10040 INV_AMT$=STR(INV_AMT)
10050 INV_BAL$=STR(INV_BAL)
10060 DISC_AMT$=STR(DISC_AMT)
10070 CASH_IN_PROGRESS$=STR(CASH_IN_PROGRESS)
10080 ORIG_INV_AMT$=STR(ORIG_INV_AMT)
10090 STAX_BILLED$=STR(STAX_BILLED)
10100 FRT_BILLED$=STR(FRT_BILLED)
10110 NET_SALE$=STR(NET_SALE)
10120 GP$=STR(GP)
10130 TOTAL_COMM$=STR(TOTAL_COMM)
10140 COSTED_FRT$=STR(COSTED_FRT)
10150 CASH_BASIS_FRT_BILLD$=STR(CASH_BASIS_FRT_BILLD)
10160 GP_ADJ_BEFORE_COMM$=STR(GP_ADJ_BEFORE_COMM)
10170 TF_COST$=STR(TF_COST)
10180 GP_PRC$=STR(GP_PRC)
10190 AMOUNT_DUE$=STR(AMOUNT_DUE)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="GL_DETAIL_LINK",_X=GL_DETAIL_LINK.CTL,GL_DETAIL_LINK=NUM(GL_DETAIL_LINK$,ERR=NON_NUMERIC)
11030 _X$="TRANS_DETAIL_LINK",_X=TRANS_DETAIL_LINK.CTL,TRANS_DETAIL_LINK=NUM(TRANS_DETAIL_LINK$,ERR=NON_NUMERIC)
11040 _X$="INV_AMT",_X=INV_AMT.CTL,INV_AMT=NUM(INV_AMT$,ERR=NON_NUMERIC)
11050 _X$="INV_BAL",_X=INV_BAL.CTL,INV_BAL=NUM(INV_BAL$,ERR=NON_NUMERIC)
11060 _X$="DISC_AMT",_X=DISC_AMT.CTL,DISC_AMT=NUM(DISC_AMT$,ERR=NON_NUMERIC)
11070 _X$="CASH_IN_PROGRESS",_X=CASH_IN_PROGRESS.CTL,CASH_IN_PROGRESS=NUM(CASH_IN_PROGRESS$,ERR=NON_NUMERIC)
11080 _X$="ORIG_INV_AMT",_X=ORIG_INV_AMT.CTL,ORIG_INV_AMT=NUM(ORIG_INV_AMT$,ERR=NON_NUMERIC)
11090 _X$="STAX_BILLED",_X=STAX_BILLED.CTL,STAX_BILLED=NUM(STAX_BILLED$,ERR=NON_NUMERIC)
11100 _X$="FRT_BILLED",_X=FRT_BILLED.CTL,FRT_BILLED=NUM(FRT_BILLED$,ERR=NON_NUMERIC)
11110 _X$="NET_SALE",_X=NET_SALE.CTL,NET_SALE=NUM(NET_SALE$,ERR=NON_NUMERIC)
11120 _X$="GP",_X=GP.CTL,GP=NUM(GP$,ERR=NON_NUMERIC)
11130 _X$="TOTAL_COMM",_X=TOTAL_COMM.CTL,TOTAL_COMM=NUM(TOTAL_COMM$,ERR=NON_NUMERIC)
11140 _X$="COSTED_FRT",_X=COSTED_FRT.CTL,COSTED_FRT=NUM(COSTED_FRT$,ERR=NON_NUMERIC)
11150 _X$="CASH_BASIS_FRT_BILLD",_X=CASH_BASIS_FRT_BILLD.CTL,CASH_BASIS_FRT_BILLD=NUM(CASH_BASIS_FRT_BILLD$,ERR=NON_NUMERIC)
11160 _X$="GP_ADJ_BEFORE_COMM",_X=GP_ADJ_BEFORE_COMM.CTL,GP_ADJ_BEFORE_COMM=NUM(GP_ADJ_BEFORE_COMM$,ERR=NON_NUMERIC)
11170 _X$="COST",_X=TF_COST.CTL,TF_COST=NUM(TF_COST$,ERR=NON_NUMERIC)
11180 _X$="GP_PRC",_X=GP_PRC.CTL,GP_PRC=NUM(GP_PRC$,ERR=NON_NUMERIC)
11190 _X$="AMOUNT_DUE",_X=AMOUNT_DUE.CTL,AMOUNT_DUE=NUM(AMOUNT_DUE$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13001 GLOBAL_IOL:IOLIST %CUSTOMER$,%CUST_DIV$,%CUST_CODE$
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN CUST_DIV$=""
13030 IF _CLR_FLG$="R" THEN CUST_CODE$="",CUSTOMER$=""
13040 IF _CLR_FLG$="R" THEN INV_NUM$=""
13050 INV_TYPE$=""
13060 INV_DATE$=""
13070 BILLED_FROM_DIV$=""
13080 BILLED_FROM_CUST$=""
13090 CUST_PO$=""
13100 TERMS_CODE$=""
13110 SPLIT_TERMS$=""
13120 INV_DUE_DATE$=""
13130 DISC_DUE_DAY$=""
13140 ORDER_DIV$=""
13150 ORDER_NUM$="",ORDER$=""
13160 SPER_CODE$=""
13170 SPER_CODE_2$=""
13180 SPER_CODE_3$=""
13190 SPER_CODE_4$=""
13200 SPER_CODE_5$=""
13210 APPLY_TO_INV_NUM$=""
13220 AUDIT_NUM$=""
13230 CUST_CATEGORY$=""
13240 STAX_CODE$=""
13250 FY$=""
13260 ACCTPD$=""
13270 GREATEST_FY$=""
13280 GREATEST_ACCTPD$=""
13290 SHIP_DATE$=""
13300 SHIPPED_VIA$=""
13310 SUMMARY_BILL_REF$=""
13320 MULTI_STAX$=""
13330 FACTORY_JOB_NUM$=""
13340 GL_DETAIL_LINK=0
13350 TRANS_DETAIL_LINK=0
13360 INV_AMT=0
13370 INV_BAL=0
13380 DISC_AMT=0
13390 CASH_IN_PROGRESS=0
13400 ORIG_INV_AMT=0
13410 STAX_BILLED=0
13420 FRT_BILLED=0
13430 NET_SALE=0
13440 GP=0
13450 TOTAL_COMM=0
13460 COSTED_FRT=0
13470 CASH_BASIS_FRT_BILLD=0
13480 GP_ADJ_BEFORE_COMM=0
13490 TF_COST=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$ ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$ ELSE CALL "*wingrp;Disable",KEY3.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(47,"N")
15030 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15040 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15050 IF _ORIG.INV_NUM$=_CUR.INV_NUM$ OR INV_NUM$=_CUR.INV_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.INV_NUM$=INV_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$
15060 IF _ORIG.INV_TYPE$=_CUR.INV_TYPE$ OR INV_TYPE$=_CUR.INV_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.INV_TYPE$=INV_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_TYPE")+" = "+_CUR.INV_TYPE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_TYPE")+" = "+_CUR.INV_TYPE$
15070 IF _ORIG.INV_DATE$=_CUR.INV_DATE$ OR INV_DATE$=_CUR.INV_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.INV_DATE$=INV_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_DATE")+" = "+_CUR.INV_DATE$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_DATE")+" = "+_CUR.INV_DATE$
15080 IF _ORIG.BILLED_FROM_DIV$=_CUR.BILLED_FROM_DIV$ OR BILLED_FROM_DIV$=_CUR.BILLED_FROM_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.BILLED_FROM_DIV$=BILLED_FROM_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("BILL_F_D")+" = "+_CUR.BILLED_FROM_DIV$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BILL_F_D")+" = "+_CUR.BILLED_FROM_DIV$
15090 IF _ORIG.BILLED_FROM_CUST$=_CUR.BILLED_FROM_CUST$ OR BILLED_FROM_CUST$=_CUR.BILLED_FROM_CUST$ THEN GOTO *NEXT ELSE IF _ORIG.BILLED_FROM_CUST$=BILLED_FROM_CUST$ THEN _CHG2$=_CHG2$+SEP+MSG("BILL_F_C")+" = "+_CUR.BILLED_FROM_CUST$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BILL_F_C")+" = "+_CUR.BILLED_FROM_CUST$
15100 IF _ORIG.CUST_PO$=_CUR.CUST_PO$ OR CUST_PO$=_CUR.CUST_PO$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_PO$=CUST_PO$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_PO")+" = "+_CUR.CUST_PO$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_PO")+" = "+_CUR.CUST_PO$
15110 IF _ORIG.TERMS_CODE$=_CUR.TERMS_CODE$ OR TERMS_CODE$=_CUR.TERMS_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.TERMS_CODE$=TERMS_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("TERMS_CODE")+" = "+_CUR.TERMS_CODE$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TERMS_CODE")+" = "+_CUR.TERMS_CODE$
15120 IF _ORIG.SPLIT_TERMS$=_CUR.SPLIT_TERMS$ OR SPLIT_TERMS$=_CUR.SPLIT_TERMS$ THEN GOTO *NEXT ELSE IF _ORIG.SPLIT_TERMS$=SPLIT_TERMS$ THEN _CHG2$=_CHG2$+SEP+MSG("SPLI_T")+" = "+_CUR.SPLIT_TERMS$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPLI_T")+" = "+_CUR.SPLIT_TERMS$
15130 IF _ORIG.INV_DUE_DATE$=_CUR.INV_DUE_DATE$ OR INV_DUE_DATE$=_CUR.INV_DUE_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.INV_DUE_DATE$=INV_DUE_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_D_D")+" = "+_CUR.INV_DUE_DATE$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_D_D")+" = "+_CUR.INV_DUE_DATE$
15140 IF _ORIG.DISC_DUE_DAY$=_CUR.DISC_DUE_DAY$ OR DISC_DUE_DAY$=_CUR.DISC_DUE_DAY$ THEN GOTO *NEXT ELSE IF _ORIG.DISC_DUE_DAY$=DISC_DUE_DAY$ THEN _CHG2$=_CHG2$+SEP+MSG("DISC_D_D")+" = "+_CUR.DISC_DUE_DAY$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DISC_D_D")+" = "+_CUR.DISC_DUE_DAY$
15150 IF _ORIG.ORDER_DIV$=_CUR.ORDER_DIV$ OR ORDER_DIV$=_CUR.ORDER_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_DIV$=ORDER_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_DIV")+" = "+_CUR.ORDER_DIV$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_DIV")+" = "+_CUR.ORDER_DIV$
15160 IF _ORIG.ORDER_NUM$=_CUR.ORDER_NUM$ OR ORDER_NUM$=_CUR.ORDER_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_NUM$=ORDER_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_NUM")+" = "+_CUR.ORDER_NUM$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_NUM")+" = "+_CUR.ORDER_NUM$
15170 IF _ORIG.SPER_CODE$=_CUR.SPER_CODE$ OR SPER_CODE$=_CUR.SPER_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.SPER_CODE$=SPER_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("SPER_CODE")+" = "+_CUR.SPER_CODE$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPER_CODE")+" = "+_CUR.SPER_CODE$
15180 IF _ORIG.SPER_CODE_2$=_CUR.SPER_CODE_2$ OR SPER_CODE_2$=_CUR.SPER_CODE_2$ THEN GOTO *NEXT ELSE IF _ORIG.SPER_CODE_2$=SPER_CODE_2$ THEN _CHG2$=_CHG2$+SEP+MSG("SPER_C_2")+" = "+_CUR.SPER_CODE_2$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPER_C_2")+" = "+_CUR.SPER_CODE_2$
15190 IF _ORIG.SPER_CODE_3$=_CUR.SPER_CODE_3$ OR SPER_CODE_3$=_CUR.SPER_CODE_3$ THEN GOTO *NEXT ELSE IF _ORIG.SPER_CODE_3$=SPER_CODE_3$ THEN _CHG2$=_CHG2$+SEP+MSG("SPER_C_3")+" = "+_CUR.SPER_CODE_3$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPER_C_3")+" = "+_CUR.SPER_CODE_3$
15200 IF _ORIG.SPER_CODE_4$=_CUR.SPER_CODE_4$ OR SPER_CODE_4$=_CUR.SPER_CODE_4$ THEN GOTO *NEXT ELSE IF _ORIG.SPER_CODE_4$=SPER_CODE_4$ THEN _CHG2$=_CHG2$+SEP+MSG("SPER_C_4")+" = "+_CUR.SPER_CODE_4$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPER_C_4")+" = "+_CUR.SPER_CODE_4$
15210 IF _ORIG.SPER_CODE_5$=_CUR.SPER_CODE_5$ OR SPER_CODE_5$=_CUR.SPER_CODE_5$ THEN GOTO *NEXT ELSE IF _ORIG.SPER_CODE_5$=SPER_CODE_5$ THEN _CHG2$=_CHG2$+SEP+MSG("SPER_C_5")+" = "+_CUR.SPER_CODE_5$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPER_C_5")+" = "+_CUR.SPER_CODE_5$
15220 IF _ORIG.APPLY_TO_INV_NUM$=_CUR.APPLY_TO_INV_NUM$ OR APPLY_TO_INV_NUM$=_CUR.APPLY_TO_INV_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.APPLY_TO_INV_NUM$=APPLY_TO_INV_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("APPL_T_I_N")+" = "+_CUR.APPLY_TO_INV_NUM$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("APPL_T_I_N")+" = "+_CUR.APPLY_TO_INV_NUM$
15230 IF _ORIG.AUDIT_NUM$=_CUR.AUDIT_NUM$ OR AUDIT_NUM$=_CUR.AUDIT_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.AUDIT_NUM$=AUDIT_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("AUDIT_NUM")+" = "+_CUR.AUDIT_NUM$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("AUDIT_NUM")+" = "+_CUR.AUDIT_NUM$
15240 IF _ORIG.CUST_CATEGORY$=_CUR.CUST_CATEGORY$ OR CUST_CATEGORY$=_CUR.CUST_CATEGORY$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CATEGORY$=CUST_CATEGORY$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_C")+" = "+_CUR.CUST_CATEGORY$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_C")+" = "+_CUR.CUST_CATEGORY$
15250 IF _ORIG.STAX_CODE$=_CUR.STAX_CODE$ OR STAX_CODE$=_CUR.STAX_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.STAX_CODE$=STAX_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("STAX_CODE")+" = "+_CUR.STAX_CODE$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STAX_CODE")+" = "+_CUR.STAX_CODE$
15260 IF _ORIG.FY$=_CUR.FY$ OR FY$=_CUR.FY$ THEN GOTO *NEXT ELSE IF _ORIG.FY$=FY$ THEN _CHG2$=_CHG2$+SEP+MSG("FY")+" = "+_CUR.FY$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FY")+" = "+_CUR.FY$
15270 IF _ORIG.ACCTPD$=_CUR.ACCTPD$ OR ACCTPD$=_CUR.ACCTPD$ THEN GOTO *NEXT ELSE IF _ORIG.ACCTPD$=ACCTPD$ THEN _CHG2$=_CHG2$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCTPD$,_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCTPD$
15280 IF _ORIG.GREATEST_FY$=_CUR.GREATEST_FY$ OR GREATEST_FY$=_CUR.GREATEST_FY$ THEN GOTO *NEXT ELSE IF _ORIG.GREATEST_FY$=GREATEST_FY$ THEN _CHG2$=_CHG2$+SEP+MSG("GREA_F")+" = "+_CUR.GREATEST_FY$,_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GREA_F")+" = "+_CUR.GREATEST_FY$
15290 IF _ORIG.GREATEST_ACCTPD$=_CUR.GREATEST_ACCTPD$ OR GREATEST_ACCTPD$=_CUR.GREATEST_ACCTPD$ THEN GOTO *NEXT ELSE IF _ORIG.GREATEST_ACCTPD$=GREATEST_ACCTPD$ THEN _CHG2$=_CHG2$+SEP+MSG("GREA_A")+" = "+_CUR.GREATEST_ACCTPD$,_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GREA_A")+" = "+_CUR.GREATEST_ACCTPD$
15300 IF _ORIG.SHIP_DATE$=_CUR.SHIP_DATE$ OR SHIP_DATE$=_CUR.SHIP_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.SHIP_DATE$=SHIP_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("SHIP_DATE")+" = "+_CUR.SHIP_DATE$,_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SHIP_DATE")+" = "+_CUR.SHIP_DATE$
15310 IF _ORIG.SHIPPED_VIA$=_CUR.SHIPPED_VIA$ OR SHIPPED_VIA$=_CUR.SHIPPED_VIA$ THEN GOTO *NEXT ELSE IF _ORIG.SHIPPED_VIA$=SHIPPED_VIA$ THEN _CHG2$=_CHG2$+SEP+MSG("SHIP_V")+" = "+_CUR.SHIPPED_VIA$,_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SHIP_V")+" = "+_CUR.SHIPPED_VIA$
15320 IF _ORIG.SUMMARY_BILL_REF$=_CUR.SUMMARY_BILL_REF$ OR SUMMARY_BILL_REF$=_CUR.SUMMARY_BILL_REF$ THEN GOTO *NEXT ELSE IF _ORIG.SUMMARY_BILL_REF$=SUMMARY_BILL_REF$ THEN _CHG2$=_CHG2$+SEP+MSG("SUMM_B_R")+" = "+_CUR.SUMMARY_BILL_REF$,_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SUMM_B_R")+" = "+_CUR.SUMMARY_BILL_REF$
15330 IF _ORIG.MULTI_STAX$=_CUR.MULTI_STAX$ OR MULTI_STAX$=_CUR.MULTI_STAX$ THEN GOTO *NEXT ELSE IF _ORIG.MULTI_STAX$=MULTI_STAX$ THEN _CHG2$=_CHG2$+SEP+MSG("MULTI_STAX")+" = "+_CUR.MULTI_STAX$,_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MULTI_STAX")+" = "+_CUR.MULTI_STAX$
15340 IF _ORIG.FACTORY_JOB_NUM$=_CUR.FACTORY_JOB_NUM$ OR FACTORY_JOB_NUM$=_CUR.FACTORY_JOB_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.FACTORY_JOB_NUM$=FACTORY_JOB_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("FACT_J_N")+" = "+_CUR.FACTORY_JOB_NUM$,_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FACT_J_N")+" = "+_CUR.FACTORY_JOB_NUM$
15350 IF _ORIG.GL_DETAIL_LINK=_CUR.GL_DETAIL_LINK OR GL_DETAIL_LINK=_CUR.GL_DETAIL_LINK THEN GOTO *NEXT ELSE IF _ORIG.GL_DETAIL_LINK=GL_DETAIL_LINK THEN _CHG2$=_CHG2$+SEP+MSG("G_D_L")+" = "+STR(_CUR.GL_DETAIL_LINK),_CHG_VAR$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("G_D_L")+" = "+STR(_CUR.GL_DETAIL_LINK)
15360 IF _ORIG.TRANS_DETAIL_LINK=_CUR.TRANS_DETAIL_LINK OR TRANS_DETAIL_LINK=_CUR.TRANS_DETAIL_LINK THEN GOTO *NEXT ELSE IF _ORIG.TRANS_DETAIL_LINK=TRANS_DETAIL_LINK THEN _CHG2$=_CHG2$+SEP+MSG("TRAN_D_L")+" = "+STR(_CUR.TRANS_DETAIL_LINK),_CHG_VAR$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TRAN_D_L")+" = "+STR(_CUR.TRANS_DETAIL_LINK)
15370 IF _ORIG.INV_AMT=_CUR.INV_AMT OR INV_AMT=_CUR.INV_AMT THEN GOTO *NEXT ELSE IF _ORIG.INV_AMT=INV_AMT THEN _CHG2$=_CHG2$+SEP+MSG("INV_AMT")+" = "+STR(_CUR.INV_AMT),_CHG_VAR$(35,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_AMT")+" = "+STR(_CUR.INV_AMT)
15380 IF _ORIG.INV_BAL=_CUR.INV_BAL OR INV_BAL=_CUR.INV_BAL THEN GOTO *NEXT ELSE IF _ORIG.INV_BAL=INV_BAL THEN _CHG2$=_CHG2$+SEP+MSG("INV_BAL")+" = "+STR(_CUR.INV_BAL),_CHG_VAR$(36,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_BAL")+" = "+STR(_CUR.INV_BAL)
15390 IF _ORIG.DISC_AMT=_CUR.DISC_AMT OR DISC_AMT=_CUR.DISC_AMT THEN GOTO *NEXT ELSE IF _ORIG.DISC_AMT=DISC_AMT THEN _CHG2$=_CHG2$+SEP+MSG("DISC_AMT")+" = "+STR(_CUR.DISC_AMT),_CHG_VAR$(37,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DISC_AMT")+" = "+STR(_CUR.DISC_AMT)
15400 IF _ORIG.CASH_IN_PROGRESS=_CUR.CASH_IN_PROGRESS OR CASH_IN_PROGRESS=_CUR.CASH_IN_PROGRESS THEN GOTO *NEXT ELSE IF _ORIG.CASH_IN_PROGRESS=CASH_IN_PROGRESS THEN _CHG2$=_CHG2$+SEP+MSG("CASH_I_P")+" = "+STR(_CUR.CASH_IN_PROGRESS),_CHG_VAR$(38,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CASH_I_P")+" = "+STR(_CUR.CASH_IN_PROGRESS)
15410 IF _ORIG.ORIG_INV_AMT=_CUR.ORIG_INV_AMT OR ORIG_INV_AMT=_CUR.ORIG_INV_AMT THEN GOTO *NEXT ELSE IF _ORIG.ORIG_INV_AMT=ORIG_INV_AMT THEN _CHG2$=_CHG2$+SEP+MSG("ORIG_I_A")+" = "+STR(_CUR.ORIG_INV_AMT),_CHG_VAR$(39,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORIG_I_A")+" = "+STR(_CUR.ORIG_INV_AMT)
15420 IF _ORIG.STAX_BILLED=_CUR.STAX_BILLED OR STAX_BILLED=_CUR.STAX_BILLED THEN GOTO *NEXT ELSE IF _ORIG.STAX_BILLED=STAX_BILLED THEN _CHG2$=_CHG2$+SEP+MSG("STAX_B")+" = "+STR(_CUR.STAX_BILLED),_CHG_VAR$(40,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STAX_B")+" = "+STR(_CUR.STAX_BILLED)
15430 IF _ORIG.FRT_BILLED=_CUR.FRT_BILLED OR FRT_BILLED=_CUR.FRT_BILLED THEN GOTO *NEXT ELSE IF _ORIG.FRT_BILLED=FRT_BILLED THEN _CHG2$=_CHG2$+SEP+MSG("FRT_BILLED")+" = "+STR(_CUR.FRT_BILLED),_CHG_VAR$(41,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FRT_BILLED")+" = "+STR(_CUR.FRT_BILLED)
15440 IF _ORIG.NET_SALE=_CUR.NET_SALE OR NET_SALE=_CUR.NET_SALE THEN GOTO *NEXT ELSE IF _ORIG.NET_SALE=NET_SALE THEN _CHG2$=_CHG2$+SEP+MSG("NET_SALE")+" = "+STR(_CUR.NET_SALE),_CHG_VAR$(42,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NET_SALE")+" = "+STR(_CUR.NET_SALE)
15450 IF _ORIG.GP=_CUR.GP OR GP=_CUR.GP THEN GOTO *NEXT ELSE IF _ORIG.GP=GP THEN _CHG2$=_CHG2$+SEP+MSG("GP")+" = "+STR(_CUR.GP),_CHG_VAR$(43,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GP")+" = "+STR(_CUR.GP)
15460 IF _ORIG.TOTAL_COMM=_CUR.TOTAL_COMM OR TOTAL_COMM=_CUR.TOTAL_COMM THEN GOTO *NEXT ELSE IF _ORIG.TOTAL_COMM=TOTAL_COMM THEN _CHG2$=_CHG2$+SEP+MSG("TOTAL_COMM")+" = "+STR(_CUR.TOTAL_COMM),_CHG_VAR$(44,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TOTAL_COMM")+" = "+STR(_CUR.TOTAL_COMM)
15470 IF _ORIG.COSTED_FRT=_CUR.COSTED_FRT OR COSTED_FRT=_CUR.COSTED_FRT THEN GOTO *NEXT ELSE IF _ORIG.COSTED_FRT=COSTED_FRT THEN _CHG2$=_CHG2$+SEP+MSG("COSTED_FRT")+" = "+STR(_CUR.COSTED_FRT),_CHG_VAR$(45,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COSTED_FRT")+" = "+STR(_CUR.COSTED_FRT)
15480 IF _ORIG.CASH_BASIS_FRT_BILLD=_CUR.CASH_BASIS_FRT_BILLD OR CASH_BASIS_FRT_BILLD=_CUR.CASH_BASIS_FRT_BILLD THEN GOTO *NEXT ELSE IF _ORIG.CASH_BASIS_FRT_BILLD=CASH_BASIS_FRT_BILLD THEN _CHG2$=_CHG2$+SEP+MSG("CASH_B_F_B")+" = "+STR(_CUR.CASH_BASIS_FRT_BILLD),_CHG_VAR$(46,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CASH_B_F_B")+" = "+STR(_CUR.CASH_BASIS_FRT_BILLD)
15490 IF _ORIG.GP_ADJ_BEFORE_COMM=_CUR.GP_ADJ_BEFORE_COMM OR GP_ADJ_BEFORE_COMM=_CUR.GP_ADJ_BEFORE_COMM THEN GOTO *NEXT ELSE IF _ORIG.GP_ADJ_BEFORE_COMM=GP_ADJ_BEFORE_COMM THEN _CHG2$=_CHG2$+SEP+MSG("G_A_B_C")+" = "+STR(_CUR.GP_ADJ_BEFORE_COMM),_CHG_VAR$(47,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("G_A_B_C")+" = "+STR(_CUR.GP_ADJ_BEFORE_COMM)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16030 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN INV_NUM$=_CUR.INV_NUM$
16050 IF _CHG_VAR$(4,1)="Y" THEN INV_TYPE$=_CUR.INV_TYPE$
16060 IF _CHG_VAR$(5,1)="Y" THEN INV_DATE$=_CUR.INV_DATE$
16070 IF _CHG_VAR$(6,1)="Y" THEN BILLED_FROM_DIV$=_CUR.BILLED_FROM_DIV$
16080 IF _CHG_VAR$(7,1)="Y" THEN BILLED_FROM_CUST$=_CUR.BILLED_FROM_CUST$
16090 IF _CHG_VAR$(8,1)="Y" THEN CUST_PO$=_CUR.CUST_PO$
16100 IF _CHG_VAR$(9,1)="Y" THEN TERMS_CODE$=_CUR.TERMS_CODE$
16110 IF _CHG_VAR$(10,1)="Y" THEN SPLIT_TERMS$=_CUR.SPLIT_TERMS$
16120 IF _CHG_VAR$(11,1)="Y" THEN INV_DUE_DATE$=_CUR.INV_DUE_DATE$
16130 IF _CHG_VAR$(12,1)="Y" THEN DISC_DUE_DAY$=_CUR.DISC_DUE_DAY$
16140 IF _CHG_VAR$(13,1)="Y" THEN ORDER_DIV$=_CUR.ORDER_DIV$
16150 IF _CHG_VAR$(14,1)="Y" THEN ORDER_NUM$=_CUR.ORDER_NUM$
16160 IF _CHG_VAR$(15,1)="Y" THEN SPER_CODE$=_CUR.SPER_CODE$
16170 IF _CHG_VAR$(16,1)="Y" THEN SPER_CODE_2$=_CUR.SPER_CODE_2$
16180 IF _CHG_VAR$(17,1)="Y" THEN SPER_CODE_3$=_CUR.SPER_CODE_3$
16190 IF _CHG_VAR$(18,1)="Y" THEN SPER_CODE_4$=_CUR.SPER_CODE_4$
16200 IF _CHG_VAR$(19,1)="Y" THEN SPER_CODE_5$=_CUR.SPER_CODE_5$
16210 IF _CHG_VAR$(20,1)="Y" THEN APPLY_TO_INV_NUM$=_CUR.APPLY_TO_INV_NUM$
16220 IF _CHG_VAR$(21,1)="Y" THEN AUDIT_NUM$=_CUR.AUDIT_NUM$
16230 IF _CHG_VAR$(22,1)="Y" THEN CUST_CATEGORY$=_CUR.CUST_CATEGORY$
16240 IF _CHG_VAR$(23,1)="Y" THEN STAX_CODE$=_CUR.STAX_CODE$
16250 IF _CHG_VAR$(24,1)="Y" THEN FY$=_CUR.FY$
16260 IF _CHG_VAR$(25,1)="Y" THEN ACCTPD$=_CUR.ACCTPD$
16270 IF _CHG_VAR$(26,1)="Y" THEN GREATEST_FY$=_CUR.GREATEST_FY$
16280 IF _CHG_VAR$(27,1)="Y" THEN GREATEST_ACCTPD$=_CUR.GREATEST_ACCTPD$
16290 IF _CHG_VAR$(28,1)="Y" THEN SHIP_DATE$=_CUR.SHIP_DATE$
16300 IF _CHG_VAR$(29,1)="Y" THEN SHIPPED_VIA$=_CUR.SHIPPED_VIA$
16310 IF _CHG_VAR$(30,1)="Y" THEN SUMMARY_BILL_REF$=_CUR.SUMMARY_BILL_REF$
16320 IF _CHG_VAR$(31,1)="Y" THEN MULTI_STAX$=_CUR.MULTI_STAX$
16330 IF _CHG_VAR$(32,1)="Y" THEN FACTORY_JOB_NUM$=_CUR.FACTORY_JOB_NUM$
16340 IF _CHG_VAR$(33,1)="Y" THEN GL_DETAIL_LINK=_CUR.GL_DETAIL_LINK
16350 IF _CHG_VAR$(34,1)="Y" THEN TRANS_DETAIL_LINK=_CUR.TRANS_DETAIL_LINK
16360 IF _CHG_VAR$(35,1)="Y" THEN INV_AMT=_CUR.INV_AMT
16370 IF _CHG_VAR$(36,1)="Y" THEN INV_BAL=_CUR.INV_BAL
16380 IF _CHG_VAR$(37,1)="Y" THEN DISC_AMT=_CUR.DISC_AMT
16390 IF _CHG_VAR$(38,1)="Y" THEN CASH_IN_PROGRESS=_CUR.CASH_IN_PROGRESS
16400 IF _CHG_VAR$(39,1)="Y" THEN ORIG_INV_AMT=_CUR.ORIG_INV_AMT
16410 IF _CHG_VAR$(40,1)="Y" THEN STAX_BILLED=_CUR.STAX_BILLED
16420 IF _CHG_VAR$(41,1)="Y" THEN FRT_BILLED=_CUR.FRT_BILLED
16430 IF _CHG_VAR$(42,1)="Y" THEN NET_SALE=_CUR.NET_SALE
16440 IF _CHG_VAR$(43,1)="Y" THEN GP=_CUR.GP
16450 IF _CHG_VAR$(44,1)="Y" THEN TOTAL_COMM=_CUR.TOTAL_COMM
16460 IF _CHG_VAR$(45,1)="Y" THEN COSTED_FRT=_CUR.COSTED_FRT
16470 IF _CHG_VAR$(46,1)="Y" THEN CASH_BASIS_FRT_BILLD=_CUR.CASH_BASIS_FRT_BILLD
16480 IF _CHG_VAR$(47,1)="Y" THEN GP_ADJ_BEFORE_COMM=_CUR.GP_ADJ_BEFORE_COMM
16990 RETURN 
17000 FOREIGN_CURR:
17020 DISC_AMT=DISC_AMT*FOR_CURR_EXCH_RATE,TF_COST=TF_COST*FOR_CURR_EXCH_RATE,GP=GP*FOR_CURR_EXCH_RATE,COSTED_FRT=COSTED_FRT*FOR_CURR_EXCH_RATE,NET_SALE=NET_SALE*FOR_CURR_EXCH_RATE,FRT_BILLED=FRT_BILLED*FOR_CURR_EXCH_RATE,STAX_BILLED=STAX_BILLED*FOR_CURR_EXCH_RATE,INV_AMT=INV_AMT*FOR_CURR_EXCH_RATE,ORIG_INV_AMT=ORIG_INV_AMT*FOR_CURR_EXCH_RATE,INV_BAL=INV_BAL*FOR_CURR_EXCH_RATE,CASH_IN_PROGRESS=CASH_IN_PROGRESS*FOR_CURR_EXCH_RATE,AMOUNT_DUE=AMOUNT_DUE*FOR_CURR_EXCH_RATE
17030 REFRESH_FLG=1; GOSUB DISP_REC
17040 CALL "*wingrp;Disable",FOREIGN_GRP.GRP$
17995 RETURN 
17999 ! 
18000 UPDATE_CUSTPO:
18001 CHGPDF_INVNUM$=STP(FN%ZZDISP$(MID(_KEY$,11,8),"AR6"),2),CHGPDF_OLDCUSTPO$="",CHGPDF_NEWCUSTPO$=STP(CUST_PO$,2)
18005 OPEN (HFN)"AR6"+%C$; _AR6=LFO
18010 READ RECORD (_AR6,KEY=_KEY$)AR6REC$
18011 CHGPDF_OLDCUSTPO$=STP(MID(AR6REC$,36,15),2)
18012 IF POS(%C$="642",3)>0 THEN IF NOT(NUL(CHGPDF_OLDCUSTPO$)) THEN INVOKE "changepdf.sh "+QUO+CHGPDF_INVNUM$+QUO+" "+QUO+CHGPDF_OLDCUSTPO$+QUO+" "+QUO+CHGPDF_NEWCUSTPO$+QUO
18015 AR6REC$(36,15)=CUST_PO$
18020 WRITE RECORD (_AR6,KEY=_KEY$)AR6REC$
18025 CLOSE (_AR6); _AR6=0
18030 UCP_FMYKEY$=_KEY$; IF NOT(NUL(MID(AR6REC$,26,10))) AND MID(AR6REC$,26,10)<>MID(AR6REC$,1,10) THEN UCP_FMYKEY$(1,10)=MID(AR6REC$,26,10) ! If Bill-from customer situation then use the Bill-from for FMY, AR6 holds the Bill-to customer
18050 READ (_FMY,KEY=UCP_FMYKEY$,DOM=*NEXT)
18055 KFMY$=KEY(_FMY,END=18090); IF KFMY$(1,18)<>UCP_FMYKEY$ THEN GOTO 18090
18060 READ RECORD (_FMY,KEY=KFMY$)FMY$
18065 FMY$(34,15)=CUST_PO$
18070 WRITE RECORD (_FMY,KEY=KFMY$)FMY$
18075 GOTO 18055
18090 CALL "*wingrp;lockordisable",EDITABLE.GRP$
18091 EDIT.CTL'VISIBLE=1
18094 REFRESH_FLG=1,CHANGE_FLG=0
18095 RETURN 
18099 ! 
20010 SHOW_ORDER_INFO:
20020 PROCESS "ARGMAF","../ARG/AR.EN",CUST_DIV$+SEP+CUST_CODE$+SEP+ORDER_DIV$+SEP+ORDER_NUM$
20080 EXIT 
20090 LOOKUP:
20100 PROCESS "QRY_AR6.2","../ARG/AR.EN",X$
20110 READ DATA FROM X$ TO CUSTOMER$,INV_NUM$
20120 _EOM$=$0D$,_ENABLE_FLG=1,_KCNT=_NUMKEYS
20130 GOTO FIND_REC
20200 SET_CHECK_BOX_FIELD_VALUES:
20210 IF SPLIT_TERMS$=" " THEN SPLIT_TERMS$="N"
20240 SET_CHECK_BOX_FIELD_VALUES_END:RETURN 
20250 CALC_FIELDS:
20255 IF SEC$(40,1)="Y" THEN TOTAL_COMM=0 ! [206066]
20260 TF_COST=NET_SALE-GP
20270 IF NET_SALE<>0 THEN GP_PRC=GP*100/NET_SALE ELSE GP_PRC=0
20280 AMOUNT_DUE=INV_BAL-CASH_IN_PROGRESS
20290 CALC_FIELDS_END:RETURN 
56000 REM + Modification History
56002 REM "194087-Changes made at Whitepaper during 2nd week of install       
56004 REM "206066-Commission amount displays in Open Invoice Display          
56006 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56007 REM "269243-ARGCAE - AR Open Invoice - Add option to display values in  
56008 REM "307474-DBD-441: Changes related to Cust PO for Summary Bill invoice
