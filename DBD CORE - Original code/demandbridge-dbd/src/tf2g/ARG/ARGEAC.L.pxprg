0010 ! ARGEAC.L - File Maintenance Program for AT3_ARInvoiceEntLns (="AT3"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Oct. 15, 2002 12:14
0030 ! ************************************************************************
0035 REM "5.5 - 08/31/07 - 9.998333 - jdf - SSP# 211380
0037 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
0040 REM "Copyright 2007 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 ! _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 ! GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 LINE_CHANGE_FLG=0,LINE_ENABLE_FLG=0,LINE_KCNT=1,LINE_FIRST_KEY=0,LINE_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$=FIN(_AT3,"FILENAME")
0170 LINE_FIL_NO=_AT3
0180 LINE_CUR_FN=HFN; OPEN (LINE_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 LINE_NUMKEYS=4
0430 DIM LINE_KEYS$[1:4]; LINE_KEYS$[1]="FY$",LINE_KEYS$[2]="ACCTPD$",LINE_KEYS$[3]="INV_NUM$",LINE_KEYS$[4]="LINE_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN LINE_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (LINE_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 LINE_ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(LINE_FIL_NO,ERR=*NEXT)
0930 ! IF LINE_FIL_NO<>0 THEN CLOSE (LINE_FIL_NO); LINE_FIL_NO=0
0940 IF LINE_CUR_FN<>0 THEN CLOSE (LINE_CUR_FN); LINE_CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 LINE_CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GETLINE_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(LINE_KEYS$[LINE_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF LINE_ENABLE_FLG<0 THEN LINE_KCNT=_KEY1,LINE_ENABLE_FLG=_KEY1
1040 IF LINE_ENABLE_FLG THEN IF LINE_KCNT<LINE_NUMKEYS THEN LINE_KCNT=LINE_CURKEY+1,LINE_ENABLE_FLG=LINE_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the LINE_KCNT segment
1050 READ DATA FROM REC(IOL(LINE_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=LINE_FIRST_KEY; RETURN 
1070 READ (LINE_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 LINE_CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=LINE_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF LINE_ENABLE_FLG THEN LINE_KCNT=0,LINE_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 LINE_CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=LINE_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF LINE_ENABLE_FLG THEN LINE_KCNT=_KEY1,LINE_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 LINE_CHANGE_FLG=0
1480 NEXT_ID=LINE_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(LINE_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (LINE_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF LINE_ENABLE_FLG THEN LINE_KCNT=_KEY1,LINE_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 LINE_CHANGE_FLG=0
1700 NEXT_ID=LINE_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF LINE_CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF LINE_ENABLE_FLG THEN LINE_KCNT=_KEY1,LINE_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 LINE_CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF LINE_CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(LINE_FIL_NO,END=END_OF_FILE)
2060 READ (LINE_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(LINE_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (LINE_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF LINE_CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(LINE_FIL_NO,END=START_OF_FILE); READ (LINE_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(LINE_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (LINE_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF LINE_CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(LINE_FIL_NO,ERR=NO_FIRST)
2450 READ (LINE_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF LINE_CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(LINE_FIL_NO,ERR=NO_LAST)
2650 READ (LINE_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(LINE_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF LINE_ENABLE_FLG THEN LINE_KCNT=_KEY1-1,LINE_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(LINE_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(LINE_FIL_NO) ! Save record for review
3060 LINE_CHANGE_FLG=0
3065 GOSUB GET_LINE_INFO
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (LINE_CUR_FN,KEY=KEC(LINE_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (LINE_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(LINE_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(LINE_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF LINE_FIRST_KEY=0 THEN LINE_FIRST_KEY=FY.CTL,LINE_FIRST_FIELD=LINE_TYPE.CTL
3820 IF LINE_CHANGE_FLG=0 THEN IF LINE_ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 LINE_CHANGE_FLG=0
3860 CC: LINE_KCNT=_KEY1,LINE_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GETLINE_CURKEY:
4020 FOR LINE_CURKEY=1 TO LINE_NUMKEYS
4030 IF LINE_KEYS$[LINE_CURKEY]=ID$+"$" OR LINE_KEYS$[LINE_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT LINE_CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 QTY_ORDERED$=STR(QTY_ORDERED/D7)
10030 QTY_SHIPPED$=STR(QTY_SHIPPED/D7)
10040 UNIT_SELL_PRICE$=STR(UNIT_SELL_PRICE)
10050 UNIT_COST$=STR(UNIT_COST)
10060 SELL_PRICE_EXT$=STR(SELL_PRICE_EXT)
10070 COST_EXT$=STR(COST_EXT)
10080 QTY_PER_UNIT$=STR(QTY_PER_UNIT)
10090 COMM_AMT$=STR(COMM_AMT)
10100 GP_ADJ_B4_LOAD$=STR(GP_ADJ_B4_LOAD)
10110 FULL_GP_ADJ$=STR(FULL_GP_ADJ)
10120 BILLING_SELL_PRICE$=STR(BILLING_SELL_PRICE)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="QTY_ORDERED",_X=QTY_ORDERED.CTL,QTY_ORDERED=NUM(QTY_ORDERED$,ERR=NON_NUMERIC)
11030 _X$="QTY_SHIPPED",_X=QTY_SHIPPED.CTL,QTY_SHIPPED=NUM(QTY_SHIPPED$,ERR=NON_NUMERIC)
11040 _X$="UNIT_SELL_PRICE",_X=UNIT_SELL_PRICE.CTL,UNIT_SELL_PRICE=NUM(UNIT_SELL_PRICE$,ERR=NON_NUMERIC)
11050 _X$="UNIT_COST",_X=UNIT_COST.CTL,UNIT_COST=NUM(UNIT_COST$,ERR=NON_NUMERIC)
11060 _X$="SELL_PRICE_EXT",_X=SELL_PRICE_EXT.CTL,SELL_PRICE_EXT=NUM(SELL_PRICE_EXT$,ERR=NON_NUMERIC)
11070 _X$="COST_EXT",_X=COST_EXT.CTL,COST_EXT=NUM(COST_EXT$,ERR=NON_NUMERIC)
11080 _X$="QTY_PER_UNIT",_X=QTY_PER_UNIT.CTL,QTY_PER_UNIT=NUM(QTY_PER_UNIT$,ERR=NON_NUMERIC)
11090 _X$="COMM_AMT",_X=COMM_AMT.CTL,COMM_AMT=NUM(COMM_AMT$,ERR=NON_NUMERIC)
11100 _X$="GP_ADJ_B4_LOAD",_X=GP_ADJ_B4_LOAD.CTL,GP_ADJ_B4_LOAD=NUM(GP_ADJ_B4_LOAD$,ERR=NON_NUMERIC)
11110 _X$="FULL_GP_ADJ",_X=FULL_GP_ADJ.CTL,FULL_GP_ADJ=NUM(FULL_GP_ADJ$,ERR=NON_NUMERIC)
11120 _X$="BILLING_SELL_PRICE",_X=BILLING_SELL_PRICE.CTL,BILLING_SELL_PRICE=NUM(BILLING_SELL_PRICE$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN FY$=""
13030 IF _CLR_FLG$="R" THEN ACCTPD$=""
13040 IF _CLR_FLG$="R" THEN INV_NUM$=""
13050 IF _CLR_FLG$="R" THEN LINE_NUM$=""
13060 LINE_TYPE$=""
13070 COSTED_FRT$=""
13080 PROD_CODE$=""
13090 PRINT_ON_INV$=""
13100 TF_DESC$=""
13110 ORDER_LINE$=""
13120 UNIT$=""
13130 TAXABLE$=""
13140 ITEM_CUST_DIV$=""
13150 ITEM_CUST_CODE$=""
13160 ITEM_CODE$=""
13170 SALES_DIST_CODE$=""
13180 COMM_CODE$=""
13190 INV_LOC_CODE$="",LOC_DESC$=""
13200 LEFT_RIGHT$=""
13210 TOP_BOTTOM$=""
13220 PLYS$=""
13230 ORDER_TYPE$=""
13240 NUM_CTNS_LINES$=""
13250 COST_CODE$=""
13260 STAX_CODE$=""
13270 SHIP_TO_SEQ$=""
13280 LINE_AUTO_CREATE$=""
13290 AT3_UNUSED_1$=""
13300 QTY_ORDERED=0
13310 QTY_SHIPPED=0
13320 UNIT_SELL_PRICE=0
13330 UNIT_COST=0
13340 SELL_PRICE_EXT=0
13350 COST_EXT=0
13360 QTY_PER_UNIT=0
13370 COMM_AMT=0
13380 GP_ADJ_B4_LOAD=0
13390 FULL_GP_ADJ=0
13400 BILLING_SELL_PRICE=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - LINE_ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF LINE_ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF LINE_ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=ACCTPD.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF LINE_ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=INV_NUM.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF LINE_ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=LINE_NUM.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14970 IF LINE_ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF LINE_ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(39,"N")
15030 IF _ORIG.FY$=_CUR.FY$ OR FY$=_CUR.FY$ THEN GOTO *NEXT ELSE IF _ORIG.FY$=FY$ THEN _CHG2$=_CHG2$+SEP+MSG("FY")+" = "+_CUR.FY$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FY")+" = "+_CUR.FY$
15040 IF _ORIG.ACCTPD$=_CUR.ACCTPD$ OR ACCTPD$=_CUR.ACCTPD$ THEN GOTO *NEXT ELSE IF _ORIG.ACCTPD$=ACCTPD$ THEN _CHG2$=_CHG2$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCTPD$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCTPD$
15050 IF _ORIG.INV_NUM$=_CUR.INV_NUM$ OR INV_NUM$=_CUR.INV_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.INV_NUM$=INV_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$
15060 IF _ORIG.LINE_NUM$=_CUR.LINE_NUM$ OR LINE_NUM$=_CUR.LINE_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.LINE_NUM$=LINE_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("LINE_NUM")+" = "+_CUR.LINE_NUM$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_NUM")+" = "+_CUR.LINE_NUM$
15070 IF _ORIG.LINE_TYPE$=_CUR.LINE_TYPE$ OR LINE_TYPE$=_CUR.LINE_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.LINE_TYPE$=LINE_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("LINE_TYPE")+" = "+_CUR.LINE_TYPE$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_TYPE")+" = "+_CUR.LINE_TYPE$
15080 IF _ORIG.COSTED_FRT$=_CUR.COSTED_FRT$ OR COSTED_FRT$=_CUR.COSTED_FRT$ THEN GOTO *NEXT ELSE IF _ORIG.COSTED_FRT$=COSTED_FRT$ THEN _CHG2$=_CHG2$+SEP+MSG("COSTED_FRT")+" = "+_CUR.COSTED_FRT$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COSTED_FRT")+" = "+_CUR.COSTED_FRT$
15090 IF _ORIG.PROD_CODE$=_CUR.PROD_CODE$ OR PROD_CODE$=_CUR.PROD_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PROD_CODE$=PROD_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PROD_CODE")+" = "+_CUR.PROD_CODE$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PROD_CODE")+" = "+_CUR.PROD_CODE$
15100 IF _ORIG.PRINT_ON_INV$=_CUR.PRINT_ON_INV$ OR PRINT_ON_INV$=_CUR.PRINT_ON_INV$ THEN GOTO *NEXT ELSE IF _ORIG.PRINT_ON_INV$=PRINT_ON_INV$ THEN _CHG2$=_CHG2$+SEP+MSG("PRINT_ON_I")+" = "+_CUR.PRINT_ON_INV$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRINT_ON_I")+" = "+_CUR.PRINT_ON_INV$
15110 IF _ORIG.TF_DESC$=_CUR.TF_DESC$ OR TF_DESC$=_CUR.TF_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.TF_DESC$=TF_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC")+" = "+_CUR.TF_DESC$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC")+" = "+_CUR.TF_DESC$
15120 IF _ORIG.ORDER_LINE$=_CUR.ORDER_LINE$ OR ORDER_LINE$=_CUR.ORDER_LINE$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_LINE$=ORDER_LINE$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_LINE")+" = "+_CUR.ORDER_LINE$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_LINE")+" = "+_CUR.ORDER_LINE$
15130 IF _ORIG.UNIT$=_CUR.UNIT$ OR UNIT$=_CUR.UNIT$ THEN GOTO *NEXT ELSE IF _ORIG.UNIT$=UNIT$ THEN _CHG2$=_CHG2$+SEP+MSG("UNIT")+" = "+_CUR.UNIT$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNIT")+" = "+_CUR.UNIT$
15140 IF _ORIG.TAXABLE$=_CUR.TAXABLE$ OR TAXABLE$=_CUR.TAXABLE$ THEN GOTO *NEXT ELSE IF _ORIG.TAXABLE$=TAXABLE$ THEN _CHG2$=_CHG2$+SEP+MSG("TAXABLE")+" = "+_CUR.TAXABLE$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TAXABLE")+" = "+_CUR.TAXABLE$
15150 IF _ORIG.ITEM_CUST_DIV$=_CUR.ITEM_CUST_DIV$ OR ITEM_CUST_DIV$=_CUR.ITEM_CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CUST_DIV$=ITEM_CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_C_D")+" = "+_CUR.ITEM_CUST_DIV$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_C_D")+" = "+_CUR.ITEM_CUST_DIV$
15160 IF _ORIG.ITEM_CUST_CODE$=_CUR.ITEM_CUST_CODE$ OR ITEM_CUST_CODE$=_CUR.ITEM_CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CUST_CODE$=ITEM_CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_C_C")+" = "+_CUR.ITEM_CUST_CODE$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_C_C")+" = "+_CUR.ITEM_CUST_CODE$
15170 IF _ORIG.ITEM_CODE$=_CUR.ITEM_CODE$ OR ITEM_CODE$=_CUR.ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CODE$=ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$
15180 IF _ORIG.SALES_DIST_CODE$=_CUR.SALES_DIST_CODE$ OR SALES_DIST_CODE$=_CUR.SALES_DIST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.SALES_DIST_CODE$=SALES_DIST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("SALE_D_C")+" = "+_CUR.SALES_DIST_CODE$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SALE_D_C")+" = "+_CUR.SALES_DIST_CODE$
15190 IF _ORIG.COMM_CODE$=_CUR.COMM_CODE$ OR COMM_CODE$=_CUR.COMM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.COMM_CODE$=COMM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("COMM_CODE")+" = "+_CUR.COMM_CODE$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMM_CODE")+" = "+_CUR.COMM_CODE$
15200 IF _ORIG.INV_LOC_CODE$=_CUR.INV_LOC_CODE$ OR INV_LOC_CODE$=_CUR.INV_LOC_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.INV_LOC_CODE$=INV_LOC_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_LOC_C")+" = "+_CUR.INV_LOC_CODE$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_LOC_C")+" = "+_CUR.INV_LOC_CODE$
15210 IF _ORIG.LEFT_RIGHT$=_CUR.LEFT_RIGHT$ OR LEFT_RIGHT$=_CUR.LEFT_RIGHT$ THEN GOTO *NEXT ELSE IF _ORIG.LEFT_RIGHT$=LEFT_RIGHT$ THEN _CHG2$=_CHG2$+SEP+MSG("LEFT_RIGHT")+" = "+_CUR.LEFT_RIGHT$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LEFT_RIGHT")+" = "+_CUR.LEFT_RIGHT$
15220 IF _ORIG.TOP_BOTTOM$=_CUR.TOP_BOTTOM$ OR TOP_BOTTOM$=_CUR.TOP_BOTTOM$ THEN GOTO *NEXT ELSE IF _ORIG.TOP_BOTTOM$=TOP_BOTTOM$ THEN _CHG2$=_CHG2$+SEP+MSG("TOP_BOTTOM")+" = "+_CUR.TOP_BOTTOM$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TOP_BOTTOM")+" = "+_CUR.TOP_BOTTOM$
15230 IF _ORIG.PLYS$=_CUR.PLYS$ OR PLYS$=_CUR.PLYS$ THEN GOTO *NEXT ELSE IF _ORIG.PLYS$=PLYS$ THEN _CHG2$=_CHG2$+SEP+MSG("PLYS")+" = "+_CUR.PLYS$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLYS")+" = "+_CUR.PLYS$
15240 IF _ORIG.ORDER_TYPE$=_CUR.ORDER_TYPE$ OR ORDER_TYPE$=_CUR.ORDER_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_TYPE$=ORDER_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_TYPE")+" = "+_CUR.ORDER_TYPE$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_TYPE")+" = "+_CUR.ORDER_TYPE$
15250 IF _ORIG.NUM_CTNS_LINES$=_CUR.NUM_CTNS_LINES$ OR NUM_CTNS_LINES$=_CUR.NUM_CTNS_LINES$ THEN GOTO *NEXT ELSE IF _ORIG.NUM_CTNS_LINES$=NUM_CTNS_LINES$ THEN _CHG2$=_CHG2$+SEP+MSG("NUM_C_L")+" = "+_CUR.NUM_CTNS_LINES$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NUM_C_L")+" = "+_CUR.NUM_CTNS_LINES$
15260 IF _ORIG.COST_CODE$=_CUR.COST_CODE$ OR COST_CODE$=_CUR.COST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.COST_CODE$=COST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("COST_CODE")+" = "+_CUR.COST_CODE$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COST_CODE")+" = "+_CUR.COST_CODE$
15270 IF _ORIG.STAX_CODE$=_CUR.STAX_CODE$ OR STAX_CODE$=_CUR.STAX_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.STAX_CODE$=STAX_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("STAX_CODE")+" = "+_CUR.STAX_CODE$,_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STAX_CODE")+" = "+_CUR.STAX_CODE$
15280 IF _ORIG.SHIP_TO_SEQ$=_CUR.SHIP_TO_SEQ$ OR SHIP_TO_SEQ$=_CUR.SHIP_TO_SEQ$ THEN GOTO *NEXT ELSE IF _ORIG.SHIP_TO_SEQ$=SHIP_TO_SEQ$ THEN _CHG2$=_CHG2$+SEP+MSG("SHIP_T_S")+" = "+_CUR.SHIP_TO_SEQ$,_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SHIP_T_S")+" = "+_CUR.SHIP_TO_SEQ$
15290 IF _ORIG.LINE_AUTO_CREATE$=_CUR.LINE_AUTO_CREATE$ OR LINE_AUTO_CREATE$=_CUR.LINE_AUTO_CREATE$ THEN GOTO *NEXT ELSE IF _ORIG.LINE_AUTO_CREATE$=LINE_AUTO_CREATE$ THEN _CHG2$=_CHG2$+SEP+MSG("LINE_A_C")+" = "+_CUR.LINE_AUTO_CREATE$,_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_A_C")+" = "+_CUR.LINE_AUTO_CREATE$
15300 IF _ORIG.AT3_UNUSED_1$=_CUR.AT3_UNUSED_1$ OR AT3_UNUSED_1$=_CUR.AT3_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.AT3_UNUSED_1$=AT3_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.AT3_UNUSED_1$,_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.AT3_UNUSED_1$
15310 IF _ORIG.QTY_ORDERED=_CUR.QTY_ORDERED OR QTY_ORDERED=_CUR.QTY_ORDERED THEN GOTO *NEXT ELSE IF _ORIG.QTY_ORDERED=QTY_ORDERED THEN _CHG2$=_CHG2$+SEP+MSG("QTY_ORD")+" = "+STR(_CUR.QTY_ORDERED),_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_ORD")+" = "+STR(_CUR.QTY_ORDERED)
15320 IF _ORIG.QTY_SHIPPED=_CUR.QTY_SHIPPED OR QTY_SHIPPED=_CUR.QTY_SHIPPED THEN GOTO *NEXT ELSE IF _ORIG.QTY_SHIPPED=QTY_SHIPPED THEN _CHG2$=_CHG2$+SEP+MSG("QTY_S")+" = "+STR(_CUR.QTY_SHIPPED),_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_S")+" = "+STR(_CUR.QTY_SHIPPED)
15330 IF _ORIG.UNIT_SELL_PRICE=_CUR.UNIT_SELL_PRICE OR UNIT_SELL_PRICE=_CUR.UNIT_SELL_PRICE THEN GOTO *NEXT ELSE IF _ORIG.UNIT_SELL_PRICE=UNIT_SELL_PRICE THEN _CHG2$=_CHG2$+SEP+MSG("UNIT_S_P")+" = "+STR(_CUR.UNIT_SELL_PRICE),_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNIT_S_P")+" = "+STR(_CUR.UNIT_SELL_PRICE)
15340 IF _ORIG.UNIT_COST=_CUR.UNIT_COST OR UNIT_COST=_CUR.UNIT_COST THEN GOTO *NEXT ELSE IF _ORIG.UNIT_COST=UNIT_COST THEN _CHG2$=_CHG2$+SEP+MSG("UNIT_COST")+" = "+STR(_CUR.UNIT_COST),_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNIT_COST")+" = "+STR(_CUR.UNIT_COST)
15350 IF _ORIG.SELL_PRICE_EXT=_CUR.SELL_PRICE_EXT OR SELL_PRICE_EXT=_CUR.SELL_PRICE_EXT THEN GOTO *NEXT ELSE IF _ORIG.SELL_PRICE_EXT=SELL_PRICE_EXT THEN _CHG2$=_CHG2$+SEP+MSG("SELL_P_E")+" = "+STR(_CUR.SELL_PRICE_EXT),_CHG_VAR$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SELL_P_E")+" = "+STR(_CUR.SELL_PRICE_EXT)
15360 IF _ORIG.COST_EXT=_CUR.COST_EXT OR COST_EXT=_CUR.COST_EXT THEN GOTO *NEXT ELSE IF _ORIG.COST_EXT=COST_EXT THEN _CHG2$=_CHG2$+SEP+MSG("COST_EXT")+" = "+STR(_CUR.COST_EXT),_CHG_VAR$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COST_EXT")+" = "+STR(_CUR.COST_EXT)
15370 IF _ORIG.QTY_PER_UNIT=_CUR.QTY_PER_UNIT OR QTY_PER_UNIT=_CUR.QTY_PER_UNIT THEN GOTO *NEXT ELSE IF _ORIG.QTY_PER_UNIT=QTY_PER_UNIT THEN _CHG2$=_CHG2$+SEP+MSG("QTY_P_U")+" = "+STR(_CUR.QTY_PER_UNIT),_CHG_VAR$(35,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_P_U")+" = "+STR(_CUR.QTY_PER_UNIT)
15380 IF _ORIG.COMM_AMT=_CUR.COMM_AMT OR COMM_AMT=_CUR.COMM_AMT THEN GOTO *NEXT ELSE IF _ORIG.COMM_AMT=COMM_AMT THEN _CHG2$=_CHG2$+SEP+MSG("COMM_AMT")+" = "+STR(_CUR.COMM_AMT),_CHG_VAR$(36,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMM_AMT")+" = "+STR(_CUR.COMM_AMT)
15390 IF _ORIG.GP_ADJ_B4_LOAD=_CUR.GP_ADJ_B4_LOAD OR GP_ADJ_B4_LOAD=_CUR.GP_ADJ_B4_LOAD THEN GOTO *NEXT ELSE IF _ORIG.GP_ADJ_B4_LOAD=GP_ADJ_B4_LOAD THEN _CHG2$=_CHG2$+SEP+MSG("GP_ADJ_B_L")+" = "+STR(_CUR.GP_ADJ_B4_LOAD),_CHG_VAR$(37,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GP_ADJ_B_L")+" = "+STR(_CUR.GP_ADJ_B4_LOAD)
15400 IF _ORIG.FULL_GP_ADJ=_CUR.FULL_GP_ADJ OR FULL_GP_ADJ=_CUR.FULL_GP_ADJ THEN GOTO *NEXT ELSE IF _ORIG.FULL_GP_ADJ=FULL_GP_ADJ THEN _CHG2$=_CHG2$+SEP+MSG("FULL_GP_AD")+" = "+STR(_CUR.FULL_GP_ADJ),_CHG_VAR$(38,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FULL_GP_AD")+" = "+STR(_CUR.FULL_GP_ADJ)
15410 IF _ORIG.BILLING_SELL_PRICE=_CUR.BILLING_SELL_PRICE OR BILLING_SELL_PRICE=_CUR.BILLING_SELL_PRICE THEN GOTO *NEXT ELSE IF _ORIG.BILLING_SELL_PRICE=BILLING_SELL_PRICE THEN _CHG2$=_CHG2$+SEP+MSG("BILLING_SP")+" = "+STR(_CUR.BILLING_SELL_PRICE),_CHG_VAR$(39,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BILLING_SP")+" = "+STR(_CUR.BILLING_SELL_PRICE)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN FY$=_CUR.FY$
16030 IF _CHG_VAR$(2,1)="Y" THEN ACCTPD$=_CUR.ACCTPD$
16040 IF _CHG_VAR$(3,1)="Y" THEN INV_NUM$=_CUR.INV_NUM$
16050 IF _CHG_VAR$(4,1)="Y" THEN LINE_NUM$=_CUR.LINE_NUM$
16060 IF _CHG_VAR$(5,1)="Y" THEN LINE_TYPE$=_CUR.LINE_TYPE$
16070 IF _CHG_VAR$(6,1)="Y" THEN COSTED_FRT$=_CUR.COSTED_FRT$
16080 IF _CHG_VAR$(7,1)="Y" THEN PROD_CODE$=_CUR.PROD_CODE$
16090 IF _CHG_VAR$(8,1)="Y" THEN PRINT_ON_INV$=_CUR.PRINT_ON_INV$
16100 IF _CHG_VAR$(9,1)="Y" THEN TF_DESC$=_CUR.TF_DESC$
16110 IF _CHG_VAR$(10,1)="Y" THEN ORDER_LINE$=_CUR.ORDER_LINE$
16120 IF _CHG_VAR$(11,1)="Y" THEN UNIT$=_CUR.UNIT$
16130 IF _CHG_VAR$(12,1)="Y" THEN TAXABLE$=_CUR.TAXABLE$
16140 IF _CHG_VAR$(13,1)="Y" THEN ITEM_CUST_DIV$=_CUR.ITEM_CUST_DIV$
16150 IF _CHG_VAR$(14,1)="Y" THEN ITEM_CUST_CODE$=_CUR.ITEM_CUST_CODE$
16160 IF _CHG_VAR$(15,1)="Y" THEN ITEM_CODE$=_CUR.ITEM_CODE$
16170 IF _CHG_VAR$(16,1)="Y" THEN SALES_DIST_CODE$=_CUR.SALES_DIST_CODE$
16180 IF _CHG_VAR$(17,1)="Y" THEN COMM_CODE$=_CUR.COMM_CODE$
16190 IF _CHG_VAR$(18,1)="Y" THEN INV_LOC_CODE$=_CUR.INV_LOC_CODE$
16200 IF _CHG_VAR$(19,1)="Y" THEN LEFT_RIGHT$=_CUR.LEFT_RIGHT$
16210 IF _CHG_VAR$(20,1)="Y" THEN TOP_BOTTOM$=_CUR.TOP_BOTTOM$
16220 IF _CHG_VAR$(21,1)="Y" THEN PLYS$=_CUR.PLYS$
16230 IF _CHG_VAR$(22,1)="Y" THEN ORDER_TYPE$=_CUR.ORDER_TYPE$
16240 IF _CHG_VAR$(23,1)="Y" THEN NUM_CTNS_LINES$=_CUR.NUM_CTNS_LINES$
16250 IF _CHG_VAR$(24,1)="Y" THEN COST_CODE$=_CUR.COST_CODE$
16260 IF _CHG_VAR$(25,1)="Y" THEN STAX_CODE$=_CUR.STAX_CODE$
16270 IF _CHG_VAR$(26,1)="Y" THEN SHIP_TO_SEQ$=_CUR.SHIP_TO_SEQ$
16280 IF _CHG_VAR$(27,1)="Y" THEN LINE_AUTO_CREATE$=_CUR.LINE_AUTO_CREATE$
16290 IF _CHG_VAR$(28,1)="Y" THEN AT3_UNUSED_1$=_CUR.AT3_UNUSED_1$
16300 IF _CHG_VAR$(29,1)="Y" THEN QTY_ORDERED=_CUR.QTY_ORDERED
16310 IF _CHG_VAR$(30,1)="Y" THEN QTY_SHIPPED=_CUR.QTY_SHIPPED
16320 IF _CHG_VAR$(31,1)="Y" THEN UNIT_SELL_PRICE=_CUR.UNIT_SELL_PRICE
16330 IF _CHG_VAR$(32,1)="Y" THEN UNIT_COST=_CUR.UNIT_COST
16340 IF _CHG_VAR$(33,1)="Y" THEN SELL_PRICE_EXT=_CUR.SELL_PRICE_EXT
16350 IF _CHG_VAR$(34,1)="Y" THEN COST_EXT=_CUR.COST_EXT
16360 IF _CHG_VAR$(35,1)="Y" THEN QTY_PER_UNIT=_CUR.QTY_PER_UNIT
16370 IF _CHG_VAR$(36,1)="Y" THEN COMM_AMT=_CUR.COMM_AMT
16380 IF _CHG_VAR$(37,1)="Y" THEN GP_ADJ_B4_LOAD=_CUR.GP_ADJ_B4_LOAD
16390 IF _CHG_VAR$(38,1)="Y" THEN FULL_GP_ADJ=_CUR.FULL_GP_ADJ
16400 IF _CHG_VAR$(39,1)="Y" THEN BILLING_SELL_PRICE=_CUR.BILLING_SELL_PRICE
16990 RETURN 
20000 READ_DISPLAY_LINE:
20010 READ (_AT3,KEY=FY$+ACCTPD$+INV_NUM$,DOM=*NEXT)
20015 K$=KEY(_AT3,END=READ_DISPLAY_LINE_END)
20020 IF K$(1,14)<>FY$+ACCTPD$+INV_NUM$ THEN GOTO READ_DISPLAY_LINE_END
20025 READ (_AT3,KEY=K$)
20030 GET_LINE_INFO:
20035 GOSUB READ_UNIT_REC
20040 GOSUB READ_LOC_DESC
20045 GOSUB NUM_TO_STR
20050 REFRESH_FLG=1
20090 READ_DISPLAY_LINE_END:RETURN 
20095 ! 
20500 READ_UNIT_REC:
20510 DIM P3$(40),P[2]; FIND (_ZZPARM,KEY="U/M"+UNIT$,DOM=*NEXT)P3$,P[0],P[1],P[2]
20515 IF P3$(20,1)="Y" THEN D7=P[1] ELSE D7=QTY_PER_UNIT
20520 IF D7=0 THEN D7=1
20540 READ_UNIT_REC_END:RETURN 
20545 ! 
20550 READ_LOC_DESC:
20555 IF POS(LINE_TYPE$="IC")=0 THEN LOC_DESC$=""; GOTO READ_LOC_DESC_END
20560 IF INV_LOC_CODE$="DS  " THEN LOC_DESC$="Direct shipment"; GOTO READ_LOC_DESC_END
20565 DIM W$(150); READ (_FM0,KEY="D"+DIM(10)+INV_LOC_CODE$,DOM=READ_LOC_DESC_END)W$
20570 IF STP(W$(111,16),3)<>"" THEN LOC_DESC$=STP(W$(111,16),1)+","+W$(27,2)
20590 READ_LOC_DESC_END:RETURN 
20595 ! 
21000 LINE_NUM_FMT:ENTER FIELD$,VAR_TAG$,ERR=*NEXT
21010 LINE_NUM_VAL:ENTER FIELD$,ERR_MSG$,VAR_TAG$,ERR=*NEXT
21015 FIELD$=STR(NUM(FIELD$,ERR=*NEXT):"000"); GOTO LINE_NUM_FMT_END
21020 ERR_MSG$="Line number field must be numeric."
21040 LINE_NUM_FMT_END:EXIT 
21045 ! 
56000 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
