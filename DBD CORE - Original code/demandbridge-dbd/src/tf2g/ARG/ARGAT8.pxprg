0010 ! ARGAT8 - File Maintenance Program for AT8_InvoiceTransNote (="AT8"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Jan. 29, 2023 22:14
0030 ! ************************************************************************
0035 REM "5.7 - 02/02/23 - 17.028676 - crg - SSP# 307435
0037 REM "307435-DBD-337: Capture/store notes with Cash Receipts             
0040 REM "Copyright 2023 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 IF TCB(13)=1 THEN BEGIN 
0052 IF NUL(%WDX$) THEN MSGBOX "You must be using Windx to access TopForm to maintain image entries"; GOTO 0075
0055 IF NOT(%GUI) THEN CHUI_MODE=1; %GUI=1; PRINT 'SHOW'(0)
0060 PROCESS "ARGAT8","../ARG/AR.EN"
0065 IF CHUI_MODE THEN %GUI=0; PRINT 'SHOW'(1); RUN "ZMENU"
0075 IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT 
0079 ! 
0080 EDIT_NOTE:
0081 ! If "A"+DIM(4) is specified the auto-number logic is triggered to generate the next sequence value for the note key
0082 ENTER NOTE_KEY$,ERR=*NEXT
0085 PROCESS "ARGAT8","../ARG/AR.EN",NOTE_KEY$
0089 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_XI=PRM('XI'),_SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="AT8"+%C$,_FILE_OPTS$=""
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,OPT=_FILE_OPTS$,ERR=OPEN_ERR)_FILE_NAME$
0180 IF _OBJ_LOGIC1$<>"" AND TCB(32)>8 THEN _INTERFACE$=_OBJ_LOGIC1$; _IF$="INIT"; GOSUB DO_INTERFACE; IF _IF_ERR$<>"" THEN CMD_STR$="END"
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="NOTE_KEY$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC; _IF$="POST_DISPLAY"; GOSUB DO_INTERFACE
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1,ISARG=0; GOSUB ENABLE_GROUPS; RETURN 
0550 _KEY$=ARG_1$,ISARG=1
0560 NOTE_KEY$=MID(ARG_1$,1,5),_FIRST_FIELD=NOTE_TEXT.CTL
0570 _EOM$=$0D$,_KCNT=_NUMKEYS,_ENABLE_FLG=_NUMKEYS
0580 GOSUB POST_NOTE_KEY ! GOSUB FIND_REC
0590 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP: _IF$="WRAPUP"; GOSUB DO_INTERFACE
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN CV$=EVS(STP(_KEYS$[_CURKEY],1,"$")+"$"); IF QRY_VAL$<>"" AND QRY_VAL$=CV$ THEN QRY_VAL$="" ELSE IF CV$=PRIOR_VAL$ THEN RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 _IF$="POST_READ"; GOSUB DO_INTERFACE; IF _IF_ERR$<>"" THEN READ DATA FROM "" TO IOL=IOL(_FIL_NO); NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT ELSE GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD,ISARG=0
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 IF ISARG THEN ISARG=0 ELSE GOTO 1250
1230 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1240 ! MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$; IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT END_IF ; _IF$="PRE_WRITE"; GOSUB DO_INTERFACE; IF _IF_ERR$<>"" THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE; IF _ABORT_WRITE THEN _ABORT_WRITE=0; RETURN 
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC: _IF$="PRE_REMOVE"; GOSUB DO_INTERFACE; IF _IF_ERR$<>"" THEN EXIT 
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=REMOVE_ERR); _IF$="POST_REMOVE"; GOSUB DO_INTERFACE
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 REMOVE_ERR:
1730 IF ERR=0 THEN MSGBOX _MSG_REC_LOCKED$,_FYI$,"!"; EXIT 
1740 IF ERR=11 THEN MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1750 MSGBOX MSG("ACC_DENIED"),_FYI$,"!"
1760 EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); _IF$="POST_READ"; GOSUB DO_INTERFACE; IF _IF_ERR$<>"" THEN GOTO NEXT_REC ELSE GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 ISARG=0,_D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 SET_PARAM 'XI'=1; _KEY$=KEY(_FIL_NO,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); _KEY$=KEY(_FIL_NO,END=END_OF_FILE); SET_PARAM 'XI'=_SV_XI; READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); _IF$="POST_READ"; GOSUB DO_INTERFACE; IF _IF_ERR$<>"" THEN GOTO NEXT_REC ELSE GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); _IF$="POST_READ"; GOSUB DO_INTERFACE; IF _IF_ERR$<>"" THEN GOTO PRIOR_REC ELSE GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); _IF$="POST_READ"; GOSUB DO_INTERFACE; IF _IF_ERR$<>"" THEN GOTO PRIOR_REC ELSE GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=NO_FIRST); _IF$="POST_READ"; GOSUB DO_INTERFACE; IF _IF_ERR$<>"" THEN GOTO NEXT_REC ELSE GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST:IF ERR=0 THEN READ (_FIL_NO,KEY="",ERR=*PROCEED); DEF ERR=0; GOTO CHK_ERR_NXT ELSE MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!" END_IF ; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); _IF$="POST_READ"; GOSUB DO_INTERFACE; IF _IF_ERR$<>"" THEN GOTO PRIOR_REC ELSE GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 _CUR_KEY$=_KEY$,CHANGE_FLG=0
3060 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$="",_ABORT_WRITE=0
3230 EXTRACT (_FIL_NO,KEY=KEC(_FIL_NO),REC=_CUR$,DOM=WRT,ERR=REC_BUSY)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR); _IF$="POST_WRITE"; GOSUB DO_INTERFACE
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3410 REC_BUSY:
3420 IF ERR=0 THEN MSGBOX _MSG_REC_LOCKED$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG_CANNOT_WRITE$+SEP+MSG(ERR),_ERROR$
3430 _ABORT_WRITE=1
3440 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=NOTE_KEY.CTL,_FIRST_FIELD=NOTE_TEXT.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF STP(_KEYS$[_CURKEY],1,"$")=UCS(STP(ID$,1,"$")) THEN BREAK
4040 NEXT _CURKEY
4050 RETURN 
8000 ! 
8010 DO_INTERFACE:
8020 _IF_ERR$=""
8030 IF _INTERFACE$="" OR POS("<"+_IF$+">"=_IF_ABSENT$) THEN RETURN 
8040 PERFORM _INTERFACE$+";FM_"+_IF$,ERR=BAD_INTERFACE
8050 GOTO CHK_INTERFACE
8060 ! 
8070 BAD_INTERFACE:
8080 IF ERR=55 THEN _IF_ABSENT$+="<"+_IF$+">"; RETURN 
8090 _IF_ERR$=" "
8100 _IF_ERR$=MSG(ERR,ERR=*NEXT)
8110 ! 
8120 CHK_INTERFACE:
8130 IF NOT(NUL(_IF_ERR$)) THEN MSGBOX _IF_ERR$
8140 RETURN 
8150 ! 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN NOTE_KEY$=""
13030 NOTE_TEXT$=""
13040 CUST_DIV$=""
13050 CUST_CODE$=""
13060 INV_NUM$=""
13070 TRANS_TYPE$=""
13080 TRANS_DATE$=""
13090 SEQ_NO$=""
13100 AT8_UNUSED$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(9,"N")
15030 IF _ORIG.NOTE_KEY$=_CUR.NOTE_KEY$ OR NOTE_KEY$=_CUR.NOTE_KEY$ THEN GOTO *NEXT ELSE IF _ORIG.NOTE_KEY$=NOTE_KEY$ THEN _CHG2$=_CHG2$+SEP+MSG("NOTE_KEY")+" = "+_CUR.NOTE_KEY$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NOTE_KEY")+" = "+_CUR.NOTE_KEY$
15040 IF _ORIG.NOTE_TEXT$=_CUR.NOTE_TEXT$ OR NOTE_TEXT$=_CUR.NOTE_TEXT$ THEN GOTO *NEXT ELSE IF _ORIG.NOTE_TEXT$=NOTE_TEXT$ THEN _CHG2$=_CHG2$+SEP+MSG("NOTE_TEXT")+" = "+_CUR.NOTE_TEXT$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NOTE_TEXT")+" = "+_CUR.NOTE_TEXT$
15050 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15060 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15070 IF _ORIG.INV_NUM$=_CUR.INV_NUM$ OR INV_NUM$=_CUR.INV_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.INV_NUM$=INV_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$
15080 IF _ORIG.TRANS_TYPE$=_CUR.TRANS_TYPE$ OR TRANS_TYPE$=_CUR.TRANS_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.TRANS_TYPE$=TRANS_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("TRANS_TY")+" = "+_CUR.TRANS_TYPE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TRANS_TY")+" = "+_CUR.TRANS_TYPE$
15090 IF _ORIG.TRANS_DATE$=_CUR.TRANS_DATE$ OR TRANS_DATE$=_CUR.TRANS_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.TRANS_DATE$=TRANS_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("TRANS_D")+" = "+_CUR.TRANS_DATE$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TRANS_D")+" = "+_CUR.TRANS_DATE$
15100 IF _ORIG.SEQ_NO$=_CUR.SEQ_NO$ OR SEQ_NO$=_CUR.SEQ_NO$ THEN GOTO *NEXT ELSE IF _ORIG.SEQ_NO$=SEQ_NO$ THEN _CHG2$=_CHG2$+SEP+MSG("SEQ")+" = "+_CUR.SEQ_NO$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEQ")+" = "+_CUR.SEQ_NO$
15110 IF _ORIG.AT8_UNUSED$=_CUR.AT8_UNUSED$ OR AT8_UNUSED$=_CUR.AT8_UNUSED$ THEN GOTO *NEXT ELSE IF _ORIG.AT8_UNUSED$=AT8_UNUSED$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.AT8_UNUSED$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.AT8_UNUSED$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN NOTE_KEY$=_CUR.NOTE_KEY$
16030 IF _CHG_VAR$(2,1)="Y" THEN NOTE_TEXT$=_CUR.NOTE_TEXT$
16040 IF _CHG_VAR$(3,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16050 IF _CHG_VAR$(4,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16060 IF _CHG_VAR$(5,1)="Y" THEN INV_NUM$=_CUR.INV_NUM$
16070 IF _CHG_VAR$(6,1)="Y" THEN TRANS_TYPE$=_CUR.TRANS_TYPE$
16080 IF _CHG_VAR$(7,1)="Y" THEN TRANS_DATE$=_CUR.TRANS_DATE$
16090 IF _CHG_VAR$(8,1)="Y" THEN SEQ_NO$=_CUR.SEQ_NO$
16100 IF _CHG_VAR$(9,1)="Y" THEN AT8_UNUSED$=_CUR.AT8_UNUSED$
16990 RETURN 
18000 AUTO_NUMBER:! Auto number button pressed, act like put in an A
18010 NOTE_KEY$="A"+DIM(4); _EOM$=$0D$
18025 GOTO POST_NOTE_KEY
18049 ! 
20000 POST_NOTE_KEY:! Processing after note key
20010 IF NOT(NUL(NOTE_KEY$)) THEN {
20015 IF UCS(STP(NOTE_KEY$))="A" THEN {! Auto number
20020 PREV_ADDR$=KEL(_FIL_NO,KNO=0,END=*PROCEED); IF PREV_ADDR$="" THEN NOTE_KEY$=DIM(5,$00$) ELSE NOTE_KEY$=PREV_ADDR$
20025 NEW_KEY: NOTE_KEY$=FN%NEXT_SEQ$(NOTE_KEY$,5)
20030 REFRESH_FLG=1
20050  } ELSE {! not auto number
20055 NOTE_KEY$=PAD(NOTE_KEY$,5)
20060 NOTE_KEY$=STR(NOTE_KEY$:DIM(5,"0"),ERR=*NEXT)
20065 REFRESH_FLG=1
20080  }
20090  }
20095 GOTO FIND_REC
20099 ! 
20100 UPDATE_INVTRANS_INFO:
20110 ENTER NOTE_KEY$,AR7$
20120 _FILE_NAME$="AT8"+%C$; OPEN (HFN)_FILE_NAME$; _FIL_NO=LFO
20130 READ RECORD (_FIL_NO,KEY=NOTE_KEY$,ERR=20190)AT8$
20140 AT8$(1006,25)=MID(AR7$,1,25); AT8$(1031,3)=MID(AR7$,46,3)
20150 WRITE RECORD (_FIL_NO,KEY=NOTE_KEY$)AT8$
20190 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
20195 EXIT 
20199 ! 
56000 ! 
56001 REM "307435-DBD-337: Capture/store notes with Cash Receipts             
