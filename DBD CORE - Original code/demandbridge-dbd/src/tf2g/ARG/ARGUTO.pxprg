0010 ! ARGUTO - FMY FILE
0035 REM "5.7 - 03/27/19 - 16.522222 - crg - SSP# 307097
0037 REM "307097-Credit and Rebill process; rebilled invoices not showing    
0040 REM "Copyright 2019 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "ARGUTO","../FMG/FM.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="FMY"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=4,_CUR_KEY$=""
0430 DIM _KEYS$[1:6]; _KEYS$[1]="CUSTOMER$",_KEYS$[2]="INV_NUM$",_KEYS$[3]="SEQ_NUM$",_KEYS$[4]="SHIPPING_PT$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1011 IF ID$="SEQ_NUM" THEN SEQ_NUM$=PAD(SEQ_NUM$,3," "),SEQ=NUM(SEQ_NUM$,ERR=*NEXT),SEQ_NUM$=STR(SEQ:"000"),REFRESH_FLG=1
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; NEXT_ID=-1; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=INV_DATE.CTL
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1432 CALL "ZZWLKU;PARSE_ORD",ORDER$,ORDER_DIV$,ORDER_NUM$
1440 WRITE (_FIL_NO,KEY=_KEY$)
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1485 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS; NEXT_ID=CUSTOMER.CTL; NEXT_FOLDER=FLDR.ARGUTO.1.CTL
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY,_CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1705 NEXT_ID=CUSTOMER.CTL
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 IF _KEY$=_CUR_KEY$ THEN _KEY$=KEN(_FIL_NO,END=END_OF_FILE) ! Get past extracted record
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 EXTRACT (_FIL_NO,KEY=_KEY$)
3060 _CUR_KEY$=_KEY$; CUSTOMER$=CUST_DIV$+CUST_CODE$,ORDER$=ORDER_DIV$+ORDER_NUM$,VENDOR$=VEND_DIV$+VEND_CODE$
3061 ITEM_CUSTOMER$=ITEM_CUST_DIV$+ITEM_CUST_CODE$
3070 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,%CUST_DIV$,%CUST_CODE$
3071 CALL "ZZWLKU;PARSE_CUST",ITEM_CUSTOMER$,%ITEM_CUST_DIV$,%ITEM_CUST_CODE$
3072 CALL "ZZWLKU;PARSE_VEND",VENDOR$,%VEND_DIV$,%VEND_CODE$
3073 LOCATION$=LOC_TYPE$+LOC_CODE$
3074 INV_DATE2$=INV_FY$+INV_ACCTPD$
3075 GOSUB CK_BUTTON
3076 %CUSTOMER$=ITEM_CUSTOMER$
3199 RETURN 
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUSTOMER.CTL,_FIRST_FIELD=INV_DATE.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 SELL_QTY_PER$=STR(SELL_QTY_PER)
10030 QTY_SHIPPED$=STR(QTY_SHIPPED)
10040 UNIT_PRICE$=STR(UNIT_PRICE)
10050 EXT$=STR(EXT)
10060 EXT_VALUE$=STR(EXT_VALUE)
10070 PRORATED_FRT$=STR(PRORATED_FRT)
10080 PRORATED_STAX$=STR(PRORATED_STAX)
10090 PRORATED_SPEC_CHG$=STR(PRORATED_SPEC_CHG)
10110 PRORATED_SPEC_CHG$=STR(PRORATED_SPEC_CHG)
10120 FMS_PRICE$=STR(FMS_PRICE)
10130 FMS_EXT$=STR(FMS_EXT)
10160 FMY_UNUSED_5$=STR(FMY_UNUSED_5)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="SELL_QTY_PER",_X=SELL_QTY_PER.CTL,SELL_QTY_PER=NUM(SELL_QTY_PER$,ERR=NON_NUMERIC)
11030 _X$="QTY_SHIPPED",_X=QTY_SHIPPED.CTL,QTY_SHIPPED=NUM(QTY_SHIPPED$,ERR=NON_NUMERIC)
11040 _X$="UNIT_PRICE",_X=UNIT_PRICE.CTL,UNIT_PRICE=NUM(UNIT_PRICE$,ERR=NON_NUMERIC)
11050 _X$="EXT",_X=EXT.CTL,EXT=NUM(EXT$,ERR=NON_NUMERIC)
11060 _X$="EXT_VALUE",_X=EXT_VALUE.CTL,EXT_VALUE=NUM(EXT_VALUE$,ERR=NON_NUMERIC)
11070 _X$="PRORATED_FRT",_X=PRORATED_FRT.CTL,PRORATED_FRT=NUM(PRORATED_FRT$,ERR=NON_NUMERIC)
11080 _X$="PRORATED_STAX",_X=PRORATED_STAX.CTL,PRORATED_STAX=NUM(PRORATED_STAX$,ERR=NON_NUMERIC)
11090 _X$="PRORATED_SPEC_CHG",_X=PRORATED_SPEC_CHG.CTL,PRORATED_SPEC_CHG=NUM(PRORATED_SPEC_CHG$,ERR=NON_NUMERIC)
11110 _X$="PRORATED_SPEC_CHG",_X=PRORATED_SPEC_CHG.CTL,PRORATED_SPEC_CHG=NUM(PRORATED_SPEC_CHG$,ERR=NON_NUMERIC)
11120 _X$="FMS_PRICE",_X=FMS_PRICE.CTL,FMS_PRICE=NUM(FMS_PRICE$,ERR=NON_NUMERIC)
11130 _X$="FMS_EXT",_X=FMS_EXT.CTL,FMS_EXT=NUM(FMS_EXT$,ERR=NON_NUMERIC)
11160 _X$="FMY_UNUSED_5",_X=FMY_UNUSED_5.CTL,FMY_UNUSED_5=NUM(FMY_UNUSED_5$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN CUST_DIV$="",CUSTOMER$="",INV_NUM$=""
13030 IF _CLR_FLG$="R" THEN CUST_CODE$=""
13040 IF _CLR_FLG$="R" THEN LOC_TYPE$=""
13050 IF _CLR_FLG$="R" THEN LOC_CODE$=""
13060 IF _CLR_FLG$="R" THEN ITEM_CODE$=""
13070 IF _CLR_FLG$="R" THEN ACTIVITY_DATE$=""
13080 IF _CLR_FLG$="R" THEN SEQ_NUM$=""
13085 REM "BT_DIST.CTL'TEXT$="&Distributor",BT_CUST.CTL'TEXT$="&Customer",BT_DIST.CTL'BACKCOLOR$="Default",BT_CUST.CTL'BACKCOLOR$="Default"
13090 ACTIVITY_TYPE$=""
13095 ITEM_CUSTOMER$=""
13096 LOCATION$=""
13100 ITEM_CUST_DIV$=""
13110 ITEM_CUST_CODE$=""
13120 ITEM_DESC$=""
13130 REV_DATE$=""
13140 FROM_LOC$=""
13150 SHIP_VIA_DESC$=""
13160 ORDER_TYPE$=""
13170 ORDER_DIV$="",ORDER$=""
13180 ORDER_NUM$=""
13190 PO_CODE$=""
13200 CUST_PO$=""
13210 SRC_CODE$=""
13220 AUDIT_NUM$=""
13230 ORDER_DATE$=""
13240 ORDER_LINE_NUM$=""
13250 LOTTED_INV_ITEM$=""
13260 MEMO_REFERENCE$=""
13270 FMZ_UNUSED_1$=""
13280 VEND_DIV$="",VENDOR$="",%VEND_NAME$=""
13290 VEND_CODE$=""
13300 VEND_PLANT$=""
13310 SELL_UM$=""
13320 EXT_DOESNT_MATH_OUT$=""
13340 INV_DATE$=""
13350 STARTING_NUM$=""
13360 ENDING_NUM$=""
13370 REC_STAT$=""
13380 INV_FY$=""; INV_ACCTPD$=""
13390 REC_REPORT$=""
13400 PO_DIV_DETAIL$=""
13410 PO_NUM_DETAIL$=""
13420 PO_DATE$=""
13430 FACTORY_JOB_NUM$=""
13440 BIN_LOC$=""
13450 PRIMARY_UM$=""
13460 PACKAGING_UM$=""
13470 CUST_CMNT$=""
13480 RECVD_AUDIT_NUM$=""
13490 RELEASED_ON_INV_NUM$=""
13500 RELEASED_ACN$=""
13510 COST_CENTER_CODE_1$=""
13520 FMZ_UNUSED_2$=""
13530 CUST_PO_FROM_LOT$=""
13540 RECVG_DEPT$=""
13550 BILLING_DEPT$=""
13555 ORDERED_BY$=""
13560 CUST_SERV_REP$=""
13570 BUYER_ID$=""
13580 FMZ_UNUSED_3$=""
13590 SELL_QTY_PER=0
13600 QTY_SHIPPED=0
13610 FMS_PRICE=0
13620 FMS_EXTENDED_VALUE=0
13630 SELL_PRICE=0
13640 SELL_EXTENDED_VALUE=0
13650 NET_SALE=0
13660 PRORATED_FRT=0
13670 PRORATED_STAX=0
13680 PRORATED_SPEC_CHG=0
13690 UNIT_PRICE_BILLED=0
13700 UNITS_PER_PACK=0
13710 UNITS_PER_PACK_UNIT=0
13720 CNT_FROM_LOTS=0
13730 FMZ_UNUSED_4=0
13740 SHIP_FROM$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUST_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14035 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUSTOMER.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=LOC_TYPE.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=LOC_CODE.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14060 IF _ENABLE_FLG=5 THEN CALL "*wingrp;Enable",KEY5.GRP$; NEXT_ID=ITEM_CODE.CTL ELSE CALL "*wingrp;Disable",KEY5.GRP$
14070 IF _ENABLE_FLG=6 THEN CALL "*wingrp;Enable",KEY6.GRP$; NEXT_ID=ACTIVITY_DATE.CTL ELSE CALL "*wingrp;Disable",KEY6.GRP$
14080 IF _ENABLE_FLG=7 THEN CALL "*wingrp;Enable",KEY7.GRP$; NEXT_ID=SEQ_NUM.CTL ELSE CALL "*wingrp;Disable",KEY7.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 CK_BUTTON:
15010 REM "IF LOC_TYPE$="C" THEN BT_CUST.CTL'BACKCOLOR$="Light Cyan",BT_DIST.CTL'BACKCOLOR$="Default" ELSE BT_CUST.CTL'BACKCOLOR$="default",BT_DIST.CTL'BACKCOLOR$="Light Cyan"
15020 ! IF LOC_TYPE$="C" THEN BT_CUST.CTL'TEXT$="{!Arrow_Right}&Customer",BT_DIST.CTL'TEXT$="&Distributor" ELSE BT_CUST.CTL'TEXT$="&Customer",BT_DIST.CTL'TEXT$="{!Arrow_Right}&Distributor"
15030 RETURN 
20350 ! 700 - Set up tabbing between folders
20360 INIT_FOLDER:
20370 GOSUB ENABLE_GROUPS
20380 IF _ENABLE_FLG<>_KEY1 THEN IF TAB_FLG$="<" THEN NEXT_ID=_LAST_TAB ELSE NEXT_ID=_FIRST_TAB
20390 EXIT 
21000 SEL_QRY: VAL$=""
21010 PROCESS "QRY_FMY","../FMG/FM.EN",VAL$; IF STP(VAL$)="" THEN RETURN 
21020 CUSTOMER$=VAL$(1,10),_KEY$=VAL$,INV_NUM$=VAL$(11,8),SEQ_NUM$=VAL$(19,3),SHIPPING_PT$=VAL$(22); GOTO 1045
56000 ! "202480-GUI-cannot access summary bill file.  Enters in customer    
56002 REM "307097-Credit and Rebill process; rebilled invoices not showing    
