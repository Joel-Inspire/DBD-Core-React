0010 ! ../ARG/ARGSAS - Salesperson Comparison Report
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Dec. 16, 2002 12:22
0030 ! ************************************************************************
0040 PROCESS "ARGSAS","../ARG/AR.EN"
0050 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZZS"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0183 X2=-1; X0=-1
0185 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2
0188 CLOSE (14); OPEN (14)"ZZPARM"; DIM X$(8); X$(1)=FID(0); READ (14,KEY=X$(1,8),DOM=0231)X3$; IF X3$(146,6)="AR2SHS" THEN X1$="Customer Gross Profit Comparison",FLAG1$="GP"
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="RPT_SELEC$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 ARG_1$="ARGSAA"+RPT_SELEC$; %PRG_NAME$="ARGSAA"
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 GOSUB PROCESS_READ; GOSUB DISP_REC
0575 GOSUB LOAD_FISCAL_YEAR
0590 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 EXIT 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 _KEY$=PRG_NAME$+RPT_SELEC$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 _KEY$=PRG_NAME$+RPT_SELEC$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=_KEY$,DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=PRG_NAME$+RPT_SELEC$,ERR=WRITE_ERROR)
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=RPT_SELEC.CTL,_FIRST_FIELD=RPT_DESC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 RPT_NUM1$=STR(RPT_NUM1)
10030 RPT_NUM2$=STR(RPT_NUM2)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="RPT_NUM1",_X=RPT_NUM1.CTL,RPT_NUM1=NUM(RPT_NUM1$,ERR=NON_NUMERIC)
11030 _X$="RPT_NUM2",_X=RPT_NUM2.CTL,RPT_NUM2=NUM(RPT_NUM2$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN PRG_NAME$=""
13030 RPT_SELEC$=""
13040 RPT_DESC$=""
13050 RPT_OPT$=""
13060 RPT_SEQ$=""
13070 RPT_SHIPTO$=" "
13080 RPT_AGEINV$=""
13090 RPT_REPTYPE$=""
13110 RPT_POSTAGE$=""
13120 RPT_NAMEADD$=""
13130 RPT_INVRPT$=""
13150 RPT_PER$=""
13160 RPT_CCINV$=""
13170 RPT_AGEDATE$=""
13180 RPT_PTD$=""
13190 RPT_RECAP$=""
13200 DATE_FLD1$=""
13210 DATE_FLD2$=""
13220 DATE_FLD3$=""
13230 DATE_FLD4$=""
13240 RPT_CMT1$=""
13250 RPT_CMT2$=""
13260 PRT_MODE$=""
13270 RPT_OUTDEV$=""
13280 RPT_VERT$=""
13290 RPT_HORIZ$=""
13300 RPT_AUX1$=""
13310 RPT_AUX2$=""
13320 RPT_AUX3$=""
13330 RPT_AUX4$=""
13340 RPT_LINES$=""
13350 RPT_FORMCODE$=""
13360 NOT_USED$=""
13370 RPT_JOBCARD$=""
13380 RPT_JOBCARD_FLG$=""
13390 RPT_NUM1=0
13400 RPT_NUM2=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(31,"N")
15030 IF _ORIG.PRG_NAME$=_CUR.PRG_NAME$ OR PRG_NAME$=_CUR.PRG_NAME$ THEN GOTO *NEXT ELSE IF _ORIG.PRG_NAME$=PRG_NAME$ THEN _CHG2$=_CHG2$+SEP+MSG("PROG_N")+" = "+_CUR.PRG_NAME$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PROG_N")+" = "+_CUR.PRG_NAME$
15040 IF _ORIG.RPT_SELEC$=_CUR.RPT_SELEC$ OR RPT_SELEC$=_CUR.RPT_SELEC$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_SELEC$=RPT_SELEC$ THEN _CHG2$=_CHG2$+SEP+MSG("SELECTION")+" = "+_CUR.RPT_SELEC$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SELECTION")+" = "+_CUR.RPT_SELEC$
15050 IF _ORIG.RPT_DESC$=_CUR.RPT_DESC$ OR RPT_DESC$=_CUR.RPT_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_DESC$=RPT_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC")+" = "+_CUR.RPT_DESC$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC")+" = "+_CUR.RPT_DESC$
15060 IF _ORIG.RPT_OPT$=_CUR.RPT_OPT$ OR RPT_OPT$=_CUR.RPT_OPT$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_OPT$=RPT_OPT$ THEN _CHG2$=_CHG2$+SEP+MSG("OPTIONS")+" = "+_CUR.RPT_OPT$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OPTIONS")+" = "+_CUR.RPT_OPT$
15070 IF _ORIG.RPT_SEQ$=_CUR.RPT_SEQ$ OR RPT_SEQ$=_CUR.RPT_SEQ$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_SEQ$=RPT_SEQ$ THEN _CHG2$=_CHG2$+SEP+MSG("SEQ")+" = "+_CUR.RPT_SEQ$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEQ")+" = "+_CUR.RPT_SEQ$
15080 IF _ORIG.RPT_FLEX$=_CUR.RPT_FLEX$ OR RPT_FLEX$=_CUR.RPT_FLEX$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_FLEX$=RPT_FLEX$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIN_ST_A")+" = "+_CUR.RPT_FLEX$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIN_ST_A")+" = "+_CUR.RPT_FLEX$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN PRG_NAME$=_CUR.PRG_NAME$
16030 IF _CHG_VAR$(2,1)="Y" THEN RPT_SELEC$=_CUR.RPT_SELEC$
16040 IF _CHG_VAR$(3,1)="Y" THEN RPT_DESC$=_CUR.RPT_DESC$
16050 IF _CHG_VAR$(4,1)="Y" THEN RPT_OPT$=_CUR.RPT_OPT$
16060 IF _CHG_VAR$(5,1)="Y" THEN RPT_SEQ$=_CUR.RPT_SEQ$
16070 IF _CHG_VAR$(6,1)="Y" THEN RPT_SHIPTO$=_CUR.RPT_SHIPTO$
16080 IF _CHG_VAR$(7,1)="Y" THEN RPT_AGEINV$=_CUR.RPT_AGEINV$
16090 IF _CHG_VAR$(8,1)="Y" THEN RPT_REPTYPE$=_CUR.RPT_REPTYPE$
16110 IF _CHG_VAR$(10,1)="Y" THEN RPT_POSTAGE$=_CUR.RPT_POSTAGE$
16120 IF _CHG_VAR$(11,1)="Y" THEN RPT_NAMEADD$=_CUR.RPT_NAMEADD$
16130 IF _CHG_VAR$(12,1)="Y" THEN RPT_INVRPT$=_CUR.RPT_INVRPT$
16140 IF _CHG_VAR$(13,1)="Y" THEN RPT_FISYR$=_CUR.RPT_FISYR$
16150 IF _CHG_VAR$(14,1)="Y" THEN RPT_PER$=_CUR.RPT_PER$
16160 IF _CHG_VAR$(15,1)="Y" THEN RPT_CCINV$=_CUR.RPT_CCINV$
16170 IF _CHG_VAR$(16,1)="Y" THEN RPT_AGEDATE$=_CUR.RPT_AGEDATE$
16180 IF _CHG_VAR$(17,1)="Y" THEN RPT_PTD$=_CUR.RPT_PTD$
16190 IF _CHG_VAR$(18,1)="Y" THEN RPT_RECAP$=_CUR.RPT_RECAP$
16200 IF _CHG_VAR$(19,1)="Y" THEN DATE_FLD1$=_CUR.DATE_FLD1$
16210 IF _CHG_VAR$(20,1)="Y" THEN DATE_FLD2$=_CUR.DATE_FLD2$
16220 IF _CHG_VAR$(21,1)="Y" THEN DATE_FLD3$=_CUR.DATE_FLD3$
16230 IF _CHG_VAR$(22,1)="Y" THEN DATE_FLD4$=_CUR.DATE_FLD4$
16240 IF _CHG_VAR$(23,1)="Y" THEN RPT_CMT1$=_CUR.RPT_CMT1$
16250 IF _CHG_VAR$(24,1)="Y" THEN RPT_CMT2$=_CUR.RPT_CMT2$
16260 IF _CHG_VAR$(25,1)="Y" THEN PRT_MODE$=_CUR.PRT_MODE$
16270 IF _CHG_VAR$(26,1)="Y" THEN RPT_OUTDEV$=_CUR.RPT_OUTDEV$
16280 IF _CHG_VAR$(27,1)="Y" THEN RPT_VERT$=_CUR.RPT_VERT$
16290 IF _CHG_VAR$(28,1)="Y" THEN RPT_HORIZ$=_CUR.RPT_HORIZ$
16300 IF _CHG_VAR$(29,1)="Y" THEN RPT_AUX1$=_CUR.RPT_AUX1$
16310 IF _CHG_VAR$(30,1)="Y" THEN RPT_AUX2$=_CUR.RPT_AUX2$
16320 IF _CHG_VAR$(31,1)="Y" THEN RPT_AUX3$=_CUR.RPT_AUX3$
16330 IF _CHG_VAR$(32,1)="Y" THEN RPT_AUX4$=_CUR.RPT_AUX4$
16340 IF _CHG_VAR$(33,1)="Y" THEN RPT_LINES$=_CUR.RPT_LINES$
16350 IF _CHG_VAR$(34,1)="Y" THEN RPT_FORMCODE$=_CUR.RPT_FORMCODE$
16360 IF _CHG_VAR$(35,1)="Y" THEN NOT_USED$=_CUR.NOT_USED$
16370 IF _CHG_VAR$(36,1)="Y" THEN RPT_JOBCARD$=_CUR.RPT_JOBCARD$
16380 IF _CHG_VAR$(37,1)="Y" THEN RPT_JOBCARD_FLG$=_CUR.RPT_JOBCARD_FLG$
16390 IF _CHG_VAR$(38,1)="Y" THEN RPT_NUM1=_CUR.RPT_NUM1
16400 IF _CHG_VAR$(39,1)="Y" THEN RPT_NUM2=_CUR.RPT_NUM2
16990 RETURN 
17000 ! 
19000 LOAD_SORT_OPTIONS:
19010 IF LEN(RPT_FISYR$)=4 THEN PREV_YR$=STR(NUM(RPT_FISYR$)-1) ELSE PREV_YR$=STR(NUM(CR_YEAR$)-1)
19020 SORT_LIST$=""; IF NUL(RPT_SHIPTO$)=0 THEN CR_SHIPTO$=RPT_SHIPTO$
19030 SORT_LIST$="None"+"/"
19040 SORT_LIST$=SORT_LIST$+"Sales Period "+RPT_PER$+", "+RPT_FISYR$+"/"
19050 SORT_LIST$=SORT_LIST$+"Sales Period "+RPT_PER$+", "+PREV_YR$+"/"
19060 SORT_LIST$=SORT_LIST$+"Inc\Dec Period Sales"+"/"
19070 SORT_LIST$=SORT_LIST$+"Inc\Dec Period Sales Percentage"+"/"
19080 SORT_LIST$=SORT_LIST$+"Sales "+RPT_FISYR$+" YTD Sales"+"/"
19090 SORT_LIST$=SORT_LIST$+"Sales "+PREV_YR$+" YTD Sales"+"/"
19100 SORT_LIST$=SORT_LIST$+"Inc\Dec YTD Sales"+"/"
19110 SORT_LIST$=SORT_LIST$+"Inc\Dec YTD Sales Percentage"+"/"
19120 DROP_BOX LOAD RPT_SHIPTO.CTL,SORT_LIST$
19130 DROP_BOX WRITE RPT_SHITO.CTL,CR_SHIPTO$
19140 RETURN 
19150 ! 
20000 VIEW_REPORT:
20010 ! View Report Routine.
20020 DIM A$(91),R0$(125),W$(100),K$(8),A[7],W[1]
20030 IOLIST A$,A[1],A[2],A[3],A[4],A[5],A[6],A[7]
20040 IOLIST R0$,W$
20050 ZZP=HFN
20060 OPEN (ZZP)"ZZP"
20070 ! 
20080 A$(1,6)=PRG_NAME$
20090 A$(7,12)=RPT_SELEC$; A$(19,40)=RPT_DESC$
20100 A$(59,12)=RPT_OPT$; A$(71,1)=RPT_SEQ$
20110 A$(74,4)=RPT_FISYR$; A$(78,2)=RPT_PER$
20120 W[0]=NUM(RPT_SHIPTO$); W[1]=RPT_NUM1
20130 A$(80,2)="01"
20140 ! 
20150 R0$(1,1)=RPT_MODE$; R0$(2,6)=RPT_OUTDEV$
20160 R0$(9,1)=RPT_VERT$; R0$(10,1)=RPT_HORIZ$
20170 R0$(11,1)=RPT_AUX1$; R0$(12,1)=RPT_AUX2$
20180 R0$(13,1)=RPT_AUX3$; R0$(14,1)=RPT_AUX4$
20190 R0$(15,2)=RPT_LINES$; R0$(17,1)=RPT_FORMCODE$
20200 R0$(65,60)=RPT_JOBCARD$; R0$(125,1)=RPT_JOBCARD_FLG$
20210 ! 
20220 ! 
20230 IF RPT_SEQ$="1" THEN {! Customer
20240 T1$="AR1..."
20250 IF NUL(CUST_START$) THEN W$="          " ELSE W$=CUST_START$
20260 IF NUL(CUST_END$) THEN W$=W$+"~~~~~~~~~~" ELSE W$=W$+CUST_END$
20270  }
20280 IF RPT_SEQ$="2" OR RPT_SEQ$="5" THEN {! Salesperson or 2nd Slsp
20290 T1$="AR3..."
20300 IF NUL(SLS_START$) THEN W$="    " ELSE W$=SLS_START$
20310 IF NUL(SLS_END$) THEN W$=W$+"~~~~" ELSE W$=W$+SLS_END$
20320  }
20330 IF RPT_SEQ$="3" THEN {! Slsp/Customer Type
20340 T1$="AR3..."
20350 IF NUL(SLS_START$) THEN W$="    " ELSE W$=SLS_START$
20360 IF NUL(CAT_START$) THEN W$=W$+"         " ELSE W$=W$+CAT_START$
20370 IF NUL(SLS_END$) THEN W$=W$+"~~~~" ELSE W$=W$+SLS_END$
20380 IF NUL(CAT_END$) THEN W$=W$+"~~~~~~~~~" ELSE W$=W$+CAT_END$
20390  }
20400 IF RPT_SEQ$="4" THEN {
20410 T1$="ARG..."
20420 IF NUL(CAT_START$) THEN W$="         " ELSE W$=CAT_START$
20430 IF NUL(CUST_END$) THEN W$=W$+"~~~~~~~~~" ELSE W$=W$+CUST_END$
20440  }
20450 K$=X3$(1,8) ! FID(0) is the key
20460 ! ZZP record, X3$ & X4$ system info, T1$ filename, R0$
20470 WRITE (ZZP,KEY=K$)X3$,X4$,T1$,R0$,W$,A$
20480 CLOSE (ZZP)
20500 PRINT 'DIALOGUE'(5,5,80,25,"Printing Customer Sales Comaprison Report"); CALL "ARGSUA"; PRINT 'POP'
20510 CMD_STR$="END"
20520 RETURN 
20530 ! 
20540 ! 
30000 ! 
30010 LOAD_FISCAL_YEAR:
30020 ZZPARM=HFN
30030 OPEN (ZZPARM)"ZZPARM"
30040 READ (ZZPARM,KEY=%C$+"G/L",DOM=*NEXT)GL_REC$; CR_YEAR$=GL_REC$(34,4),CR_PD$=GL_REC$(38,2)
30050 KE$=%C$+"G/LYE",RPT_FISYR$=""
30060 READ (ZZPARM,KEY=KE$,DOM=*NEXT)
30070 K$=KEY(ZZPARM,END=30120); READ (ZZPARM)Z9$
30080 IF LEN(K$)<8 OR KE$<>K$(1,8) THEN GOTO END_LOAD_FISCAL_YEAR
30090 RPT_FISYR$=RPT_FISYR$+K$(9)+"/"
30100 IF K$(9,4)=CR_YEAR$ THEN CC$=Z9$(21)
30110 GOTO 30070
30120 END_LOAD_FISCAL_YEAR:
30130 CC$=CC$(NUM(CR_PD$)*6-5,6),RPT_ENDING$=CC$,REFRESH_FLG=1
30140 ! Load start/ending year
30150 DROP_BOX LOAD RPT_FISYR.CTL,RPT_FISYR$
30160 DROP_BOX WRITE RPT_FISYR.CTL,CR_YEAR$
30170 RPT_FISYR$=CR_YEAR$
30180 ! Load start/ending period
30190 RPT_PER$=""
30200 FOR ACCT=1 TO 12; RPT_PER$=RPT_PER$+STR(ACCT:"00")+"/"; NEXT ACCT
30210 ! 
30220 DROP_BOX LOAD RPT_PER.CTL,RPT_PER$
30230 DROP_BOX WRITE RPT_PER.CTL,CR_PD$
30240 RPT_PER$=CR_PD$
30250 RETURN 
30260 LOAD_ENDING_DATE:
30270 IF LEN(RPT_FISYR$)>4 THEN VAL$=CR_YEAR$ ELSE VAL$=RPT_FISYR$
30280 FIND (ZZPARM,KEY=KE$+VAL$)Z9$; CC$=Z9$(21)
30290 IF LEN(RPT_PER$)>2 THEN VAL=NUM(CR_PD$) ELSE VAL=NUM(RPT_PER$)
30300 CC$=CC$(VAL*6-5,6),RPT_ENDING$=CC$,REFRESH_FLG=1
30310 RETURN 
