0010 ! ARGMAB - Customer Constant Data
0035 REM "5.7 - 12/16/21 - 15.422389 - jvv - SSP# 307387
0037 REM "307387-EQLink DBD Bridge to Qnet                                   
0040 REM "Copyright 2021 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 IF TCB(13)=1 THEN BEGIN 
0055 _CUSTOMER$=%CUSTOMER$
0060 PROCESS "ARGMAB","../ARG/AR.EN"
0061 IF %NEW_CUST THEN PROCESS "ARGMAC","../ARG/AR.EN"
0065 %CUSTOMER$=_CUSTOMER$
0070 ! IF TCB(13)=1 THEN RUN "ZMENU"
0075 END 
0100 INIT:! ^100,5 - Initialization routine
0200 ! ^100,5 - Constants & functions
0205 DEF FND$(LOCAL X$)=MID(X$,3,2)+"/"+MID(X$,5,2)+"/"+STR(DEC(MID(X$,1,1))+125)+MID(X$,2,1)
0300 ! ^100,5 - Iolists and templates
0305 GLOBAL_IOL:IOLIST %CUST_NAME$,%SALES_NAME1$,%SALES_NAME2$,%SALES_NAME3$,%SALES_NAME4$,%SALES_NAME5$,%LIST_TYPE_CODE$,%LIST_TYPE_DESC$,%CONT_NAME$
0310 UDEF_IOL:IOLIST FIELD_NUMBER$,FIELD_DATA$
0315 SORT_IOL:IOLIST OLD_ARU_SORT_KEY$,OLD_ARW_SORT_KEY$,OLD_ARE_SORT_KEY$,OLD_AS8_SORT_KEY$,OLD_ASH_SORT_KEY$
0500 ! 500,5 - Open files
0503 GOSUB SETUP_MESSAGES
0505 _FILE_NAME$="AR1"+%C$; _AR1=HFN; OPEN (_AR1,ERR=OPEN_ERR,IOL=*)_FILE_NAME$ ! Customer master
0510 _FILE_NAME$="AR3"+%C$; _AR3=HFN; OPEN (_AR3,ERR=OPEN_ERR,IOL=*)_FILE_NAME$ ! Salesman master
0515 _FILE_NAME$="AR5"+%C$; _AR5=HFN; OPEN (_AR5,ERR=OPEN_ERR,IOL=*)_FILE_NAME$ ! Customer messages
0520 _FILE_NAME$="ARG"+%C$; _ARG=HFN; OPEN (_ARG,ERR=OPEN_ERR,IOL=*)_FILE_NAME$ ! Customer category setup
0525 _FILE_NAME$="ARH"+%C$; _ARH=HFN; OPEN (_ARH,ERR=OPEN_ERR,IOL=*)_FILE_NAME$ ! Division master
0530 _FILE_NAME$="ASV"+%C$; _ASV=HFN; OPEN (_ASV,ERR=OPEN_ERR,IOL=*)_FILE_NAME$ ! User Defined fields
0535 _FILE_NAME$="ASW"+%C$; _ASW=HFN; OPEN (_ASW,ERR=OPEN_ERR,IOL=*)_FILE_NAME$ ! Customer user defined fields
0540 _FILE_NAME$="FMP"+%C$; _FMP=HFN; OPEN (_FMP,ERR=OPEN_ERR)_FILE_NAME$
0545 WORK=HFN; OPEN (WORK)"*memory*" ! Holding file for 'C' type ASV rec's
0550 UDEF=HFN; OPEN (UDEF)"*memory*" ! Holding file for user defined data
0555 _FILE_NAME$="ZZPARM"; ZZPARM=HFN; OPEN (ZZPARM,ERR=OPEN_ERR)_FILE_NAME$
0557 _FILE_NAME$="ARU"+%C$,_ARU=HFN; OPEN (_ARU,ERR=OPEN_ERR)_FILE_NAME$
0558 _FILE_NAME$="ARW"+%C$,_ARW=HFN; OPEN (_ARW,ERR=OPEN_ERR)_FILE_NAME$
0559 _FILE_NAME$="ARE"+%C$,_ARE=HFN; OPEN (_ARE,ERR=OPEN_ERR)_FILE_NAME$
0560 _FILE_NAME$="ASX"+%C$,_ASX=HFN; OPEN (_ASX,ERR=OPEN_ERR)_FILE_NAME$
0561 _FILE_NAME$="ASH"+%C$,_ASH=HFN; OPEN (_ASH,ERR=OPEN_ERR)_FILE_NAME$
0562 _FILE_NAME$="AR5"+%C$,_AR5=HFN; OPEN (_AR5,ERR=OPEN_ERR)_FILE_NAME$
0565 GOTO CONTINUE
0570 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0575 CMD_STR$="E"
0580 EXIT 
0585 ! 
0590 CONTINUE:
0595 ! 
0600 ! ^100,5 - Get parameters
0605 IF X1>1 THEN CMD_STR$="E"; EXIT 
0610 READ (ZZPARM,KEY=%C$+"A/R",DOM=*NEXT)P0$; GOTO 0620
0615 CMD_STR$="E"; EXIT 
0620 READ (ZZPARM,KEY=%C$+"AR1",DOM=*NEXT)P2$; GOTO 0630
0625 CMD_STR$="E"; EXIT 
0630 SEC$=""; READ (ZZPARM,KEY="osec"+%X3_OP_ID$,DOM=*NEXT)SEC$
0632 RESTRICT_SLSP=0; IF MID(SEC$,169,1)="Y" THEN RESTRICT_SLSP=1 ! WO 274987
0635 TM_PARMS$=""; CALL "RTGPRM",ERR=*NEXT,TM_PARMS$
0636 READ (ZZPARM,KEY=%C$+"AR3",DOM=*NEXT)P3$
0640 %CUST_CAT_LEN=NUM(P0$(20,1)),%CUST_CAT_MASK$=DIM(%CUST_CAT_LEN,"X")
0645 GOSUB LOAD_USER_DEF
0646 HAS_MODULE_TW=FN%HAS_MODULE("TW"); IF HAS_MODULE_TW THEN FIND (ZZPARM,KEY=%C$+"T/W",DOM=*NEXT)TW_PARMS$ ! 249059
0650 RETURN 
0655 ! 
0700 POST_DISPLAY:! ^100,5 - Do stuff after the panel is created
0703 IF P0$(15,1)<>"Y" THEN CALL "*wingrp;Hide",BILLTO.GRP$
0704 IF MID(P3$,8,1)<>"Y" THEN FLDR'DROPTAB(6) ! Drop tab 6 if not enabled
0705 IF %CUSTOMER$<>"" THEN {
0710 CUSTOMER$=%CUSTOMER$
0715 DISABLE CONTROL CUSTOMER.CTL
0720 GOSUB PROCESS_CUSTOMER
0721 CALLED$="Y"
0722 IF CALLED$="Y" THEN CALL "*wingrp;Hide",SCROLL.GRP$
0725  }
0730 NEXT_ID=CUSTOMER.CTL,REFRESH_FLG=1
0735 RETURN 
0740 ! 
1000 PROCESS_CUSTOMER:! ^1000,5 - Get customer code and associated fields
1005 READ DATA FROM "" TO IOL=IOL(_AR1); READ DATA FROM "" TO IOL=SORT_IOL
1010 CALL "ZZWLKU;Parse_cust",CUSTOMER$,CUST_DIV$,CUST_CODE$
1012 IF %NEW_CUST THEN GOSUB LOAD_DEFAULTS ! SSP 206525
1015 READ (_AR1,KEY=CUST_DIV$+CUST_CODE$,DOM=*NEXT,ERR=CHECK_ERR); GOSUB PROCESS_AR5; GOTO 1030
1016 FORCE_ID$="cust_name.ctl"; DATE_SETUP$=%X3_TODAY$
1020 READ (_ARH,KEY=CUST_DIV$,DOM=MISSING_DIV)
1025 IF MID(P2$,66,1)="Y" THEN PERFORM "ARGMAS;Retrieve"
1030 BILL_TO_CUST$=BILL_TO_CUST_DIV$+BILL_TO_CUST_CODE$,CUSTOMER$=CUST_DIV$+CUST_CODE$; GOSUB SET_OLD_SORT_KEY_VALUES
1035 NEXT_ID=CUST_NAME.CTL
1040 CALL "*wingrp;enable",FIELDS.GRP$
1045 CALL "*wingrp;disable",KEY.GRP$
1050 CALL "*wingrp;enable",BUTTONS.GRP$
1055 IF MID(SEC$,45,1)="Y" OR (TM_PARMS$>"" AND MID(TM_PARMS$,7,1)="R") THEN CALL "*wingrp;disable",WRITE.GRP$; CALL "*WINGRP;DISABLE",FIELDS.GRP$
1056 IF MID(SEC$,57,1)="Y" THEN CALL "*WINGRP;DISABLE",SEC_1.GRP$; CALL "*WINGRP;ENABLE",SEC_2.GRP$
1060 REFRESH_FLG=1
1065 RETURN 
1070 ! 
1100 MISSING_DIV:! ^100,5 - Can't process this new customer code
1105 MSGBOX MSG("DIV_NOF",CUST_DIV$),MSG("ATTN"),"!"
1110 NEXT_ID=CUSTOMER.CTL,REFRESH_FLG=1,CUSTOMER$="",CUST_DIV$="",CUST_CODE$=""
1115 RETURN 
1120 ! 
1200 CHECK_CHANGES:! ^100,5
1201 IF MID(SEC$,45,1)="Y" THEN GOTO 1230
1205 IF CHANGE_FLG OR NUM(FIN(UDEF,"numrec")) THEN {
1210 MSGBOX MSG("REC_ALTERD"),MSG("UPDATE"),"?,YESNO",ANSWER$
1215 IF ANSWER$="YES" THEN GOTO WRITE_REC
1220 CHANGE_FLG=0
1225  }
1230 REFRESH_FLG=1,CHANGE_FLG=0
1235 RETURN 
1240 ! 
2000 FIND_REC:! ^1000,5 - Lookup record
2005 IF STP(CUSTOMER$,1)="" THEN {
2010 MSGBOX MSG("CUST_CODE")+" "+MSG("IS_MISSING"),MSG("ATTENTION"),"!"
2015 NEXT_ID=CUSTOMER.CTL,REFRESH_FLG=1,CHANGE_FLG=0
2020 EXIT 
2025  }
2030 READ DATA FROM "" TO IOL=IOL(_AR1)
2035 CALL "ZZWLKU;Parse_cust",CUSTOMER$,CUST_DIV$,CUST_CODE$
2040 READ (_AR1,KEY=CUST_DIV$+CUST_CODE$,DOM=*NEXT); GOSUB PROCESS_AR5; GOTO 2050
2045 READ (_ARH,KEY=CUST_DIV$,DOM=MISSING_DIV)
2050 BILL_TO_CUST$=BILL_TO_CUST_DIV$+BILL_TO_CUST_CODE$
2055 NEXT_ID=CUST_NAME.CTL,REFRESH_FLG=1,CHANGE_FLG=0
2060 CALL "*wingrp;enable",FIELDS.GRP$
2065 CALL "*wingrp;enable",BUTTONS.GRP$
2070 IF MID(SEC$,45,1)="Y" OR (TM_PARMS$>"" AND MID(TM_PARMS$,7,1)="R") THEN CALL "*wingrp;disable",WRITE.GRP$
2075 CALL "*wingrp;disable",KEY.GRP$
2080 EXIT 
2085 ! 
2100 CLEAR_REC:! ^100,5 - Initialize fields and clear globals
2105 GOSUB CHECK_CHANGES
2110 READ DATA FROM "" TO IOL=IOL(_AR1)
2115 READ DATA FROM "" TO IOL=GLOBAL_IOL
2120 CALL "*wingrp;disable",BUTTONS.GRP$
2125 CALL "*wingrp;disable",FIELDS.GRP$
2130 CALL "*wingrp;enable",KEY.GRP$
2135 NEXT_ID=CUSTOMER.CTL,NEXT_FOLDER=FLDR.ARGMAB.1.CTL
2140 REFRESH_FLG=1,CHANGE_FLG=0,BILL_TO_CUST$="",CUSTOMER$=""
2145 CLOSE (UDEF); OPEN (UDEF)"*memory*"
2150 EXIT 
2155 ! 
2200 WRITE_REC:! ^100,5 - Write the record
2201 IF MID(SEC$,45,1)="Y" THEN EXIT 
2203 WRITE_FLG=0; EXIT_FLG=0
2204 ! CUST_CATEGORY$=CATEGORY$
2205 IF STP(CUST_CATEGORY$,2)="" THEN {
2210 MSGBOX MSG("MUST_CST_C"),MSG("ATTN"),"!"
2215 NEXT_FOLDER=FLDR.ARGMAB.2.CTL,NEXT_ID=CUST_CATEGORY.CTL,EXIT_FLG=1,REFRESH_FLG=1
2220 EXIT 
2225  }
2230 IF STP(STAX_CODE$,2)="" THEN {
2233 MSGBOX MSG("MUST_CST_T"),MSG("ATTN"),"!"
2236 NEXT_FOLDER=FLDR.ARGMAB.2.CTL,NEXT_ID=STAX_CODE.CTL,EXIT_FLG=1,REFRESH_FLG=1
2239 EXIT 
2242  }
2245 IF HAS_MODULE_TW AND MID(TW_PARMS$,8,1)="Y" THEN {! 249059
2247 GOSUB CHECK_SALESTAX_CODE
2249 IF TAX_CODE_OK$<>"Y" THEN MSGBOX MSG("TW_BAD_TAX",STAX_CODE$,CUST_ST$,CUST_ZIP_CODE$,CUST_CITY$,MID(G$,1,10)),MSG("ATTN"),"!,TIM=5"; STAX_CODE$=MID(G$,1,10); GOSUB PROCESS_AR5; NEXT_FOLDER=FLDR.ARGMAB.2.CTL,NEXT_ID=STAX_CODE.CTL,EXIT_FLG=1,REFRESH_FLG=1; EXIT 
2253  }
2255 IF STP(SPER_CODE$+SPER_CODE_2$+SPER_CODE_3$+SPER_CODE_4$+SPER_CODE_5$,2)="" THEN {
2260 MSGBOX MSG("MUST_CST_S"),MSG("ATTN"),"!"
2265 NEXT_FOLDER=FLDR.ARGMAB.3.CTL,NEXT_ID=SPER_CODE.CTL,EXIT_FLG=1,REFRESH_FLG=1
2270 EXIT 
2275  }
2276 IF QLL THEN {! 307387
2277 IF STP(EQD_CUST$,2)="" AND ELINK_FLG$="Y" THEN MSGBOX MSG("QL_CLIENT"),MSG("ATTN"),"!,TIM=5"; NEXT_FOLDER=FLDR.ARGMAB.2.CTL,NEXT_ID=EQD_CUST.CTL,EXIT_FLG=1,REFRESH_FLG=1; EXIT 
2278  }
2280 TOTAL=0
2285 FOR X=1 TO 5; VAR$="SPER_COMM_SPLIT_"+STR(X),TOTAL+=VIN(VAR$); NEXT X
2288 ! FOR X=1 TO 5; VAR$="SPER_"+STR(X)+"_COMM_SPLIT",TOTAL+=VIN(VAR$); NEXT X
2290 IF TOTAL<>100 THEN {
2295 MSGBOX MSG("COMM_EQUAL"),MSG("ATTN"),"!"
2296 NEXT_FOLDER=FLDR.ARGMAB.3.CTL,FORCE_ID$="sper_comm_split_1.ctl",EXIT_FLG=1,REFRESH_FLG=1
2297 RETURN 
2298  }
2300 IF MID(P2$,67,1)="Z" THEN {
2305 CREDIT_CONT$=PURCH_AGENT$
2310 CREDIT_CONT_GREETING$=CUST_GREETING$
2315 CREDIT_CONT_PHONE$=CUST_PHONE$
2320  }
2322 IF MID(P2$,68,1)="Y" THEN SIC_CODE$=SIC_CODE_2$ ELSE SIC_CODE$=SIC_CODE_1$ ! SSP248786 jdf
2325 WRITE (_AR1,KEY=CUST_DIV$+CUST_CODE$)
2327 WRITE_FLG=1
2330 GOSUB WRITE_SORT_FILES
2340 IF QLL AND ELINK_FLG$="Y" THEN XET$="AR1",XSYS$="EQLINK",XKY$=CUST_DIV$+CUST_CODE$,XVAL$=EQD_CUST$; CALL "UPDZYR;WRITE_XREF",ERR=*NEXT,XET$,XSYS$,XKY$,XVAL$,ELINK_FLG$
2400 ! ^100,5 - Look for user defined fields data changes
2405 IF NUM(FIN(UDEF,"numrec")) THEN {
2410 SELECT IOL=UDEF_IOL FROM UDEF BEGIN "" END $FF$
2415 IF STP(FIELD_DATA$,2)<>"" THEN {
2420 WRITE (_ASW,KEY=CUST_DIV$+CUST_CODE$+FIELD_NUMBER$)
2421 WRITE (_ASX,KEY=FIELD_NUMBER$+CUST_DIV$+CUST_CODE$)
2425  } ELSE {
2430 REMOVE (_ASW,KEY=CUST_DIV$+CUST_CODE$+FIELD_NUMBER$,DOM=*NEXT)
2431 REMOVE (_ASX,KEY=FIELD_NUMBER$+CUST_DIV$+CUST_CODE$,DOM=*NEXT)
2435  }
2440 NEXT RECORD 
2445  }
2450 CLOSE (UDEF); OPEN (UDEF)"*memory*"
2455 ! 
2500 ! ^100,5 - Look for other things like R/T & T/M
2505 IF STP(CONT_LIST_CODE$,2)="" OR POS(P2$(67,1)="YAZ")=0 THEN GOTO 2520
2510 PERFORM "ARGMAS;Sync"
2515 ! 
2520 IF TM_PARMS$<>"" THEN {
2525 CUST$=CUST_DIV$+CUST_CODE$
2530 CALL "RTGWOC",ERR=*NEXT,CUST$,"AR1...","U",CUST_DIV$+CUST_CODE$
2535  }
2600 ! ^100,5 - Go back
2605 CHANGE_FLG=0
2610 ! IF DEC(MID(MSE,20,2))=BUTTON_1.CTL THEN GOTO CLEAR_REC ! Clear screen if write button was pressed
2615 RETURN 
2620 ! 
3000 INIT_FOLDER:! ^1000,5 - Determine folder ID and adjust display
3005 CUSTOMER$=CUST_DIV$+CUST_CODE$,SP_ON_CUST=NUM(P2$(8,1)) ! SSP#231617
3010 BILL_TO_CUST$=STP(BILL_TO_CUST_DIV$+BILL_TO_CUST_CODE$,2); IF CUST_STAT$="" THEN CUST_STAT$="A" ! SSP#240337
3011 STAT_D$=MSG("ARGMAB_01"),STAT_CD$=MSG("ARGMAB_02"); DIM STATUS_DESC$[LEN(STAT_CD$)]; COUNT=0 ! SSP#240337
3012 STCD=POS("|"=STAT_D$); IF STCD<>0 THEN COUNT=COUNT+1,STATUS_DESC$[COUNT]=STAT_D$(1,STCD-1),STAT_D$=STAT_D$(STCD+1); GOTO 3012 ! SSP#240337
3013 STCD=POS(CUST_STAT$=STAT_CD$),STATUS$=STATUS_DESC$[STCD] ! SSP#240337
3015 IF STP(CUSTOMER$,1)<>"" THEN {
3020 CALL "*wingrp;enable",FIELDS.GRP$
3025 CALL "*wingrp;enable",BUTTONS.GRP$
3030 IF MID(SEC$,45,1)="Y" OR (TM_PARMS$>"" AND MID(TM_PARMS$,7,1)="R") THEN CALL "*wingrp;disable",WRITE.GRP$
3035 CALL "*wingrp;disable",KEY.GRP$
3040  } ELSE {
3045 CALL "*wingrp;disable",FIELDS.GRP$
3050 CALL "*wingrp;disable",BUTTONS.GRP$
3055 CALL "*wingrp;enable",KEY.GRP$
3060  }
3061 IF FOLDER_ID$="ARGMAB.1" THEN {
3062 IF MID(P0$,107,1)<>"Y" THEN CALL "*wingrp;Hide",ALT_CUST.GRP$
3063  }
3065 IF FOLDER_ID$="ARGMAB.2" THEN {
3070 IF STP(CUST_STAT$,2)="" THEN CUST_STAT$="A"
3075 IF STP(TAX_EXEMPT$,2)="" THEN TAX_EXEMPT$="N"
3085 ! CATEGORY$=MID(CUST_CATEGORY$,1,%CUST_CAT_LEN)
3090  }
3095 IF FOLDER_ID$="ARGMAB.3" THEN {
3100 GOSUB CHECK_TOTAL
3105  }
3110 IF FOLDER_ID$="ARGMAB.4" THEN {
3115 ! IF STP(TM_PARMS$,2)="" THEN CALL "*wingrp;disable",FIELDS.GRP$
3116 CALL "ZZ2PRP","TM",RESULT$,MODULE_DATE$; IF RESULT$<>"Y" THEN CALL "*wingrp;disable",FIELDS.GRP$
3120 GOSUB CHECK_TOTAL
3125  }
3130 IF FOLDER_ID$="ARGMAB.5" THEN {
3135 GOSUB LOAD_GRID
3137  }
3139 IF FOLDER_ID$="ARGMAB.6" THEN {
3140 GOSUB LOAD_FISCAL_YEAR
3141 GOSUB LOAD_TAB_6
3143  }
3145 IF STP(CUSTOMER$,1)<>"" THEN {
3150 IF TAB_FLG$="<" THEN NEXT_ID=VIN(LAST_TAB$) ELSE NEXT_ID=VIN(FIRST_TAB$)
3155  } ELSE {
3160 CHANGE_FLG=0
3165  }
3170 REFRESH_FLG=1
3175 IF FORCE_ID$<>"" THEN NEXT_ID=VIN(FORCE_ID$),FORCE_ID$=""
3180 RETURN 
3185 ! 
4000 NEXT_REC:! ^1000,5 - Find next record
4005 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
4010 _KEY$=KEY(_AR1,END=4020)
4015 READ (_AR1,KEY=_KEY$,ERR=CHECK_ERR); GOTO INIT_FOLDER
4020 MSGBOX MSG("END_OF_FIL"),MSG("FYI"),"!"; EXIT 
4025 ! 
4100 PRIOR_REC:! ^100,5 - Get prior record
4105 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
4110 _KEY$=KEP(_AR1,END=4120)
4115 READ (_AR1,KEY=_KEY$,ERR=CHECK_ERR); GOTO INIT_FOLDER
4120 MSGBOX MSG("START_FILE"),MSG("FYI"),"!"; EXIT 
4125 ! 
4200 FIRST_REC:! ^100,5 - Get first record
4205 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
4210 _KEY$=KEF(_AR1,ERR=4220)
4215 READ (_AR1,KEY=_KEY$,ERR=CHECK_ERR); GOTO INIT_FOLDER
4220 MSGBOX MSG("REC_NO_1ST"),MSG("FYI"),"!"; EXIT 
4225 ! 
4300 LAST_REC:! ^100,5 - Last record
4305 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
4310 _KEY$=KEL(_AR1,ERR=4320)
4315 READ (_AR1,KEY=_KEY$,ERR=CHECK_ERR); GOTO INIT_FOLDER
4320 MSGBOX MSG("REC_NO_LST"),MSG("FYI"),"!"; EXIT 
4325 ! 
4400 CHECK_ERR:! ^100,5 - Error on file read
4405 IF ERR<>0 THEN EXIT ERR
4410 MSGBOX MSG("REC_BUSY"),MSG("CONFIRM"),"?,YESNO",ANSWER$
4415 IF ANSWER$="NO" THEN EXIT ELSE RETRY 
4420 ! 
4500 CHECK_TOTAL:! ^100,5 - Add commission totals
4505 VAR$=ID$
4510 IF VIN(VAR$,ERR=4540)>100 THEN {
4515 MSGBOX MSG("COMM_EXC"),MSG("ATTN"),"!"
4520 NEXT_ID=ID,REFRESH_FLG=1
4525 VIA (VAR$)=0
4530 EXIT 
4535  }
4540 TOTAL=0
4545 FOR X=1 TO 5
4550 VAR$="sper_comm_split_"+STR(X)
4555 TOTAL+=VIN(VAR$)
4560 NEXT X
4565 IF TOTAL>100 THEN {
4570 MSGBOX MSG("TOT_EXC"),MSG("ATTN"),"!"
4575 NEXT_ID=ID
4580 VAR$=ID$
4585 TOTAL-=VIN(VAR$)
4590 VIA (VAR$)=0
4595  }
4600 REFRESH_FLG=1
4605 RETURN 
4610 ! 
5000 LOAD_USER_DEF:! ^1000,5 - take contents of ASV and write to Work
5005 WRITE (WORK,IND=I)"Index 0" ! to make processing grid easier
5010 I=1
5015 SELECT * FROM _ASV BEGIN "C" END "C"+$FF$
5020 WRITE (WORK,IND=I)FIELD_NUMBER$,FIELD_DESCRIPTION$,FIELD_LENGTH
5025 I++
5030 NEXT RECORD 
5035 RETURN 
5040 ! 
5100 LOAD_GRID:! ^100,5 - Load user defined fields and customer data
5105 _CHANGE_FLG=CHANGE_FLG
5110 GRID CLEAR USER_GRID.CTL,0,0
5115 GRID_ROWS=NUM(FIN(WORK,"NUMREC"))-1
5120 IF NOT(GRID_ROWS) THEN {
5125 NEXT_FOLDER=FLDR.ARGMAB.1.CTL,REFRESH_FLG=1,CHANGE_FLG=0
5130 RETURN 
5135  }
5137 CALL "*WINGRP;SHOW",GRIDS.GRP$
5140 USER_GRID.CTL'COLUMN=-1,USER_GRID.CTL'COLUMNWIDTH=0
5145 USER_GRID.CTL'ROW=-1,USER_GRID.CTL'ROWHEIGHT=0
5150 USER_GRID.CTL'ROWSHIGH=GRID_ROWS
5155 USER_GRID.CTL'COLUMNSWIDE=2
5160 GRID LOCK USER_GRID.CTL,1,0
5165 USER_GRID.CTL'COLUMN=2
5170 USER_GRID.CTL'COLUMNWIDTH=47
5175 USER_GRID.CTL'COLUMN=1
5180 USER_GRID.CTL'COLUMNWIDTH=25
5185 FOR ROW=1 TO GRID_ROWS
5190 USER_GRID.CTL'COLUMN=1
5195 READ (WORK,IND=ROW)FIELD_NUMBER$,FIELD_DESCRIPTION$,FLD_LEN ! ssp 196621 ! SSP 196621
5200 USER_GRID.CTL'ROW=ROW,USER_GRID.CTL'VALUE$=STP(FIELD_DESCRIPTION$,2)+":",USER_GRID.CTL'CELLTYPE$="ellipsis",USER_GRID.CTL'ALIGN$="Right"
5205 FIELD_DATA$="",FIELD_DATA_NEW$=""
5210 READ (_ASW,KEY=CUST_DIV$+CUST_CODE$+FIELD_NUMBER$,DOM=*NEXT)
5215 READ (UDEF,KEY=FIELD_NUMBER$,DOM=*NEXT)*,FIELD_DATA_NEW$
5217 USER_GRID.CTL'ROW=ROW,USER_GRID.CTL'COLUMN=2,USER_GRID.CTL'LEN=FLD_LEN ! ssp 196621 ! SSP 196621
5220 IF STP(FIELD_DATA_NEW$,2)<>"" THEN FIELD_DATA$=FIELD_DATA_NEW$
5225 IF STP(FIELD_DATA$,2)<>"" THEN {
5230 USER_GRID.CTL'COLUMN=2
5235 USER_GRID.CTL'VALUE$=STP(FIELD_DATA$,2),USER_GRID.CTL'CELLTYPE$="ellipsis"
5240  }
5245 NEXT ROW
5250 CHANGE_FLG=_CHANGE_FLG
5255 RETURN 
5260 ! 
5300 UPDATE_FIELD:! ^100,5 - User defined field has been accessed
5305 EDIT_ROW=USER_GRID.CTL'CURRENTROW
5310 GRID FIND USER_GRID.CTL,2,EDIT_ROW,FIELD_DATA$
5315 READ (WORK,IND=EDIT_ROW)FIELD_NUMBER$,*,FIELD_LENGTH
5320 IF LEN(FIELD_DATA$)>FIELD_LENGTH THEN {
5325 MSGBOX MSG("MAX_LEN",STR(FIELD_LENGTH)),MSG("ATTN"),"!"
5330 FIELD_DATA$=PAD(FIELD_DATA$,FIELD_LENGTH)
5335 USER_GRID.CTL'COLUMN=2
5340 USER_GRID.CTL'ROW=EDIT_ROW
5345 USER_GRID.CTL'VALUE$=FIELD_DATA$
5350  }
5355 WRITE (UDEF,KEY=FIELD_NUMBER$)IOL=UDEF_IOL
5360 REFRESH_FLG=1,NEXT_ID=USER_GRID.CTL
5362 USER_GRID.CTL'CURRENTROW=EDIT_ROW+1
5365 RETURN 
5375 ! 
5400 CHECK_SPER:! ^100,5 - Check salesperson code for null
5410 IF DEC(MID(MSE,20,2))<>ID THEN EXIT 
5411 IF STP(VIS(ID$),2)<>"" THEN REFRESH_FLG=1; EXIT 
5412 VAR$=ID$(LEN(ID$)),VAR$="sper_comm_split_"+VAR$
5413 VIA (VAR$)=0
5414 REFRESH_FLG=1,NEXT_ID=FOLDER_TAB_2.CTL
5415 EXIT 
5500 LOAD_DEFAULTS:! SSP 206525 Load defaults from ZZPARM for NEW customer setup
5510 AR1$=""; DIM AR1[15]; READ (ZZPARM,KEY="DFLT"+"AR2MAB",DOM=5590)AR1$,AR1{ALL}
5520 PERFORM "ARGMCD;LOAD_DEF_INFO"
5530 PERFORM "ARGMCD;LOAD_CREDIT_INFO"
5540 SHA$=""; DIM SHA[5]; READ (ZZPARM,KEY="DFLT"+"FM2SHA",DOM=5560)SHA$,SHA{ALL}
5550 PERFORM "ARGMCD;LOAD_CUST_DFLT"
5560 SHB$=""; DIM SHB[5]; READ (ZZPARM,KEY="DFLT"+"FM2SHB",DOM=5590)SHB$,SHB{ALL}
5570 PERFORM "ARGMCD;LOAD_CUST_PARMS"
5590 RETURN 
7000 ! Folder operations
7010 FOLDER_OPS:
7030 IF MID(SEC$,45,1)="Y" THEN CALL "*WINGRP;DISABLE",SEC_1.GRP$; NEXT_ID=BUTTON_3.CTL; REFRESH_FLG=1; RETURN 
7050 IF MID(SEC$,57,1)="Y" THEN CALL "*WINGRP;DISABLE",SEC_1.GRP$; CALL "*WINGRP;ENABLE",SEC_2.GRP$
7060 IF MID(P2$,68,1)="Y" THEN CALL "*WINGRP;HIDE",SIC.GRP$; CALL "*WINGRP;SHOW",COMM.GRP$; SIC_CODE_2$=SIC_CODE$ ELSE CALL "*WINGRP;HIDE",COMM.GRP$; CALL "*WINGRP;SHOW",SIC.GRP$; SIC_CODE_1$=SIC_CODE$,%SIC_DESC$=%COMMISSION_DESC$ ! SSP248786 jdf
7070 IF NOT(FN%HAS_MODULE("OS")) THEN CALL "*WINGRP;HIDE",OFFIC_PROD.GRP$ ! SSP#235722
7072 QLL=FN%HAS_MODULE("QL") ! QLL=0 ! SSP 307387 QLL=0; IF UID="jvv" THEN QLL=1
7073 IF NOT(QLL) THEN CALL "*WINGRP;HIDE",ELINK.GRP$ ! SSP#307387
7075 ! IF NOT(FN%HAS_MODULE("QL")) THEN CALL "*WINGRP;HIDE",ELINK.GRP$ ! SSP#235722
7080 REFRESH_FLG=1
7090 RETURN 
7500 SET_OLD_SORT_KEY_VALUES:
7510 OLD_ARU_SORT_KEY$=SPER_CODE$+CUST_DIV$+CUST_CODE$
7515 OLD_ARW_SORT_KEY$=PAD(CUST_PHONE$,10)+CUST_DIV$+CUST_CODE$; IF POS(%C$="060338363364365366476811",3)<>0 THEN OLD_ARW_SORT_KEY$=PAD(CUST_PHONE$,12)+CUST_DIV$+CUST_CODE$
7520 OLD_ARE_SORT_KEY$=CUST_LOOKUP$+CUST_DIV$+CUST_CODE$
7525 IF MID(P0$,107,1)="Y" THEN OLD_AS8_SORT_KEY$=ALT_CUST_CODE$+CUST_DIV$+CUST_CODE$
7530 OLD_ASH_SORT_KEY$=CUST_ZIP_CODE$+CUST_DIV$+CUST_CODE$+DIM(4)
7540 SET_OLD_SORT_KEY_VALUES_END:RETURN 
7545 ! 
7550 WRITE_SORT_FILES:
7555 IF OLD_ARU_SORT_KEY$<>PAD(SPER_CODE$,4)+CUST_DIV$+CUST_CODE$ THEN REMOVE (_ARU,KEY=OLD_ARU_SORT_KEY$,DOM=*NEXT)
7557 WRITE (_ARU,KEY=PAD(SPER_CODE$,4)+CUST_DIV$+CUST_CODE$)
7560 REMOVE (_ARW,KEY=OLD_ARW_SORT_KEY$,DOM=*NEXT)
7562 IF POS(%C$="060338363364365366476811",3)<>0 THEN WRITE (_ARW,KEY=PAD(CUST_PHONE$,12)+CUST_DIV$+CUST_CODE$) ELSE WRITE (_ARW,KEY=PAD(CUST_PHONE$,10)+CUST_DIV$+CUST_CODE$)
7565 IF OLD_ARE_SORT_KEY$<>PAD(CUST_LOOKUP$,10)+CUST_DIV$+CUST_CODE$ THEN REMOVE (_ARE,KEY=OLD_ARE_SORT_KEY$,DOM=*NEXT)
7567 WRITE (_ARE,KEY=PAD(CUST_LOOKUP$,10)+CUST_DIV$+CUST_CODE$)
7570 IF STP(OLD_ASH_SORT_KEY$,3)<>"" THEN REMOVE (_ASH,KEY=OLD_ASH_SORT_KEY$,DOM=*NEXT)
7572 WRITE (_ASH,KEY=PAD(CUST_ZIP_CODE$,9)+CUST_DIV$+CUST_CODE$+DIM(4))
7590 WRITE_SORT_FILES_END:RETURN 
7595 ! 
9200 SETUP_MESSAGES:
9210 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9220 _MSG_DIRECTORY$=MSG("DIRECTORY")
9230 _MSG_PREFIX$=MSG("PREFIX")
9290 SETUP_MESSAGES_END:RETURN 
9295 ! 
9700 WRAPUP:! 9700,5 - Close files and clean up
9705 READ DATA FROM "" TO IOL=GLOBAL_IOL
9710 IF _AR1 THEN CLOSE (_AR1)
9715 IF _AR3 THEN CLOSE (_AR3)
9720 IF _AR5 THEN CLOSE (_AR5)
9725 IF _ZRG THEN CLOSE (_ARG)
9730 IF _ARH THEN CLOSE (_ARH)
9735 IF _ASV THEN CLOSE (_ASV)
9740 IF _ASW THEN CLOSE (_ASW)
9745 IF _FMP THEN CLOSE (_FMP)
9750 CLOSE (WORK)
9755 IF ZZPARM THEN CLOSE (ZZPARM)
9757 IF _ARU THEN CLOSE (_ARU)
9758 IF _ARW THEN CLOSE (_ARW)
9759 IF _ARE THEN CLOSE (_ARE)
9760 IF _ASX THEN CLOSE (_ASX)
9761 IF _ASH THEN CLOSE (_ASH)
9770 IF %ARGMAC AND STP(CUSTOMER$)<>"" THEN SAVE_C$=%CUSTOMER$,%CUSTOMER$=CUSTOMER$; CALL "ARGMAC"; %CUSTOMER$=SAVE_C$ ! SSP 193216
9790 RETURN 
9795 ! 
9900 ! Exit Routine
9910 EXIT_ROUTINE:
9920 PERFORM "ARGMAB;CHECK_CHANGES"
9930 IF EXIT_FLG THEN EXIT_FLG=0; RETURN 
9940 IF ANSWER$="NO" THEN %NEW_CUST=0
9950 CMD_STR$="END"
9990 RETURN 
9999 END 
20000 ALT_CUST_CODE_ENTRY:
20010 ALT_CUST_CODE$=PAD(ALT_CUST_CODE$,20),NEW_AS8_SORT_KEY$=ALT_CUST_CODE$+CUST_DIV$+CUST_CODE$
20015 IF OLD_AS8_SORT_KEY$<>NEW_AS8_SORT_KEY$ THEN CALL "ARGMAT",X3$,X4$,OLD_AS8_SORT_KEY$,NEW_AS8_SORT_KEY$,"E",X$; IF X$>"" THEN X$=""; NEXT_ID=ALT_CUST_CODE.CTL,REFRESH_FLG=1,ALT_CUST_CODE$="" ELSE OLD_AS8_SORT_KEY$=NEW_AS8_SORT_KEY$
20040 ALT_CUST_CODE_ENTRY_END:RETURN 
20045 ! 
21000 LOOKUP_ZIP:! Lookup zipcode, set city & state if found, set NEW_ZIP for later use
21003 IF NUL(CUST_ZIP_CODE$) THEN RETURN 
21005 NEW_ZIP=0
21010 CALL "ZYGMBA;CHECK_ZIP",CUST_ZIP_CODE$,ZIP_FOUND,ZIP_CITY$,ZIP_ST$,"",ZIP_AREA_CODE$,"",ZIP_STAX_CODE$; REM SSP 199160
21012 IF ZIP_STAX_CODE$<>DIM(10) THEN STAX_CODE$=ZIP_STAX_CODE$; REFRESH_FLG=1; REM SSP 199160
21015 IF CUST_PHONE$="" THEN CUST_PHONE$=DIM(14)
21020 IF ZIP_FOUND THEN CUST_CITY$=ZIP_CITY$,CUST_ST$=ZIP_ST$,REFRESH_FLG=1,NEXT_ID=CUST_PHONE.CTL ELSE NEW_ZIP=1
21030 IF ZIP_FOUND AND STP(MID(CUST_PHONE$,1,3))="" THEN CUST_PHONE$(1,3)=ZIP_AREA_CODE$
21095 RETURN 
21099 ! 
21100 UPDATE_ZIP:! If new_zip then update the zip code table
21105 IF NUL(CUST_PHONE$) THEN DIM CUST_PHONE$(14)
21110 IF NEW_ZIP THEN CALL "ZYGMBA;UPDATE_ZIP",CUST_ZIP_CODE$,CUST_CITY$,CUST_ST$,"",CUST_PHONE$(1,3),CUST_CITY$ ! get area code from phone,long city from regular city
21180 NEW_ZIP=0
21195 RETURN 
21199 ! 
22000 PROCESS_AR5:
22010 DIM AR5[7]
22020 FIND (_AR5,KEY=STAX_CODE$,DOM=*NEXT)AR5$,AR5{ALL}
22030 PRECISION 3; SHOW_TAX=AR5(0)+AR5(2)+AR5(3); PRECISION 2 ! SSP#233443
22040 REFRESH_FLG=1
22050 RETURN 
22100 REM "Load ASF Sales Stats into Tab 6
22105 LOAD_TAB_6:
22106 IF MID(P3$,8,1)<>"Y" THEN RETURN ! Feature for tab 6 is not enabled
22108 IOL_SALES_STATS:IOLIST SS[0],SS[1],SS[2],SS[3],SS[4],SS[5],SS[6],SS[7],SS[8],SS[9],SS[10],SS[11],SS[12],SS[13]
22111 DIM SSTOTAL[13]; STGRID_ROWS=0; MS0$="#,###,###,##0.00-"; BALANCE_TYPE$="S"; ASF_PREFIX$=CUST_DIV$+CUST_CODE$+SALES_FY$+BALANCE_TYPE$
22114 _FILE_NAME$="ASF"+%C$; OPEN (HFN,IOL=*,ERR=OPEN_ERR)_FILE_NAME$; ASF=LFO
22117 OPEN (HFN)"*MEMORY*"; SALES_STATS=LFO
22120 READ (ASF,KEY=ASF_PREFIX$,KNO=1,DOM=*NEXT,ERR=LOAD_STATS_GRID)
22123 NEXT_ASF: ASFK$=KEY(ASF,END=LOAD_STATS_GRID); IF ASFK$(1,LEN(ASF_PREFIX$))<>ASF_PREFIX$ THEN GOTO LOAD_STATS_GRID
22126 DIM ASF$(24),ASF[14]; READ (ASF,KEY=ASFK$)ASF$,ASF{ALL}
22129 ASF_PROD_CODE$=MID(ASF$,15,3)
22132 DIM SS[13]; READ (SALES_STATS,KEY=ASF_PROD_CODE$,DOM=*NEXT)IOL=IOL_SALES_STATS
22145 FOR I=1 TO 12
22150 SS[I]+=ASF[I]; SS[13]+=ASF[I]
22155 NEXT I
22160 WRITE (SALES_STATS,KEY=ASF_PROD_CODE$)IOL=IOL_SALES_STATS
22190 GOTO NEXT_ASF
22199 ! 
22200 LOAD_STATS_GRID:
22205 GRID LOAD STATS_GRID.CTL,0,0,""
22210 READ (SALES_STATS,KEY="",DOM=*NEXT)
22215 NEXT_SALES_STAT:DIM SS[13]; SSKEY$=KEY(SALES_STATS,END=LSG_DONE); READ (SALES_STATS,KEY=SSKEY$)IOL=IOL_SALES_STATS
22220 FOR I=1 TO 13; SSTOTAL[I]+=SS[I]; NEXT I
22222 DIM ASF_PROD_DESC$(52); FIND (_FMP,KEY="T"+SSKEY$,DOM=*NEXT)ASF_PROD_DESC$
22225 GRID LOAD STATS_GRID.CTL,1,0,SSKEY$+" - "+MID(ASF_PROD_DESC$,5,15)+SEP+STR(SS[1]:MS0$)+SEP+STR(SS[2]:MS0$)+SEP+STR(SS[3]:MS0$)+SEP+STR(SS[4]:MS0$)+SEP+STR(SS[5]:MS0$)+SEP+STR(SS[6]:MS0$)+SEP+STR(SS[7]:MS0$)+SEP+STR(SS[8]:MS0$)+SEP+STR(SS[9]:MS0$)+SEP+STR(SS[10]:MS0$)+SEP+STR(SS[11]:MS0$)+SEP+STR(SS[12]:MS0$)+SEP+STR(SS[13]:MS0$)+ESC; STGRID_ROWS++
22230 GOTO NEXT_SALES_STAT
22270 LSG_DONE:
22275 GRID LOAD STATS_GRID.CTL,1,0,"Total - All Product Codes"+SEP+STR(SSTOTAL[1]:MS0$)+SEP+STR(SSTOTAL[2]:MS0$)+SEP+STR(SSTOTAL[3]:MS0$)+SEP+STR(SSTOTAL[4]:MS0$)+SEP+STR(SSTOTAL[5]:MS0$)+SEP+STR(SSTOTAL[6]:MS0$)+SEP+STR(SSTOTAL[7]:MS0$)+SEP+STR(SSTOTAL[8]:MS0$)+SEP+STR(SSTOTAL[9]:MS0$)+SEP+STR(SSTOTAL[10]:MS0$)+SEP+STR(SSTOTAL[11]:MS0$)+SEP+STR(SSTOTAL[12]:MS0$)+SEP+STR(SSTOTAL[13]:MS0$)+ESC; STGRID_ROWS++
22277 GRID LOCK STATS_GRID.CTL,0,0 ! STATS_GRID.CTL'ROW=STGRID_ROWS; STATS_GRID.CTL'COL=-1; STATS_GRID.CTL'BACKCOLOR$="White"
22285 CLOSE (ASF),(SALES_STATS); ASF=0,SALES_STATS=0,CHANGE_FLG=0
22295 RETURN 
22299 ! 
22300 REM "Load fiscal year dropdown for Tab 6
22310 LOAD_FISCAL_YEAR:
22320 READ (ZZPARM,KEY=%C$+"A/R",DOM=*NEXT)GL_REC$; CR_YEAR$=GL_REC$(7,4)
22330 KE$=%C$+"G/LYE",CR_FY$=""
22340 READ (ZZPARM,KEY=KE$,DOM=*NEXT)
22350 NEXT_FY: K$=KEY(ZZPARM,END=END_LOAD_FISCAL_YEAR); READ (ZZPARM)Z9$
22360 IF LEN(K$)<8 OR KE$<>K$(1,8) THEN GOTO END_LOAD_FISCAL_YEAR
22370 CR_FY$=CR_FY$+K$(9)+"/"
22380 GOTO NEXT_FY
22390 END_LOAD_FISCAL_YEAR:
22400 DROP_BOX LOAD SALES_FY.CTL,CR_FY$
22410 DROP_BOX WRITE SALES_FY.CTL,CR_YEAR$,ERR=*NEXT
22490 RETURN 
22499 ! 
22500 REM "Sales Tax Interface module - Check for valid sales tax code - 249059
22510 CHECK_SALESTAX_CODE:
22515 TAX_CODE_OK$="Y"
22525 IF NUL(CUST_ST$) THEN GOTO *RETURN
22530 DIM G$(190); CALL "TW2FUN;LOOKUP_TAX_CODE",ERR=*NEXT,X3$,X4$,UCS(CUST_ST$),MID(CUST_ZIP_CODE$,1,5),MID(UCS(CUST_CITY$),1,16),"",T$,T{ALL}; G$(1)=T$(1)
22535 IF NUL(MID(G$,1,10)) OR MID(STAX_CODE$,1,7)=MID(G$,1,7) THEN GOTO *RETURN
22540 TAX_CODE_OK$="N"
22545 RETURN 
22549 ! 
56000 ! "193216-Cannot setup a new customer completely on the fly in        
56001 ! "       O/P"
56002 ! "196621-Problem with Customer user defined specs, not checking or   
56003 ! using the user defined len of fields
56004 REM "199160-Add sales tax codes to ZY2MBA Zip Code Table     
56010 REM "206525-ARS S7 and S9 goes not work for GUI customers               
56011 REM "233443-Display issue of the Sales Tax Code rate in the customer    
56012 REM "233164-Add tab 6 to Customer Constant Data to display ASF data for 
56014 REM "235722-OP Account field on Customer Constant Data, tab 2, field    
56015 REM "240337-Wording of panel ARGDEL needs work                          
56016 REM "249059-Customer and Ship-to record sales tax code validation
56017 REM "274987-Appl Security by Operator; Restrict display/access to sls   
56018 REM "307387-EQLink DBD Bridge to Qnet                                   
