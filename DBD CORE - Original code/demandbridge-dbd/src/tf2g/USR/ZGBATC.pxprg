0010 ! ZGBATC - File Maintenance Program for ZY9_Batch_Control (ZY9)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Jan. 13, 2003 13:33
0030 ! ************************************************************************
0035 REM "5.7 - 08/20/10 - 10.148888 - crg - SSP# 197952
0037 REM "197952-Streamline processing by user - Chained journal updates     
0040 REM "Copyright 2010 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 ! 
0095 ENTER X3$,X4$,P0$,X9; IF X3$(145,1)="1" THEN GOTO PROCESS_BATCH ELSE EXIT ! Exit if batch processing not enabled
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZY9"
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="BATCH_NUMBER$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$(1,5); READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 ! MESSAGE_LIB _SV_MSGLIB$ SSP 1196266
0960 SET_PARAM 'KR'=_SV_KR
0965 IF B0$<>ARG_1$ THEN ARG_1$=B0$
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 _KEY$=PAD(BATCH_NUMBER$,5)
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY,CMD_STR$="E"
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 _KEY$=PAD(BATCH_NUMBER$,5,$20$)
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1655 IF _KEY$="" THEN _KEY$=B0$
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1705 CMD_STR$="END",REFRESH_FLG=1,B0$="-1",ARG_1$="-1"
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3325 %OK_WRT=1
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=BATCH_NUMBER.CTL,_FIRST_FIELD=INIT_PGM.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1,_REQ_LST$="",_REQ_CTL=0,_NF=0
12030 IF BATCH_NUMBER$="" THEN _REQ_LST$=_REQ_LST$+MSG("BATCH_NO")+SEP; IF _REQ_CTL=0 THEN _REQ_CTL=BATCH_NUMBER.CTL
12990 IF _REQ_LST$<>"" THEN _W_FLG=0; MSGBOX _MSG_REQ_FIELDS$+SEP+_REQ_LST$,_MSG_MANDATORY$; NEXT_ID=_REQ_CTL; IF _NF>0 THEN NEXT_FOLDER=_NF,NEXT_ID$=_NI$
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN BATCH_NUMBER$=""
13030 INIT_PGM$=""
13040 PGM_DESC$=""
13050 INIT_OPER$=""
13060 OPER_DESC$=""
13070 TERM_ID$=""
13080 DATE_START$=""
13090 TIME_START$=""
13100 COMP_CODE$=""
13110 COMP_DESC$=""
13120 AUDIT_CTRL$=""
13130 REMARKS$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(12,"N")
15030 IF _ORIG.BATCH_NUMBER$=_CUR.BATCH_NUMBER$ OR BATCH_NUMBER$=_CUR.BATCH_NUMBER$ THEN GOTO *NEXT ELSE IF _ORIG.BATCH_NUMBER$=BATCH_NUMBER$ THEN _CHG2$=_CHG2$+SEP+MSG("BATCH_NO")+" = "+_CUR.BATCH_NUMBER$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BATCH_NO")+" = "+_CUR.BATCH_NUMBER$
15040 IF _ORIG.INIT_PGM$=_CUR.INIT_PGM$ OR INIT_PGM$=_CUR.INIT_PGM$ THEN GOTO *NEXT ELSE IF _ORIG.INIT_PGM$=INIT_PGM$ THEN _CHG2$=_CHG2$+SEP+MSG("INIT_PGM")+" = "+_CUR.INIT_PGM$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INIT_PGM")+" = "+_CUR.INIT_PGM$
15050 IF _ORIG.PGM_DESC$=_CUR.PGM_DESC$ OR PGM_DESC$=_CUR.PGM_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.PGM_DESC$=PGM_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("PROG_DESC")+" = "+_CUR.PGM_DESC$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PROG_DESC")+" = "+_CUR.PGM_DESC$
15060 IF _ORIG.INIT_OPER$=_CUR.INIT_OPER$ OR INIT_OPER$=_CUR.INIT_OPER$ THEN GOTO *NEXT ELSE IF _ORIG.INIT_OPER$=INIT_OPER$ THEN _CHG2$=_CHG2$+SEP+MSG("INIT_OPER")+" = "+_CUR.INIT_OPER$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INIT_OPER")+" = "+_CUR.INIT_OPER$
15070 IF _ORIG.OPER_DESC$=_CUR.OPER_DESC$ OR OPER_DESC$=_CUR.OPER_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.OPER_DESC$=OPER_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("OPER_DESC")+" = "+_CUR.OPER_DESC$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OPER_DESC")+" = "+_CUR.OPER_DESC$
15080 IF _ORIG.TERM_ID$=_CUR.TERM_ID$ OR TERM_ID$=_CUR.TERM_ID$ THEN GOTO *NEXT ELSE IF _ORIG.TERM_ID$=TERM_ID$ THEN _CHG2$=_CHG2$+SEP+MSG("TERM_I")+" = "+_CUR.TERM_ID$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TERM_I")+" = "+_CUR.TERM_ID$
15090 IF _ORIG.DATE_START$=_CUR.DATE_START$ OR DATE_START$=_CUR.DATE_START$ THEN GOTO *NEXT ELSE IF _ORIG.DATE_START$=DATE_START$ THEN _CHG2$=_CHG2$+SEP+MSG("DATE_START")+" = "+_CUR.DATE_START$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DATE_START")+" = "+_CUR.DATE_START$
15100 IF _ORIG.TIME_START$=_CUR.TIME_START$ OR TIME_START$=_CUR.TIME_START$ THEN GOTO *NEXT ELSE IF _ORIG.TIME_START$=TIME_START$ THEN _CHG2$=_CHG2$+SEP+MSG("TIME_START")+" = "+_CUR.TIME_START$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TIME_START")+" = "+_CUR.TIME_START$
15110 IF _ORIG.COMP_CODE$=_CUR.COMP_CODE$ OR COMP_CODE$=_CUR.COMP_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.COMP_CODE$=COMP_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("COMP_BATCH")+" = "+_CUR.COMP_CODE$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMP_BATCH")+" = "+_CUR.COMP_CODE$
15120 IF _ORIG.COMP_DESC$=_CUR.COMP_DESC$ OR COMP_DESC$=_CUR.COMP_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.COMP_DESC$=COMP_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("COMP_D")+" = "+_CUR.COMP_DESC$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMP_D")+" = "+_CUR.COMP_DESC$
15130 IF _ORIG.AUDIT_CTRL$=_CUR.AUDIT_CTRL$ OR AUDIT_CTRL$=_CUR.AUDIT_CTRL$ THEN GOTO *NEXT ELSE IF _ORIG.AUDIT_CTRL$=AUDIT_CTRL$ THEN _CHG2$=_CHG2$+SEP+MSG("AUDI_C_N")+" = "+_CUR.AUDIT_CTRL$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("AUDI_C_N")+" = "+_CUR.AUDIT_CTRL$
15140 IF _ORIG.REMARKS$=_CUR.REMARKS$ OR REMARKS$=_CUR.REMARKS$ THEN GOTO *NEXT ELSE IF _ORIG.REMARKS$=REMARKS$ THEN _CHG2$=_CHG2$+SEP+MSG("REMARKS")+" = "+_CUR.REMARKS$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("REMARKS")+" = "+_CUR.REMARKS$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN BATCH_NUMBER$=_CUR.BATCH_NUMBER$
16030 IF _CHG_VAR$(2,1)="Y" THEN INIT_PGM$=_CUR.INIT_PGM$
16040 IF _CHG_VAR$(3,1)="Y" THEN PGM_DESC$=_CUR.PGM_DESC$
16050 IF _CHG_VAR$(4,1)="Y" THEN INIT_OPER$=_CUR.INIT_OPER$
16060 IF _CHG_VAR$(5,1)="Y" THEN OPER_DESC$=_CUR.OPER_DESC$
16070 IF _CHG_VAR$(6,1)="Y" THEN TERM_ID$=_CUR.TERM_ID$
16080 IF _CHG_VAR$(7,1)="Y" THEN DATE_START$=_CUR.DATE_START$
16090 IF _CHG_VAR$(8,1)="Y" THEN TIME_START$=_CUR.TIME_START$
16100 IF _CHG_VAR$(9,1)="Y" THEN COMP_CODE$=_CUR.COMP_CODE$
16110 IF _CHG_VAR$(10,1)="Y" THEN COMP_DESC$=_CUR.COMP_DESC$
16120 IF _CHG_VAR$(11,1)="Y" THEN AUDIT_CTRL$=_CUR.AUDIT_CTRL$
16130 IF _CHG_VAR$(12,1)="Y" THEN REMARKS$=_CUR.REMARKS$
16990 RETURN 
20000 UPDATE_X3:! Update the values in X3$ and call ZZWMX3 to update global values
20010 FID_RECORD_IN:IOLIST *,M1$,X4$,D0$,X$,A9$ ! Don't read current X3$ in
20015 FID_RECORD_OUT:IOLIST X3$,M1$,X4$,D0$,X$,A9$ ! Don't read current X3$ in
20020 TSLOT=HFN; OPEN (TSLOT)"ZZPARM"
20025 READ (TSLOT,KEY=FID(0)+DIM(6))IOL=FID_RECORD_IN
20030 WRITE (TSLOT,KEY=FID(0)+DIM(6))IOL=FID_RECORD_OUT
20035 CLOSE (TSLOT)
20040 CALL "ZZWMX3" ! Call to update global variables
20095 RETURN 
20099 ! 
50000 PROCESS_BATCH:
50005 IF %SKIP_BATCH_SELECTION THEN EXIT ! 197952 - Skip batch selection if flag is set, used by Chained update feature
50010 REM "Batch Control Program <ZZBATC>
50020 SETESC 51200; SETERR 51070
50030 REM "5.0 - 03/13/02 - 7.893888 - tma - SSP# 147071
50040 REM "Copyright 2002 TopForm Software Inc.; Norcross, Georgia
50050 REM "        Licensed Software - All Rights Reserved.
50070 X9=0; IF P0$="" THEN P0$=X3$(146,6) ELSE P0$=P0$+"     ",P0$=P0$(1,6)
50080 REM 
50090 IF X3$(77,1)="T" THEN P$="ZZCOMPZZDISPZZTIME"; CALL "ZZDAPP",X3$,"D"+P$
50100 DIM Z[NUM(X3$(60,3))]; Z$="01O ZY9 02O ZZPARM"; GOSUB 51240
50110 REM 
50120 P9$=""; CALL "ZZXPRG",P9$,0,P0$,0,0
50130 READ (Z[1],KEY="",DOM=50135)
50140 REM "OLD BATCHES
50150 REM "Assuming that screen is avail from line 3 down
50155 FLAG=0,K0$=STP(MID(%X3$,174,4)); IF LEN(K0$)=4 THEN K0$+=" ",FLAG=1; GOSUB CHECK_BATCH
50160 K$=KEY(Z[1],END=50215); READ (Z[1])Q$
50170 IF Q$(6,6)<>P0$ THEN GOTO 50160
50180 IF Q$(110,3)<>X3$(9,3) THEN GOTO 50160
50190 IF Q$(54,3)=X3$(40,3) AND K0$="" THEN K0$=K$,FLAG=1
50200 K1$=K1$+K$
50210 GOTO 50160
50215 IF FLAG=0 THEN K0$="" ELSE FLAG=0
50218 IF %NO_NEW_BATCH=1 THEN YESNO$="NO"; GOTO 50255
50220 IF K1$="" OR K0$="" THEN NEWBATCH=1; MSGBOX MSG("MSG4"),MSG("CONFIRMING"),"?,YESNO",YESNO$; IF YESNO$="YES" THEN GOTO 50700 ELSE GOTO 50255
50230 FIND (Z[1],KEY=K0$,DOM=*NEXT)B0$; GOTO 50240
50231 K0$=""
50240 IF K0$>"" THEN O$=K0$,Q$="("+K0$(1,4)+": "+STP(B0$(159,30))+")" END_IF ; PROCESS "ZGBATCH.1","../ZZG/ZZ.EN",Q$,OPT$,B0$; IF OPT$="" THEN OPT$="3" END_IF ; S3=NUM(OPT$); ON S3 GOTO 50940,50255,50640,51270,50550,50600
50250 ON S3 GOTO 50940,50255,50640,51270,50550,50600
50260 REM "DISPLAY STUFF
50270 IF K1$="" THEN GOTO 51270
50275 %BATCHLIST$=K1$; PROCESS "QRY_ZY9","../ZZG/ZZ.EN",RESULT$; GOTO 51020 ! 263584
50280 X0=0; READ (Z[1],KEY="",DOM=50285)
50290 PRINT @(0,3),'CE',@(0,3),"Batch",@(10),"Operator Initiating",@(60),"Date and Time Started",
50300 CALL "ZZDISP","-","04","",X3$,"","",0,0,X4$
50310 IF X3$(27,1)="1" THEN PRINT @(75,3),"Comp#",
50320 FOR X=1 TO LEN(K1$) STEP 5
50330 DIM Q$(240)
50340 READ (Z[1],KEY=K1$(X,5),DOM=50410)Q$(1)
50350 X0=X0+1
50360 PRINT @(0,X0+4),Q$(1,5),@(10),FNS$(Q$(57,40)),"/ ",Q$(159,30),
50370 CALL "ZZDISP","D",Q$(100,6),"",X3$,"","",60,X0+4,X4$
50380 CALL "ZZDISP","T",Q$(106,4),"",X3$,"","",71,X0+4,X4$
50390 IF X3$(27,1)="1" THEN PRINT @(75,X0+4),Q$(110,3),
50400 IF X0>15 THEN GOTO 50500
50410 NEXT X
50420 GOTO 51020
50430 REM "Remarks
50435 WRITE (Z(1),KEY=B0$(1,5))B0$; B_B0$=B0$; PROCESS "ZGBATCH","../ZZG/ZZ.EN",B0$; IF %OK_WRT=0 THEN CMD_STR$="END",X9=1; EXIT ELSE %OK_WRT=0; READ (Z(1),KEY=B_B0$(1,5))B0$; GOTO 51290
50436 READ (Z(1),KEY=B0$(1,5))B0$
50440 CALL "ZZBATD",X3$,B0$
50450 CALL "ZZENTR","S",X{ALL},B0$,X4$,X3$,26,20,159,30,C0,"","{3"+X$,"","ZY2CAA22","","",""
50460 CALL "ZZPROM","X4ZZBATC",X3$,S3,"","","",0; ON S3 GOTO 50490,50450,50470
50470 REMOVE (Z[1],KEY=B0$(1,5),DOM=50480)
50480 X0=1; GOTO 51270
50490 EXIT 
50500 REM "EOP
50510 CALL "ZZPROM","5",X3$,S3,"'End' option proceeds to 'Enter your batch'","","",0; ON S3 GOTO 50515,51020
50520 PRINT @(0,5),'CE',
50530 X0=0
50540 GOTO 50410
50550 REM "Special setup of a specific batch number - blind option
50560 DIM I0$(4); CALL "ZZENTR","Z",X{ALL},I0$,X4$,X3$,55,22,1,4,C0,"","{3"+X$,"","ZY2CAA24","","",""
50570 IF NUM(I0$)=0 THEN GOTO 50240
50580 READ (Z[1],KEY=I0$+" ",DOM=50760)
50590 GOTO 50240
50600 REM "Set last batch number used
50610 DIM I0$(4); CALL "ZZENTR","Z",X{ALL},I0$,X4$,X3$,55,22,1,4,C0,"","{3"+X$,"","ZY2CAA26","","",""
50620 WRITE (Z[1],KEY="")NUM(I0$)
50630 GOTO 50240
50640 REM "NEW BATCH
50650 IF X3$(185,1)="A" THEN IF K1$="" THEN GOTO 51270 ELSE GOTO 50260
50660 REM IF P0$<>X3$(146,6) THEN IF K1$="" THEN GOTO 9800 ELSE GOTO 2300
50670 ! CALL "ZZPROM","X0ZZBATC",X3$,S3,"","","",0; ON S3 GOTO 50675,50260
50680 SETERR 51070
50690 REM 
50700 I0=0; EXTRACT (Z[1],KEY="",DOM=50705)I0
50710 I0=I0+1; IF I0>9999 THEN I0=1
50720 WRITE (Z[1],KEY="")I0
50730 I0$=STR(I0:"0000")
50740 READ (Z[1],KEY=I0$+" ",DOM=50760)
50750 GOTO 50700
50760 REM 
50770 DIM B0$(189)
50775 IF NEWBATCH THEN X3$(174,4)=I0$,X3$(174,4)="    "
50780 B0$(1,5)=I0$,B0$(6,8)=P0$
50790 B0$(54,3)=X3$(40,3)
50800 DIM Q$(120); FIND (Z[2],KEY="o"+X3$(40,3),DOM=50805)Q$(1)
50810 B0$(57,40)=Q$(5,30)
50820 B0$(97,3)=X3$(1,3),B0$(100,6)=%X3$(21,6),B0$(106,4)=DTE(0:"%Hz%sz")
50830 B0$(110,3)=X3$(9,3)
50840 Q$=""; FIND (Z[2],KEY="CMP"+X3$(9,3),DOM=*NEXT)Q$; B0$(113,40)=Q$(7,40)
50845 ! IF NEWBATCH THEN WRITE (Z(1),KEY=B0$(1,5))B0$
50850 CALL "ZZAUDT",X3$,B0$(6,8),Z[2],0
50860 CALL "ZZAUDT",X3$,B0$(6,8),Z[2],1
50870 X3$(174,4)=I0$,X3$(85,1)=" " ! 263390
50880 B0$(153,6)=X3$(178,4)+"00"
50885 IF NEWBATCH THEN ZZ1=Z(1)
50890 REM "WRITE RECORD
50900 CALL "ZZXPRG",Q$,0,P0$,0,0; B0$(14,40)=Q$
50910 GOSUB 50430
50920 WRITE (Z[1],KEY=B0$(1,5))B0$
50930 GOTO 51285
50940 REM "Continue with existing batch
50950 X3$(174,4)=K0$
50960 X3$(85,1)=MID(O$,5,1)
50970 GOTO 51285
50980 REM "Use another batch
50990 IF K1$="" THEN GOTO 51285
51000 REM "Select another batch in process
51010 CALL "ZZPROM","X1ZZBATC",X3$,S3,"","","",0; ON S3 GOTO 51270,51015
51020 ! CALL "ZZPROM","X2ZZBATC",X3$,0,Q$,"","",0; PRINT @(48-LEN(Q$),22),Q$,
51030 IF RESULT$="" THEN X9=1; EXIT 
51035 O$=RESULT$ ! DIM O$(5); CALL "ZZENTR","AUX",X{ALL},O$,X4$,X3$,50,22,1,5,C0,"BAT","","","","","",""
51040 IF C0<0 THEN GOTO 51270 ELSE IF POS(O$=K1$,5)=0 THEN GOTO 51030
51050 K0$=O$; GOTO 50940
51060 DEF FNS$(X$)=X$(1,POS("    "=X$+"    ")-1)
51070 REM "ERROR PROCESSING
51080 Y5=ERR,Y6=TCB(5)
51090 CALL "ZZERRM",Y8$,"ZZBATC",Y7$,X3$,Y5,Y6,Y7,Y8,0
51100 REM 
51110 ON Y7 GOTO 51130,51180,51270,51140,51170
51120 REM 
51130 RETRY 
51140 SETERR 51160
51150 EXECUTE Y7$
51160 SETERR 51070; RETRY 
51170 SETERR 0000; RETRY 
51180 REM " TRANSFER CONTROL
51190 GOTO 51270
51200 SETESC 51230
51210 SETERR 51230
51220 IF X3$(47,1)<>"1" THEN RETURN ELSE SETESC 0000; RETURN 
51230 SETERR 51070; SETESC 51200; RETURN 
51240 REM "FILES
51250 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
51260 RETURN 
51270 REM "DON'T CONTINUE
51280 X9=1+SGN(X0)
51290 IF S3<>3 THEN FIND (Z[1],KEY=K0$,DOM=51295)Q$; Q$=GBL("BATCHCTRL_PARMS",Q$); REM "SP#[123167]
51295 GOSUB UPDATE_X3
51300 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
51310 IF P$>"" THEN CALL "ZZDAPP",X3$,"A"+P$
51320 EXIT 
51330 END 
55000 PROCESS_QRY:
55010 ENTER PRIME_KEY$,ARGU$
55020 IF POS(PRIME_KEY$=ARGU$)=0 THEN EXIT 123
55030 EXIT 
56000 ! "196266-Panel issues with Level 7 on Julies Laptop in tf500         
56001 REM "197952-Streamline processing by user - Chained journal updates     
60000 CHECK_BATCH:
60010 READ (Z(1),KEY=K0$,DOM=*NEXT); READ (Z(1),KEY="",DOM=*RETURN); RETURN 
60020 K0$="",FLAG=0
60030 READ (Z(1),KEY="",DOM=*NEXT)
60040 RETURN 
