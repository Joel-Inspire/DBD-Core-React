0010 ! SMGMFB - File Maintenance Program for SMC_CustShp (="SMC"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Aug. 10, 2006 11:50
0030 ! ************************************************************************
0035 REM "5.7 - 03/25/14 - 16.900277 - dmm - SSP# 268886
0037 REM "268886-Additional to WO268495; Customer default, bypass IFP Markup 
0040 REM "Copyright 2014 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "SMGMFB","../SMG/SM.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="SMC"+%C$
0161 REM _FILE_NAME2$="FMP"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0182 REM _FIL_FMP=HFN; OPEN (_FIL_FMP,IOL=*,ERR=OPEN_ERR)_FILE_NAME2$
0183 REM _FMP_FN=HFN; OPEN (_FMP_FN,IOL=*,REC=_CUR$)_FILE_NAME2$
0184 AND_OVER$="And Over" ! [212674]
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:2]; _KEYS$[1]="CUSTOMER$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$; CUSTOMER$=CUST_DIV$+CUST_CODE$
1050 _KEY$=CUSTOMER$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1091 GOSUB CONVERT_E_BREAKS2 ! [212674]
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS ! WO243848/SSP245230
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1432 MARKUP_AMT$=STR(MARKUP_AMT) ! WO268886
1435 GOTO WRT
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 _KEY$=PAD(CUST_DIV$,2,$20$)+PAD(CUST_CODE$,8,$20$)
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1665 GOSUB CLEAR_REC; REM SSP195127
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1695 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS ! WO243848/SSP245230
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3061 CUSTOMER$=CUST_DIV$+CUST_CODE$; REM TEST TEST
3062 VENDOR$=VEND_DIV$+VEND_CODE$; REM TEST TEST
3063 FMPKEY$="X"+SPEC_CHG_CODE$; GOSUB READ_FMP; SPEC_CHG_DESC$=MID(FMPX$,12,30)
3064 MARKUP_AMT=NUM(MARKUP_AMT$,ERR=*NEXT) ! WO268886
3065 REFRESH_FLG=1
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1,CHANGE_FLG=0
3365 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS; NEXT_ID=CUSTOMER.CTL
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3521 GOSUB CONVERT_E_BREAKS2 ! [212674]
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUSTOMER.CTL,_FIRST_FIELD=SPEC_CHG_CODE.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 CUST_FRT_DISC$=STR(CUST_FRT_DISC)
10030 B_WEIGHT_1$=STR(B_WEIGHT_1) ! [212674]
10040 B_WEIGHT_2$=STR(B_WEIGHT_2) ! [212674]
10050 B_WEIGHT_3$=STR(B_WEIGHT_3) ! [212674]
10060 B_WEIGHT_4$=STR(B_WEIGHT_4) ! [212674]
10070 B_WEIGHT_5$=STR(B_WEIGHT_5) ! [212674]
10080 E_WEIGHT_1$=STR(E_WEIGHT_1) ! [212674]
10090 E_WEIGHT_2$=STR(E_WEIGHT_2) ! [212674]
10100 E_WEIGHT_3$=STR(E_WEIGHT_3) ! [212674]
10110 E_WEIGHT_4$=STR(E_WEIGHT_4) ! [212674]
10120 E_WEIGHT_5$=STR(E_WEIGHT_5) ! [212674]
10130 DISC_PCT_1$=STR(DISC_PCT_1) ! [212674]
10140 DISC_PCT_2$=STR(DISC_PCT_2) ! [212674]
10150 DISC_PCT_3$=STR(DISC_PCT_3) ! [212674]
10160 DISC_PCT_4$=STR(DISC_PCT_4) ! [212674]
10170 DISC_PCT_5$=STR(DISC_PCT_5) ! [212674]
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="CUST_FRT_DISC",_X=CUST_FRT_DISC.CTL,CUST_FRT_DISC=NUM(CUST_FRT_DISC$,ERR=NON_NUMERIC)
11021 GOSUB CONVERT_E_BREAKS ! [212674]
11030 _X$="WEIGHT_BRK",_X=B_WEIGHT_1.CTL,B_WEIGHT_1=NUM(B_WEIGHT_1$,ERR=NON_NUMERIC) ! [212674]
11040 _X$="WEIGHT_BRK",_X=B_WEIGHT_2.CTL,B_WEIGHT_2=NUM(B_WEIGHT_2$,ERR=NON_NUMERIC) ! [212674]
11050 _X$="WEIGHT_BRK",_X=B_WEIGHT_3.CTL,B_WEIGHT_3=NUM(B_WEIGHT_3$,ERR=NON_NUMERIC) ! [212674]
11060 _X$="WEIGHT_BRK",_X=B_WEIGHT_4.CTL,B_WEIGHT_4=NUM(B_WEIGHT_4$,ERR=NON_NUMERIC) ! [212674]
11070 _X$="WEIGHT_BRK",_X=B_WEIGHT_5.CTL,B_WEIGHT_5=NUM(B_WEIGHT_5$,ERR=NON_NUMERIC) ! [212674]
11080 _X$="WEIGHT_BRK",_X=E_WEIGHT_1.CTL,E_WEIGHT_1=NUM(E_WEIGHT_1$,ERR=NON_NUMERIC) ! [212674]
11090 _X$="WEIGHT_BRK",_X=E_WEIGHT_2.CTL,E_WEIGHT_2=NUM(E_WEIGHT_2$,ERR=NON_NUMERIC) ! [212674]
11100 _X$="WEIGHT_BRK",_X=E_WEIGHT_3.CTL,E_WEIGHT_3=NUM(E_WEIGHT_3$,ERR=NON_NUMERIC) ! [212674]
11110 _X$="WEIGHT_BRK",_X=E_WEIGHT_4.CTL,E_WEIGHT_4=NUM(E_WEIGHT_4$,ERR=NON_NUMERIC) ! [212674]
11120 _X$="WEIGHT_BRK",_X=E_WEIGHT_5.CTL,E_WEIGHT_5=NUM(E_WEIGHT_5$,ERR=NON_NUMERIC) ! [212674]
11130 _X$="PERC",_X=DISC_PCT_1.CTL,DISC_PCT_1=NUM(DISC_PCT_1$,ERR=NON_NUMERIC) ! [212674]
11140 _X$="PERC",_X=DISC_PCT_2.CTL,DISC_PCT_2=NUM(DISC_PCT_2$,ERR=NON_NUMERIC) ! [212674]
11150 _X$="PERC",_X=DISC_PCT_3.CTL,DISC_PCT_3=NUM(DISC_PCT_3$,ERR=NON_NUMERIC) ! [212674]
11160 _X$="PERC",_X=DISC_PCT_4.CTL,DISC_PCT_4=NUM(DISC_PCT_4$,ERR=NON_NUMERIC) ! [212674]
11170 _X$="PERC",_X=DISC_PCT_5.CTL,DISC_PCT_5=NUM(DISC_PCT_5$,ERR=NON_NUMERIC) ! [212674]
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN CUST_DIV$="",CUSTOMER$="",%CUST_NAME$=""
13030 IF _CLR_FLG$="R" THEN CUST_CODE$=""
13040 SPEC_CHG_CODE$=""
13050 VEND_DIV$="",VENDOR$="",%VEND_NAME$=""
13060 VEND_CODE$=""
13070 SMC_UNUSED$=""
13075 NO_INV_NOT_COMP$="" ! WO243848
13077 MARKUP_AMT$="",MARKUP_AMT=0 ! WO268886
13080 CUST_FRT_DISC=0
13110 %SPECIAL_CHARGE_DESC$=""
13120 B_WEIGHT_1=0 ! [212674]
13130 B_WEIGHT_2=0 ! [212674]
13140 B_WEIGHT_3=0 ! [212674]
13150 B_WEIGHT_4=0 ! [212674]
13160 B_WEIGHT_5=0 ! [212674]
13170 E_WEIGHT_1=0 ! [212674]
13180 E_WEIGHT_2=0 ! [212674]
13190 E_WEIGHT_3=0 ! [212674]
13200 E_WEIGHT_4=0 ! [212674]
13210 E_WEIGHT_5=0 ! [212674]
13220 DISC_PCT_1=0 ! [212674]
13230 DISC_PCT_2=0 ! [212674]
13240 DISC_PCT_3=0 ! [212674]
13250 DISC_PCT_4=0 ! [212674]
13260 DISC_PCT_5=0 ! [212674]
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY1.GRP$; NEXT_ID=CUST_CODE.CTL ELSE CALL "*wingrp;Disable",KEY1.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$; CALL "*wingrp;Hide",WB_ALL.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(24,"N") ! [212674], WO243848, WO268886
15030 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15040 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15050 IF _ORIG.SPEC_CHG_CODE$=_CUR.SPEC_CHG_CODE$ OR SPEC_CHG_CODE$=_CUR.SPEC_CHG_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.SPEC_CHG_CODE$=SPEC_CHG_CODE$ THEN _CHG2$=_CHG2$+SEP+" = "+_CUR.SPEC_CHG_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+_CUR.SPEC_CHG_CODE$
15060 IF _ORIG.VEND_DIV$=_CUR.VEND_DIV$ OR VEND_DIV$=_CUR.VEND_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_DIV$=VEND_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$
15070 IF _ORIG.VEND_CODE$=_CUR.VEND_CODE$ OR VEND_CODE$=_CUR.VEND_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_CODE$=VEND_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$
15080 IF _ORIG.SMC_UNUSED$=_CUR.SMC_UNUSED$ OR SMC_UNUSED$=_CUR.SMC_UNUSED$ THEN GOTO *NEXT ELSE IF _ORIG.SMC_UNUSED$=SMC_UNUSED$ THEN _CHG2$=_CHG2$+SEP+" = "+_CUR.SMC_UNUSED$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+_CUR.SMC_UNUSED$
15085 IF _ORIG.NO_INV_NOT_COMP$=_CUR.NO_INV_NOT_COMP$ OR NO_INV_NOT_COMP$=_CUR.NO_INV_NOT_COMP$ THEN GOTO *NEXT ELSE IF _ORIG.NO_INV_NOT_COMP$=NO_INV_NOT_COMP$ THEN _CHG2$=_CHG2$+SEP+" = "+_CUR.NO_INV_NOT_COMP$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+_CUR.NO_INV_NOT_COMP$ ! WO243848
15090 IF _ORIG.CUST_FRT_DISC=_CUR.CUST_FRT_DISC OR CUST_FRT_DISC=_CUR.CUST_FRT_DISC THEN GOTO *NEXT ELSE IF _ORIG.CUST_FRT_DISC=CUST_FRT_DISC THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.CUST_FRT_DISC),_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.CUST_FRT_DISC)
15100 IF _ORIG.B_WEIGHT_1=_CUR.B_WEIGHT_1 OR B_WEIGHT_1=_CUR.B_WEIGHT_1 THEN GOTO *NEXT ELSE IF _ORIG.B_WEIGHT_1=B_WEIGHT_1 THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.B_WEIGHT_1),_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.B_WEIGHT_1) ! [212674]
15110 IF _ORIG.B_WEIGHT_2=_CUR.B_WEIGHT_2 OR B_WEIGHT_2=_CUR.B_WEIGHT_2 THEN GOTO *NEXT ELSE IF _ORIG.B_WEIGHT_2=B_WEIGHT_3 THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.B_WEIGHT_2),_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.B_WEIGHT_2) ! [212674]
15120 IF _ORIG.B_WEIGHT_3=_CUR.B_WEIGHT_3 OR B_WEIGHT_3=_CUR.B_WEIGHT_3 THEN GOTO *NEXT ELSE IF _ORIG.B_WEIGHT_3=B_WEIGHT_3 THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.B_WEIGHT_3),_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.B_WEIGHT_3) ! [212674]
15130 IF _ORIG.B_WEIGHT_4=_CUR.B_WEIGHT_4 OR B_WEIGHT_4=_CUR.B_WEIGHT_4 THEN GOTO *NEXT ELSE IF _ORIG.B_WEIGHT_4=B_WEIGHT_4 THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.B_WEIGHT_4),_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.B_WEIGHT_4) ! [212674]
15140 IF _ORIG.B_WEIGHT_5=_CUR.B_WEIGHT_5 OR B_WEIGHT_5=_CUR.B_WEIGHT_5 THEN GOTO *NEXT ELSE IF _ORIG.B_WEIGHT_5=B_WEIGHT_5 THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.B_WEIGHT_5),_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.B_WEIGHT_5) ! [212674]
15150 IF _ORIG.E_WEIGHT_1=_CUR.E_WEIGHT_1 OR E_WEIGHT_1=_CUR.E_WEIGHT_1 THEN GOTO *NEXT ELSE IF _ORIG.E_WEIGHT_1=E_WEIGHT_1 THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.E_WEIGHT_1),_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.E_WEIGHT_1) ! [212674]
15160 IF _ORIG.E_WEIGHT_2=_CUR.E_WEIGHT_2 OR E_WEIGHT_2=_CUR.E_WEIGHT_2 THEN GOTO *NEXT ELSE IF _ORIG.E_WEIGHT_2=E_WEIGHT_2 THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.E_WEIGHT_2),_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.E_WEIGHT_2) ! [212674]
15170 IF _ORIG.E_WEIGHT_3=_CUR.E_WEIGHT_3 OR E_WEIGHT_3=_CUR.E_WEIGHT_3 THEN GOTO *NEXT ELSE IF _ORIG.E_WEIGHT_3=E_WEIGHT_3 THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.E_WEIGHT_3),_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.E_WEIGHT_3) ! [212674]
15180 IF _ORIG.E_WEIGHT_4=_CUR.E_WEIGHT_4 OR E_WEIGHT_4=_CUR.E_WEIGHT_4 THEN GOTO *NEXT ELSE IF _ORIG.E_WEIGHT_4=E_WEIGHT_4 THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.E_WEIGHT_4),_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.E_WEIGHT_4) ! [212674]
15190 IF _ORIG.E_WEIGHT_5=_CUR.E_WEIGHT_5 OR E_WEIGHT_5=_CUR.E_WEIGHT_5 THEN GOTO *NEXT ELSE IF _ORIG.E_WEIGHT_5=E_WEIGHT_5 THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.E_WEIGHT_5),_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.E_WEIGHT_5) ! [212674]
15200 IF _ORIG.DISC_PCT_1=_CUR.DISC_PCT_1 OR DISC_PCT_1=_CUR.DISC_PCT_1 THEN GOTO *NEXT ELSE IF _ORIG.DISC_PCT_1=DISC_PCT_1 THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.DISC_PCT_1),_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.DISC_PCT_1) ! [212674]
15210 IF _ORIG.DISC_PCT_2=_CUR.DISC_PCT_2 OR DISC_PCT_2=_CUR.DISC_PCT_2 THEN GOTO *NEXT ELSE IF _ORIG.DISC_PCT_2=DISC_PCT_2 THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.DISC_PCT_2),_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.DISC_PCT_2) ! [212674]
15220 IF _ORIG.DISC_PCT_3=_CUR.DISC_PCT_3 OR DISC_PCT_3=_CUR.DISC_PCT_3 THEN GOTO *NEXT ELSE IF _ORIG.DISC_PCT_3=DISC_PCT_3 THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.DISC_PCT_3),_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.DISC_PCT_3) ! [212674]
15230 IF _ORIG.DISC_PCT_4=_CUR.DISC_PCT_4 OR DISC_PCT_4=_CUR.DISC_PCT_4 THEN GOTO *NEXT ELSE IF _ORIG.DISC_PCT_4=DISC_PCT_4 THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.DISC_PCT_4),_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.DISC_PCT_4) ! [212674]
15240 IF _ORIG.DISC_PCT_5=_CUR.DISC_PCT_5 OR DISC_PCT_5=_CUR.DISC_PCT_5 THEN GOTO *NEXT ELSE IF _ORIG.DISC_PCT_5=DISC_PCT_5 THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.DISC_PCT_5),_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.DISC_PCT_5) ! [212674]
15245 IF _ORIG.MARKUP_AMT=_CUR.MARKUP_AMT OR MARKUP_AMT=_CUR.MARKUP_AMT THEN GOTO *NEXT ELSE IF _ORIG.MARKUP_AMT=MARKUP_AMT THEN _CHG2$=_CHG2$+SEP+" = "+STR(_CUR.MARKUP_AMT),_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+STR(_CUR.MARKUP_AMT) ! WO268886
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16030 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN SPEC_CHG_CODE$=_CUR.SPEC_CHG_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN VEND_DIV$=_CUR.VEND_DIV$
16060 IF _CHG_VAR$(5,1)="Y" THEN VEND_CODE$=_CUR.VEND_CODE$
16070 IF _CHG_VAR$(6,1)="Y" THEN SMC_UNUSED$=_CUR.SMC_UNUSED$
16075 IF _CHG_VAR$(23,1)="Y" THEN NO_INV_NOT_COMP$=_CUR.NO_INV_NOT_COMP$ ! WO243848
16080 IF _CHG_VAR$(7,1)="Y" THEN CUST_FRT_DISC=_CUR.CUST_FRT_DISC
16090 IF _CHG_VAR$(8,1)="Y" THEN B_WEIGHT_1=_CUR.B_WEIGHT_1 ! [212674]
16100 IF _CHG_VAR$(9,1)="Y" THEN E_WEIGHT_1=_CUR.E_WEIGHT_1 ! [212674]
16110 IF _CHG_VAR$(10,1)="Y" THEN DISC_PCT_1=_CUR.DISC_PCT_1 ! [212674]
16120 IF _CHG_VAR$(11,1)="Y" THEN B_WEIGHT_2=_CUR.B_WEIGHT_2 ! [212674]
16130 IF _CHG_VAR$(12,1)="Y" THEN E_WEIGHT_2=_CUR.E_WEIGHT_2 ! [212674]
16140 IF _CHG_VAR$(13,1)="Y" THEN DISC_PCT_2=_CUR.DISC_PCT_2 ! [212674]
16150 IF _CHG_VAR$(14,1)="Y" THEN B_WEIGHT_3=_CUR.B_WEIGHT_3 ! [212674]
16160 IF _CHG_VAR$(15,1)="Y" THEN E_WEIGHT_3=_CUR.E_WEIGHT_3 ! [212674]
16170 IF _CHG_VAR$(16,1)="Y" THEN DISC_PCT_3=_CUR.DISC_PCT_3 ! [212674]
16180 IF _CHG_VAR$(17,1)="Y" THEN B_WEIGHT_4=_CUR.B_WEIGHT_4 ! [212674]
16190 IF _CHG_VAR$(18,1)="Y" THEN E_WEIGHT_4=_CUR.E_WEIGHT_4 ! [212674]
16200 IF _CHG_VAR$(19,1)="Y" THEN DISC_PCT_4=_CUR.DISC_PCT_4 ! [212674]
16210 IF _CHG_VAR$(20,1)="Y" THEN B_WEIGHT_5=_CUR.B_WEIGHT_5 ! [212674]
16220 IF _CHG_VAR$(21,1)="Y" THEN E_WEIGHT_5=_CUR.E_WEIGHT_5 ! [212674]
16230 IF _CHG_VAR$(22,1)="Y" THEN DISC_PCT_5=_CUR.DISC_PCT_5 ! [212674]
16235 IF _CHG_VAR$(24,1)="Y" THEN MARKUP_AMT=_CUR.MARKUP_AMT ! WO268886
16990 RETURN 
20000 CALCULATE_BREAKS:! [212674]-added routine(lines 20000-20190)
20030 FOR AA=1 TO 5
20040 EXECUTE "IF NUM(B_WEIGHT_"+STR(AA)+"$)<>0 THEN E_WEIGHT_"+STR(AA-1)+"$=STR(NUM(B_WEIGHT_"+STR(AA)+"$)-.01)"
20045 EXECUTE "IF NUM(B_WEIGHT_"+STR(AA)+"$)=0 then E_WEIGHT_"+STR(AA-1)+"$=""and more"""
20050 EXECUTE "IF NUM(B_WEIGHT_"+STR(AA)+"$)=0 then E_WEIGHT_"+STR(AA)+"$=""0"""
20070 NEXT AA
20080 REFRESH_FLG=1
20190 RETURN 
20700 GET_DESC:
20710 FMPKEY$="X"+SPEC_CHG_CODE$; GOSUB READ_FMP; %SPECIAL_CHARGE_DESC$=MID(FMPX$,12,30)
20745 REFRESH_FLG=1
20749 RETURN 
20750 READ_FMP:
20751 GOTO 20770
20752 DIM FMPX$(100)
20755 READ (_FMP_FN,KEY=FMPKEY$)FMPX$
20756 FMPX$=_CUR.FMPX$
20760 REM IF MID(FMP$,61,1)<>"Y" THEN MSGBOX MSG("OSG_SPEC_C"),""
20770 RETURN 
21000 SEL_QUERY:
21010 VAL$=""
21020 PROCESS "QRY_SMC","../SMG/SM.EN",VAL$
21030 IF STP(VAL$)="" THEN RETURN 
21040 _KEY$=VAL$,CUSTOMER$=VAL$
21050 GOTO 1045
22000 FROM_WEIGHT_1:! [212674]-added routine (lines 22000-22095)
22010 IF NUM(B_WEIGHT_1$)=0 THEN TMP_FLD=1; GOTO AND_OVER_BREAK
22090 REFRESH_FLG=1
22095 RETURN 
22100 FROM_WEIGHT_2:! [212674]-added routine (lines 22100-22195)
22110 IF NUM(B_WEIGHT_2$)=0 THEN {
22111 TMP_FLD=2
22112 GOSUB CLEAR_BREAKS
22120 E_WEIGHT_1$=AND_OVER$
22125 GOTO AND_OVER_BREAK
22130  }
22135 IF NUM(B_WEIGHT_2$)<=NUM(B_WEIGHT_1$) THEN {
22145 NEXT_ID=B_WEIGHT_2.CTL
22150  } ELSE {
22155 E_WEIGHT_1$=STR(NUM(B_WEIGHT_2$)-.01)
22170  }
22190 REFRESH_FLG=1
22195 RETURN 
22200 FROM_WEIGHT_3:! [212674]-added routine (lines 22200-22295)
22210 IF NUM(B_WEIGHT_3$)=0 THEN {
22215 TMP_FLD=3
22216 GOSUB CLEAR_BREAKS
22220 E_WEIGHT_2$=AND_OVER$
22225 GOTO AND_OVER_BREAK
22230  }
22235 IF NUM(B_WEIGHT_3$)<=NUM(B_WEIGHT_2$) THEN {
22245 NEXT_ID=B_WEIGHT_3.CTL
22250  } ELSE {
22255 E_WEIGHT_2$=STR(NUM(B_WEIGHT_3$)-.01)
22270  }
22290 REFRESH_FLG=1
22295 RETURN 
22300 FROM_WEIGHT_4:! [212674]-added routine (lines 22300-22395)
22310 IF NUM(B_WEIGHT_4$)=0 THEN {
22315 TMP_FLD=4
22316 GOSUB CLEAR_BREAKS
22320 E_WEIGHT_3$=AND_OVER$
22325 GOTO AND_OVER_BREAK
22330  }
22335 IF NUM(B_WEIGHT_4$)<=NUM(B_WEIGHT_3$) THEN {
22345 NEXT_ID=B_WEIGHT_4.CTL
22350  } ELSE {
22355 E_WEIGHT_3$=STR(NUM(B_WEIGHT_4$)-.01)
22370  }
22390 REFRESH_FLG=1
22395 RETURN 
22400 FROM_WEIGHT_5:! [212674]-added routine (lines 22400-22495)
22410 IF NUM(B_WEIGHT_5$)=0 THEN {
22415 TMP_FLD=5
22416 GOSUB CLEAR_BREAKS
22420 E_WEIGHT_4$=AND_OVER$
22425 GOTO AND_OVER_BREAK
22430  }
22435 IF NUM(B_WEIGHT_5$)<=NUM(B_WEIGHT_4$) THEN {
22445 NEXT_ID=B_WEIGHT_5.CTL
22450  } ELSE {
22455 E_WEIGHT_4$=STR(NUM(B_WEIGHT_5$)-.01)
22460 E_WEIGHT_5$="And Over"
22470  }
22490 REFRESH_FLG=1
22495 RETURN 
22500 AND_OVER_BREAK:! [212674]-added routine (lines 22500-22595)
22501 GOSUB CLEAR_BREAKS
22510 NEXT_ID=NO_INV_NOT_COMP.CTL ! WO243848, needs to be last tab, BUTTON_1.CTL
22590 REFRESH_FLG=1
22595 RETURN 
22600 CONVERT_E_BREAKS:! [212674]-added routine (lines 22600-22695)
22610 IF E_WEIGHT_1$=AND_OVER$ THEN E_WEIGHT_1$="0"
22620 IF E_WEIGHT_2$=AND_OVER$ THEN E_WEIGHT_2$="0"
22630 IF E_WEIGHT_3$=AND_OVER$ THEN E_WEIGHT_3$="0"
22640 IF E_WEIGHT_4$=AND_OVER$ THEN E_WEIGHT_4$="0"
22650 IF E_WEIGHT_5$=AND_OVER$ THEN E_WEIGHT_5$="0"
22695 RETURN 
22700 CONVERT_E_BREAKS2:! [212674]-added routine (lines 22700-22795)
22710 IF NUM(B_WEIGHT_1$)>0 AND NUM(E_WEIGHT_1$)=0 THEN E_WEIGHT_1$=AND_OVER$
22720 IF NUM(B_WEIGHT_2$)>0 AND NUM(E_WEIGHT_2$)=0 THEN E_WEIGHT_2$=AND_OVER$
22730 IF NUM(B_WEIGHT_3$)>0 AND NUM(E_WEIGHT_3$)=0 THEN E_WEIGHT_3$=AND_OVER$
22740 IF NUM(B_WEIGHT_4$)>0 AND NUM(E_WEIGHT_4$)=0 THEN E_WEIGHT_4$=AND_OVER$
22750 IF NUM(B_WEIGHT_5$)>0 AND NUM(E_WEIGHT_5$)=0 THEN E_WEIGHT_5$=AND_OVER$
22760 GOSUB DISPLAY_BREAKS
22795 RETURN 
22800 CLEAR_BREAKS:! [212674]-added routine (lines 22800-22995)
22830 SWITCH TMP_FLD
22835 CASE 1
22840 B_WEIGHT_1$="0",E_WEIGHT_1$="0",DISC_PCT_1$="0"; CALL "*wingrp;Hide",WB_1.GRP$
22845 B_WEIGHT_2$="0",E_WEIGHT_2$="0",DISC_PCT_2$="0"; CALL "*wingrp;Hide",WB_2.GRP$
22850 B_WEIGHT_3$="0",E_WEIGHT_3$="0",DISC_PCT_3$="0"; CALL "*wingrp;Hide",WB_3.GRP$
22855 B_WEIGHT_4$="0",E_WEIGHT_4$="0",DISC_PCT_4$="0"; CALL "*wingrp;Hide",WB_4.GRP$
22860 B_WEIGHT_5$="0",E_WEIGHT_5$="0",DISC_PCT_5$="0"; CALL "*wingrp;Hide",WB_5.GRP$
22865 BREAK
22870 CASE 2
22875 B_WEIGHT_2$="0",E_WEIGHT_2$="0",DISC_PCT_2$="0"; CALL "*wingrp;Hide",WB_2.GRP$
22880 B_WEIGHT_3$="0",E_WEIGHT_3$="0",DISC_PCT_3$="0"; CALL "*wingrp;Hide",WB_3.GRP$
22885 B_WEIGHT_4$="0",E_WEIGHT_4$="0",DISC_PCT_4$="0"; CALL "*wingrp;Hide",WB_4.GRP$
22890 B_WEIGHT_5$="0",E_WEIGHT_5$="0",DISC_PCT_5$="0"; CALL "*wingrp;Hide",WB_5.GRP$
22895 BREAK
22900 CASE 3
22905 B_WEIGHT_3$="0",E_WEIGHT_3$="0",DISC_PCT_3$="0"; CALL "*wingrp;Hide",WB_3.GRP$
22910 B_WEIGHT_4$="0",E_WEIGHT_4$="0",DISC_PCT_4$="0"; CALL "*wingrp;Hide",WB_4.GRP$
22915 B_WEIGHT_5$="0",E_WEIGHT_5$="0",DISC_PCT_5$="0"; CALL "*wingrp;Hide",WB_5.GRP$
22920 BREAK
22925 CASE 4
22930 B_WEIGHT_4$="0",E_WEIGHT_4$="0",DISC_PCT_4$="0"; CALL "*wingrp;Hide",WB_4.GRP$
22935 B_WEIGHT_5$="0",E_WEIGHT_5$="0",DISC_PCT_5$="0"; CALL "*wingrp;Hide",WB_5.GRP$
22940 BREAK
22945 CASE 5
22950 B_WEIGHT_5$="0",E_WEIGHT_5$="0",DISC_PCT_5$="0"; CALL "*wingrp;Hide",WB_5.GRP$
22955 BREAK
22960 END SWITCH 
22995 RETURN 
23000 DISPLAY_BREAKS:! [212674]-added routine (lines 23000-23195)
23010 IF NUM(B_WEIGHT_1$)>0 THEN CALL "*wingrp;Show",WB_1.GRP$ ELSE CALL "*wingrp;Hide",WB_1.GRP$
23020 IF NUM(B_WEIGHT_2$)>0 THEN CALL "*wingrp;Show",WB_2.GRP$ ELSE CALL "*wingrp;Hide",WB_2.GRP$
23030 IF NUM(B_WEIGHT_3$)>0 THEN CALL "*wingrp;Show",WB_3.GRP$ ELSE CALL "*wingrp;Hide",WB_3.GRP$
23040 IF NUM(B_WEIGHT_4$)>0 THEN CALL "*wingrp;Show",WB_4.GRP$ ELSE CALL "*wingrp;Hide",WB_4.GRP$
23050 IF NUM(B_WEIGHT_5$)>0 THEN CALL "*wingrp;Show",WB_5.GRP$ ELSE CALL "*wingrp;Hide",WB_5.GRP$
23060 RETURN 
56000 REM + Modification History
56002 REM "SSP 195127 add new field for Harvey shipping standard cost
56004 REM "212674-Add more freight discounts based on weight.
56006 REM "243848-CIG has parameter to invoice even if lines not complete.    
56008 REM "268886-Additional to WO268495; Customer default, bypass IFP Markup 
