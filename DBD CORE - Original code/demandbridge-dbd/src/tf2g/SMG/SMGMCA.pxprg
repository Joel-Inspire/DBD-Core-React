0010 ! SMGMCA - Sales Order Shipping History
0035 REM "5.7 - 09/18/12 - 13.872222 - jvv - SSP# 257952
0037 REM "257952-Need larger tracking number field to replace 20 character   
0040 REM "Copyright 2012 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0045 SETERR 0046; ENTER FLAG$
0050 IF FLAG$="" THEN PROCESS "SMGMCA.1","../SMG/SM.EN" ELSE PROCESS "SMGMCA","../SMG/SM.EN",FLAG$
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 IF SCRN_ID$="SMGMCA.2" THEN _FILE_NAME$="SM7"+%C$ ELSE _FILE_NAME$="SM4"+%C$
0162 _CALL$="N"; IF SCRN_ID$="SMGMCA" THEN _CALL$="Y" ! SSP 257952
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=4,_CUR_KEY$=""
0430 DIM _KEYS$[1:4]; _KEYS$[1]="PO_NUMBER$",_KEYS$[2]="PO_LINE_NUM$",_KEYS$[3]="LOC_CODE$",_KEYS$[4]="BOX_NUMBER$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0565 NEXT_ID=QTY.CTL
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF ARG_1$<>"" THEN %CUSTOMER$=SVE_CUST$ ! SSP 257952
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1011 IF ID$<>"BOX_NUMBER" THEN GOTO 1015
1012 BOX_NUMBER$=STR(NUM(BOX_NUMBER$):"000",ERR=*NEXT)
1013 BOX_NUMBER$=PAD(BOX_NUMBER$,3," ")
1014 BOX_NUMBER.CTL'VALUE$=BOX_NUMBER$
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;PARSE_ORD",PO_NUMBER$,PO_DIV$,PO_NUM$
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1; IF ID$<>"BUTTON_9" THEN NEXT_ID=_FIRST_FIELD ELSE RETURN ! SSP246002
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 WRITE (_FIL_NO,KEY=_KEY$)
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY; IF _CALL$="Y" THEN CMD_STR$="E" ELSE _CLR_FLG$="R"; GOSUB CLEAR_FIELDS ! SSP 257952
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY; IF _CALL$="Y" THEN CMD_STR$="E" ELSE _CLR_FLG$="R"; GOSUB CLEAR_FIELDS ! SSP 257952
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 IF _KEY$=_CUR_KEY$ THEN _KEY$=KEN(_FIL_NO,END=END_OF_FILE) ! Get past extracted record
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 ! EXTRACT (_FIL_NO,KEY=_KEY$)
3055 VENDOR$=VEND_DIV$+VEND_CODE$ ! SSP 258837
3058 %SHIP_VIA_DESC$=CARRIER_NAME$
3060 _CUR_KEY$=_KEY$,PO_NUMBER$=PO_DIV$+PO_NUM$,CARRIER_ID$=STP(CARRIER_ID$)
3065 IF ARG_1$<>"" THEN SVE_CUST$=%CUSTOMER$,CUSTOMER$=CUST_DIV$+CUST_CODE$; CALL "ZZWLKU;Parse_cust",CUSTOMER$,CUST_DIV$,CUST_CODE$; %CUSTOMER$=CUSTOMER$ ! SSP 257952
3070 RETURN 
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=PO_NUMBER.CTL,_FIRST_FIELD=SEQ_NUM.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR"),_MSG_DIRECTORY$=MSG("DIRECTORY"),_MSG_END_OF_FIL$=MSG("END_OF_FIL"),_MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK"),_MSG_MANDATORY$=MSG("MANDATORY"),_MSG_NEXT$=MSG("NEXT"),_MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND"),_MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG"),_MSG_PRECEDING$=MSG("PRECEDING"),_MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS"),_MSG_REC_ALTERD$=MSG("REC_ALTERD"),_MSG_REC_CR_NEW$=MSG("REC_CR_NEW"),_MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND"),_MSG_REC_NO_1ST$=MSG("REC_NO_1ST"),_MSG_REC_NO_LST$=MSG("REC_NO_LST"),_MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD"),_MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS"),_MSG_START_FILE$=MSG("START_FILE"),_MSG_UPDATE$=MSG("UPDATE"),_MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2"),_MSG_UPD_SAME$=MSG("UPD_SAME"),_MSG_WARNING$=MSG("WARNING"),_MSG_CANNOT_WRITE$=MSG("CANT_WRITE"),_MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 QTY$=STR(QTY),ACTUAL_WEIGHT$=STR(ACTUAL_WEIGHT),SHIPPING_WT$=STR(SHIPPING_WT)
10050 TOTAL_FRT$=STR(TOTAL_FRT),TOTAL_COST$=STR(TOTAL_COST),UNITS_PER_PACK$=STR(UNITS_PER_PACK)
10080 UNITS_PER_PRI_UNIT$=STR(UNITS_PER_PRI_UNIT),SELL_PRICE$=STR(SELL_PRICE),UNITS_PER_UM$=STR(UNITS_PER_UM)
10110 STND_UNIT_COST$=STR(STND_UNIT_COST),STND_UNIT_COST_QTY$=STR(STND_UNIT_COST_QTY),BACKORDER_QTY$=STR(BACKORDER_QTY),CARTON_PACK$=STR(CARTON_PACK)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="QTY",_X=QTY.CTL,QTY=NUM(QTY$,ERR=NON_NUMERIC)
11030 _X$="ACTUAL_WEIGHT",_X=ACTUAL_WEIGHT.CTL,ACTUAL_WEIGHT=NUM(ACTUAL_WEIGHT$,ERR=NON_NUMERIC)
11040 _X$="SHIPPING_WT",_X=SHIPPING_WT.CTL,SHIPPING_WT=NUM(SHIPPING_WT$,ERR=NON_NUMERIC)
11050 _X$="TOTAL_FRT",_X=TOTAL_FRT.CTL,TOTAL_FRT=NUM(TOTAL_FRT$,ERR=NON_NUMERIC)
11060 _X$="TOTAL_COST",_X=TOTAL_COST.CTL,TOTAL_COST=NUM(TOTAL_COST$,ERR=NON_NUMERIC)
11070 _X$="UNITS_PER_PACK",_X=UNITS_PER_PACK.CTL,UNITS_PER_PACK=NUM(UNITS_PER_PACK$,ERR=NON_NUMERIC)
11080 _X$="UNITS_PER_PRI_UNIT",_X=UNITS_PER_PRI_UNIT.CTL,UNITS_PER_PRI_UNIT=NUM(UNITS_PER_PRI_UNIT$,ERR=NON_NUMERIC)
11090 _X$="SELL_PRICE",_X=SELL_PRICE.CTL,SELL_PRICE=NUM(SELL_PRICE$,ERR=NON_NUMERIC)
11100 _X$="UNITS_PER_UM",_X=UNITS_PER_UM.CTL,UNITS_PER_UM=NUM(UNITS_PER_UM$,ERR=NON_NUMERIC)
11110 _X$="STND_UNIT_COST",_X=STND_UNIT_COST.CTL,STND_UNIT_COST=NUM(STND_UNIT_COST$,ERR=NON_NUMERIC)
11120 _X$="STND_UNIT_COST_QTY",_X=STND_UNIT_COST_QTY.CTL,STND_UNIT_COST_QTY=NUM(STND_UNIT_COST_QTY$,ERR=NON_NUMERIC)
11130 _X$="BACKORDER_QTY",_X=BACKORDER_QTY.CTL,BACKORDER_QTY=NUM(BACKORDER_QTY$,ERR=NON_NUMERIC)
11140 _X$="CARTON_PACK",_X=CARTON_PACK.CTL,CARTON_PACK=NUM(CARTON_PACK$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN PO_DIV$=""
13030 IF _CLR_FLG$="R" THEN PO_NUM$="",PO_NUMBER$="" ! SSP 258837
13040 IF _CLR_FLG$="R" THEN PO_LINE_NUM$=""
13050 IF _CLR_FLG$="R" THEN LOC_CODE$=""
13060 SEQ_NUM$=""
13070 SHIPPED_ON_DATE$="",SHIPPED_ON_TIME$="",EST_ARRIVAL$="",CARRIER_ID$="",CARRIER_NAME$=""
13120 TRACKING_NUM$="",PICKUP_NUM$="",ZIP_CODE$="",TF_ZONE$="",UPDATED_ORDER$="",RECVD$=""
13180 DONT_BILL$="",INVOICED$="",AR_INV_NUM$="",PACKER_ID$="",LOT_ID$=""
13230 IF _CLR_FLG$="R" THEN BOX_NUMBER$=""
13240 TOTAL_BOXES$="",RECVG_REPORT_NUM$="",STARTING_NUM$="",ENDING_NUM$="",BIN_LOC$=""
13290 PRIMARY_UM$="",PACKAGING_UM$="",UM$="",CUST_PO$="",SHORT_OR_BROKEN_CTN$="",CUST_CMNT$=""
13350 ITEM_REV_DATE$="",LOT_NUM$="",PROD_CODE$="",COMM_CODE$="",STORAGE_EXP_DATE$="",STD_COST_UM$=""
13410 VEND_INVOICE$="",VEND_INV_DATE$="",RECEIPT_DATE$="",FISCAL_YEAR$="",ACCT_PERIOD$=""
13460 JOB_NUMBER$="",JOB_DATE$="",COMPLETE_FLAG$="",AP_INVOICED$="",AP_ERROR_CODE$="",SM2UDA_ERROR$=""
13520 PARTIAL_SHIPMENT$="",STOCK_OR_BTYPE$="",D_TYPE_LOC$="",SM4_UNUSED_1$="",QTY=0,ACTUAL_WEIGHT=0
13580 SHIPPING_WT=0,TOTAL_FRT=0,TOTAL_COST=0,UNITS_PER_PACK=0,UNITS_PER_PRI_UNIT=0,SELL_PRICE=0
13640 UNITS_PER_UM=0,STND_UNIT_COST=0,STND_UNIT_COST_QTY=0,BACKORDER_QTY=0,CARTON_PACK=0
13690 INBOUND_FRT$="",B_TYPE_ORDER$="",INVALID_ORDER_NUM$="" ! 244750
13695 VEND_DIV$="",VEND_CODE$="",VENDOR$="" ! 244750
13707 INBOUND_SHIPPER_ID$="" ! 244750
13710 RELEASE_LINES$="" ! WO246651
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=PO_NUM.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=PO_LINE_NUM.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=LOC_CODE.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14060 IF _ENABLE_FLG=5 THEN CALL "*wingrp;Enable",KEY5.GRP$; NEXT_ID=BOX_NUMBER.CTL ELSE CALL "*wingrp;Disable",KEY5.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 SEL_QRY_1: VAL$=""
15010 PROCESS "QRY_SM4.1","../SMG/SM.EN",VAL$
15020 IF VAL$="" THEN RETURN 
15030 _KEY$=VAL$,PO_NUMBER$=VAL$(1,8),PO_LINE_NUM$=VAL$(10,3),LOC_CODE$=VAL$(13,1),BOX_NUMBER$=VAL$(14,3)
15040 GOSUB 1045
15050 NEXT_ID=QTY.CTL
15060 RETURN 
21000 FIND_ORDER_LINE:
21020 IF PO_LINE_NUM$="" THEN PO_LINE_NUM$=DIM(3) ELSE PO_LINE_NUM$=PAD(PO_LINE_NUM$,3,0,"0")
21030 REFRESH_FLG=1
21050 RETURN 
21099 ! 
22000 CARRIER_ID_NAME:
22005 %SHIP_VIA_DESC$=""
22010 IF LEN(CARRIER_ID$)=1 THEN CALL "ZZWLKU;SHIP_VIA_VAL",CARRIER_ID$,MM$,MM1$; IF STP(MM$,2)<>"" THEN MSGBOX MM$; CARRIER_ID$=""; NEXT_ID=CARRIER_ID.CTL
22090 RETURN 
56000 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56002 REM "244750-Inbound Freight processing in the Customer Invoicing Gateway
56004 REM "246651-Additional to WO244750 - CIG Inbound Freight Processing     
56005 REM "257952-Need larger tracking number field to replace 20 character   
