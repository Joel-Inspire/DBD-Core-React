0010 ! FOGDAA - Order Requisition Maintenance
0035 REM "5.7 - 04/25/13 - 15.870555 - dmm - SSP# 258736
0037 REM "258736-GUI Order Req GW Maintenance needs logic for C type line to 
0040 REM "Copyright 2013 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "FOGDAA","../FOG/FO.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0145 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,X2
0150 GOSUB SETUP_KEYS
0155 IOLIST FO2$,FO2{ALL}
0160 _FILE_NAME$="FO0"+%C$
0170 REM z[1]=HFN; OPEN (z[1],IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 DIM Z[NUM(X3$(60,3))]
0182 Z$="01O FO0...  02O FO6...  03O FO2...  04O FM1...  05O AR1...  06O FM0...  07O IC0...  08O FSO...  09O FM4...  10O FO3...  11O AR5...  12O FO5...  13O ZZPARM  "
0184 GOSUB 9750; ON Z0 GOTO 0185,9900
0186 READ (Z[13],KEY=X3$(9,3)+"F/M")P0$
0188 IOLIST IC0$,IC0{ALL}
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=4,_CUR_KEY$=""
0430 DIM _KEYS$[1:3]; _KEYS$[1]="CUSTOMER$",_KEYS$[2]="LOC_CODE$",_KEYS$[3]="REQ_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (Z[1],KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0915 %LINE_TYPE_LIST$="",%LINE_TYPE_VALUES$=""
0920 ARG_1$=KEC(Z[1],ERR=*NEXT)
0930 IF Z[1]<>0 THEN CLOSE (Z[1]); Z[1]=0
0940 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
0942 ERASE J1$,ERR=*NEXT; ERASE J2$,ERR=*NEXT; REM "Erase temp files
0944 IF FILE_CREATED$="Y" THEN CLOSE (Z[3]); DIR$=HWD+DLM+"data"; RENAME DIR$+DLM+TEXT_FILE$ TO DIR$+DLM+"TF"+TEXT_FILE$
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1011 GOSUB GET_CURKEY; GOTO 1030
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$
1050 READ DATA FROM REC(IOL(Z[1]:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (Z[1],KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB LOAD_TO_FILE; REM GOSUB STR_TO_NUM
1430 REM GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1432 REM CALL "ZZWLKU;PARSE_ORD",ORDER$,ORDER_DIV$,ORDER_NUM$
1435 REM IF STP(KEY_FO2$)="" THEN GOTO 1485
1437 IF ID$="BT_WRITE1" OR ID$="BT_CLEAR" OR ID$="BT_EXIT" OR ID$="BUTTON_7" OR ID$="BUTTON_6" OR ID$="BUTTON_5" OR ID$="BUTTON_4" THEN WRITE (Z[1],KEY=_KEY$); GOSUB REQ_HOLD_ROUTINE; IF ID$="BT_CLEAR" THEN GOSUB CLEAR_FIELDS; GOTO 1460 ELSE GOTO 1460
1440 WRITE (Z[3],KEY=KEY_FO2$)IOL=0155
1442 IF LIST_COUNT=0 THEN GOTO 1450
1444 FOR I=LIST_COUNT TO 1 STEP -1
1446 LIST_BOX LOAD ORDER_LINE.CTL,I,*,ERR=1450
1448 NEXT I
1455 GOSUB FIND_FO2_LINES
1456 GOSUB LOAD_BLANK_LINE
1458 REFRESH_FLG=1
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; IF ID$="BT_WRITE1" THEN GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1482 CALL "*wingrp;Disable",FIELDS.GRP$
1484 CALL "*wingrp;Disable",BUTTONS2.GRP$
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(Z[1]:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1655 IF ID$="BT_DELETE1" THEN GOTO 1665
1660 REMOVE (Z[1],KEY=_KEY$,ERR=NO_SUCH)
1670 GOSUB DEL_FO2_LINES
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(Z[1],END=END_OF_FILE)
2050 IF _KEY$=_CUR_KEY$ THEN _KEY$=KEN(Z[1],END=END_OF_FILE) ! Get past extracted record
2060 READ (Z[1],KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(Z[1],KEY=_KEY$,END=END_OF_FILE); READ (Z[1],KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(Z[1],END=START_OF_FILE); READ (Z[1],KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(Z[1],KEY=_KEY$,END=START_OF_FILE); READ (Z[1],KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(Z[1],ERR=NO_FIRST)
2450 READ (Z[1],KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(Z[1],ERR=NO_LAST)
2650 READ (Z[1],KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(Z[1]:KEY,ERR=*NEXT) ! load fields fromexternal key
3035 CALL "*wingrp;Enable",FIELDS2.GRP$
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 EXTRACT (Z[1],KEY=_KEY$)
3060 _CUR_KEY$=_KEY$; CUSTOMER$=CUST_DIV$+CUST_CODE$
3070 REM CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,%CUST_DIV$,%CUST_CODE$
3072 ! GOSUB LOAD_LINE_TYPES
3075 REM GOSUB CK_BUTTON
3090 GOSUB FIND_FO2_LINES
3092 GOSUB LOAD_BLANK_LINE
3094 ORDER$=ORDER_DIV$+ORDER_NUM$
3096 IF STP(ORDER$)<>"" THEN MSGBOX MSG("FOGDAA_3"),MSG("FYI"); CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$; CALL "*wingrp;Disable",FIELDS2.GRP$
3098 CALL "*wingrp;Disable",BUTTONS2.GRP$
3100 REFRESH_FLG=1
3199 RETURN 
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUSTOMER.CTL,_FIRST_FIELD=ACTIVITY_TYPE.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
5000 REQ_HOLD_ROUTINE:
5010 IF REQ_ON_HOLD$<>"Y" AND OK_TO_PROCESS AND STP(ORDER_DIV$+ORDER_NUM$,3," ")="" THEN PRINT 'DIALOGUE'(20,15,30,5,"Processing records....Saving data"),'CS',"Please wait!"; CALL "FO2UAA",X3$,X4$,_KEY$,"*"; PRINT 'POP' ELSE GOTO 5020
5015 Y$="01U FO0... 03U FO2...  "
5016 CALL "ZZFLES",X3$,Y1$,Y0$,Y$,Z{ALL},Z0,Z1
5017 OK_TO_PROCESS=0
5020 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9750 REM "FILES
9760 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
9790 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 SELL_QTY_PER$=STR(SELL_QTY_PER)
10030 QTY_SHIPPED$=STR(QTY_SHIPPED)
10040 FMS_PRICE$=STR(FMS_PRICE)
10050 FMS_EXTENDED_VALUE$=STR(FMS_EXTENDED_VALUE)
10060 SELL_PRICE$=STR(SELL_PRICE)
10070 SELL_EXTENDED_VALUE$=STR(SELL_EXTENDED_VALUE)
10080 NET_SALE$=STR(NET_SALE)
10090 PRORATED_FRT$=STR(PRORATED_FRT)
10100 PRORATED_STAX$=STR(PRORATED_STAX)
10110 PRORATED_SPEC_CHG$=STR(PRORATED_SPEC_CHG)
10120 UNIT_PRICE_BILLED$=STR(UNIT_PRICE_BILLED)
10130 UNITS_PER_PACK$=STR(UNITS_PER_PACK)
10140 UNITS_PER_PACK_UNIT$=STR(UNITS_PER_PACK_UNIT)
10150 CNT_FROM_LOTS$=STR(CNT_FROM_LOTS)
10160 FMZ_UNUSED_4$=STR(FMZ_UNUSED_4)
10170 RETURN 
10510 SELECT_LINE:
10520 LIST_BOX READ ORDER_LINE.CTL,IDX
10530 LIST_BOX FIND ORDER_LINE.CTL,IDX,ORDER_LINE$
10540 LINE_NUMBER$=ORDER_LINE$(1,3); REM LINE_NUM$=ORDER_LINE$(1,POS(SEP=ORDER_LINE$)-1); IF POS($1B53461B4233$=LINE_NUM$)<>0 THEN LINE_NUM$=LINE_NUM$(7)
10550 KEY_FO2$=FO2_KEY_F$+PAD(STP(LINE_NUMBER$),3,0,"0",ERR=*NEXT)
10560 READ (Z[3],KEY=KEY_FO2$,DOM=*NEXT)IOL=0155
10570 GOSUB LOAD_LINE_INFO
10580 CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
10590 CALL "*wingrp;Enable",BUTTONS2.GRP$
10595 NEXT_ID=LINE_TYPE.CTL
10600 RETURN 
10710 LOAD_LINE_INFO:
10720 LINE_NUM$=PAD(STP(FO2$(31,3)),3,0,"0",ERR=*NEXT)
10725 IF FO2$(34,1)=" " THEN FO2$(34,1)="B"
10730 LINE_TYPE$=FO2$(34,1),ITEM_CODE$=FO2$(45,10),ITEM_DESC$=FO2$(73,40)
10740 SHIP_FROM_WHSE$=FO2$(117,4),UM$=FO2$(113,4),QTY$=STR(FO2[0])
10745 FROM_CUST_DIV$=FO2$(35,2),FROM_CUST_CODE$=FO2$(37,8) ! SSP258736
10750 REFRESH_FLG=1
10800 RETURN 
10810 LOAD_TO_FILE:
10815 IF STP(KEY_FO2$)="" THEN GOTO 10850
10817 IF LINE_TYPE$="B" THEN LINE_TYPE$=" "
10819 FO2$(1,30)=_KEY$,FO2$(31,3)=LINE_NUM$
10820 FO2$(34,1)=LINE_TYPE$,FO2$(45,10)=ITEM_CODE$,FO2$(73,40)=ITEM_DESC$
10830 FO2$(117,4)=SHIP_FROM_WHSE$,FO2$(113,4)=UM$,FO2[0]=NUM(QTY$)
10835 FO2$(35,10)=FROM_CUST_DIV$+FROM_CUST_CODE$ ! SSP258736
10840 REFRESH_FLG=1
10850 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="SELL_QTY_PER",_X=SELL_QTY_PER.CTL,SELL_QTY_PER=NUM(SELL_QTY_PER$,ERR=NON_NUMERIC)
11030 _X$="QTY_SHIPPED",_X=QTY_SHIPPED.CTL,QTY_SHIPPED=NUM(QTY_SHIPPED$,ERR=NON_NUMERIC)
11040 _X$="FMS_PRICE",_X=FMS_PRICE.CTL,FMS_PRICE=NUM(FMS_PRICE$,ERR=NON_NUMERIC)
11050 _X$="FMS_EXTENDED_VALUE",_X=FMS_EXTENDED_VALUE.CTL,FMS_EXTENDED_VALUE=NUM(FMS_EXTENDED_VALUE$,ERR=NON_NUMERIC)
11060 _X$="SELL_PRICE",_X=SELL_PRICE.CTL,SELL_PRICE=NUM(SELL_PRICE$,ERR=NON_NUMERIC)
11070 _X$="SELL_EXTENDED_VALUE",_X=SELL_EXTENDED_VALUE.CTL,SELL_EXTENDED_VALUE=NUM(SELL_EXTENDED_VALUE$,ERR=NON_NUMERIC)
11080 _X$="NET_SALE",_X=NET_SALE.CTL,NET_SALE=NUM(NET_SALE$,ERR=NON_NUMERIC)
11090 _X$="PRORATED_FRT",_X=PRORATED_FRT.CTL,PRORATED_FRT=NUM(PRORATED_FRT$,ERR=NON_NUMERIC)
11100 _X$="PRORATED_STAX",_X=PRORATED_STAX.CTL,PRORATED_STAX=NUM(PRORATED_STAX$,ERR=NON_NUMERIC)
11110 _X$="PRORATED_SPEC_CHG",_X=PRORATED_SPEC_CHG.CTL,PRORATED_SPEC_CHG=NUM(PRORATED_SPEC_CHG$,ERR=NON_NUMERIC)
11120 _X$="UNIT_PRICE_BILLED",_X=UNIT_PRICE_BILLED.CTL,UNIT_PRICE_BILLED=NUM(UNIT_PRICE_BILLED$,ERR=NON_NUMERIC)
11130 _X$="UNITS_PER_PACK",_X=UNITS_PER_PACK.CTL,UNITS_PER_PACK=NUM(UNITS_PER_PACK$,ERR=NON_NUMERIC)
11140 _X$="UNITS_PER_PACK_UNIT",_X=UNITS_PER_PACK_UNIT.CTL,UNITS_PER_PACK_UNIT=NUM(UNITS_PER_PACK_UNIT$,ERR=NON_NUMERIC)
11150 _X$="CNT_FROM_LOTS",_X=CNT_FROM_LOTS.CTL,CNT_FROM_LOTS=NUM(CNT_FROM_LOTS$,ERR=NON_NUMERIC)
11160 _X$="FMZ_UNUSED_4",_X=FMZ_UNUSED_4.CTL,FMZ_UNUSED_4=NUM(FMZ_UNUSED_4$,ERR=NON_NUMERIC)
11170 RETURN 
11500 FIND_FO2_LINES:! Find FO2 lines 
11502 GOSUB CLEAR_FO2_LINES
11505 LIST_COUNT=0
11510 DIM FO2$(230),FO2[1]
11512 IF STP(CUSTOMER$)="" THEN CUSTOMER$=CUST_DIV$+CUST_CODE$
11515 FO2_KEY_F$=CUSTOMER$+LOC_CODE$+REQ_NUM$+SEQ_NUM$
11520 READ (Z[3],KEY="",DOM=*NEXT)
11530 FO2_KEY$=KEY(Z[3],END=11591)
11540 READ (Z[3],KEY=FO2_KEY$)IOL=0155
11560 IF FO2_KEY$(1,30)=FO2_KEY_F$ THEN {
11570 LOAD_LINE$=FO2$(31,3)+SEP+FO2$(34,1)+SEP+FO2$(45,10)+SEP+FO2$(73,40)+SEP+FO2$(113,4)+SEP+STR(FO2[0]:"###,###,###.00-")
11573 LIST_BOX LOAD ORDER_LINE.CTL,0,LOAD_LINE$
11575 LIST_COUNT=LIST_COUNT+1
11577 ADD_REC_NUM$=FO2$(31,3)
11580  } ! SSP242473 jdf
11590 GOTO 11530 ! SSP242473 jdf
11595 CUSTOMER$=_KEY$(1,10),LOC_CODE$=_KEY$(11,4),REQ_NUM$=_KEY$(15,15),SEQ_NUM$=_KEY$(30,1)
11600 RETURN ! SSP242473 jdf
11700 DEL_FO2_LINES:! Remove FO2 lines 
11720 IF ID$="BT_DELETE1" THEN REMOVE (Z[3],KEY=_KEY$+LINE_NUM$,ERR=11795); GOTO 11795 ELSE FO2_KEY_D$=_KEY$
11725 DIM FO2$(230),FO2[1]
11730 READ (Z[3],KEY="",DOM=*NEXT)
11740 FO2_KEY$=KEY(Z[3],END=11800)
11750 READ (Z[3],KEY=FO2_KEY$)IOL=0155
11760 IF FO2_KEY$(1,30)=FO2_KEY_D$ THEN {
11770 REMOVE (Z[3],KEY=FO2_KEY$,DOM=*NEXT)
11780  }
11790 GOTO 11740
11795 GOSUB FIND_FO2_LINES
11796 LINE_NUM$="",LINE_TYPE$="",ITEM_CODE$="",ITEM_DESC$="",SHIP_FROM_WHSE$="",UM$="",QTY$="",QTY=0,FROM_CUST_DIV$="",FROM_CUST_CODE$="" ! SSP258736
11797 CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
11798 CALL "*wingrp;Disable",BUTTONS2.GRP$
11800 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN CUST_DIV$="",CUSTOMER$=""
13030 IF _CLR_FLG$="R" THEN CUST_CODE$=""
13040 IF _CLR_FLG$="R" THEN REQ_NUM$=""
13050 IF _CLR_FLG$="R" THEN LOC_CODE$=""
13060 IF _CLR_FLG$="R" THEN ITEM_CODE$=""
13080 IF _CLR_FLG$="R" THEN SEQ_NUM$=""
13085 BT_DIST.CTL'TEXT$="&Distributor",BT_CUST.CTL'TEXT$="&Customer",BT_DIST.CTL'BACKCOLOR$="Default",BT_CUST.CTL'BACKCOLOR$="Default"
13090 ATTN_NAME$=""
13095 FROM_CUST_DIV$="",FROM_CUST_CODE$="" ! SSP258736
13100 ITEM_CUST_DIV$=""
13110 ITEM_CUST_CODE$=""
13120 ITEM_DESC$=""
13130 NEEDED_BY$="",STAX_CODE$="",LINE_TYPE$=""
13140 FROM_LOC$=""
13150 SHIP_VIA_DESC$=""
13160 LINE_NUM$=""
13170 ITEM_CODE$="",ITEM_DESC$=""
13180 ORDER_NUM$=""
13190 REQ_ON_HOLD$=""
13200 REQ_DATE$=""
13210 SHIP_VIA_CODE$=""
13220 AUDIT_NUM$=""
13230 ORDER_DATE$=""
13240 ORDER_LINE_NUM$=""
13250 LOTTED_INV_ITEM$=""
13260 MEMO_REFERENCE$=""
13270 FMZ_UNUSED_1$=""
13280 VEND_DIV$="",VENDOR$="",%VEND_NAME$=""
13290 SHIP_FROM_WHSE$=""
13300 UM$=""
13310 QTY=0,QTY$=""
13320 EXT_DOESNT_MATH_OUT$=""
13330 INV_NUM$=""
13340 INV_DATE$=""
13350 STARTING_NUM$=""
13360 ENDING_NUM$=""
13370 REC_STAT$=""
13380 FMS_FISCAL_YEAR_PER$=""
13390 REC_REPORT$=""
13400 PO_DIV_DETAIL$=""
13410 PO_NUM_DETAIL$=""
13420 PO_DATE$=""
13430 FACTORY_JOB_NUM$=""
13440 BIN_LOC$=""
13450 PRIMARY_UM$=""
13460 PACKAGING_UM$=""
13470 CUST_CMNT$=""
13480 RECVD_AUDIT_NUM$=""
13490 RELEASED_ON_INV_NUM$=""
13500 RELEASED_ACN$=""
13510 COST_CENTER_CODE_1$=""
13520 FMZ_UNUSED_2$=""
13530 CUST_PO_FROM_LOT$=""
13540 RECVG_DEPT$=""
13550 BILLING_DEPT$=""
13560 CUST_SERV_REP$=""
13570 BUYER_ID$=""
13580 FMZ_UNUSED_3$=""
13582 ORDERED_BY$="" ! WO220977
13583 CUST_PO_TP$="" ! WO220977
13584 CONTRACT_PRICE$="" ! WO220977
13585 LOT_RECEIPT_DATE$="" ! WO220977
13586 FMZ_UNUSED_5$="" ! WO220977
13590 SELL_QTY_PER=0
13600 QTY_SHIPPED=0
13610 FMS_PRICE=0
13620 FMS_EXTENDED_VALUE=0
13630 SELL_PRICE=0
13640 SELL_EXTENDED_VALUE=0
13650 NET_SALE=0
13660 PRORATED_FRT=0
13670 PRORATED_STAX=0
13680 PRORATED_SPEC_CHG=0
13690 UNIT_PRICE_BILLED=0
13700 UNITS_PER_PACK=0
13710 UNITS_PER_PACK_UNIT=0
13720 CNT_FROM_LOTS=0
13730 FMZ_UNUSED_4=0
13740 LINE_TYPE$="B"
13742 %LINE_TYPE_VALUES$=%LINE_TYPE_VALUES$+"B"
13744 %LINE_TYPE_LIST$+=MSG("LINE_TYP_B")+"|"
13746 IF LINE_TYPE.CTL<>0 THEN LINE_TYPE.CTL'TBL$=%LINE_TYPE_VALUES$ ! SSP208671
13748 DROP_BOX LOAD LINE_TYPE.CTL,"",ERR=*NEXT; DROP_BOX LOAD LINE_TYPE.CTL,%LINE_TYPE_LIST$,ERR=*NEXT
13750 DROP_BOX WRITE LINE_TYPE.CTL,POS(LINE_TYPE$=%LINE_TYPE_VALUES$),ERR=*NEXT
13752 REFRESH_FLG=1
13800 CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
13805 CALL "*wingrp;Disable",BUTTONS2.GRP$
13807 CALL "*wingrp;Disable",FIELDS2.GRP$
13810 GOSUB NUM_TO_STR
13975 CLEAR_FO2_LINES:
13981 IF LIST_COUNT=0 THEN GOTO 13990
13982 FOR I=LIST_COUNT TO 1 STEP -1
13985 LIST_BOX LOAD ORDER_LINE.CTL,I,*,ERR=13990
13987 NEXT I
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 REM IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUST_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 REM IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=LOC_CODE.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 REM IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=REQ_NUM.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14060 REM IF _ENABLE_FLG=5 THEN CALL "*wingrp;Enable",KEY5.GRP$; NEXT_ID=REQ_NUM.CTL ELSE CALL "*wingrp;Disable",KEY5.GRP$
14070 REM IF _ENABLE_FLG=6 THEN CALL "*wingrp;Enable",KEY6.GRP$; NEXT_ID=ACTIVITY_DATE.CTL ELSE CALL "*wingrp;Disable",KEY6.GRP$
14080 REM IF _ENABLE_FLG=7 THEN CALL "*wingrp;Enable",KEY7.GRP$; NEXT_ID=SEQ_NUM.CTL ELSE CALL "*wingrp;Disable",KEY7.GRP$
14970 REM IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14972 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",BUTTONS.GRP$
14980 REM IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14982 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",BUTTONS.GRP$
14985 REFRESH_FLG=1
14990 RETURN 
15000 CK_BUTTON:
15010 IF LOC_TYPE$="C" THEN BT_CUST.CTL'BACKCOLOR$="Light Cyan",BT_DIST.CTL'BACKCOLOR$="Default" ELSE BT_CUST.CTL'BACKCOLOR$="default",BT_DIST.CTL'BACKCOLOR$="Light Cyan"
15020 ! IF LOC_TYPE$="C" THEN BT_CUST.CTL'TEXT$="{!Arrow_Right}&Customer",BT_DIST.CTL'TEXT$="&Distributor" ELSE BT_CUST.CTL'TEXT$="&Customer",BT_DIST.CTL'TEXT$="{!Arrow_Right}&Distributor"
15030 RETURN 
17500 QRY_FO0: VAL$=""
17510 PROCESS "QRY_FO0","../FOG/FO.EN",VAL$
17520 IF VAL$="" THEN GOTO *RETURN
17525 GOSUB CLEAR_FO2_LINES
17530 _KEY$=VAL$,CUSTOMER$=VAL$(1,10),LOC_CODE$=VAL$(11,4),REQ_NUM$=VAL$(15,15),SEQ_NUM$=VAL$(30,1)
17535 CALL "*wingrp;Enable",FIELDS2.GRP$
17540 READ (Z[1],KEY=_KEY$)
17550 GOSUB PROCESS_READ
17560 NEXT_ID=ORDER_LINE.CTL,REFRESH_FLG=1
17570 RETURN 
17600 ADD_LINES:
17605 GOSUB LOAD_LINE_TYPES
17610 LINE_NUM$=STR((NUM(ADD_REC_NUM$)+1):"000"),LINE_TYPE$="",ITEM_CODE$="",ITEM_DESC$="",SHIP_FROM_WHSE$="",UM$="",QTY$="",QTY=0
17615 FROM_CUST_DIV$="",FROM_CUST_CODE$="" ! SSP258736
17620 FO2$(31,3)=LINE_NUM$
17630 KEY_FO2$=_KEY$(1,30)+LINE_NUM$
17640 REFRESH_FLG=1
17650 CALL "*wingrp;Enable",FIELDS.GRP$
17660 CALL "*wingrp;Enable",BUTTONS2.GRP$
17670 NEXT_ID=ITEM_CODE.CTL
17700 RETURN 
17800 RE_ENTER_LINE:! Line Type has been changed
17810 ITEM_CODE$="",ITEM_DESC$="",SHIP_FROM_WHSE$="",UM$="",QTY$="",QTY=0
17820 REFRESH_FLG=1
17830 RETURN 
20500 ! Item Query
20510 ITEM_QUERY:
20515 VAL$=""
20520 IF LINE_TYPE$="I" THEN %ITEM_CUST$="          "; PROCESS "QRY_IC0.1.4","../ICG/IC.EN",VAL$; IF NUL(VAL$) THEN RETURN ELSE QRY_VAL$=VAL$
20530 IF LINE_TYPE$="C" THEN %ITEM_CUST$=CUSTOMER$; PROCESS "QRY_IC0.1.4","../ICG/IC.EN",VAL$; IF NUL(VAL$) THEN RETURN ELSE QRY_VAL$=VAL$
20540 IF LINE_TYPE$="X" THEN %ITEM_CUST$=FO5$(11,10); PROCESS "QRY_IC0.1.4","../ICG/IC.EN",VAL$; IF NUL(VAL$) THEN RETURN ELSE QRY_VAL$=VAL$
20550 REM IF LINE_TYPE$="S" THEN PROCESS "QRY_FMPX","../FMG/FM.EN",VAL$; IF NUL(VAL$) THEN RETURN ELSE QRY_VAL$=VAL$
20580 REFRESH_FLG=1
20590 RETURN 
21000 ! ITEM INFORMATION
21010 ITEM_INFO:
21013 DIM IC0[40]
21015 IF NUL(ITEM_CODE$) THEN ITEM_CODE$=""; NEXT_ID=ITEM_CODE.CTL; REFRESH_FLG=1; RETURN 
21017 IF LEN(ITEM_CODE$)<10 THEN ITEM_CODE$=PAD(ITEM_CODE$,10,1," ")
21020 IF LINE_TYPE$="I" THEN {
21030 READ (Z[7],KEY="          "+ITEM_CODE$,DOM=INVALID_ITEM)IOL=0188
21035 FROM_CUST_DIV$=DIM(2),FROM_CUST_CODE$=DIM(8) ! SSP258736
21040 ITEM_DESC$=IC0$(21,40); PROD_CODE$=IC0$(61,3)
21050 LEFT_RIGHT$=IC0$(64,8); TOP_BOTTOM$=IC0$(72,8)
21060 PLYS$=IC0$(80,2); UM$=IC0$(120,4)
21070 QTY_PER_UNIT=IC0[14]; UNIT_SELL_PRICE=IC0[0]
21075 REM IF IC0[15]=0 THEN UNIT_COST=0 ELSE UNIT_COST=IC0[18]*IC0[14]/IC0[15]
21080 REM IF STAX_CODE$=DIM(10) AND AR1$(235,10)<>DIM(10) THEN STAX_CODE$=AR1$(235,10)
21100  }
21110 IF LINE_TYPE$="C" THEN {
21120 READ (Z[7],KEY=CUSTOMER$+ITEM_CODE$,DOM=INVALID_ITEM)IOL=0188
21125 FROM_CUST_DIV$=CUSTOMER$(1,2),FROM_CUST_CODE$=CUSTOMER$(3,8) ! SSP258736
21130 ITEM_DESC$=IC0$(21,40); PROD_CODE$=IC0$(61,3)
21140 LEFT_RIGHT$=IC0$(64,8); TOP_BOTTOM$=IC0$(72,8)
21150 PLYS$=IC0$(80,2); UM$=IC0$(120,4)
21160 QTY_PER_UNIT=IC0[14]; UNIT_SELL_PRICE=IC0[0]
21165 REM IF IC0[15]=0 THEN UNIT_COST=0 ELSE UNIT_COST=IC0[18]*IC0[14]/IC0[15]
21170 REM IF STAX_CODE$=DIM(10) AND AR1$(235,10)<>DIM(10) THEN STAX_CODE$=AR1$(235,10); REM SSP 219276
21180  }
21186 IF LINE_TYPE$="X" THEN {
21188 READ (Z[7],KEY=FO5$(11,10)+ITEM_CODE$,DOM=INVALID_ITEM)IOL=0188
21189 FROM_CUST_DIV$=FO5$(11,2),FROM_CUST_CODE$=FO5$(13,8) ! SSP258736
21190 ITEM_DESC$=IC0$(21,40); PROD_CODE$=IC0$(61,3)
21192 LEFT_RIGHT$=IC0$(64,8); TOP_BOTTOM$=IC0$(72,8)
21194 PLYS$=IC0$(80,2); UM$=IC0$(120,4)
21196 QTY_PER_UNIT=IC0[14]; UNIT_SELL_PRICE=IC0[0]
21198  }
21200 RETURN 
21810 INVALID_ITEM:
21820 MSGBOX MSG("INVA_ITEM"),MSG("INFO"),"!"
21830 ITEM_CODE$=""
21835 FROM_CUST_DIV$="",FROM_CUST_CODE$="" ! SSP258736
21840 NEXT_ID=ITEM_CODE.CTL
21880 REFRESH_FLG=1
21890 RETURN 
27700 LOAD_LINE_TYPES:! Load line types
27705 %LINE_TYPE_LIST$="",%LINE_TYPE_VALUES$="C"; DIM AR1$(600),FO5$(121)
27710 READ (Z[5],KEY=CUSTOMER$,DOM=*NEXT)AR1$
27715 READ (Z[12],KEY=CUSTOMER$,DOM=*NEXT)FO5$
27720 IF FO5$(75,1)="Y" THEN %LINE_TYPE_VALUES$=%LINE_TYPE_VALUES$+"I"
27730 IF POS(" "<>FO5$(11,10))>0 THEN %LINE_TYPE_VALUES$=%LINE_TYPE_VALUES$+"X"
27750 FOR II=1 TO LEN(%LINE_TYPE_VALUES$)
27760 %LINE_TYPE_LIST$+=MSG("LINE_TYP_"+STP(%LINE_TYPE_VALUES$(II,1)))+"|"
27770 NEXT II
27773 REM IF STP(%LINE_TYPE_LIST$)="" THEN %LINE_TYPE_LIST$=MSG("LINE_TYP_C")+"|"; LINE_TYPE$="C"
27775 IF LINE_TYPE.CTL<>0 THEN LINE_TYPE.CTL'TBL$=%LINE_TYPE_VALUES$ ! SSP208671
27780 DROP_BOX LOAD LINE_TYPE.CTL,"",ERR=*NEXT; DROP_BOX LOAD LINE_TYPE.CTL,%LINE_TYPE_LIST$,ERR=*NEXT
27782 DROP_BOX WRITE LINE_TYPE.CTL,POS(LINE_TYPE$=%LINE_TYPE_VALUES$),ERR=*NEXT
27793 REFRESH_FLG=1
27794 ORDER$=ORDER_DIV$+ORDER_NUM$
27795 RETURN 
28500 POST_WHSE:! check whse entered
28502 BAD_WHSE=0
28505 REFRESH_FLG=1
28510 IF LINE_TYPE$="I" AND SHIP_FROM_WHSE$>"8999" THEN MSGBOX MSG("FMGODB_59"),MSG("MB_ATTN"),"!"; GOTO WHSE_BAD
28525 RETURN 
28595 WHSE_BAD:
28596 BAD_WHSE=1; NEXT_ID=SHIP_FROM_WHSE.CTL; EXIT 
28600 LOAD_BLANK_LINE:
28610 LINE_NUM$=STR((LIST_COUNT):"000"),LINE_TYPE$="B",ITEM_CODE$="",ITEM_DESC$="",SHIP_FROM_WHSE$="",UM$="",QTY$="",QTY=0
28615 FROM_CUST_DIV$="",FROM_CUST_CODE$="" ! SSP258736
28620 REM %LINE_TYPE_VALUES$=%LINE_TYPE_VALUES$+"B"
28630 REM %LINE_TYPE_LIST$+=MSG("LINE_TYP_B")+"|"
28640 REM IF LINE_TYPE.CTL<>0 THEN LINE_TYPE.CTL'TBL$=%LINE_TYPE_VALUES$ ! SSP208671
28650 REM DROP_BOX LOAD LINE_TYPE.CTL,"",ERR=*NEXT; DROP_BOX LOAD LINE_TYPE.CTL,%LINE_TYPE_LIST$,ERR=*NEXT
28660 REM DROP_BOX WRITE LINE_TYPE.CTL,POS(LINE_TYPE$=%LINE_TYPE_VALUES$),ERR=*NEXT
28665 CALL "*wingrp;Disable",FIELDS.GRP$
28670 REFRESH_FLG=1
28680 RETURN 
56000 REM "220977-Add new field, Lot Receipt Date, to FMZ file, modify updates
56002 REM "258736-GUI Order Req GW Maintenance needs logic for C type line to 
