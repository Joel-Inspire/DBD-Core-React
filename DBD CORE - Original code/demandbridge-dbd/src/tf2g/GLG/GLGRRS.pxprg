0010 ! GLGRAS - G/L Trial Balance Report 
0035 REM "5.5 - 09/10/07 - 11.458055 - jdf - SSP# 211380
0037 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
0040 REM "Copyright 2007 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0045 PROCESS "GLGRRS","../GLG/GL.EN"
0050 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0155 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
0160 _FILE_NAME$="ZZS"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0182 _GL2=HFN; OPEN (_GL2,ERR=OPEN_ERR)"GL2"+%C$
0183 _GL5=HFN; OPEN (_GL5,ERR=OPEN_ERR)"GL5"+%C$
0184 _GL6=HFN; OPEN (_GL6,ERR=OPEN_ERR)"GL6"+%C$; NOREC$=FN%FIN$(_GL6,"NUMREC"); IF NUM(NOREC$) THEN MSGBOX MSG("GL6_MSG")+SEP+MSG("GLGRRS_ME"),MSG("WARNING"),"?,OK,CANCEL",OPT$; IF OPT$="CANCEL" THEN CMD_STR$="END"; GOTO *RETURN
0185 _GLR=HFN; OPEN (_GLR,ERR=OPEN_ERR)"GLR"+%C$
0186 _ZZPARM=HFN; OPEN (_ZZPARM,ERR=OPEN_ERR)"ZZPARM"; FIND (_ZZPARM,KEY=FID(0)+"      ")X3$,*,X4$; FIND (_ZZPARM,KEY=%C$+"G/L")GLREC$
0188 GLACCT_MASK$=%GLACCT_MASK$
0190 XXX=POS("0"=GLACCT_MASK$); IF XXX<>0 THEN GLACCT_MASK$(XXX,1)="X"; GOTO 0190
0199 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="PRG_NAME$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 ARG_1$="GL2RAA            "
0536 DIM RNG(4)
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT)A$,R0$,W$,RNG{ALL}; GOTO 0560
0551 DIM A$(78),R0$(128),W$(25),RNG(4)
0560 A$(78,1)=GLREC$(40,1) ! IF A$(78,1)=" " THEN A$(78,1)=GLREC$(40,1)
0562 B_START_FISCAL$=START_FISCAL$,B_START_ACCTPD$=START_ACCTPD$,B_END_ACCTPD$=END_ACCTPD$
0563 PERFORM "GLGMDA;LOAD_FISCAL_YEAR"; LIST_BOX LOAD END_ACCTPD.CTL,START_ACCTPD$; IF B_START_FISCAL$<>"" THEN START_FISCAL$=B_START_FISCAL$,START_ACCTPD$=B_START_ACCTPD$,END_ACCTPD$=B_END_ACCTPD$
0570 GOSUB ASSIGN_LIB; GOSUB SEL_SOURCE_JR; GOSUB GET_FY_DATES; GOSUB CHECK_GLR
0580 IF GLREC$(40,1)+GLREC$(180,1)="CY" THEN CALL "*WINGRP;SHOW",ACRU.GRP$
0590 CALL "ZZWLKU;gl_acct_fmt",GL_START$,DESC1$; DESC1$=%GL_ACCT_DESC$
0600 CALL "ZZWLKU;gl_acct_fmt",GL_END$,DESC2$; DESC2$=%GL_ACCT_DESC$
0899 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0941 IF _GL2 THEN CLOSE (_GL2); _GL2=0
0942 IF _GL5 THEN CLOSE (_GL5); _GL5=0
0943 IF _GL6 THEN CLOSE (_GL6); _GL6=0
0944 IF _GLR THEN CLOSE (_GLR); _GLR=0
0945 IF _ZZPARM THEN CLOSE (_ZZPARM); _ZZPARM=0
0946 IF ZZP THEN CLOSE (ZZP); ZZP=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$; _KEY$=STP(_KEY$,1)
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$; _KEY$=STP(_KEY$,1)
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 _YESNO$="YES" ! MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:! IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=*NEXT)A$,R0$,W$,RNG{ALL}; CHANGE_FLG=0; GOTO 3360
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3805 GOSUB ASSIGN_PRG
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=PRG_NAME.CTL,_FIRST_FIELD=RPT_SELEC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRT
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 RPT_NUM1$=STR(RPT_NUM1)
10030 RPT_NUM2$=STR(RPT_NUM2)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="RPT_NUM1",_X=RPT_NUM1.CTL,RPT_NUM1=NUM(RPT_NUM1$,ERR=NON_NUMERIC)
11030 _X$="RPT_NUM2",_X=RPT_NUM2.CTL,RPT_NUM2=NUM(RPT_NUM2$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
17000 SEL_SOURCE_JR:
17010 IF ML_SOURCE_JOUR$="" THEN GOTO *RETURN
17020 FIND (_GL5,KEY=ML_SOURCE_JOUR$,ERR=*NEXT)_GL5$; ML_SRC_JRNL_DESC$=_GL5$(3,30); GOTO NXT_STEP
17030 ML_SRC_JRNL_DESC$="****** "+MSG("REC_NOTFND")+" ******"; NEXT_ID=ML_SOURCE_JOUR.CTL
17040 NXT_STEP: REFRESH_FLG=1
17050 RETURN 
17100 GET_FY_DATES:
17102 IF _ZZPARM=0 THEN _ZZPARM=HFN; OPEN (_ZZPARM,ERR=OPEN_ERR)"ZZPARM"
17105 IF STP(START_FISCAL$)="" OR LEN(START_FISCAL$)>4 THEN START_FISCAL$=CR_YEAR$
17106 IF LEN(START_ACCTPD$)>2 THEN START_ACCTPD$=CR_PD$
17107 IF START_FISCAL$="" THEN START_FISCAL$=FY$,START_ACCTPD$=ACCTPD$,START_FISCAL.CTL=FY.CTL,START_ACCTPD.CTL=ACCTPD.CTL; IF LEN(START_ACCTPD$)>2 THEN START_ACCTPD$="01"
17108 IF STP(START_FISCAL$)="" THEN START_FISCAL$=CUR_FY$
17110 FIND (_ZZPARM,KEY=%C$+"G/LYE"+START_FISCAL$)REC_DAT$; PER_LEN=NUM(REC_DAT$(13,2)),REC_DAT$=REC_DAT$(21),BB$="",MM$="",CUR_DATE$=REC_DAT$
17120 DIM CUR_DATE$[PER_LEN]
17121 IF STP(END_ACCTPD$)="" THEN END_ACCTPD$="01"
17125 IF NUM(START_ACCTPD$)>PER_LEN THEN START_ACCTPD$="01"
17126 IF STP(START_ACCTPD$)="" THEN START_ACCTPD$=CUR_ACCTPD$
17127 IF X3$="" THEN X3$=%X3$
17130 FOR XX=1 TO PER_LEN; CUR_DATE$[XX]=FND$(REC_DAT$(XX*6-5,6))
17135 X$=STR(XX:"00"),FLAG$="NO"; CALL "ARGDTE",%X3$,%X4$,START_FISCAL$+X$,FLAG$; IF FLAG$<>"*" THEN BB$+=STR(XX:"00")+"/"
17136 NEXT XX
17140 ML_DTE_1$=CUR_DATE$[NUM(START_ACCTPD$)],ML_DTE_2$=CUR_DATE$[NUM(END_ACCTPD$)],REFRESH_FLG=1
17150 DROP_BOX LOAD START_ACCTPD.CTL,BB$,ERR=*NEXT
17160 DROP_BOX WRITE START_ACCTPD.CTL,START_ACCTPD$,ERR=*NEXT
17200 RETURN 
17500 CHECK_GLR:
17505 RETURN 
17510 RECNO$=FN%FIN$(_GLR,"NUMREC"); IF NUM(RECNO$)=0 THEN GOTO *RETURN
17520 IF START_FISCAL$+START_ACCTPD$>GLREC$(250,6) THEN MSGBOX MSG("GLR_MSG")+" "+MSG("LAST_UP")+"("+GLREC$(250,4)+"/"+GLREC$(254,2)+")","","!,OK,CANCEL",OPT$; IF OPT$="CANCEL" THEN CMD_STR$="END"; GOTO *RETURN
17599 RETURN 
20000 VIEW_REPORT:
20005 PRINT_REPORT:
20010 ! View Report Routine.
20020 IOLIST A$
20030 IOLIST R0$,W$
20040 ZZP=HFN
20050 OPEN (ZZP,ERR=OPEN_ERR)"ZZP"
20060 ! 
20070 IF ID$="RPT_VEIW" THEN RPT_OUTDEV$="PV"
20080 IF CHANGE_FLG THEN GOSUB CHECK_CHANGES ELSE GOSUB ASSIGN_PRG
20260 K$=X3$(1,8),T1$="GL1...",%GUI=1
20267 %B_WINDATE_FMT$=%WINDATE_FMT$,%WINDATE_FMT$="YYYYMMDD",JJ$=DTE(0:"%Yl%Mz%Dz"); CALL "ZZWDTE;VALIDATE",JJ$,JJJ$,JJJJ$; X3$(21,6)=JJ$
20270 WRITE (ZZP,KEY=K$)X3$,X4$,T1$,R0$,W$,A$
20271 PRINT 'CURSOR'(1)
20280 CALL "GL2RAA"
20281 PRINT 'CURSOR'(0)
20285 CMD_STR$="END"
20290 RETURN 
22000 ASSIGN_LIB:
22020 ! Output Option
22030 IF NUM(A$(71,1))=0 THEN A$(71,1)="1"
22120 PRT_MODE$=R0$(1,1),RPT_OUTDEV$=R0$(2,2)
22130 RPT_VERT$=R0$(9,1),RPT_HORIZ$=R0$(10,1)
22140 RPT_AUX1$=R0$(11,1),RPT_AUX2$=R0$(12,1)
22160 RPT_LINES$=R0$(15,2),RPT_FORMCODE$=R0$(17,1)
22170 RPT_JOBCARD$=R0$(65,60),RPT_JOBCARD_FLG$=R0$(125,1)
22180 RPT_AUX3$=R0$(13,1),RPT_AUX4$=R0$(14,1)
22500 ! Selection Options
22510 RPT_SELEC$=A$(7,12),RPT_DESC$=A$(19,40),RPT_OPT$=A$(59,12),RPT_SEQ$=A$(71,1)
22515 IF STP(RPT_OPT$)="" THEN RPT_OPT$=""
22520 IF STP(W$(1,12))="" THEN GL_START$="" ELSE GL_START$=W$(1,12)
22530 IF STP(W$(13,12))="" OR W$(13,12)="~~~~~~~~~~~~" THEN GL_END$="" ELSE GL_END$=W$(13,12)
22535 IF STP(RPT_SELEC$)="" THEN RPT_SELEC$=""
22538 START_FISCAL$=A$(72,4),START_ACCTPD$=A$(76,2),METHODS_TO_UPDATE$=A$(78,1)
22540 REFRESH_FLG=1
22550 RETURN 
23000 ASSIGN_PRG:
23010 A$(1,6)=ARG_1$,A$(7,12)=RPT_SELEC$,A$(19,40)=RPT_DESC$,A$(59,12)=RPT_OPT$,A$(71,1)=RPT_SEQ$
23020 A$(59,12)=RPT_OPT$; A$(71,1)=RPT_SEQ$
23030 ! 
23040 R0$(1,1)=PRT_MODE$; R0$(2,6)=RPT_OUTDEV$(1,2)+"    "
23050 R0$(9,1)=RPT_VERT$; R0$(10,1)=RPT_HORIZ$
23060 R0$(11,1)=RPT_AUX1$; R0$(12,1)=RPT_AUX2$
23070 R0$(13,1)=RPT_AUX3$,R0$(14,1)=RPT_AUX4$
23080 R0$(15,2)=RPT_LINES$; R0$(17,1)=RPT_FORMCODE$
23090 R0$(65,60)=RPT_JOBCARD$; R0$(125,1)=RPT_JOBCARD_FLG$
23100 IF GL_START$="" THEN W$(1,12)=PAD("",12," ") ELSE W$(1,12)=GL_START$
23110 IF GL_END$="" THEN W$(13,12)=PAD("",12,"~") ELSE W$(13,12)=GL_END$
23120 A$(72,6)=START_FISCAL$+START_ACCTPD$,A$(78,1)=METHODS_TO_UPDATE$
23200 RETURN 
30000 SEL_DATE:
30010 IF LEN(START_FISCAL$)>4 THEN TF_YEAR$=%CR_YEAR$ ELSE TF_YEAR$=START_FISCAL$
30020 IF LEN(START_ACCTPD$)>2 THEN PER$=%CR_PD$ ELSE PER$=START_ACCTPD$
56002 REM "205460-Oracle - FIN(CHANNEL,"NUMREC") changed to use FN%FIN$()     
56004 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
