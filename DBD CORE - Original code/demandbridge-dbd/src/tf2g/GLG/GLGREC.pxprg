0010 ! GLGREC - Recurring Journal Entry
0035 REM "5.5 - 08/31/07 - 8.660277 - jdf - SSP# 211380
0037 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
0040 REM "Copyright 2007 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0045 PROCESS "GLGREC","../GLG/GL.EN" ! SSP 195542
0050 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0115 ONLY_OPEN$="1"; PERFORM "GLGMDA;LOAD_FISCAL_YEAR"
0118 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0155 ! CALL "ZZAUDT",ERR=9800,X3$,X0$,Z[1],2
0160 _FILE_NAME$="GLR"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0182 _FILE_NAME$="GL5"+%C$,_GL5=HFN; OPEN (_GL5,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0184 _FILE_NAME$="ZZPARM",_ZZP=HFN; OPEN (_ZZP,ERR=OPEN_ERR)_FILE_NAME$
0186 _FILE_NAME$="GLT"+%C$,_GLT=HFN; OPEN (_GLT,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0188 _FILE_NAME$="GL1"+%C$,_GL1=HFN; OPEN (_GL1,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0190 READ (_ZZP,KEY=%C$+"G/L",DOM=*NEXT)P0$
0191 GLGJRA=1
0199 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="JRNL_REF_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 IF P0$(40,1)+P0$(180,1)="CY" THEN CALL "*WINGRP;SHOW",MTD.GRP$
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0700 ! 700 - Set up tabbing between folders
0710 INIT_FOLDER:
0720 GOSUB ENABLE_GROUPS
0722 IF FOLDER_ID$="GLGREC.1" AND P0$(40,1)+P0$(180,1)="CY" THEN CALL "*WINGRP;SHOW",MTD.GRP$
0725 IF FOLDER_ID$="GLGREC.2" AND JRNL_REF_CODE$="" THEN NEXT_FOLDER=FLDR.GLGREC.1.CTL,NEXT_ID=JRNL_REF_CODE.CTL,REFRESH_FLG=1; RETURN 
0730 IF _ENABLE_FLG<>_KEY1 THEN IF TAB_FLG$="<" THEN NEXT_ID=_LAST_TAB ELSE NEXT_ID=_FIRST_TAB
0740 EXIT 
0900 ! 900 - Wrapup
0910 WRAPUP:
0915 IF FOLDER_ID$="GLGREC.2" THEN GOSUB CHECK_BALANCE; IF ML_DEBIT<>ML_CREDIT THEN MSGBOX ML_BAL$,MSG("WARNING"),"!,TIM=2"; IGNORE_EXIT=1,REFRESH_FLG=1,CMD_STR$="",NEXT_ID=GL_ACCT.CTL; EXIT 
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1011 IF NUM(JRNL_REF_CODE$,ERR=*NEXT)<>0 THEN GOTO 1015
1012 JRNL_REF_CODE$=PAD(JRNL_REF_CODE$,6," "); GOTO 1020
1015 JRNL_REF_CODE$=PAD(JRNL_REF_CODE$,6,0,"0")
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1280 NEXT_FOLDER=_FIRST_FOLDER
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1415 IF FOLDER_ID$="GLGREC.2" THEN GOSUB CHECK_BALANCE; IF ML_DEBIT<>ML_CREDIT THEN MSGBOX ML_BAL$,MSG("WARNING"),"!,TIM=2"; NEXT_ID=GL_ACCT.CTL; RETURN 
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1665 GOSUB DELETE_GLT; NO_WRITE=1
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1815 IF FOLDER_ID$="GLGREC.2" THEN GOSUB WRITE_LINES; NEXT_FOLDER=FLDR.GLGRES.1.CTL; REFRESH_FLG=1
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3015 IF METHODS_TO_UPDATE$="B" THEN METHOD_TO_UPDATE$="CA"
3020 PROCESS_READ:
3022 IF FOLDER_ID$="GLGREC.2" THEN GOSUB CHECK_BALANCE; IF ML_DEBIT<>ML_CREDIT THEN RETURN 
3025 IF FOLDER_ID$="GLGREC.2" THEN XXX$=JRNL_REF_CODE$,JRNL_REF_CODE$=B_JRNL_REF_CODE$; GOSUB WRITE_LINES; GOSUB DEL_LINES; JRNL_REF_CODE$=XXX$
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3051 METHODS_TO_UPDATE$=STP(METHODS_TO_UPDATE$); IF METHODS_TO_UPDATE$="" THEN METHODS_TO_UPDATE$="A",REFRESH_FLG=1
3052 GOSUB PROCESS_GL5; GOSUB SEL_START_FISCAL
3060 CHANGE_FLG=0
3065 IF METHODS_TO_UPDATE$="CA" OR METHODS_TO_UPDATE$="AC" THEN METHOD_TO_UPDATE$="B"
3066 IF FOLDER_ID$="GLGREC.2" THEN GOSUB LOAD_LIST
3067 CHANGE_FLG=0
3068 GOSUB RES_BT
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3325 IF FOLDER_ID$="GLGREC.2" THEN GOSUB WRITE_LINES; NEXT_FOLDER=FLDR.GLGRES.1.CTL; REFRESH_FLG=1
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1; GOSUB CLEAR_FIELDS
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3802 IF FOLDER_ID$="GLGREC.2" THEN GOSUB CHECK_BALANCE; IF ML_DEBIT<>ML_CREDIT THEN MSGBOX ML_BAL$,MSG("WARNING"),"!,TIM=2"; NEXT_ID=GL_ACCT.CTL; EXIT END_IF ; GOTO *RETURN
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=JRNL_REF_CODE.CTL,_FIRST_FIELD=SRC_JRNL.CTL,_FIRST_FOLDER=FLDR.GLGREC.1.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 GLR_UNUSED_2$=STR(GLR_UNUSED_2)
10030 INDEX_TO_LINE_DETAIL$=STR(INDEX_TO_LINE_DETAIL)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="GLR_UNUSED_2",_X=GLR_UNUSED_2.CTL,GLR_UNUSED_2=NUM(GLR_UNUSED_2$,ERR=NON_NUMERIC)
11030 _X$="INDEX_TO_LINE_DETAIL",_X=INDEX_TO_LINE_DETAIL.CTL,INDEX_TO_LINE_DETAIL=NUM(INDEX_TO_LINE_DETAIL$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN JRNL_REF_CODE$=""
13030 SRC_JRNL$="",ML_SRC_JRNL_DESC$="",ML_ENDING_PERIOD$=""
13040 LAST_FY_PROCESSED$=""
13050 LAST_ACCTPD_PROCESSD$=""
13060 ENDING_FY_TO_POST$=""
13070 ENDING_ACCTPD_TO_PST$=""
13080 DESC_LINE_1$=""
13090 DESC_LINE_2$=""
13100 DESC_LINE_3$=""
13110 METHODS_TO_UPDATE$="A"
13120 TRANSACTION_DATE$=""
13130 MEMO_FIELD_BY_LINE$=""
13140 GLR_UNUSED_1$=""
13150 GLR_UNUSED_2=0
13160 INDEX_TO_LINE_DETAIL=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1,NEXT_ID=JRNL_REF_CODE.CTL
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(15,"N")
15030 IF _ORIG.JRNL_REF_CODE$=_CUR.JRNL_REF_CODE$ OR JRNL_REF_CODE$=_CUR.JRNL_REF_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.JRNL_REF_CODE$=JRNL_REF_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("JRNL_R_C")+" = "+_CUR.JRNL_REF_CODE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("JRNL_R_C")+" = "+_CUR.JRNL_REF_CODE$
15040 IF _ORIG.SRC_JRNL$=_CUR.SRC_JRNL$ OR SRC_JRNL$=_CUR.SRC_JRNL$ THEN GOTO *NEXT ELSE IF _ORIG.SRC_JRNL$=SRC_JRNL$ THEN _CHG2$=_CHG2$+SEP+MSG("SRC_JRNL")+" = "+_CUR.SRC_JRNL$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SRC_JRNL")+" = "+_CUR.SRC_JRNL$
15050 IF _ORIG.LAST_FY_PROCESSED$=_CUR.LAST_FY_PROCESSED$ OR LAST_FY_PROCESSED$=_CUR.LAST_FY_PROCESSED$ THEN GOTO *NEXT ELSE IF _ORIG.LAST_FY_PROCESSED$=LAST_FY_PROCESSED$ THEN _CHG2$=_CHG2$+SEP+MSG("LAST_F_P")+" = "+_CUR.LAST_FY_PROCESSED$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_F_P")+" = "+_CUR.LAST_FY_PROCESSED$
15060 IF _ORIG.LAST_ACCTPD_PROCESSD$=_CUR.LAST_ACCTPD_PROCESSD$ OR LAST_ACCTPD_PROCESSD$=_CUR.LAST_ACCTPD_PROCESSD$ THEN GOTO *NEXT ELSE IF _ORIG.LAST_ACCTPD_PROCESSD$=LAST_ACCTPD_PROCESSD$ THEN _CHG2$=_CHG2$+SEP+MSG("LAST_A_P")+" = "+_CUR.LAST_ACCTPD_PROCESSD$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_A_P")+" = "+_CUR.LAST_ACCTPD_PROCESSD$
15070 IF _ORIG.ENDING_FY_TO_POST$=_CUR.ENDING_FY_TO_POST$ OR ENDING_FY_TO_POST$=_CUR.ENDING_FY_TO_POST$ THEN GOTO *NEXT ELSE IF _ORIG.ENDING_FY_TO_POST$=ENDING_FY_TO_POST$ THEN _CHG2$=_CHG2$+SEP+MSG("ENDI_F_T_P")+" = "+_CUR.ENDING_FY_TO_POST$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ENDI_F_T_P")+" = "+_CUR.ENDING_FY_TO_POST$
15080 IF _ORIG.ENDING_ACCTPD_TO_PST$=_CUR.ENDING_ACCTPD_TO_PST$ OR ENDING_ACCTPD_TO_PST$=_CUR.ENDING_ACCTPD_TO_PST$ THEN GOTO *NEXT ELSE IF _ORIG.ENDING_ACCTPD_TO_PST$=ENDING_ACCTPD_TO_PST$ THEN _CHG2$=_CHG2$+SEP+MSG("ENDI_A_T_P")+" = "+_CUR.ENDING_ACCTPD_TO_PST$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ENDI_A_T_P")+" = "+_CUR.ENDING_ACCTPD_TO_PST$
15090 IF _ORIG.DESC_LINE_1$=_CUR.DESC_LINE_1$ OR DESC_LINE_1$=_CUR.DESC_LINE_1$ THEN GOTO *NEXT ELSE IF _ORIG.DESC_LINE_1$=DESC_LINE_1$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC_L_1")+" = "+_CUR.DESC_LINE_1$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC_L_1")+" = "+_CUR.DESC_LINE_1$
15100 IF _ORIG.DESC_LINE_2$=_CUR.DESC_LINE_2$ OR DESC_LINE_2$=_CUR.DESC_LINE_2$ THEN GOTO *NEXT ELSE IF _ORIG.DESC_LINE_2$=DESC_LINE_2$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC_L_2")+" = "+_CUR.DESC_LINE_2$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC_L_2")+" = "+_CUR.DESC_LINE_2$
15110 IF _ORIG.DESC_LINE_3$=_CUR.DESC_LINE_3$ OR DESC_LINE_3$=_CUR.DESC_LINE_3$ THEN GOTO *NEXT ELSE IF _ORIG.DESC_LINE_3$=DESC_LINE_3$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC_L_3")+" = "+_CUR.DESC_LINE_3$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC_L_3")+" = "+_CUR.DESC_LINE_3$
15120 IF _ORIG.METHODS_TO_UPDATE$=_CUR.METHODS_TO_UPDATE$ OR METHODS_TO_UPDATE$=_CUR.METHODS_TO_UPDATE$ THEN GOTO *NEXT ELSE IF _ORIG.METHODS_TO_UPDATE$=METHODS_TO_UPDATE$ THEN _CHG2$=_CHG2$+SEP+MSG("METH_T_U")+" = "+_CUR.METHODS_TO_UPDATE$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("METH_T_U")+" = "+_CUR.METHODS_TO_UPDATE$
15130 IF _ORIG.TRANSACTION_DATE$=_CUR.TRANSACTION_DATE$ OR TRANSACTION_DATE$=_CUR.TRANSACTION_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.TRANSACTION_DATE$=TRANSACTION_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("TRAN_D")+" = "+_CUR.TRANSACTION_DATE$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TRAN_D")+" = "+_CUR.TRANSACTION_DATE$
15140 IF _ORIG.MEMO_FIELD_BY_LINE$=_CUR.MEMO_FIELD_BY_LINE$ OR MEMO_FIELD_BY_LINE$=_CUR.MEMO_FIELD_BY_LINE$ THEN GOTO *NEXT ELSE IF _ORIG.MEMO_FIELD_BY_LINE$=MEMO_FIELD_BY_LINE$ THEN _CHG2$=_CHG2$+SEP+MSG("MEMO_F_B_L")+" = "+_CUR.MEMO_FIELD_BY_LINE$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MEMO_F_B_L")+" = "+_CUR.MEMO_FIELD_BY_LINE$
15150 IF _ORIG.GLR_UNUSED_1$=_CUR.GLR_UNUSED_1$ OR GLR_UNUSED_1$=_CUR.GLR_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.GLR_UNUSED_1$=GLR_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.GLR_UNUSED_1$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.GLR_UNUSED_1$
15160 IF _ORIG.GLR_UNUSED_2=_CUR.GLR_UNUSED_2 OR GLR_UNUSED_2=_CUR.GLR_UNUSED_2 THEN GOTO *NEXT ELSE IF _ORIG.GLR_UNUSED_2=GLR_UNUSED_2 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.GLR_UNUSED_2),_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.GLR_UNUSED_2)
15170 IF _ORIG.INDEX_TO_LINE_DETAIL=_CUR.INDEX_TO_LINE_DETAIL OR INDEX_TO_LINE_DETAIL=_CUR.INDEX_TO_LINE_DETAIL THEN GOTO *NEXT ELSE IF _ORIG.INDEX_TO_LINE_DETAIL=INDEX_TO_LINE_DETAIL THEN _CHG2$=_CHG2$+SEP+MSG("INDE_T_L_D")+" = "+STR(_CUR.INDEX_TO_LINE_DETAIL),_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INDE_T_L_D")+" = "+STR(_CUR.INDEX_TO_LINE_DETAIL)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN JRNL_REF_CODE$=_CUR.JRNL_REF_CODE$
16030 IF _CHG_VAR$(2,1)="Y" THEN SRC_JRNL$=_CUR.SRC_JRNL$
16040 IF _CHG_VAR$(3,1)="Y" THEN LAST_FY_PROCESSED$=_CUR.LAST_FY_PROCESSED$
16050 IF _CHG_VAR$(4,1)="Y" THEN LAST_ACCTPD_PROCESSD$=_CUR.LAST_ACCTPD_PROCESSD$
16060 IF _CHG_VAR$(5,1)="Y" THEN ENDING_FY_TO_POST$=_CUR.ENDING_FY_TO_POST$
16070 IF _CHG_VAR$(6,1)="Y" THEN ENDING_ACCTPD_TO_PST$=_CUR.ENDING_ACCTPD_TO_PST$
16080 IF _CHG_VAR$(7,1)="Y" THEN DESC_LINE_1$=_CUR.DESC_LINE_1$
16090 IF _CHG_VAR$(8,1)="Y" THEN DESC_LINE_2$=_CUR.DESC_LINE_2$
16100 IF _CHG_VAR$(9,1)="Y" THEN DESC_LINE_3$=_CUR.DESC_LINE_3$
16110 IF _CHG_VAR$(10,1)="Y" THEN METHODS_TO_UPDATE$=_CUR.METHODS_TO_UPDATE$
16120 IF _CHG_VAR$(11,1)="Y" THEN TRANSACTION_DATE$=_CUR.TRANSACTION_DATE$
16130 IF _CHG_VAR$(12,1)="Y" THEN MEMO_FIELD_BY_LINE$=_CUR.MEMO_FIELD_BY_LINE$
16140 IF _CHG_VAR$(13,1)="Y" THEN GLR_UNUSED_1$=_CUR.GLR_UNUSED_1$
16150 IF _CHG_VAR$(14,1)="Y" THEN GLR_UNUSED_2=_CUR.GLR_UNUSED_2
16160 IF _CHG_VAR$(15,1)="Y" THEN INDEX_TO_LINE_DETAIL=_CUR.INDEX_TO_LINE_DETAIL
16990 RETURN 
17000 PROCESS_GL5: REFRESH_FLG=1
17010 READ (_GL5,KEY=SRC_JRNL$,DOM=NO_GL5,REC=_GL5$)
17020 ML_SRC_JRNL_DESC$=STP(_GL5.GL_ACCT_DESC$),ML_DESC_LINE5$=MSG("SRC_JRNL")+": "+SRC_JRNL$+"  "+ML_SRC_JRNL_DESC$
17025 IF P0$(40,1)+P0$(180,1)="CY" THEN ML_DESC_LINE5$=ML_DESC_LINE5$+" / "+MSG("METH_T_U")+": "; IF METHODS_TO_UPDATE$="B" THEN DD$=MSG("BOTH") ELSE IF METHODS_TO_UPDATE$="A" THEN DD$=MSG("ACCRUAL") ELSE DD$=MSG("CASH_BASIS") END_IF 
17028 IF P0$(40,1)+P0$(180,1)="CY" THEN ML_DESC_LINE5$=ML_DESC_LINE5$+DD$
17030 RETURN 
17050 NO_GL5:
17060 ML_SRC_JRNL_DESC$="*** "+MSG("NOT_FOUND")+" ***"; IF ID$="SRC_JRNL" THEN NEXT_ID=SRC_JRNL.CTL
17070 RETURN 
17100 PROCESS_GL1: REFRESH_FLG=1; IF ID$="GL_ACCT" AND NUM(GL_ACCT$,ERR=*NEXT)=0 THEN NET_ID=GL_ACCT.CTL,GL_ACCT$=""; RETURN 
17105 GL_ACCT$=PAD(GL_ACCT$,12,"0")
17110 READ (_GL1,KEY=GL_ACCT$,DOM=NO_GL1,REC=_GL1$)
17120 ML_DESC1$=_GL1.GL_ACCT_DESC$
17130 RETURN 
17140 NO_GL1:
17150 ML_DESC1$="*** "+MSG("NOT_FOUND")+" ***"; IF ID$="GL_ACCT" THEN NEXT_ID=GL_ACCT.CTL END_IF ; RETURN 
17200 SEL_LB_LINE:
17210 LIST_BOX READ LB_LINE.CTL,IDX,ERR=*NEXT
17211 SEL_LB_LINE_NXT:
17215 LIST_BOX FIND LB_LINE.CTL,IDX,LN$,ERR=NO_LINE
17218 LN$=LN$+SEP,NO_LINE=0
17220 ML_LINE=NUM(LN$(1,POS(SEP=LN$)-1)),LN$=LN$(POS(SEP=LN$)+1)
17230 GL_ACCT$=LN$(1,POS(SEP=LN$)-1),LN$=LN$(POS(SEP=LN$)+1),GL_ACCT$=STP(GL_ACCT$,3,"-"),GL_ACCT$=PAD(GL_ACCT$,12,"0")
17240 ML_DESC1$=LN$(1,POS(SEP=LN$)-1),LN$=LN$(POS(SEP=LN$)+1)
17250 ML_DEBIT$=LN$(1,POS(SEP=LN$)-1),LN$=LN$(POS(SEP=LN$)+1)
17260 ML_CREDIT$=LN$(1,POS(SEP=LN$)-1),LN$=LN$(POS(SEP=LN$)+1)
17265 ML_MEMO1$=MID(LN$,1,POS(SEP=LN$)-1)
17270 IF NUM(ML_DEBIT$)=0 THEN ML_AMOUNT=-NUM(ML_CREDIT$) ELSE ML_AMOUNT=NUM(ML_DEBIT$)
17290 IF FLAG=0 THEN CALL "*WINGRP;ENABLE",BUTTS.GRP$; FLAG=1
17300 REFRESH_FLG=1,NEXT_ID=GL_ACCT.CTL
17305 IF MEMO_FIELD_BY_LINE$="Y" THEN NEXT_ID=ML_MEMO1.CTL,REFRESH_FLG=1
17320 RETURN 
17330 NO_LINE: NO_LINE=1; RETURN 
17400 SEL_AMOUNT:
17402 IF ML_AMOUNT=0 OR NUM(GL_ACCT$)=0 THEN NEXT_ID=GL_ACCT.CTL,REFRESH_FLG=1; RETURN 
17405 IF ML_AMOUNT<=0 THEN ML_CREDIT=ML_CREDIT+ABS(ML_AMOUNT),ML_CREDIT$=STR(ML_AMOUNT:"###,###,###.00"),ML_DEBIT$="" ELSE ML_DEBIT$=STR(ML_AMOUNT:"###,###,###.00"),ML_CREDIT$="",ML_DEBIT=ML_DEBIT+ML_AMOUNT
17410 ACCT$=FN%ZZDISP$(GL_ACCT$,"G/L"),LN$=STR(IDX:"000")+SEP+ACCT$+SEP+ML_DESC1$+SEP+ML_DEBIT$+SEP+ML_CREDIT$+SEP+ML_MEMO1$
17420 LIST_BOX LOAD LB_LINE.CTL,ML_LINE,*; LIST_BOX LOAD LB_LINE.CTL,ML_LINE,LN$
17430 GOSUB CHECK_BALANCE
17435 ML_AMOUNT=0,ML_LINE=ML_LINE+1,IDX=ML_LINE; GOSUB SEL_LB_LINE_NXT; GOSUB CHECK_BALANCE; NEXT_ID=GL_ACCT.CTL; IF NO_LINE THEN GL_ACCT$="",ML_MEMO1$=""
17438 IF MEMO_FIELD_BY_LINE$="Y" THEN NEXT_ID=ML_MEMO1.CTL,REFRESH_FLG=1
17439 LIST_BOX WRITE LB_LINE.CTL,ML_LINE
17440 RETURN 
17500 DELETE_LINES:
17510 GOSUB SEL_LB_LINE
17520 MSGBOX MSG("WISH")+" "+MSG("DELETE")+SEP+MSG("LINE")+" "+STR(ML_LINE)+SEP+FN%ZZDISP$(GL_ACCT$,"G/L")+" "+ML_DESC1$,MSG("CONFIRM"),"!,YESNO",OPT$; IF OPT$="NO" THEN GOTO *RETURN
17530 MOVE_LINE_UP:
17540 LINES=ML_LINE
17550 LIST_BOX FIND LB_LINE.CTL,LINES,LN$,ERR=END_DEL_LINES
17560 LIST_BOX LOAD LB_LINE.CTL,LINES,*
17570 LIST_BOX FIND LB_LINE.CTL,LINES,LN$,ERR=END_DEL_LINES; LN$(1,3)=STR(LINES:"000")
17580 LIST_BOX LOAD LB_LINE.CTL,LINES,LN$; LINES=LINES+1
17600 GOTO 17560
17610 END_DEL_LINES:
17620 GOSUB CHECK_BALANCE
17630 IDX=ML_LINE; GOSUB SEL_LB_LINE
17999 RETURN 
18000 ! 18000,10
18010 SEL_START_ACCTPD:
18020 ML_ENDING_PERIOD$=CUR_DATE$[NUM(ENDING_ACCTPD_TO_PST$)],REFRESH_FLG=1
18030 RETURN 
18040 SEL_START_FISCAL:
18050 IF ENDING_FY_TO_POST$="    " THEN REFRESH_FLG=1,ENDING_ACCTPD_TO_PST$="  "; GOTO *RETURN
18060 FIND (_ZZP,KEY=%C$+"G/LYE"+ENDING_FY_TO_POST$,DOM=*RETURN)REC_DAT$; PER_LEN=NUM(REC_DAT$(13,2)); REC_DAT$=REC_DAT$(21)
18070 DIM CUR_DATE$[PER_LEN]
18080 FOR XX=1 TO PER_LEN; CUR_DATE$[XX]=FND$(REC_DAT$(XX*6-5,6)); NEXT XX
18090 %CR_YEAR$=ENDING_FY_TO_POST$
18095 IF NUM(ENDING_ACCTPD_TO_PST$)>13 THEN ENDING_ACCTPD_TO_PST$="01"
18100 GOTO SEL_START_ACCTPD
18500 LOAD_LIST: IDX=0,ML_DEBIT=0,ML_CREDIT=0,FLAG=0,B_JRNL_REF_CODE$=JRNL_REF_CODE$
18502 GOSUB CHECK_MEMO
18505 IF STP(JRNL_REF_CODE$)="" THEN NEXT_FOLDER=FLDR.GLGREC.1.CTL; REFRESH_FLG=1; RETURN 
18510 READ (_GLT,KEY=JRNL_REF_CODE$,DOM=*NEXT)
18515 NXT_REC:
18530 _GLTKEY$=KEY(_GLT,END=END_GLT); READ (_GLT,REC=_GLT$); GL_ACCT$=_GLT.GL_ACCOUNT_CODE$; GOSUB PROCESS_GL1
18540 IF MID(_GLTKEY$,1,6)<>JRNL_REF_CODE$ THEN GOTO END_GLT
18545 IDX=IDX+1
18550 IF _GLT.AMOUNT<=0 THEN ML_CREDIT=ML_CREDIT+ABS(_GLT.AMOUNT),ML_CREDIT$=STR(_GLT.AMOUNT:"###,###,###.00"),ML_DEBIT$="" ELSE ML_DEBIT$=STR(_GLT.AMOUNT:"###,###,###.00"),ML_CREDIT$="",ML_DEBIT=ML_DEBIT+_GLT.AMOUNT
18555 IF MEMO_FIELD_BY_LINE$="N" THEN _GLT.MEMO_FIELD$=""
18560 ACCT$=FN%ZZDISP$(GL_ACCT$,"G/L"),LN$=STR(IDX:"000")+SEP+ACCT$+SEP+ML_DESC1$+SEP+ML_DEBIT$+SEP+ML_CREDIT$+SEP+_GLT.MEMO_FIELD$
18570 LIST_BOX LOAD LB_LINE.CTL,IDX,LN$
18575 REMOVE (_GLT,KEY=_GLTKEY$,DOM=*NEXT)
18580 GOTO NXT_REC
18600 END_GLT: IDX=IDX+1,ML_LINE=IDX,ML_AMOUNT=0,ML_DESC_LINE4$=MSG("DESC")+": "+DESC_LINE_1$,ML_DESC1$="",ML_MEMO1$=""
18610 ML_LINE=IDX,NEXT_ID=GL_ACCT.CTL,GL_ACCT$=""
18620 IF MEMO_FIELD_BY_LINE$="Y" THEN NEXT_ID=ML_MEMO1.CTL,REFRESH_FLG=1
18625 GOSUB CHECK_BALANCE
18630 RETURN 
18700 DELETE_GLT:
18710 READ (_GLT,KEY=JRNL_REF_CODE$,DOM=*NEXT)
18715 NXT_GLT:
18720 _GLTKEY$=KEY(_GLT,END=END_GLT); READ (_GLT,REC=_GLT$)
18730 IF MID(_GLTKEY$,1,6)<>JRNL_REF_CODE$ THEN GOTO *RETURN
18740 REMOVE (_GLT,KEY=_GLTKEY$,ERR=*NEXT)
18750 GOTO NXT_GLT
19000 CHECK_BALANCE:
19010 ML_DEBIT=0,ML_CREDIT=0
19020 IF NO_GL AND BAL_NOGL>0 THEN ML_CREDIT=BAL_NOGL ELSE IF NO_GL AND BAL_NOGL<0 THEN ML_DEBIT=-BAL_NOGL
19030 FOR XXIDX=1 TO 9999
19040 LIST_BOX FIND LB_LINE.CTL,XXIDX,LN$,ERR=19140
19050 LN$=LN$+SEP+" "
19055 IF LEN(LN$)=1 THEN CONTINUE
19060 B_LINE=NUM(LN$(1,POS(SEP=LN$)-1)),LN$=LN$(POS(SEP=LN$)+1)
19070 B_GL$=LN$(1,POS(SEP=LN$)-1),LN$=LN$(POS(SEP=LN$)+1),B_GL$=STP(B_GL$,3,"-"),B_GL$=PAD(B_GL$,12,"0")
19080 B_DESC$=LN$(1,POS(SEP=LN$)-1),LN$=LN$(POS(SEP=LN$)+1)
19090 B_DEB$=LN$(1,POS(SEP=LN$)-1),LN$=LN$(POS(SEP=LN$)+1)
19100 B_CRE$=LN$(1,POS(SEP=LN$)-1),LN$=LN$(POS(SEP=LN$)+1)
19110 ML_DEBIT=ML_DEBIT+NUM(B_DEB$),ML_CREDIT=ML_CREDIT+NUM(B_CRE$)
19120 NEXT XXIDX
19130 GOTO 19150
19140 EXITTO 19150
19150 REFRESH_FLG=1; IF ML_DEBIT<>ML_CREDIT THEN ML_BAL$="Out of Balance",ML_BAL.CTL'TEXTCOLOR$="RED",ML_BAL1$=MSG("DIST_A")+":               "+STR((ML_DEBIT-ML_CREDIT)*-1:"###,###,###,###.00-") ELSE ML_BAL$="In Balance",ML_BAL.CTL'TEXTCOLOR$="BLUE",ML_BAL1$=""
19160 IF ML_AMOUNT=0 THEN ML_AMOUNT=(ML_DEBIT-ML_CREDIT)*-1
19165 IF (ML_DEBIT-ML_CREDIT)*-1<0 THEN ML_BAL1.CTL'TEXTCOLOR$="RED" ELSE ML_BAL1.CTL'TEXTCOLOR$="BLUE"
19170 RETURN 
19200 ADD_LINES:
19210 ML_AMOUNT=0; GOSUB CHECK_BALANCE
19220 ML_LINE=XXIDX,IDX=ML_LINE,NEXT_ID=GL_ACCT.CTL,GL_ACCT$="",ML_MEMO1$=""
19225 IF MEMO_FIELD_BY_LINE$="Y" THEN NEXT_ID=ML_MEMO1.CTL,REFRESH_FLG=1
19230 RETURN 
20000 WRITE_LINES:
20005 IF NO_WRITE THEN NO_WRITE=0; GOTO *RETURN
20010 GOSUB CHECK_BALANCE
20020 IF ML_DEBIT<>ML_CREDIT THEN NEXT_ID=GL_ACCT.CTL,REFRESH_FLG=1; RETURN 
20030 LINES=1,IDX=1
20035 NXT_LINES:
20040 NO_LINE=0; GOSUB SEL_LB_LINE_NXT
20050 IF NO_LINE THEN NEXT_ID=-1; GOTO *RETURN
20055 XX=POS("-"=GL_ACCT$); IF XX<>0 THEN GL_ACCT$=GL_ACCT$(1,XX-1)+GL_ACCT$(XX+1); GOTO 20055
20056 GL_ACCT$=PAD(GL_ACCT$,12,"0")
20057 IF STP(JRNL_REF_CODE$)="" THEN JRNL_REF_CODE$=B_JRNL_REF_CODE$
20060 _GLT.JOURNAL_REF_NUM$=JRNL_REF_CODE$,_GLT.SEQ_NUM$=STR(ML_LINE:"000"),_GLT.GL_ACCOUNT_CODE$=GL_ACCT$,_GLT.MEMO_FIELD$=ML_MEMO1$,GLTKEY$=_GLT.JOURNAL_REF_NUM$+_GLT.SEQ_NUM$
20070 IF STP(ML_DEBIT$)="" THEN _GLT.AMOUNT=-NUM(ML_CREDIT$) ELSE _GLT.AMOUNT=NUM(ML_DEBIT$)
20080 WRITE (_GLT,KEY=GLTKEY$,REC=_GLT$)
20090 LINES=LINES+1,IDX=LINES
20100 GOTO NXT_LINES
20500 INSERT_LINES:
20510 LIST_BOX READ LB_LINE.CTL,IDX,ERR=*NEXT
20520 LIST_BOX FIND LB_LINE.CTL,IDX,LN$,ERR=*RETURN
20530 LIST_BOX LOAD LB_LINE.CTL,IDX,LN$(1,3)+SEP+" "+SEP+" "+SEP+" "+SEP+" "
20535 NXT_INSERT:
20540 IDX=IDX+1
20550 LIST_BOX FIND LB_LINE.CTL,IDX,LN$,ERR=END_INSERT
20560 LIST_BOX LOAD LB_LINE.CTL,IDX,*
20570 LN$(1,3)=STR(IDX:"000")
20580 LIST_BOX LOAD LB_LINE.CTL,IDX,LN$
20590 GOTO NXT_INSERT
20600 END_INSERT:
20610 GOSUB CHECK_BALANCE
20620 NEXT_ID=GL_ACCT.CTL,REFRESH_FLG=1,IDX=ML_LINE,GL_ACCT$="",REFRESH_FLG=0,ML_AMOUNT=0
20625 IF MEMO_FIELD_BY_LINE$="Y" THEN NEXT_ID=ML_MEMO1.CTL,REFRESH_FLG=1
20630 RETURN 
21000 CHECK_MEMO: X=LB_LINE.CTL
21010 IF ORIG_FMT$="" THEN ORIG_FMT$=X'FMT$
21020 IF MEMO_FIELD_BY_LINE$="Y" THEN X'FMT$=ORIG_FMT$; CALL "*WINGRP;SHOW",MEMO.GRP$ ELSE X'FMT$=ORIG_FMT$(1,POS("["=ORIG_FMT$,-1)-1); CALL "*WINGRP;HIDE",MEMO.GRP$
21030 RETURN 
21100 DEL_LINES:IF ML_LINE>6 THEN LB_LINE.CTL'VISIBLE=0
21110 FOR XX=1 TO 999
21120 LIST_BOX LOAD LB_LINE.CTL,1,*,ERR=END_DEL
21130 NEXT XX
21140 GOTO NXT_DEL
21150 END_DEL:EXITTO NXT_DEL
21160 NXT_DEL:
21170 IF LB_LINE.CTL'VISIBLE=0 THEN LB_LINE.CTL'VISIBLE=1
21180 RETURN 
28000 HARD_COPY:
28010 PRINT 'DIALOGUE'(20,15,60,8,"Enter Comment"),'CS'
28020 ! CH_PR=0; CALL "*pr.opn",CH_PR,0
28025 PRINT 'TEXT'(55,60,1000,100,"Comment/Title:"); MULTI_LINE 100,@(15,1,40,1); SET_FOCUS 100; OBTAIN *; MULTI_LINE READ 100,TF_COMMENT$
28030 PRINT 'POP',
28034 IF CTL=4 THEN GOTO *RETURN ELSE PRINT 'CURSOR'(1)
28035 CH_PR=HFN; OPEN (CH_PR,ERR=*NEXT)"*windev*" ! CH_PR=0; CALL "*pr.opn",CH_PR,0
28036 PRINT 'CURSOR'(0)
28040 TE$=FIN(CH_PR,"FILENAME",ERR=*RETURN)
28050 TF_NAME$=STP(X3$(86,40)),TIL$=MSG("GLGJRA"); DIM BAL_T$[3]; BAL_T$[1]="ACCRUAL",BAL_T$[2]="CASH_BASIS",BAL_T$[3]="BOTH",OP=POS(METHODS_TO_UPDATE$="ACB"),BAL_T$=BAL_T$[OP],BAL_T$=MSG(BAL_T$)
28055 PRINT (CH_PR)@(0),"Date/Time:",DTE(0:"%Mz/%Dz/%Yl %hz:%mz %p")
28057 PRINT (CH_PR)@(0)," Terminal:",FID(0)
28058 PRINT (CH_PR)@(0),"  User ID:",WHO,'LF','LF'
28059 IF TF_COMMENT$<>"" THEN PRINT (CH_PR)@(INT((80-LEN(TF_COMMENT$))/2)),TF_COMMENT$,'LF','LF'
28060 PRINT (CH_PR)"  Program: GLGREC",@(INT((80-LEN(TF_NAME$))/2)),TF_NAME$
28070 PRINT (CH_PR)@(INT((80-LEN(TIL$))/2)),TIL$
28080 PRINT (CH_PR)PAD(RAY$,80,"-")
28085 FY$=MSG("JRNL_R_C")+":"; PRINT (CH_PR)@(30-LEN(FY$)),FY$," ",JRNL_REF_CODE$
28090 FY$=MSG("ENDI_F_T_P")+":"; PRINT (CH_PR)@(30-LEN(FY$)),FY$," ",ENDING_FY_TO_POST$,"  ",MSG("ENDI_A_T_P")+":",ENDING_ACCTPD_TO_PST$," - ",ML_ENDING_PERIOD$
28100 SO_J$=MSG("SRC_JRNL")+":"; PRINT (CH_PR)@(30-LEN(SO_J$)),SO_J$," ",SRC_JRNL$," ",STP(ML_SRC_JRNL_DESC$)
28110 ! SO_J$=MSG("REVE_I_F")+":"; PRINT (CH_PR)@(0),SO_J$," ",ML_REV_YEAR$,@(54),MSG("PERIOD")+":",ML_REV_PER$," ",ML_DESC5$
28130 SO_J$=MSG("MEMO_F_B_L")+":"; PRINT (CH_PR)@(30-LEN(SO_J$)),SO_J$," ",; IF MEMO_FIELD_BY_LINE$="Y" THEN PRINT (CH_PR)"Yes" ELSE PRINT (CH_PR)"No"
28135 SO_J$=MSG("DESC")+":"; PRINT (CH_PR)@(30-LEN(SO_J$)),SO_J$,
28142 FOR FF=1 TO 3; IF STP(EVS("ML_DESC_LINE_"+STR(FF)+"$"))<>"" THEN PRINT (CH_PR)@(23),EVS("ML_DESC_LINE_"+STR(FF)+"$") END_IF ; NEXT FF
28145 IF P0$(40,1)+P0$(180,1)="CY" THEN PRINT (CH_PR)@(0),MSG("MTD_U")+"?"," ",BAL_T$
28150 PRINT (CH_PR)PAD("",80,"-")
28155 PRINT (CH_PR)MSG("LINE"),@(5),MSG("ACCT"),@(15),MSG("DESC"),"/",MSG("MEMO"),@(59),MSG("DEBIT"),@(74),MSG("CREDIT")
28158 PRINT (CH_PR)PAD("",80,"-")
30000 READ_LINES:
30005 ML_DEBIT=0,ML_CREDIT=0
30010 FOR COUNT=1 TO 9999
30020 LIST_BOX FIND LB_LINE.CTL,COUNT,LN$,ERR=LBL_1
30030 LN$=LN$+SEP+" "
30040 B_LINE=NUM(LN$(1,POS(SEP=LN$)-1)),LN$=LN$(POS(SEP=LN$)+1)
30050 B_GL$=LN$(1,POS(SEP=LN$)-1),LN$=LN$(POS(SEP=LN$)+1)
30060 B_DESC$=LN$(1,POS(SEP=LN$)-1),LN$=LN$(POS(SEP=LN$)+1)
30070 B_DEB$=LN$(1,POS(SEP=LN$)-1),LN$=LN$(POS(SEP=LN$)+1)
30080 B_CRE$=LN$(1,POS(SEP=LN$)-1),LN$=LN$(POS(SEP=LN$)+1)
30090 B_MEMO$=LN$(1,POS(SEP=LN$)-1),LN$=LN$(POS(SEP=LN$)+1)
30100 ML_DEBIT=ML_DEBIT+NUM(B_DEB$),ML_CREDIT=ML_CREDIT+NUM(B_CRE$)
30105 PRINT (CH_PR)@(1),B_LINE:"##0",@(5),B_GL$," ",B_DESC$,
30106 IF NUM(B_DEB$) THEN PRINT (CH_PR)@(50),NUM(B_DEB$):"###,###,###.00" ELSE PRINT (CH_PR)@(66),NUM(B_CRE$):"###,###,###.00"
30108 IF STP(B_MEMO$)<>"" THEN PRINT (CH_PR)@(6+LEN(B_GL$)),B_MEMO$
30110 NEXT COUNT
30130 LBL_1:
30135 PRINT (CH_PR)@(50),PAD("",14,"-"),@(66),PAD("",14,"-")
30138 PRINT (CH_PR)@(50),ML_DEBIT:"###,###,###.00",@(66),ML_CREDIT:"###,###,###.00"
30139 PRINT (CH_PR)@(50),PAD("",14,"="),@(66),PAD("",14,"=")
30140 PRINT (CH_PR)'FF'
30150 CLOSE (CH_PR)
30160 EXIT 
31000 ABORT:
31010 IF FOLDER_ID$="GLGREC.2" THEN GOSUB CHECK_BALANCE; IF ML_DEBIT<>ML_CREDIT THEN MSGBOX ML_BAL$,MSG("WARNING"),"!,TIM=2"; IGNORE_EXIT=1,REFRESH_FLG=1,CMD_STR$="",NEXT_ID=GL_ACCT.CTL; RETURN 
31020 WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
31024 CMD_STR$="END"
31030 RETURN 
56000 ! "195542-Having issues with his G/L Postings                         
56002 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
60100 RES_BT:
60110 FOR DD=65 TO 67
60120 BTC=EVN("BT_"+CHR(DD)+".CTL")
60125 IF BTC=0 THEN CONTINUE
60130 BTC'TEXTCOLOR$="DEFAULT",BTC'HEIGHT=22,TXT$=BTC'TEXT$,XX=POS("}"=TXT$); IF XX<>0 THEN BTC'TEXT$=TXT$(XX+1)
60140 NEXT DD
60150 BTC=EVN("BT_"+METHODS_TO_UPDATE$+".CTL")
60160 IF BTC THEN BTC'TEXTCOLOR$="Light Blue",BTC'HEIGHT=40,TXT$=BTC'TEXT$,BTC'TEXT$="{!Arrow_Right}"+TXT$
60165 GOSUB 17020
60170 RETURN 
