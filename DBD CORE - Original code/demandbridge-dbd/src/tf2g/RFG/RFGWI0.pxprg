0010 REM "WMS Inventory Counting <RFGWI0>"
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 07/09/12 - 10.296388 - crg - SSP# 255914
0037 REM "255914-Display Item code in Suggested Count Entry section
0040 REM "Copyright 2012 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0100 SETERR 9000
0110 X0$="RFGWI0",X1$="WMS Inventory Counting"
0120 EOL$=ATH(STP(EC_PARM$(57,8),1))
0130 M1I$="###,###,##0-",M1D$="###,###0.00-"
0300 REM "IOLISTS
0310 IOL_RFK:IOLIST RFK$
0320 IOL_RFB:IOLIST RFB$,RFB{ALL}
0330 IOL_FM1:IOLIST FM1$,FM1{ALL}
0340 IOL_IC0:IOLIST IC0$,IC0{ALL}
0345 IOL_ICL:IOLIST ICL$,ICL{ALL}
0350 IOL_ICF:IOLIST ICF$,ICF{ALL}
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01O RFK...  02O RFB... 04O ICL...  05O ICF...  06O FM0...  07O FM1...  08O IC0...  09OSICL...  13O ZZPARM  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0590 READ (Z[13],KEY=X3$(9,3)+"I/C")ICPARM$
0599 ! 
0600 REM "Get WMS User
0610 FIND (Z[1],KEY=EC$[2](1,15))IOL=IOL_RFK
0620 GOSUB GET_AVAILABLE_WHS
0900 ! 
0910 DIM ICL_IN$(293),ICL_IN[12],ICL_SET[12],ICL_IN_DATA$[2000],ICL_IN_DATA[2000,12],ICL_SET_DATA[2000,12]
0999 ! 
1000 REM "Process DATA array
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1020 T_IN=POS("."=TAG$); IF T_IN THEN TAG_PARM$=MID(TAG$,T_IN+1),TAG$=MID(TAG$,1,T_IN-1) ELSE TAG_PARM$=""
1025 SWITCH TAG$ ! 1185 end switch
1026 CASE "new_warehouse"; IF UCS(VALUE$)="Y" THEN NEW_WAREHOUSE$="Y" END_IF ; BREAK
1030 CASE "warehouse"; WAREHOUSE$=PAD(VALUE$,4); BREAK
1031 CASE "bin"; BIN$=PAD(VALUE$,10); BREAK
1032 CASE "lot_num"; LOT_NUM$=PAD(VALUE$,8); BREAK
1040 CASE "count"; IF UCS(VALUE$)="Y" THEN COUNT$="Y" END_IF ; BREAK
1145 CASE "count_qty"; GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO *BREAK ELSE FOR VAL_INDEX=1 TO VAL_COUNT; ICL_IN_DATA[VAL_INDEX,8]=-1; IF NOT(NUL(VAL$[VAL_INDEX])) THEN ICL_IN_DATA[VAL_INDEX,8]=NUM(VAL$[VAL_INDEX],ERR=*PROCEED) END_IF ; NEXT VAL_INDEX; BREAK
1150 CASE "icl_key"; GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO *BREAK ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF NOT(NUL(VAL$[VAL_INDEX])) THEN ICL_IN_DATA$[VAL_INDEX](1,42)=UCS(VAL$[VAL_INDEX]) END_IF ; NEXT VAL_INDEX; BREAK
1151 CASE "skip_count"; GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO *BREAK ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF NOT(NUL(VAL$[VAL_INDEX])) THEN ICL_IN_DATA$[VAL_INDEX](222,1)="Y" END_IF ; NEXT VAL_INDEX; BREAK
1180 DEFAULT ; VIA TAG$=VALUE$; BREAK ! Set to same name variable as TAG$
1185 END SWITCH ! 1050
1190 NEXT I
1195 DIM BYBINFO$[5]; BYBINFO$[1]=PGN,BYBINFO$[2]="20110922",BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1200 REM "Process input
1201 IF POS("I"=RFK$(111,20))=0 THEN ERRCODE$="0"; GOTO 1500
1205 PROCESS_WAREHOUSE:
1210 IF NOT(NUL(WAREHOUSE$)) THEN IF WAREHOUSE$<>EC$[1](1296,4) THEN GOSUB SET_ACTIVE_WAREHOUSE; IF NOT(NUL(ERRCODE$)) THEN GOTO 1500 END_IF ; END_IF ELSE WAREHOUSE$=EC$[1](1296,4)
1220 IF NUL(WAREHOUSE$) THEN IF NEW_WAREHOUSE$<>"Y" THEN ERRCODE$="1"; GOTO 1500 ELSE IF NUL(WHSECODES$) THEN ERRCODE$="101"; GOTO 1500
1235 IF COUNT$="Y" THEN GOSUB PROCESS_LOT_COUNTS; IF NOT(NUL(ERRCODE$)) THEN GOTO 1500
1250 IF NOT(NUL(BIN$)) AND NOT(NUL(LOT_NUM$)) THEN GOSUB GET_LOT_INFO ELSE IF NUL(BIN$) AND LEN(BIN$)>0 THEN ERRCODE$="103" ELSE IF NUL(LOT_NUM$) AND LEN(LOT_NUM$)>0 THEN ERRCODE$="104" END_IF END_IF END_IF ; IF NOT(NUL(ERRCODE$)) THEN GOTO 1500
1255 IF BIN$<>EC$[1](1300,10) OR LOT_NUM$<>EC$[1](1310,8) THEN GOSUB SET_ACTIVE_VARS
1499 ! 
1500 REM "Fill out the template
1503 GOSUB EVAL_ERR_CODE
1504 IF NOT(NUL(%BASIC2$)) OR %NEW_CALL_PROG THEN GOTO 2990 ! Skip outputting template if additional program to be done
1505 CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1510 READ (100,END=2950)LINE$; LINE$=FNBYB$(LINE$)
1515 CHKTAG=1
1520 WHILE CHKTAG ! 2800 wend
1522 P1=MSK(LINE$,"\?tf\?[^?]*\?"); IF P1=0 THEN CHKTAG=0; BREAK
1530 TAG$=LINE$(P1,MSL); LINE1$=LINE$(1,P1-1),LINE2$=MID(LINE$,P1+MSL)
1600 SWITCH TAG$ ! 2790 end switch
1601 CASE "?tf?whse?"
1602 MX=FNN(WAREHOUSE$); BREAK
1603 CASE "?tf?bin?"
1606 MX=FNN(BIN$); BREAK
1609 CASE "?tf?lot_num?"
1612 MX=FNN(LOT_NUM$); BREAK
1615 CASE "?tf?active_bin?"
1616 FIND_BIN$=EC$[1](1300,10); IF NOT(NUL(FIND_BIN$)) THEN GOSUB GET_BIN_INFO ELSE BIN_FMT$="" END_IF ; MX=FNN(BIN_FMT$); BREAK
1617 CASE "?tf?active_lot_num?"
1618 MX=FNN(EC$[1](1310,8)); BREAK
1621 CASE "?tf?whse_list?"
1624 GOSUB GET_WHS_LIST; MX=FNN(WAREHOUSE_LIST$); BREAK
1630 CASE "?tf?lot_section_start?"
1635 GOSUB GET_LOT_SECTION; LINE$=LOT_SECTION$; BREAK
1640 CASE "?tf?suggest_section_start?"
1645 GOSUB GET_SUGGESTED_LOT_SECTION; LINE$=SUGGEST_SECTION$; BREAK
2600 CASE "?tf?error_section_start?"
2603 GOSUB GET_ERROR_SECTION; LINE$=ERROR_SECTION$; BREAK
2618 CASE "?tf?uom_list?"
2621 GOSUB GET_UOM_LIST; MX=FNN(UOMLIST$); BREAK
2785 DEFAULT ; LINE$=LINE1$+LINE2$ ! Unknown tag, discard
2790 END SWITCH ! 1600
2800 WEND ! 1520
2810 PRINT (OUTPUT)LINE$,EOL$,
2900 GOTO 1510; REM next read
2990 GOTO 9900
2999 ! 
5000 REM "take Q$, try to figure out date and return in Q$
5001 REM "assume MM?DD?YY(YY) format where we don't care about ?'s. if only YY then pivot on 60
5005 CONVERT_DATE:
5010 IF LEN(Q$)=7 AND Q$(2,1)="/" THEN Q$="0"+Q$
5015 IF LEN(Q$)<6 THEN GOTO ERR_INVALID_DATE ELSE IF LEN(Q$)>=8 THEN Q$=Q$(1,2)+Q$(4,2)+Q$(7); IF LEN(Q$)>8 THEN Q$=Q$(1,8)
5020 REM "NOW in MMDDYY.. format
5025 IF LEN(Q$(5))>2 THEN YY$=Q$(5) ELSE IF Q$(5)<"60" THEN YY$="20"+Q$(5) ELSE YY$="19"+Q$(5)
5030 TMP$=Q$,Q$=DIM(6),Q$=CHR(NUM(YY$(1,3),ERR=ERR_INVALID_DATE)-125,ERR=ERR_INVALID_DATE)+YY$(4,1)+TMP$(1,4)
5045 RETURN 
5046 ERR_INVALID_DATE: ERRCODE$="401"; RETURN 
5049 ! 
5050 REM "Unit of Measure
5055 GET_UOM_FORMATTED:
5060 U=1 ! Given U$ and U_QPM, get components required to calculate display units
5065 DIM UOM[2]; FIND (Z[13],KEY="U/M"+U$,DOM=*RETURN)UOM$,UOM[0],UOM[1]
5070 IF UOM$(20,1)="Y" THEN U=UOM[1] ELSE U=U_QPM
5080 IF U=0 THEN U=1
5095 RETURN 
5099 ! 
5100 LOG_MSG:! Add message to log file
5110 MOUT$="SESSION ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|"
5135 MX=FN%_LOG_MESSAGE("MESG",MOUT$+LOG_MESG$)
5145 RETURN 
5149 ! 
6100 REM "Given FIND_BIN$, get bin record and information
6105 GET_BIN_INFO:
6110 DIM RFB$(1000),RFB[4]; FIND (Z[2],KEY=FIND_BIN$+WAREHOUSE$,ERR=ERR_INVALID_BIN)IOL=IOL_RFB
6115 BIN_FMT$=FIND_BIN$; IF NOT(NUL(RFB$(69,15))) THEN BIN_MASK$=PAD(STP(RFB$(69,15),2),15,1,"X"); BIN_FMT$=STR(FIND_BIN$:BIN_MASK$)
6120 RETURN 
6125 ! 
6200 REM "Get Units of measure list in the form of HTML select dropdown
6201 GET_UOM_LIST:
6205 GOSUB SET_XI
6210 UOMLIST$=""
6215 READ (Z[13],KEY="U/M",DOM=*NEXT)
6220 UOMK$=KEY(Z[13],END=6239); READ (Z[13],KEY=UOMK$)UOMREC$; IF MID(UOMREC$,1,3)<>"U/M" THEN GOTO 6239
6225 IF MID(UOMREC$,22,1)<>"Y" THEN UOMLIST$=UOMLIST$+"<option value="+QUO+UOMREC$(4,4)+QUO+">"+UOMREC$(4,4)+"</option>"+EOL$
6230 GOTO 6220
6240 GOSUB CLEAR_XI
6245 RETURN 
6249 ! 
6300 REM "Collect lot information for given bin location and lot serial number
6301 REM "Info is saved to an array for later retrieval and display
6305 GET_LOT_INFO:
6310 DIM LOTS$[100,1]; LOT_COUNT=0 ! Index 0 - ICF key, Index 1 - ICL key
6315 DIM RFB$(1000),RFB[4]; FIND (Z[2],KEY=BIN$+WAREHOUSE$,ERR=ERR_INVALID_BIN)IOL=IOL_RFB
6320 READ (Z[5],KEY=BIN$,KNO=5,DOM=*NEXT)
6330 NEXT_ICF: KICF$=KEY(Z[5],END=GET_ICF_DONE); DIM ICF$(270),ICF[12]; READ (Z[5],KEY=KICF$)IOL=IOL_ICF
6335 IF MID(ICF$,100,10)<>BIN$ THEN GOTO GET_ICF_DONE
6340 IF MID(ICF$,21,4)<>WAREHOUSE$ OR MID(ICF$,234,8)<>LOT_NUM$ OR NUL(MID(ICF$,232,2)) THEN GOTO NEXT_ICF ! Skip if whse or lot num do not match or no phy count in progress
6350 ICLK$=MID(ICF$,21,4)+MID(ICF$,100,10)+MID(ICF$,1,20)+MID(ICF$,25,6)+MID(ICF$,232,2); FIND (Z[4],KEY=ICLK$,DOM=NEXT_ICF) ! Check if ICF rec has entry in ICL
6360 ! If here, collect this ICF and ICL entry for display later
6370 LOT_COUNT++; LOTS$[LOT_COUNT,0]=MID(ICF$,1,32),LOTS$[LOT_COUNT,1]=ICLK$
6380 GOTO NEXT_ICF
6390 GET_ICF_DONE:
6391 IF LOT_COUNT=0 THEN GOTO ERR_NO_LOTS_FOUND
6395 RETURN 
6396 ERR_INVALID_BIN: ERRCODE$="103"; RETURN 
6397 ERR_NO_LOTS_FOUND: ERRCODE$="104"; RETURN 
6399 ! 
6400 REM "Process inventory counts
6405 PROCESS_LOT_COUNTS:
6410 FOR LOT_INDEX=1 TO HIGHEST_VAL_COUNT
6415 IF ICL_IN_DATA[LOT_INDEX,8]=-1 AND NUL(ICL_IN_DATA$[LOT_INDEX](222,1)) THEN GOTO *CONTINUE
6420 ICLK$=ICL_IN_DATA$[LOT_INDEX](1,42); DIM ICL$(293),ICL[12]; READ (Z[4],KEY=ICLK$,DOM=*CONTINUE)IOL=IOL_ICL
6422 IF NOT(NUL(ICL$(110,11))) THEN GOTO *CONTINUE ! Do not touch committed lots
6423 IF ICL_IN_DATA$[LOT_INDEX](222,1)<>"Y" THEN {! User has not indicated lot counting to be skipped
6425 ICL[8]=ICL_IN_DATA[LOT_INDEX,8],ICL$(222,1)="Y" ! Lot has been counted
6428  } ELSE {
6430 ICL[8]=0,ICL$(222,1)="S" ! Lot counting has been skipped by user
6433  }
6436 IF NUL(ICL$(259,3)) THEN ICL$(259,13)=X3$(40,3)+X3$(21,6)+STR(DTE(0:"%Hz%mz"))
6437 ICL$(272,13)=X3$(40,3)+X3$(21,6)+STR(DTE(0:"%Hz%mz"))
6438 WRITE (Z[4],KEY=ICLK$)IOL=IOL_ICL
6440 NEXT LOT_INDEX
6445 RETURN 
6449 ! 
6800 REM "Display lots found for the specified bin location and lot number combination
6805 GET_LOT_SECTION:
6810 LOT_SECTION$="",LI_TAGS$="001<po_number>002<po_number_fmt>003<item_key>004<item_cust_code>005<item_cust_code_fmt>006<item_code>007<vendor_code_fmt>008<bin>009<icl_key>010<qty>011<qty_in_eaches>012<uom_fmt>013<whse>014<bin_fmt>015<lot_num>016<syscount_enabled_start>017<order_committed_start>018<order_number>019<order_number_fmt>020<order_line_number>021<receipt_date>022<icf_seq_num>023<lot_prev_counted_start>024<count_qty>025<count_status>026<count_allowed_start>"
6815 IF POS("?tf?lot_section_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)TMPLINE$; TMPLINE$=FNBYB$(TMPLINE$); LINE$+=TMPLINE$+EOL$; GOTO *SAME
6816 E1=POS("?tf?lot_section_start?"=LINE$); IF E1>0 THEN LINE1$=MID(LINE$,1,E1-1); LINE$=LINE$(E1+22) ELSE RETURN 
6817 E2=POS("?tf?lot_section_end?"=LINE$); IF E2>0 THEN LINE2$=MID(LINE$,E2+20); LINE$=LINE$(1,E2-1) ELSE RETURN 
6820 IF LOT_COUNT=0 THEN GOTO 6895
6823 FOR LL=1 TO LOT_COUNT
6826 ICLK$=LOTS$[LL,1]; DIM ICL$(293),ICL[12]; FIND (Z[4],KEY=ICLK$,DOM=*CONTINUE)IOL=IOL_ICL
6828 QTY_IN_EACHES=ICL[4]*MAX(ICL[3],1)*MAX(ICL[2],1); UOM_FORMATTED$=STP(ICL$(121,4),2)+"/"; IF ICL[2]<>0 THEN UOM_FORMATTED$+=STR(ICL[2])+" "+STP(ICL$(125,4),2)+"/" END_IF ; UOM_FORMATTED$+=STR(ICL[3]) ! 255937
6830 LI_SECTION$=LINE$
6833 LIINDEX=POS("?tf?"=LI_SECTION$); IF LIINDEX=0 THEN GOTO 6891
6836 LIEND_INDEX=POS("?"=LI_SECTION$(LIINDEX+4)),LITAG$=LI_SECTION$(LIINDEX+4,LIEND_INDEX-1),LI1$=LI_SECTION$(1,LIINDEX-1),LI2$=LI_SECTION$(LIINDEX+LIEND_INDEX+4),LIPOS=POS("<"+LITAG$+">"=LI_TAGS$); IF LIPOS=0 THEN LI_SECTION$=LI1$+LI2$,LIINDEX=0 ELSE LIINDEX=NUM(LI_TAGS$(LIPOS-3,3))
6840 ON LIINDEX GOTO 6889,6841,6842,6843,6844,6845,6846,6847,6848,6849,6850,6851,6852,6853,6854,6855,6856,6857,6858,6859,6860,6861,6862,6863,6864,6865,6866,6889
6841 LI_SECTION$=LI1$+ICL$(41,9)+LI2$; GOTO 6890; REM " po_number
6842 LI_SECTION$=LI1$+FN%ZZDISP$(ICL$(41,9),"P/O")+LI2$; GOTO 6890; REM " po_number_fmt
6843 LI_SECTION$=LI1$+ICL$(1,20)+LI2$; GOTO 6890; REM " item_key
6844 LI_SECTION$=LI1$+STP(ICL$(1,10),2)+LI2$; GOTO 6890; REM " item_cust_code
6845 LI_SECTION$=LI1$+STP(FN%ZZDISP$(ICL$(1,10),"A/R"),2)+LI2$; GOTO 6890; REM " item_cust_code_fmt
6846 LI_SECTION$=LI1$+STP(ICL$(11,10),2)+LI2$; GOTO 6890; REM " item_code
6847 LI_SECTION$=LI1$+STP(FN%ZZDISP$(ICL$(68,10),"A/P"),2)+LI2$; GOTO 6890; REM " vendor_code_fmt
6848 LI_SECTION$=LI1$+STP(ICL$(100,10),2)+LI2$; GOTO 6890; REM " bin
6849 LI_SECTION$=LI1$+ICLK$+LI2$; GOTO 6890; REM " icl_key
6850 IF FPT(ICL[4])=0 THEN M0$=M1I$ ELSE M0$=M1D$ END_IF ; LI_SECTION$=LI1$+STR(ICL[4]:M0$)+LI2$; GOTO 6890; REM " qty
6851 LI_SECTION$=LI1$+STR(QTY_IN_EACHES:M1I$)+LI2$; GOTO 6890; REM " qty_in_eaches
6852 LI_SECTION$=LI1$+UOM_FORMATTED$+LI2$; GOTO 6890; REM " uom_fmt ! 255937
6853 LI_SECTION$=LI1$+ICL$(21,4)+LI2$; GOTO 6890; REM " whse
6854 BIN_FMT$=ICL$(100,10); IF NOT(NUL(RFB$(69,15))) THEN BIN_MASK$=PAD(STP(RFB$(69,15),2),15,1,"X"); BIN_FMT$=STR(ICL$(100,10):BIN_MASK$) END_IF ; LI_SECTION$=LI1$+STP(BIN_FMT$,2)+LI2$; GOTO 6890; REM " bin_fmt
6855 LI_SECTION$=LI1$+STP(LOT_NUM$,2)+LI2$; GOTO 6890; REM " lot_num
6856 GOSUB IS_SYSCOUNT_SECTION_ENABLED; LI_SECTION$=LI1$+LI2$; GOTO 6890; REM " syscount_enabled_start
6857 GOSUB IS_ORDER_COMMITTED; LI_SECTION$=LI1$+LI2$; GOTO 6890; REM " order_committed_start
6858 LI_SECTION$=LI1$+ICL$(110,8)+LI2$; GOTO 6890; REM " order_number
6859 LI_SECTION$=LI1$+FN%ZZDISP$(ICL$(110,8),"O/P")+LI2$; GOTO 6890; REM " order_number_fmt
6860 LI_SECTION$=LI1$+ICL$(118,3)+LI2$; GOTO 6890; REM " order_line_number
6861 IF NUL(ICL$(25,6)) THEN TMP$="" ELSE CALL "ZZDISP","DX",ICL$(25,6),"",X3$,TMP$,"",0,0,X4$ END_IF ; LI_SECTION$=LI1$+TMP$+LI2$; GOTO 6890; REM " receipt_date
6862 LI_SECTION$=LI1$+ICL$(289,2)+LI2$; GOTO 6890; REM " icf_seq_num
6863 GOSUB IS_LOT_PREV_COUNTED; LI_SECTION$=LI1$+LI2$; GOTO 6890; REM " lot_prev_counted_start
6864 IF FPT(ICL[8])=0 THEN M0$=M1I$ ELSE M0$=M1D$ END_IF ; LI_SECTION$=LI1$+STR(ICL[8]:M0$)+LI2$; GOTO 6890; REM " count_qty
6865 LI_SECTION$=LI1$+TBL(POS(ICL$(222,1)="NYS"),"","Not Counted","Counted","Skipped","")+LI2$; GOTO 6890; REM " count_status
6866 GOSUB IS_COUNT_ALLOWED; LI_SECTION$=LI1$+LI2$; GOTO 6890; REM " count_allowed_start
6889 LI_SECTION$=LI1$+LI2$; GOTO 6890; REM " Unknown tag, strip off
6890 GOTO 6833
6891 LOT_SECTION$+=LI_SECTION$
6894 NEXT LL
6895 RETURN 
6899 ! 
6900 REM "Display next suggested bin location and lot number combination for counting
6905 GET_SUGGESTED_LOT_SECTION:
6910 SUGGEST_SECTION$="",SS_TAGS$="001<bin>002<bin_fmt>003<lot_num>004<item_key>005<item_cust_code>006<item_cust_code_fmt>007<item_code>"
6915 IF POS("?tf?suggest_section_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)TMPLINE$; TMPLINE$=FNBYB$(TMPLINE$); LINE$+=TMPLINE$+EOL$; GOTO *SAME
6916 E1=POS("?tf?suggest_section_start?"=LINE$); IF E1>0 THEN LINE1$=MID(LINE$,1,E1-1); LINE$=LINE$(E1+26) ELSE RETURN 
6917 E2=POS("?tf?suggest_section_end?"=LINE$); IF E2>0 THEN LINE2$=MID(LINE$,E2+24); LINE$=LINE$(1,E2-1) ELSE RETURN 
6920 SUGGESTED=0; IF NUL(BIN$) THEN GOTO 6921 ELSE GOTO 6923
6921 FICL$="N"+WAREHOUSE$; READ (Z[9],KNO=2,KEY=FICL$,DOM=*NEXT)
6922 KICL$=KEY(Z[9],END=6929); IF MID(KICL$,1,LEN(FICL$))<>FICL$ THEN GOTO 6929 ELSE GOTO 6925
6923 FICL$="N"+WAREHOUSE$+BIN$; READ (Z[9],KNO=2,KEY=FICL$,DOM=*NEXT)
6924 KICL$=KEY(Z[9],END=6921); IF MID(KICL$,1,LEN(FICL$))<>FICL$ THEN GOTO 6921 ELSE GOTO 6925
6926 DIM ICF$(270),ICF[12]; READ (Z[5],KEY=KICL$(16,20)+KICL$(2,4)+KICL$(36,8),KNO=0,DOM=6929)IOL=IOL_ICF
6927 FIND_BIN$=ICF$(100,10); GOSUB GET_BIN_INFO
6928 SUGGESTED=1
6929 IF SUGGESTED=0 THEN GOTO 6995
6930 SS_SECTION$=LINE$
6933 SSINDEX=POS("?tf?"=SS_SECTION$); IF SSINDEX=0 THEN GOTO 6991
6936 SSEND_INDEX=POS("?"=SS_SECTION$(SSINDEX+4)),SSTAG$=SS_SECTION$(SSINDEX+4,SSEND_INDEX-1),SS1$=SS_SECTION$(1,SSINDEX-1),SS2$=SS_SECTION$(SSINDEX+SSEND_INDEX+4),SSPOS=POS("<"+SSTAG$+">"=SS_TAGS$); IF SSPOS=0 THEN SS_SECTION$=SS1$+SS2$,SSINDEX=0 ELSE SSINDEX=NUM(SS_TAGS$(SSPOS-3,3))
6940 ON SSINDEX GOTO 6989,6941,6942,6943,6944,6945,6946,6947,6989
6941 SS_SECTION$=SS1$+ICF$(100,10)+SS2$; GOTO 6990; REM " bin
6942 SS_SECTION$=SS1$+BIN_FMT$+SS2$; GOTO 6990; REM " bin_fmt
6943 SS_SECTION$=SS1$+ICF$(234,8)+SS2$; GOTO 6990; REM " lot_num
6944 SS_SECTION$=SS1$+ICF$(1,20)+SS2$; GOTO 6990; REM " item_key SSP255914
6945 SS_SECTION$=SS1$+STP(ICF$(1,10),2)+SS2$; GOTO 6990; REM " item_cust_code  SSP255914
6946 SS_SECTION$=SS1$+STP(FN%ZZDISP$(ICF$(1,10),"A/R"),2)+SS2$; GOTO 6990; REM " item_cust_code_fmt  SSP255914
6947 SS_SECTION$=SS1$+STP(ICF$(11,10),2)+SS2$; GOTO 6990; REM " item_code  SSP255914
6989 SS_SECTION$=SS1$+SS2$; GOTO 6990; REM " Unknown tag, strip off
6990 GOTO 6933
6991 SUGGEST_SECTION$+=SS_SECTION$
6995 RETURN 
6999 ! 
7300 REM "Retreive 1 or more values in VALUE$ place in VAL$[] and set VAL_COUNT-Values seperated by ', 's (that is comma + blank), current max of 2002 values
7301 REM "We will add all values blank or not
7305 PARSE_DATA_TAG:
7307 DIM VAL$[2000]; VAL_COUNT=0
7310 IF VAL_COUNT=2000 THEN GOTO 7340 ELSE VP=POS(", "=VALUE$); IF VP=0 THEN GOTO 7335
7315 VAL_COUNT=VAL_COUNT+1; IF VP=1 THEN VAL$[VAL_COUNT]="",VALUE$=VALUE$(3); GOTO 7310 ELSE VAL$[VAL_COUNT]=VALUE$(1,VP-1); IF VP=LEN(VALUE$) THEN VALUE$=""; GOTO 7340 ELSE VALUE$=VALUE$(VP+2); GOTO 7310
7335 REM "finish up last one
7337 VAL_COUNT=VAL_COUNT+1; VAL$[VAL_COUNT]=VALUE$
7340 IF VAL_COUNT>HIGHEST_VAL_COUNT THEN FOR TMP_INDEX=HIGHEST_VAL_COUNT+1 TO VAL_COUNT; ICL_IN_DATA$[TMP_INDEX]=DIM(LEN(ICL_IN$)); NEXT TMP_INDEX; HIGHEST_VAL_COUNT=VAL_COUNT; REM "If new higher val count value then initialize data array
7345 RETURN 
7349 ! 
7700 REM "Control tags to suppress system count qty HTML section
7705 IS_SYSCOUNT_SECTION_ENABLED:
7715 IF MID(RFK$,131,1)="Y" THEN GOTO 7745 ! Check if ok to display section, if user param says OK
7720 ! Not OK to display section, so get rid of it
7730 LI2=POS("?tf?syscount_enabled_end?"=LI2$); IF LI2>0 THEN LI2$=MID(LI2$,LI2+25) ! Consume and discard all HTML until the end of the section
7745 RETURN 
7749 ! 
7750 REM "Control tags to suppress inventory count HTML form section if lot not eligible for counting
7755 IS_COUNT_ALLOWED:
7765 IF NUL(MID(ICL$,110,11)) THEN GOTO 7795 ! Check if ok to display section, this is only if lot not committed on an order 
7770 ! If here, not OK to display section, so get rid of it
7780 LI2=POS("?tf?count_allowed_end?"=LI2$); IF LI2>0 THEN LI2$=MID(LI2$,LI2+22) ! Consume and discard all HTML until the end of the section
7795 RETURN 
7799 ! 
7800 REM "Control tags to suppress committed order HTML section
7805 IS_ORDER_COMMITTED:
7815 IF NOT(NUL(MID(ICL$,110,8))) THEN GOTO 7845 ! Check if ok to display section, if order is committed
7820 ! If here, not OK to display section, so get rid of it
7830 LI2=POS("?tf?order_committed_end?"=LI2$); IF LI2>0 THEN LI2$=MID(LI2$,LI2+24) ! Consume and discard all HTML until the end of the section
7845 RETURN 
7849 ! 
7850 REM "Control tags to suppress previously counted info HTML section
7855 IS_LOT_PREV_COUNTED:
7865 IF ICL$(222,1)<>"N" THEN GOTO 7895 ! Check if ok to display section, this is only if physical count flag is not "N"
7870 ! If here, not OK to display section, since lot is not previously counted, so get rid of it
7880 LI2=POS("?tf?lot_prev_counted_end?"=LI2$); IF LI2>0 THEN LI2$=MID(LI2$,LI2+25) ! Consume and discard all HTML until the end of the section
7895 RETURN 
7899 ! 
7900 REM "Clear active vars stored in session after processing complete or canc
7910 CLEAR_ACTIVE_SESSION_VARS:
7920 EC$[1](1296,4)=""; EXTRACT RECORD (33005,KEY=EC$[1](1,7),DOM=*RETURN)ECB$ ! Clear active vars in session
7930 ECB$(1296,4)=""; WRITE RECORD (33005,KEY=EC$[1](1,7))ECB$
7945 RETURN 
7949 ! 
8000 GET_AVAILABLE_WHS:
8005 WHSLIST$=MID(RFK$,23,40)
8010 GOSUB SET_XI; CALL "UPDFM0;GETWMSLIST",Z[6],EC$[2](1,15),WHSLIST$,WHSECODES$
8011 GOSUB CLEAR_XI
8015 RETURN 
8019 ! 
8020 GET_WHS_LIST: WAREHOUSE_LIST$=""; IF NUL(WHSECODES$) THEN RETURN 
8025 FOR K=1 TO LEN(WHSECODES$) STEP 4
8026 CHK_WHSE$=MID(WHSECODES$,K,4); GOSUB CHECK_WAREHOUSE; IF BAD_WHSE$="Y" THEN GOTO *CONTINUE
8027 SELECTED$=""; IF PAD(WAREHOUSE$,4)=MID(WHSECODES$,K,4) THEN SELECTED$=" selected"
8030 WAREHOUSE_LIST$+="<option value="+QUO+WHSECODES$(K,4)+QUO+SELECTED$+">"+WHSECODES$(K,4)+"</option>"+EOL$
8035 NEXT K
8040  }
8045 RETURN 
8049 ! 
8050 SET_ACTIVE_WAREHOUSE:
8052 GOSUB SET_XI; FIND (Z[6],KEY="D"+DIM(10)+WAREHOUSE$,DOM=ERR_BAD_WHSE)FM0$
8056 GOSUB CLEAR_XI
8080 EC$[1](1296,4)=WAREHOUSE$; EXTRACT RECORD (33005,KEY=EC$[1](1,7),DOM=*RETURN)ECB$ ! Update active vars to session
8082 ECB$(1296,4)=WAREHOUSE$; WRITE RECORD (33005,KEY=EC$[1](1,7))ECB$
8084 LOG_MESG$="ACTIVE_WHSE|"+WAREHOUSE$+"|"; GOSUB LOG_MSG
8085 RETURN 
8089 ! 
8091 ERR_BAD_WHSE: ERRCODE$="102"; GOSUB CLEAR_XI; RETURN ! Whse specified is invalid
8099 ! 
8100 REM "Check given warehouse if valid for counting purposes
8105 CHECK_WAREHOUSE:
8110 BAD_WHSE$="Y"
8120 READ (Z[4],KEY=CHK_WHSE$,DOM=*NEXT)
8125 DIM ICL$(293),ICL[12]; READ (Z[4],END=*NEXT)IOL=IOL_ICL
8130 IF MID(ICL$,21,4)=CHK_WHSE$ THEN BAD_WHSE$="N"
8145 RETURN 
8149 ! 
8150 REM "Set active variables in session for later retrieval
8155 SET_ACTIVE_VARS:
8180 EC$[1](1300,10)=BIN$,EC$[1](1310,8)=LOT_NUM$; EXTRACT RECORD (33005,KEY=EC$[1](1,7),DOM=*RETURN)ECB$ ! Update active vars to session
8182 ECB$(1300,10)=BIN$,ECB$(1310,8)=LOT_NUM$; WRITE RECORD (33005,KEY=EC$[1](1,7))ECB$
8184 LOG_MESG$="ACTIVE_BIN|"+BIN$+"|ACTIVE_LOT_NUM|"+LOT_NUM$+"|"; GOSUB LOG_MSG
8195 RETURN 
8199 ! 
8700 GET_ERROR_SECTION:
8710 IF POS("?tf?error_section_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)ERRSEC_LINE$; ERRSEC_LINE$=FNBYB$(ERRSEC_LINE$); LINE$+=ERRSEC_LINE$+EOL$; GOTO *SAME
8712 ERROR_SECTION$=""; IF NUL(ERRCODE$) AND NUL(WARNCODE$) THEN RETURN 
8715 E1=POS("?tf?error_section_start?"=LINE$); IF E1>0 THEN LINE1$=MID(LINE$,1,E1-1); LINE$=LINE$(E1+24) ELSE RETURN 
8716 E2=POS("?tf?error_section_end?"=LINE$); IF E2>0 THEN LINE2$=MID(LINE$,E2+22); LINE$=LINE$(1,E2-1) ELSE RETURN 
8720 LINE$=SUB(LINE$,"?tf?errmsg?",ERRMSG$)
8725 LINE$=SUB(LINE$,"?tf?errcode?",ERRCODE$)
8740 ERROR_SECTION$=LINE$
8745 RETURN 
8749 ! 
8750 EVAL_ERR_CODE:
8755 IF NUL(ERRCODE$) AND NUL(WARNCODE$) THEN RETURN 
8760 IF NOT(NUL(ERRCODE$)) THEN ERRCODE$=FN%GET_BASENAME$(PGN)+"-"+ERRCODE$ ELSE ERRCODE$=FN%GET_BASENAME$(PGN)+"-"+WARNCODE$
8765 IF NUL(ERRMSG$) THEN ERRMSG$=MSG(ERRCODE$)
8770 IF NUL(WARNCODE$) THEN IF NOT(NUL(ERROR_TEMPLATE$)) THEN TEMPLATE$=ERROR_TEMPLATE$; BYBINFO$[3]=ERROR_TEMPLATE$ ! Switch to error template, but only if it is not warning, and if an error template was specified
8795 RETURN 
8799 ! 
8800 DEF FNBYB$(LOCAL DATA$)
8801 ! Send DATA$ through EC3BYB
8820 CALL "EC3BYB",ERR=*NEXT,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,DATA$,BYBINFO${ALL},BYBOPTIONS$,100
8840 RETURN DATA$
8845 END DEF
8849 ! 
8920 DEF FNN(LOCAL DATA$)
8925 LINE$=LINE1$+DATA$+LINE2$
8930 RETURN 0
8940 END DEF
8949 ! 
8950 SET_XI:
8955 SET_PARAM 'XI'
8960 RETURN 
8970 CLEAR_XI:
8980 SET_PARAM -'XI'
8990 RETURN 
8999 ! 
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$); REM "131928
9090 GOTO 9900
9900 REM "End
9905 IF NOT(NUL(ERRCODE$)) THEN LOG_MESG$="ERRCODE|"+ERRCODE$+"|"+ERRMSG$+"|"; GOSUB LOG_MSG
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9950 EXIT 
9999 END 
56001 REM "255937-Inventory counting in WMS is displaying the sell unit qty   
56002 REM "255914-Display Item code in Suggested Count Entry section
