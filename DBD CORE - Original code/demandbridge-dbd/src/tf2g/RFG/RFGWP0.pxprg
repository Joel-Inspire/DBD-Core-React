0010 REM "WMS Picking <RFGWP0>"
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 02/12/14 - 14.421944 - crg - SSP# 268441
0037 REM "268441-WMS - Picking                                               
0040 REM "Copyright 2014 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0100 SETERR 9000
0110 X0$="RFGWP0",X1$="WMS Picking"
0120 EOL$=ATH(STP(EC_PARM$(57,8),1))
0130 M1I$="###,###,##0-",M1D$="###,###0.00-"
0300 REM "IOLISTS
0305 IOL_RFS:IOLIST RFS$,RFS{ALL}
0310 IOL_RFK:IOLIST RFK$
0320 IOL_RF2:IOLIST RF2$
0325 IOL_RFZ:IOLIST RFZ$
0330 IOL_ECB:IOLIST ECB$
0340 IOL_FS1:IOLIST FS1$
0350 IOL_FTO:IOLIST FTO$
0360 IOL_FS2:IOLIST FS2$,FS2{ALL}
0370 IOL_PO2:IOLIST PO2$,PO2{ALL}
0375 IOL_FM1:IOLIST FM1$,FM1{ALL}
0380 IOL_IC0:IOLIST IC0$,IC0{ALL}
0390 IOL_AP4:IOLIST AP4$
0400 IOL_PO3:IOLIST PO3$,PO3{ALL}
0410 IOL_IC1:IOLIST IC1$,IC1{ALL}
0420 IOL_RFB:IOLIST RFB$,RFB{ALL}
0430 IOL_ICF:IOLIST ICF$,ICF{ALL}
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01O RFK...  02O RF2...  03O RFI...  04O RFB...  05O ICF...  06O FM1...  07O IC0...  08O AP4...  09O FS2... 10O FS1...  11O FTO...  12O PO2...  13O ZZPARM  15O PO3...  16O IC1...  17O RFS...  18O RFA...  19O RFQ...  20OSRFS...  21O PO6...  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0590 READ (Z[13],KEY=X3$(9,3)+"I/C")ICPARM$
0599 ! 
0600 REM "Get WMS User
0610 FIND (Z[1],KEY=EC$[2](1,15))IOL=IOL_RFK
0620 GOSUB GET_AVAILABLE_CARTS
0900 ! 
0910 DIM RFS_IN$(1006),RFS_IN[5],RFS_SET[5],RFS_IN_DATA$[2000],RFS_IN_DATA[2000,5],RFS_SET_DATA[2000,5]
0999 ! 
1000 REM "Process DATA array
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1020 T_IN=POS("."=TAG$); IF T_IN THEN TAG_PARM$=MID(TAG$,T_IN+1),TAG$=MID(TAG$,1,T_IN-1) ELSE TAG_PARM$=""
1025 SWITCH TAG$ ! 1185 end switch
1026 CASE "new_cart"; IF UCS(VALUE$)="Y" THEN NEW_CART$="Y" END_IF ; BREAK
1027 CASE "new_order"; IF UCS(VALUE$)="Y" THEN NEW_ORDER$="Y" END_IF ; BREAK
1028 CASE "cart"; CART$=PAD(VALUE$,10); BREAK
1029 CASE "order_number"; ORD_NUMBER$=VALUE$; BREAK
1035 CASE "view_cart"; IF UCS(VALUE$)="Y" THEN VIEW_CART$="Y" END_IF ; BREAK
1038 CASE "complete"; IF UCS(VALUE$)="Y" THEN COMPLETE$="Y" END_IF ; BREAK
1039 CASE "cancel"; IF UCS(VALUE$)="Y" THEN CANCEL$="Y" END_IF ; BREAK
1040 CASE "pick"; IF UCS(VALUE$)="Y" THEN PICK$="Y" END_IF ; BREAK
1060 CASE "pick_qty"; GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO *BREAK ELSE FOR VAL_INDEX=1 TO VAL_COUNT; RFS_IN_DATA[VAL_INDEX,1]=-1; IF NOT(NUL(VAL$[VAL_INDEX])) THEN RFS_IN_DATA[VAL_INDEX,1]=NUM(VAL$[VAL_INDEX],ERR=*PROCEED) END_IF ; NEXT VAL_INDEX; BREAK
1085 ! CASE "change_qty"; UPDATE_CART$="Y",CHANGE_QUANTITY$="Y"; GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO *BREAK ELSE FOR VAL_INDEX=1 TO VAL_COUNT; RFS_IN_DATA[VAL_INDEX,1]=-1; IF NOT(NUL(VAL$[VAL_INDEX])) THEN RFS_IN_DATA[VAL_INDEX,1]=NUM(VAL$[VAL_INDEX],ERR=*PROCEED) END_IF ; NEXT VAL_INDEX; BREAK
1090 CASE "rfs_key"; GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO *BREAK ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF NOT(NUL(VAL$[VAL_INDEX])) THEN RFS_IN_DATA$[VAL_INDEX](1,22)=UCS(VAL$[VAL_INDEX]) END_IF ; NEXT VAL_INDEX; BREAK
1180 DEFAULT ; VIA TAG$=VALUE$; BREAK ! Set to same name variable as TAG$
1185 END SWITCH ! 1050
1190 NEXT I
1195 DIM BYBINFO$[5]; BYBINFO$[1]=PGN,BYBINFO$[2]="20140212",BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1200 REM "Process input
1201 IF POS("P"=RFK$(111,20))=0 THEN ERRCODE$="0"; GOTO 1500
1205 PROCESS_CART:
1210 IF NOT(NUL(CART$)) THEN IF CART$<>EC$[1](1277,10) THEN GOSUB SET_ACTIVE_CART; IF NOT(NUL(ERRCODE$)) THEN GOTO 1500 END_IF ; END_IF ELSE CART$=EC$[1](1277,10)
1220 IF NUL(CART$) THEN IF NEW_CART$<>"Y" THEN ERRCODE$="1"; GOTO 1500 ELSE IF NUL(BINLIST$) THEN ERRCODE$="105"; GOTO 1500
1244 IF VIEW_CART$="Y" THEN GOTO 1500
1245 PROCESS_ORD_NUMBER:
1250 IF NOT(NUL(ORD_NUMBER$)) THEN GOSUB PARSE_ORDNUM; GOSUB VALIDATE_ORDER; IF NOT(NUL(ERRCODE$)) THEN GOTO 1500 END_IF ELSE ORD_NUMBER$=EC$[1](1287,8)
1260 IF NUL(ORD_NUMBER$) THEN IF NEW_ORDER$<>"Y" THEN ERRCODE$="2" END_IF ; GOTO 1500
1290 IF PICK$="Y" THEN GOSUB UPDATE_CART; IF NOT(NUL(ERRCODE$)) THEN GOTO 1500
1499 ! 
1500 REM "Fill out the template
1503 GOSUB EVAL_ERR_CODE
1504 IF NOT(NUL(%BASIC2$)) OR %NEW_CALL_PROG THEN GOTO 2990 ! Skip outputting template if additional program to be done
1505 CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1510 READ (100,END=2950)LINE$; LINE$=FNBYB$(LINE$)
1515 CHKTAG=1
1520 WHILE CHKTAG ! 2800 wend
1522 P1=MSK(LINE$,"\?tf\?[^?]*\?"); IF P1=0 THEN CHKTAG=0; BREAK
1530 TAG$=LINE$(P1,MSL); LINE1$=LINE$(1,P1-1),LINE2$=MID(LINE$,P1+MSL)
1600 SWITCH TAG$ ! 2790 end switch
1603 CASE "?tf?cart?"
1606 MX=FNN(STP(CART$,2)); BREAK
1609 CASE "?tf?order_number?"
1612 MX=FNN(STP(ORD_NUMBER$,2)); BREAK
1615 CASE "?tf?order_number_fmt?"
1618 MX=FNN(FN%ZZDISP$(ORD_NUMBER$,"O/P")); BREAK
1621 CASE "?tf?pick_cart_list?"
1624 GOSUB GET_CART_LIST; MX=FNN(CART_LIST$); BREAK
1627 CASE "?tf?order_lots_start?"
1630 GOSUB GET_ORDER_LOT_LINES; LINE$=OLL_SECTION$; BREAK
2600 CASE "?tf?error_section_start?"
2603 GOSUB GET_ERROR_SECTION; LINE$=ERROR_SECTION$; BREAK
2618 CASE "?tf?uom_list?"
2621 GOSUB GET_UOM_LIST; MX=FNN(UOMLIST$); BREAK
2640 CASE "?tf?display_pick_cart_start?"
2645 GOSUB DISPLAY_PICK_CART; LINE$=CART_SECTION$; BREAK
2670 CASE "?tf?prev_item_cust_code?"
2672 MX=FNN(STP(ECB$(1178,10),2)); BREAK
2674 CASE "?tf?prev_item_cust_code_fmt?"
2676 MX=FNN(STP(FN%ZZDISP$(ECB$(1178,10),"A/R"),2)); BREAK
2678 CASE "?tf?prev_item_code?"
2680 MX=FNN(STP(ECB$(1188,10),2)); BREAK
2682 CASE "?tf?prev_item_key?"
2684 MX=FNN(ECB$(1178,20)); BREAK
2785 DEFAULT ; LINE$=LINE1$+LINE2$ ! Unknown tag, discard
2790 END SWITCH ! 1600
2800 WEND ! 1520
2810 PRINT (OUTPUT)LINE$,EOL$,
2900 GOTO 1510; REM next read
2990 GOTO 9900
2999 ! 
5000 REM "take Q$, try to figure out date and return in Q$
5001 REM "assume MM?DD?YY(YY) format where we don't care about ?'s. if only YY then pivot on 60
5005 CONVERT_DATE:
5010 IF LEN(Q$)=7 AND Q$(2,1)="/" THEN Q$="0"+Q$
5015 IF LEN(Q$)<6 THEN GOTO ERR_INVALID_DATE ELSE IF LEN(Q$)>=8 THEN Q$=Q$(1,2)+Q$(4,2)+Q$(7); IF LEN(Q$)>8 THEN Q$=Q$(1,8)
5020 REM "NOW in MMDDYY.. format
5025 IF LEN(Q$(5))>2 THEN YY$=Q$(5) ELSE IF Q$(5)<"60" THEN YY$="20"+Q$(5) ELSE YY$="19"+Q$(5)
5030 TMP$=Q$,Q$=DIM(6),Q$=CHR(NUM(YY$(1,3),ERR=ERR_INVALID_DATE)-125,ERR=ERR_INVALID_DATE)+YY$(4,1)+TMP$(1,4)
5045 RETURN 
5046 ERR_INVALID_DATE: ERRCODE$="401"; RETURN 
5049 ! 
5050 REM "Unit of Measure
5055 GET_UOM_FORMATTED:
5060 U=1 ! Given U$ and U_QPM, get components required to calculate display units
5065 DIM UOM[2]; FIND (Z[13],KEY="U/M"+U$,DOM=*RETURN)UOM$,UOM[0],UOM[1]
5070 IF UOM$(20,1)="Y" THEN U=UOM[1] ELSE U=U_QPM
5080 IF U=0 THEN U=1
5095 RETURN 
5099 ! 
5100 LOG_MSG:! Add message to log file
5110 MOUT$="SESSION ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|"
5135 MX=FN%_LOG_MESSAGE("MESG",MOUT$+LOG_MESG$)
5145 RETURN 
5149 ! 
6100 REM "Given FIND_BIN$, get bin record and information
6105 GET_BIN_INFO:
6110 DIM RFB$(1000),RFB[4]; FIND (Z[4],KEY=FIND_BIN$+FIND_WHSE$,ERR=ERR_INVALID_BIN)IOL=IOL_RFB
6115 BIN_FMT$=FIND_BIN$; IF NOT(NUL(RFB$(69,15))) THEN BIN_MASK$=PAD(STP(RFB$(69,15),2),15,1,"X"); BIN_FMT$=STR(FIND_BIN$:BIN_MASK$)
6120 RETURN 
6121 ! 
6122 ERR_INVALID_BIN: ERRCODE$="103"; RETURN 
6125 ! 
6200 REM "Get Units of measure list in the form of HTML select dropdown
6201 GET_UOM_LIST:
6205 GOSUB SET_XI
6210 UOMLIST$=""
6215 READ (Z[13],KEY="U/M",DOM=*NEXT)
6220 UOMK$=KEY(Z[13],END=6239); READ (Z[13],KEY=UOMK$)UOMREC$; IF MID(UOMREC$,1,3)<>"U/M" THEN GOTO 6239
6225 IF MID(UOMREC$,22,1)<>"Y" THEN UOMLIST$=UOMLIST$+"<option value="+QUO+UOMREC$(4,4)+QUO+">"+UOMREC$(4,4)+"</option>"+EOL$
6230 GOTO 6220
6240 GOSUB CLEAR_XI
6245 RETURN 
6249 ! 
6700 REM "Record active item in session
6705 SET_ACTIVE_ITEM:
6710 EC$[1](1178,20)=PO2$(91,20); EXTRACT RECORD (33005,KEY=EC$[1](1,7),DOM=*RETURN)ECB$ ! Update active item to session
6715 ECB$(1178,20)=PO2$(91,20); WRITE RECORD (33005,KEY=EC$[1](1,7))ECB$
6720 LOG_MESG$="ACTIVE_ITEM|"+PO2$(91,20)+"|"; GOSUB LOG_MSG
6725 RETURN 
6729 ! 
6800 REM "Display lot, item and bin info for the specified RFS entry
6805 GET_RFS_SECTION:
6810 LOT_SECTION$="",LI_TAGS$="001<po_number>002<po_number_fmt>003<item_key>004<item_cust_code>005<item_cust_code_fmt>006<item_code>007<vendor_code_fmt>008<bin>009<icf_key>010<qty>011<qty_in_eaches>012<uom_fmt>013<whse>014<bin_fmt>015<lot_num>016<order_number>017<order_number_fmt>018<order_line_number>019<receipt_date>020<seq_num>021<numbered_item_start>022<rfs_key>023<ord_qty>024<ship_qty>"
6815 DIM ICF$(270),ICF[12]; ICFK$=PAD(MID(RFS$,23,20)+MID(RFS$,105,12),32); FIND (Z[5],KEY=ICFK$,KNO=0,DOM=*CONTINUE)IOL=IOL_ICF
6827 FIND_BIN$=ICF$(100,10),FIND_WHSE$=ICF$(21,4); GOSUB GET_BIN_INFO
6828 QTY_IN_EACHES=ICF[4]*MAX(ICF[3],1)*MAX(ICF[2],1); UOM_FORMATTED$=STP(ICF$(121,4),2)+"/"; IF ICF[2]<>0 THEN UOM_FORMATTED$+=STR(ICF[2])+" "+STP(ICF$(125,4),2)+"/" END_IF ; UOM_FORMATTED$+=STR(ICF[3])
6829 GOSUB GET_ITEM_FROM_LOT
6830 LI_SECTION$=RFS_SECTION$
6833 LIINDEX=POS("?tf?"=LI_SECTION$); IF LIINDEX=0 THEN GOTO 6891
6836 LIEND_INDEX=POS("?"=LI_SECTION$(LIINDEX+4)),LITAG$=LI_SECTION$(LIINDEX+4,LIEND_INDEX-1),LI1$=LI_SECTION$(1,LIINDEX-1),LI2$=LI_SECTION$(LIINDEX+LIEND_INDEX+4),LIPOS=POS("<"+LITAG$+">"=LI_TAGS$); IF LIPOS=0 THEN LI_SECTION$=LI1$+LI2$,LIINDEX=0 ELSE LIINDEX=NUM(LI_TAGS$(LIPOS-3,3))
6840 ON LIINDEX GOTO 6889,6841,6842,6843,6844,6845,6846,6847,6848,6849,6850,6851,6852,6853,6854,6855,6856,6857,6858,6859,6860,6861,6862,6863,6864,6889
6841 LI_SECTION$=LI1$+ICF$(41,9)+LI2$; GOTO 6890; REM " po_number
6842 LI_SECTION$=LI1$+FN%ZZDISP$(ICF$(41,9),"P/O")+LI2$; GOTO 6890; REM " po_number_fmt
6843 LI_SECTION$=LI1$+ICF$(1,20)+LI2$; GOTO 6890; REM " item_key
6844 LI_SECTION$=LI1$+STP(ICF$(1,10),2)+LI2$; GOTO 6890; REM " item_cust_code
6845 LI_SECTION$=LI1$+STP(FN%ZZDISP$(ICF$(1,10),"A/R"),2)+LI2$; GOTO 6890; REM " item_cust_code_fmt
6846 LI_SECTION$=LI1$+STP(ICF$(11,10),2)+LI2$; GOTO 6890; REM " item_code
6847 LI_SECTION$=LI1$+STP(FN%ZZDISP$(ICF$(68,10),"A/P"),2)+LI2$; GOTO 6890; REM " vendor_code_fmt
6848 LI_SECTION$=LI1$+STP(ICF$(100,10),2)+LI2$; GOTO 6890; REM " bin
6849 LI_SECTION$=LI1$+ICFK$+LI2$; GOTO 6890; REM " icf_key
6850 IF FPT(ICF[4])=0 THEN M0$=M1I$ ELSE M0$=M1D$ END_IF ; LI_SECTION$=LI1$+STR(ICF[4]:M0$)+LI2$; GOTO 6890; REM " qty
6851 LI_SECTION$=LI1$+STR(QTY_IN_EACHES:M1I$)+LI2$; GOTO 6890; REM " qty_in_eaches
6852 LI_SECTION$=LI1$+UOM_FORMATTED$+LI2$; GOTO 6890; REM " uom_fmt
6853 LI_SECTION$=LI1$+ICF$(21,4)+LI2$; GOTO 6890; REM " whse
6854 BIN_FMT$=ICF$(100,10); IF NOT(NUL(RFB$(69,15))) THEN BIN_MASK$=PAD(STP(RFB$(69,15),2),15,1,"X"); BIN_FMT$=STR(ICF$(100,10):BIN_MASK$) END_IF ; LI_SECTION$=LI1$+STP(BIN_FMT$,2)+LI2$; GOTO 6890; REM " bin_fmt
6855 LI_SECTION$=LI1$+ICF$(234,8)+LI2$; GOTO 6890; REM " lot_num
6856 LI_SECTION$=LI1$+ICF$(110,8)+LI2$; GOTO 6890; REM " order_number
6857 LI_SECTION$=LI1$+FN%ZZDISP$(ICF$(110,8),"O/P")+LI2$; GOTO 6890; REM " order_number_fmt
6858 LI_SECTION$=LI1$+ICF$(118,3)+LI2$; GOTO 6890; REM " order_line_number
6859 IF NUL(ICF$(25,6)) THEN TMP$="" ELSE CALL "ZZDISP","DX",ICF$(25,6),"",X3$,TMP$,"",0,0,X4$ END_IF ; LI_SECTION$=LI1$+TMP$+LI2$; GOTO 6890; REM " receipt_date
6860 LI_SECTION$=LI1$+ICF$(31,2)+LI2$; GOTO 6890; REM " seq_num
6861 GOSUB GET_NUMBERED_SECTION; LI_SECTION$=LI1$+NUMBERED_SECTION$+LI2$; GOTO 6890; REM " numbered_item_start
6862 LI_SECTION$=LI1$+MID(RFS$,1,22)+LI2$; GOTO 6890; REM " rfs_key
6863 LI_SECTION$=LI1$+STR(RFS[0])+LI2$; GOTO 6890; REM " ord_qty
6864 LI_SECTION$=LI1$+STR(RFS[1])+LI2$; GOTO 6890; REM " ship_qty
6889 LI_SECTION$=LI1$+LI2$; GOTO 6890; REM " Unknown tag, strip off
6890 GOTO 6833
6891 LOT_SECTION$+=LI_SECTION$
6895 RETURN 
6899 ! 
6900 REM "Display cart contents - all RFS recs that are in specified cart
6905 DISPLAY_PICK_CART:
6952 CART_SECTION$="",LOT_SECTION$=""
6953 IF POS("?tf?display_pick_cart_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)TMPLINE$; TMPLINE$=FNBYB$(TMPLINE$); LINE$+=TMPLINE$+EOL$; GOTO *SAME
6954 E1=POS("?tf?display_pick_cart_start?"=LINE$); IF E1>0 THEN LINE1$=MID(LINE$,1,E1-1); LINE$=LINE$(E1+28) ELSE RETURN 
6955 E2=POS("?tf?display_pick_cart_end?"=LINE$); IF E2>0 THEN LINE2$=MID(LINE$,E2+26); LINE$=LINE$(1,E2-1) ELSE RETURN 
6956 IF NUL(CART$) THEN GOTO 6991
6959 READ (Z[17],KEY=CART$,KNO=4,DOM=*NEXT)
6960 RFSK4$=KEY(Z[17],END=6995); IF MID(RFSK4$,1,10)<>CART$ THEN GOTO 6995 ELSE DIM RFS$(1006),RFS[5]; READ (Z[17],KEY=RFSK4$)IOL=IOL_RFS
6965 RFS_SECTION$=LINE$; GOSUB GET_RFS_SECTION
6991 CART_SECTION$+=LOT_SECTION$; GOTO 6960
6995 RETURN 
6999 ! 
7000 REM "Display order lots - all RFS recs for a specific order
7005 GET_ORDER_LOT_LINES:
7052 OLL_SECTION$="",LOT_SECTION$=""
7053 IF POS("?tf?order_lots_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)TMPLINE$; TMPLINE$=FNBYB$(TMPLINE$); LINE$+=TMPLINE$+EOL$; GOTO *SAME
7054 E1=POS("?tf?order_lots_start?"=LINE$); IF E1>0 THEN LINE1$=MID(LINE$,1,E1-1); LINE$=LINE$(E1+21) ELSE RETURN 
7055 E2=POS("?tf?order_lots_end?"=LINE$); IF E2>0 THEN LINE2$=MID(LINE$,E2+19); LINE$=LINE$(1,E2-1) ELSE RETURN 
7056 IF NUL(ORD_NUMBER$) THEN GOTO 7091
7059 READ (Z[17],KEY=ORD_NUMBER$,KNO=0,DOM=*NEXT)
7060 RFSK$=KEY(Z[17],END=7095); IF MID(RFSK$,1,8)<>ORD_NUMBER$ THEN GOTO 7095 ELSE DIM RFS$(1006),RFS[5]; READ (Z[17],KEY=RFSK$)IOL=IOL_RFS
7065 RFS_SECTION$=LINE$; GOSUB GET_RFS_SECTION
7091 OLL_SECTION$+=LOT_SECTION$; GOTO 7060
7095 RETURN 
7099 ! 
7300 REM "Retreive 1 or more values in VALUE$ place in VAL$[] and set VAL_COUNT-Values seperated by ', 's (that is comma + blank), current max of 2002 values
7301 REM "We will add all values blank or not
7305 PARSE_DATA_TAG:
7307 DIM VAL$[2000]; VAL_COUNT=0
7310 IF VAL_COUNT=2000 THEN GOTO 7340 ELSE VP=POS(", "=VALUE$); IF VP=0 THEN GOTO 7335
7315 VAL_COUNT=VAL_COUNT+1; IF VP=1 THEN VAL$[VAL_COUNT]="",VALUE$=VALUE$(3); GOTO 7310 ELSE VAL$[VAL_COUNT]=VALUE$(1,VP-1); IF VP=LEN(VALUE$) THEN VALUE$=""; GOTO 7340 ELSE VALUE$=VALUE$(VP+2); GOTO 7310
7335 REM "finish up last one
7337 VAL_COUNT=VAL_COUNT+1; VAL$[VAL_COUNT]=VALUE$
7340 IF VAL_COUNT>HIGHEST_VAL_COUNT THEN FOR TMP_INDEX=HIGHEST_VAL_COUNT+1 TO VAL_COUNT; RFS_IN_DATA$[TMP_INDEX]=DIM(LEN(RFS_IN$)); NEXT TMP_INDEX; HIGHEST_VAL_COUNT=VAL_COUNT; REM "If new higher val count value then initialize data array
7345 RETURN 
7349 ! 
7400 REM "Update cart - perform all cart related change functions here
7405 UPDATE_CART:
7410 ! IF UPDATE_CART$<>"Y" THEN RETURN 
7430 FOR UPD_INDEX=1 TO HIGHEST_VAL_COUNT
7432 DIM RFS$(1006),RFS[5]; READ (Z[17],KEY=MID(RFS_IN_DATA$[UPD_INDEX],1,22))IOL=IOL_RFS; IF NOT(NUL(RFS$(189,10))) AND RFS$(189,10)<>CART$ THEN GOTO *CONTINUE
7435 IF RFS_IN_DATA[UPD_INDEX,1]>=0 THEN {
7440 ! IF RFS_IN_DATA[UPD_INDEX,1]=0 THEN REMOVE (Z[17],KEY=MID(RFS_IN_DATA$[UPD_INDEX],1,22),ERR=*PROCEED); CONTINUE ! TODO : FTO_PONUM$=MID(RFS_IN_DATA$[UPD_INDEX],1,9); GOSUB UNLOCK_PO; CONTINUE
7450 IF RFS_IN_DATA[UPD_INDEX,1]>0 THEN {
7455 RFS[1]=RFS_IN_DATA[UPD_INDEX,1]; IF NUL(RFS$(189,10)) THEN RFS$(189,10)=CART$,RFS$(117,15)=EC$[2](1,15)
7460 WRITE (Z[17],KEY=MID(RFS_IN_DATA$[UPD_INDEX],1,22))IOL=IOL_RFS
7465  }
7467  }
7480 NEXT UPD_INDEX
7495 RETURN 
7499 ! 
7550 REM "Cancel PICKING for all ORDERS in cart - typically cart will have one ORDER, but could be more
7551 CANCEL_PICKING:
7555 READ (Z[20],KEY=CART$,KNO=CART_DISP_KEY,DOM=*NEXT) ! RFS
7560 RFSK$=KEY(Z[20],END=UNLOCK_CART); DIM RFS$(1006),RFS[5]; READ (Z[20],KEY=RFSK$)IOL=IOL_RFS; IF RFS$(189,10)<>CART$ THEN GOTO UNLOCK_CART
7563 ! REMOVE (Z[17],KEY=RFS$(1,22),ERR=ERR_CANCEL_RF2) ! FTO_PONUM$=RF1$(1,9); GOSUB UNLOCK_PO
7565 GOTO 7560 ! Repeat removal of first line in cart. Note: UNLOCK_PO will have moved the RF1 pointer so reset it
7570 UNLOCK_CART:
7575 EXTRACT (Z[2],KEY=CART$,DOM=ERR_CART_BUSY)IOL=IOL_RF2
7580 RF2$(11,1)="",RF2$(12,15)=""
7585 WRITE (Z[2],KEY=CART$)IOL=IOL_RF2
7587 GOSUB CLEAR_ACTIVE_SESSION_VARS
7588 ! CALL "UPDFTO;CANCEL_RECV",Z[11],CART$,"" ! SSP 270870
7590 RETURN 
7591 ! 
7596 ERR_CANCEL_RF2: ERRCODE$="501"; RETURN 
7599 ! 
7600 REM "Complete pickinNg for all orders in cart
7605 COMPLETE_PICKING:
7607 STOPOVER_CART=1 ! Assume purely stopover product in cart, and adjust as we go
7610 READ (Z[20],KEY=CART$,KNO=CART_DISP_KEY,DOM=*NEXT)
7615 RFSK$=KEY(Z[20],END=UNLOCK_CART_CMPL); DIM RFS$(1006),RFS[5]; READ (Z[20],KEY=RFSK$)IOL=IOL_RFS; IF RF1$(189,10)<>CART$ THEN GOTO UNLOCK_CART_CMPL
7620 IF MID(RF1$,96,1)="Y" THEN {
7625 ! REMOVE (Z[17],KEY=RF1$(1,12)+RF1$(140,8)+RF1$(196,3),ERR=ERR_COMPLETE_STOPOVER) ! Remove stopover entry from RF1
7630 WRITE (Z[21],KEY="L"+RF1$(56,4)+RF1$(1,8)+RF1$(199,3)) ! Print packing list for this stopover line
7635 FTO_PONUM$=RF1$(1,9) ! GOSUB UNLOCK_PO ! Check if the PO's receiving lock can be cleared     
7640  } ELSE {
7645 STOPOVER_CART=0 ! At least one entry to be put away so not a purely stopover cart
7650  }
7655 GOTO 7615
7660 UNLOCK_CART_CMPL:
7665 EXTRACT (Z[2],KEY=CART$,DOM=ERR_CART_BUSY)IOL=IOL_RF2
7670 RF2$(12,15)=""; IF STOPOVER_CART THEN RF2$(11,1)="" ELSE RF2$(11,1)="C"
7680 WRITE (Z[2],KEY=CART$)IOL=IOL_RF2
7685 GOSUB CLEAR_ACTIVE_SESSION_VARS
7690 RETURN 
7691 ! 
7696 ERR_COMPLETE_STOPOVER: ERRCODE$="601"; RETURN 
7699 ! 
7800 REM "Clear active vars stored in session after receiving complete or cancelled
7810 CLEAR_ACTIVE_SESSION_VARS:
7820 EC$[1](1277,10)="",EC$[1](1287,9)=""; EXTRACT RECORD (33005,KEY=EC$[1](1,7),DOM=*RETURN)ECB$ ! Clear active cart and PO number in session
7830 ECB$(1277,10)="",ECB$(1287,9)=""; WRITE RECORD (33005,KEY=EC$[1](1,7))ECB$
7845 RETURN 
7849 ! 
8000 GET_AVAILABLE_CARTS:
8005 WHSLIST$=MID(RFK$,23,40)
8010 GOSUB SET_XI; CALL "UPDRF2;GETBINLIST",Z[2],"P",BINLIST$,EC$[2](1,15),WHSLIST$
8011 GOSUB CLEAR_XI
8015 RETURN 
8019 ! 
8020 GET_CART_LIST: CART_LIST$=""; IF NUL(BINLIST$) THEN RETURN 
8025 FOR K=1 TO LEN(BINLIST$) STEP 10
8027 SELECTED$=""; IF PAD(CART$,10)=MID(BINLIST$,K,10) THEN SELECTED$=" selected"
8030 CART_LIST$+="<option value="+QUO+BINLIST$(K,10)+QUO+SELECTED$+">"+BINLIST$(K,10)+"</option>"+EOL$
8035 NEXT K
8040  }
8045 RETURN 
8049 ! 
8050 SET_ACTIVE_CART:
8052 GOSUB SET_XI; FIND (Z[2],KEY=CART$,DOM=ERR_BAD_CART)IOL=IOL_RF2
8056 GOSUB CLEAR_XI
8060 IF RF2$(11,1)<>"P" THEN GOTO ERR_NOT_PICK_CART
8064 IF RF2$(12,15)<>EC$[2](1,15) THEN GOTO ERR_CART_GRAB
8068 EXTRACT (Z[2],KEY=CART$,DOM=ERR_CART_BUSY)IOL=IOL_RF2
8072 RF2$(11,1)="P",RF2$(12,15)=EC$[2](1,15)
8076 WRITE (Z[2],KEY=CART$)IOL=IOL_RF2
8080 EC$[1](1277,10)=CART$; EXTRACT RECORD (33005,KEY=EC$[1](1,7),DOM=*RETURN)ECB$ ! Update active cart to session
8082 ECB$(1277,10)=CART$; WRITE RECORD (33005,KEY=EC$[1](1,7))ECB$
8084 LOG_MESG$="ACTIVE_CART|"+CART$+"|"; GOSUB LOG_MSG
8085 RETURN 
8089 ! 
8090 REM "Cart - Errors
8091 ERR_BAD_CART: ERRCODE$="101"; GOSUB CLEAR_XI; RETURN ! Cart specified is invalid
8092 ERR_CART_BUSY: ERRCODE$="102"; RETURN ! Cart is currently busy and cannot be accessed
8093 ERR_NOT_PICK_CART: ERRCODE$="103"; RETURN ! Cart specified is currently not a Pick cart
8094 ERR_CART_GRAB: ERRCODE$="104"; RETURN ! Cart is in use by a different WMS user
8098 RETURN 
8099 ! 
8100 PARSE_ORDNUM:
8110 ORD_NUMBER$=STP(ORD_NUMBER$,3,"-"); IF LEN(ORD_NUMBER$)<8 THEN ORD_NUMBER$="00"+ORD_NUMBER$
8120 ORD_NUMBER$=PAD(ORD_NUMBER$,8)
8145 RETURN 
8149 ! 
8150 VALIDATE_ORDER:
8152 GOSUB SET_XI; FIND (Z[10],KEY=ORD_NUMBER$,DOM=ERR_BAD_ORD)IOL=IOL_FS1; GOSUB CLEAR_XI ! Get FS1 header
8155 IF FS1$(63,1)="P" THEN {
8170 IF RFK$(107,1)<>"Y" THEN ERRCODE$="203"; GOTO *RETURN ELSE WARNCODE$="204"
8180  }
8181 IF FS1$(63,1)="S" THEN {
8182 NUM_RFS=0; READ (Z[17],KEY=ORD_NUMBER$,KNO=0,DOM=*NEXT)
8185 RFSK$=KEY(Z[17],END=7095); IF MID(RFSK$,1,8)<>ORD_NUMBER$ THEN GOTO 8190 ELSE DIM RFS$(1006),RFS[5]; READ (Z[17],KEY=RFSK$)IOL=IOL_RFS; NUM_RFS++
8187 IF NOT(NUL(MID(RFS$,117,15))) AND MID(RFS$,117,15)<>EC$[2](1,15) THEN ERRCODE$="202"; GOTO *RETURN
8189 GOTO 8185
8190 IF NUM_RFS<=0 THEN ERRCODE$="205"; GOTO *RETURN
8200  }
8220 RETURN 
8224 ! 
8225 SET_ACTIVE_ORDER:
8250 EC$[1](1287,9)=ORD_NUMBER$; EXTRACT RECORD (33005,KEY=EC$[1](1,7),DOM=*RETURN)ECB$ ! Update active order to session
8255 ECB$(1287,9)=ORD_NUMBER$; WRITE RECORD (33005,KEY=EC$[1](1,7))ECB$
8280 LOG_MESG$="ACTIVE_ORDER|"+ORD_NUMBER$+"|"; GOSUB LOG_MSG
8285 RETURN 
8289 ! 
8290 REM "Picking Orders - Errors
8291 ERR_BAD_ORD: ERRCODE$="201"; GOSUB CLEAR_XI; RETURN ! Order number specified is invalid or does not exist
8299 ! 
8500 REM "Get the item information for a lot record
8505 GET_ITEM_FROM_LOT:
8510 ITEM_CUST_CODE$="",ITEM_CODE$="",ITEM_DESC$=""
8520 ITEM_CUST_CODE$=MID(ICF$,1,10),ITEM_CODE$=MID(ICF$,11,10),LOTTED_ITEM$="",ITEM_CIC_CODE$="",NUMBERED_ITEM$="",FORM_REV_DATE$=""
8525 DIM IC0$(188),IC0[40]; FIND (Z[7],KEY=ICF$(1,20),DOM=ERR_INVALID_ITEM)IOL=IOL_IC0
8530 ITEM_DESC$=MID(IC0$,21,40),LOTTED_ITEM$=MID(IC0$,112,1),ITEM_DESC2$=MID(IC0$,128,40)
8540 DIM FM1$(450),FM1[31]; FIND (Z[6],KEY=ICF$(1,20),DOM=*NEXT)IOL=IOL_FM1
8550 ITEM_CIC_CODE$=MID(FM1$,350,20),NUMBERED_ITEM$=MID(FM1$,104,1)
8555 FORM_REV_DATE$=MID(FM1$,167,6)
8585 RETURN 
8590 ! 
8591 ERR_INVALID_ITEM: ERRCODE$="301"; RETURN ! Invalid item referenced in lot
8599 ! 
8650 REM "Process section for numbered items
8651 GET_NUMBERED_SECTION:
8652 NUMBERED_SECTION$="",NI_TAGS$="001<item_key>002<item_cust_code>003<item_cust_code_fmt>004<item_code>005<item_desc>006<starting_num>007<ending_num>"
8655 E2=POS("?tf?numbered_item_end?"=LI2$); IF E2>0 THEN NI_SECTION$=LI2$(1,E2-1); LI2$=MID(LI2$,E2+22) ELSE RETURN 
8661 IF NUMBERED_ITEM$<>"Y" THEN NI_SECTION$=""; GOTO 8691
8667 NIINDEX=POS("?tf?"=NI_SECTION$); IF NIINDEX=0 THEN GOTO 8691
8668 NIEND_INDEX=POS("?"=NI_SECTION$(NIINDEX+4)),NITAG$=NI_SECTION$(NIINDEX+4,NIEND_INDEX-1),NI1$=NI_SECTION$(1,NIINDEX-1),NI2$=NI_SECTION$(NIINDEX+NIEND_INDEX+4),NIPOS=POS("<"+NITAG$+">"=NI_TAGS$); IF NIPOS=0 THEN NI_SECTION$=NI1$+NI2$,NIINDEX=0 ELSE NIINDEX=NUM(NI_TAGS$(NIPOS-3,3))
8669 ON NIINDEX GOTO 8689,8670,8671,8672,8673,8674,8675,8676,8689
8670 NI_SECTION$=NI1$+ICF$(1,20)+NI2$; GOTO 8690; REM " item_key
8671 NI_SECTION$=NI1$+STP(ICF$(1,10),2)+NI2$; GOTO 8690; REM " item_cust_code
8672 NI_SECTION$=NI1$+STP(FN%ZZDISP$(ICF$(1,10),"A/R"),2)+NI2$; GOTO 8690; REM " item_cust_code_fmt
8673 NI_SECTION$=NI1$+STP(ICF$(11,10),2)+NI2$; GOTO 8690; REM " item_code
8674 NI_SECTION$=NI1$+STP(ITEM_DESC$,2)+NI2$; GOTO 8690; REM " item_desc
8675 NI_SECTION$=NI1$+STP(ICF$(82,9),2)+NI2$; GOTO 8690; REM " starting_num
8676 NI_SECTION$=NI1$+STP(ICF$(91,9),2)+NI2$; GOTO 8690; REM " ending_num
8689 NI_SECTION$=NI1$+NI2$; GOTO 8690; REM " Unknown tag, strip off
8690 GOTO 8667
8691 NUMBERED_SECTION$+=NI_SECTION$ ! GOTO 8665
8695 RETURN 
8699 ! 
8700 GET_ERROR_SECTION:
8710 IF POS("?tf?error_section_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)ERRSEC_LINE$; ERRSEC_LINE$=FNBYB$(ERRSEC_LINE$); LINE$+=ERRSEC_LINE$+EOL$; GOTO *SAME
8712 ERROR_SECTION$=""; IF NUL(ERRCODE$) AND NUL(WARNCODE$) THEN RETURN 
8715 E1=POS("?tf?error_section_start?"=LINE$); IF E1>0 THEN LINE1$=MID(LINE$,1,E1-1); LINE$=LINE$(E1+24) ELSE RETURN 
8716 E2=POS("?tf?error_section_end?"=LINE$); IF E2>0 THEN LINE2$=MID(LINE$,E2+22); LINE$=LINE$(1,E2-1) ELSE RETURN 
8720 LINE$=SUB(LINE$,"?tf?errmsg?",ERRMSG$)
8725 LINE$=SUB(LINE$,"?tf?errcode?",ERRCODE$)
8740 ERROR_SECTION$=LINE$
8745 RETURN 
8749 ! 
8750 EVAL_ERR_CODE:
8755 IF NUL(ERRCODE$) AND NUL(WARNCODE$) THEN RETURN 
8760 IF NOT(NUL(ERRCODE$)) THEN ERRCODE$=FN%GET_BASENAME$(PGN)+"-"+ERRCODE$ ELSE ERRCODE$=FN%GET_BASENAME$(PGN)+"-"+WARNCODE$
8765 IF NUL(ERRMSG$) THEN ERRMSG$=MSG(ERRCODE$)
8770 IF NUL(WARNCODE$) THEN IF NOT(NUL(ERROR_TEMPLATE$)) THEN TEMPLATE$=ERROR_TEMPLATE$; BYBINFO$[3]=ERROR_TEMPLATE$ ! Switch to error template, but only if it is not warning, and if an error template was specified
8795 RETURN 
8799 ! 
8800 DEF FNBYB$(LOCAL DATA$)
8801 ! Send DATA$ through EC3BYB
8820 CALL "EC3BYB",ERR=*NEXT,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,DATA$,BYBINFO${ALL},BYBOPTIONS$,100
8840 RETURN DATA$
8845 END DEF
8849 ! 
8920 DEF FNN(LOCAL DATA$)
8925 LINE$=LINE1$+DATA$+LINE2$
8930 RETURN 0
8940 END DEF
8949 ! 
8950 SET_XI:
8955 SET_PARAM 'XI'
8960 RETURN 
8970 CLEAR_XI:
8980 SET_PARAM -'XI'
8990 RETURN 
8999 ! 
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$); REM "131928
9090 GOTO 9900
9900 REM "End
9905 IF NOT(NUL(ERRCODE$)) THEN LOG_MESG$="ERRCODE|"+ERRCODE$+"|"+ERRMSG$+"|"; GOSUB LOG_MSG
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9950 EXIT 
9999 END 
