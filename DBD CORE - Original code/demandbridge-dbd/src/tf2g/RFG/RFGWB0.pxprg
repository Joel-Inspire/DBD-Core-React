0010 REM "WMS Bin Transfer <RFGWB0>"
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 03/01/16 - 21.268611 - crg - SSP# 278898
0037 REM "278898-WMS Bin Inquiry and Change:  Did a bin transfer and the qty 
0040 REM "Copyright 2016 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0100 SETERR 9000
0110 X0$="RFGWB0",X1$="WMS Bin Transfer"
0120 EOL$=ATH(STP(EC_PARM$(57,8),1)),MAX_LOTS=1000
0130 M1I$="###,###,##0-",M1D$="###,###0.00-"
0300 REM "IOLISTS
0310 IOL_RFK:IOLIST RFK$
0320 IOL_RFB:IOLIST RFB$,RFB{ALL}
0330 IOL_FM1:IOLIST FM1$,FM1{ALL}
0340 IOL_IC0:IOLIST IC0$,IC0{ALL}
0345 IOL_ICL:IOLIST ICL$,ICL{ALL}
0350 IOL_ICF:IOLIST ICF$,ICF{ALL}
0355 IOL_ICF_NEW:IOLIST ICF_NEW$,ICF_NEW{ALL}
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01O RFK...  02O RFB... 04O ICL...  05O ICF...  06O FM0...  07O FM1...  08O IC0...  10O RFA...  13O ZZPARM  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0590 READ (Z[13],KEY=X3$(9,3)+"I/C")ICPARM$
0599 ! 
0600 REM "Get WMS User
0610 FIND (Z[1],KEY=EC$[2](1,15))IOL=IOL_RFK
0620 GOSUB GET_AVAILABLE_WHS
0630 OPEN_LOTS$="Y"; IF MID(RFK$,133,1)="Y" THEN OPEN_LOTS$="N" ! Allow access to open lots only by default; 273714-But if user is permitted, allow access to committed and counted lots as well
0635 SEARCH_MAX_ITEM_COUNT=50 ! 274768 - Default max search results count; can be overridden by user, capped by system at 999
0900 ! 
0910 DIM ICF_IN$(270),ICF_IN[12],ICF_SET[12],ICF_IN_DATA$[2000],ICF_IN_DATA[2000,12],ICF_SET_DATA[2000,12]
0999 ! 
1000 REM "Process DATA array
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1020 T_IN=POS("."=TAG$); IF T_IN THEN TAG_PARM$=MID(TAG$,T_IN+1),TAG$=MID(TAG$,1,T_IN-1) ELSE TAG_PARM$=""
1025 SWITCH TAG$ ! 1185 end switch
1026 CASE "new_transfer"; IF UCS(VALUE$)="Y" THEN NEW_TRANSFER$="Y" END_IF ; BREAK
1031 CASE "bin"; BIN$=PAD(VALUE$,10); BREAK
1032 CASE "lot_num"; LOT_NUM$=PAD(VALUE$,8); BREAK
1033 CASE "search_item_code"; SEARCH_ITEM_CODE$=UCS(VALUE$); BREAK ! 274768
1034 CASE "search_max_item_count"; SEARCH_MAX_ITEM_COUNT=NUM(VALUE$,ERR=*PROCEED); BREAK ! 274768 - Max number of search results to collect
1040 CASE "transfer"; IF UCS(VALUE$)="Y" THEN TRANSFER$="Y" END_IF ; BREAK
1150 CASE "transfer_icf_key"; TRANSFER_ICF_KEY$=PAD(VALUE$,32); BREAK
1151 CASE "transfer_qty"; TRANSFER_QTY$=VALUE$; BREAK
1152 CASE "transfer_bin"; TRANSFER_BIN$=PAD(VALUE$,10); BREAK
1153 CASE "transfer_lot_mode"; TRANSFER_LOT_MODE=NUM(VALUE$,ERR=*PROCEED); BREAK ! 272513 - 1: Single lot mode, 0 : Default, Unlimited Lot mode
1180 DEFAULT ; VIA TAG$=VALUE$,ERR=*PROCEED; BREAK ! Set to same name variable as TAG$
1185 END SWITCH ! 1050
1190 NEXT I
1195 DIM BYBINFO$[5]; BYBINFO$[1]=PGN,BYBINFO$[2]="20130118",BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1200 REM "Process input
1230 IF NOT(NUL(TRANSFER_ICF_KEY$)) THEN GOSUB GET_LOT_INFO_FROM_KEY; IF NOT(NUL(ERRCODE$)) THEN GOTO 1500
1250 IF (NOT(NUL(BIN$)) OR NOT(NUL(LOT_NUM$))) THEN GOSUB GET_LOT_INFO; GOSUB SET_ACTIVE_VARS ELSE IF (NOT(NUL(SEARCH_ITEM_CODE$))) THEN GOSUB GET_SEARCH_ITEM_INFO ELSE IF NEW_TRANSFER$<>"Y" THEN ERRCODE$="101" END_IF END_IF ; IF NOT(NUL(ERRCODE$)) THEN GOTO 1500 ! 274768 - search by item code
1255 IF TRANSFER$="Y" THEN GOSUB PROCESS_LOT_TRANSFER; IF NOT(NUL(ERRCODE$)) THEN GOTO 1500 ELSE WARNCODE$="200"; GOTO 1500
1499 ! 
1500 REM "Fill out the template
1503 GOSUB EVAL_ERR_CODE
1504 IF NOT(NUL(%BASIC2$)) OR %NEW_CALL_PROG THEN GOTO 2990 ! Skip outputting template if additional program to be done
1505 CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1510 READ (100,END=2950)LINE$; LINE$=FNBYB$(LINE$)
1515 CHKTAG=1
1520 WHILE CHKTAG ! 2800 wend
1522 P1=MSK(LINE$,"\?tf\?[^?]*\?"); IF P1=0 THEN CHKTAG=0; BREAK
1530 TAG$=LINE$(P1,MSL); LINE1$=LINE$(1,P1-1),LINE2$=MID(LINE$,P1+MSL)
1600 SWITCH TAG$ ! 2790 end switch
1603 CASE "?tf?bin?"
1606 MX=FNN(BIN$); BREAK
1609 CASE "?tf?lot_num?"
1612 MX=FNN(LOT_NUM$); BREAK
1615 CASE "?tf?active_bin?"
1616 MX=FNN(STP(EC$[1](1300,10),2)); BREAK
1617 CASE "?tf?active_lot_num?"
1618 MX=FNN(STP(EC$[1](1310,8),2)); BREAK
1621 CASE "?tf?whse_list?"
1624 GOSUB GET_WHS_LIST; MX=FNN(WAREHOUSE_LIST$); BREAK
1630 CASE "?tf?lot_section_start?"
1635 GOSUB GET_LOT_SECTION; LINE$=LOT_SECTION$; BREAK
1640 CASE "?tf?search_item_section_start?"
1645 GOSUB GET_SEARCH_ITEM_SECTION; LINE$=SEARCH_ITEM_SECTION$; BREAK ! 274768
2600 CASE "?tf?error_section_start?"
2603 GOSUB GET_ERROR_SECTION; LINE$=ERROR_SECTION$; BREAK
2618 CASE "?tf?uom_list?"
2621 GOSUB GET_UOM_LIST; MX=FNN(UOMLIST$); BREAK
2623 CASE "?tf?lot_count?"
2626 MX=FNN(STR(LOT_COUNT)); BREAK
2630 CASE "?tf?transfer_icf_key?"
2633 MX=FNN(TRANSFER_ICF_KEY$); BREAK
2636 CASE "?tf?lot_qty?"
2639 MX=FNN(STR(LOT_TOTAL_QTY)); BREAK
2642 CASE "?tf?transfer_lot_mode?"
2645 MX=FNN(STR(TRANSFER_LOT_MODE)); BREAK ! 272513
2647 CASE "?tf?search_item_code?"
2649 MX=FNN(SEARCH_ITEM_CODE$); BREAK ! 274768
2651 CASE "?tf?search_item_count?"
2653 MX=FNN(STR(SEARCH_ITEM_COUNT)); BREAK ! 274768
2785 DEFAULT ; LINE$=LINE1$+LINE2$ ! Unknown tag, discard
2790 END SWITCH ! 1600
2800 WEND ! 1520
2810 PRINT (OUTPUT)LINE$,EOL$,
2900 GOTO 1510; REM next read
2990 GOTO 9900
2999 ! 
5000 REM "take Q$, try to figure out date and return in Q$
5001 REM "assume MM?DD?YY(YY) format where we don't care about ?'s. if only YY then pivot on 60
5005 CONVERT_DATE:
5010 IF LEN(Q$)=7 AND Q$(2,1)="/" THEN Q$="0"+Q$
5015 IF LEN(Q$)<6 THEN GOTO ERR_INVALID_DATE ELSE IF LEN(Q$)>=8 THEN Q$=Q$(1,2)+Q$(4,2)+Q$(7); IF LEN(Q$)>8 THEN Q$=Q$(1,8)
5020 REM "NOW in MMDDYY.. format
5025 IF LEN(Q$(5))>2 THEN YY$=Q$(5) ELSE IF Q$(5)<"60" THEN YY$="20"+Q$(5) ELSE YY$="19"+Q$(5)
5030 TMP$=Q$,Q$=DIM(6),Q$=CHR(NUM(YY$(1,3),ERR=ERR_INVALID_DATE)-125,ERR=ERR_INVALID_DATE)+YY$(4,1)+TMP$(1,4)
5045 RETURN 
5046 ERR_INVALID_DATE: ERRCODE$="401"; RETURN 
5049 ! 
5050 REM "Unit of Measure
5055 GET_UOM_FORMATTED:
5060 U=1 ! Given U$ and U_QPM, get components required to calculate display units
5065 DIM UOM[2]; FIND (Z[13],KEY="U/M"+U$,DOM=*RETURN)UOM$,UOM[0],UOM[1]
5070 IF UOM$(20,1)="Y" THEN U=UOM[1] ELSE U=U_QPM
5080 IF U=0 THEN U=1
5095 RETURN 
5099 ! 
5100 LOG_MSG:! Add message to log file
5110 MOUT$="SESSION ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|"
5135 MX=FN%_LOG_MESSAGE("MESG",MOUT$+LOG_MESG$)
5145 RETURN 
5149 ! 
6100 REM "Given FIND_BIN$, get bin record and information
6105 GET_BIN_INFO:
6110 DIM RFB$(1000),RFB[4]; FIND (Z[2],KEY=FIND_BIN$+FIND_WHSE$,ERR=ERR_INVALID_BIN)IOL=IOL_RFB
6115 BIN_FMT$=FIND_BIN$; IF NOT(NUL(RFB$(69,15))) THEN BIN_MASK$=PAD(STP(RFB$(69,15),2),15,1,"X"); BIN_FMT$=STR(FIND_BIN$:BIN_MASK$)
6118 FROM_BIN_TYPE$=MID(RFB$,67,2) ! SSP 276004
6120 RETURN 
6125 ! 
6200 REM "Get Units of measure list in the form of HTML select dropdown
6201 GET_UOM_LIST:
6205 GOSUB SET_XI
6210 UOMLIST$=""
6215 READ (Z[13],KEY="U/M",DOM=*NEXT)
6220 UOMK$=KEY(Z[13],END=6239); READ (Z[13],KEY=UOMK$)UOMREC$; IF MID(UOMREC$,1,3)<>"U/M" THEN GOTO 6239
6225 IF MID(UOMREC$,22,1)<>"Y" THEN UOMLIST$=UOMLIST$+"<option value="+QUO+UOMREC$(4,4)+QUO+">"+UOMREC$(4,4)+"</option>"+EOL$
6230 GOTO 6220
6240 GOSUB CLEAR_XI
6245 RETURN 
6249 ! 
6300 REM "Collect lot information for given bin location and lot serial number
6301 REM "Info is saved to an array for later retrieval and display
6305 GET_LOT_INFO:
6310 DIM LOTS$[MAX_LOTS,1]; LOT_COUNT=0 ! Index 0 - ICF key, Index 1 - ICL key if lot is frozen
6320 IF NOT(NUL(BIN$)) THEN READ (Z[5],KEY=BIN$,KNO=5,DOM=*NEXT) ELSE IF NOT(NUL(LOT_NUM$)) THEN READ (Z[5],KEY=LOT_NUM$,KNO=4,DOM=*NEXT)
6330 NEXT_ICF: KICF$=KEY(Z[5],END=GET_ICF_DONE); DIM ICF$(270),ICF[12]; READ (Z[5],KEY=KICF$,BSY=ERR_LOT_INFO_BUSY)IOL=IOL_ICF
6333 IF TRANSFER_LOT_MODE=1 THEN IF TRANSFER_ICF_KEY$<>ICF$(1,32) THEN GOTO NEXT_ICF ! 272513
6335 IF NOT(NUL(BIN$)) THEN IF MID(ICF$,100,10)<>BIN$ THEN GOTO GET_ICF_DONE ELSE IF NOT(NUL(LOT_NUM$)) AND MID(ICF$,234,8)<>LOT_NUM$ THEN GOTO NEXT_ICF END_IF ELSE IF NOT(NUL(LOT_NUM$)) THEN IF MID(ICF$,234,8)<>LOT_NUM$ THEN GOTO GET_ICF_DONE
6340 IF NOT(NUL(WAREHOUSE$)) THEN IF MID(ICF$,21,4)<>PAD(WAREHOUSE$,4) THEN GOTO NEXT_ICF
6350 ICLK$=""; IF NOT(NUL(MID(ICF$,232,2))) THEN TMPK$=MID(ICF$,21,4)+MID(ICF$,100,10)+MID(ICF$,1,20)+MID(ICF$,25,6)+MID(ICF$,232,2); FIND (Z[4],KEY=TMPK$,DOM=*NEXT); ICLK$=TMPK$ ! Check if ICF rec has entry in ICL, indicates physical count in progress
6360 ! If here, collect this ICF (and ICL entry if available) for display later
6370 LOT_COUNT++; LOTS$[LOT_COUNT,0]=MID(ICF$,1,32),LOTS$[LOT_COUNT,1]=ICLK$
6372 IF NOT(NUL(TRANSFER_ICF_KEY$)) THEN LOT_TOTAL_QTY=LOT_TOTAL_QTY+ICF[4]
6375 IF LOT_COUNT>=MAX_LOTS THEN WARNCODE$="106"; GOTO GET_ICF_DONE ! Too many matching lots
6380 GOTO NEXT_ICF
6390 GET_ICF_DONE:
6391 IF LOT_COUNT=0 THEN GOTO ERR_NO_LOTS_FOUND
6395 RETURN 
6396 ERR_INVALID_BIN: ERRCODE$="103"; RETURN 
6397 ERR_NO_LOTS_FOUND: ERRCODE$="104"; RETURN 
6398 ERR_LOT_INFO_BUSY: ERRCODE$="110"; RETURN ! 278898
6399 ! 
6400 REM "Process bin transfers
6401 PROCESS_LOT_TRANSFER:
6402 IF POS("B"=RFK$(111,20))=0 THEN ERRCODE$="0"; RETURN 
6405 GOSUB CHECK_TRANSFER_QTY; IF NOT(NUL(ERRCODE$)) THEN RETURN 
6410 GOSUB CHECK_TRANSFER_BIN; IF NOT(NUL(ERRCODE$)) THEN RETURN 
6413 QTY_XFERD=TRANSFER_QTY
6415 FOR LOT_INDEX=1 TO LOT_COUNT
6416 SPLITL=0 ! SSP 276004
6420 KICF$=LOTS$[LOT_INDEX](1,32); DIM ICF$(270),ICF[12]; EXTRACT (Z[5],KEY=KICF$,KNO=0)IOL=IOL_ICF ! 278898
6422 FROM_BIN$=MID(ICF$,100,10),ITEM$=MID(ICF$,1,20),LOT$=MID(ICF$,234,8)
6425 IF ICF[4]<=TRANSFER_QTY THEN ICF$(100,10)=TRANSFER_BIN$; TRANSFER_QTY-=ICF[4] ELSE IF ICF[4]>TRANSFER_QTY THEN SPLITL=1; GOSUB SPLIT_LOT; TRANSFER_QTY=0 ! SP 276004
6430 WRITE (Z[5],KEY=KICF$)IOL=IOL_ICF
6435 IF SPLITL THEN SPLITL=0; IF NEW_BIN_TYPE$="PK" AND OLD_BIN_TYPE$<>"PK" THEN CALL "UPDICF;PRIO_PICK_BIN",Z[5],KICF$,NEWKICF$,P_OK; IF NOT(P_OK) THEN ERRCODE$="999" ! SSP 276004
6439 IF TRANSFER_QTY<=0 THEN GOTO *BREAK
6440 NEXT LOT_INDEX
6441 CALL "UPDRFA;ADD_BM",Z[10],X3$,PAD(ITEM$,20),EC$[2](1,15),PAD(FROM_BIN$,10),PAD(TRANSFER_BIN$,10),PAD(WAREHOUSE$,4),PAD(LOT$,8),QTY_XFERD,0,MAX(ICF[3],1)*MAX(ICF[2],1) ! 268565
6445 RETURN 
6446 ! 
6447 ERR_LOT_BUSY: ERRCODE$="110"; RETURN ! 278898
6449 ! 
6500 REM "Write out new ICF record from transfer and rewrite original with adjustments for A[0]-COST, A[1]-TOTAL FREIGHT, A[11]-TF_STORAGE, A[12]-FINANCE
6505 SPLIT_LOT:
6510 NEWKICF$=KICF$; DIM ICF_NEW$(270),ICF_NEW[12]; READ (Z[5],KEY=NEWKICF$)IOL=IOL_ICF_NEW
6512 SAVE_PRC=PRC; PRECISION 14 ! 274086
6515 CHG=TRANSFER_QTY/ICF_NEW[4]; QTY_IN_EACHES=TRANSFER_QTY*MAX(ICF[3],1)*MAX(ICF[2],1)
6520 ICF_NEW[0]=PRC(ICF_NEW[0]*CHG,SAVE_PRC),ICF_NEW[1]=PRC(ICF_NEW[1]*CHG,SAVE_PRC),ICF_NEW[11]=PRC(ICF_NEW[11]*CHG,SAVE_PRC),ICF_NEW[12]=PRC(ICF_NEW[12]*CHG,SAVE_PRC) ! 274086
6525 PRECISION SAVE_PRC ! 274086
6530 ICF_NEW[4]=TRANSFER_QTY,ICF_NEW$(100,10)=TRANSFER_BIN$
6540 NEW_END_NUM=-1; IF NOT(NUL(ICF_NEW$(82,9))) THEN NUM_PAD=LEN(STP(ICF_NEW$(82,9),2)); NEW_END_NUM=NUM(STP(ICF_NEW$(82,9),2),ERR=*NEXT); NEW_END_NUM+=QTY_IN_EACHES-1; ICF_NEW$(91,9)=PAD(STR(NEW_END_NUM:DIM(NUM_PAD,"0")),9,"L")
6560 CALL "IC2LCC",X3$,X4$,Z[5],31,2,LAST_ONE$,NEWKICF$; ICF_NEW$(1,32)=NEWKICF$
6570 WRITE (Z[5],KEY=NEWKICF$)IOL=IOL_ICF_NEW
6580 ICF[4]=ICF[4]-TRANSFER_QTY,ICF[0]=ICF[0]-ICF_NEW[0],ICF[1]=ICF[1]-ICF_NEW[1],ICF[11]=ICF[11]-ICF_NEW[11],ICF[12]=ICF[12]-ICF_NEW[12]
6585 IF NEW_END_NUM>0 THEN ICF$(82,9)=PAD(STR(NEW_END_NUM+1:DIM(NUM_PAD,"0")),9,"L")
6595 RETURN 
6599 ! 
6600 GET_LOT_INFO_FROM_KEY:
6610 DIM ICF$(270),ICF[12]; READ (Z[5],KEY=TRANSFER_ICF_KEY$,DOM=ERR_INVALID_LOT,BSY=ERR_LOT_BUSY)IOL=IOL_ICF
6620 XFER_ICF$=ICF$
6625 LOT_NUM$=MID(XFER_ICF$,234,8); BIN$=MID(XFER_ICF$,100,10); WAREHOUSE$=MID(XFER_ICF$,21,4)
6639 RETURN 
6640 ! 
6641 ERR_INVALID_LOT: ERRCODE$="105"; RETURN 
6649 ! 
6700 CHECK_TRANSFER_QTY:
6710 TRANSFER_QTY=NUM(TRANSFER_QTY$,ERR=ERR_INVALID_TRANSFER_QTY); IF TRANSFER_QTY<=0 THEN GOTO ERR_INVALID_TRANSFER_QTY
6715 IF TRANSFER_QTY>LOT_TOTAL_QTY THEN GOTO ERR_INVALID_TRANSFER_QTY
6720 RETURN 
6729 ! 
6730 ERR_INVALID_TRANSFER_QTY: ERRCODE$="402"; RETURN 
6749 ! 
6750 CHECK_TRANSFER_BIN:
6751 IF TRANSFER_BIN$=BIN$ THEN GOTO ERR_INVALID_TRF_BIN
6755 DIM TRFB$(1000),TRFB[4]; FIND (Z[2],KEY=TRANSFER_BIN$+WAREHOUSE$,ERR=ERR_INVALID_TRF_BIN)TRFB$,TRFB{ALL}
6760 IF NOT(NUL(MID(TRFB$,27,20))) AND MID(TRFB$,27,20)<>MID(TRANSFER_ICF_KEY$,1,20) THEN GOTO ERR_RESERVED_BIN
6765 NEW_BIN_TYPE$=MID(TRFB$,67,2) ! SSP 276004
6770 RETURN 
6779 ! 
6780 ERR_INVALID_TRF_BIN: ERRCODE$="403"; RETURN 
6781 ERR_RESERVED_BIN: ERRCODE$="404"; RETURN 
6799 ! 
6800 REM "Display lots found for the specified bin location and lot number combination
6805 GET_LOT_SECTION:
6810 LOT_SECTION$="",LI_TAGS$="001<po_number>002<po_number_fmt>003<item_key>004<item_cust_code>005<item_cust_code_fmt>006<item_code>007<vendor_code_fmt>008<bin>009<icf_key>010<qty>011<qty_in_eaches>012<uom_fmt>013<whse>014<bin_fmt>015<lot_num>016<lot_frozen_start>017<order_committed_start>018<order_number>019<order_number_fmt>020<order_line_number>021<receipt_date>022<seq_num>023<lot_prev_counted_start>024<count_qty>025<count_status>026<transfer_allowed_start>027<skip_lots>028<numbered_item_start>"
6815 IF POS("?tf?lot_section_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)TMPLINE$; TMPLINE$=FNBYB$(TMPLINE$); LINE$+=TMPLINE$+EOL$; GOTO *SAME
6816 E1=POS("?tf?lot_section_start?"=LINE$); IF E1>0 THEN LINE1$=MID(LINE$,1,E1-1); LINE$=LINE$(E1+22) ELSE RETURN 
6817 E2=POS("?tf?lot_section_end?"=LINE$); IF E2>0 THEN LINE2$=MID(LINE$,E2+20); LINE$=LINE$(1,E2-1) ELSE RETURN 
6820 IF LOT_COUNT=0 THEN GOTO 6895
6823 FOR LL=1 TO LOT_COUNT
6824 IF SKIP_LOTS THEN SKIP_LOTS=0; GOTO *BREAK
6825 ICFK$=LOTS$[LL,0]; DIM ICF$(270),ICF[12]; FIND (Z[5],KEY=ICFK$,KNO=0,DOM=*CONTINUE)IOL=IOL_ICF
6826 ICLK$=LOTS$[LL,1]; DIM ICL$(293),ICL[12]; IF NOT(NUL(ICLK$)) THEN FIND (Z[4],KEY=ICLK$,DOM=*NEXT)IOL=IOL_ICL
6827 FIND_BIN$=ICF$(100,10),FIND_WHSE$=ICF$(21,4); GOSUB GET_BIN_INFO
6828 QTY_IN_EACHES=ICF[4]*MAX(ICF[3],1)*MAX(ICF[2],1); UOM_FORMATTED$=STP(ICF$(121,4),2)+"/"; IF ICF[2]<>0 THEN UOM_FORMATTED$+=STR(ICF[2])+" "+STP(ICF$(125,4),2)+"/" END_IF ; UOM_FORMATTED$+=STR(ICF[3]) ! 255937
6829 GOSUB GET_ITEM_FROM_LOT
6830 LI_SECTION$=LINE$
6833 LIINDEX=POS("?tf?"=LI_SECTION$); IF LIINDEX=0 THEN GOTO 6891
6836 LIEND_INDEX=POS("?"=LI_SECTION$(LIINDEX+4)),LITAG$=LI_SECTION$(LIINDEX+4,LIEND_INDEX-1),LI1$=LI_SECTION$(1,LIINDEX-1),LI2$=LI_SECTION$(LIINDEX+LIEND_INDEX+4),LIPOS=POS("<"+LITAG$+">"=LI_TAGS$); IF LIPOS=0 THEN LI_SECTION$=LI1$+LI2$,LIINDEX=0 ELSE LIINDEX=NUM(LI_TAGS$(LIPOS-3,3))
6840 ON LIINDEX GOTO 6889,6841,6842,6843,6844,6845,6846,6847,6848,6849,6850,6851,6852,6853,6854,6855,6856,6857,6858,6859,6860,6861,6862,6863,6864,6865,6866,6867,6868,6889
6841 LI_SECTION$=LI1$+ICF$(41,9)+LI2$; GOTO 6890; REM " po_number
6842 LI_SECTION$=LI1$+FN%ZZDISP$(ICF$(41,9),"P/O")+LI2$; GOTO 6890; REM " po_number_fmt
6843 LI_SECTION$=LI1$+ICF$(1,20)+LI2$; GOTO 6890; REM " item_key
6844 LI_SECTION$=LI1$+STP(ICF$(1,10),2)+LI2$; GOTO 6890; REM " item_cust_code
6845 LI_SECTION$=LI1$+STP(FN%ZZDISP$(ICF$(1,10),"A/R"),2)+LI2$; GOTO 6890; REM " item_cust_code_fmt
6846 LI_SECTION$=LI1$+STP(ICF$(11,10),2)+LI2$; GOTO 6890; REM " item_code
6847 LI_SECTION$=LI1$+STP(FN%ZZDISP$(ICF$(68,10),"A/P"),2)+LI2$; GOTO 6890; REM " vendor_code_fmt
6848 LI_SECTION$=LI1$+STP(ICF$(100,10),2)+LI2$; GOTO 6890; REM " bin
6849 LI_SECTION$=LI1$+ICFK$+LI2$; GOTO 6890; REM " icf_key
6850 IF FPT(ICF[4])=0 THEN M0$=M1I$ ELSE M0$=M1D$ END_IF ; LI_SECTION$=LI1$+STR(ICF[4]:M0$)+LI2$; GOTO 6890; REM " qty
6851 LI_SECTION$=LI1$+STR(QTY_IN_EACHES:M1I$)+LI2$; GOTO 6890; REM " qty_in_eaches
6852 LI_SECTION$=LI1$+UOM_FORMATTED$+LI2$; GOTO 6890; REM " uom_fmt
6853 LI_SECTION$=LI1$+ICF$(21,4)+LI2$; GOTO 6890; REM " whse
6854 BIN_FMT$=ICF$(100,10); IF NOT(NUL(RFB$(69,15))) THEN BIN_MASK$=PAD(STP(RFB$(69,15),2),15,1,"X"); BIN_FMT$=STR(ICF$(100,10):BIN_MASK$) END_IF ; LI_SECTION$=LI1$+STP(BIN_FMT$,2)+LI2$; GOTO 6890; REM " bin_fmt
6855 LI_SECTION$=LI1$+ICF$(234,8)+LI2$; GOTO 6890; REM " lot_num
6856 GOSUB IS_LOT_FROZEN; LI_SECTION$=LI1$+LI2$; GOTO 6890; REM " lot_frozen_start
6857 GOSUB IS_ORDER_COMMITTED; LI_SECTION$=LI1$+LI2$; GOTO 6890; REM " order_committed_start
6858 LI_SECTION$=LI1$+ICF$(110,8)+LI2$; GOTO 6890; REM " order_number
6859 LI_SECTION$=LI1$+FN%ZZDISP$(ICF$(110,8),"O/P")+LI2$; GOTO 6890; REM " order_number_fmt
6860 LI_SECTION$=LI1$+ICF$(118,3)+LI2$; GOTO 6890; REM " order_line_number
6861 IF NUL(ICF$(25,6)) THEN TMP$="" ELSE CALL "ZZDISP","DX",ICF$(25,6),"",X3$,TMP$,"",0,0,X4$ END_IF ; LI_SECTION$=LI1$+TMP$+LI2$; GOTO 6890; REM " receipt_date
6862 LI_SECTION$=LI1$+ICF$(31,2)+LI2$; GOTO 6890; REM " seq_num
6863 GOSUB IS_LOT_PREV_COUNTED; LI_SECTION$=LI1$+LI2$; GOTO 6890; REM " lot_prev_counted_start
6864 IF FPT(ICL[8])=0 THEN M0$=M1I$ ELSE M0$=M1D$ END_IF ; LI_SECTION$=LI1$+STR(ICL[8]:M0$)+LI2$; GOTO 6890; REM " count_qty
6865 LI_SECTION$=LI1$+TBL(POS(ICL$(222,1)="NYS"),"","Not Counted","Counted","Skipped","")+LI2$; GOTO 6890; REM " count_status
6866 GOSUB IS_TRANSFER_ALLOWED; LI_SECTION$=LI1$+LI2$; GOTO 6890; REM " transfer_allowed_start
6867 LI_SECTION$=LI1$+LI2$; SKIP_LOTS=1; GOTO 6890; REM " skip_lots, control tag, set flag and strip off
6868 GOSUB GET_NUMBERED_SECTION; LI_SECTION$=LI1$+NUMBERED_SECTION$+LI2$; GOTO 6890; REM " numbered_item_start
6889 LI_SECTION$=LI1$+LI2$; GOTO 6890; REM " Unknown tag, strip off
6890 GOTO 6833
6891 LOT_SECTION$+=LI_SECTION$
6894 NEXT LL
6895 RETURN 
6899 ! 
6900 REM "Search by item code and collect results in memory file for later display - 274768
6910 GET_SEARCH_ITEM_INFO:
6915 SEARCH_ITEM_COUNT=0; IF SEARCH_MAX_ITEM_COUNT<=0 OR SEARCH_MAX_ITEM_COUNT>999 THEN SEARCH_MAX_ITEM_COUNT=50
6917 IF NOT(SIRCHAN) THEN OPEN (HFN)"*MEMORY*"; SIRCHAN=LFO
6920 IF NUL(SEARCH_ITEM_CODE$) THEN GOTO ERR_INVALID_ITEM_CODE ELSE IF LEN(SEARCH_ITEM_CODE$)<=10 THEN SEARCH_ITEM_MODE=1; SEARCH_ITEM_KNO=6 ELSE IF LEN(SEARCH_ITEM_CODE$)>10 THEN SEARCH_ITEM_MODE=2; SEARCH_ITEM_CODE$=PAD(SEARCH_ITEM_CODE$,20); SEARCH_ITEM_KNO=1
6925 READ (Z[5],KEY=SEARCH_ITEM_CODE$,KNO=SEARCH_ITEM_KNO,DOM=*NEXT)
6930 NEXT_SIR_ICF: KICF$=KEY(Z[5],END=GET_SEARCH_ITEM_DONE); DIM ICF$(270),ICF[12]; READ (Z[5],KEY=KICF$)IOL=IOL_ICF
6940 IF MID(KICF$,1,LEN(SEARCH_ITEM_CODE$))=SEARCH_ITEM_CODE$ THEN {! This is a match; record it
6945 WRITE (SIRCHAN,KEY=MID(ICF$,1,20)+MID(ICF$,100,10)+MID(ICF$,21,4)+MID(ICF$,234,8),DOM=*NEXT); SEARCH_ITEM_COUNT++ ! Only if not already recorded
6950  } ELSE {
6955 GOTO GET_SEARCH_ITEM_DONE
6960  }
6975 IF SEARCH_ITEM_COUNT>=SEARCH_MAX_ITEM_COUNT THEN WARNCODE$="109"; GOTO GET_SEARCH_ITEM_DONE ! Too many matching results
6980 GOTO NEXT_SIR_ICF
6990 GET_SEARCH_ITEM_DONE:
6991 IF SEARCH_ITEM_COUNT=0 THEN GOTO ERR_NO_ITEMS_FOUND
6995 RETURN 
6996 ERR_INVALID_ITEM_CODE: ERRCODE$="107"; RETURN 
6997 ERR_NO_ITEMS_FOUND: ERRCODE$="108"; RETURN 
6999 ! 
7000 REM "Display entries found when searching for specified item code
7005 GET_SEARCH_ITEM_SECTION:
7010 SEARCH_ITEM_SECTION$="",SIR_TAGS$="001<item_key>002<item_cust_code>003<item_cust_code_fmt>004<item_code>005<bin>006<whse>007<bin_fmt>008<lot_num>"
7015 IF POS("?tf?search_item_section_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)TMPLINE$; TMPLINE$=FNBYB$(TMPLINE$); LINE$+=TMPLINE$+EOL$; GOTO *SAME
7016 E1=POS("?tf?search_item_section_start?"=LINE$); IF E1>0 THEN LINE1$=MID(LINE$,1,E1-1); LINE$=LINE$(E1+30) ELSE RETURN 
7017 E2=POS("?tf?search_item_section_end?"=LINE$); IF E2>0 THEN LINE2$=MID(LINE$,E2+28); LINE$=LINE$(1,E2-1) ELSE RETURN 
7020 IF NOT(SIRCHAN) OR SEARCH_ITEM_COUNT=0 THEN GOTO 7095
7023 READ (SIRCHAN,KEY="",DOM=*NEXT)
7025 SIRK$=KEY(SIRCHAN,END=*RETURN); READ (SIRCHAN,KEY=SIRK$)
7027 FIND_BIN$=SIRK$(21,10),FIND_WHSE$=SIRK$(31,4); GOSUB GET_BIN_INFO
7030 SIR_SECTION$=LINE$
7033 SIRINDEX=POS("?tf?"=SIR_SECTION$); IF SIRINDEX=0 THEN GOTO 7091
7036 SIREND_INDEX=POS("?"=SIR_SECTION$(SIRINDEX+4)),SIRTAG$=SIR_SECTION$(SIRINDEX+4,SIREND_INDEX-1),SIR1$=SIR_SECTION$(1,SIRINDEX-1),SIR2$=SIR_SECTION$(SIRINDEX+SIREND_INDEX+4),SIRPOS=POS("<"+SIRTAG$+">"=SIR_TAGS$); IF SIRPOS=0 THEN SIR_SECTION$=SIR1$+SIR2$,SIRINDEX=0 ELSE SIRINDEX=NUM(SIR_TAGS$(SIRPOS-3,3))
7040 ON SIRINDEX GOTO 7089,7041,7042,7043,7044,7045,7046,7047,7048,7089
7041 SIR_SECTION$=SIR1$+SIRK$(1,20)+SIR2$; GOTO 7090; REM " item_key
7042 SIR_SECTION$=SIR1$+STP(SIRK$(1,10),2)+SIR2$; GOTO 7090; REM " item_cust_code
7043 SIR_SECTION$=SIR1$+STP(FN%ZZDISP$(SIRK$(1,10),"A/R"),2)+SIR2$; GOTO 7090; REM " item_cust_code_fmt
7044 SIR_SECTION$=SIR1$+STP(SIRK$(11,10),2)+SIR2$; GOTO 7090; REM " item_code
7045 SIR_SECTION$=SIR1$+STP(SIRK$(21,10),2)+SIR2$; GOTO 7090; REM " bin
7046 SIR_SECTION$=SIR1$+SIRK$(31,4)+SIR2$; GOTO 7090; REM " whse
7047 BIN_FMT$=SIRK$(21,10); IF NOT(NUL(RFB$(69,15))) THEN BIN_MASK$=PAD(STP(RFB$(69,15),2),15,1,"X"); BIN_FMT$=STR(SIRK$(21,10):BIN_MASK$) END_IF ; SIR_SECTION$=SIR1$+STP(BIN_FMT$,2)+SIR2$; GOTO 7090; REM " bin_fmt
7048 SIR_SECTION$=SIR1$+SIRK$(35,8)+SIR2$; GOTO 7090; REM " lot_num
7089 SIR_SECTION$=SIR1$+SIR2$; GOTO 7090; REM " Unknown tag, strip off
7090 GOTO 7033
7091 SEARCH_ITEM_SECTION$+=SIR_SECTION$
7094 GOTO 7025
7095 RETURN 
7099 ! 
7300 REM "Retrieve 1 or more values in VALUE$ place in VAL$[] and set VAL_COUNT-Values seperated by ', 's (that is comma + blank), current max of 2002 values
7301 REM "We will add all values blank or not
7305 PARSE_DATA_TAG:
7307 DIM VAL$[2000]; VAL_COUNT=0
7310 IF VAL_COUNT=2000 THEN GOTO 7340 ELSE VP=POS(", "=VALUE$); IF VP=0 THEN GOTO 7335
7315 VAL_COUNT=VAL_COUNT+1; IF VP=1 THEN VAL$[VAL_COUNT]="",VALUE$=VALUE$(3); GOTO 7310 ELSE VAL$[VAL_COUNT]=VALUE$(1,VP-1); IF VP=LEN(VALUE$) THEN VALUE$=""; GOTO 7340 ELSE VALUE$=VALUE$(VP+2); GOTO 7310
7335 REM "finish up last one
7337 VAL_COUNT=VAL_COUNT+1; VAL$[VAL_COUNT]=VALUE$
7340 IF VAL_COUNT>HIGHEST_VAL_COUNT THEN FOR TMP_INDEX=HIGHEST_VAL_COUNT+1 TO VAL_COUNT; ICF_IN_DATA$[TMP_INDEX]=DIM(LEN(ICF_IN$)); NEXT TMP_INDEX; HIGHEST_VAL_COUNT=VAL_COUNT; REM "If new higher val count value then initialize data array
7345 RETURN 
7349 ! 
7700 REM "Control tags to suppress transfer qty HTML section if lot is frozen
7705 IS_LOT_FROZEN:
7715 IF NOT(NUL(ICLK$)) THEN GOTO 7745 ! Check if ok to display section, if lot is currently frozen
7720 ! Not OK to display section, so get rid of it
7730 LI2=POS("?tf?lot_frozen_end?"=LI2$); IF LI2>0 THEN LI2$=MID(LI2$,LI2+19) ! Consume and discard all HTML until the end of the section
7745 RETURN 
7749 ! 
7750 REM "Control tags to suppress inventory count HTML form section if lot not eligible for bin transfer
7755 IS_TRANSFER_ALLOWED:
7765 IF NUL(ICLK$) AND (NUL(MID(ICF$,110,8)) OR OPEN_LOTS$<>"Y") AND POS("B"=RFK$(111,20))>0 AND (NUL(WHSECODES$) OR POS(MID(ICF$,21,4)=WHSECODES$,4)>0) THEN GOTO 7795 ! Check if ok to display section, this is only if lot not committed to an order and not frozen for counting and user is authorized to perform bin transfers; If user is restricted to a set of warehouses, check that this lot is in one of the warehouses;273714-User is authorized to transfer committed lots
7770 ! If here, not OK to display section, so get rid of it
7780 LI2=POS("?tf?transfer_allowed_end?"=LI2$); IF LI2>0 THEN LI2$=MID(LI2$,LI2+25) ! Consume and discard all HTML until the end of the section
7795 RETURN 
7799 ! 
7800 REM "Control tags to suppress committed order HTML section
7805 IS_ORDER_COMMITTED:
7815 IF NOT(NUL(MID(ICF$,110,8))) THEN GOTO 7845 ! Check if ok to display section, if order is committed
7820 ! If here, not OK to display section, so get rid of it
7830 LI2=POS("?tf?order_committed_end?"=LI2$); IF LI2>0 THEN LI2$=MID(LI2$,LI2+24) ! Consume and discard all HTML until the end of the section
7845 RETURN 
7849 ! 
7850 REM "Control tags to suppress previously counted info HTML section
7855 IS_LOT_PREV_COUNTED:
7865 IF ICL$(222,1)<>"N" THEN GOTO 7895 ! Check if ok to display section, this is only if physical count flag is not "N"
7870 ! If here, not OK to display section, since lot is not previously counted, so get rid of it
7880 LI2=POS("?tf?lot_prev_counted_end?"=LI2$); IF LI2>0 THEN LI2$=MID(LI2$,LI2+25) ! Consume and discard all HTML until the end of the section
7895 RETURN 
7899 ! 
7900 REM "Clear active vars stored in session after processing complete or canc
7910 CLEAR_ACTIVE_SESSION_VARS:
7920 EC$[1](1296,4)=""; EXTRACT RECORD (33005,KEY=EC$[1](1,7),DOM=*RETURN)ECB$ ! Clear active vars in session
7930 ECB$(1296,4)=""; WRITE RECORD (33005,KEY=EC$[1](1,7))ECB$
7945 RETURN 
7949 ! 
8000 GET_AVAILABLE_WHS:
8005 WHSLIST$=MID(RFK$,23,40)
8010 GOSUB SET_XI; CALL "UPDFM0;GETWMSLIST",Z[6],EC$[2](1,15),WHSLIST$,WHSECODES$
8011 GOSUB CLEAR_XI
8015 RETURN 
8019 ! 
8020 GET_WHS_LIST: WAREHOUSE_LIST$=""; IF NUL(WHSECODES$) THEN RETURN 
8025 FOR K=1 TO LEN(WHSECODES$) STEP 4
8026 ! CHK_WHSE$=MID(WHSECODES$,K,4); GOSUB CHECK_WAREHOUSE; IF BAD_WHSE$="Y" THEN GOTO *CONTINUE
8027 SELECTED$=""; IF PAD(WAREHOUSE$,4)=MID(WHSECODES$,K,4) THEN SELECTED$=" selected"
8030 WAREHOUSE_LIST$+="<option value="+QUO+WHSECODES$(K,4)+QUO+SELECTED$+">"+WHSECODES$(K,4)+"</option>"+EOL$
8035 NEXT K
8040  }
8045 RETURN 
8049 ! 
8050 GET_WAREHOUSE:
8052 GOSUB SET_XI; FIND (Z[6],KEY="D"+DIM(10)+WAREHOUSE$,DOM=ERR_BAD_WHSE)FM0$
8056 GOSUB CLEAR_XI
8080 ! EC$[1](1296,4)=WAREHOUSE$; EXTRACT RECORD (33005,KEY=EC$[1](1,7),DOM=*RETURN)ECB$ ! Update active vars to session
8082 ! ECB$(1296,4)=WAREHOUSE$; WRITE RECORD (33005,KEY=EC$[1](1,7))ECB$
8084 ! LOG_MESG$="ACTIVE_WHSE|"+WAREHOUSE$+"|"; GOSUB LOG_MSG
8085 RETURN 
8089 ! 
8091 ERR_BAD_WHSE: ERRCODE$="102"; GOSUB CLEAR_XI; RETURN ! Whse specified is invalid
8099 ! 
8150 REM "Set active variables in session for later retrieval
8155 SET_ACTIVE_VARS:
8180 EC$[1](1300,10)=BIN$,EC$[1](1310,8)=LOT_NUM$; EXTRACT RECORD (33005,KEY=EC$[1](1,7),DOM=*RETURN)ECB$ ! Update active vars to session
8182 ECB$(1300,10)=BIN$,ECB$(1310,8)=LOT_NUM$; WRITE RECORD (33005,KEY=EC$[1](1,7))ECB$
8184 LOG_MESG$="ACTIVE_BIN|"+BIN$+"|ACTIVE_LOT_NUM|"+LOT_NUM$+"|"; GOSUB LOG_MSG
8195 RETURN 
8199 ! 
8500 REM "Get the item information for a lot record
8505 GET_ITEM_FROM_LOT:
8510 ITEM_CUST_CODE$="",ITEM_CODE$="",ITEM_DESC$=""
8520 ITEM_CUST_CODE$=MID(ICF$,1,10),ITEM_CODE$=MID(ICF$,11,10),LOTTED_ITEM$="",ITEM_CIC_CODE$="",NUMBERED_ITEM$="",FORM_REV_DATE$=""
8525 DIM IC0$(188),IC0[40]; FIND (Z[8],KEY=ICF$(1,20),DOM=ERR_INVALID_ITEM)IOL=IOL_IC0
8530 ITEM_DESC$=MID(IC0$,21,40),LOTTED_ITEM$=MID(IC0$,112,1),ITEM_DESC2$=MID(IC0$,128,40)
8540 DIM FM1$(450),FM1[31]; FIND (Z[7],KEY=ICF$(1,20),DOM=*NEXT)IOL=IOL_FM1
8550 ITEM_CIC_CODE$=MID(FM1$,350,20),NUMBERED_ITEM$=MID(FM1$,104,1)
8555 FORM_REV_DATE$=MID(FM1$,167,6)
8585 RETURN 
8590 ! 
8591 ERR_INVALID_ITEM: ERRCODE$="301"; RETURN ! Invalid item referenced in lot
8599 ! 
8650 REM "Process section for numbered items
8651 GET_NUMBERED_SECTION:
8652 NUMBERED_SECTION$="",NI_TAGS$="001<item_key>002<item_cust_code>003<item_cust_code_fmt>004<item_code>005<item_desc>006<starting_num>007<ending_num>"
8655 E2=POS("?tf?numbered_item_end?"=LI2$); IF E2>0 THEN NI_SECTION$=LI2$(1,E2-1); LI2$=MID(LI2$,E2+22) ELSE RETURN 
8661 IF NUMBERED_ITEM$<>"Y" THEN NI_SECTION$=""; GOTO 8691
8667 NIINDEX=POS("?tf?"=NI_SECTION$); IF NIINDEX=0 THEN GOTO 8691
8668 NIEND_INDEX=POS("?"=NI_SECTION$(NIINDEX+4)),NITAG$=NI_SECTION$(NIINDEX+4,NIEND_INDEX-1),NI1$=NI_SECTION$(1,NIINDEX-1),NI2$=NI_SECTION$(NIINDEX+NIEND_INDEX+4),NIPOS=POS("<"+NITAG$+">"=NI_TAGS$); IF NIPOS=0 THEN NI_SECTION$=NI1$+NI2$,NIINDEX=0 ELSE NIINDEX=NUM(NI_TAGS$(NIPOS-3,3))
8669 ON NIINDEX GOTO 8689,8670,8671,8672,8673,8674,8675,8676,8689
8670 NI_SECTION$=NI1$+ICF$(1,20)+NI2$; GOTO 8690; REM " item_key
8671 NI_SECTION$=NI1$+STP(ICF$(1,10),2)+NI2$; GOTO 8690; REM " item_cust_code
8672 NI_SECTION$=NI1$+STP(FN%ZZDISP$(ICF$(1,10),"A/R"),2)+NI2$; GOTO 8690; REM " item_cust_code_fmt
8673 NI_SECTION$=NI1$+STP(ICF$(11,10),2)+NI2$; GOTO 8690; REM " item_code
8674 NI_SECTION$=NI1$+STP(ITEM_DESC$,2)+NI2$; GOTO 8690; REM " item_desc
8675 NI_SECTION$=NI1$+STP(ICF$(82,9),2)+NI2$; GOTO 8690; REM " starting_num
8676 NI_SECTION$=NI1$+STP(ICF$(91,9),2)+NI2$; GOTO 8690; REM " ending_num
8689 NI_SECTION$=NI1$+NI2$; GOTO 8690; REM " Unknown tag, strip off
8690 GOTO 8667
8691 NUMBERED_SECTION$+=NI_SECTION$ ! GOTO 8665
8695 RETURN 
8699 ! 
8700 GET_ERROR_SECTION:
8710 IF POS("?tf?error_section_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)ERRSEC_LINE$; ERRSEC_LINE$=FNBYB$(ERRSEC_LINE$); LINE$+=ERRSEC_LINE$+EOL$; GOTO *SAME
8712 ERROR_SECTION$=""; IF NUL(ERRCODE$) AND NUL(WARNCODE$) THEN RETURN 
8715 E1=POS("?tf?error_section_start?"=LINE$); IF E1>0 THEN LINE1$=MID(LINE$,1,E1-1); LINE$=LINE$(E1+24) ELSE RETURN 
8716 E2=POS("?tf?error_section_end?"=LINE$); IF E2>0 THEN LINE2$=MID(LINE$,E2+22); LINE$=LINE$(1,E2-1) ELSE RETURN 
8720 LINE$=SUB(LINE$,"?tf?errmsg?",ERRMSG$)
8725 LINE$=SUB(LINE$,"?tf?errcode?",ERRCODE$)
8740 ERROR_SECTION$=LINE$
8745 RETURN 
8749 ! 
8750 EVAL_ERR_CODE:
8755 IF NUL(ERRCODE$) AND NUL(WARNCODE$) THEN RETURN 
8760 IF NOT(NUL(ERRCODE$)) THEN ERRCODE$=FN%GET_BASENAME$(PGN)+"-"+ERRCODE$ ELSE ERRCODE$=FN%GET_BASENAME$(PGN)+"-"+WARNCODE$
8765 IF NUL(ERRMSG$) THEN ERRMSG$=MSG(ERRCODE$)
8770 IF NUL(WARNCODE$) THEN IF NOT(NUL(ERROR_TEMPLATE$)) THEN TEMPLATE$=ERROR_TEMPLATE$; BYBINFO$[3]=ERROR_TEMPLATE$ ! Switch to error template, but only if it is not warning, and if an error template was specified
8795 RETURN 
8799 ! 
8800 DEF FNBYB$(LOCAL DATA$)
8801 ! Send DATA$ through EC3BYB
8820 CALL "EC3BYB",ERR=*NEXT,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,DATA$,BYBINFO${ALL},BYBOPTIONS$,100
8840 RETURN DATA$
8845 END DEF
8849 ! 
8920 DEF FNN(LOCAL DATA$)
8925 LINE$=LINE1$+DATA$+LINE2$
8930 RETURN 0
8940 END DEF
8949 ! 
8950 SET_XI:
8955 SET_PARAM 'XI'
8960 RETURN 
8970 CLEAR_XI:
8980 SET_PARAM -'XI'
8990 RETURN 
8999 ! 
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$); REM "131928
9090 GOTO 9900
9900 REM "End
9905 IF NOT(NUL(ERRCODE$)) THEN LOG_MESG$="ERRCODE|"+ERRCODE$+"|"+ERRMSG$+"|"; GOSUB LOG_MSG
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9920 IF (SIRCHAN) THEN CLOSE (SIRCHAN,ERR=*PROCEED); SIRCHAN=0 ! 274768 - close search results channel
9950 EXIT 
9999 END 
56002 REM "229144-WMS - Bin Transfers.
56004 REM "272513-WMS:  Bin Inquiry and Change - Single lot support          
56006 REM "273714-272512 closed; WMS bin transfer of committed lot, parameter 
56008 REM "274086-Split lots, math precision to improve accuracy of calcs
56009 REM "274768-WMS; Bin Inquiry by Item Code                               
56010 REM "276004-WMS: Auto lot commits; How can inventory in bulk bins be    
56011 REM "278898-WMS Bin Inquiry and Change:  Did a bin transfer and the qty 
