0010 REM "WMS Receiving <RFGWR0>"
0020 SETESC 9300; SETERR 9000
0035 REM "5.7 - 07/28/22 - 22.424037 - crg - SSP# 307411
0037 REM "307411-DBD-276: WMS Receiving - View Cart function locks up cart   
0040 REM "Copyright 2022 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 CLEAR ; SETERR 0100; ENTER X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT
0100 SETERR 9000
0110 X0$="RFGWR0",X1$="WMS Receiving"
0120 EOL$=ATH(STP(EC_PARM$(57,8),1))
0130 M1I$="###,###,##0-",M1D$="###,###0.00-"
0140 CART_DISP_KEY=5
0300 REM "IOLISTS
0305 IOL_RF1:IOLIST RF1$,RF1{ALL}
0310 IOL_RFK:IOLIST RFK$
0320 IOL_RF2:IOLIST RF2$
0325 IOL_RFZ:IOLIST RFZ$
0330 IOL_ECB:IOLIST ECB$
0340 IOL_PO1:IOLIST PO1$
0350 IOL_FTO:IOLIST FTO$
0360 IOL_FS2:IOLIST FS2$,FS2{ALL}
0370 IOL_PO2:IOLIST PO2$,PO2{ALL}
0375 IOL_FM1:IOLIST FM1$,FM1{ALL}
0380 IOL_IC0:IOLIST IC0$,IC0{ALL}
0390 IOL_AP4:IOLIST AP4$
0400 IOL_PO3:IOLIST PO3$,PO3{ALL}
0410 IOL_IC1:IOLIST IC1$,IC1{ALL}
0420 IOL_RFB:IOLIST RFB$,RFB{ALL}
0500 REM "Open files
0505 DIM Z[NUM(X3$(60,3))]
0510 Z$="01O RFK...  02O RF2...  03O RFI...  04O RFB...  05O RFZ...  06O FM1...  07O IC0...  08O AP4...  09O FS2... 10O PO1...  11O FTO...  12O PO2...  13O ZZPARM  15O PO3...  16O IC1...  17O RF1...  18O RFA...  19O RFQ...  20OSRF1...  21O PO6...  22O JT0...  23O FMN...  "
0520 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 0521,9900
0590 READ (Z[13],KEY=X3$(9,3)+"I/C")ICPARM$
0591 READ (Z[13],KEY=X3$(9,3)+"W/M",DOM=*NEXT)WMPARM$ ! 273215
0599 ! 
0600 REM "Get WMS User
0610 FIND (Z[1],KEY=EC$[2](1,15))IOL=IOL_RFK
0620 GOSUB GET_AVAILABLE_CARTS
0625 REM "Override default key used for cart display
0630 ALT_CART_DISP_KEY=-1; ALT_CART_DISP_KEY=NUM(MID(WMPARM$,9,1),ERR=*NEXT); IF ALT_CART_DISP_KEY>0 THEN CART_DISP_KEY=ALT_CART_DISP_KEY
0900 ! 
0910 DIM RF1_IN$(900),RF1_IN[10],RF1_SET[10],RF1_IN_DATA$[2000],RF1_IN_DATA[2000,10],RF1_SET_DATA[2000,10]
0999 ! 
1000 REM "Process DATA array
1010 FOR I=1 TO NUM_ENTRIES
1015 TAG$=DATA$[I,0],VALUE$=DATA$[I,1]
1020 T_IN=POS("."=TAG$); IF T_IN THEN TAG_PARM$=MID(TAG$,T_IN+1),TAG$=MID(TAG$,1,T_IN-1) ELSE TAG_PARM$=""
1025 SWITCH TAG$ ! 1185 end switch
1026 CASE "new_cart"; IF UCS(VALUE$)="Y" THEN NEW_CART$="Y" END_IF ; BREAK
1027 CASE "new_po"; IF UCS(VALUE$)="Y" THEN NEW_PO$="Y" END_IF ; BREAK
1028 CASE "cart"; CART$=PAD(VALUE$,10); BREAK
1029 CASE "po_number"; PO_NUMBER$=VALUE$; BREAK
1030 CASE "po_line_number"; PO_LINE_NUMBER$=PAD(VALUE$,3); IF NUL(PO_LINE_NUMBER$) THEN GOSUB ERR_INVALID_POLINE END_IF ; BREAK
1031 CASE "po_line_ship_point"; PO_LINE_SHIP_POINT$=PAD(VALUE$,1); BREAK
1035 CASE "view_cart"; IF UCS(VALUE$)="Y" THEN VIEW_CART$="Y" END_IF ; BREAK
1038 CASE "complete"; IF UCS(VALUE$)="Y" THEN COMPLETE$="Y" END_IF ; BREAK
1039 CASE "cancel"; IF UCS(VALUE$)="Y" THEN CANCEL$="Y" END_IF ; BREAK
1040 CASE "receive"; IF UCS(VALUE$)="Y" THEN RECEIVE$="Y" END_IF ; BREAK
1041 CASE "recv_qty"; RECV_QTY_IN$=VALUE$; BREAK
1042 CASE "uom"; UOM_IN$=VALUE$; BREAK
1043 CASE "qty_per_uom"; QTY_PER_UOM_IN$=VALUE$; BREAK
1044 CASE "starting_num"; STARTING_NUM_IN$=VALUE$; BREAK
1045 CASE "ending_num"; ENDING_NUM_IN$=VALUE$; BREAK
1046 CASE "print_labels"; PRINT_LABELS_IN$=VALUE$; BREAK
1047 CASE "form_rev_date"; FORM_REV_DATE_IN$=VALUE$; BREAK
1145 CASE "change_qty"; UPDATE_CART$="Y",CHANGE_QUANTITY$="Y"; GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO *BREAK ELSE FOR VAL_INDEX=1 TO VAL_COUNT; RF1_IN_DATA[VAL_INDEX,3]=-1; IF NOT(NUL(VAL$[VAL_INDEX])) THEN RF1_IN_DATA[VAL_INDEX,3]=NUM(VAL$[VAL_INDEX],ERR=*PROCEED) END_IF ; NEXT VAL_INDEX; BREAK
1146 CASE "reprint_labels"; UPDATE_CART$="Y",REPRINT_LABELS$="Y"; GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO *BREAK ELSE FOR VAL_INDEX=1 TO VAL_COUNT; RF1_IN_DATA[VAL_INDEX,10]=-1; IF NOT(NUL(VAL$[VAL_INDEX])) THEN RF1_IN_DATA[VAL_INDEX,10]=NUM(VAL$[VAL_INDEX],ERR=*PROCEED) END_IF ; NEXT VAL_INDEX; BREAK
1150 CASE "rf1_key"; GOSUB PARSE_DATA_TAG; IF VAL_COUNT=0 THEN GOTO *BREAK ELSE FOR VAL_INDEX=1 TO VAL_COUNT; IF NOT(NUL(VAL$[VAL_INDEX])) THEN RF1_IN_DATA$[VAL_INDEX](1,23)=UCS(VAL$[VAL_INDEX]) END_IF ; NEXT VAL_INDEX; BREAK
1180 DEFAULT ; VIA TAG$=VALUE$; BREAK ! Set to same name variable as TAG$
1185 END SWITCH ! 1050
1190 NEXT I
1195 DIM BYBINFO$[5]; BYBINFO$[1]=PGN,BYBINFO$[2]="20110902",BYBINFO$[3]=TEMPLATE$,BYBOPTIONS$=""
1200 REM "Process input
1201 IF POS("R"=RFK$(111,20))=0 THEN ERRCODE$="0"; GOTO 1500
1205 PROCESS_CART:
1210 IF NOT(NUL(CART$)) THEN IF CART$<>EC$[1](1277,10) THEN GOSUB SET_ACTIVE_CART; IF NOT(NUL(ERRCODE$)) THEN GOTO 1500 END_IF ; END_IF ELSE CART$=EC$[1](1277,10)
1220 IF NUL(CART$) THEN IF NEW_CART$<>"Y" THEN ERRCODE$="1"; GOTO 1500 ELSE IF NUL(BINLIST$) THEN ERRCODE$="105"; GOTO 1500
1235 IF UPDATE_CART$="Y" THEN GOSUB UPDATE_CART; IF NOT(NUL(ERRCODE$)) THEN GOTO 1500
1240 IF COMPLETE$="Y" THEN GOSUB COMPLETE_RECEIVING; IF NOT(NUL(ERRCODE$)) THEN GOTO 1500 END_IF ELSE IF CANCEL$="Y" THEN GOSUB CANCEL_RECEIVING; IF NOT(NUL(ERRCODE$)) THEN GOTO 1500
1244 IF VIEW_CART$="Y" THEN GOTO 1500
1245 PROCESS_PO_NUMBER:
1250 IF NOT(NUL(PO_NUMBER$)) THEN GOSUB PARSE_PONUM; GOSUB VALIDATE_PO; IF NOT(NUL(ERRCODE$)) THEN GOTO 1500 END_IF ELSE PO_NUMBER$=EC$[1](1287,9)
1260 IF NUL(PO_NUMBER$) THEN IF NEW_PO$<>"Y" THEN ERRCODE$="2" END_IF ; GOTO 1500
1270 FIND (Z[10],KEY=PO_NUMBER$)IOL=IOL_PO1
1275 FIND (Z[8],KEY=PO1$(7,10))AP4$
1280 IF NOT(NUL(PO_LINE_NUMBER$)) THEN GOSUB GET_ITEM_FROM_PO_LINE; IF NOT(NUL(ERRCODE$)) THEN GOTO 1500 END_IF ELSE GOTO 1500
1290 IF RECEIVE$="Y" THEN GOSUB RECEIVE_PO_LINE; IF NOT(NUL(ERRCODE$)) THEN GOTO 1500
1499 ! 
1500 REM "Fill out the template
1503 GOSUB EVAL_ERR_CODE
1504 IF NOT(NUL(%BASIC2$)) OR %NEW_CALL_PROG THEN GOTO 2990 ! Skip outputting template if additional program to be done
1505 CLOSE (100); OPEN (100,OPT="TEXT",ERR=9000)TEMPLATE$
1510 READ (100,END=2950)LINE$; LINE$=FNBYB$(LINE$)
1515 CHKTAG=1
1520 WHILE CHKTAG ! 2800 wend
1522 P1=MSK(LINE$,"\?tf\?[^?]*\?"); IF P1=0 THEN CHKTAG=0; BREAK
1530 TAG$=LINE$(P1,MSL); LINE1$=LINE$(1,P1-1),LINE2$=MID(LINE$,P1+MSL)
1600 SWITCH TAG$ ! 2790 end switch
1603 CASE "?tf?cart?"
1606 MX=FNN(STP(CART$,2)); BREAK
1609 CASE "?tf?po_number?"
1612 MX=FNN(STP(PO_NUMBER$,2)); BREAK
1615 CASE "?tf?po_number_fmt?"
1618 MX=FNN(FN%ZZDISP$(PO_NUMBER$,"P/O")); BREAK
1619 CASE "?tf?po_line_number?"
1620 MX=FNN(STP(PO_LINE_NUMBER$,2)); BREAK
1621 CASE "?tf?recv_cart_list?"
1624 GOSUB GET_CART_LIST; MX=FNN(CART_LIST$); BREAK
1630 CASE "?tf?po_line_start?"
1635 GOSUB GET_PO_LINES; MX=FNN(PO_LINES$); BREAK
1637 CASE "?tf?po_line_ship_list?"
1638 GOSUB GET_PO_LINE_SHIP_LIST; MX=FNN(PO_LINE_SHIP_LIST$); BREAK
1640 CASE "?tf?item_cust_code?"
1642 MX=FNN(STP(ITEM_CUST_CODE$,2)); BREAK
1644 CASE "?tf?item_cust_code_fmt?"
1646 MX=FNN(STP(FN%ZZDISP$(ITEM_CUST_CODE$,"A/R"),2)); BREAK
1648 CASE "?tf?item_code?"
1650 MX=FNN(STP(ITEM_CODE$,2)); BREAK
1652 CASE "?tf?item_key?"
1653 MX=FNN(ITEM_CUST_CODE$+ITEM_CODE$); BREAK
1654 CASE "?tf?item_desc?"
1655 MX=FNN(STP(ITEM_DESC$,2)); BREAK
1656 CASE "?tf?vendor_code?"
1658 MX=FNN(STP(MID(AP4$,1,10),2)); BREAK
1660 CASE "?tf?vendor_code_fmt?"
1662 MX=FNN(STP(FN%ZZDISP$(MID(AP4$,1,10),"A/P"),2)); BREAK
1664 CASE "?tf?vendor_name?"
1666 MX=FNN(STP(MID(AP4$,11,35),2)); BREAK
1670 CASE "?tf?cic_code?"
1674 MX=FNN(STP(ITEM_CIC_CODE$,2)); BREAK
1678 CASE "?tf?lotted_item?"
1682 MX=FNN(TBL(LOTTED_ITEM$="Y","N","Y")); BREAK
1686 CASE "?tf?numbered_item?"
1690 MX=FNN(TBL(NUMBERED_ITEM$="Y","N","Y")); BREAK
1694 CASE "?tf?job_notes?"
1698 GOSUB GET_JOB_NOTES; MX=FNN(JOB_NOTES$); BREAK
1704 CASE "?tf?job_notes_html?"
1708 GOSUB GET_JOB_NOTES; MX=FNN(SUB(JOB_NOTES$,$0A$,"<br>")); BREAK
2600 CASE "?tf?error_section_start?"
2603 GOSUB GET_ERROR_SECTION; LINE$=ERROR_SECTION$; BREAK
2606 CASE "?tf?numbered_item_start?"
2609 GOSUB GET_NUMBERED_SECTION; LINE$=NUMBERED_SECTION$; BREAK
2612 CASE "?tf?lot_item_start?"
2615 GOSUB GET_LOT_SECTION; LINE$=LOT_SECTION$; BREAK
2618 CASE "?tf?uom_list?"
2621 GOSUB GET_UOM_LIST; MX=FNN(UOMLIST$); BREAK
2624 CASE "?tf?item_bo_start?"
2627 GOSUB GET_ITEM_BO_SECTION; LINE$=ITEM_BO_SECTION$; BREAK
2630 CASE "?tf?item_bo_enabled_start?"
2633 GOSUB IS_ITEM_BO_SECTION_ENABLED; LINE$=""; BREAK
2640 CASE "?tf?display_recv_cart_start?"
2645 GOSUB DISPLAY_RECV_CART; LINE$=CART_SECTION$; BREAK
2650 CASE "?tf?receiving_start?"
2655 GOSUB GET_RECV_SECTION; LINE$=RECV_SECTION$; BREAK
2670 CASE "?tf?prev_item_cust_code?"
2672 MX=FNN(STP(MID(ECB$,1178,10),2)); BREAK ! 271272
2674 CASE "?tf?prev_item_cust_code_fmt?"
2676 MX=FNN(STP(FN%ZZDISP$(MID(ECB$,1178,10),"A/R"),2)); BREAK ! 271272
2678 CASE "?tf?prev_item_code?"
2680 MX=FNN(STP(MID(ECB$,1188,10),2)); BREAK ! 271272
2682 CASE "?tf?prev_item_key?"
2684 MX=FNN(MID(ECB$,1178,20)); BREAK ! 271272
2686 CASE "?tf?form_rev_date?" ! 259676
2688 MX=FNN(STP(FORM_REV_DATE$,2)); BREAK ! 259676
2690 CASE "?tf?item_desc2?" ! 260683
2692 MX=FNN(STP(ITEM_DESC2$,2)); BREAK ! 260683
2785 DEFAULT ; LINE$=LINE1$+LINE2$ ! Unknown tag, discard
2790 END SWITCH ! 1600
2800 WEND ! 1520
2810 PRINT (OUTPUT)LINE$,EOL$,
2900 GOTO 1510; REM next read
2990 GOTO 9900
2999 ! 
5000 REM "take Q$, try to figure out date and return in Q$
5001 REM "assume MM?DD?YY(YY) format where we don't care about ?'s. if only YY then pivot on 60
5005 CONVERT_DATE:
5010 IF LEN(Q$)=7 AND Q$(2,1)="/" THEN Q$="0"+Q$
5015 IF LEN(Q$)<6 THEN GOTO ERR_INVALID_DATE ELSE IF LEN(Q$)>=8 THEN Q$=Q$(1,2)+Q$(4,2)+Q$(7); IF LEN(Q$)>8 THEN Q$=Q$(1,8)
5020 REM "NOW in MMDDYY.. format
5025 IF LEN(Q$(5))>2 THEN YY$=Q$(5) ELSE IF Q$(5)<"60" THEN YY$="20"+Q$(5) ELSE YY$="19"+Q$(5)
5030 TMP$=Q$,Q$=DIM(6),Q$=CHR(NUM(YY$(1,3),ERR=ERR_INVALID_DATE)-125,ERR=ERR_INVALID_DATE)+YY$(4,1)+TMP$(1,4)
5045 RETURN 
5046 ERR_INVALID_DATE: ERRCODE$="401"; RETURN 
5049 ! 
5050 REM "Unit of Measure
5055 GET_UOM_FORMATTED:
5060 U=1 ! Given U$ and U_QPM, get components required to calculate display units
5065 DIM UOM[2]; FIND (Z[13],KEY="U/M"+U$,DOM=*RETURN)UOM$,UOM[0],UOM[1]
5070 IF UOM$(20,1)="Y" THEN U=UOM[1] ELSE U=U_QPM
5080 IF U=0 THEN U=1
5095 RETURN 
5099 ! 
5100 LOG_MSG:! Add message to log file
5110 MOUT$="SESSION ID|"+EC$[1](1,7)+"|FILE|"+%WEBEC_FILE_NAME$+"|"
5135 MX=FN%_LOG_MESSAGE("MESG",MOUT$+LOG_MESG$)
5145 RETURN 
5149 ! 
6100 REM "Receive submitted PO line item qty
6105 RECEIVE_PO_LINE:
6107 IF RECEIVE$<>"Y" THEN RETURN 
6108 GOSUB LOCK_PO; IF NOT(NUL(ERRCODE$)) THEN RETURN ! Create FTO rec for PO at this time, if required                               
6110 GOSUB VALIDATE_RECEIPT_DATA; IF NOT(NUL(ERRCODE$)) THEN RETURN 
6120 GOSUB CREATE_RECEIPT_ENTRY
6130 GOSUB SET_ACTIVE_ITEM
6185 RETURN 
6189 ! 
6200 REM "Get Units of measure list in the form of HTML select dropdown
6201 GET_UOM_LIST:
6205 GOSUB SET_XI
6210 UOMLIST$=""
6215 READ (Z[13],KEY="U/M",DOM=*NEXT)
6220 UOMK$=KEY(Z[13],END=6239); READ (Z[13],KEY=UOMK$)UOMREC$; IF MID(UOMREC$,1,3)<>"U/M" THEN GOTO 6239
6225 IF MID(UOMREC$,22,1)<>"Y" THEN UOMLIST$=UOMLIST$+"<option value="+QUO+UOMREC$(4,4)+QUO+">"+UOMREC$(4,4)+"</option>"+EOL$
6230 GOTO 6220
6240 GOSUB CLEAR_XI
6245 RETURN 
6249 ! 
6250 VALIDATE_RECEIPT_DATA:
6255 RECV_QTY=NUM(RECV_QTY_IN$,ERR=ERR_INVALID_NUM); IF RECV_QTY=0 THEN GOTO ERR_INVALID_NUM
6256 RECV_QTY_PER_UOM=NUM(QTY_PER_UOM_IN$,ERR=ERR_INVALID_NUM)
6257 RECV_UOM$=PAD(UOM_IN$,4),RECV_STARTING_NUM$=PAD(STARTING_NUM_IN$,9),RECV_ENDING_NUM$=PAD(ENDING_NUM_IN$,9)
6258 RECV_PRINT_LABELS=NUM(PRINT_LABELS_IN$,ERR=ERR_INVALID_NUM)
6259 RECV_REV_DATE$=FORM_REV_DATE_IN$ ! Q$=FORM_REV_DATE_IN$; IF NOT(NUL(Q$)) THEN GOSUB CONVERT_DATE; RECV_REV_DATE$=Q$ ! 250785
6260 IF PO_LINE_SHIP_POINT$="" THEN GOTO ERR_NO_SHIP_POINT
6262 DIM PO3$(430),PO3[3]; IF PO_LINE_SHIP_POINT$=" " THEN PO3_SEQ$=DIM(4) ELSE PO3_SEQ$=PO2$(7,3)+PO_LINE_SHIP_POINT$ END_IF ; FIND (Z[15],KEY=PO2$(82,8)+DIM(1)+PO3_SEQ$,DOM=ERR_INVALID_SHIP_POINT)IOL=IOL_PO3
6285 RETURN 
6289 ! 
6291 ERR_INVALID_NUM: ERRCODE$="402"; RETURN 
6292 ERR_NO_SHIP_POINT: ERRCODE$="403"; RETURN 
6293 ERR_INVALID_SHIP_POINT: ERRCODE$="404"; RETURN 
6299 ! 
6300 REM "Process RF1 entry for submitted receipt - form must have "receive=Y" to trigger this
6305 CREATE_RECEIPT_ENTRY:
6307 DIM RF1$(900),RF1[10]
6310 RF1$(1,9)=PO1$(297,9)
6313 RF1$(10,3)=PO2$(7,3)
6316 RF1$(13,20)=PO2$(91,20)
6319 RF1$(60,9)=RECV_STARTING_NUM$
6322 RF1$(69,9)=RECV_ENDING_NUM$
6325 IF NUL(RECV_UOM$) THEN RF1$(88,4)=PO2$(77,4) ELSE RF1$(88,4)=RECV_UOM$
6328 RF1$(100,40)=PO2$(28,40)
6331 CALL "UPDICF;GET_NEXT_LOT_NUM",Z[13],X3$,LOT_SERIAL_NUM$; RF1$(140,8)=LOT_SERIAL_NUM$
6334 RF1$(156,10)=CART$
6337 RF1$(176,15)=EC$[2](1,15)
6340 RF1$(196,3)="001"
6343 RF1$(199,3)=PO2$(11,3)
6346 RF1$(202,6)=RECV_REV_DATE$ ! TODO : CREATE FIELD TO HOLD THIS
6349 IF PO3$(11,1)="D" THEN RF1$(56,4)=PO3$(12,4) ELSE IF PO3$(11,1)="C" THEN RF1$(56,4)=PO3$(3,4),RF1$(96,1)="Y" ! Either receiving whse or stopover whse for direct ships
6352 RF1$(33,4)=PO3$(7,4) ! PO3 Ship point for future use
6355 GOSUB LOOKUP_RECV_DEFAULTS
6358 RF1$(78,10)=RFB$(1,10) ! Default bin
6361 RF1$(148,4)=RFB$(15,4) ! Zone specified to bin
6364 RF1$(152,4)=RFZ$(10,4) ! Put away sequence defined for zone specified in bin
6367 RF1$(191,4)=RFB$(23,4) ! Put away sequence defined for bin
6380 RF1[0]=PO2[5]
6383 RF1[1]=RECV_QTY_PER_UOM; IF RF1[1]=0 THEN IF PO2[2]<>0 THEN RF1[1]=PO2[2] ELSE RF1[1]=1
6386 RF1[2]=PO2[11]
6389 RF1[3]=RECV_QTY
6392 RF1[4]=PO2[6]
6395 RF1[5]=PO2[0]
6398 IF PO1$(305,1)<>" " THEN DIM FS2$(356),FS2[29]; READ (Z[9],KEY=PO2$(82,8)+PO2$(7,3),DOM=*NEXT)IOL=IOL_FS2; RF1[6]=FS2[4]; FS2$(198,7)=STR(IC0[16]); WRITE (Z[9],KEY=PO2$(82,8)+PO2$(7,3))IOL=IOL_FS2 ! 274048-Carton weight; Sell price logic here is obsolete, handled in RFGWA0, see 251435, for actual sell price logic; If not stock PO then record sell price from order line
6399 IF PO2[18]=0 THEN PO2[18]=IC0[16]; WRITE (Z[12],KEY=PO2$(82,9)+PO2$(7,3))IOL=IOL_PO2 ! 274048-Update PO2 and FS2 lines with carton weight from IC0, same logic as PO2MAB, WMS can assume IC0 ALWAYS exists so we only use IC0[16]
6440 IF PO2[2]<>RF1[1] THEN {
6443 IF PO2[2]=0 THEN PO2[2]=1
6446 PRECISION 10; COST=(RF1[5]*RF1[1])/PO2[2]; PRECISION 2
6449 RF1[5]=COST
6452  }
6455 WRITE (Z[17],KEY=RF1$(1,12)+RF1$(140,8)+RF1$(196,3),DOM=*NEXT)IOL=IOL_RF1; GOTO 6459
6456 IF RF1$(196,3)<"999" THEN RF1$(196,3)=STR(NUM(RF1$(196,3))+1:"000") ELSE RF1$(196,3)=FN%NEXT_SEQ$(RF1$(196,3),6) ! Increment sequence, using letters if numbers run out
6457 GOTO 6455
6460 REM "TODO : CLEAN THIS UP : REPLACE UPD PROGRAMS WITH CLEANER CODE
6465 CALL "UPDRFI;UPDATE_LOT_NUM",Z[3],RF1$
6470 IF RECV_PRINT_LABELS THEN GOSUB PRINT_LABELS
6480 CALL "UPDRFA;ADD_RC",Z[18],X3$,RF1$,RECV_QTY,0,RF1[1] ! 268565
6495 RETURN 
6499 ! 
6500 REM "Lookup bin, zone and put away sequence information
6505 LOOKUP_RECV_DEFAULTS:
6510 DIM IC1$(60),IC1[20]; FIND (Z[16],KEY=PO2$(91,20)+RF1$(56,4),DOM=*NEXT)IOL=IOL_IC1
6515 DEFAULT_BIN_LOC$=MID(IC1$,35,10) ! Default bin from IC1
6520 READ (Z[4],KEY=PO2$(91,20),KNO=2,DOM=*NEXT)
6525 DIM RFB$(1000),RFB[4]; READ (Z[4],END=*NEXT)IOL=IOL_RFB; IF RFB$(27,20)=PO2$(91,20) THEN DEFAULT_BIN_LOC$=RFB$(1,10)
6530 DIM RFB$(1000),RFB[4]
6535 IF NOT(NUL(DEFAULT_BIN_LOC$)) THEN READ (Z[4],KEY=DEFAULT_BIN_LOC$+RF1$(56,4),KNO=0,DOM=*NEXT)IOL=IOL_RFB
6540 DIM RFZ$(200); IF NOT(NUL(MID(RFB$,16,4))) THEN READ (Z[5],KEY=MID(RFB$,16,4),DOM=*NEXT)IOL=IOL_RFZ
6545 RETURN 
6549 ! 
6550 REM "Print labels for given RF1 entry
6555 PRINT_LABELS:
6560 IF RECV_PRINT_LABELS THEN {
6570 CALL "UPDRFQ;ADD_FROM_RF1",Z[19],RF1$,RFK$,X3$,RECV_PRINT_LABELS,RF1{ALL}
6580  }
6595 RETURN 
6599 ! 
6600 REM "Check cart contents and PO for current and previous received quantities
6605 GET_RECV_INFO:
6610 MIXED_CART_UOM$="N",RECV_CART_UOM$="",RECV_CART_QTY_UOM=0,RECV_CART_QTY_EACHES=0 ! Variables tracking received quantities in current cart
6615 GCR_CART:READ (Z[20],KEY=CART$,KNO=CART_DISP_KEY,DOM=*NEXT)
6620 NEXT_GCR_CART:
6625 RF1K$=KEY(Z[20],END=DONE_GCR_CART); DIM RF1$(900),RF1[10]; READ (Z[20],KEY=RF1K$)IOL=IOL_RF1; IF RF1$(156,10)<>CART$ THEN GOTO DONE_GCR_CART
6626 IF RF1$(13,20)<>PO2$(91,20) THEN GOTO NEXT_GCR_CART
6630 U$=RF1$(88,4),U_QPM=RF1[1]; GOSUB GET_UOM_FORMATTED; Q=RF1[3]*U; RECV_CART_QTY_EACHES+=Q
6635 IF NOT(NUL(RECV_CART_UOM$)) AND (RECV_CART_UOM$<>RF1$(88,4) OR RECV_CART_QTY_UOM<>RF1[1]) THEN MIXED_CART_UOM$="Y" ELSE RECV_CART_UOM$=RF1$(88,4),RECV_CART_QTY_UOM=RF1[1]
6640 GOTO NEXT_GCR_CART
6645 DONE_GCR_CART:
6650 IF RECV_CART_QTY_EACHES THEN U$=RECV_CART_UOM$,U_QPM=RECV_CART_QTY_UOM; GOSUB GET_UOM_FORMATTED; RECV_CART_QTY=RECV_CART_QTY_EACHES/U
6655 ! 
6660 GCR_PO:
6665 RECV_PREV_UOM$="",RECV_PREV_QTY_UOM=0,RECV_PREV_QTY=0 ! Variables tracking previously received quantities for PO line
6670 DIM PO2$(170),PO2[28]; FIND (Z[12],KEY=PO_NUMBER$+PO_LINE_NUMBER$,DOM=ERR_INVALID_POLINE)IOL=IOL_PO2
6675 U$=PO2$(77,4),U_QPM=PO2[2]; GOSUB GET_UOM_FORMATTED; Q=PO2[6]/U
6680 RECV_PREV_UOM$=PO2$(77,4),RECV_PREV_QTY_UOM=PO2[2],RECV_PREV_QTY=Q
6685 DONE_GCR_PO:
6695 RETURN 
6699 ! 
6700 REM "Record active item in session
6705 SET_ACTIVE_ITEM:
6710 EC$[1](1178,20)=PO2$(91,20); EXTRACT RECORD (33005,KEY=EC$[1](1,7),DOM=*RETURN)ECB$ ! Update active item to session
6715 ECB$(1178,20)=PO2$(91,20); WRITE RECORD (33005,KEY=EC$[1](1,7))ECB$
6720 LOG_MESG$="ACTIVE_ITEM|"+PO2$(91,20)+"|"; GOSUB LOG_MSG
6725 RETURN 
6729 ! 
6750 REM "Process section for receiving info display
6751 GET_RECV_SECTION:
6752 RECV_SECTION$="",RVI_TAGS$="001<po_number>002<po_number_fmt>003<item_key>004<item_cust_code>005<item_cust_code_fmt>006<item_code>007<item_desc>008<po_line_number>009<recv_cart_uom>010<recv_cart_qty_uom>011<recv_cart_uom_fmt>012<recv_cart_qty_eaches>013<recv_cart_qty>014<mixed_cart_uom>015<recv_prev_uom>016<recv_prev_qty_uom>017<recv_prev_uom_fmt>018<recv_prev_qty_eaches>019<recv_prev_qty>"
6753 IF POS("?tf?receiving_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)TMPLINE$; TMPLINE$=FNBYB$(TMPLINE$); LINE$+=TMPLINE$+EOL$; GOTO *SAME
6754 E1=POS("?tf?receiving_start?"=LINE$); IF E1>0 THEN LINE1$=MID(LINE$,1,E1-1); LINE$=LINE$(E1+20) ELSE RETURN 
6755 E2=POS("?tf?receiving_end?"=LINE$); IF E2>0 THEN LINE2$=MID(LINE$,E2+18); LINE$=LINE$(1,E2-1) ELSE RETURN 
6760 IF NUL(PO_LINE_NUMBER$) THEN GOTO 6791
6762 GOSUB GET_RECV_INFO
6765 RVI_SECTION$=LINE$
6767 RVIINDEX=POS("?tf?"=RVI_SECTION$); IF RVIINDEX=0 THEN GOTO 6791
6768 RVIEND_INDEX=POS("?"=RVI_SECTION$(RVIINDEX+4)),RVITAG$=RVI_SECTION$(RVIINDEX+4,RVIEND_INDEX-1),RVI1$=RVI_SECTION$(1,RVIINDEX-1),RVI2$=RVI_SECTION$(RVIINDEX+RVIEND_INDEX+4),RVIPOS=POS("<"+RVITAG$+">"=RVI_TAGS$); IF RVIPOS=0 THEN RVI_SECTION$=RVI1$+RVI2$,RVIINDEX=0 ELSE RVIINDEX=NUM(RVI_TAGS$(RVIPOS-3,3))
6769 ON RVIINDEX GOTO 6789,6770,6771,6772,6773,6774,6775,6776,6777,6778,6779,6780,6781,6782,6783,6784,6785,6786,6787,6788,6789
6770 RVI_SECTION$=RVI1$+PO2$(82,9)+RVI2$; GOTO 6790; REM " po_number
6771 RVI_SECTION$=RVI1$+FN%ZZDISP$(PO2$(82,9),"P/O")+RVI2$; GOTO 6790; REM " po_number_fmt
6772 RVI_SECTION$=RVI1$+PO2$(91,20)+RVI2$; GOTO 6790; REM " item_key
6773 RVI_SECTION$=RVI1$+STP(PO2$(91,10),2)+RVI2$; GOTO 6790; REM " item_cust_code
6774 RVI_SECTION$=RVI1$+STP(FN%ZZDISP$(PO2$(91,10),"A/R"),2)+RVI2$; GOTO 6790; REM " item_cust_code_fmt
6775 RVI_SECTION$=RVI1$+STP(PO2$(101,10),2)+RVI2$; GOTO 6790; REM " item_code
6776 RVI_SECTION$=RVI1$+STP(PO2$(28,40),2)+RVI2$; GOTO 6790; REM " item_desc
6777 RVI_SECTION$=RVI1$+PO2$(7,3)+RVI2$; GOTO 6790; REM " po_line_number
6778 RVI_SECTION$=RVI1$+STP(RECV_CART_UOM$,2)+RVI2$; GOTO 6790; REM " recv_cart_uom
6779 RVI_SECTION$=RVI1$+STR(RECV_CART_QTY_UOM)+RVI2$; GOTO 6790; REM " recv_cart_qty_uom
6780 FMT$=""; IF RECV_CART_QTY_EACHES THEN FMT$=STP(RECV_CART_UOM$,2)+"/"+STR(RECV_CART_QTY_UOM) END_IF ; RVI_SECTION$=RVI1$+FMT$+RVI2$; GOTO 6790; REM " recv_cart_uom_fmt
6781 RVI_SECTION$=RVI1$+STR(RECV_CART_QTY_EACHES:M1I$)+RVI2$; GOTO 6790; REM " recv_cart_qty_eaches
6782 IF FPT(RECV_CART_QTY)=0 THEN M0$=M1I$ ELSE M0$=M1D$ END_IF ; RVI_SECTION$=RVI1$+STR(RECV_CART_QTY:M0$)+RVI2$; GOTO 6790; REM " recv_cart_qty
6783 MIX$=""; IF MIXED_CART_UOM$="Y" THEN MIX$="**" END_IF ; RVI_SECTION$=RVI1$+MIX$+RVI2$; GOTO 6790; REM " mixed_cart_uom
6784 RVI_SECTION$=RVI1$+STP(RECV_PREV_UOM$,2)+RVI2$; GOTO 6790; REM " recv_prev_uom
6785 RVI_SECTION$=RVI1$+STR(RECV_PREV_QTY_UOM)+RVI2$; GOTO 6790; REM " recv_prev_qty_uom
6786 FMT$=""; IF PO2[6]<>0 THEN FMT$=STP(RECV_PREV_UOM$,2)+"/"+STR(RECV_PREV_QTY_UOM) END_IF ; RVI_SECTION$=RVI1$+FMT$+RVI2$; GOTO 6790; REM " recv_prev_uom_fmt
6787 RVI_SECTION$=RVI1$+STR(RECV_PREV_QTY_EACHES:M1I$)+RVI2$; GOTO 6790; REM " recv_prev_qty_eaches
6788 IF FPT(RECV_CART_QTY)=0 THEN M0$=M1I$ ELSE M0$=M1D$ END_IF ; RVI_SECTION$=RVI1$+STR(PO2[6]:M0$)+RVI2$; GOTO 6790; REM " recv_prev_qty
6789 RVI_SECTION$=RVI1$+RVI2$; GOTO 6790; REM " Unknown tag, strip off
6790 GOTO 6767
6791 RECV_SECTION$+=RVI_SECTION$ ! GOTO 6765
6795 RETURN 
6799 ! 
6800 REM "Display cart contents - all RF1 recs that are in specified cart
6805 DISPLAY_RECV_CART:
6852 CART_SECTION$="",CT_TAGS$="001<po_number>002<po_line_number>003<whse>004<recv_qty>005<uom_fmt>006<po_number_fmt>007<item_key>008<item_cust_code>009<item_cust_code_fmt>010<item_code>011<item_desc>012<lot_num>013<rf1_key>014<stopover>015<stopover_asterisk>"
6853 IF POS("?tf?display_recv_cart_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)TMPLINE$; TMPLINE$=FNBYB$(TMPLINE$); LINE$+=TMPLINE$+EOL$; GOTO *SAME
6854 E1=POS("?tf?display_recv_cart_start?"=LINE$); IF E1>0 THEN LINE1$=MID(LINE$,1,E1-1); LINE$=LINE$(E1+28) ELSE RETURN 
6855 E2=POS("?tf?display_recv_cart_end?"=LINE$); IF E2>0 THEN LINE2$=MID(LINE$,E2+26); LINE$=LINE$(1,E2-1) ELSE RETURN 
6856 IF NUL(CART$) THEN GOTO 6891
6859 READ (Z[20],KEY=CART$,KNO=CART_DISP_KEY,DOM=*NEXT)
6860 RF1K$=KEY(Z[20],END=6895); DIM RF1$(900),RF1[10]; READ (Z[20],KEY=RF1K$)IOL=IOL_RF1; IF RF1$(156,10)<>CART$ THEN GOTO 6895
6865 CT_SECTION$=LINE$
6867 CTINDEX=POS("?tf?"=CT_SECTION$); IF CTINDEX=0 THEN GOTO 6891
6868 CTEND_INDEX=POS("?"=CT_SECTION$(CTINDEX+4)),CTTAG$=CT_SECTION$(CTINDEX+4,CTEND_INDEX-1),CT1$=CT_SECTION$(1,CTINDEX-1),CT2$=CT_SECTION$(CTINDEX+CTEND_INDEX+4),CTPOS=POS("<"+CTTAG$+">"=CT_TAGS$); IF CTPOS=0 THEN CT_SECTION$=CT1$+CT2$,CTINDEX=0 ELSE CTINDEX=NUM(CT_TAGS$(CTPOS-3,3))
6869 ON CTINDEX GOTO 6889,6870,6871,6872,6873,6874,6875,6876,6877,6878,6879,6880,6881,6882,6883,6884,6889
6870 CT_SECTION$=CT1$+RF1$(1,9)+CT2$; GOTO 6890; REM " po_number
6871 CT_SECTION$=CT1$+RF1$(10,3)+CT2$; GOTO 6890; REM " po_line_number
6872 CT_SECTION$=CT1$+RF1$(56,4)+CT2$; GOTO 6890; REM " whse
6873 CT_SECTION$=CT1$+STR(RF1[3])+CT2$; GOTO 6890; REM " recv_qty
6874 CT_SECTION$=CT1$+STP(RF1$(88,4),2)+"/"+STR(RF1[1])+CT2$; GOTO 6890; REM " uom_fmt
6875 CT_SECTION$=CT1$+FN%ZZDISP$(RF1$(1,9),"P/O")+CT2$; GOTO 6890; REM " po_number_fmt
6876 CT_SECTION$=CT1$+RF1$(13,20)+CT2$; GOTO 6890; REM " item_key
6877 CT_SECTION$=CT1$+STP(RF1$(13,10),2)+CT2$; GOTO 6890; REM " item_cust_code
6878 CT_SECTION$=CT1$+STP(FN%ZZDISP$(RF1$(13,10),"A/R"),2)+CT2$; GOTO 6890; REM " item_cust_code_fmt
6879 CT_SECTION$=CT1$+STP(RF1$(23,10),2)+CT2$; GOTO 6890; REM " item_code
6880 CT_SECTION$=CT1$+STP(RF1$(100,40),2)+CT2$; GOTO 6890; REM " item_desc
6881 CT_SECTION$=CT1$+RF1$(140,8)+CT2$; GOTO 6890; REM " lot_num
6882 CT_SECTION$=CT1$+RF1$(1,12)+RF1$(140,8)+RF1$(196,3)+CT2$; GOTO 6890; REM " rf1_key
6883 CT_SECTION$=CT1$+RF1$(96,1)+CT2$; GOTO 6890; REM " stopover
6884 CT_SECTION$=CT1$+TBL(RF1$(96,1)="Y","","*")+CT2$; GOTO 6890; REM " stopover "*"
6889 CT_SECTION$=CT1$+CT2$; GOTO 6890; REM " Unknown tag, strip off
6890 GOTO 6867
6891 CART_SECTION$+=CT_SECTION$; GOTO 6860
6895 RETURN 
6899 ! 
6900 REM "Get job notes for PO
6905 GET_JOB_NOTES:
6910 JOB_NOTES$=""
6911 IF MID(WMPARM$,8,1)="Y" THEN GOTO GET_FMN ! 273215
6913 READ (Z[22],KEY="O"+MID(PO_NUMBER$,1,8),KNO=1,DOM=*NEXT)
6916 DIM JT0$(2160); READ (Z[22],END=*NEXT)JT0$
6919 IF MID(JT0$,16,9)="O"+MID(PO_NUMBER$,1,8) THEN GOTO JT0_FOUND
6922 READ (Z[22],KEY="P"+MID(PO_NUMBER$,1,9),KNO=1,DOM=*NEXT)
6925 DIM JT0$(2160); READ (Z[22],END=*NEXT)JT0$
6928 IF MID(JT0$,16,9)="P"+MID(PO_NUMBER$,1,9) THEN GOTO JT0_FOUND
6930 RETURN 
6934 ! 
6935 JT0_FOUND:
6940 JOB_NOTES$=STP(MID(JT0$,44,1600),2)
6945 RETURN 
6949 ! 
6950 GET_FMN:! 273215
6960 READ (Z[23],KEY=MID(PO_NUMBER$,1,8),DOM=*NEXT)FMN$
6970 FOR FMN_I=0 TO 9; IF NOT(NUL(MID(FMN$,9+FMN_I*50,50))) THEN JOB_NOTES$+=STP(MID(FMN$,(9+FMN_I*50),50),2)+$0A$ END_IF ; NEXT FMN_I
6995 RETURN 
6999 ! 
7300 REM "Retreive 1 or more values in VALUE$ place in VAL$[] and set VAL_COUNT-Values seperated by ', 's (that is comma + blank), current max of 2002 values
7301 REM "We will add all values blank or not
7305 PARSE_DATA_TAG:
7307 DIM VAL$[2000]; VAL_COUNT=0
7310 IF VAL_COUNT=2000 THEN GOTO 7340 ELSE VP=POS(", "=VALUE$); IF VP=0 THEN GOTO 7335
7315 VAL_COUNT=VAL_COUNT+1; IF VP=1 THEN VAL$[VAL_COUNT]="",VALUE$=VALUE$(3); GOTO 7310 ELSE VAL$[VAL_COUNT]=VALUE$(1,VP-1); IF VP=LEN(VALUE$) THEN VALUE$=""; GOTO 7340 ELSE VALUE$=VALUE$(VP+2); GOTO 7310
7335 REM "finish up last one
7337 VAL_COUNT=VAL_COUNT+1; VAL$[VAL_COUNT]=VALUE$
7340 IF VAL_COUNT>HIGHEST_VAL_COUNT THEN FOR TMP_INDEX=HIGHEST_VAL_COUNT+1 TO VAL_COUNT; RF1_IN_DATA$[TMP_INDEX]=DIM(LEN(RF1_IN$)); NEXT TMP_INDEX; HIGHEST_VAL_COUNT=VAL_COUNT; REM "If new higher val count value then initialize data array
7345 RETURN 
7349 ! 
7400 REM "Update cart - perform all cart related change functions here
7405 UPDATE_CART:
7410 IF UPDATE_CART$<>"Y" THEN RETURN 
7430 FOR UPD_INDEX=1 TO HIGHEST_VAL_COUNT
7432 DIM RF1$(900),RF1[10]; READ (Z[17],KEY=MID(RF1_IN_DATA$[UPD_INDEX],1,23))IOL=IOL_RF1; IF RF1$(156,10)<>CART$ THEN GOTO *CONTINUE
7435 IF RF1_IN_DATA[UPD_INDEX,3]>=0 THEN {
7440 IF RF1_IN_DATA[UPD_INDEX,3]=0 THEN REMOVE (Z[17],KEY=MID(RF1_IN_DATA$[UPD_INDEX],1,23),ERR=*PROCEED); FTO_PONUM$=MID(RF1_IN_DATA$[UPD_INDEX],1,9); GOSUB UNLOCK_PO; CONTINUE
7450 IF RF1_IN_DATA[UPD_INDEX,3]>0 THEN {
7455 RF1[3]=RF1_IN_DATA[UPD_INDEX,3]
7460 WRITE (Z[17],KEY=MID(RF1_IN_DATA$[UPD_INDEX],1,23))IOL=IOL_RF1
7465  }
7467  }
7475 IF RF1_IN_DATA[UPD_INDEX,10]>0 THEN RECV_PRINT_LABELS=RF1_IN_DATA[UPD_INDEX,10]; GOSUB PRINT_LABELS
7480 NEXT UPD_INDEX
7495 RETURN 
7499 ! 
7500 REM "Check cart for presence of PO and remove FTO lock if not found
7505 UNLOCK_PO:
7510 IF NUL(FTO_PONUM$) THEN RETURN 
7515 READ (Z[17],KEY=FTO_PONUM$,DOM=*NEXT)
7520 RF1K$=KEY(Z[17],END=*NEXT); IF MID(RF1K$,1,9)=FTO_PONUM$ THEN RETURN ! PO exists in cart, do not remove FTO
7525 REMOVE (Z[11],KEY=FTO_PONUM$,DOM=*NEXT)
7545 RETURN 
7549 ! 
7550 REM "Cancel receiving for all POs in cart - typically cart will have one PO, but could be more
7551 CANCEL_RECEIVING:
7555 READ (Z[20],KEY=CART$,KNO=CART_DISP_KEY,DOM=*NEXT)
7560 RF1K$=KEY(Z[20],END=UNLOCK_CART); DIM RF1$(900),RF1[10]; READ (Z[20],KEY=RF1K$)IOL=IOL_RF1; IF RF1$(156,10)<>CART$ THEN GOTO UNLOCK_CART
7563 REMOVE (Z[17],KEY=RF1$(1,12)+RF1$(140,8)+RF1$(196,3),ERR=ERR_CANCEL_RF1); FTO_PONUM$=RF1$(1,9); GOSUB UNLOCK_PO
7565 GOTO 7560 ! Repeat removal of first line in cart. Note: UNLOCK_PO will have moved the RF1 pointer so reset it
7570 UNLOCK_CART:
7575 EXTRACT (Z[2],KEY=CART$,DOM=ERR_CART_BUSY)IOL=IOL_RF2
7580 RF2$(11,1)="",RF2$(12,15)=""
7585 WRITE (Z[2],KEY=CART$)IOL=IOL_RF2
7587 GOSUB CLEAR_ACTIVE_SESSION_VARS
7588 CALL "UPDFTO;CANCEL_RECV",Z[11],CART$,"" ! SSP 270870
7590 RETURN 
7591 ! 
7596 ERR_CANCEL_RF1: ERRCODE$="501"; RETURN 
7599 ! 
7600 REM "Complete receiving for all POs in cart
7605 COMPLETE_RECEIVING:
7607 STOPOVER_CART=1 ! Assume purely stopover product in cart, and adjust as we go
7610 READ (Z[20],KEY=CART$,KNO=CART_DISP_KEY,DOM=*NEXT)
7615 RF1K$=KEY(Z[20],END=UNLOCK_CART_CMPL); DIM RF1$(900),RF1[10]; READ (Z[20],KEY=RF1K$)IOL=IOL_RF1; IF RF1$(156,10)<>CART$ THEN GOTO UNLOCK_CART_CMPL
7620 IF MID(RF1$,96,1)="Y" THEN {
7625 REMOVE (Z[17],KEY=RF1$(1,12)+RF1$(140,8)+RF1$(196,3),ERR=ERR_COMPLETE_STOPOVER) ! Remove stopover entry from RF1
7630 WRITE (Z[21],KEY="L"+RF1$(56,4)+RF1$(1,8)+RF1$(199,3)) ! Print packing list for this stopover line
7635 FTO_PONUM$=RF1$(1,9); GOSUB UNLOCK_PO ! Check if the PO's receiving lock can be cleared     
7640  } ELSE {
7645 STOPOVER_CART=0 ! At least one entry to be put away so not a purely stopover cart
7650  }
7655 GOTO 7615
7660 UNLOCK_CART_CMPL:
7665 EXTRACT (Z[2],KEY=CART$,DOM=ERR_CART_BUSY)IOL=IOL_RF2
7670 RF2$(12,15)=""; IF STOPOVER_CART THEN RF2$(11,1)="" ELSE RF2$(11,1)="C"
7680 WRITE (Z[2],KEY=CART$)IOL=IOL_RF2
7685 GOSUB CLEAR_ACTIVE_SESSION_VARS
7690 RETURN 
7691 ! 
7696 ERR_COMPLETE_STOPOVER: ERRCODE$="601"; RETURN 
7699 ! 
7700 REM "Control tags to suppress whole backorder qty HTML section
7705 IS_ITEM_BO_SECTION_ENABLED:
7710 IF NUL(PO_LINE_NUMBER$) THEN GOTO 7745 ELSE GOSUB GET_ITEM_FROM_PO_LINE; IF NOT(NUL(ERRCODE$)) THEN GOTO 7745
7715 IF MID(ICPARM$,62,1)="Y" AND POS(PO2$(10,1)="IX")>0 THEN GOTO 7745 ! Check if ok to display section, IC param says OK and it is an inventory item
7720 ! Not OK to display section, so get rid of it
7730 IF POS("?tf?item_bo_enabled_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)TMPLINE$; LINE$+=TMPLINE$; GOTO *SAME ! Consume and discard all HTML until the end of the section
7745 RETURN 
7749 ! 
7750 REM "Process section for item backorder quantities
7751 GET_ITEM_BO_SECTION:
7752 ITEM_BO_SECTION$="",BO_TAGS$="001<po_number>002<po_number_fmt>003<item_key>004<item_cust_code>005<item_cust_code_fmt>006<item_code>007<item_desc>008<po_line_number>009<whse>010<bo_qty>011<uom_fmt>"
7753 IF POS("?tf?item_bo_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)TMPLINE$; TMPLINE$=FNBYB$(TMPLINE$); LINE$+=TMPLINE$+EOL$; GOTO *SAME
7754 E1=POS("?tf?item_bo_start?"=LINE$); IF E1>0 THEN LINE1$=MID(LINE$,1,E1-1); LINE$=LINE$(E1+18) ELSE RETURN 
7755 E2=POS("?tf?item_bo_end?"=LINE$); IF E2>0 THEN LINE2$=MID(LINE$,E2+16); LINE$=LINE$(1,E2-1) ELSE RETURN 
7756 IF NUL(PO_LINE_NUMBER$) THEN GOTO 7795 ELSE GOSUB GET_ITEM_FROM_PO_LINE; IF NOT(NUL(ERRCODE$)) THEN GOTO 7795 ELSE GOSUB GET_PO_LINE_SHIP_LIST
7757 IF MID(ICPARM$,62,1)<>"Y" OR POS(PO2$(10,1)="IX")=0 THEN GOTO 7795 ! Do not display section unless params say OK and it is an inventory item
7758 U$=IC0$(124,4),U_QPM=IC0[15]; GOSUB GET_UOM_FORMATTED
7759 READ (Z[16],KEY=PO2$(91,20),DOM=*NEXT)
7760 IC1K$=KEY(Z[16],END=7795); DIM IC1[20]; READ (Z[16],KEY=IC1K$)IOL=IOL_IC1; IF IC1$(1,20)<>IC0$(1,20) THEN GOTO 7795 ELSE IF MID(RFK$,132,1)<>"Y" THEN IF POS(IC1$(21,4)=PO_LINE_WHSE_ALL$,4) THEN GOTO *NEXT ELSE GOTO *SAME
7761 IF IC1[11]<=0 THEN GOTO 7760
7762 Q=IC1[11]/U
7763 IF FPT(Q)=0 THEN M0$=M1I$ ELSE M0$=M1D$ END_IF ; Q$=STR(Q:M0$)
7765 BO_SECTION$=LINE$
7767 BOINDEX=POS("?tf?"=BO_SECTION$); IF BOINDEX=0 THEN GOTO 7791
7768 BOEND_INDEX=POS("?"=BO_SECTION$(BOINDEX+4)),BOTAG$=BO_SECTION$(BOINDEX+4,BOEND_INDEX-1),BO1$=BO_SECTION$(1,BOINDEX-1),BO2$=BO_SECTION$(BOINDEX+BOEND_INDEX+4),BOPOS=POS("<"+BOTAG$+">"=BO_TAGS$); IF BOPOS=0 THEN BO_SECTION$=BO1$+BO2$,BOINDEX=0 ELSE BOINDEX=NUM(BO_TAGS$(BOPOS-3,3))
7769 ON BOINDEX GOTO 7789,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7789
7770 BO_SECTION$=BO1$+PO2$(82,9)+BO2$; GOTO 7790; REM " po_number
7771 BO_SECTION$=BO1$+FN%ZZDISP$(PO2$(82,9),"P/O")+BO2$; GOTO 7790; REM " po_number_fmt
7772 BO_SECTION$=BO1$+PO2$(91,20)+BO2$; GOTO 7790; REM " item_key
7773 BO_SECTION$=BO1$+STP(PO2$(91,10),2)+BO2$; GOTO 7790; REM " item_cust_code
7774 BO_SECTION$=BO1$+STP(FN%ZZDISP$(PO2$(91,10),"A/R"),2)+BO2$; GOTO 7790; REM " item_cust_code_fmt
7775 BO_SECTION$=BO1$+STP(PO2$(101,10),2)+BO2$; GOTO 7790; REM " item_code
7776 BO_SECTION$=BO1$+STP(PO2$(28,40),2)+BO2$; GOTO 7790; REM " item_desc
7777 BO_SECTION$=BO1$+PO2$(7,3)+BO2$; GOTO 7790; REM " po_line_number
7778 BO_SECTION$=BO1$+IC1$(21,4)+BO2$; GOTO 7790; REM " whse
7779 BO_SECTION$=BO1$+Q$+BO2$; GOTO 7790; REM " bo_qty
7780 BO_SECTION$=BO1$+STP(U$,2)+"/"+STR(IC0[15])+BO2$; GOTO 7790; REM " uom_fmt
7789 BO_SECTION$=BO1$+BO2$; GOTO 7790; REM " Unknown tag, strip off
7790 GOTO 7767
7791 ITEM_BO_SECTION$+=BO_SECTION$; GOTO 7760
7795 RETURN 
7799 ! 
7800 REM "Clear active vars stored in session after receiving complete or cancelled
7810 CLEAR_ACTIVE_SESSION_VARS:
7820 EC$[1](1277,10)="",EC$[1](1287,9)=""; EXTRACT RECORD (33005,KEY=EC$[1](1,7),DOM=*RETURN)ECB$ ! Clear active cart and PO number in session
7830 ECB$(1277,10)="",ECB$(1287,9)=""; WRITE RECORD (33005,KEY=EC$[1](1,7))ECB$
7845 RETURN 
7849 ! 
7850 REM "Process section for lotted inventory items
7851 GET_LOT_SECTION:
7852 LOT_SECTION$="",LI_TAGS$="001<po_number>002<po_number_fmt>003<item_key>004<item_cust_code>005<item_cust_code_fmt>006<item_code>007<item_desc>008<po_line_number>"
7853 IF POS("?tf?lot_item_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)TMPLINE$; TMPLINE$=FNBYB$(TMPLINE$); LINE$+=TMPLINE$+EOL$; GOTO *SAME
7854 E1=POS("?tf?lot_item_start?"=LINE$); IF E1>0 THEN LINE1$=MID(LINE$,1,E1-1); LINE$=LINE$(E1+19) ELSE RETURN 
7855 E2=POS("?tf?lot_item_end?"=LINE$); IF E2>0 THEN LINE2$=MID(LINE$,E2+17); LINE$=LINE$(1,E2-1) ELSE RETURN 
7860 IF NUL(PO_LINE_NUMBER$) THEN GOTO 7891
7865 LI_SECTION$=LINE$
7867 LIINDEX=POS("?tf?"=LI_SECTION$); IF LIINDEX=0 THEN GOTO 7891
7868 LIEND_INDEX=POS("?"=LI_SECTION$(LIINDEX+4)),LITAG$=LI_SECTION$(LIINDEX+4,LIEND_INDEX-1),LI1$=LI_SECTION$(1,LIINDEX-1),LI2$=LI_SECTION$(LIINDEX+LIEND_INDEX+4),LIPOS=POS("<"+LITAG$+">"=LI_TAGS$); IF LIPOS=0 THEN LI_SECTION$=LI1$+LI2$,LIINDEX=0 ELSE LIINDEX=NUM(LI_TAGS$(LIPOS-3,3))
7869 ON LIINDEX GOTO 7889,7870,7871,7872,7873,7874,7875,7876,7877,7889
7870 LI_SECTION$=LI1$+PO2$(82,9)+LI2$; GOTO 7890; REM " po_number
7871 LI_SECTION$=LI1$+FN%ZZDISP$(PO2$(82,9),"P/O")+LI2$; GOTO 7890; REM " po_number_fmt
7872 LI_SECTION$=LI1$+PO2$(91,20)+LI2$; GOTO 7890; REM " item_key
7873 LI_SECTION$=LI1$+STP(PO2$(91,10),2)+LI2$; GOTO 7890; REM " item_cust_code
7874 LI_SECTION$=LI1$+STP(FN%ZZDISP$(PO2$(91,10),"A/R"),2)+LI2$; GOTO 7890; REM " item_cust_code_fmt
7875 LI_SECTION$=LI1$+STP(PO2$(101,10),2)+LI2$; GOTO 7890; REM " item_code
7876 LI_SECTION$=LI1$+STP(PO2$(28,40),2)+LI2$; GOTO 7890; REM " item_desc
7877 LI_SECTION$=LI1$+PO2$(7,3)+LI2$; GOTO 7890; REM " po_line_number
7889 LI_SECTION$=LI1$+LI2$; GOTO 7890; REM " Unknown tag, strip off
7890 GOTO 7867
7891 LOT_SECTION$+=LI_SECTION$ ! GOTO 7865
7895 RETURN 
7899 ! 
7900 REM "Get special shipping points listing for PO line if available
7905 GET_PO_LINE_SHIP_LIST:
7906 PO_LINE_SHIP_LIST$="",PO_LINE_WHSE_ALL$=""
7907 IF NUL(PO_LINE_NUMBER$) THEN GOTO 7945
7908 U$=PO2$(77,4),U_QPM=PO2[2]; GOSUB GET_UOM_FORMATTED
7910 READ (Z[15],KEY=PO2$(82,8)+DIM(1)+PO2$(7,3),DOM=*NEXT)
7912 PO3K$=KEY(Z[15],END=DONE_PO3_LIST); DIM PO3$(430),PO3[3]; READ (Z[15],KEY=PO3K$)IOL=IOL_PO3
7916 IF PO3$(166,8)+DIM(1)+PO3$(7,3)<>PO2$(82,8)+DIM(1)+PO2$(7,3) THEN GOTO DONE_PO3_LIST
7920 IF PO3$(11,1)="D" THEN PO_LINE_SHIP_LIST$+="<option value="+QUO+PO3$(10,1)+QUO+">"+PO3$(11,5)+" - "+STR(PO3[0]/U)+" - "+STP(U$,2)+"/"+STR(PO2[2])+"</option>"+EOL$; PO_LINE_WHSE_ALL$+=PO3$(12,4); GOTO 7912
7922 IF PO3$(11,1)="C" AND NOT(NUL(PO3$(3,4))) THEN PO_LINE_SHIP_LIST$+="<option value="+QUO+PO3$(10,1)+QUO+">"+"*"+PO3$(3,4)+" - "+STR(PO3[0]/U)+" - "+STP(U$,2)+"/"+STR(PO2[2])+"</option>"+EOL$; PO_LINE_WHSE_ALL$+=PO3$(3,4); GOTO 7912
7924 GOTO 7912
7928 DONE_PO3_LIST:
7930 IF NOT(NUL(PO_LINE_SHIP_LIST$)) THEN RETURN 
7935 DIM PO3$(430),PO3[3]; READ (Z[15],KEY=PO2$(82,8)+DIM(5),DOM=*RETURN)IOL=IOL_PO3
7940 IF PO3$(11,1)="D" THEN PO_LINE_SHIP_LIST$+="<option value="+QUO+PO3$(10,1)+QUO+">"+PO3$(11,5)+" - "+STR(PO2[1]/U)+" - "+STP(U$,2)+"/"+STR(PO2[2])+"</option>"+EOL$; PO_LINE_WHSE_ALL$+=PO3$(12,4); GOTO 7912
7942 IF PO3$(11,1)="C" AND NOT(NUL(PO3$(3,4))) THEN PO_LINE_SHIP_LIST$+="<option value="+QUO+PO3$(10,1)+QUO+">"+"*"+PO3$(3,4)+" - "+STR(PO2[1]/U)+" - "+STP(U$,2)+"/"+STR(PO2[2])+"</option>"+EOL$; PO_LINE_WHSE_ALL$+=PO3$(3,4); GOTO 7912
7945 RETURN 
7949 ! 
7950 REM "Process section for numbered items
7951 GET_NUMBERED_SECTION:
7952 NUMBERED_SECTION$="",NI_TAGS$="001<po_number>002<po_number_fmt>003<item_key>004<item_cust_code>005<item_cust_code_fmt>006<item_code>007<item_desc>008<po_line_number>009<starting_num>010<ending_num>"
7953 IF POS("?tf?numbered_item_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)TMPLINE$; TMPLINE$=FNBYB$(TMPLINE$); LINE$+=TMPLINE$+EOL$; GOTO *SAME
7954 E1=POS("?tf?numbered_item_start?"=LINE$); IF E1>0 THEN LINE1$=MID(LINE$,1,E1-1); LINE$=LINE$(E1+24) ELSE RETURN 
7955 E2=POS("?tf?numbered_item_end?"=LINE$); IF E2>0 THEN LINE2$=MID(LINE$,E2+22); LINE$=LINE$(1,E2-1) ELSE RETURN 
7960 IF NUL(PO_LINE_NUMBER$) THEN GOTO 7991
7961 IF NUMBERED_ITEM$<>"Y" THEN GOTO 7991
7965 NI_SECTION$=LINE$
7967 NIINDEX=POS("?tf?"=NI_SECTION$); IF NIINDEX=0 THEN GOTO 7991
7968 NIEND_INDEX=POS("?"=NI_SECTION$(NIINDEX+4)),NITAG$=NI_SECTION$(NIINDEX+4,NIEND_INDEX-1),NI1$=NI_SECTION$(1,NIINDEX-1),NI2$=NI_SECTION$(NIINDEX+NIEND_INDEX+4),NIPOS=POS("<"+NITAG$+">"=NI_TAGS$); IF NIPOS=0 THEN NI_SECTION$=NI1$+NI2$,NIINDEX=0 ELSE NIINDEX=NUM(NI_TAGS$(NIPOS-3,3))
7969 ON NIINDEX GOTO 7989,7970,7971,7972,7973,7974,7975,7976,7977,7978,7979,7989
7970 NI_SECTION$=NI1$+PO2$(82,9)+NI2$; GOTO 7990; REM " po_number
7971 NI_SECTION$=NI1$+FN%ZZDISP$(PO2$(82,9),"P/O")+NI2$; GOTO 7990; REM " po_number_fmt
7972 NI_SECTION$=NI1$+PO2$(91,20)+NI2$; GOTO 7990; REM " item_key
7973 NI_SECTION$=NI1$+STP(PO2$(91,10),2)+NI2$; GOTO 7990; REM " item_cust_code
7974 NI_SECTION$=NI1$+STP(FN%ZZDISP$(PO2$(91,10),"A/R"),2)+NI2$; GOTO 7990; REM " item_cust_code_fmt
7975 NI_SECTION$=NI1$+STP(PO2$(101,10),2)+NI2$; GOTO 7990; REM " item_code
7976 NI_SECTION$=NI1$+STP(PO2$(28,40),2)+NI2$; GOTO 7990; REM " item_desc
7977 NI_SECTION$=NI1$+PO2$(7,3)+NI2$; GOTO 7990; REM " po_line_number
7978 NI_SECTION$=NI1$+STP(DEF_STARTING_NUM$,2)+NI2$; GOTO 7990; REM " starting_num
7979 NI_SECTION$=NI1$+STP(DEF_ENDING_NUM$,2)+NI2$; GOTO 7990; REM " ending_num
7989 NI_SECTION$=NI1$+NI2$; GOTO 7990; REM " Unknown tag, strip off
7990 GOTO 7967
7991 NUMBERED_SECTION$+=NI_SECTION$ ! GOTO 7965
7995 RETURN 
7999 ! 
8000 GET_AVAILABLE_CARTS:
8005 WHSLIST$=MID(RFK$,23,40)
8010 GOSUB SET_XI; CALL "UPDRF2;GETBINLIST",Z[2],"R",BINLIST$,EC$[2](1,15),WHSLIST$
8011 GOSUB CLEAR_XI
8015 RETURN 
8019 ! 
8020 GET_CART_LIST: CART_LIST$=""; IF NUL(BINLIST$) THEN RETURN 
8025 FOR K=1 TO LEN(BINLIST$) STEP 10
8027 SELECTED$=""; IF PAD(CART$,10)=MID(BINLIST$,K,10) THEN SELECTED$=" selected"
8030 CART_LIST$+="<option value="+QUO+BINLIST$(K,10)+QUO+SELECTED$+">"+BINLIST$(K,10)+"</option>"+EOL$
8035 NEXT K
8040  }
8045 RETURN 
8049 ! 
8050 SET_ACTIVE_CART:
8052 GOSUB SET_XI; FIND (Z[2],KEY=CART$,DOM=ERR_BAD_CART)IOL=IOL_RF2
8056 GOSUB CLEAR_XI
8060 IF RF2$(11,1)="P" THEN GOTO ERR_PUTAWAY_CART
8064 IF POS(RF2$(11,1)=" C")=0 AND RF2$(12,15)<>EC$[2](1,15) THEN GOTO ERR_CART_GRAB
8068 EXTRACT (Z[2],KEY=CART$,DOM=ERR_CART_BUSY)IOL=IOL_RF2
8072 IF VIEW_CART$<>"Y" THEN RF2$(11,1)="R",RF2$(12,15)=EC$[2](1,15) ! 307411 - don't lock cart for this user if in view mode
8076 WRITE (Z[2],KEY=CART$)IOL=IOL_RF2
8080 EC$[1](1277,10)=CART$; EXTRACT RECORD (33005,KEY=EC$[1](1,7),DOM=*RETURN)ECB$ ! Update active cart to session
8082 ECB$(1277,10)=CART$; WRITE RECORD (33005,KEY=EC$[1](1,7))ECB$
8084 LOG_MESG$="ACTIVE_CART|"+CART$+"|"; GOSUB LOG_MSG
8085 RETURN 
8089 ! 
8090 REM "Cart - Errors
8091 ERR_BAD_CART: ERRCODE$="101"; GOSUB CLEAR_XI; RETURN ! Cart specified is invalid
8092 ERR_CART_BUSY: ERRCODE$="102"; RETURN ! Cart is currently busy and cannot be accessed
8093 ERR_PUTAWAY_CART: ERRCODE$="103"; RETURN ! Cart specified is currently in the Put Away process
8094 ERR_CART_GRAB: ERRCODE$="104"; RETURN ! Cart is in use by a different WMS user
8098 RETURN 
8099 ! 
8100 PARSE_PONUM:
8110 PO_NUMBER$=STP(PO_NUMBER$,3,"-"); IF LEN(PO_NUMBER$)<8 THEN PO_NUMBER$="00"+PO_NUMBER$
8120 PO_NUMBER$=PAD(PO_NUMBER$,9)
8145 RETURN 
8149 ! 
8150 VALIDATE_PO:
8152 GOSUB SET_XI; FIND (Z[10],KEY=PO_NUMBER$,DOM=ERR_BAD_PO)IOL=IOL_PO1; GOSUB CLEAR_XI ! Get PO1 header
8160 DIM FTO$(60); FIND (Z[11],KEY=PO_NUMBER$,DOM=*NEXT)IOL=IOL_FTO; GOTO CHECK_LOCK ! Get FTO rec if it exists
8165 PO_LOCK_REQD$="Y"; GOTO AFTER_PO_LOCK ! If no FTO rec, PO is not yet locked so set flag to do so later
8170 CHECK_LOCK:
8175 IF FTO$(10,3)<>"WMS" THEN GOTO ERR_FTO_LOCK ELSE IF FTO$(17,15)<>EC$[2](1,15) THEN GOTO ERR_WMS_LOCK ELSE IF NOT(NUL(FTO$(32,10))) AND FTO$(32,10)<>CART$ THEN GOTO ERR_CART_LOCK
8190 AFTER_PO_LOCK:! If here, no FTO rec for PO or current buyer has valid lock
8200 FIND (Z[8],KEY=PO1$(7,10),DOM=ERR_INVALID_VENDOR)AP4$; IF MID(AP4$,402,1)="Y" THEN CUST_SUPP_VEND$="Y"
8205 PO_OK=0; CALL "UPDPO3;CHECK_WMS_WHS",Z[15],MID(PO_NUMBER$,1,8),PO_OK; IF NOT(PO_OK) THEN GOTO ERR_NO_WHS_RECV
8210 GOSUB PO_ZERO_CHECK; IF ZERO_COST AND CUST_SUPP_VEND$<>"Y" THEN GOTO ERR_ZERO_COST ELSE IF ZERO_PRICE THEN GOSUB WARN_ZERO_PRICE ! Check for zero cost and price in PO lines
8225 SET_ACTIVE_PO:
8230 GOSUB UPDATE_RFI
8240 ! F PO_LOCK_REQD$="Y" THEN GOSUB LOCK_PO ! Create FTO rec for PO at this time, if required
8250 EC$[1](1287,9)=PO_NUMBER$; EXTRACT RECORD (33005,KEY=EC$[1](1,7),DOM=*RETURN)ECB$ ! Update active PO to session
8255 ECB$(1287,9)=PO_NUMBER$; WRITE RECORD (33005,KEY=EC$[1](1,7))ECB$
8280 LOG_MESG$="ACTIVE_PO|"+PO_NUMBER$+"|"; GOSUB LOG_MSG
8285 RETURN 
8289 ! 
8290 REM "Purchase Order - Errors
8291 ERR_BAD_PO: ERRCODE$="201"; GOSUB CLEAR_XI; RETURN ! PO number specified is invalid or does not exist
8292 ERR_FTO_LOCK: ERRCODE$="202"; RETURN ! PO is already being received in a different batch
8293 ERR_WMS_LOCK: ERRCODE$="203"; RETURN ! PO is already being received by a different WMS user
8294 ERR_INVALID_VENDOR: ERRCODE$="204"; RETURN ! Vendor on this PO is invalid
8295 ERR_ZERO_COST: ERRCODE$="205"; RETURN ! PO cannot be received as it has a zero cost line
8296 WARN_ZERO_PRICE: WARNCODE$="207"; RETURN ! PO has a zero price line
8297 ERR_NO_WHS_RECV: ERRCODE$="206"; RETURN ! PO does not have any lines for Warehouse receiving
8298 ERR_CART_LOCK: ERRCODE$="208"; RETURN ! PO receiving in progress within a different WMS cart
8299 ! 
8300 REM "Lock this purchase order with FTO rec under current WMS user
8305 LOCK_PO:
8306 PO_NUM$=MID(PO1$,297,9)
8308 DIM FTO$(60); FIND (Z[11],KEY=PO_NUM$,DOM=*NEXT)IOL=IOL_FTO; GOTO CHECK_FTO_LOCK ! Get FTO rec if it exists
8310 DIM FTO$(60); FTO$(1,9)=PO1$(297,9),FTO$(10,3)="WMS",FTO$(17,15)=EC$[2](1,15),FTO$(32,10)=CART$
8315 WRITE (Z[11],KEY=FTO$(1,9))IOL=IOL_FTO
8320 PO_LOCK_REQD$="N"; RETURN 
8325 CHECK_FTO_LOCK:
8330 IF FTO$(10,3)<>"WMS" THEN GOTO ERR_FTO_LOCK ELSE IF FTO$(17,15)<>EC$[2](1,15) THEN GOTO ERR_WMS_LOCK ELSE IF NOT(NUL(FTO$(32,10))) AND FTO$(32,10)<>CART$ THEN GOTO ERR_CART_LOCK
8345 RETURN 
8349 ! 
8350 REM "Check for zero costs and zero prices
8355 PO_ZERO_CHECK:
8360 ZERO_COST=0,ZERO_PRICE=0,NO_PO_LINES=1
8365 READ (Z[12],KEY=PO1$(297,9),DOM=*NEXT)
8366 NEXT_PO2: KPO2$=KEY(Z[12],END=DONE_PZC); DIM PO2$(170),PO2[28]; READ (Z[12],KEY=KPO2$)IOL=IOL_PO2; IF PO2$(82,9)<>PO1$(297,9) THEN GOTO DONE_PZC
8370 NO_PO_LINES=0; IF PO2[0]=0 AND POS(PO2$(10,1)="MS")=0 THEN ZERO_COST=1
8375 IF PO2$(90,1)<>" " THEN DIM FS2$(356),FS2[29]; FIND (Z[9],KEY=PO2$(82,8)+PO2$(7,3),DOM=*NEXT)IOL=IOL_FS2; IF FS2[4]=0 AND POS(FS2$(155,1)="MNS")=0 THEN ZERO_PRICE=1
8385 GOTO NEXT_PO2
8390 DONE_PZC:
8395 RETURN 
8399 ! 
8400 REM "Update RFI - PO Item cross reference, used for barcode reading
8401 REM "TODO : ENHANCE CROSS REFERENCE IN RFI - ADD RF1 SEQUENCE TO MIX - CURRENTLY BROKEN
8405 UPDATE_RFI:
8410 PO_LINES=0; READ (Z[12],KEY=PO1$(297,9),DOM=*NEXT)
8420 NEXT_UPD_RFI: KPO2$=KEY(Z[12],END=DONE_UPD_RFI); DIM PO2$(170),PO2[28]; READ (Z[12],KEY=KPO2$)IOL=IOL_PO2
8425 IF PO2$(82,9)<>PO1$(297,9) THEN GOTO DONE_UPD_RFI
8430 IF POS(PO2$(10,1)="MS")>0 THEN GOTO NEXT_UPD_RFI
8440 PO_LINES++
8445 DIM RFI$(283); RFI$(1,9)=PO2$(82,9),RFI$(10,3)=PO2$(7,3),RFI$(13,20)=PO2$(91,20); WRITE (Z[3],KEY=RFI$(1,12))RFI$
8470 GOTO NEXT_UPD_RFI
8475 DONE_UPD_RFI:
8480 IF PO_LINES=1 THEN DIM RFI$(283); RFI$(1,9)=PO2$(82,9),RFI$(13,20)=PO2$(91,20); WRITE (Z[3],KEY=RFI$(1,12))RFI$
8495 RETURN 
8499 ! 
8500 REM "Given PO line number, get PO line and item information
8505 GET_ITEM_FROM_PO_LINE:
8510 DIM PO2$(170),PO2[28]; FIND (Z[12],KEY=PO_NUMBER$+PO_LINE_NUMBER$,DOM=ERR_INVALID_POLINE)IOL=IOL_PO2
8515 GOSUB CHECK_PO_LINE_FOR_WMS; IF PO_LINE_WMS_OK$<>"Y" THEN GOTO ERR_ITEM_NOT_WMS
8520 ITEM_CUST_CODE$=MID(PO2$,91,10),ITEM_CODE$=MID(PO2$,101,10)
8525 DIM IC0$(188),IC0[40]; FIND (Z[7],KEY=PO2$(91,20),DOM=ERR_INVALID_ITEM)IOL=IOL_IC0
8530 ITEM_DESC$=MID(IC0$,21,40),LOTTED_ITEM$=MID(IC0$,112,1),ITEM_DESC2$=MID(IC0$,128,40) ! 260683
8540 DIM FM1$(450),FM1[31]; FIND (Z[6],KEY=PO2$(91,20),DOM=*NEXT)IOL=IOL_FM1
8550 ITEM_CIC_CODE$=MID(FM1$,350,20),NUMBERED_ITEM$=MID(FM1$,104,1)
8555 FORM_REV_DATE$=MID(FM1$,167,6) ! 259676
8560 IF NUMBERED_ITEM$="Y" THEN DEF_STARTING_NUM$=PO2$(68,9); IF NOT(NUL(DEF_STARTING_NUM$)) THEN DEF_ENDING_NUM$=STR((NUM(PO2$(68,9),ERR=*NEXT)+PO2[1]-1):DIM(LEN(STP(DEF_STARTING_NUM$,2)),"0"),ERR=*NEXT) ! 251581
8585 RETURN 
8590 ! 
8591 ERR_INVALID_POLINE: ERRCODE$="3"; RETURN ! Invalid PO line number
8592 ERR_INVALID_ITEM: ERRCODE$="301"; RETURN ! Invalid item referenced in PO line
8593 ERR_ITEM_NOT_WMS: ERRCODE$="302"; RETURN ! Item in this PO line does not qualify for WMS Receiving
8599 ! 
8600 REM "Validate if PO line is eligible for WMS Receiving
8601 REM "PO Line must be shipped to a "D" location; or to "C" location with stopover at a whse
8602 REM "Check all special shipping for PO line and if none then check general shipping for whse recv
8605 CHECK_PO_LINE_FOR_WMS:
8607 PO_LINE_WMS_OK$="N"
8610 READ (Z[15],KEY=PO2$(82,8)+DIM(1)+PO2$(7,3),DOM=*NEXT)
8612 PO3K$=KEY(Z[15],END=DONE_PO3_SSP); DIM PO3$(430),PO3[3]; READ (Z[15],KEY=PO3K$)IOL=IOL_PO3
8616 IF PO3$(166,8)+DIM(1)+PO3$(7,3)<>PO2$(82,8)+DIM(1)+PO2$(7,3) THEN GOTO DONE_PO3_SSP
8620 IF PO3$(11,1)="D" OR (PO3$(11,1)="C" AND NOT(NUL(PO3$(3,4)))) THEN PO_LINE_WMS_OK$="Y"; GOTO 8640
8624 GOTO 8612
8628 DONE_PO3_SSP:! Get general shipping now
8630 DIM PO3$(430),PO3[3]; READ (Z[15],KEY=PO2$(82,8)+DIM(5),DOM=8640)IOL=IOL_PO3
8635 IF PO3$(11,1)="D" OR (PO3$(11,1)="C" AND NOT(NUL(PO3$(3,4)))) THEN PO_LINE_WMS_OK$="Y"
8645 RETURN 
8649 ! 
8650 REM "Get PO lines list
8651 GET_PO_LINES:
8652 PO_LINES$="",PL_TAGS$="001<po_number>002<po_number_fmt>003<item_key>004<item_cust_code>005<item_cust_code_fmt>006<item_code>007<item_desc>008<po_line_number>"
8653 IF POS("?tf?po_line_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)TMPLINE$; TMPLINE$=FNBYB$(TMPLINE$); LINE$+=TMPLINE$+EOL$; GOTO *SAME
8654 E1=POS("?tf?po_line_start?"=LINE$); IF E1>0 THEN LINE1$=MID(LINE$,1,E1-1); LINE$=LINE$(E1+18) ELSE RETURN 
8655 E2=POS("?tf?po_line_end?"=LINE$); IF E2>0 THEN LINE2$=MID(LINE$,E2+16); LINE$=LINE$(1,E2-1) ELSE RETURN 
8656 READ (Z[12],KEY=PO1$(297,9),DOM=*NEXT)
8657 KPO2$=KEY(Z[12],END=8692); DIM PO2$(170),PO2[28]; READ (Z[12],KEY=KPO2$)IOL=IOL_PO2; IF PO2$(82,9)<>PO1$(297,9) THEN GOTO 8692
8658 IF POS(PO2$(10,1)="MS")>0 THEN GOTO 8657
8659 GOSUB CHECK_PO_LINE_FOR_WMS; IF PO_LINE_WMS_OK$<>"Y" THEN GOTO 8657
8665 PL_SECTION$=LINE$
8667 PLINDEX=POS("?tf?"=PL_SECTION$); IF PLINDEX=0 THEN GOTO 8691
8668 PLEND_INDEX=POS("?"=PL_SECTION$(PLINDEX+4)),PLTAG$=PL_SECTION$(PLINDEX+4,PLEND_INDEX-1),PL1$=PL_SECTION$(1,PLINDEX-1),PL2$=PL_SECTION$(PLINDEX+PLEND_INDEX+4),PLPOS=POS("<"+PLTAG$+">"=PL_TAGS$); IF PLPOS=0 THEN PL_SECTION$=PL1$+PL2$,PLINDEX=0 ELSE PLINDEX=NUM(PL_TAGS$(PLPOS-3,3))
8669 ON PLINDEX GOTO 8689,8670,8671,8672,8673,8674,8675,8676,8677,8689
8670 PL_SECTION$=PL1$+PO2$(82,9)+PL2$; GOTO 8690; REM " po_number
8671 PL_SECTION$=PL1$+FN%ZZDISP$(PO2$(82,9),"P/O")+PL2$; GOTO 8690; REM " po_number_fmt
8672 PL_SECTION$=PL1$+PO2$(91,20)+PL2$; GOTO 8690; REM " item_key
8673 PL_SECTION$=PL1$+STP(PO2$(91,10),2)+PL2$; GOTO 8690; REM " item_cust_code
8674 PL_SECTION$=PL1$+STP(FN%ZZDISP$(PO2$(91,10),"A/R"),2)+PL2$; GOTO 8690; REM " item_cust_code_fmt
8675 PL_SECTION$=PL1$+STP(PO2$(101,10),2)+PL2$; GOTO 8690; REM " item_code
8676 PL_SECTION$=PL1$+STP(PO2$(28,40),2)+PL2$; GOTO 8690; REM " item_desc
8677 PL_SECTION$=PL1$+PO2$(7,3)+PL2$; GOTO 8690; REM " po_line_number
8689 PL_SECTION$=PL1$+PL2$; GOTO 8690; REM " Unknown tag, strip off
8690 GOTO 8667
8691 PO_LINES$+=PL_SECTION$; GOTO 8657
8695 RETURN 
8699 ! 
8700 GET_ERROR_SECTION:
8710 IF POS("?tf?error_section_end?"=LINE$) THEN GOTO *NEXT ELSE READ (100,END=*NEXT)ERRSEC_LINE$; ERRSEC_LINE$=FNBYB$(ERRSEC_LINE$); LINE$+=ERRSEC_LINE$+EOL$; GOTO *SAME
8712 ERROR_SECTION$=""; IF NUL(ERRCODE$) AND NUL(WARNCODE$) THEN RETURN 
8715 E1=POS("?tf?error_section_start?"=LINE$); IF E1>0 THEN LINE1$=MID(LINE$,1,E1-1); LINE$=LINE$(E1+24) ELSE RETURN 
8716 E2=POS("?tf?error_section_end?"=LINE$); IF E2>0 THEN LINE2$=MID(LINE$,E2+22); LINE$=LINE$(1,E2-1) ELSE RETURN 
8720 LINE$=SUB(LINE$,"?tf?errmsg?",ERRMSG$)
8725 LINE$=SUB(LINE$,"?tf?errcode?",ERRCODE$)
8740 ERROR_SECTION$=LINE$
8745 RETURN 
8749 ! 
8750 EVAL_ERR_CODE:
8755 IF NUL(ERRCODE$) AND NUL(WARNCODE$) THEN RETURN 
8760 IF NOT(NUL(ERRCODE$)) THEN ERRCODE$=FN%GET_BASENAME$(PGN)+"-"+ERRCODE$ ELSE ERRCODE$=FN%GET_BASENAME$(PGN)+"-"+WARNCODE$
8765 IF NUL(ERRMSG$) THEN ERRMSG$=MSG(ERRCODE$)
8770 IF NUL(WARNCODE$) THEN IF NOT(NUL(ERROR_TEMPLATE$)) THEN TEMPLATE$=ERROR_TEMPLATE$; BYBINFO$[3]=ERROR_TEMPLATE$ ! Switch to error template, but only if it is not warning, and if an error template was specified
8795 RETURN 
8799 ! 
8800 DEF FNBYB$(LOCAL DATA$)
8801 ! Send DATA$ through EC3BYB
8820 CALL "EC3BYB",ERR=*NEXT,X3$,X4$,EC_PARM$,EC${ALL},DATA${ALL},NUM_ENTRIES,OUTPUT,DATA$,BYBINFO${ALL},BYBOPTIONS$,100
8840 RETURN DATA$
8845 END DEF
8849 ! 
8920 DEF FNN(LOCAL DATA$)
8925 LINE$=LINE1$+DATA$+LINE2$
8930 RETURN 0
8940 END DEF
8949 ! 
8950 SET_XI:
8955 SET_PARAM 'XI'
8960 RETURN 
8970 CLEAR_XI:
8980 SET_PARAM -'XI'
8990 RETURN 
8999 ! 
9000 REM "ERROR PROCESSING
9002 J=ERR,K=TCB(5); SETERR 0000; ENDTRACE 
9010 LAST_WEBEC_ERR$="ERR: "+STR(J)+" AT: "+STR(K); LAST_WEBEC_ERR$=GBL("LAST_WEBEC_ERR",LAST_WEBEC_ERR$); REM "131928
9090 GOTO 9900
9900 REM "End
9905 IF NOT(NUL(ERRCODE$)) THEN LOG_MESG$="ERRCODE|"+ERRCODE$+"|"+ERRMSG$+"|"; GOSUB LOG_MSG
9910 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9950 EXIT 
9999 END 
56002 REM "251581-WMS:  Issue with ending item number in po receiving         
56004 REM "259676-WMS: Ablity to default Revision date during receiving               
56006 REM "260683-WMS; Add tag for item master 2nd desc line in receiving page
56007 REM "268565-WMS spreadsheet of RFA file - UNITS_PER_UM is all zeros     
56008 REM "270870-WMS:  If you don't put a qty in for the PO receiving the    
56009 REM "273215-Ability to use the Order Notepad instead of Job Notes for   
56010 REM "273402-WMS: Alternate sort order for Recv and Put Away cart display
56012 REM "274048-WMS - Po receiving/put away set carton weight to 0.00       
56013 REM "307411-DBD-276: WMS Receiving - View Cart function locks up cart   
