0010 ! RFGMAK - File Maintenance Program for RFK_User (="RFK"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Jul. 30, 2006 15:56
0030 ! ************************************************************************
0035 REM "5.7 - 11/17/14 - 21.651666 - crg - SSP# 273714
0037 REM "273714-272512 closed; WMS bin transfer of committed lot, parameter 
0040 REM "Copyright 2014 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0045 IF TCB(88)=0 THEN MSGBOX "You must be using Windx to Access this program"; IF TCB(13)=1 THEN BEGIN ; RUN "ZMENU" ELSE EXIT ! SSP#232409
0050 PROCESS "RFGMAK","../RFG/RF.EN"
0060 IF TCB(13)=1 THEN BEGIN ; RUN "ZMENU" ELSE EXIT 
0070 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="RFK"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="WMS_USER$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; GOSUB CLEAR_REC; EXIT ! SSP218152 jdf
1250 PO_RCV_DROP$="Y",REFRESH_FLG=1 ! SSP227669 jdf
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1435 GOSUB REVIEW_ROLES ! SSP 227714
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1475 GOSUB CLEAR_FIELDS ! SSP218152 jdf
1480 NEXT_ID=WMS_USER.CTL ! SSP218152 jdf
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=WMS_USER.CTL ! SSP218152 jdf
1705 GOSUB CLEAR_FIELDS ! SSP218152 jdf
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3055 GOSUB ROLE_SETUP ! SSP 227714
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=WMS_USER.CTL,_FIRST_FIELD=ROLE_P.CTL ! SSP227714
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12012 W_ROLES$="" ! ssp 227714
12020 W_ROLES$=ROLE_R$+ROLE_B$+ROLE_A$+ROLE_P$+ROLE_I$ ! ssp 227714
12030 IF POS("Y"=W_ROLES$)=0 THEN MSGBOX MSG("NO_ROLES"); RETURN ! SSP 227714
12050 _W_FLG=1 ! ssp 227714
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN WMS_USER$=""
13030 ORDS_TO_PCK$=""
13040 PICK_TYPE$=""
13050 TF_ZONE$=""
13060 WHSE1$=""
13070 WHSE2$=""
13080 WHSE3$=""
13090 WHSE4$=""
13100 WHSE5$=""
13110 WHSE6$=""
13120 WHSE7$=""
13130 WHSE8$=""
13140 WHSE9$=""
13150 WHSE10$=""
13160 WHSE11$=""
13170 WHSE12$=""
13180 WHSE13$=""
13190 WHSE14$=""
13200 WHSE15$=""
13210 PO_RCV_DROP$=""
13220 LABEL_PTR$=""
13230 BATCH_NUM$=""
13240 BATCH_DT$=""
13250 NON_LOT_PICK$=""
13260 PICK_VAR_TYPE$=""
13270 ZERO_PICK_TYPE$=""
13280 NOT_USED$=""
13282 PICK_HOLD$=""
13284 REPRINT_PICK_PRIO$=""
13285 AUTO_SEL_ORD$=""
13286 WMS_ROLES$="" ! SSP 227714
13287 DISP_COMP_COUNT$="" ! 240206
13288 BCKORD_SHOW_ALL$="" ! 229149
13289 BIN_COMMIT_LOTS$="" ! 273714
13980 GOSUB NUM_TO_STR
13982 ROLE_P$="",ROLE_R$="",ROLE_B$="",ROLE_A$="",ROLE_I$="" ! SSP 227714
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(34,"N") ! SSP 227714
15030 IF _ORIG.WMS_USER$=_CUR.WMS_USER$ OR WMS_USER$=_CUR.WMS_USER$ THEN GOTO *NEXT ELSE IF _ORIG.WMS_USER$=WMS_USER$ THEN _CHG2$=_CHG2$+SEP+MSG("WMS_USER")+" = "+_CUR.WMS_USER$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WMS_USER")+" = "+_CUR.WMS_USER$
15040 IF _ORIG.ORDS_TO_PCK$=_CUR.ORDS_TO_PCK$ OR ORDS_TO_PCK$=_CUR.ORDS_TO_PCK$ THEN GOTO *NEXT ELSE IF _ORIG.ORDS_TO_PCK$=ORDS_TO_PCK$ THEN _CHG2$=_CHG2$+SEP+MSG("ORD_2_PCK")+" = "+_CUR.ORDS_TO_PCK$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORD_2_PCK")+" = "+_CUR.ORDS_TO_PCK$
15050 IF _ORIG.PICK_TYPE$=_CUR.PICK_TYPE$ OR PICK_TYPE$=_CUR.PICK_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.PICK_TYPE$=PICK_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("PICK_TYPE")+" = "+_CUR.PICK_TYPE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PICK_TYPE")+" = "+_CUR.PICK_TYPE$
15060 IF _ORIG.TF_ZONE$=_CUR.TF_ZONE$ OR TF_ZONE$=_CUR.TF_ZONE$ THEN GOTO *NEXT ELSE IF _ORIG.TF_ZONE$=TF_ZONE$ THEN _CHG2$=_CHG2$+SEP+MSG("ZONE")+" = "+_CUR.TF_ZONE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ZONE")+" = "+_CUR.TF_ZONE$
15070 IF _ORIG.WHSE1$=_CUR.WHSE1$ OR WHSE1$=_CUR.WHSE1$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE1$=WHSE1$ THEN _CHG2$=_CHG2$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE1$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE1$
15080 IF _ORIG.WHSE2$=_CUR.WHSE2$ OR WHSE2$=_CUR.WHSE2$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE2$=WHSE2$ THEN _CHG2$=_CHG2$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE2$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE2$
15090 IF _ORIG.WHSE3$=_CUR.WHSE3$ OR WHSE3$=_CUR.WHSE3$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE3$=WHSE3$ THEN _CHG2$=_CHG2$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE3$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE3$
15100 IF _ORIG.WHSE4$=_CUR.WHSE4$ OR WHSE4$=_CUR.WHSE4$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE4$=WHSE4$ THEN _CHG2$=_CHG2$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE4$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE4$
15110 IF _ORIG.WHSE5$=_CUR.WHSE5$ OR WHSE5$=_CUR.WHSE5$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE5$=WHSE5$ THEN _CHG2$=_CHG2$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE5$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE5$
15120 IF _ORIG.WHSE6$=_CUR.WHSE6$ OR WHSE6$=_CUR.WHSE6$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE6$=WHSE6$ THEN _CHG2$=_CHG2$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE6$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE6$
15130 IF _ORIG.WHSE7$=_CUR.WHSE7$ OR WHSE7$=_CUR.WHSE7$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE7$=WHSE7$ THEN _CHG2$=_CHG2$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE7$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE7$
15140 IF _ORIG.WHSE8$=_CUR.WHSE8$ OR WHSE8$=_CUR.WHSE8$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE8$=WHSE8$ THEN _CHG2$=_CHG2$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE8$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE8$
15150 IF _ORIG.WHSE9$=_CUR.WHSE9$ OR WHSE9$=_CUR.WHSE9$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE9$=WHSE9$ THEN _CHG2$=_CHG2$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE9$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE9$
15160 IF _ORIG.WHSE10$=_CUR.WHSE10$ OR WHSE10$=_CUR.WHSE10$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE10$=WHSE10$ THEN _CHG2$=_CHG2$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE10$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE10$
15170 IF _ORIG.WHSE11$=_CUR.WHSE11$ OR WHSE11$=_CUR.WHSE11$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE11$=WHSE11$ THEN _CHG2$=_CHG2$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE11$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE11$
15180 IF _ORIG.WHSE12$=_CUR.WHSE12$ OR WHSE12$=_CUR.WHSE12$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE12$=WHSE12$ THEN _CHG2$=_CHG2$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE12$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE12$
15190 IF _ORIG.WHSE13$=_CUR.WHSE13$ OR WHSE13$=_CUR.WHSE13$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE13$=WHSE13$ THEN _CHG2$=_CHG2$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE13$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE13$
15200 IF _ORIG.WHSE14$=_CUR.WHSE14$ OR WHSE14$=_CUR.WHSE14$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE14$=WHSE14$ THEN _CHG2$=_CHG2$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE14$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE14$
15210 IF _ORIG.WHSE15$=_CUR.WHSE15$ OR WHSE15$=_CUR.WHSE15$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE15$=WHSE15$ THEN _CHG2$=_CHG2$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE15$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("V_WHS")+" = "+_CUR.WHSE15$
15220 IF _ORIG.PO_RCV_DROP$=_CUR.PO_RCV_DROP$ OR PO_RCV_DROP$=_CUR.PO_RCV_DROP$ THEN GOTO *NEXT ELSE IF _ORIG.PO_RCV_DROP$=PO_RCV_DROP$ THEN _CHG2$=_CHG2$+SEP+MSG("WMS_PO_DRP")+" = "+_CUR.PO_RCV_DROP$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WMS_PO_DRP")+" = "+_CUR.PO_RCV_DROP$
15230 IF _ORIG.LABEL_PTR$=_CUR.LABEL_PTR$ OR LABEL_PTR$=_CUR.LABEL_PTR$ THEN GOTO *NEXT ELSE IF _ORIG.LABEL_PTR$=LABEL_PTR$ THEN _CHG2$=_CHG2$+SEP+MSG("LBL_PTR")+" = "+_CUR.LABEL_PTR$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LBL_PTR")+" = "+_CUR.LABEL_PTR$
15240 IF _ORIG.BATCH_NUM$=_CUR.BATCH_NUM$ OR BATCH_NUM$=_CUR.BATCH_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.BATCH_NUM$=BATCH_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("BATCH")+" = "+_CUR.BATCH_NUM$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BATCH")+" = "+_CUR.BATCH_NUM$
15250 IF _ORIG.BATCH_DT$=_CUR.BATCH_DT$ OR BATCH_DT$=_CUR.BATCH_DT$ THEN GOTO *NEXT ELSE IF _ORIG.BATCH_DT$=BATCH_DT$ THEN _CHG2$=_CHG2$+SEP+MSG("BATCH_DT")+" = "+_CUR.BATCH_DT$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BATCH_DT")+" = "+_CUR.BATCH_DT$
15260 IF _ORIG.NON_LOT_PICK$=_CUR.NON_LOT_PICK$ OR NON_LOT_PICK$=_CUR.NON_LOT_PICK$ THEN GOTO *NEXT ELSE IF _ORIG.NON_LOT_PICK$=NON_LOT_PICK$ THEN _CHG2$=_CHG2$+SEP+MSG("NON_LOT_PK")+" = "+_CUR.NON_LOT_PICK$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NON_LOT_PK")+" = "+_CUR.NON_LOT_PICK$
15270 IF _ORIG.PICK_VAR_TYPE$=_CUR.PICK_VAR_TYPE$ OR PICK_VAR_TYPE$=_CUR.PICK_VAR_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.PICK_VAR_TYPE$=PICK_VAR_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("PICK_VAR_T")+" = "+_CUR.PICK_VAR_TYPE$,_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PICK_VAR_T")+" = "+_CUR.PICK_VAR_TYPE$
15280 IF _ORIG.ZERO_PICK_TYPE$=_CUR.ZERO_PICK_TYPE$ OR ZERO_PICK_TYPE$=_CUR.ZERO_PICK_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.ZERO_PICK_TYPE$=ZERO_PICK_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("ZERO_PK_T")+" = "+_CUR.ZERO_PICK_TYPE$,_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ZERO_PK_T")+" = "+_CUR.ZERO_PICK_TYPE$
15290 IF _ORIG.NOT_USED$=_CUR.NOT_USED$ OR NOT_USED$=_CUR.NOT_USED$ THEN GOTO *NEXT ELSE IF _ORIG.NOT_USED$=NOT_USED$ THEN _CHG2$=_CHG2$+SEP+MSG("NOT_USED")+" = "+_CUR.NOT_USED$,_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NOT_USED")+" = "+_CUR.NOT_USED$
15292 IF _ORIG.PICK_HOLD$=_CUR.PICK_HOLD$ OR PICK_HOLD$=_CUR.PICK_HOLD$ THEN GOTO *NEXT ELSE IF _ORIG.PICK_HOLD$=PICK_HOLD$ THEN _CHG2$=_CHG2$+SEP+MSG("PICK_HOLD")+" = "+_CUR.PICK_HOLD$,_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PICK_HOLD")+" = "+_CUR.PICK_HOLD$
15294 IF _ORIG.REPRINT_PICK_PRIO$=_CUR.REPRINT_PICK_PRIO$ OR REPRINT_PICK+PRIO$=_CUR.REPRINT_PICK_PRIO$ THEN GOTO *NEXT ELSE IF _ORIG.REPRINT_PICK_PRIO$=REPRINT_PICK_PRIO$ THEN _CHG2$=_CHG2$+SEP+MSG("PICK_PRIO")+" = "+_CUR.REPRINT_PICK_PRIO$,_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PICK_PRIO")+" = "+_CUR.REPRINT_PICK_PRIO$
15296 IF _ORIG.AUTO_SEL_ORD$=_CUR.AUTO_SEL_ORD$ OR AUTO_SEL_ORD$=_CUR.AUTO_SEL_ORD$ THEN GOTO *NEXT ELSE IF _ORIG.AUTO_SEL_ORD$=AUTO_SEL_ORD$ THEN _CHG2$=_CHG2$+SEP+MSG("AUT_ORD")+" = "+_CUR.AUTO_SEL_ORD$,_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("AUT_ORD")+" = "+_CUR.AUTO_SEL_ORD$
15298 IF _ORIG.WMS_ROLES$=_CUR.WMS_ROLES$ OR WMS_ROLES$=_CUR.WMS_ROLES$ THEN GOTO *NEXT ELSE IF _ORIG.WMS_ROLES$=WMS_ROLES$ THEN _CHG2$=_CHG2$+SEP+MSG("WMS_ROLES")+" = "+_CUR.WMS_ROLES$,_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WMS_ROLES")+" = "+_CUR.WMS_ROLES$ ! SSP 227714
15299 IF _ORIG.DISP_COMP_COUNT$=_CUR.DISP_COMP_COUNT$ OR DISP_COMP_COUNT$=_CUR.DISP_COMP_COUNT$ THEN GOTO *NEXT ELSE IF _ORIG.DISP_COMP_COUNT$=DISP_COMP_COUNT$ THEN _CHG2$=_CHG2$+SEP+MSG("DSP_CMPCNT")+" = "+_CUR.DISP_COMP_COUNT$,_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DSP_CMPCNT")+" = "+_CUR.DISP_COMP_COUNT$ ! 240206
15300 IF _ORIG.BCKORD_SHOW_ALL$=_CUR.BCKORD_SHOW_ALL$ OR BCKORD_SHOW_ALL$=_CUR.BCKORD_SHOW_ALL$ THEN GOTO *NEXT ELSE IF _ORIG.BCKORD_SHOW_ALL$=BCKORD_SHOW_ALL$ THEN _CHG2$=_CHG2$+SEP+MSG("WMS_BCKORD")+" = "+_CUR.BCKORD_SHOW_ALL$,_CHG_VAR$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WMS_BCKORD")+" = "+_CUR.BCKORD_SHOW_ALL$ ! 229149
15301 IF _ORIG.BIN_COMMIT_LOTS$=_CUR.BIN_COMMIT_LOTS$ OR BIN_COMMIT_LOTS$=_CUR.BIN_COMMIT_LOTS$ THEN GOTO *NEXT ELSE IF _ORIG.BIN_COMMIT_LOTS$=BIN_COMMIT_LOTS$ THEN _CHG2$=_CHG2$+SEP+MSG("BIN_CMT_LT")+" = "+_CUR.BIN_COMMIT_LOTS$,_CHG_VAR$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BIN_CMT_LT")+" = "+_CUR.BIN_COMMIT_LOTS$ ! 273714
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN WMS_USER$=_CUR.WMS_USER$
16030 IF _CHG_VAR$(2,1)="Y" THEN ORDS_TO_PCK$=_CUR.ORDS_TO_PCK$
16040 IF _CHG_VAR$(3,1)="Y" THEN PICK_TYPE$=_CUR.PICK_TYPE$
16050 IF _CHG_VAR$(4,1)="Y" THEN TF_ZONE$=_CUR.TF_ZONE$
16060 IF _CHG_VAR$(5,1)="Y" THEN WHSE1$=_CUR.WHSE1$
16070 IF _CHG_VAR$(6,1)="Y" THEN WHSE2$=_CUR.WHSE2$
16080 IF _CHG_VAR$(7,1)="Y" THEN WHSE3$=_CUR.WHSE3$
16090 IF _CHG_VAR$(8,1)="Y" THEN WHSE4$=_CUR.WHSE4$
16100 IF _CHG_VAR$(9,1)="Y" THEN WHSE5$=_CUR.WHSE5$
16110 IF _CHG_VAR$(10,1)="Y" THEN WHSE6$=_CUR.WHSE6$
16120 IF _CHG_VAR$(11,1)="Y" THEN WHSE7$=_CUR.WHSE7$
16130 IF _CHG_VAR$(12,1)="Y" THEN WHSE8$=_CUR.WHSE8$
16140 IF _CHG_VAR$(13,1)="Y" THEN WHSE9$=_CUR.WHSE9$
16150 IF _CHG_VAR$(14,1)="Y" THEN WHSE10$=_CUR.WHSE10$
16160 IF _CHG_VAR$(15,1)="Y" THEN WHSE11$=_CUR.WHSE11$
16170 IF _CHG_VAR$(16,1)="Y" THEN WHSE12$=_CUR.WHSE12$
16180 IF _CHG_VAR$(17,1)="Y" THEN WHSE13$=_CUR.WHSE13$
16190 IF _CHG_VAR$(18,1)="Y" THEN WHSE14$=_CUR.WHSE14$
16200 IF _CHG_VAR$(19,1)="Y" THEN WHSE15$=_CUR.WHSE15$
16210 IF _CHG_VAR$(20,1)="Y" THEN PO_RCV_DROP$=_CUR.PO_RCV_DROP$
16220 IF _CHG_VAR$(21,1)="Y" THEN LABEL_PTR$=_CUR.LABEL_PTR$
16230 IF _CHG_VAR$(22,1)="Y" THEN BATCH_NUM$=_CUR.BATCH_NUM$
16240 IF _CHG_VAR$(23,1)="Y" THEN BATCH_DT$=_CUR.BATCH_DT$
16250 IF _CHG_VAR$(24,1)="Y" THEN NON_LOT_PICK$=_CUR.NON_LOT_PICK$
16260 IF _CHG_VAR$(25,1)="Y" THEN PICK_VAR_TYPE$=_CUR.PICK_VAR_TYPE$
16270 IF _CHG_VAR$(26,1)="Y" THEN ZERO_PICK_TYPE$=_CUR.ZERO_PICK_TYPE$
16280 IF _CHG_VAR$(27,1)="Y" THEN ON_HOLD$=_CUR.ON_HOLD$
16282 IF _CHG_VAR$(28,1)="Y" THEN NOT_USED$=_CUR.NOT_USED$
16284 IF _CHG_VAR$(29,1)="Y" THEN REPRINT_PICK_PRIO$=_CUR.REPRINT_PICK_PRIO$
16286 IF _CHG_VAR$(30,1)="Y" THEN AUTO_SEL_ORD$=_CUR.AUTO_SEL_ORD$
16288 IF _CHG_VAR$(31,1)="Y" THEN WMS_ROLES$=_CUR.WMS_ROLES$ ! SSP 227714
16289 IF _CHG_VAR$(32,1)="Y" THEN DISP_COMP_COUNT$=_CUR.DISP_COMP_COUNT$ ! SSP 240206
16290 IF _CHG_VAR$(33,1)="Y" THEN BCKORD_SHOW_ALL$=_CUR.BCKORD_SHOW_ALL$ ! SSP 229149
16291 IF _CHG_VAR$(34,1)="Y" THEN BIN_COMMIT_LOTS$=_CUR.BIN_COMMIT_LOTS$ ! SSP 273714
16990 RETURN 
20000 SELECT_REPRINT_PICK_PRIO:
20010 REPRINT_PICK_PRIO$=PAD(REPRINT_PICK_PRIO$,2)
20020 IF REPRINT_PICK_PRIO$<>DIM(2) THEN {
20030 CALL "UPDOR1;READBYKEY",0,0,REPRINT_PICK_PRIO$,SEG2$,SEG3$,SEG4$,SEG5$,OR1$,OR1{ALL},FOUNDOR1
20040 IF NOT(FOUNDOR1) THEN MSGBOX MSG("INVPP"); NEXT_ID=REPRINT_PICK_PRIO.CTL
20080  }
20090 RETURN 
20100 REVIEW_ROLES:! ssp 227714 (20100-22190)
20150 WMS_ROLES$=""
20160 IF ROLE_R$="Y" THEN WMS_ROLES$+="R"
20170 IF ROLE_B$="Y" THEN WMS_ROLES$+="B"
20180 IF ROLE_A$="Y" THEN WMS_ROLES$+="A"
20190 IF ROLE_P$="Y" THEN WMS_ROLES$+="P"
20200 IF ROLE_I$="Y" THEN WMS_ROLES$+="I"
20210 WMS_ROLES$=PAD(WMS_ROLES$,20,1)
22190 RETURN 
22200 ROLE_SETUP:! SSP 227714
22210 IF POS("R"=WMS_ROLES$)<>0 THEN ROLE_R$="Y" ELSE ROLE_R$="N"
22220 IF POS("B"=WMS_ROLES$)<>0 THEN ROLE_B$="Y" ELSE ROLE_B$="N"
22230 IF POS("A"=WMS_ROLES$)<>0 THEN ROLE_A$="Y" ELSE ROLE_A$="N"
22240 IF POS("P"=WMS_ROLES$)<>0 THEN ROLE_P$="Y" ELSE ROLE_P$="N"
22250 IF POS("I"=WMS_ROLES$)<>0 THEN ROLE_I$="Y" ELSE ROLE_I$="N"
22280 RETURN 
22299 ! 
46004 REM "204749-Add option by wms picker: Allow auto order selection        
56002 REM "197945-WMS picking.  if zero pick or qty<ord                       
56003 REM "200523-Create a second print for packing list from WMS             
56005 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56007 REM "218152-RFGMAK - WMS user Setup - Cleanup Panel                     
56008 REM "227714-WMS: Change the WMS user setup, allow multiple WMS roles to 
56009 REM "227669-Problem with Dev WMS receiving. User friendly change suggest
56010 REM "232409-All WMS menu options.  Need to take out TopForm from msg    
56011 REM "240206-WMS: WMS Inventory Count process reworked.                  
56012 REM "273714-272512 closed; WMS bin transfer of committed lot, parameter 
