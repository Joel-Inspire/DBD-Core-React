0010 ! RFGMAB - File Maintenance Program for RFB_Bin_Ctl (="RFB"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on May. 26, 2006 13:19
0030 ! ************************************************************************
0035 REM "5.7 - 03/17/15 - 16.836666 - dmm - SSP# 274240
0037 REM "274240-268441; WMS Zone is 4 char field, RFZ file, needs to be zero
0040 REM "Copyright 2015 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0045 IF TCB(88)=0 THEN MSGBOX "You must be using Windx to Access this program"; IF TCB(13)=1 THEN BEGIN ; RUN "ZMENU" ELSE EXIT ! SSP#232409
0050 PROCESS "RFGMAB","../RFG/RF.EN"
0060 IF TCB(13)=1 THEN BEGIN ; RUN "ZMENU" ELSE EXIT 
0070 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0155 %CUSTOMER$="" ! SSP 274117
0160 _FILE_NAME$="RFB"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0185 _RFZ=HFN; OPEN (_RFZ,IOL=*,REC=_RFZ$,ERR=OPEN_ERR)"RFZ"+%C$ ! SSP274240
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=2
0430 DIM _KEYS$[1:2]; _KEYS$[1]="LOC_ID$",_KEYS$[2]="WHSE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 IF _RFZ<>0 THEN CLOSE (_RFZ); _RFZ=0 ! SSP274240
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; REM IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN  ! SSP218229 jdf
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; GOSUB CLEAR_REC; EXIT ! SSP218229 jdf 
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1475 GOSUB CLEAR_FIELDS ! SSP218229 jdf
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=LOC_ID.CTL ! SSP218229  jdf
1705 GOSUB CLEAR_FIELDS ! SSP218229 jdf
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3055 %CUSTOMER$=RESV_CUST$ ! SSP 274117
3060 CHANGE_FLG=0
3062 IF BIN_TYPE$=DIM(2) THEN BIN_TYPE$="BK" ! default bulk
3065 BIN_TYPE_DROP$="B"; IF BIN_TYPE$="PK" THEN BIN_TYPE_DROP$="P" ELSE IF BIN_TYPE$="XX" THEN BIN_TYPE_DROP$="X"
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3540 GOSUB PAD_TMP_BIN
3550 GOSUB DISPLAY_BIN_EX
3590 REFRESH_FLG=1
3595 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=LOC_ID.CTL,_FIRST_FIELD=STORAGE_TYPE.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
5000 ! Validate Mask
5010 VALIDATE_BIN_MASK:
5015 IF BIN_MASK.CTL'FOCUS=1 THEN BIN_MASK.CTL'AUTO=1 ELSE BIN_MASK.CTL'AUTO=0; GOTO 5195
5025 MSG_TITLE$="Invalid Mask Format"
5030 MSG_TEXT$="The mask format can only contain an X or -."
5040 GOSUB PAD_TMP_BIN
5050 FOR AB=1 TO LEN(STP(TMP_BIN_MASK$))
5055 IF TMP_BIN_MASK$(AB,1)<>"X" AND TMP_BIN_MASK$(AB,1)<>"-" THEN {
5060 MSGBOX MSG_TEXT$,MSG_TITLE$,"!,OK",MSG_RESP$
5065 EXITTO 5195
5070  }
5075 NEXT AB
5150 GOSUB DISPLAY_BIN_EX
5195 EXIT 
5200 ! Pad Temp Bin Mask
5210 PAD_TMP_BIN:
5250 TMP_BIN_MASK$=PAD(STP(BIN_MASK$),15,1,"X")
5295 RETURN 
5400 ! Display Bin Mask Example
5410 DISPLAY_BIN_EX:
5450 BIN_MASK_EX$=STR(LOC_ID$:TMP_BIN_MASK$)
5460 REFRESH_FLG=1
5495 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 MIN_QTY$=STR(MIN_QTY)
10030 MAX_QTY$=STR(MAX_QTY)
10040 NOT_USED3$=STR(NOT_USED3)
10050 NOT_USED4$=STR(NOT_USED4)
10060 NOT_USED5$=STR(NOT_USED5)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="MIN_QTY",_X=MIN_QTY.CTL,MIN_QTY=NUM(MIN_QTY$,ERR=NON_NUMERIC)
11030 _X$="MAX_QTY",_X=MAX_QTY.CTL,MAX_QTY=NUM(MAX_QTY$,ERR=NON_NUMERIC)
11040 _X$="NOT_USED3",_X=NOT_USED3.CTL,NOT_USED3=NUM(NOT_USED3$,ERR=NON_NUMERIC)
11050 _X$="NOT_USED4",_X=NOT_USED4.CTL,NOT_USED4=NUM(NOT_USED4$,ERR=NON_NUMERIC)
11060 _X$="NOT_USED5",_X=NOT_USED5.CTL,NOT_USED5=NUM(NOT_USED5$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN LOC_ID$=""
13030 IF _CLR_FLG$="R" THEN WHSE$=""
13040 BIN_TYPE$="BK",STORAGE_TYPE$="",BIN_TYPE_DROP$="B"
13050 TF_ZONE$=""
13060 PICK_SEQ$=""
13070 PUT_SEQ$=""
13080 RESV_CUST$=""
13085 %RESV_CUST$="",%CUSTOMER$="" ! SSP 274117
13090 RESV_ITEM$=""
13100 BIN_MASK$=""
13110 NOT_USED$=""
13120 MIN_QTY=0
13130 MAX_QTY=0
13140 NOT_USED3=0
13150 NOT_USED4=0
13160 NOT_USED5=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=WHSE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(16,"N")
15030 IF _ORIG.LOC_ID$=_CUR.LOC_ID$ OR LOC_ID$=_CUR.LOC_ID$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_ID$=LOC_ID$ THEN _CHG2$=_CHG2$+SEP+MSG("RF_LOC_ID")+" = "+_CUR.LOC_ID$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RF_LOC_ID")+" = "+_CUR.LOC_ID$
15040 IF _ORIG.WHSE$=_CUR.WHSE$ OR WHSE$=_CUR.WHSE$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE$=WHSE$ THEN _CHG2$=_CHG2$+SEP+MSG("WHSE")+" = "+_CUR.WHSE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WHSE")+" = "+_CUR.WHSE$
15050 IF _ORIG.STORAGE_TYPE$=_CUR.STORAGE_TYPE$ OR STORAGE_TYPE$=_CUR.STORAGE_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.STORAGE_TYPE$=STORAGE_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("STYPE")+" = "+_CUR.STORAGE_TYPE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STYPE")+" = "+_CUR.STORAGE_TYPE$
15052 IF _ORIG.BIN_TYPE$=_CUR.BIN_TYPE$ OR BIN_TYPE$=_CUR.BIN_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.BIN_TYPE$=BIN_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("TYPE")+" = "+_CUR.BIN_TYPE$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TYPE")+" = "+_CUR.BIN_TYPE$
15060 IF _ORIG.TF_ZONE$=_CUR.TF_ZONE$ OR TF_ZONE$=_CUR.TF_ZONE$ THEN GOTO *NEXT ELSE IF _ORIG.TF_ZONE$=TF_ZONE$ THEN _CHG2$=_CHG2$+SEP+MSG("ZONE")+" = "+_CUR.TF_ZONE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ZONE")+" = "+_CUR.TF_ZONE$
15070 IF _ORIG.PICK_SEQ$=_CUR.PICK_SEQ$ OR PICK_SEQ$=_CUR.PICK_SEQ$ THEN GOTO *NEXT ELSE IF _ORIG.PICK_SEQ$=PICK_SEQ$ THEN _CHG2$=_CHG2$+SEP+MSG("PICK_SEQ")+" = "+_CUR.PICK_SEQ$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PICK_SEQ")+" = "+_CUR.PICK_SEQ$
15080 IF _ORIG.PUT_SEQ$=_CUR.PUT_SEQ$ OR PUT_SEQ$=_CUR.PUT_SEQ$ THEN GOTO *NEXT ELSE IF _ORIG.PUT_SEQ$=PUT_SEQ$ THEN _CHG2$=_CHG2$+SEP+MSG("PUT_SEQ")+" = "+_CUR.PUT_SEQ$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PUT_SEQ")+" = "+_CUR.PUT_SEQ$
15090 IF _ORIG.RESV_CUST$=_CUR.RESV_CUST$ OR RESV_CUST$=_CUR.RESV_CUST$ THEN GOTO *NEXT ELSE IF _ORIG.RESV_CUST$=RESV_CUST$ THEN _CHG2$=_CHG2$+SEP+MSG("RESV_CUST")+" = "+_CUR.RESV_CUST$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RESV_CUST")+" = "+_CUR.RESV_CUST$
15100 IF _ORIG.RESV_ITEM$=_CUR.RESV_ITEM$ OR RESV_ITEM$=_CUR.RESV_ITEM$ THEN GOTO *NEXT ELSE IF _ORIG.RESV_ITEM$=RESV_ITEM$ THEN _CHG2$=_CHG2$+SEP+MSG("RESV_ITEM")+" = "+_CUR.RESV_ITEM$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RESV_ITEM")+" = "+_CUR.RESV_ITEM$
15110 IF _ORIG.BIN_MASK$=_CUR.BIN_MASK$ OR BIN_MASK$=_CUR.BIN_MASK$ THEN GOTO *NEXT ELSE IF _ORIG.BIN_MASK$=BIN_MASK$ THEN _CHG2$=_CHG2$+SEP+MSG("BIN_MASK")+" = "+_CUR.BIN_MASK$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BIN_MASK")+" = "+_CUR.BIN_MASK$
15120 IF _ORIG.NOT_USED$=_CUR.NOT_USED$ OR NOT_USED$=_CUR.NOT_USED$ THEN GOTO *NEXT ELSE IF _ORIG.NOT_USED$=NOT_USED$ THEN _CHG2$=_CHG2$+SEP+MSG("NOT_USED")+" = "+_CUR.NOT_USED$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NOT_USED")+" = "+_CUR.NOT_USED$
15130 IF _ORIG.MIN_QTY=_CUR.MIN_QTY OR MIN_QTY=_CUR.MIN_QTY THEN GOTO *NEXT ELSE IF _ORIG.MIN_QTY=MIN_QTY THEN _CHG2$=_CHG2$+SEP+MSG("MIN_QTY")+" = "+STR(_CUR.MIN_QTY),_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MIN_QTY")+" = "+STR(_CUR.MIN_QTY)
15140 IF _ORIG.MAX_QTY=_CUR.MAX_QTY OR MAX_QTY=_CUR.MAX_QTY THEN GOTO *NEXT ELSE IF _ORIG.MAX_QTY=MAX_QTY THEN _CHG2$=_CHG2$+SEP+MSG("MAX_QTY")+" = "+STR(_CUR.MAX_QTY),_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MAX_QTY")+" = "+STR(_CUR.MAX_QTY)
15150 IF _ORIG.NOT_USED3=_CUR.NOT_USED3 OR NOT_USED3=_CUR.NOT_USED3 THEN GOTO *NEXT ELSE IF _ORIG.NOT_USED3=NOT_USED3 THEN _CHG2$=_CHG2$+SEP+MSG("NOT_USED")+" = "+STR(_CUR.NOT_USED3),_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NOT_USED")+" = "+STR(_CUR.NOT_USED3)
15160 IF _ORIG.NOT_USED4=_CUR.NOT_USED4 OR NOT_USED4=_CUR.NOT_USED4 THEN GOTO *NEXT ELSE IF _ORIG.NOT_USED4=NOT_USED4 THEN _CHG2$=_CHG2$+SEP+MSG("NOT_USED")+" = "+STR(_CUR.NOT_USED4),_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NOT_USED")+" = "+STR(_CUR.NOT_USED4)
15170 IF _ORIG.NOT_USED5=_CUR.NOT_USED5 OR NOT_USED5=_CUR.NOT_USED5 THEN GOTO *NEXT ELSE IF _ORIG.NOT_USED5=NOT_USED5 THEN _CHG2$=_CHG2$+SEP+MSG("NOT_USED")+" = "+STR(_CUR.NOT_USED5),_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NOT_USED")+" = "+STR(_CUR.NOT_USED5)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN LOC_ID$=_CUR.LOC_ID$
16030 IF _CHG_VAR$(2,1)="Y" THEN WHSE$=_CUR.WHSE$
16040 IF _CHG_VAR$(3,1)="Y" THEN STORAGE_TYPE$=_CUR.STORAGE_TYPE$
16042 IF _CHG_VAR$(16,1)="Y" THEN BIN_TYPE$=_CUR.BIN_TYPE$
16050 IF _CHG_VAR$(4,1)="Y" THEN TF_ZONE$=_CUR.TF_ZONE$
16060 IF _CHG_VAR$(5,1)="Y" THEN PICK_SEQ$=_CUR.PICK_SEQ$
16070 IF _CHG_VAR$(6,1)="Y" THEN PUT_SEQ$=_CUR.PUT_SEQ$
16080 IF _CHG_VAR$(7,1)="Y" THEN RESV_CUST$=_CUR.RESV_CUST$
16090 IF _CHG_VAR$(8,1)="Y" THEN RESV_ITEM$=_CUR.RESV_ITEM$
16100 IF _CHG_VAR$(9,1)="Y" THEN BIN_MASK$=_CUR.BIN_MASK$
16110 IF _CHG_VAR$(10,1)="Y" THEN NOT_USED$=_CUR.NOT_USED$
16120 IF _CHG_VAR$(11,1)="Y" THEN MIN_QTY=_CUR.MIN_QTY
16130 IF _CHG_VAR$(12,1)="Y" THEN MAX_QTY=_CUR.MAX_QTY
16140 IF _CHG_VAR$(13,1)="Y" THEN NOT_USED3=_CUR.NOT_USED3
16150 IF _CHG_VAR$(14,1)="Y" THEN NOT_USED4=_CUR.NOT_USED4
16160 IF _CHG_VAR$(15,1)="Y" THEN NOT_USED5=_CUR.NOT_USED5
16990 RETURN 
20000 SELECT_BIN_TYPE_DROP:
20010 BIN_TYPE$="BK" ! bulk - default
20020 IF BIN_TYPE_DROP$="P" THEN BIN_TYPE$="PK" ! pick
20030 IF BIN_TYPE_DROP$="X" THEN BIN_TYPE$="XX" ! No Receiving
20090 RETURN 
20100 DEFAULT_SEQUENCES:! SSP274240, when Zone changes, default picking and put away sequences based on settings in Zone (RFZ) record
20105 REFRESH_FLG=1
20110 IF STP(TF_ZONE$,2)="" OR (STP(_ORIG.TF_ZONE$,2)>"" AND _ORIG.TF_ZONE$=TF_ZONE$) THEN RETURN 
20115 FIND (_RFZ,KEY=TF_ZONE$,DOM=*RETURN)
20120 PICK_SEQ$=_RFZ.PICK_SEQ$
20130 PUT_SEQ$=_RFZ.PUT_SEQ$
20140 RETURN 
20145 ! 
56000 REM "180032-Wireless Warehousing                                        
56002 REM "204432-Provide ability in WMS for items to be picked from picked   
56004 REM "204385-WMS bin mask - how does it work, what is maximum            
56006 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56008 REM "218229-RFGMAB-Bin Location Contol-Cleanup Panel                    
56009 REM "232409-All WMS menu options.  Need to take out TopForm from msg    
56010 REM "229143-WMS - Ability to set a min and max qty for bin
56011 REM "274117-Issue with WMS Bin Maintenance for non-divisional customers 
56012 REM "274240-268441; WMS Zone is 4 char field, RFZ file, needs to be zero
