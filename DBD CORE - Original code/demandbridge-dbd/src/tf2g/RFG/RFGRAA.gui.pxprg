0010 ! RFGRAA - Warehousing Purchase order Receiving
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Feb. 27, 2005 15:59
0030 ! ************************************************************************
0035 REM "5.4 - 01/22/06 - 12.986666 - jme - SSP# 180032
0037 REM "180032-Wireless Warehousing                                        
0040 REM "Copyright 2006 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0060 PROCESS "RFGRAA","../RFG/RF.EN"
0065 END 
0090 RELEASE 
0310 IOLIST RF0$
0390 IOLIST RFB$,RFB[0],RFB[1],RFB[2],RFB[3],RFB[4],RFB[5]
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="REF_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1810 CLEAR_REC:
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 SELECT_PORDER:
2005 SEG2$="",SEG3$="",SEG4$="",SEG5$=""
2010 IF PORDER$<>"" THEN {! 2480 }
2040 CALL "ZZWLKU;PARSE_PORDER",PORDER$,PO_DIV$,PO_NUM$; PORDER$=PO_DIV$+PO_NUM$
2050 CALL "UPDPO1;EXTRACTBYKEY",Z[10],0,PO_DIV$,PO_NUM$,SEG3$,SEG4$,SEG5$,PO1$,PO1{ALL},FOUNDPO1,BUSYPO1
2060 IF BSY THEN MSGBOX MSG("PO_BSY"); NEXT_ID=PORDER.CTL; GOTO *RETURN
2070 IF NOT(FOUNDPO1) THEN {! 2470                                                    
2075 NEXT_ID=PORDER.CTL; MSGBOX MSG("NOT_FOUND")
2077  } ELSE {
2080 IF BUSYPO1 THEN {
2085 NEXT_ID=POORDER.CTL; MSGBOX MSG("PO_BSY")
2090  } ELSE {
2100 CALL "UPDPO1;VALIDATE_PO",Z[11],X3$,PO1$,PO1{ALL},TASK_NUM$,OK,MSG$
2110 IF NOT(OK) THEN {
2120 MSGBOX MSG$; NEXT_ID=PORDER.CTL
2190  } ELSE {
2200 GOSUB DISPLAY_NOTES
2450 EN_BARCODE$="Y",EN_PO$="N"; GOSUB ENABLE_GROUPS
2452 REFRESH_FLG=1
2455 NEXT_ID=BARCODE.CTL
2460  } ! 2190
2465  } ! 2080
2470  } ! 2070
2480  } ! 2010
2490 RETURN 
2498 ! 
2499 ! 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 300 - Set up the message library
10010 SETUP_LIBRARY:
10020 _SV_MSGLIB$=MSG(*)
10030 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
10040 MESSAGE_LIB "*tfmsglib."+_LANG$,ERR=*NEXT; GOTO 10060
10050 MESSAGE_LIB "*tfmsglib.en"
10060 SET_MSG:GOSUB SETUP_MESSAGES
10070 RETURN 
10500 INIT:
10502 X0$="RFGRAA",X1$="Warehousing PO Receiving"
10503 X0=-1,X2=-1
10505 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,X2
10506 %X3$=X3$
10507 DIM Z[NUM(X3$(60,3))]
10510 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
10520 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
10530 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
10540 GOSUB SETUP_KEYS
10560 Z$="01O RF0...  02O RF1...  04O AP4...  05O IC0...  06O FM1...  07O ICF...  09O RFB...  10O PO1...  11O FTO...  12O PO2...  13O ZZPARM  "
10570 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO 10575,OPEN_ERR
10580 RETURN 
10590 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
10600 CMD_STR$="END"
10610 RETURN 
10800 DISPLAY_NOTES:
10810 CALL "UPDAP4;READBYKEY",Z[4],0,PO1$(7,10),SEG2$,SEG3$,SEG4$,SEG5$,AP4$,AP4{ALL},FOUNDAP4; IF FOUNDAP4 THEN VEND_NAME$=AP4$(11,35)
10890 RETURN 
10898 ! 
10899 ! 
11900 SELECT_ADD:
11990 TASK_NUM$="A"
12000 SELECT_TASK_NUM:
12005 SEG2$="",SEG3$="",SEG4$="",SEG5$=""
12020 TASK_NUM$=STP(TASK_NUM$,3," ")
12025 IF TASK_NUM$<>"" THEN {! 12285 }
12030 IF TASK_NUM$="A" THEN {! 12090 }
12040 CALL "UPDRF0;GET_NEXT_SEQ",Z[1],RF0$,RF0{ALL},OK
12045 READ DATA FROM REC(IOL=0310) TO IOL=IOL(Z[1])
12060  } ELSE {
12070 TASK_NUM=NUM(TASK_NUM$,ERR=*NEXT); TASK_NUM$=STR(TASK_NUM:"0000000000")
12080 CALL "UPDRF0;EXTRACTBYKEY",Z[1],0,TASK_NUM$,SEG2$,SEG3$,SEG4$,SEG5$,RF0$,RF0{ALL},FOUNDRF0,BUSYRF0
12085 IF NOT(FOUNDRF0) THEN MSGBOX MSG("NOT_FOUND"); GOTO *RETURN
12087 IF BUSYRF0 THEN MSGBOX TASK_NUM$+MSG("BUSY"); GOTO *RETURN
12088 IF FOUND THEN IF RF0$(11,1)<>"S" THEN MSGBOX MSG("NOT_FOUND"); CALL "UPDRF0;CLEAR_LOCK",Z[1]; GOTO *RETURN
12095  }
12100 TERM_ID$=X3$(1,2),USER_ID$=X3$(40,3),TASK_TYPE$="R"
12110 TASK_DATE$=X3$(21,6)
12150 READ DATA FROM REC(IOL(Z[1])) TO IOL=0310
12160 CALL "UPDRF0;WRITELOCK",Z[1],RF0$,RF0{ALL}
12220 EN_RBIN$="Y",EN_TASK$="N"; GOSUB ENABLE_GROUPS
12280 REFRESH_FLG=1
12285  }
12290 RETURN 
12298 ! 
12299 ! 
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN REC_BIN$=""
13030 PO_NUM$=""
13050 %RFLAST_SCAN$="",%RFLAST_QTY$=""
13990 REFRESH_FLG=1
13999 RETURN 
15000 SELECT_BARCODE:
15010 CALL "RFGBAR;SELECT_BARCODE",ICF,PO1,BARCODE$,PONUM$,POLINE$,FOUNDBAR,RFSEQLIST${ALL},SEQLIST,ITEM_CUST$,ITEM_CODE$
15020 IF NOT(FOUNDBAR) THEN MSGBOX MSG("RFItm_Nof"),"","",X$; NEXT_ID=BARCODE.CTL ELSE {! 15980
15980  } ! 15020
15990 RETURN 
15998 ! 
15999 ! 
16000 SELECT_REC_BIN:
16010 SEG2$="",SEG3$="",SEG4$="",SEG5$=""
16020 REC_BIN$=PAD(REC_BIN$,10)
16030 IF REC_BIN$<>DIM(10) THEN {! 1385
16040 CALL "UPDRFB;READBYKEY",Z[9],0,REC_BIN$,SEG2$,SEG3$,SEG4$,SEG5$,RFB$,RFB{ALL},FOUNDRFB
16050 IF NOT(FOUNDRFB) THEN MSGBOX MSG("NO_REC_BIN"); NEXT_ID=REC_BIN.CTL; EXIT 
16060 READ DATA FROM REC(IOL=0390) TO IOL=IOL(Z[9])
16070 IF BIN_TYPE$<>"R" THEN {
16080 MSGBOX MSG("RFG_N_REC"); NEXT_ID=REC_BIN.CTL
16090  } ELSE {! 1380 }
16100 CALL "UPDRF0;READBYKEY",Z[1],1,REC_BIN$,SEG2$,SEG3$,SEG4$,SEG5$,TMP$,TMP{ALL},FOUNDRF0,BUSYRF0
16105 CALL "UPDRF0;READNEXT",Z[1],TMP$,TMP{ALL},FOUNDRF0; IF FOUNDRF0 THEN IF TMP$(23,10)=REC_BIN$ AND TMP$(1,10)<>TASK_NUM$ THEN MSGBOX MSG("RFB_REC")+" "+TMP$(1,20); NEXT_ID=REC_BIN.CTL,REC_BIN$=""; GOTO *RETURN
16110 IF FOUNDRF0 AND BUSYRF0 THEN {
16120 NEXT_ID=REC_BIN.CTL; MSGBOX MSG("REC_BUS")
16130  } ELSE {
16135 RF0$(23,10)=REC_BIN$
16170 CALL "UPDRF0;WRITELOCK",Z[1],RF0$,RF0{ALL}
16180 EN_PO$="Y",EN_RBIN$="N"; GOSUB ENABLE_GROUPS
16190  }
16200  }
16210  }
16290 RETURN 
16298 ! 
16299 ! 
18000 SELECT_CLEAR:
18010 PO_NUM$="",PORDER$="",PO_DIV$="",VEND_NAME$=""
18020 CALL "uPDPO1;clear_LOCK",Z[10]
18080 EN_PO$="Y",EN_BARCODE$="N"
18085 GOSUB ENABLE_GROUPS
18087 REFRESH_FLG=1; NEXT_ID=PORDER.CTL
18090 RETURN 
19000 SELECT_EXIT:
19010 CALL "UPDRF1;READBYKEY",Z[2],1,TASK_NUM$,SEG2$,SEG3$,SEG4$,SEG5$,RF1$,RF1{ALL},FOUNDRF1
19020 CALL "UPDRF1;READNEXT",Z[2],RF1$,RF1{ALL},FOUND
19030 IF NOT(FOUND) THEN CMD_STR$="END"
19040 IF FOUND THEN {! 14565
19050 IF RF1$(166,10)=TASK_NUM$ THEN {! 14550 }           
19060 MSGBOX MSG("UPDATE_NOW"),MSG("CONFIRM"),"?,YESNO",ANS$
19070 IF ANS$="NO" THEN {! 14500 } 
19080 NEXT_ID=EXIT.CTL
19090  } ELSE {
19100 CALL "UPDRF1;UPDATE_TASK",Z[2],Z[10],Z[12],Z[14],Z[15],Z[16],Z[17],Z[18],X3$,TASK_NUM$,CALL_CIG
19110 IF CALL_CIG THEN {
19120 CALL "RFGRAS",X3$ ! set ZZS parameters, get batch
19130 CALL "SM2RBA",X3$,X4$,"","*",TASK_NUM$
19140  }
19150 CMD_STR$="END"
19160  }
19170  } ELSE {
19180 CMD_STR$="END"
19190  }
19200  } ! 14027
19210 IF RF0$<>"" THEN CALL "UPDRF0;DELETE",Z[1],RF0$,RF0{ALL},FOUNDRF0,BUSYRF0
19220 RETURN 
19230 ! 
19240 ! 
20000 SELECT_NEXT:
20010 ! main processing routine
20020 RFEXIT=0
20030 EN_BARCODE$="N"; GOSUB ENABLE_GROUPS
20100 WHILE NOT(RFEXIT) ! 24000 wend
20200 CALL "RFGBAR",X3$,X4$,Z[7],Z[6],ITEM$,MSG_TAG$,MSG1$,MSG2$,EX,Z[5]
20210 END 
20250 IF EX=1 THEN {! 23900 }
20255 GOSUB SELECT_CLEAR ! goes back to p.o num
20260 RFEXIT=1
20300  } ELSE {! 23900 }
20310 IF ITEM$<>"" THEN {! 23800 }
20320 CALL "UPDPO2;READBYKEY",Z[12],1,ITEM$,PO_DIV$,PO_NUM$,SEG4$,SEG5$,PO2$,PO2{ALL},FOUNDPO2
20330 CALL "UPDPO2;READNEXT",Z[12],PO2$,PO2{ALL},FOUNDPO2
20350 IF NOT(FOUNDPO2) THEN {! 23750
20360 MSGBOX MSG("ITEM_NOPO")+" "+PO_DIV$+PO_NUM$
20370 CALL "UPDRF1;CLEAR_FIELDS",RF1$,RF1{ALL}
20380 RF1$(1,2)=PO_DIV$,RF1$(3,7)=PO_NUM$,RF1$(13,20)=ITEM$,RF1$(166,10)=TASK_NUM$,RF1$(156,10)=REC_BIN$
20390 CALL "UPDRFA;ADD_RC",X3$,RF1$,0
20450  } ELSE {! 23750 }
23750  } ! 20350
23800  } ! 20310 
23900  } ! 20250 
24000 WEND ! 20100 while
24990 RETURN ! 20000-24999 select_next=item processing
55000 ENABLE_GROUPS:
55005 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
55040 IF EN_RBIN$="N" THEN CALL "*wingrp;Disable",RBIN.GRP$; EN_RBIN$=""
55045 IF EN_RBIN$="Y" THEN CALL "*wingrp;Enable",RBIN.GRP$; EN_RBIN$=""
55050 IF EN_PO$="Y" THEN CALL "*wingrp;Enable",PO.GRP$; EN_PO$=""
55055 IF EN_PO$="N" THEN CALL "*wingrp;Disable",PO.GRP$; EN_PO$=""
55060 IF EN_BARCODE$="Y" THEN CALL "*wingrp;enable",BARCODE.GRP$
55062 IF EN_BARCODE$="N" THEN CALL "*wingrp;Disable",BARCODE.GRP$
55065 IF EN_RBIN$="Y" THEN CALL "*wingrp;enable",RBIN.GRP$; EN_RBIN$=""
55070 IF EN_TASK$="N" THEN CALL "*wingrp;disable",TASK.GRP$; EN_TASK$=""
55990 RETURN 
56000 REM "180032-Wireless Warehousing                                        
