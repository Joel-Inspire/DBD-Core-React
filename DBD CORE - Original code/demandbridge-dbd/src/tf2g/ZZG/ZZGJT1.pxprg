0010 ! ZZGJT0 - File Maintenance Program for JT0 Job Tracking Notes  (="JT0"+%C$)
0035 REM "5.7 - 07/27/16 - 9.080555 - dmm - SSP# 285248
0037 REM "285248-Job note entered for order, doesn't display in graphical    
0040 REM "Copyright 2016 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0052 IF TCB(88)=0 THEN {
0055 MSGBOX "You must be using Windx to access this program" } ELSE {
0060 CLEAR 
0090 SETERR 0100; ENTER X3$,X4$,REF_TYPE$,NT_REF$,CREATED_ON$,CREATED_AT$,CREATED_BY$,TF_INDEX$
0092 REFRESH_FLG=1
0180 PROCESS "ZZGJT0","../ZZG/ZZ.EN",REF_TYPE$,NT_REF$,CREATED_ON$,CREATED_AT$,CREATED_BY$,TF_INDEX$ ! SSP285248, replace tf2g with ..
0185  }
0190 IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT 
0310 IOLIST A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12]
4100 MODIFY_REC:
4199 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10899 ! 
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12090 RETURN 
12098 ! 
12099 ! 
13000 SELECT_TYPE:
13005 REFRESH_FLG=1
13390 RETURN 
13398 ! 
13399 ! 
13598 ! 
13599 ! 
13800 FIND_REC:
13805 NEW=0
13810 CALL "UPDJT0;EXTRACTBYKEY",Z[5],1,REF_TYPE$,NOTE_REF$,TF_INDEX$,INDSEQ$,TF_DATE$,TF_TIME$,A$,A{ALL},FOUND,BUSY
13820 IF NOT(FOUND) THEN MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"YesNo",ANS$; IF ANS$="NO" THEN IF PRE_SELECT$<>"" THEN CMD_STR$="END"; GOTO *RETURN ELSE GOSUB RESTART; GOTO *RETURN
13830 IF BUSY THEN MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,""; GOSUB RESTART; GOTO *RETURN
13840 IF NOT(FOUND) THEN {
13842 READ DATA FROM REC(IOL(Z[1])) TO IOL=0310
13845 CALL "UPDJT0;INSERT",Z[1],A$,A{ALL},OK
13850 IF NOT(OK) THEN MSGBOX MSG("CANT_WRITE"),""; IF PRE_SELECT$<>"" THEN CMD_STR$="END"; GOTO *RETURN ELSE GOSUB RESTART; GOTO *RETURN
13855 CALL "UPDJT0;EXTRACTBYKEY",Z[1],0,CUST_DIV$,CUST_CODE$,ITEM_CUST_DIV$,ITEM_CUST_CODE$,ITEM_CODE$,A$,A{ALL},FOUND,BUSY; READ DATA FROM REC(IOL=0310) TO IOL=IOL(Z[1])
13857 NEW=1,OLDREC$=A$; EN_KEYS$="N",EN_BUTTONS$="Y"; GOSUB ENABLE_GROUPS
13860  } ELSE {
13870 READ DATA FROM REC(IOL=0310) TO IOL=IOL(Z[1])
13875 OLDREC$=A$; EN_KEYS$="N",EN_BUTTONS$="Y"; GOSUB ENABLE_GROUPS
13880  }
13890 EN_FIELDS$="Y"; GOSUB ENABLE_GROUPS
13900 SWITCH PRICE_TYPE$
13905 CASE "C"
13907 EN_C$="Y"; GOSUB ENABLE_GROUPS; BREAK
13910 CASE "I"
13912 EN_I$="Y"; GOSUB ENABLE_GROUPS; REFRESH_FLG=1; BREAK
13915 CASE "A"
13917 EN_F$="Y"; GOSUB ENABLE_GROUPS; BREAK
13950 END SWITCH 
13990 RETURN 
13998 ! 
13999 ! 
18098 ! 
18099 ! 
18198 ! 
18199 ! 
18298 ! 
18299 ! 
18398 ! 
18399 ! 
18798 ! 
18799 ! 
20000 POST_NOTE_KEY:! Processing after image key                              
20010 IF NOT(NUL(NOTE_KEY$)) THEN {
20015 IF UCS(STP(NOTE_KEY$))="A" THEN {! Auto number                          
20020 CALL "ILGFUN;ADD_NOTE",Z[1],NOTE_KEY$,"","",""
20025 REM "GOSUB GET_CREATED_BY_NAME
20030 REFRESH_FLG=1
20050  } ELSE {! not auto number                                               
20055 NOTE_KEY$=PAD(NOTE_KEY$,5)
20060 NOTE_KEY$=STR(NOTE_KEY$:DIM(5,"0"),ERR=*NEXT)
20065 REFRESH_FLG=1
20080  }
20090  }
20095 GOTO FIND_REC
20098 ! 
20099 ! ****************************************************                    
20100 GET_CREATED_BY_NAME:! Processing after created by entered                
20101 RETURN 
20110 DIM OPERATOR$(512)
20115 FIND (Z[13],KEY="o"+PAD(CREATED_BY$,3),DOM=*NEXT)OPERATOR$
20150 OPERATOR_NAME$=OPERATOR$(5,30)
20195 RETURN 
20200 AUTO_NUMBER:! Auto number button pressed, act like put in an A           
20210 NOTE_KEY$="A"+DIM(4); _EOM$=$0D$
20295 GOTO POST_NOTE_KEY
20299 ! *******************************************************                 
20400 BROWSE_FOR_NOTE:! using FIND_NOTE, get IMAGE_PATH$                     
20420 CALL "ZZGFUN;FIND_NOTE",ITYPE$,IPATH$
20480 REFRESH_FLG=1
20495 RETURN 
21000 INIT:
21001 REM "X0$="OPGJT0",X1$="Job Notes"
21002 REM "CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOSUB WRAPUP; GOTO *RETURN
21003 REM "IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=*NEXT)
21004 REM "DIM Z[NUM(X3$(60,3))]
21005 REM "REF_TYPE$=ARG_1$,NT_REF$=ARG_2$
21006 SEQ4$="",SEQ5$=""
21008 REM "CALL "UPDJT0;CLEAR_FIELDS",A$,A{ALL}
21010 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
21020 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
21040 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
21070 REM "Z$="01X JT0... 13O ZZPARM  "
21080 REM "CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; IF Z0>0 THEN GOSUB WRAPUP; GOTO *RETURN
21090 REM "GOSUB SET_DATE
21095 REM "GOSUB SET_TIME
21096 REM "GOSUB SET_OPR
21097 GOSUB SET_MASK
21098 REM "GOSUB GET_CREATED_BY_NAME
21190 RETURN 
21198 ! 
21199 ! 
21200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
21210 CMD_STR$="END"
21290 RETURN 
21298 ! 
21299 ! 
21300 SETUP_LIBRARY:
21320 _SV_MSGLIB$=MSG(*)
21330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
21340 MESSAGE_LIB "*tfmsglib."+_LANG$,ERR=*NEXT; GOTO 0360
21350 MESSAGE_LIB "*tfmsglib.en"
21360 SET_MSG:GOSUB SETUP_MESSAGES
21390 RETURN 
21398 ! 
21399 ! 
22000 MAIN_POST_DISPLAY:
22005 MESSAGE_LIB _SV_MSGLIB$
22050 REF_TYPE$=ARG_1$
22052 NOTE_REF$=ARG_2$
22053 CREATED_ON$=ARG_3$
22054 CREATED_AT$=ARG_4$
22055 CREATED_BY$=ARG_5$
22056 TF_INDEX$=ARG_6$
22080 REFRESH_FLG=1
22090 RETURN 
22098 ! 
22099 ! 
22100 WRAPUP:
22120 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
22160 SET_PARAM 'KR'=_SV_KR
22190 RETURN 
22198 ! 
22199 ! 
22300 RESTART:
22310 TF_TYPE$="",TF_NAME$="",OLDREC$="",VENDOR$="",PLANT$="",TF_SEQUENCE$=""
22315 CALL "UPDJT0;CLEAR_FIELDS",A$,A{ALL}; READ DATA FROM REC(IOL=0310) TO IOL=IOL(Z[1])
22380 REFRESH_FLG=1,NEXT_ID=TYPE.CTL
22385 SHOW_ALL$="N",EN_TYPE$="Y",EN_ALL$="N"; GOSUB ENABLE_GROUPS
22387 ENABLE CONTROL PRICE_TYPE.CTL
22390 RETURN 
22398 ! 
22399 ! 
22500 SELECT_EXIT:
22510 IF OLDREC$="" THEN {
22515 CMD_STR$="END" } ELSE {
22520 READ DATA FROM REC(IOL(Z[1])) TO IOL=0310; ANS$=""; IF OLDREC$<>A$ AND NOT(NEW) THEN MSGBOX MSG("REC_ALTERD"),MSG("UPDATED"),"YESNO",ANS$
22525 IF ANS$="NO" THEN {
22527 CALL "UPDJT0;CLEAR_LOCK",Z[1]; CMD_STR$="END" } ELSE {! 22570 }
22530 GOSUB SELECT_SAVE
22540 IF MSG$="" AND NOT(BUSY) THEN CMD_STR$="END"
22570  }
22580  }
22590 RETURN 
22598 ! 
22599 ! 
22600 SELECT_SAVE:
22605 READ DATA FROM REC(IOL(Z[1])) TO IOL=0310
22610 CALL "UPDJT0;VALIDATE",A$,A{ALL},MSG$; IF MSG$<>"" THEN MSGBOX MSG$,""; NEXT_ID=SAVE.CTL; GOTO *RETURN
22620 CALL "UPDJT0;UPDATE",Z[1],A$,A{ALL},BUSY; IF BUSY THEN MSGBOX MSG("ERR_W"),""; NEXT_ID=SAVE.CTL; GOTO *RETURN
22630 IF PRE_SELECT$<>"" THEN CMD_STR$="END" ELSE GOSUB RESTART
22690 RETURN 
22698 ! 
22699 ! 
22800 SELECT_CLEAR:
22810 IF NEW THEN CALL "UPDJT0;DELETE",Z[1],A$,A{ALL},FOUND,BUSY; IF FOUND AND BUSY THEN MSGBOX MSG("ERR_W"),""; NEXT_ID=SAVE.CTL
22820 IF NOT(NEW) THEN GOSUB SELECT_EXIT
22890 RETURN 
22898 ! 
22899 ! 
22900 SELECT_DELETE:
22910 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"YESNO",ANS$
22915 IF ANS$="YES" THEN {
22920 CALL "UPDJT0;DELETE",Z[1],A$,A{ALL},FOUND,BUSY; IF FOUND AND BUSY THEN MSGBOX MSG("ERR_W"),""; NEXT_ID=SAVE.CTL; GOTO *RETURN
22930 CALL "UPDJT0;CLEAR_FIELDS",A$,A{ALL}; READ DATA FROM REC(IOL=0310) TO IOL=IOL(Z[1])
22940 EN_ALL$="N"; GOSUB ENABLE_GROUPS
22950 NEXT_ID=TYPE.CTL,REFRESH_FLG=1
22960  } ELSE {
22970 NEXT_ID=SAVE.CTL
22980  }
22985 GOSUB RESTART
22990 RETURN 
22998 ! 
22999 ! 
23000 SELECT_FIRST:
23010 CALL "UPDJT0;READFIRST",Z[1],A$,A{ALL},FOUND
23020 IF FOUND THEN READ DATA FROM REC(IOL=0310) TO IOL=IOL(Z[1]); GOSUB GET_TYPE; GOSUB FIND_REC
23090 RETURN 
23098 ! 
23099 ! 
23100 SELECT_PREV:
23110 CALL "UPDJT0;READPREV",Z[1],A$,A{ALL},FOUND
23120 IF FOUND THEN READ DATA FROM REC(IOL=0310) TO IOL=IOL(Z[1]); GOSUB GET_TYPE; GOSUB FIND_REC
23190 RETURN 
23198 ! 
23199 ! 
23500 GET_TYPE:
23510 SWITCH PRICE_TYPE$
23520 CASE "CGP"
23525 TF_TYPE$="C"
23530 CASE "IGP"
23535 TF_TYPE$="I"
23540 CASE "AFM"
23545 TF_TYPE$="A"; BREAK
23580 END SWITCH 
23590 RETURN 
23598 ! 
23599 ! 
24100 SELECT_NEXT:
24110 CALL "UPDJT0;READNEXT",Z[1],A$,A{ALL},FOUND
24120 IF FOUND THEN READ DATA FROM REC(IOL=0310) TO IOL=IOL(Z[1]); GOSUB GET_TYPE; GOSUB FIND_REC
24190 RETURN 
24198 ! 
24199 ! 
24200 SELECT_LAST:
24210 CALL "UPDJT0;READNEXT",Z[1],A$,A{ALL},FOUND
24220 IF FOUND THEN READ DATA FROM REC(IOL=0310) TO IOL=IOL(Z[1]); GOSUB GET_TYPE; GOSUB FIND_REC
24290 RETURN 
24298 ! 
24299 ! 
25000 SET_DATE:
25011 DATE_OF_NOTE$=X3$(21,6)
25099 RETURN 
26000 SET_TIME:
26011 TIME_OF_NOTE$=DTE(0:"%Hz:%mz:%sz")
26099 RETURN 
27000 SET_OPR:
27010 OPR_CODE$=X3$(40,3)
27099 RETURN 
28000 SET_MASK:
28060 IF REF_TYPE$="RFQ" THEN %MASK$=%ORD_MASK$ ELSE IF REF_TYPE$="ORDER" THEN %MASK$=%ORD_MASK$ ELSE IF REF_TYPE$="INVOICE" THEN %MASK$="%invoice_mask$"
28099 RETURN 
55000 ENABLE_GROUPS:
55005 IF SHOW_CGP$="Y" THEN CALL "*wingrp;show",CGP.GRP$; SHOW_CGP$=""
55007 IF SHOW_IGP$="Y" THEN CALL "*wingrp;show",IGP.GRP$; SHOW_IGP$=""
55008 IF SHOW_AFM$="Y" THEN CALL "*wingrp;show",AFM.GRP$; SHOW_AFM$=""
55009 IF SHOW_ALL$="N" THEN CALL "*wingrp;show",ALL.GRP$; SHOW_ALL$=""
55010 IF EN_TYPE$="Y" THEN CALL "*wingrp;enable",TYPE.GRP$; EN_TYPE$=""
55015 IF EN_TYPE$="N" THEN CALL "*wingrp;disable",TYPE.GRP$; EN_TYPE$=""
55060 IF EN_BUTTONS$="Y" THEN CALL "*wingrp;enable",BUTTONS.GRP$; EN_BUTTONS$=""
55070 IF EN_ALL$="N" THEN CALL "*wingrp;disable",ALL.GRP$; EN_ALL$=""
55075 IF EN_KEYS$="N" THEN CALL "*wingrp;disable",KEYS.GRP$; EN_KEYS$=""
55080 IF EN_I$="Y" THEN CALL "*wingrp;enable",I.GRP$; EN_I$=""
55082 IF EN_A$="Y" THEN CALL "*wingrp;enable",A.GRP$; EN_A$=""
55084 IF EN_C$="Y" THEN CALL "*wingrp;enable",C.GRP$; EN_C$=""
55090 IF EN_CGP$="Y" THEN CALL "*wingrp;enable",CGP.GRP$; EN_CGP$=""
55092 IF EN_IGP$="Y" THEN CALL "*wingrp;enable",IGP.GRP$; EN_IGP$=""
55094 IF EN_AFM$="Y" THEN CALL "*wingrp;enable",AFM.GRP$; EN_AFM$=""
55096 IF EN_CGP$="N" THEN CALL "*wingrp;disable",CGP.GRP$; EN_CGP$=""
55098 IF EN_IGP$="N" THEN CALL "*wingrp;disable",IGP.GRP$; EN_IGP$=""
55100 IF EN_AFM$="N" THEN CALL "*wingrp;disable",AFM.GRP$; EN_AFM$=""
55290 RETURN 
55298 ! 
55299 ! 
56000 REM "188067-New Pricing changes. Standard GP Percentage for a           
56002 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56004 REM "285248-Job note entered for an order, during PO rec type billing it
