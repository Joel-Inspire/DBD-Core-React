0010 ! ZZGMOA - User Code Setup
0035 REM "5.7 - 08/16/24 - 11.595681 - jvv - SSP# 307491
0037 REM "307491-Generic File Transfer utility                               
0040 REM "Copyright 2024 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "ZZGMOA","../ZZG/ZZ.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZM0"
0170 _ZM0=HFN; OPEN (_ZM0,ERR=OPEN_ERR)_FILE_NAME$
0185 _FIL_NO=FFN("ZZPARM"); IF _FIL_NO<=0 THEN _FIL_NO=HFN; OPEN (_FIL_NO)"ZZPARM"
0186 _ZZP=HFN; OPEN (_ZZP)"ZZPARM"
0187 READ (_FIL_NO,KEY="*viewer*",DOM=*NEXT)*,*,*,DFT_WORD$
0188 IF STP(DFT_WORD$)="" THEN DFT_WORD$="0"
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="OPERATOR_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; NEXT_ID=OPERATOR_CODE.CTL; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0945 IF _ZM0 THEN CLOSE (_ZM0); ZM0=0
0947 IF _ZZP THEN CLOSE (_ZZP)
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1015 OPERATOR_CODE$=PAD(OPERATOR_CODE$,3) ! SSP#235858
1020 CHANGE_FLG=0 ! IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 _KEY$="o"+OPERATOR_CODE$
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_X$; IF _X$="NO" THEN NEXT_ID=OPERATOR_CODE.CTL; EXIT 
1230 DIM A$(120)
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1255 GOSUB COPY_FROM; IF TF_VALUE$<>"" THEN A$=TF_VALUE$,ROLE$=NEWROLE$,TF_VALUE$="",NEWROLE$="",A$(2,3)=OPERATOR_CODE$; CHANGE_FLG=1,_FIRST_FIELD=TF_NAME.CTL; GOSUB ASSIGN_LIB ! SSP 213821
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1280 GOSUB LOAD_PRINT_DEV; GOSUB LOAD_ROLE
1285 CB_WORD$=DFT_WORD$,NEXT_ID=TF_NAME.CTL ! SSP 213821
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1415 GOSUB ASSIGN_PRG
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 REMOVE (_ZZP,KEY="s"+_KEY$(2,3),DOM=*NEXT) ! SSP#241547
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE); READ (_FIL_NO)
2045 IF MID(_KEY$,1,1)<>"o" THEN GOTO 2040
2047 IF LEN(_KEY$)<>4 THEN GOTO 2040
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); IF MID(_KEY$,1,1)<>"o" OR LEN(_KEY$)<>4 THEN READ (_FIL_NO,KEY=_KEY$,ERR=*SAME); GOTO *SAME ELSE READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2425 READ (_FIL_NO,KEY="o",DOM=*NEXT)
2430 _KEY$=KEY(_FIL_NO,ERR=NO_FIRST)
2440 IF MID(_KEY$,1,1)<>"o" OR LEN(_KEY$)>4 THEN GOTO NO_FIRST
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2625 READ (_FIL_NO,KEY="o~~~",DOM=*NEXT)
2630 _KEY$=KEP(_FIL_NO,ERR=NO_LAST); IF MID(_KEY$,1,1)<>"o" THEN GOTO NO_LAST
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT)A$
3035 CUR_ROLE$=""; READ (_ZZP,KEY="s"+MID(_KEY$,2,3),DOM=*NEXT)_ROLE$,SOUND_PLAY$,HELP_PATH$,CB_WORD$,CB_FAV$,CB_EXPORT_EXCEL$,CB_VIEW_FILE$,CB_CUST_QRY$,CB_CUST_PNL$,CB_TRANSFER_FILE$; CUR_ROLE$=STP(MID(_ROLE$,5)) ! SSP 224088 SSP 224256 SSP 307491
3036 SOUND_PLAY$="0",CB_WORD$="0" ! 307475
3038 IF STP(CB_WORD$)="" THEN CB_WORD$=DFT_WORD$
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 ! READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3065 GOSUB ASSIGN_LIB
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)A$
3325 READ (_ZZROLE,KNO=1,KEY=CUR_ROLE$,DOM=*NEXT)
3326 _K_ROLE$=KEY(_ZZROLE,END=*NEXT); READ (_ZZROLE)_ROLE$
3327 SOUND_PLAY$="0",CB_WORD$="0"; WRITE (_ZZP,KEY="s"+MID(_KEY$,2,3))_ROLE$,SOUND_PLAY$,HELP_PATH$,CB_WORD$,CB_FAV$,CB_EXPORT_EXCEL$,CB_VIEW_FILE$,CB_CUST_QRY$,CB_CUST_PNL$,CB_TRANSFER_FILE$ ! SSP 224088 SSP 224256 307475 SSP 307491
3328 %SOUND_PLAY=NUM(SOUND_PLAY$),%CB_FAV=NUM(CB_FAV$); IF %X3$(40,3)=MID(_KEY$,2,3) THEN %CB_WORD=NUM(CB_WORD$)
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=OPERATOR_CODE.CTL,_FIRST_FIELD=LOGIN_PASSWORD.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN OPERATOR_CODE$=""
13030 IF _CLR_FLG$="R" THEN TF_NAME$=""
13040 IF _CLR_FLG$="R" THEN LOGIN_PASSWORD$=""
13050 ACCESS_LEVEL$="",COMPANY_ACCESS_CODE$="",LOGIN_MENU_CODE$="",LOGIN_COMPANY_CODE$=""
13090 DIRECT_MENU_ACCESS$="",DIRECT_SYSTEM_OPTIONS$="",DEFAULT_PRINTER$=""
13120 REPORT_PRINT_PRIORITY$="",AUTO_LOGOFF$="UL",DIASBLE_ESCAPE$="",USER_OPTIONS$=""
13160 STANDARD_LANGUAGE$="",PREFERENCE_SET$="",GROUP_CODE$="",LAST_LOGIN$=""
13200 LAST_LOGIN_TIME$="",LAST_ACCESS_TERMINAL$="",STD_F1_PROMPT_CODE$=""
13230 REMOTE_LOCATION_CODE$="",LOGIN_CODE$="",ROLE$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=TF_NAME.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=LOGIN_PASSWORD.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 SELECT_MENU_CODE:
15010 IF STP(LOGIN_MENU_CODE$)="" THEN RETURN 
15020 READ (_ZM0,KEY=" "+LOGIN_MENU_CODE$,DOM=NO_MENU)
15030 RETURN 
15040 NO_MENU:
15050 MSGBOX MSG("INVALID_M"),MSG("WARNING"),"!,TIM=4"
15060 LOGIN_MENU_CODE$="",NEXT_ID=LOGIN_MENU_CODE.CTL
15070 RETURN 
17000 CHECK_QRY:
17010 ENTER VAR$
17020 IF MID(VAR$,1,1)<>"o" THEN EXIT 123
17030 IF LEN(VAR$)<>4 THEN EXIT 123
17032 _FIL_NAM$="ZZPARM"; IF _FIL_NO=0 THEN _FIL_NO=HFN; OPEN (_FIL_NO,ERR=*NEXT)_FIL_NAM$ ! SSP241548 jdf
17034 READ (_FIL_NO,KEY="s"+VAR$(2,3),ERR=*NEXT,DOM=*NEXT)ZZPAR$ ! SSP241548 jdf
17036 %ZZPAR$=STP(MID(ZZPAR$,5,30)) ! SSP241548 jdf
17038 CLOSE (_FIL_NO) ! SSP241548 jdf
17040 EXIT 
17100 ASSIGN_LIB:
17102 OPERATOR_CODE$=MID(_KEY$,2)
17105 TF_NAME$=A$(5,30),LOGIN_PASSWORD$=A$(35,6),ACCESS_LEVEL$=A$(41,2),COMPANY_ACCESS_CODE$=A$(43,8)
17140 LOGIN_MENU_CODE$=A$(51,3),LOGIN_COMPANY_CODE$=A$(54,3)
17155 IF A$(57,1)="0" THEN A$(57,1)="2"
17160 DIRECT_MENU_ACCESS$=A$(57,1)
17165 IF A$(58,1)="0" THEN A$(58,1)="2"
17170 DIRECT_SYSTEM_OPTIONS$=A$(58,1),DEFAULT_PRINTER$=A$(59,2),REPORT_PRINT_PRIORITY$=A$(61,1),AUTO_LOGOFF$=A$(62,2)
17205 IF A$(64,1)="0" THEN A$(64,1)="2"
17210 DISABLE_ESCAPE$=A$(64,1),USER_OPTIONS$=A$(65,6),STANDARD_LANGUAGE$=A$(71,1),PREFERENCE_SET$=A$(72,2)
17250 GROUP_CODE$=A$(74,2),LAST_LOGIN$=A$(76,6),LAST_LOGIN_TIME$=A$(82,4),LAST_ACCESS_TERMINAL$=A$(86,8),STD_F1_PROMPT_CODE$=A$(94,2)
17275 GOSUB LOAD_PRINT_DEV; GOSUB LOAD_ROLE
17350 RETURN 
17500 LOAD_ROLE: ROL$="",K_ROL$=""
17510 _ZZROLE=FN%FFN("ZZROLE"); IF _ZZROLE<=0 THEN _ZZROLE=HFN; OPEN (_ZZROLE)"ZZROLE" ! [205471]-changed FFN() to FN%FFN()
17515 READ (_ZZROLE,KEY="",DOM=*NEXT)
17520 READ (_ZZROLE,END=END_ROLE)VAR$
17530 ROL$=ROL$+STP(VAR$(5))+"/",K_ROL$=K_ROL$+VAR$(1,4); GOTO 17520
17540 END_ROLE:
17550 LIST_BOX LOAD ROLE.CTL,ROL$
17560 IF CUR_ROLE$<>"" THEN LIST_BOX WRITE ROLE.CTL,CUR_ROLE$; ROLE$=CUR_ROLE$
17570 RETURN 
18000 ! 18000,10
18010 LOAD_PRINT_DEV:
18020 CR_DEV$=MID(DEFAULT_PRINTER$,1,2)
18030 DEFAULT_PRINTER$=""
18040 ZZ9=FN%FFN("ZZ9"+%C$); IF ZZ9<=0 THEN ZZ9=HFN; OPEN (ZZ9)"ZZ9"+%C$ ! [205471]-changed FFN() to FN%FFN()
18045 READ (ZZ9,KEY="",DOM=*NEXT)
18060 KEY_ZZ9$=KEY(ZZ9,END=END_LOAD_PRINT_DEV)
18070 READ (ZZ9,KEY=KEY_ZZ9$)ZZ9$
18080 DEFAULT_PRINTER$=DEFAULT_PRINTER$+ZZ9$(1,2)+" - "+ZZ9$(3,30)+"/"
18090 IF ZZ9$(43,1)<>"2" THEN GOTO 18060
18100 GOTO 18060
18110 END_LOAD_PRINT_DEV:
18120 XX=POS(CR_DEV$=DEFAULT_PRINTER$); IF XX<>0 THEN XXX=POS("/"=DEFAULT_PRINTER$(XX)),CR_DEV$=DEFAULT_PRINTER$(XX,XXX-1)
18130 DROP_BOX LOAD DEFAULT_PRINTER.CTL,DEFAULT_PRINTER$
18140 DROP_BOX WRITE RET_OUTDEV.CTL,CR_DEV$
18150 DEFAULT_PRINTER$=CR_DEV$
18170 REFRESH_FLG=1
18180 RETURN 
18190 SEL_PRINTER:
18192 LIST_BOX READ DEFAULT_PRINTER.CTL,IDX
18193 LIST_BOX FIND DEFAULT_PRINTER.CTL,IDX,DEFAULT_PRINTER$,ERR=*RETURN
18200 DEFAULT_PRINTER$=DEFAULT_PRINTER$(1,2); RETURN 
19000 ! 19000,10
19010 ASSIGN_PRG:
19020 A$(1,4)=_KEY$,A$(5,30)=TF_NAME$
19030 A$(35,6)=LOGIN_PASSWORD$
19040 A$(41,2)=ACCESS_LEVEL$
19050 A$(43,8)=COMPANY_ACCESS_CODE$
19060 A$(51,3)=LOGIN_MENU_CODE$
19070 A$(54,3)=LOGIN_COMPANY_CODE$
19080 IF DIRECT_MENU_ACCESS$="2" THEN DIRECT_MENU_ACCESS$="0"
19090 A$(57,1)=DIRECT_MENU_ACCESS$
19100 IF DIRECT_SYSTEM_OPTIONS$="2" THEN DIRECT_SYSTEM_OPTIONS$="0"
19110 A$(58,1)=DIRECT_SYSTEM_OPTIONS$
19120 A$(59,2)=DEFAULT_PRINTER$
19130 A$(61,1)=REPORT_PRINT_PRIORITY$
19140 A$(62,2)=AUTO_LOGOFF$
19150 IF DISABLE_ESCAPE$="2" THEN DISABLE_ESCAPE$="0"
19160 A$(64,1)=DISABLE_ESCAPE$
19170 A$(65,6)=USER_OPTIONS$
19180 A$(71,1)=STANDARD_LANGUAGE$
19190 A$(72,2)=PREFERENCE_SET$
19200 A$(74,2)=GROUP_CODE$
19201 CUR_ROLE$=ROLE$
19210 A$(94,2)=STD_F1_PROMPT_CODE$
19230 RETURN 
20000 ADD_ROLE:
20010 PROCESS "ZZWROL","../ZZG/ZZ.EN",NEWROLE$
20020 IF NEWROLE$="" THEN GOTO *RETURN
20030 GOTO LOAD_ROLE
21000 COPY_FROM:
21010 PROCESS "ZZGMOA.1","../ZZG/ZZ.EN",TF_VALUE$,NEWROLE$
21020 RETURN 
21030 INIT_1:
21040 _ZZP=FN%FFN("ZZPARM"); IF _ZZP<=0 THEN _ZZP=HFN; OPEN (_ZZP)"ZZPARM" ! [205471]-changed FFN() to FN%FFN()
21050 RETURN 
21060 SEL_COPY: OPER$=PAD(OPER$,3," "),REFRESH_FLG=1
21070 READ (_ZZP,KEY="o"+OPER$,DOM=NO_ZZP)A$,ROLE$
21075 ROLE$=""; READ (_ZZP,KEY="s"+OPER$,DOM=*NEXT)_ROLE$; ROLE$=STP(_ROLE$(5))
21080 OPER_NAME$=A$(5,35)
21090 RETURN 
21100 NO_ZZP: OPER$="",OPER_NAME$="",NEXT_ID=OPER.CTL; RETURN 
21200 WRAUP: ARG_1$=A$,ARG_2$=ROLE$; RETURN 
56000 REM + Modification History
56002 ! "189263-Program to copy role from one user to another               
56004 REM "205471-Oracle - FFN usage in tf2g progs. to be replaced by FN%FFN  
56006 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56010 ! "213821-Cannot setup new users in QATST GUI.  This is ok on Rel.    
56012 REM "221551-Oracle related changes broke some GUI maintanance pgms.     
56015 ! "224088-Security - If I login as a salesrep, I can play around to   
56018 ! "224256-Need to setup security of the "Panel Customizer" feature.   
56019 REM "235858-Users setup in GUI are being setup with a short record      
56020 REM "241547-Program Exception while trying to delete a user             
56021 REM "307475-DBD-443:Disable MSW Errors, Sound Play                      
56022 REM "307491-Generic File Transfer utility                               
