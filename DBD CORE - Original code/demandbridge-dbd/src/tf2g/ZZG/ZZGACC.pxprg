0010 ! ZZGACC - Input/Output Mask Control
0035 ! "6.0 - 05/24/07 - 11.260000 - jir
0040 ! "Copyright 2003 Computer Software Inc.; Norcross, Georgia
0041 ! "        Licensed Software - All Rights Reserved.
0050 PROCESS "ZZGACC","../ZZG/ZZ.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZZPARM"
0180 _CUR_FN=HFN; OPEN (_CUR_FN)_FILE_NAME$
0185 _FIL_NO=HFN; OPEN (_FIL_NO,ERR=OPEN_ERR)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="GL_ACCT$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0550 _KEY$=%X3_COMP$+"ZZP"; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)A$
0555 B$=A$(7); GOSUB CREATE_GRID
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 IF _GL3 THEN CLOSE (_GL3); _GL3=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1015 GL_ACCT$=PAD(GL_ACCT$,12,"0")
1016 XX=NUM(GL_ACCT$,ERR=*NEXT); GOTO 1020
1017 MSGBOX MSG("GL_NUM"),MSG("WARNING"),"STOP,TIM=8"; GL_ACCT$="",NEXT_ID=GL_ACCT.CTL,CHANGE_FLG=0,REFRESH_FLG=1; EXIT 
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",ANSWER$
1230 IF ANSWER$="NO" THEN GOTO CLEAR_REC
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD,GL_ACCT_DESC$=""
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1635 EXIT 
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=*NEXT)
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1855 NEXT_ID=GL_ACCT.CTL
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=GL_ACCT.CTL,_FIRST_FIELD=GL_ACCT_DESC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN GL_ACCT$=""
13030 GL_ACCT_DESC$=""
13040 ACCT_TYPE$=""
13050 SUB_LEDGER$=""
13060 COST_CODE_TYPE$=""
13070 GL1_UNUSED_1$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(6,"N")
15030 IF _ORIG.GL_ACCT$=_CUR.GL_ACCT$ OR GL_ACCT$=_CUR.GL_ACCT$ THEN GOTO *NEXT ELSE IF _ORIG.GL_ACCT$=GL_ACCT$ THEN _CHG2$=_CHG2$+SEP+MSG("GL_ACCT")+" = "+_CUR.GL_ACCT$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GL_ACCT")+" = "+_CUR.GL_ACCT$
15040 IF _ORIG.GL_ACCT_DESC$=_CUR.GL_ACCT_DESC$ OR GL_ACCT_DESC$=_CUR.GL_ACCT_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.GL_ACCT_DESC$=GL_ACCT_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("GL_AC_D")+" = "+_CUR.GL_ACCT_DESC$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GL_AC_D")+" = "+_CUR.GL_ACCT_DESC$
15050 IF _ORIG.ACCT_TYPE$=_CUR.ACCT_TYPE$ OR ACCT_TYPE$=_CUR.ACCT_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.ACCT_TYPE$=ACCT_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("ACCT_TYPE")+" = "+_CUR.ACCT_TYPE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ACCT_TYPE")+" = "+_CUR.ACCT_TYPE$
15060 IF _ORIG.SUB_LEDGER$=_CUR.SUB_LEDGER$ OR SUB_LEDGER$=_CUR.SUB_LEDGER$ THEN GOTO *NEXT ELSE IF _ORIG.SUB_LEDGER$=SUB_LEDGER$ THEN _CHG2$=_CHG2$+SEP+MSG("SUB_LEDGER")+" = "+_CUR.SUB_LEDGER$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SUB_LEDGER")+" = "+_CUR.SUB_LEDGER$
15070 IF _ORIG.COST_CODE_TYPE$=_CUR.COST_CODE_TYPE$ OR COST_CODE_TYPE$=_CUR.COST_CODE_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.COST_CODE_TYPE$=COST_CODE_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("COST_C_T")+" = "+_CUR.COST_CODE_TYPE$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COST_C_T")+" = "+_CUR.COST_CODE_TYPE$
15080 IF _ORIG.GL1_UNUSED_1$=_CUR.GL1_UNUSED_1$ OR GL1_UNUSED_1$=_CUR.GL1_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.GL1_UNUSED_1$=GL1_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.GL1_UNUSED_1$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.GL1_UNUSED_1$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN GL_ACCT$=_CUR.GL_ACCT$
16030 IF _CHG_VAR$(2,1)="Y" THEN GL_ACCT_DESC$=_CUR.GL_ACCT_DESC$
16040 IF _CHG_VAR$(3,1)="Y" THEN ACCT_TYPE$=_CUR.ACCT_TYPE$
16050 IF _CHG_VAR$(4,1)="Y" THEN SUB_LEDGER$=_CUR.SUB_LEDGER$
16060 IF _CHG_VAR$(5,1)="Y" THEN COST_CODE_TYPE$=_CUR.COST_CODE_TYPE$
16070 IF _CHG_VAR$(6,1)="Y" THEN GL1_UNUSED_1$=_CUR.GL1_UNUSED_1$
16990 RETURN 
17000 CREATE_GRID:
17010 ! 17010,10
17015 DIM OLD$[31]
17020 FOR I=1 TO LEN(B$) STEP 12
17040 J=J+1,L=0,I$=B$(I,12); OLD$[J]=I$
17045 IF J>=24 THEN EXITTO 17145
17050 FOR K=5 TO 11 STEP 2
17060 IF I$(K,1)=" " THEN EXITTO 17125 ELSE DES$=DES$+I$(K+1,1); L=L+NUM(I$(K+1,1),ERR=17070)
17070 ON POS(I$(K,1)="ZASzas") GOTO 17080,17090,17080,17100,17110
17080 DES$=DES$+" alpha-Z,  "; GOTO 17120
17090 DES$=DES$+" z-fill, "; GOTO 17120
17100 DES$=DES$+" Alpha, "; GOTO 17120
17110 DES$=DES$+" no-see, "; GOTO 17120
17120 NEXT K
17130 DES$=DES$+"fill with "+I$(4,1)+"'s"
17135 GOSUB LOAD_GRID; DES$=""
17140 NEXT I
17145 GRID_1.CTL'COLUMN=3,GRID_1.CTL'ROW=1,GRID_1.CTL'BACKCOLOR$="Light Red",GRID_1.CTL'TEXTCOLOR$="White"; GRID GOTO GRID_1.CTL,3,1; NEXT_ID=GRID_1.CTL
17147 LAST=1
17150 RETURN 
23000 LOAD_GRID:
23005 _BKEY$=_KEY$,BPO_NUMBER$=PO_NUMBER$,GRIDD$="",OPR$="",MAX_LINES=0
23008 ! X'COLUMM=-1,X'ROW=2,X'CELLTYPE$="Normal"
23009 ! GRID HIDE GRID_1.CTL
23010 AA+=1
23045 IF AA>1 THEN GRIDD$=GRIDD$+"A"; GRID LOAD GRID_1.CTL,1,0,"A"
23050 LINES=LINES+1,GRID_1.CTL'ROW=LINES,GRID_1.CTL'COLUMN=-1,GRID_1.CTL'VALUE$=STR(LINES:"000")
23060 GRID WRITE GRID_1.CTL,1,LINES,I$(1,3); GRID LOCK GRID_1.CTL,1,LINES
23070 GRID WRITE GRID_1.CTL,2,LINES,DES$; GRID LOCK GRID_1.CTL,2,LINES
23072 GRID WRITE GRID_1.CTL,3,LINES,I$(4); GRID_1.CTL'COLUMN=3,GRID_1.CTL'ROW=LINES,GRID_1.CTL'LEN=9
23075 MM$=DIM(20,"X"); GRID WRITE GRID_1.CTL,4,LINES,FN%ZZDISP$(MM$,I$(1,3)); GRID LOCK GRID_1.CTL,4,LINES
23080 RETURN 
23100 END_LOAD_GRID:
23120 IF LINES=0 THEN GOTO PROC_RE
24509 ! X=GRID_1.CTL,X'COLUMM=2,X'ROW=-1,X'CELLTYPE$="DropBox",X'TEXT$=GRID_T$
24510 PROC_RE: _KEY$=_BKEY$
24515 GRID SHOW GRID_1.CTL
24530 GRID_FOCUS:
24535 IF ID$<>"GRID_1" THEN GOTO *RETURN
24540 GRID SELECT READ GRID_1.CTL,COL,ROW
24542 GRID FIND GRID_1.CTL,1,ROW,TF_TYPE$; GRID FIND GRID_1.CTL,3,ROW,FORMAT$; IF OLD$[ROW]=TF_TYPE$+FORMAT$ THEN GOTO 24545
24543 XX=POS(TF_TYPE$=%X4$); IF XX<>0 THEN %X4$(XX,12)=TF_TYPE$+FORMAT$; DISP$=DIM(20,"X"),DIS$=FN%ZZDISP$(DISP$,TF_TYPE$); GRID WRITE GRID_1.CTL,4,ROW,DIS$
24545 GRID_1.CTL'COLUMN=COL,GRID_1.CTL'ROW=LAST,GRID_1.CTL'BACKCOLOR$="Default",GRID_1.CTL'TEXTCOLOR$="Default"
24560 IF COL=3 AND ROW+1<=LINES THEN GRID GOTO GRID_1.CTL,3,ROW+1; LAST=ROW+1,NEXT_ID=GRID_1.CTL,GRID_1.CTL'COLUMN=COL,GRID_1.CTL'ROW=ROW+1,GRID_1.CTL'BACKCOLOR$="Light Red",GRID_1.CTL'TEXTCOLOR$="White" ELSE %GRID=0
24599 RETURN 
24600 ADD_LINES:
24610 LINES=LINES+1
24620 GRID ADD GRID_1.CTL,0,LINES
24630 GRID_1.CTL'ROW=LINES,GRID_1.CTL'COLUMN=-1,GRID_1.CTL'VALUE$=STR(LINES:"000"),GRID_1.CTL'FONT$="MS Sans Serif"
24635 X=GRID_1.CTL,X'COLUMN=1,X'ROW=LINES
24640 GRID WRITE GRID_1.CTL,1,LINES,PRINT_LINE$
24645 GRID GOTO GRID_1.CTL,1,LINES; NEXT_ID=GRID_1.CTL
24646 XX=GRID_1.CTL,XX'COLUMN=3,XX'ROW=LINES,XX'LOCK=1
24650 RETURN 
25700 SEL_GRID:
25705 GOSUB DEL_RECORDS
25710 FOR AA=1 TO LINES
25720 X=GRID_1.CTL
25730 GRID FIND X,1,AA,PRINT_LINE$
25735 PRINT_LINE$=MID(PRINT_LINE$,1,1)
25740 GRID FIND X,2,AA,TF_COMMENT$
25750 LINE_NUM$=STR(AA:"000"),_KEY$=PO_NUMBER$+LINE_NUM$
25770 NEXT AA
25772 DEL_GRID:IF LINES=0 THEN GOTO *RETURN
25773 FOR AA=2 TO LINES; GRID DELETE GRID_1.CTL,0,2; NEXT AA
25775 CHANGE_FLG=0,REFRESH_FLG=1,CHANGE_FLG=0
25780 GRID WRITE GRID_1.CTL,1,1,""
25790 GRID WRITE GRID_1.CTL,2,1,""
25800 IF MAX_LINES=0 THEN GOTO *RETURN
25900 RETURN 
26000 CREATE_REC:
26020 PO_DIV$=PO_NUMBER$(1,%PO_DIV_LEN),PO_NUM$=PO_NUMBER$(%PO_DIV_LEN+1)
26030 PO_LINE_NUM$="001",PRINT_LINE$="Y",TF_COMMENT$="",POE_UNUSED_1$=""
26040 _KEY$=PO_NUMBER$+PO_LINE_NUM$
27050 WRITE (_FIL_NO,KEY=_KEY$)
27060 RETURN 
27100 DEL_LN: AB=GRID_1.CTL
27105 IF LINES>MAX_LINES THEN MAX_LINES=LINES
27110 GRID SELECT READ GRID_1.CTL,COL,ROW
27120 GRID FIND GRID_1.CTL,1,ROW,SEL$,ERR=NO_LN
27130 GRID FIND GRID_1.CTL,2,ROW,SEL1$
27140 COLOR$="Light Red",AB'ROW=ROW,AB'COLUMN=2,AB'BACKCOLOR$=COLOR$,AB'COLUMN=1,AB'BACKCOLOR$=COLOR$
27150 MSGBOX MSG("WISH")+" "+MSG("DELETE")+" "+MSG("LINE")+" "+STR(ROW:"000B")+SEP+"("+SEL$+"-"+STP(SEL1$)+")",MSG("CONFIRMING"),"?,YESNO",OPT$
27155 AB'ROW=ROW,AB'COLUMN=2,AB'BACKCOLOR$="White",AB'COLUMN=1,AB'BACKCOLOR$="White"
27160 IF OPT$="NO" THEN EXIT 
27170 GRID DELETE GRID_1.CTL,0,ROW
27180 LINES=LINES-1
27190 FOR AA=ROW TO LINES
27200 GRID_1.CTL'ROW=AA,GRID_1.CTL'COLUMN=-1,GRID_1.CTL'VALUE$=STR(AA:"000")
27210 NEXT AA
27220 RETURN 
27300 INS_LN:
27310 GRID SELECT READ GRID_1.CTL,COL,ROW
27315 AB=GRID_1.CTL,COLOR$="Light Blue",AB'ROW=ROW,AB'COLUMN=2,AB'BACKCOLOR$=COLOR$,AB'COLUMN=1,AB'BACKCOLOR$=COLOR$
27320 MSGBOX MSG("WISH")+" "+MSG("INSERT")+" "+MSG("LINE")+" "+STR(ROW:"000B"),MSG("CONFIRMING"),"!,YESNO",OPT$
27325 AB'ROW=ROW,AB'COLUMN=2,AB'BACKCOLOR$="White",AB'COLUMN=1,AB'BACKCOLOR$="White"
27330 IF OPT$="NO" THEN RETURN 
27340 ! GRID ADD GRID_1.CTL,0,ROW
27350 LINES=LINES+1,BLINES=LINES,LINES=ROW-1
27355 GOSUB ADD_LINES; LINES=BLINES; BLINES=0
27357 GRID_1.CTL'FONT$="MS Sans Serif"
27360 FOR AA=ROW TO LINES
27370 GRID_1.CTL'ROW=AA,GRID_1.CTL'COLUMN=-1,GRID_1.CTL'VALUE$=STR(AA:"000"),GRID_1.CTL'FONT$="MS Sans Serif"
27380 NEXT AA
27390 RETURN 
27400 NO_LN:
27410 MSGBOX MSG("NO_LN"),MSG("WARNING"),"!",OPT$
27420 RETURN 
28000 DEL_RECORDS:
28010 B_PO$=PO_NUMBER$
28020 READ (_FIL_NO,KEY=B_PO$,DOM=*NEXT)
28025 READ_NXT:
28030 _KEY$=KEY(_FIL_NO,END=END_DEL_RECORDS); READ (_FIL_NO)
28040 IF MID(_KEY$,1,LEN(B_PO$))<>B_PO$ THEN GOTO END_DEL_RECORDS
28050 REMOVE (_FIL_NO,KEY=_KEY$)
28060 GOTO READ_NXT
28070 END_DEL_RECORDS: PO_NUMBER$=B_PO$; RETURN 
