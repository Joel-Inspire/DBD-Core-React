0010 ! ZZGMOB - Application Security by Operator
0035 REM "5.7 - 08/24/10 - 16.004444 - crg - SSP# 197952
0037 REM "197952-Streamline processing by user - Chained journal updates     
0040 REM "Copyright 2010 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0060 PROCESS "ZZGMOB","../ZZG/ZZ.EN"
0070 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZZPARM"
0170 _FIL_NO=HFN; OPEN (_FIL_NO,ERR=OPEN_ERR)_FILE_NAME$
0180 READ (_FIL_NO,KEY=%C$+"A/R")AR_PARMS$
0190 READ (_FIL_NO,KEY=%C$+"G/B",ERR=*NEXT)GB$; GB$="Y"
0199 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1,_CUR_KEY$=""
0430 DIM _KEYS$[1:1]; _KEYS$[1]="ML_OPER$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; NEXT_ID=ML_OPER.CTL; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1015 ROLE_CODE$=STR(NUM(ROLE_CODE$):"0000",ERR=*NEXT); GOTO 1019
1018 ROLE_CODE$=PAD(ROLE_CODE$,4," ")
1019 ML_OPER$=PAD(ML_OPER$,3," ") ! SSP#263763
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 _KEY$="osec"+ML_OPER$
1052 READ (_FIL_NO,KEY="o"+ML_OPER$,DOM=OPR_MSG)B$ ! SSP#206516
1053 ML_NAME$=MID(B$,5,30),REFRESH_FLG=1
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1231 DIM A$(255)
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1255 GOSUB COPY_FROM; IF TF_VALUE$<>"" THEN GOTO PROCESS_READ
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD,ML_NAME$=MID(B$,5,30)
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1435 GOSUB ASSIGN_PRG
1440 WRITE (_FIL_NO,KEY="osec"+ML_OPER$)A$
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY="osec"+ML_OPER$,ERR=NO_SUCH)
1665 _SYO=HFN; OPEN (_SYO,ERR=*NEXT)"SYO"+%C$; REMOVE (_SYO,KEY=ML_OPER$,DOM=*NEXT) ! SSP#232602
1668 CLOSE (_SYO) ! SSP#232602
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 IF _KEY$=_CUR_KEY$ THEN _KEY$=KEN(_FIL_NO,END=END_OF_FILE) ! Get past extracted record
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2185 GOSUB COPY_FROM
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2425 READ (_FIL_NO,KEY="osec",DOM=*NEXT)
2430 _KEY$=KEY(_FIL_NO,ERR=NO_FIRST); IF MID(_KEY$,1,4)<>"osec" THEN GOTO NO_FIRST
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); ML_OPER$=MID(_KEY$,5); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ (_FIL_NO,KEY="o"+ML_OPER$,DOM=*NEXT)B$
3031 ML_NAME$=MID(B$,5,30)
3035 READ (_FIL_NO,KEY="osec"+ML_OPER$,DOM=NEW_RECORD)A$
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 EXTRACT (_FIL_NO,KEY=_KEY$)
3060 GOSUB ASSIGN_LIB
3062 IF CB$<>"Y" THEN DISABLE CONTROL CB_LN23.CTL
3070 RETURN 
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=ML_OPER.CTL,_FIRST_FIELD=ML_TM1.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
8010 OPR_MSG:! SSP#206516
8020 MSGBOX "Operator code Not Found!","NOT FOUND","INFO,OK" ! SSP#206516
8030 NEXT_ID=ML_OPER.CTL ! SSP#206516
8040 REFRESH_FLG=1 ! SSP#206516
8090 RETURN ! SSP#206516
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN ML_OPER$=""
13030 ML_NAME$="",ML_PASS$="",ML_DIV$=""
13040 FOR AA=1 TO 43; EXECUTE "cb_ln"+STR(AA)+"$="+QUO+"N"+QUO; NEXT AA
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
14999 ! 
15000 ASSIGN_LIB:
15001 ML_OPER$=_KEY$(5),ML_TM1$=A$(8,4),ML_TM2$=A$(12,4),ML_TM3$=A$(16,4),ML_TM4$=A$(20,4),ML_TM5$=A$(24,4),ML_TM6$=A$(28,4)
15002 FOR AA=32 TO 36; EXECUTE "CB_LN"+STR(AA-31)+"$=A$(AA,1)"; NEXT AA
15003 ML_DIV$=A$(37,2)
15004 FOR AA=39 TO 47; EXECUTE "CB_LN"+STR(AA-33)+"$=A$(AA,1)"; NEXT AA
15005 ML_PASS$=A$(48,6)
15006 FOR AA=54 TO 89; EXECUTE "CB_LN"+STR(AA-39)+"$=A$(AA,1)"; NEXT AA
15007 WW_SCAN_MODE$=A$(90,1); WW_PGM$=A$(91,1)
15008 FOR AA=92 TO 101; EXECUTE "CB_LN"+STR(AA-39)+"$=A$(AA,1)"; NEXT AA; REM " SSP 186762,SSP 222237
15009 IF TCB(29)<7100000 THEN CB_LN60$="N" ! SSP208671
15010 FOR AA=102 TO 106; EXECUTE "CB_LN"+STR(AA)+"$=A$(AA,1)"; NEXT AA; REM " SSP 186762,SSP 222237, 226001, 197952
15011 FOR AA=107 TO 111; EXECUTE "CB_LN"+STR(AA)+"$=A$(AA+60,1)"; NEXT AA; REM " SSP 197952,WO255876,WO274987,WO288437 SSP 307229
15012 ! FOR AA=108 TO 108; EXECUTE "CB_LN"+STR(AA)+"$=A$(AA+60,1)"; NEXT AA; REM " WO255876
15013 ! FOR AA=109 TO 109; EXECUTE "CB_LN"+STR(AA)+"$=A$(AA+60,1)"; NEXT AA; REM " WO274987
15015 V_SEL$="RPT_SELECT"; FOR AA=1 TO 5; _V_SEL$=V_SEL$+STR(AA)+"$"; VIA _V_SEL$=A$(107+(12*(AA-1)),12); NEXT AA
15064 REFRESH_FLG=1
15065 RETURN 
15069 ! 
15070 ASSIGN_PRG:
15071 A$(1,4)="osec",A$(5,3)=ML_OPER$,A$(8,4)=ML_TM1$,A$(12,4)=ML_TM2$,A$(16,4)=ML_TM3$,A$(20,4)=ML_TM4$,A$(24,4)=ML_TM5$,A$(28,4)=ML_TM6$
15072 FOR AA=32 TO 36; EXECUTE "a$(aa,1)=CB_LN"+STR(AA-31)+"$"; NEXT AA
15073 A$(37,2)=ML_DIV$
15074 FOR AA=39 TO 47; EXECUTE "a$(aa,1)=CB_LN"+STR(AA-33)+"$"; NEXT AA
15075 A$(48,6)=ML_PASS$
15076 FOR AA=54 TO 89; EXECUTE "a$(aa,1)=CB_LN"+STR(AA-39)+"$"; NEXT AA
15077 A$(90,1)=WW_SCAN_MODE$; A$(91,1)=WW_PGM$
15078 IF %X3$(40,3)=ML_OPER$ THEN %X3$(333,2)=ML_DIV$
15079 FOR AA=92 TO 101; EXECUTE "a$(aa,1)=CB_LN"+STR(AA-39)+"$"; NEXT AA; REM " SSP 186762,SSP 222237
15080 FOR AA=102 TO 106; EXECUTE "a$(aa,1)=CB_LN"+STR(AA)+"$"; NEXT AA; REM " SSP 226001, 197952
15081 FOR AA=107 TO 111; EXECUTE "a$(aa+60,1)=CB_LN"+STR(AA)+"$"; NEXT AA; REM " SSP 197952,WO255876,WO274987,WO288437 SSP 307229
15082 ! FOR AA=108 TO 108; EXECUTE "a$(aa+60,1)=CB_LN"+STR(AA)+"$"; NEXT AA; REM " WO255876  
15083 ! FOR AA=109 TO 109; EXECUTE "a$(aa+60,1)=CB_LN"+STR(AA)+"$"; NEXT AA; REM " WO274987  
15090 FOR AA=1 TO 5; EXECUTE "a$("+STR(107+(12*(AA-1)))+",12)=RPT_SELECT"+STR(AA)+"$"; NEXT AA
15140 RETURN 
16000 SELECT_PGM_SEC:
16010 CALL "ZZGSYO",ERR=*NEXT,ML_OPER$
16090 RETURN 
16098 ! 
16099 ! 
17000 LOAD_RPT_SELECTIONS:
17005 IF NUL(ML_OPER$) THEN RETURN 
17011 CALL "ZZ2RPA;DROP_BOX_LOAD",RPT_SELECT1.CTL,"PO2RRA"
17012 CALL "ZZ2RPA;DROP_BOX_LOAD",RPT_SELECT2.CTL,"AP2DBA"
17013 CALL "ZZ2RPA;DROP_BOX_LOAD",RPT_SELECT3.CTL,"AR2UPA"
17014 CALL "ZZ2RPA;DROP_BOX_LOAD",RPT_SELECT4.CTL,"AR2EBA"
17015 CALL "ZZ2RPA;DROP_BOX_LOAD",RPT_SELECT5.CTL,"AR2DBA"
17019 ! 
17021 DROP_BOX WRITE RPT_SELECT1.CTL,A$(107,12)
17022 DROP_BOX WRITE RPT_SELECT2.CTL,A$(107+12,12)
17023 DROP_BOX WRITE RPT_SELECT3.CTL,A$(107+24,12)
17024 DROP_BOX WRITE RPT_SELECT4.CTL,A$(107+36,12)
17025 DROP_BOX WRITE RPT_SELECT5.CTL,A$(107+48,12)
17029 ! 
17095 RETURN 
17099 ! 
18000 CHECK_QRY:! SSP#264547
18010 ENTER VAR$
18020 IF MID(VAR$,1,4)<>"osec" THEN EXIT 123
18030 IF LEN(VAR$)<>7 THEN EXIT 123
18032 _FIL_NAM$="ZZPARM"; IF _FIL_NO=0 THEN _FIL_NO=HFN; OPEN (_FIL_NO,ERR=*NEXT)_FIL_NAM$
18033 READ (_FIL_NO,KEY="s"+VAR$(5,3),ERR=*NEXT,DOM=*NEXT)ZZPAR$
18034 READ (_FIL_NO,KEY="o"+VAR$(5,3),ERR=*NEXT,DOM=*NEXT)ZZPAR1$
18036 %ZZPAR1$=STP(MID(ZZPAR1$,5,30)),%ZZPAR$=STP(MID(ZZPAR$,5,30))
18038 CLOSE (_FIL_NO)
18040 EXIT 
18100 QRY_SEC: VAL$="" ! ssp#264547                
18110 PROCESS "QRY_SEC_USER","../ZZG/ZZ.EN",VAL$
18120 IF VAL$="" THEN GOTO *RETURN
18130 _KEY$="osec"+VAL$,ML_OPER$=VAL$
18140 READ (_FIL_NO,KEY=_KEY$)
18150 GOSUB PROCESS_READ
18160 NEXT_ID=_FIRST_FIELD,REFRESH_FLG=1
18170 RETURN 
21000 COPY_FROM:
21010 PROCESS "ZZGMOB.4","../ZZG/ZZ.EN",TF_VALUE$,NEWROLE$; IF MID(TF_VALUE$,1,4)<>"osec" THEN TF_VALUE$="" ! ssp#263763
21015 IF TF_VALUE$<>"" THEN TF_VALUE$(5,3)=ML_OPER$; WRITE (_FIL_NO,KEY="osec"+ML_OPER$)TF_VALUE$
21020 RETURN 
21030 INIT_1:
21040 _ZZP=FFN("ZZPARM"); IF _ZZP<=0 THEN _ZZP=HFN; OPEN (_ZZP)"ZZPARM"
21050 RETURN 
21060 SEL_COPY: OPER$=PAD(OPER$,3," "),REFRESH_FLG=1
21070 READ (_ZZP,KEY="o"+OPER$,DOM=NO_ZZP)A$
21080 OPER_NAME$=A$(5,35)
21085 READ (_ZZP,KEY="osec"+OPER$,DOM=NO_ZZP)A$
21090 RETURN 
21100 NO_ZZP: OPER$="",OPER_NAME$="",NEXT_ID=OPER.CTL; RETURN 
21200 WRAUP: ARG_1$=A$,ARG_2$=ROLE$; RETURN 
56000 REM "191822-Work order to allow sales reps to only see their own        
56002 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56003 REM "222237-Modification to charge house charges by vendor.             
56004 ! "226001-Security by operator - Restrict from PO reprint option      
56005 REM "197952-Streamline processing by user - Chained journal updates     
56006 REM "197952-Streamline processing by user - Chained journal updates     
56008 REM "255876-Appl Security by Op; Restrict access to Last Cost, Avg Cost 
56009 REM "264547-ZZGMOB - add right query in Application Security by operator 
