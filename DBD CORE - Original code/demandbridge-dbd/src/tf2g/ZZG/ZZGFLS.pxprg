0010 ! ZZGFLS - Select DBD file list
0030 ! ************************************************************************
0035 REM "5.7 - 04/15/10 - 16.028333 - crg - SSP# 237322
0037 REM "237322-Framework for all DDF related features and utilities
0040 REM "Copyright 2010 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0049 ! 
0050 ENTER CHANNEL,ERR=*NEXT
0052 IF NUL(%WDX$) THEN MSGBOX "You must be using Windx to access TopForm to maintain the parameters for the image library"; GOTO 0075
0055 ARG_1$=STR(CHANNEL)
0060 PROCESS "ZZGFLS","../ZZG/ZZ.EN",ARG_1$
0065 CHANNEL=NUM(ARG_1$,ERR=*NEXT)
0075 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0154 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; DIM Z[NUM(X3$(60,3))]
0190 RETURN 
0199 ! 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MEMCHN=NUM(ARG_1$,ERR=*NEXT)
0530 IF MEMCHN=0 THEN OPEN (HFN)"*MEMORY*"; MEMCHN=LFO
0570 RETURN 
0599 ! 
0900 ! 900 - Wrapup
0910 WRAPUP:
0950 ARG_1$=STR(MEMCHN)
0970 RETURN 
0999 ! 
1000 REM "Event handler - OnSelect
1005 SELECT_FILE:
1010 READ DATA FROM FILE_GRID.CTL'ROWDATA$ TO IOL=FILE_GRID.CTL'LOADIOLIST$
1020 IF C_SEL$="1" THEN {
1030 WRITE (MEMCHN,KEY=PAD(STP(C_FILENAME$,2),60),ERR=*NEXT)PAD(STP(C_FILENAME$,2),60)
1040  } ELSE {
1050 REMOVE (MEMCHN,KEY=PAD(STP(C_FILENAME$,2),60),ERR=*NEXT)
1060  }
1095 RETURN 
1099 ! 
9999 END 
10000 ! 
10010 REM "Loads given control with the files present in providex.ddf
10020 REM "CTLTYPE$ - indicates type Of control: L - Listbox, D - Dropbox, G - Grid, M - Memory file channel
10025 REM "COL - required for G - Grid type control, indicates column used for the filename in grid
10026 REM "PRESEL - Memory channel containing preselected files for grid display, SELCOL - Grid column containing "selected" indicator
10030 LOAD_FILE_LIST:
10040 ENTER DDF_FILE,CTLTYPE$,COL,ERRMSG$,PRESEL,SELCOL,ERR=*NEXT
10050 IF COL=0 THEN COL=1
10110 DDF_IOL:IOLIST TF_NAME$,PATH$
10120 I=0,K=0
10130 OPEN (HFN)"providex.ddf"; _DDF=LFO
10140 CLEAR_CONTROL:ON POS(CTLTYPE$="LDGM") GOTO ERR_CONTROL,CLEAR_LISTBOX,CLEAR_DROPBOX,CLEAR_GRID,CLEAR_MEM_CHANNEL,ERR_CONTROL
10142 CLEAR_LISTBOX: LIST_BOX LOAD DDF_FILE,""; GOTO CLEAR_DONE
10144 CLEAR_DROPBOX: DROP_BOX LOAD DDF_FILE,""; GOTO CLEAR_DONE
10146 CLEAR_GRID: GRID LOAD DDF_FILE,0,0,""; GOTO CLEAR_DONE
10148 CLEAR_MEM_CHANNEL:IF DDF_FILE THEN CLOSE (DDF_FILE,ERR=*PROCEED) ELSE DDF_FILE=HFN END_IF ; OPEN (DDF_FILE)"*MEMORY*"; GOTO CLEAR_DONE
10150 CLEAR_DONE:
10160 READ (_DDF,KEY="",KNO=1,DOM=*NEXT)
10165 LFL_NEXT_FILE:
10170 K$=KEY(_DDF,KNO=1,END=LFL_END)
10180 IF POS("VIEW:"=K$)<>0 THEN READ (_DDF); GOTO LFL_NEXT_FILE ! Skip View entries in providex.ddf
10190 IF K1$=K$ THEN GOTO LFL_END ELSE K1$=K$
10200 READ (_DDF,KEY=K$,KNO=1,REC=WRK$)IOL=DDF_IOL
10210 IF OBJ_NME$=K$ OR KEC(_DDF,KNO=0)="000000" THEN GOTO LFL_NEXT_FILE
10220 IF POS(WRK.TF_NAME$(1,3)="AR7APJ",3)<>0 THEN {! Check if these files are direct or index files
10222 CHECK_TYPE$=""; FILE_NO=HFN; OPEN (FILE_NO)WRK.TF_NAME$(1,3)+%C$; CHECK_TYPE$=FN%FIN$(FILE_NO,"KEY_SIZE"); CLOSE (FILE_NO)
10224 IF CHECK_TYPE$="0" THEN GOTO LFL_NEXT_FILE ! Keyed direct files will have non-zero primary key length
10226  }
10230 I=I+1; IF WRK.TF_NAME$=DDF_FILE$ THEN K=I
10240 LOAD_CONTROL:ON POS(CTLTYPE$="LDGM") GOTO ERR_CONTROL,LOAD_LISTBOX,LOAD_DROPBOX,LOAD_GRID,LOAD_MEM_CHANNEL,ERR_CONTROL
10244 LOAD_LISTBOX: LIST_BOX LOAD DDF_FILE,0,WRK.TF_NAME$; GOTO LOAD_DONE
10246 LOAD_DROPBOX: DROP_BOX LOAD DDF_FILE,0,WRK.TF_NAME$; GOTO LOAD_DONE
10248 LOAD_GRID: GRID LOAD DDF_FILE,1,0,SEP; GRID WRITE DDF_FILE,COL,I,WRK.TF_NAME$; IF SELCOL<>0 THEN IS_SEL$="0"; GOSUB CHECK_SELECTED; GRID WRITE DDF_FILE,SELCOL,I,IS_SEL$ END_IF ; GOTO LOAD_DONE
10250 LOAD_MEM_CHANNEL:WRITE (DDF_FILE,KEY=MID(WRK.TF_NAME$,1,3))WRK.TF_NAME$; GOTO LOAD_DONE
10255 LOAD_DONE:
10260 GOTO LFL_NEXT_FILE
10270 LFL_END:
10280 CLOSE (_DDF,ERR=*NEXT)
10290 EXIT 
10300 ! 
10310 ERR_CONTROL: ERRMSG$="Error loading file list: Invalid or Unknown control provided: "+CTLTYPE$; GOTO LFL_END
10500 ! 
10505 CHECK_SELECTED:
10510 FIND (PRESEL,KEY=PAD(STP(WRK.TF_NAME$,2),60),DOM=*NEXT); IS_SEL$="1"
10545 RETURN 
10549 ! 
30000 LIST_FILESETS:
30010 ENTER LIST_CONTROL,ERR=*NEXT
30015 OPEN (HFN,ERR=LFS_DONE)"ZC1"+%C$; ZC1=LFO
30019 LFS_NEXT_ZC1:
30020 ZC1K$=KEY(ZC1,END=LFS_DONE)
30025 DROP_BOX LOAD LIST_CONTROL,++ZC1_INDEX,MID(ZC1K$,1,10),ERR=*NEXT
30050 READ (ZC1,KEY=MID(ZC1K$,1,10)+$FF$,ERR=*NEXT) ! Position to retrieve next fileset
30060 GOTO LFS_NEXT_ZC1
30085 LFS_DONE:
30090 CLOSE (ZC1,ERR=*PROCEED); ZC1=0
30095 EXIT 
30099 ! 
30200 SAVE_FILESET:
30210 FILESET_CODE$="",DO_SAVE$="0"; PROCESS "ZZGFLS.1","../ZZG/ZZ.EN",FILESET_CODE$,DO_SAVE$
30220 IF DO_SAVE$<>"1" THEN GOTO SFS_DONE
30240 OPEN (HFN,ERR=SFS_DONE)"ZC1"+%C$; ZC1=LFO
30245 READ (MEMCHN,KEY="",DOM=*NEXT) ! Reset to beginning of file list
30249 SFS_NEXT_ZC1:
30250 FKEY$=KEY(MEMCHN,END=SFS_DONE); READ (MEMCHN,KEY=FKEY$)LOGICAL_FILE$
30260 DIM ZC1$(200); ZC1$(1,10)=FILESET_CODE$,ZC1$(11,30)=LOGICAL_FILE$
30265 WRITE (ZC1,KEY=ZC1$(1,40))ZC1$
30270 GOTO SFS_NEXT_ZC1
30285 SFS_DONE:
30290 CLOSE (ZC1,ERR=*PROCEED); ZC1=0
30295 RETURN 
30299 ! 
30400 RETRIEVE_FILESET:
30410 FILESET_CODE$="",DO_RETRIEVE$="0"; PROCESS "ZZGFLS.2","../ZZG/ZZ.EN",FILESET_CODE$,DO_RETRIEVE$
30420 IF DO_RETRIEVE$<>"1" THEN GOTO RFS_DONE
30430 OPEN (HFN,ERR=RFS_DONE)"ZC1"+%C$; ZC1=LFO
30440 READ (ZC1,KEY=FILESET_CODE$,DOM=*NEXT) ! Position to beginning of file set list
30450 RFS_NEXT_ZC1:
30460 FKEY$=KEY(ZC1,END=RFS_DONE); DIM ZC1$(200); READ (ZC1,KEY=FKEY$)ZC1$
30470 IF MID(FKEY$,1,10)<>FILESET_CODE$ THEN GOTO RFS_DONE
30480 LOGICAL_FILE$=ZC1$(11,30)
30490 WRITE (MEMCHN,KEY=PAD(STP(LOGICAL_FILE$,2),60),ERR=*NEXT)PAD(STP(LOGICAL_FILE$,2),60)
30495 GOTO RFS_NEXT_ZC1
30500 RFS_DONE:
30550 CLOSE (ZC1,ERR=*PROCEED); ZC1=0
30570 ERRMSG$=""; CALL "ZZGFLS;LOAD_FILE_LIST",FILE_GRID.CTL,"G",2,ERRMSG$,MEMCHN,1
30580 IF NOT(NUL(ERRMSG$)) THEN MSGBOX ERRMSG$
30595 RETURN 
30599 ! 
40000 DO_ZC1_UPDATE:! update company specific ZC1 records from the release ZC1 data in tf2z/USR/ZC1
40010 ZC1_SLOT=HFN; OPEN (ZC1_SLOT)"ZC1"; F=ZC1_SLOT
40020 OPEN_ZC1: ZC1C_SLOT=HFN; OPEN (ZC1C_SLOT,ERR=*NEXT)"ZC1"+X3$(9,3); GOTO OPEN_ZC1_DONE
40030 KEYED "ZC1"+X3$(9,3),40,[1:11:30]+[1:1:10],,512; GOTO OPEN_ZC1
40040 OPEN_ZC1_DONE: SELECT ZC1$ FROM (ZC1_SLOT)
40050 FIND (ZC1C_SLOT,KEY=ZC1$(1,40),DOM=UPDATE_ZC1C)ZC1C$
40060 UPDATE_ZC1C:! if here, then record missing or can be overwritten
40070 WRITE (ZC1C_SLOT,KEY=ZC1$(1,40))ZC1$
40080 NEXT RECORD 
40090 CLOSE (ZC1_SLOT); CLOSE (ZC1C_SLOT)
40095 RETURN 
40099 ! 
56000 ! 
56001 REM "237322-Framework for all DDF related features and utilities
