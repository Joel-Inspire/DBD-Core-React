0010 ! Definition of Class: XLParser
0035 REM "5.5 - 09/04/07 - 16.887222 - crg - SSP# 203699
0037 REM "203699-Ability to apply expressions to XML data
0040 REM "Copyright 2007 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0100 DEF CLASS "ZZGPSR"
0110 ! Local:
0120 ! 
0130 LOCAL EXPR_INPUT$
0140 LOCAL NEXT_TOKEN$
0150 LOCAL TOKENIZE
0160 LOCAL OPEN_TOK$
0170 LOCAL CLOSE_TOK$
0180 ! 
0190 ! 
0200 ! Operations:
0210 ! 
0220 FUNCTION GETEXPR(INPUT$)
0230 ENTER INPUT$
0240 LOCAL EXPR,CURREXPR,NEXTEXPR
0250 INPUT$=STP(STP(INPUT$,1,")"),2,"(")
0260 ! PRINT "PARSING: ",INPUT$
0270 EXPR=NEW("ZZGXPR")
0280 CURREXPR=EXPR
0290 ! 
0300 EXPR_INPUT$=INPUT$; TOKENIZE=1
0310 GOSUB NEXT_TOKEN
0320 ! 
0330 WHILE TOKENIZE
0340 ! 
0350 IF OPTYPE=1 THEN {
0360 NEXTEXPR=NEW("ZZGLTL",NEXT_TOKEN$)
0370  }
0380 ! 
0390 IF OPTYPE=-1 THEN {
0400 PARSER=NEW("ZZGPSR")
0410 NEXTEXPR=PARSER'GETEXPR(NEXT_TOKEN$)
0420 DROP OBJECT PARSER
0430  }
0440 ! 
0450 IF OPTYPE=-2 THEN {
0460 EXPR_INPUT$=STP(NEXT_TOKEN$,2,"[")+EXPR_INPUT$
0470 ! READ DATA FROM NEXT_TOKEN$ TO IOL=IOL_ZZGCON,ERR=*NEXT
0480 PARSER=NEW("ZZGPSR")
0490 ! 
0500 ! PRINT "ABOUT TO HIT LEFT CONDITION"
0510 COND_LEFT: COND_LEFT$=""
0520 GOSUB NEXT_TOKEN; COND_LEFT$+=NEXT_TOKEN$; IF TOKENIZE THEN IF COND_LEFT$(LEN(COND_LEFT$),1)<>"=" THEN GOTO *SAME ELSE GOTO *NEXT END_IF ; ELSE GOTO ERR_SYNTAX
0530 COND_LEFT$=STP(COND_LEFT$,1,"="); IF COND_LEFT$(LEN(COND_LEFT$),1)="!" THEN COND_EQUALS=0 ELSE COND_EQUALS=1
0540 LEFTCONDEXPR=PARSER'GETEXPR(STP(COND_LEFT$,1,"!"))
0550 ! 
0560 ! PRINT "ABOUT TO HIT RIGHT CONDITION"
0570 COND_RIGHT: COND_RIGHT$=""
0580 GOSUB NEXT_TOKEN; COND_RIGHT$+=NEXT_TOKEN$; IF TOKENIZE THEN IF COND_RIGHT$(LEN(COND_RIGHT$),1)<>";" THEN GOTO *SAME ELSE GOTO *NEXT END_IF ; ELSE GOTO ERR_SYNTAX
0590 RIGHTCONDEXPR=PARSER'GETEXPR(STP(COND_RIGHT$,1,";"))
0600 ! 
0610 ! PRINT "ABOUT TO HIT TRUE CONDITION"
0620 TRUE_EXPR: TRUE_EXPR$=""
0630 GOSUB NEXT_TOKEN; TRUE_EXPR$+=NEXT_TOKEN$; IF TOKENIZE THEN IF TRUE_EXPR$(LEN(TRUE_EXPR$),1)<>":" THEN GOTO *SAME ELSE GOTO *NEXT END_IF ; ELSE GOTO ERR_SYNTAX
0640 TRUECONDEXPR=PARSER'GETEXPR(STP(TRUE_EXPR$,1,":"))
0650 ! 
0660 ! PRINT "ABOUT TO HIT FALSE CONDITION"
0670 FALSE_EXPR: FALSE_EXPR$=""
0680 GOSUB NEXT_TOKEN; FALSE_EXPR$+=NEXT_TOKEN$; IF TOKENIZE THEN IF FALSE_EXPR$(LEN(FALSE_EXPR$),1)<>"]" THEN GOTO *SAME ELSE GOTO *NEXT END_IF ; ELSE GOTO ERR_SYNTAX
0690 FALSECONDEXPR=PARSER'GETEXPR(STP(FALSE_EXPR$,1,"]"))
0700 ! 
0710 NEXTEXPR=NEW("ZZGCON",LEFTCONDEXPR,RIGHTCONDEXPR,TRUECONDEXPR,FALSECONDEXPR,COND_EQUALS)
0720 DROP OBJECT PARSER
0730  }
0740 ! 
0750 IF OPTYPE=-3 THEN {
0760 STARTVAL=0,LENGTHVAL=0
0770 READ DATA FROM NEXT_TOKEN$ TO IOL=IOL_ZZGSBS,ERR=*NEXT
0780 IF STARTVAL=0 THEN STARTVAL=-1
0790 IF LENGTHVAL=0 THEN LENGTHVAL=-1
0800 NEXTEXPR=NEW("ZZGSBS",STARTVAL,LENGTHVAL)
0810  }
0820 ! 
0830 IF CURREXPR=0 THEN {
0840 EXPR=NEXTEXPR,CURREXPR=NEXTEXPR
0850  } ELSE {
0860 CURREXPR'SIDEEXPR=NEXTEXPR
0870 CURREXPR=NEXTEXPR
0880  }
0890 ! 
0900 GOSUB NEXT_TOKEN
0910 ! 
0920 WEND 
0930 ! 
0940 RETURN EXPR
0950 END DEF
0960 ! 
0970 REM "Gets next token - sets flag TOKENIZE=0 if no more tokens
0980 NEXT_TOKEN:
0990 LOCAL NEXTCHAR,FOUND
1000 NEXTCHAR=1,FOUND=0
1010 IF EXPR_INPUT$="" THEN TOKENIZE=0,NEXT_TOKEN$=""; GOTO *RETURN
1020 ! Search for next operator start position
1030 START_SEARCH:
1040 FOUND=POS(EXPR_INPUT$(NEXTCHAR,1)="([{\=;:"); IF NOT(FOUND) THEN NEXTCHAR++; IF NEXTCHAR<=LEN(EXPR_INPUT$) THEN GOTO *SAME
1050 ! Escaped operator char?
1060 IF FOUND=4 THEN NEXTCHAR+=2; IF NEXTCHAR<=LEN(EXPR_INPUT$) THEN GOTO START_SEARCH
1070 ! Tokens for conditional operator
1080 IF FOUND>4 THEN OPTYPE=-2; NEXT_TOKEN$=EXPR_INPUT$(1,NEXTCHAR); EXPR_INPUT$=MID(EXPR_INPUT$,NEXTCHAR+1); GOTO DONE_NEXT_TOKEN
1090 ! Found an operator?
1100 IF NEXTCHAR=1 THEN GOTO OP_TOKEN
1110 ! 
1120 LIT_TOKEN:
1130 NEXT_TOKEN$=EXPR_INPUT$(1,NEXTCHAR-1); OPTYPE=1; EXPR_INPUT$=EXPR_INPUT$(NEXTCHAR)
1140 NEXT_TOKEN$=SUB(NEXT_TOKEN$,"\",SEP); NEXT_TOKEN$=SUB(NEXT_TOKEN$,SEP+SEP,"\"); NEXT_TOKEN$=STP(NEXT_TOKEN$,3,SEP)
1150 GOTO DONE_NEXT_TOKEN
1160 ! 
1170 OP_TOKEN:
1180 _OP_STACK=NEW("ZZGSTK",SEP)
1190 LOOK_FOR$=MID(OPEN_TOK$,FOUND,1)
1200 CONTINUE_SEARCH:NEXTCHAR++
1210 ON POS(EXPR_INPUT$(NEXTCHAR,1)="([{\)]}",ERR=ERR_SYNTAX) GOTO CONTINUE_SEARCH,PUSH_STACK,PUSH_STACK,PUSH_STACK,DO_ESCAPE,POP_STACK,POP_STACK,POP_STACK
1220 DO_ESCAPE:NEXTCHAR++; GOTO CONTINUE_SEARCH
1230 PUSH_STACK:_OP_STACK'PUSH(EXPR_INPUT$(NEXTCHAR,1)); GOTO CONTINUE_SEARCH
1240 POP_STACK: OP_POP$=_OP_STACK'POP$()
1250 IF NOT(NUL(OP_POP$)) THEN {
1260 IF POS(OP_POP$=OPEN_TOK$)<>POS(EXPR_INPUT$(NEXTCHAR,1)=CLOSE_TOK$) THEN GOTO ERR_SYNTAX ELSE GOTO CONTINUE_SEARCH
1270  }
1280 IF NUL(OP_POP$) THEN {
1290 IF POS(LOOK_FOR$=OPEN_TOK$)<>POS(EXPR_INPUT$(NEXTCHAR,1)=CLOSE_TOK$) THEN {
1300 GOTO ERR_SYNTAX
1310  } ELSE {
1320 ENDFOUND=NEXTCHAR
1330  }
1340  }
1350 OPTYPE=-1*FOUND
1360 NEXT_TOKEN$=EXPR_INPUT$(1,ENDFOUND); EXPR_INPUT$=MID(EXPR_INPUT$,ENDFOUND+1)
1370 DONE_NEXT_TOKEN:
1380 ! PRINT "EXPR|",EXPR_INPUT$,"|NEXT|",NEXT_TOKEN$,"|"
1390 RETURN 
1400 ! 
1410 ERR_SYNTAX:
1420 EXIT 20
1430 ON_CREATE:
1440 OPEN_TOK$="([{"
1450 CLOSE_TOK$=")]}"
1460 RETURN ! 
1470 ON_DELETE:
1480 RETURN 
1490 ! 
1500 IOL_ZZGSBS:IOLIST DUMMY$:[CHR(1)],STARTVAL:[NUM(14,SEP=",")],LENGTHVAL:[NUM(14,SEP="}")] ! "{ STARTVAL , LENGTHVAL }"
9999 END 
56001 REM "203699-Ability to apply expressions to XML data
