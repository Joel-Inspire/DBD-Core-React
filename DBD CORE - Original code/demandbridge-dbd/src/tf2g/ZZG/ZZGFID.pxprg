0010 ! ZZGFID - FID Monitor     
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Jul. 21, 2004 16:58
0030 ! ************************************************************************
0035 REM "5.7 - 09/19/24 - 11.092776 - jvv - SSP# 307503
0037 REM "307503-Exclude background tasks in DBD user license count DBD-494  
0040 REM "Copyright 2024 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 IF TCB(13)=1 THEN BEGIN 
0051 CALLED=0; SETERR 0060; ENTER OPTION$; CALLED=1
0052 IF NUL(%WDX$) THEN MSGBOX MSG("WARN_WINDX"); GOTO 0075
0055 IF NOT(%GUI) THEN CHUI_MODE=1; %GUI=1; PRINT 'SHOW'(0)
0060 PROCESS "ZZGFID","../ZZG/ZZ.EN"
0065 IF CHUI_MODE THEN %GUI=0; PRINT 'SHOW'(1); RUN "ZMENU"
0075 IF CALLED=0 THEN RUN "ZMENU" ELSE EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0154 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; DIM Z[NUM(X3$(60,3))]
0155 Z$="01O FIDLIST 13O ZZPARM "
0156 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
0190 FID_INFO:IOLIST FIDNO$,COMP_CODE$,USER_ID$,IP_ADDRESS$,IP_PORT$,MACHINE_NAME$,PROCESS_ID$,FID_DATE$,FID_TIME$,USER_SLOT$
0195 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+"ZZPARM"+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0395 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB GET_COUNTERS
0550 GOSUB LOAD_LIST
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 IF USED_FIDS<>0 THEN CLOSE (USED_FIDS,ERR=*PROCEED)
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0962 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
0970 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
20100 LOAD_LIST:! load the FID_LIST list view with data
20105 LIST_BOX HIDE FID_LIST.CTL,ERR=*PROCEED; LIST_BOX LOAD FID_LIST.CTL,"",ERR=*PROCEED
20110 REPEAT 
20115 READ (USED_FIDS,END=*BREAK)IOL=FID_INFO
20120 IF NOT(NUL(COMPANY_RESTRICT$)) THEN IF COMPANY_RESTRICT$<>COMP_CODE$ THEN CONTINUE
20125 IF NOT(NUL(USER_RESTRICT$)) THEN IF STP(USER_RESTRICT$)<>STP(USER_ID$) THEN CONTINUE
20130 SLOT$="",SLOT$=STR(ABS(NUM(USER_SLOT$,ERR=*NEXT)))
20140 GOSUB FORMAT_TIME
20145 ROW_COLOR$='_WHITE'+'BLACK'
20165 LIST_BOX LOAD FID_LIST.CTL,0,ROW_COLOR$+DIM(2)+FIDNO$+SEP+ROW_COLOR$+COMP_CODE$+SEP+ROW_COLOR$+SLOT$+SEP+ROW_COLOR$+USER_ID$+SEP+ROW_COLOR$+IP_ADDRESS$+SEP+ROW_COLOR$+PROCESS_ID$+SEP+ROW_COLOR$+FID_DATE$+" "+FMT_TIME$+SEP+ROW_COLOR$+IP_PORT$+SEP+ROW_COLOR$+MACHINE_NAME$+SEP,ERR=*NEXT
20170 UNTIL 0
20175 LIST_BOX SHOW FID_LIST.CTL,ERR=*PROCEED
20195 RETURN 
20199 ! *********************************************
21200 FORMAT_TIME:! given FID_TIME$ return formatted FMT_TIME$
21205 FMT_TIME$=""
21210 FID_TIME=NUM(FID_TIME$,ERR=*RETURN)
21220 FMT_TIME$=DTE(0,FID_TIME:"%hz:%mz %p",ERR=*RETURN)
21295 RETURN 
21299 ! *********************************************************
21300 GET_COUNTERS:! Get information for counters shown on the panel
21304 MASK1$="#,##0"
21305 PVX_LICENSES$=STR(TCB(23):MASK1$)
21310 PVX_USED$=STR(TCB(23)-TCB(24):MASK1$)
21320 TF_LICENSES=0; CALL "TF"+%LIC_COMP$,ERR=*NEXT,TF_LICENSES
21325 TF_LICENSES$=STR(TF_LICENSES:MASK1$)
21330 CALL "ZZGFID;USED_FIDS",USED_FIDS
21335 FIDS_USED=0,FIDS_USED=NUM(FIN(USED_FIDS,"NUMREC",ERR=*NEXT),ERR=*NEXT)
21340 TMP=HFN; OPEN (TMP,ERR=*NEXT)"FIDLIST"
21342 FIDS_AVAILABLE=0,FIDS_AVAILABLE=NUM(FIN(TMP,"NUMREC",ERR=*NEXT),ERR=*NEXT)
21344 CLOSE (TMP,ERR=*NEXT)
21345 FIDS_USED$=STR(FIDS_USED:MASK1$)
21350 FIDS_AVAILABLE$=STR(FIDS_AVAILABLE:MASK1$)
21355 TF_USED=0; CALL "ZZGFID;USED_TF_LICENSES",USED_FIDS,"",TF_USED
21360 TF_USED$=STR(TF_USED:MASK1$)
21390 REFRESH_FLG=1
21395 RETURN 
21399 ! **********************************************
21400 REFRESH:! Refresh the information
21410 CLOSE (USED_FIDS,ERR=*NEXT)
21450 GOSUB GET_COUNTERS
21455 GOSUB LOAD_LIST
21495 RETURN 
21499 ! ******************************************************
30000 USED_FIDS:! called routine will create a memory file and pass back the channel, calling program is responsible for closing
30010 ENTER USED_FIDS
30015 USED_FIDS=HFN; OPEN (USED_FIDS,ERR=UF_DONE)"*memory*"
30020 FID_LIST=HFN; OPEN (FID_LIST)"FIDLIST"
30025 ! **************************************************************
30026 ! NOTE: Very important that after this first read of FID_LIST we
30027 ! Dont' leave without going through the extract at the end
30028 ! of READING_DONE:
30029 ! **************************************************************
30030 SET_PARAM -'XI' ! if we don't detect busys this won't work and this is supposed to be off
30035 READ (FID_LIST,KEY="",DOM=*NEXT)
30040 NEXT_FID: K$=KEY(FID_LIST,END=READING_DONE)
30045 READ (FID_LIST,BSY=FID_BUSY,TIM=0); GOTO NEXT_FID ! If not busy keep looking
30050 FID_BUSY:! we have found an extracted fid, so get the info and add it to used_fids
30055 SET_PARAM 'XI' ! allow dirty reads
30060 READ RECORD (FID_LIST,KEY=K$,DOM=*NEXT)FID_INFO$; WRITE RECORD (USED_FIDS,KEY=K$)FID_INFO$
30065 SET_PARAM -'XI' ! turn off dirty reads
30070 GOTO NEXT_FID
30075 READING_DONE:
30076 ! NOTE: It is very important that this is the last file access to FID_LIST so we retain this extract. If we can't get the record back we will have to call ZZ2PID to get a new FID
30077 CLOSE (FID_LIST,ERR=*PROCEED)
30078 IF %FIDLIST=0 THEN %FIDLIST=FFN("FIDLIST")
30080 EXTRACT RECORD (%FIDLIST,KEY=FID(0),DOM=*NEXT,BSY=FID_BUSY_NOW)FID_INFO$; WRITE RECORD (USED_FIDS,KEY=FID(0))FID_INFO$ ! our info won't generate a busy so add it now AND RE-EXTRACT THE RECORD SO SOMEONE ELSE WON'T GET IT
30085 READ (USED_FIDS,KEY="",DOM=*NEXT) ! Position file at beginning 
30090 UF_DONE:
30095 EXIT 
30096 FID_BUSY_NOW:PERFORM "ZZ2PID"; GOTO READING_DONE
30099 ! ****************************************************************
30100 USED_TF_LICENSES:! Given USED_FIDS channel to list (if 0 will call ZZGFID;USED_FIDS to generate, but will close before leaving) count "unique" logins
30101 ! If IP Address is blank then it is a telnet session and each one counts, if not blank then we count only once for each IP address
30102 ! if COMPANY$ set, we will count only logins for that company
30103 ! if %TFCENTRAL is set we will NOT count if "csi" or "root" is the user  
30105 ENTER USED_FIDS,COMPANY$,TF_LICENSES
30110 IF USED_FIDS=0 THEN CLOSE_USED_FIDS=1; CALL "ZZGFID;USED_FIDS",USED_FIDS
30115 TF_LICENSES=0,DONE=0
30120 REPEAT 
30125 READ (USED_FIDS,END=*BREAK)IOL=FID_INFO
30130 IF NOT(NUL(COMPANY$)) THEN IF COMP_CODE$<>COMPANY$ THEN CONTINUE ! if specific company requested and it doesn't match, then continue to next one
30135 IF %TFCENTRAL THEN IF POS(STP(USER_ID$)+"|"="csi|root|")<>0 THEN CONTINUE ! if TF Central and this is user csi we won't count it                  
30136 IF STP(USER_SLOT$,2)="0" THEN CONTINUE ! Don't count background tasks ssp 307503
30137 USER_SLOT$=SUB(USER_SLOT$,"-","") ! remove minus signs
30140 IF POS("["+USER_SLOT$+"]"=SLOTS_USED$)=0 THEN TF_LICENSES+=1,SLOTS_USED$+="["+USER_SLOT$+"]"
30170 UNTIL DONE
30190 IF CLOSE_USED_FIDS THEN CLOSE (USED_FIDS,ERR=*PROCEED) ELSE READ (USED_FIDS,KEY="",DOM=*PROCEED) ! either close or reset to beginning
30195 EXIT 
30199 ! **************************************************************
56000 REM "296343-Change verbage from 'contact Topform Support!' to 'Contact  
56001 REM "307503-Exclude background tasks in DBD user license count DBD-494  
