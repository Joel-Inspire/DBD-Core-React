0010 ! ZZGMUA - Unit Measure Maintenance
0035 REM "5.7 - 09/11/18 - 10.418055 - jvv - SSP# 303058
0037 REM "303058-Support for Data Replication of UOM's.                      
0040 REM "Copyright 2018 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "ZZGMUA","../ZZG/ZZ.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZZPARM"
0170 _FIL_NO=HFN; OPEN (_FIL_NO,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN)_FILE_NAME$
0185 CHLX=HFN; OPEN (CHLX)"XZU"+%C$ ! SSP 303058
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="ML_UM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 CLOSE (CHLX,ERR=*NEXT) ! SSP 303058
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1015 ML_UM$=PAD(ML_UM$,4,1," ")
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 _KEY$="U/M"+ML_UM$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1280 DIM ZZP$(22); A1=0,A2=0,A3=0,ZZP$(1,7)=_KEY$,ZZP$(20,2)="NN",CB_FIX_IND$="N",CB_SKIP$="N",WMS_DROP$="N" ! SSP#211537
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 IF MID(_KEY$,1,3)<>"U/M" THEN READ (_FIL_NO); GOTO 2040
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); IF MID(_KEY$,1,3)<>"U/M" THEN GOTO 2230 ELSE GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2425 READ (_FIL_NO,KEY="U/M",DOM=*NEXT)
2430 _KEY$=KEY(_FIL_NO,ERR=NO_FIRST); IF MID(_KEY$,1,3)<>"U/M" THEN READ (_FIL_NO); GOTO 2430
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2625 READ (_FIL_NO,KEY="U/M~~~~",DOM=*NEXT)
2630 _KEY$=KEP(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); IF MID(_KEY$,1,3)<>"U/M" THEN GOTO 2630 ELSE GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ (_FIL_NO,KEY=_KEY$)ZZP$,A1,A2,A3
3035 ZZP$=PAD(ZZP$,28)
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 ML_DESC$=ZZP$(8,12),ML_DIV_BY$=STR(A1),CB_FIX_IND$=ZZP$(20,1),ML_NUM_IND_ITEM$=STR(A2),CB_SKIP$=ZZP$(21,1),ML_UM$=ZZP$(4,4),WMS_DROP$=ZZP$(22,1)
3060 CHANGE_FLG=0,REFRESH_FLG=1
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3215 GOTO 3320
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$)ZZP$,A1,A2,A3
3330 DIM A[3]; A[1]=A1,A[2]=A2,A[3]=A3; CALL "UPDZPM;DUPLICATE_XZU",CHLX,ZZP$,A{ALL},"U" ! SSP 303058
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=ZIP_CODE.CTL,_FIRST_FIELD=CITY.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
6025 READ (_FIL_NO,KEY="U/M~~~~",DOM=*NEXT)
6520 DIM A[3]; A[1]=A1,A[2]=A2,A[3]=A3; CALL "UPDZPM;DUPLICATE_XZU",CHLX,ZZP$,A{ALL},"D" ! SSP 303058
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 ZZP$(8,12)=ML_DESC$,A1=NUM(ML_DIV_BY$),ZZP$(20,1)=CB_FIX_IND$,A2=NUM(ML_NUM_IND_ITEM$),ZZP$(21,1)=CB_SKIP$,_KEY$="U/M"+ML_UM$,ZZP$(22,1)=WMS_DROP$
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 ML_DESC$="",ML_DIV_BY$="",CB_FIX_IND$="",ML_NUM_IND_ITEM$="",CB_SKIP$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(6,"N")
15030 IF _ORIG.ZIP_CODE$=_CUR.ZIP_CODE$ OR ZIP_CODE$=_CUR.ZIP_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ZIP_CODE$=ZIP_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ZIP_CODE")+" = "+_CUR.ZIP_CODE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ZIP_CODE")+" = "+_CUR.ZIP_CODE$
15040 IF _ORIG.CITY$=_CUR.CITY$ OR CITY$=_CUR.CITY$ THEN GOTO *NEXT ELSE IF _ORIG.CITY$=CITY$ THEN _CHG2$=_CHG2$+SEP+MSG("CITY")+" = "+_CUR.CITY$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CITY")+" = "+_CUR.CITY$
15050 IF _ORIG.TF_STATE$=_CUR.TF_STATE$ OR TF_STATE$=_CUR.TF_STATE$ THEN GOTO *NEXT ELSE IF _ORIG.TF_STATE$=TF_STATE$ THEN _CHG2$=_CHG2$+SEP+MSG("STATE")+" = "+_CUR.TF_STATE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STATE")+" = "+_CUR.TF_STATE$
15060 IF _ORIG.COUNTY$=_CUR.COUNTY$ OR COUNTY$=_CUR.COUNTY$ THEN GOTO *NEXT ELSE IF _ORIG.COUNTY$=COUNTY$ THEN _CHG2$=_CHG2$+SEP+MSG("COUNTY")+" = "+_CUR.COUNTY$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COUNTY")+" = "+_CUR.COUNTY$
15070 IF _ORIG.AREA_CODE$=_CUR.AREA_CODE$ OR AREA_CODE$=_CUR.AREA_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.AREA_CODE$=AREA_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CONT_A_C")+" = "+_CUR.AREA_CODE$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CONT_A_C")+" = "+_CUR.AREA_CODE$
15080 IF _ORIG.LONG_CITY$=_CUR.LONG_CITY$ OR LONG_CITY$=_CUR.LONG_CITY$ THEN GOTO *NEXT ELSE IF _ORIG.LONG_CITY$=LONG_CITY$ THEN _CHG2$=_CHG2$+SEP+MSG("CONT_LO_C")+" = "+_CUR.LONG_CITY$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CONT_LO_C")+" = "+_CUR.LONG_CITY$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 RETURN 
16990 RETURN 
20000 CHECK_ZIP:! Callable routine, check zip code and if found return city, long city and state. Will check for all 9, then all 5, then 3+YYTOZZ where YY and ZZ are range, then for 3+XX where XX is 00-99. If found then ZIP_FOUND=1 else ZIP_FOUND=0
20010 ENTER ZIP$,ZIP_FOUND,CITY$,TF_STATE$,COUNTY$,AREA_CODE$,LONG_CITY$,ERR=*NEXT
20020 ZIP_FOUND=0; DIM CITY$(16),LONG_CITY$(28),TF_STATE$(2)
20025 DIM ZIP_REC$(76)
20030 ZIP$=PAD(ZIP$,9,1) ! make sure it is long enough
20105 IF POS(MID(%X3$,9,3)="338520",3)<>0 THEN GOTO CHECK_ZIP_DONE ! if 338 or 520 just return
20110 DIM ZIP[100]; Z$="01O ZY1... "; CALL "ZZFLES",%X3$,Y1$,Y0$,Z$,ZIP{ALL},Z0,Z1; ON Z0 GOTO *NEXT,CHECK_ZIP_DONE
20115 IF POS("ZIP S9"=%X4$)>0 THEN READ (ZIP[1],KEY=ZIP$(1,4)+"     ",DOM=FILE_CHECK_DONE)ZIP_REC$; GOTO ZIP_FOUND
20120 READ (ZIP[1],KEY=ZIP$(1,5)+"    ",DOM=*NEXT)ZIP_REC$(1); GOTO ZIP_FOUND
20130 K$=KEY(ZIP[1],END=*NEXT); IF MID(K$,1,3)=MID(ZIP$,1,3) THEN IF MID(K$,4,2)="XX" OR (MID(K$,6,2)="TO" AND MID(ZIP$,4,2)<=MID(K$,4,2) AND MID(ZIP$,4,2)>=MID(K$,8,2)) THEN DIM ZIP_REC$(LEN(ZIP_REC$)); READ (ZIP[1])ZIP_REC$(1); GOTO ZIP_FOUND ELSE READ (ZIP[1]); GOTO *SAME
20140 DIM ZIP_REC$(LEN(ZIP_REC$)); FIND (ZIP[1],DOM=FILE_CHECK_DONE,KEY=ZIP$(1,3)+"XX    ")ZIP_REC$(1); GOTO ZIP_FOUND
20170 ZIP_FOUND:! found zip record, fill out info
20172 ZIP_FOUND=1,CITY$=MID(ZIP_REC$,10,16),TF_STATE$=MID(ZIP_REC$,26,2),COUNTY$=MID(ZIP_REC$,28,12),AREA_CODE$=MID(ZIP_REC$,40,3); IF NUL(MID(ZIP_REC$,43,28)) THEN LONG_CITY$=CITY$ ELSE LONG_CITY$=MID(ZIP_REC$,43,28)
20180 FILE_CHECK_DONE:
20185 CALL "ZZFLES",%X3$,Y1$,Y0$,"END",Z{ALL},0,0
20190 CHECK_ZIP_DONE:
20195 EXIT 
20199 ! 
20200 UPDATE_ZIP:! Use fields to add new zip record
20210 ENTER ZIP_CODE$,CITY$,TF_STATE$,COUNTY$,AREA_CODE$,LONG_CITY$,ERR=*NEXT
20220 DIM ZIP[100]; Z$="01O ZY1... "; CALL "ZZFLES",%X3$,Y1$,Y0$,Z$,ZIP{ALL},Z0,Z1; ON Z0 GOTO *NEXT,UPDATE_ZIP_DONE
20250 DIM ZIP$(76)
20255 ZIP$(1,9)=ZIP_CODE$,ZIP$(10,16)=CITY$,ZIP$(26,2)=TF_STATE$,ZIP$(28,12)=COUNTY$,ZIP$(40,3)=AREA_CODE$; IF NUL(LONG_CITY$) THEN ZIP$(43,28)=CITY$ ELSE ZIP$(43,28)=LONG_CITY$
20260 CALL "ZZDISP","AX",ZIP$(1,9),"ZIP",%X3$,ZIP_CODE$,"",0,0,%X4$
20265 MSGBOX MSG("ZYGMBA_1",STP(ZIP_CODE$),STP(CITY$),TF_STATE$),MSG("ZYGMBA_2"),"?,YESNO",MSG_SEL$
20270 IF MSG_SEL$="YES" THEN WRITE (ZIP[1],KEY=ZIP$(1,9),DOM=*NEXT)ZIP$
20280 FILE_UPDATE_DONE:
20285 CALL "ZZFLES",%X3$,Y1$,Y0$,"END",Z{ALL},0,0
20290 UPDATE_ZIP_DONE:
20295 EXIT 
20299 ! 
56000 ! "194338-Unit of Measure setup screen, ZZGMUA, records do not seem   
56001 ! "       to save properly, problem with check box
56002 REM "197899-WMS Receiving. Dont display all UOM in receiving            
56004 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56005 REM "303058-Support for Data Replication of UOM's.                      
