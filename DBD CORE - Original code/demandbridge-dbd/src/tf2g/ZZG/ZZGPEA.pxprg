0010 ! ZZGPEA - Device Setup
0035 REM "5.7 - 11/23/21 - 16.561929 - crg - SSP# 307384
0037 REM "307384-DBSPT-127145: Expand queue path in Device Setup             
0040 REM "Copyright 2021 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "ZZGPEA","../ZZG/ZZ.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZZ9"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,ERR=OPEN_ERR)_FILE_NAME$
0180 _ZZP=HFN,_FIL_NAME$="ZZPARM"; OPEN (_ZZP,ERR=OPEN_ERR)_FIL_NAME$
0185 DIM S$(20),LNK_REC$(256),LINES$(80,$C4$)
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1,_CUR_KEY$=""
0430 DIM _KEYS$[1:1]; _KEYS$[1]="ML_DEV_NAME$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0515 DIM LNK_REC$(256)
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 _KEY$=ML_DEV_NAME$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1085 GOSUB SEL_DEV_TYPE ! SSP#253565
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1245 DIM A$(380); A$(1,2)=ML_DEV_NAME$
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB ASSIGN_PRG
1440 WRITE (_FIL_NO,KEY=_KEY$)A$
1450 WRITE RECORD (H_LNK,IND=0)PAD(LNK_REC$,256)
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 IF RB_TYPE$="2" THEN ERASE "*dev"+DLM+ML_DEV_NAME$,ERR=*NEXT; GOTO *SAME
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 IF MID(A$,1,2)=_KEY$ THEN READ (_FIL_NO); GOTO 2040
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ (_FIL_NO,KEY=_KEY$)A$
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 EXTRACT (_FIL_NO,KEY=_KEY$)
3060 GOSUB ASSIGN_LIB; GOSUB SEL_PRT_TYPE
3070 RETURN 
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=ML_DEV_NAME.CTL,_FIRST_FIELD=ML_DESC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR"),_MSG_DIRECTORY$=MSG("DIRECTORY"),_MSG_END_OF_FIL$=MSG("END_OF_FIL"),_MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK"),_MSG_MANDATORY$=MSG("MANDATORY"),_MSG_NEXT$=MSG("NEXT"),_MSG_NON_NUMER$=MSG("NON_NUMER"),_MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG"),_MSG_PRECEDING$=MSG("PRECEDING"),_MSG_PREFIX$=MSG("PREFIX"),_MSG_REC_ACCESS$=MSG("REC_ACCESS"),_MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW"),_MSG_REC_LOCKED$=MSG("REC_LOCKED"),_MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1),_MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST"),_MSG_REC_NO_LST$=MSG("REC_NO_LST"),_MSG_REC_REMOVE$=MSG("REC_REMOVE"),_MSG_REC_UPDADD$=MSG("REC_UPDADD"),_MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS"),_MSG_START_FILE$=MSG("START_FILE"),_MSG_UPDATE$=MSG("UPDATE"),_MSG_UPD_OTHER1$=MSG("UPD_OTHER1"),_MSG_UPD_OTHER2$=MSG("UPD_OTHER2"),_MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING"),_MSG_CANNOT_WRITE$=MSG("CANT_WRITE"),_MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN ML_DEV_NAME$=""
13030 ML_DESC$="",RB_TYPE$=""
13034 ML_PRT_TYPE$="",ML_CMD$="",ML_DEV$="",ML_DEV$=""
13036 CB_SAMBA$="N",ML_QUEUE$="",ML_OUTPUT_CMD$="",ML_PRT_TYPE_DESC$=""
13040 DIM LNK_REC$(256)
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1,NEXT_ID=ML_DEV_NAME.CTL
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ASSIGN_LIB:
15010 ML_DEV_NAME$=A$(1,2),ML_DESC$=A$(3,40),RB_TYPE$=A$(43,1); IF STP(RB_TYPE$)="" THEN RB_TYPE$="4"
15020 ML_PRT_TYPE$=A$(44,8),ML_CMD$=A$(173,60),ML_DEV$=A$(233,12); IF STP(ML_DEV$)="" THEN ML_DEV$="tf_generic"
15030 CB_SAMBA$=A$(52,1),ML_QUEUE$=A$(53,60)+MID(A$,245,60),ML_OUTPUT_CMD$=A$(113,60)
15040 RETURN 
15100 ASSIGN_PRG:
15102 A$(1,2)=ML_DEV_NAME$,A$(3,40)=ML_DESC$,A$(43,1)=RB_TYPE$; IF RB_TYPE$="4" THEN A$(43,1)=" "
15104 A$(44,8)=ML_PRT_TYPE$,A$(173,60)=ML_CMD$,A$(233,12)=ML_DEV$
15106 A$(52,1)=CB_SAMBA$,A$(53,60)=MID(ML_QUEUE$,1,60),A$(245,60)=MID(ML_QUEUE$,61),A$(113,60)=ML_OUTPUT_CMD$
15108 RETURN 
16000 SEL_PRT_TYPE: REFRESH_FLG=1,ML_PRT_TYPE_DESC$=""
16005 IF STP(ML_PRT_TYPE$)="" THEN RETURN 
16010 FIND (_ZZP,KEY="ptr"+ML_PRT_TYPE$,DOM=NO_TYPE)TF_DESC$
16020 ML_PRT_TYPE_DESC$=TF_DESC$(12,40)
16030 RETURN 
16040 NO_TYPE: NEXT_ID=ML_PRT_TYPE.CTL,ML_PRT_TYPE$=""; RETURN 
16200 SEL_DEV_TYPE:
16210 A$(1,2)=ML_DEV_NAME$
16230 GOSUB CHECK_LINK_NAME
16240 IF IS_LNK=0 THEN {
16250 MSGBOX A$(1,2)+" "+MSG("NOLINK"),MSG("WARNING"),"!"
16260 ERASE A$(1,2),ERR=*NEXT; GOTO *SAME
16270 IS_LNK=-1
16280  }
16290 IF IS_LNK=-1 THEN SERIAL A$(1,2),ERR=*NEXT
16300 H_LNK=HFN; OPEN (H_LNK,ISZ=256)A$(1,2)
16310 IF IS_LNK=1 THEN {
16320 READ RECORD (H_LNK)LNK_REC$
16330  } ELSE {
16340 LNK_REC$(1,4)=TSK(-1)
16350 LNK_REC$(5,4)="dev]"
16360  }
16370 NEXT_ID=ML_PRT_TYPE.CTL
16380 RETURN 
16500 SEL_CMD:
16505 LNK_REC$(9,60)=ML_CMD$
16510 IF MID(ML_CMD$,1,1)<>"[" THEN GOTO *RETURN
16520 MSGBOX MSG("SLAVE"),MSG("CONFIRMING"),"?,YESNO",OPT$
16530 IF OPT$="YES" THEN LNK_REC$(5,4)="apr]" ELSE LNK_REC$(5,4)="dev]"
16540 RETURN 
17000 CHECK_LINK_NAME:! 17000,10
17010 LNK_FLE=HFN; OPEN (LNK_FLE,ISZ=256,ERR=NOLINK,BSY=LOCK_COLLISION)A$(1,2)
17020 READ RECORD (LNK_FLE,IND=0,ERR=BADLINK)LNK_REC$
17030 IF LEN(LNK_REC$)<>256 THEN GOTO BADLINK
17040 IF POS(LNK_REC$(1,1)+LNK_REC$(5,4)="[lnk]"+"[dev]"+"[apr]",5)=0 THEN GOTO BADLINK
17050 CLOSE (LNK_FLE); IS_LNK=1
17060 GOTO CHECK_LINK_NAME_EXIT
17070 NOLINK:
17080 IF ERR=12 THEN IS_LNK=-1 ELSE IS_LNK=0
17090 GOTO CHECK_LINK_NAME_EXIT
17100 BADLINK:
17110 IS_LNK=0
17120 CHECK_LINK_NAME_EXIT:
17130 CLOSE (LNK_FLE,ERR=*NEXT)
17140 RETURN 
17150 LOCK_COLLISION:
17160 MSGBOX MSG("COLI"),MSG("WARNING"),"!,TIM=5"
17170 NEXT_ID=RB_TYPE.CTL
17180 EXIT 
18000 COMMAND_OPTION: NEXT_ID=BT_WRITE.CTL
18001 IF STP(ML_OUTPUT_CMD$)="" THEN ML_OUTPUT_CMD$=RPT_JOBCARD$,NEXT_ID=BUTTON_3.CTL
18010 XX=POS("file=["=LCS(ML_OUTPUT_CMD$)); IF XX=0 THEN RETURN 
18020 CMD$=ML_OUTPUT_CMD$
18030 XXX=POS("]"=CMD$(XX)); IF XXX=0 THEN RETURN 
18040 NAM$=CMD$(XX,XXX),CMD$(XX,XXX)=DIM(LEN(NAM$)),NAM$=SUB(SUB(NAM$,"[",""),"]",""),NAM$=NAM$(6)
18045 NAM$=EVS(NAM$,ERR=NO_CMD_FILE)
18050 _TMP=HFN; OPEN (_TMP,ERR=NO_CMD_FILE)NAM$
18055 PROCESS "ZZGVIW","../ZZG/ZZ.EN",NAM$,STR(_TMP); CLOSE (_TMP); RETURN 
18058 INIT_CMD: _TMP=NUM(ARG_2$)
18060 READ (_TMP,END=END_FILES)CM$; IF CM$=$0D$ THEN GOTO 18060
18070 CMD$=CMD$+CM$+SEP
18080 GOTO 18060
18090 END_FILES:
18100 REFRESH_FLG=1; RETURN 
18110 RETURN 
18120 NO_CMD_FILE:
18130 MSGBOX MSG("EIGBAA_2")+SEP+SEP+MSG("WISH")+" Create",MSG("WARNING"),"?,YESNO",OPT$; IF OPT$="NO" THEN RETURN 
18140 SERIAL NAM$
18142 XX=HFN; OPEN (XX)NAM$; ML_OUTPUT_CMD$="file=["+QUO+PTH(XX)+QUO+"]",REFRESH_FLG=1; CLOSE (XX)
18150 GOTO 18050
18200 WRITE_CMD:
18210 CLOSE (_TMP); OPEN PURGE (_TMP)ARG_1$
18230 LOOP:
18240 XX=POS(SEP=CMD$); IF XX=0 THEN VAR$=CMD$; WRITE (_TMP)VAR$,CMD_STR$="E"; EXIT ELSE VAR$=CMD$(1,XX-1),CMD$=CMD$(XX+1)
18250 WRITE (_TMP)VAR$
18260 GOTO LOOP
56000 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56001 REM "253565-Changing driver on printer setup in GUI did not seem to     
56002 REM "307384-DBSPT-127145: Expand queue path in Device Setup             
