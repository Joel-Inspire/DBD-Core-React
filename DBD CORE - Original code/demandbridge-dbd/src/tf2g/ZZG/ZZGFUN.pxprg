0010 ! ZZGFUN - Job Notes Library Functions
0035 REM "5.7 - 07/27/16 - 9.078611 - dmm - SSP# 285248
0037 REM "285248-Job note entered for order, doesn't display in graphical    
0040 REM "Copyright 2016 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 ! %IL_CODES will be global channel to memory file, key will be code, record will be code in 1st string, description in second string, index will correspond to order loaded in drop boxes, etc. 
0051 ! In general images regularly scanned are in the range 00-99 and images generated automatically by TopForm are in A0 and above
0799 ! *******************************************************************
0999 ! *********************************************************************
1300 ADD_NOTE:! ^100 CALL: given file channel of JT0, Optional NOTE_TYPE,TOPFORM_REF_1,TOPFORM_REF_2, and NOTE_PATH, create new IL1 record (returning NOTE_KEY$) with CREATED_BY set to operator from %X3$, CREATED_ON, and CREATED_AT set to current date and time -- If NOTE_PATH = ~SCAN~ + desired_file_name  then scan in image, if ~CANCEL~ is returned path then don't write out
1304 LOCAL JT0$
1305 ENTER JT0_CHANNEL,NOTE_KEY$,REF_TYPE$,NOTE_REF$,CREATED_ON$,CREATED_AT$,INVOLVES$,NOTES_DATA$,ERR=*NEXT
1310 DIM JT0$:IOL(JT0_CHANNEL)
1315 JT0.NOTE_REF$=PAD(NOTE_REF$,1)
1316 JT0.REF_TYPE$=PAD(REF_TYPE$,1),JT0.NOTE_REF$=PAD(NOTE_REF$,9)
1317 JT0.CREATED_ON$=DTE(JUL(0,0,0):"YYYYMMDD"),JT0.CREATED_ON$=CHR(NUM(JT0.CREATED_ON$(1,3))-125)+JT0.CREATED_ON$(4)
1318 JT0.CREATED_AT$=DTE(0:"%Hz:%mz:%sz")
1319 JT0.CREATED_BY$=PAD(MID(%X3$,40,3),3); IF NUL(JT0.CREATED_BY$) THEN JT0.CREATED_BY$=PAD(WHO,3) ! Use TopForm operator if known, else use o/s login info
1320 JT0.INVOLVES$=INVOLVES$ ! D - Distributor, V - Vendor, C - Customer
1335 JT0.UNUSED_1$=DIM(512)
1336 JT0.TF_UNUSED$=DIM(5)
1340 IF NUL(NOTES_DATA$) THEN JT0.NOTES$=DIM(1600) ELSE JT0.NOTES$=MID(NOTES_DATA$,1,1600) ! 260047
1375 CALL "ZZGFUN;SET_NOTE_KEY",JT0_CHANNEL,JT0.NOTE_KEY$; WRITE (JT0_CHANNEL,KEY=JT0.NOTE_KEY$,DOM=*SAME,REC=JT0$)
1380 NOTE_KEY$=JT0.NOTE_KEY$; %NOTE_KEY$=JT0.NOTE_KEY$
1390 ADD_NOTE_EXIT:
1395 EXIT 
1399 ! *******************************************************
1400 SET_NOTE_KEY:! Given the JT0_CHANNEL, return NOTE_KEY
1405 ENTER JT0_CHANNEL,NOTE_KEY$
1410 LOCAL PREV_ADDR$
1420 PREV_ADDR$=KEL(JT0_CHANNEL,KNO=0,END=*PROCEED); IF PREV_ADDR$="" THEN NOTE_KEY$=DIM(10,"0") ELSE NOTE_KEY$=STR(NUM(PREV_ADDR$)+1:DIM(10,"0"))
1495 EXIT 
1499 ! ******************************************************
1500 VIEW_NOTE:! Given NOTE_PATH$, TEMP_PATH$ then copy to TEMP_PATH$ and view it - if TEMP_PATH$ is null then read parameters to get
1510 ENTER NOTE_PATH$,TEMP_PATH$,ERR=*NEXT
1525 IF MID(NOTE_PATH$,1,1)=">" THEN MSGBOX MSG("ZZGFUN_09",STP(MID(NOTE_PATH$,2))),MSG("MB_ATTN"),"INFO"; GOTO VIEW_NOTE_END ! If NOTE_PATH starts with ">" it is not a file name but a comment
1535 IF NUL(%IL_TEMP_DIR$) THEN CALL "ZZGFUN;BUILD_TEMP_DIR"
1540 IF NUL(TEMP_PATH$) THEN TEMP_PATH$=%IL_TEMP_DIR$
1545 FILE_NAME$=MID(NOTE_PATH$,MSK(NOTE_PATH$,"[^/\\]*$")),TEMP_FILE$=%WDX$+TEMP_PATH$+"\"+FILE_NAME$
1580 CALL "ZZGFUN;TRANSFER_FILE",ERR=*NEXT,NOTE_PATH$,TEMP_FILE$
1585 SYSTEM_HELP SUB(TEMP_FILE$,%WDX$,""),ERR=*NEXT
1590 VIEW_NOTE_END:
1595 EXIT 
1599 ! ********************************************************
1600 TRANSFER_FILE:! Transfer NOTE_SRC$ to NOTE_DEST$
1605 ENTER NOTE_SRC$,NOTE_DEST$
1606 SV_MSGLIB$=MSG(*); MESSAGE_LIB %FLMAINT_MSG$
1609 IF UCS(MID(NOTE_SRC$,1,5))="[WDX]" THEN ATTEMPTS=30,SECS=3 ELSE ATTEMPTS=2,SECS=5 ! Try ATTEMPTS times, SECS apart until we give error on open to handle case where operating system returns too early
1610 OPEN_NOTE:IF NUL(NOTE_SRC$) THEN MSGBOX MSG("ZZGFUN_00"),MSG("MB_ATTN"),"!"; GOTO TRANSFER_FILE_END ELSE IMG_SRC=HFN; OPEN INPUT (IMG_SRC,ISZ=8000,ERR=NOTE_FILE_ERR)NOTE_SRC$
1615 ! Determine if BIG_FILE, in which case we will give a progress bar or not, we will not determine the exact file size, only if it is bigger or smaller than about 100K bytes (+/- 10000 bytes)
1620 BIG_FILE=0; READ (IMG_SRC,IND=5,ERR=*NEXT); BIG_FILE=1
1625 ! Get name of the actual file with preceding directories
1630 IF BIG_FILE THEN PRINT 'DIALOGUE'(30,10,35,5,MSG("ZZGFUN_02",NOTE_SRC$),'CS'+'_WHITE'+'BLACK'),'SF',@(1,0),'CS',MSG("ZZGFUN_03"); CALL "$CTL-10;PB_CREATE"; WAIT 1
1635 ERASE NOTE_DEST$,ERR=*PROCEED; SERIAL NOTE_DEST$,ERR=*NEXT; GOTO OPEN_DEST
1636 IF ERR=12 AND UCS(MID(NOTE_DEST$,1,5))<>"[WDX]" THEN DEST_DIR$=MID(NOTE_DEST$,1,POS(DLM=NOTE_DEST$,1,POS(DLM=NOTE_DEST$,1,0))); INVOKE "mkdir -p "+DEST_DIR$+" >/dev/null"; SERIAL NOTE_DEST$,ERR=*NEXT ! try to create needed directories
1640 OPEN_DEST: IMG_DEST=HFN; OPEN PURGE (IMG_DEST,ISZ=1,ERR=*NEXT)NOTE_DEST$; GOTO 1642
1641 OPEN (IMG_DEST,ISZ=1,ERR=FINISH_TRANSFER)NOTE_DEST$
1645 COPY_DONE=0,VALUE=0,COPY_INDEX=0
1650 IF BIG_FILE THEN REPEAT ; READ RECORD (IMG_SRC,IND=COPY_INDEX++,END=*BREAK)IMG$; VALUE+=5; CALL "$CTL-10;PB_VALUE",VALUE; WRITE RECORD (IMG_DEST,SIZ=LEN(IMG$))IMG$; UNTIL COPY_DONE ELSE REPEAT ; READ RECORD (IMG_SRC,IND=COPY_INDEX++,END=*BREAK)IMG$; WRITE RECORD (IMG_DEST,SIZ=LEN(IMG$))IMG$; UNTIL COPY_DONE
1655 FINISH_TRANSFER:CLOSE (IMG_DEST); CLOSE (IMG_SRC)
1685 TRANSFER_FILE_END:
1686 IF BIG_FILE THEN CALL "$CTL-10;PB_DEL",ERR=*PROCEED; PRINT (0,ERR=*PROCEED)'POP',
1687 MESSAGE_LIB SV_MSGLIB$
1690 EXIT 
1697 NOTE_FILE_ERR:IF --ATTEMPTS>0 THEN WAIT SECS; GOTO OPEN_NOTE ELSE MSGBOX MSG("ZZGFUN_01",STR(ERR),NOTE_SRC$,"source"),MSG("MB_ATTN"),"!"; GOTO TRANSFER_FILE_END
1698 TEMP_FILE_ERR: MSGBOX MSG("ZZGFUN_01",STR(ERR),NOTE_DEST$,"destination"),MSG("MB_ATTN"),"!"; GOTO TRANSFER_FILE_END
1699 ! ************************************************************
1700 VIEW_NOTE_KEY:! Given image_key, get the image record and use VIEW_NOTE to display
1710 ENTER NOTE_KEY$,ERR=*NEXT
1715 CALL "ZZCOMP","","","",X3$,X4$,"",-1,0,0; DIM Z[NUM(X3$(60,3))]
1720 Z$="01O JT0... "; CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
1730 FIND (Z[1],KEY=NOTE_KEY$,DOM=MISSING_NOTE_KEY,REC=JT0$)
1750 CALL "ZZGFUN;VIEW_NOTE",JT0.NOTE_PATH$,""
1790 VIEW_NOTE_KEY_END:CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
1795 EXIT 
1797 MISSING_NOTE_KEY: MSGBOX MSG("ZZGFUN_04",NOTE_KEY$),MSG("MB_ATTN"),"!"; GOTO VIEW_NOTE_KEY_END
1799 ! ****************************************************
1800 FIND_NOTE:! Given NOTE_TYPE$ or blank, find image files, return a path in image_path$
1805 IF NOT(%IL_CODES) THEN PERFORM "ZZGFUN;BUILD_DOC_LIST"
1810 ENTER NOTE_TYPE$,NOTE_PATH$,ERR=*NEXT
1815 NOTE_PATH$=""
1820 FIND (%IL_CODES,KEY=NOTE_TYPE$,DOM=*NEXT,ERR=*NEXT)*,TF_DESC$,DFLT_PATH$
1825 IF NUL(NOTE_TYPE$) THEN GFB_TITLE$=MSG("ZZGFUN_07") ELSE TF_DESC$=STP(TF_DESC$),DFLT_PATH$=STP(DFLT_PATH$),GFB_TITLE$=MSG("ZZGFUN_08",TF_DESC$)
1830 IF NUL(DFLT_PATH$) THEN DFLT_PATH$=LWD
1835 SV_MSGLIB$=MSG(*); MESSAGE_LIB %FLMAINT_MSG$
1837 ! build file types list, stored in Message Library, with format of 'IL_FTYPE'+ message # ('00'-'99'). '99' is reserved for the All files options, if there,all files option will be available, if not, then no all files option
1838 MSG_INDEX=-1,MSG_KEY$="IL_FTYPE"+STR(++MSG_INDEX:"00"),FILE_TYPES$=""
1840 WHILE POS(MSG_KEY$=MSG(MSG_KEY$))<>1
1845 FILE_TYPES$+=MSG(MSG_KEY$)+"~",MSG_KEY$="IL_FTYPE"+STR(++MSG_INDEX:"00")
1850 WEND 
1855 IF POS("IL_FTYPE99"=MSG("IL_FTYPE99"))<>1 THEN FILE_TYPES$+=MSG("IL_FTYPE99")+"~" ! Add all files option if allowed
1870 MESSAGE_LIB SV_MSGLIB$
1880 GET_FILE_BOX READ NOTE_PATH$,DFLT_PATH$,GFB_TITLE$,FILE_TYPES$
1890 FIND_NOTE_END:
1895 EXIT 
1899 ! ***************************************************
2000 GET_RELATED_NOTES:! Given: SEARCH_TYPE, and REF, return RESULT as an open in memory file of related images. key is SEQ + "H" for header or "D" for detail. HEADER is NOTE_TYPE$,NOTE_DESC$. Detail is IL1$ record
2005 ! OPTION$ S=silent mode - don't show progress
2010 ENTER SEARCH_TYPE$,SEARCH_REF$,OPTION$,RESULT
2011 ! testcode SEARCH_TYPE$="AR_INVOICE",SEARCH_REF$="00001000000000002 ",OPTION$="S"
2015 CALL "ZZCOMP","","","",X3$,X4$,"",-1,0,0; DIM Z[NUM(X3$(60,3))]
2020 RESULT=HFN; OPEN (RESULT)"*memory*" ! Calling program is responsible to close
2025 IF POS("S"=OPTION$) THEN SILENT_MODE=1 ELSE SILENT_MODE=0
2050 IF NOT(SILENT_MODE) THEN PRINT (0,ERR=*NEXT)'DIALOGUE'(30,10,35,5,MSG("ZZGFUN_10"),'CS'+'_WHITE'+'BLACK'),'SF',@(1,0),'CS',MSG("ZZGFUN_11"),; POP_WINDOW=1
2100 PERFORM PGN+";GRI_"+SEARCH_TYPE$,ERR=*NEXT ! call the custom routines to get the images
2150 FINISH_GET_RELATED_NOTES:
2155 IF POP_WINDOW THEN PRINT (0,ERR=*PROCEED)'POP',
2160 IF CLOSE_FILES THEN CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
2185 EXIT ! GET_RELATED_NOTES
2189 ! ******************************************************
2195 OPEN_GRI_FILES: Z$=Z$+"99O JT0... "; CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; IL1_CHAN=Z[99]; CLOSE_FILES=1; RETURN 
2199 ! ******************************************************
2200 GET_REF:! Given IL1$ record return TF_REF$ with human readable Reference string
2210 ENTER IL1$,TF_REF$
2215 TF_REF$=""
2220 NOTE_TYPE$=MID(IL1$,6,2)
2250 SWITCH NOTE_TYPE$
2252 CASE "00"; TF_REF$=MSG("GR_RFQ")+FN%ZZDISP$(MID(IL1$,8,8),"O/P")+DIM(5)+MSG("GR_VEND")+FN%ZZDISP$(MID(IL1$,213,10),"A/P")+DIM(5)+MSG("GR_QUOTE")+MID(IL1$,223,10); BREAK
2254 CASE "01"; IF NOT(NUL(MID(IL1$,8,9))) THEN TF_REF$=MSG("GR_PO")+FN%ZZDISP$(MID(IL1$,8,9),"P/O")+DIM(5) ELSE TF_REF$="" END_IF ; TF_REF$+=MSG("GR_VEND")+FN%ZZDISP$(MID(IL1$,213,10),"A/P")+DIM(5)+MSG("GR_INV")+MID(IL1$,223,10); BREAK
2256 CASE "02"; TF_REF$=MSG("GR_PO")+FN%ZZDISP$(MID(IL1$,8,9),"P/O"); BREAK
2258 CASE "03"; TF_REF$=MSG("GR_PO")+FN%ZZDISP$(MID(IL1$,8,9),"P/O"); BREAK
2260 CASE "04"; TF_REF$=MSG("GR_ORDER")+FN%ZZDISP$(MID(IL1$,8,8),"O/P"); BREAK
2262 CASE "05"; TF_REF$=MSG("GR_CUST")+FN%ZZDISP$(MID(IL1$,213,10),"A/R")+DIM(5)+MSG("GR_CHECK")+MID(IL1$,223,8); BREAK
2264 CASE "06"; TF_REF$=MSG("GR_CUST")+FN%ZZDISP$(MID(IL1$,8,10),"A/R"); BREAK
2266 CASE "07"; TF_REF$=MSG("GR_PO")+FN%ZZDISP$(MID(IL1$,8,9),"P/O"); IF NOT(NUL(MID(IL1$,213,20))) THEN TMP$=STP(MID(IL1$,213,20),0); IF LEN(TMP$)<=10 THEN TF_REF$=TF_REF$+DIM(5)+MSG("GR_ITEM")+TMP$ ELSE TF_REF$=TF_REF$+DIM(5)+MSG("GR_CUST")+FN%ZZDISP$(TMP$(1,10),"A/R")+DIM(5)+MSG("GR_ITEM")+TMP$(11); END_IF ; END_IF ; BREAK
2268 CASE "08"; TF_REF$=MSG("GR_PO")+FN%ZZDISP$(MID(IL1$,8,9),"P/O"); IF NOT(NUL(MID(IL1$,213,20))) THEN TMP$=STP(MID(IL1$,213,20),0); IF LEN(TMP$)<=10 THEN TF_REF$=TF_REF$+DIM(5)+MSG("GR_ITEM")+TMP$ ELSE TF_REF$=TF_REF$+DIM(5)+MSG("GR_CUST")+FN%ZZDISP$(TMP$(1,10),"A/R")+DIM(5)+MSG("GR_ITEM")+TMP$(11); END_IF ; END_IF ; BREAK
2270 CASE "09"; TF_REF$=""; IF NOT(NUL(MID(IL1$,213,20))) THEN TMP$=STP(MID(IL1$,213,20),0); IF LEN(TMP$)<=10 THEN TF_REF$=TF_REF$+DIM(5)+MSG("GR_ITEM")+TMP$ ELSE TF_REF$=TF_REF$+DIM(5)+MSG("GR_CUST")+FN%ZZDISP$(TMP$(1,10),"A/R")+DIM(5)+MSG("GR_ITEM")+TMP$(11); END_IF ; END_IF ; BREAK
2272 CASE "10"; TF_REF$=MSG("GR_CUST")+FN%ZZDISP$(MID(IL1$,8,10),"A/R"); BREAK
2274 CASE "11"; TF_REF$=MSG("GR_VEND")+FN%ZZDISP$(MID(IL1$,8,10),"A/P"); BREAK
2276 CASE "12"; TF_REF$=MSG("GR_ORDER")+FN%ZZDISP$(MID(IL1$,8,8),"O/P"); BREAK
2278 CASE "13"; TF_REF$=MSG("GR_CUSTPO")+STP(FN%ZZDISP$(MID(IL1$,213,10),"A/R"))+"-"+STP(MID(IL1$,223,15)); BREAK
2325 ! TopForm Generated images
2330 CASE "A0"; TF_REF$=MSG("GR_CUST")+FN%ZZDISP$(MID(IL1$,213,10),"A/R")+DIM(5)+MSG("GR_ARINV")+FN%ZZDISP$(MID(IL1$,223,8),"AR6"); BREAK
2332 CASE "A1"; TF_REF$=MSG("GR_ORDER")+FN%ZZDISP$(MID(IL1$,8,8),"O/P"); BREAK
2334 CASE "A2"; TF_REF$=MSG("GR_PO")+FN%ZZDISP$(MID(IL1$,8,9),"P/O")+DIM(5)+MSG("GR_VEND")+FN%ZZDISP$(MID(IL1$,213,10),"A/P"); BREAK
2336 CASE "A3"; TF_REF$=MSG("GR_CUST")+FN%ZZDISP$(MID(IL1$,8,10),"A/R")+DIM(5)+MSG("GR_ITEM")+MID(IL1$,223,10); BREAK
2338 CASE "A4"; TF_REF$=MSG("GR_RFQ")+FN%ZZDISP$(MID(IL1$,8,8),"O/P")+DIM(5)+MSG("GR_VEND")+FN%ZZDISP$(MID(IL1$,213,10),"A/P"); BREAK
2340 CASE "A5"; TF_REF$=MSG("GR_RFQ")+FN%ZZDISP$(MID(IL1$,8,8),"O/P")+DIM(5)+MSG("GR_CUST")+FN%ZZDISP$(MID(IL1$,213,10),"A/R"); BREAK
2342 CASE "A6"; TF_REF$=MSG("GR_CUST")+FN%ZZDISP$(MID(IL1$,8,10),"A/R"); BREAK
2344 CASE "A7"; TF_REF$=MSG("GR_ORDER")+FN%ZZDISP$(MID(IL1$,8,8),"O/P"); BREAK
2346 CASE "A8"; TF_REF$=MSG("GR_CHECK")+MID(IL1$,8,6)+DIM(5)+MSG("GR_VEND")+FN%ZZDISP$(MID(IL1$,223,10),"A/P"); BREAK
2348 CASE "A9"; TF_REF$=MSG("GR_ORDER")+FN%ZZDISP$(MID(IL1$,213,8),"O/P")+DIM(5)+MSG("GR_LINE")+MID(IL1$,26,3); BREAK
2400 ! Reports
2402 CASE "R0","R1","R2","R3","R4","R5","R6","R7","R8","R9","RB"; TF_REF$=MSG("GR_AUDIT")+MID(IL1$,8,4)+"."+MID(IL1$,12,2)+DIM(5)+MSG("GR_DATE")+TBL(NUL(MID(IL1$,213,6)),FN%PRINT_DATETIME$(FN%GET_DATETIME(MID(IL1$,213,6),0),"%Mz-%Dz-%Y"),""); BREAK
2440 DEFAULT ; TF_REF$=STP(MID(IL1$,8,10))+" "+STP(MID(IL1$,213,20))
2445 END SWITCH ! NOTE_TYPE$@2250
2495 EXIT ! GET_REF
2499 ! **********************************************
2500 ADD_TO_RESULT:! CALL with NOTE_TYPE$,ADD_HEADER$,TF_REF_1$,TF_REF_2$,IL1_CHAN,RESULT will add header record and then any images found matching TF_REF_1$ followed by those matching TF_REF_2$. ADD_HEADER$ is Y to add header record, any other value means no - needed to allow multiple calls for same type record, use Y on first one, N afterwards
2501 ! if $00$ in either TF_REF_1$ or TF_REF_2$ then it is assumed to split into a start and end (inclusive) range, otherwise on the same value will be used for both
2505 ENTER NOTE_TYPE$,ADD_HEADER$,TF_REF_1$,TF_REF_2$,IL1_CHAN,RESULT,ERR=ADD_TO_RESULT_END
2507 TMP=POS($00$=TF_REF_1$); IF TMP THEN TF_REF_1_START$=MID(TF_REF_1$,1,TMP-1),TF_REF_1_END$=MID(TF_REF_1$,TMP+1) ELSE TF_REF_1_START$=TF_REF_1$,TF_REF_1_END$=TF_REF_1$
2509 TMP=POS($00$=TF_REF_2$); IF TMP THEN TF_REF_2_START$=MID(TF_REF_2$,1,TMP-1),TF_REF_2_END$=MID(TF_REF_2$,TMP+1) ELSE TF_REF_2_START$=TF_REF_2$,TF_REF_2_END$=TF_REF_2$
2515 IF NOT(%IL_CODES) THEN PERFORM "ZZGFUN;BUILD_DOC_LIST"
2518 SEQ=0,SEQ$=KEL(RESULT,ERR=*NEXT),SEQ$=MID(SEQ$,1,LEN(SEQ$)-1),SEQ=NUM(SEQ$,ERR=*NEXT)+1 ! set seq based on last key currently in file
2519 IF ADD_HEADER$="Y" THEN {
2520 TF_DESC$="No Description"; FIND (%IL_CODES,KEY=NOTE_TYPE$,DOM=*NEXT)*,TF_DESC$
2525 WRITE (RESULT,KEY=STR(SEQ++:"000")+"H",DOM=*SAME)NOTE_TYPE$,TF_DESC$ ! write header record whether we find any or not
2529  }
2530 IF NOT(NUL(TF_REF_1_START$)) OR NOT(NUL(TF_REF_1_END$)) THEN {
2535 DONE=0; READ (IL1_CHAN,KNO=2,KEY=NOTE_TYPE$+TF_REF_1_START$,DOM=*NEXT)
2540 REPEAT 
2545 IL1_KEY$=KEY(IL1_CHAN,KNO=2,END=*BREAK); READ (IL1_CHAN,KNO=2,KEY=IL1_KEY$,DOM=*SAME)IL1$; IF MID(IL1_KEY$,1,2)=NOTE_TYPE$ AND MID(IL1_KEY$,3,LEN(TF_REF_1_START$))>=TF_REF_1_START$ AND MID(IL1_KEY$,3,LEN(TF_REF_1_END$))<=TF_REF_1_END$ THEN WRITE (RESULT,KEY=STR(SEQ++:"000")+"D")IL1$ ELSE DONE=1
2550 UNTIL DONE
2555  }
2560 IF NOT(NUL(TF_REF_2_START$)) OR NOT(NUL(TF_REF_2_END$)) THEN {
2565 DONE=0; READ (IL1_CHAN,KNO=3,KEY=NOTE_TYPE$+TF_REF_2_START$,DOM=*NEXT)
2570 REPEAT 
2575 IL1_KEY$=KEY(IL1_CHAN,KNO=3,END=*BREAK); READ (IL1_CHAN,KNO=3,KEY=IL1_KEY$,DOM=*SAME)IL1$; IF MID(IL1_KEY$,1,2)=NOTE_TYPE$ AND MID(IL1_KEY$,3,LEN(TF_REF_2_START$))>=TF_REF_2_START$ AND MID(IL1_KEY$,3,LEN(TF_REF_2_END$))<=TF_REF_2_END$ THEN WRITE (RESULT,KEY=STR(SEQ++:"000")+"D")IL1$ ELSE DONE=1
2580 UNTIL DONE
2585  }
2590 ADD_TO_RESULT_END:
2595 EXIT 
2599 ! ***************************************************
2600 ADD_MULTIPLE_ITEMS:! Call given NOTE_TYPE$,ADD_HEADER$,TF_LIST$,LIST_SIZE,TF_REF_NUM,IL1_CHAN and RESULT, call ADD_TO_RESULT for each item on the list, TF_REF_NUM determines ref# 1 or 2.ADD_HEADER$=Y means a header if no items on list, else nothing is added
2610 ENTER NOTE_TYPE$,ADD_HEADER$,TF_LIST$,LIST_SIZE,TF_REF_NUM,IL1_CHAN,RESULT,ERR=ADD_MULTIPLE_ITEMS_END
2615 LIST_COUNT=INT(LEN(TF_LIST$)/LIST_SIZE,ERR=ADD_MULTIPLE_ITEMS_END)
2620 IF LIST_COUNT=0 THEN {
2625 IF ADD_HEADER$="Y" THEN CALL "ZZGFUN;ADD_TO_RESULT",NOTE_TYPE$,"Y","","",IL1_CHAN,RESULT; ADD_HEADER$="N"
2630 GOTO ADD_MULTIPLE_ITEMS_END
2635  }
2640 FOR LIST_INDEX=1 TO LIST_COUNT
2645 LIST_VAL$=MID(TF_LIST$,(LIST_INDEX-1)*LIST_SIZE+1,LIST_SIZE)
2650 IF TF_REF_NUM=1 THEN CALL "ZZGFUN;ADD_TO_RESULT",NOTE_TYPE$,ADD_HEADER$,LIST_VAL$,"",IL1_CHAN,RESULT ELSE CALL "ZZGFUN;ADD_TO_RESULT",NOTE_TYPE$,ADD_HEADER$,"",LIST_VAL$,IL1_CHAN,RESULT
2655 ADD_HEADER$="N"
2660 NEXT LIST_INDEX
2690 ADD_MULTIPLE_ITEMS_END:
2695 EXIT 
2699 ! ***************************************************
2700 SCAN_NOTE:! Given NOTE_TYPE$ and NOTE_PATH$, scan in image to TEMP_DIR, copy correct dir based on NOTE_TYPE$. NOTE_PATH$ will be ~SCAN~ + desired file name. If file name is blank make up standard name to go into data directory
2710 ENTER NOTE_TYPE$,NOTE_PATH$
2725 IF NUL(NOTE_PATH$) THEN NOTE_PATH$="SCAN_TEMP_"+FID(0)
2730 NOTE_FILE$=SUB(SUB(NOTE_PATH$,"~SCAN~","")," ","")
2745 NOTE_PATH$=NOTE_FILE$; CALL "ZZGFUN;BUILD_NOTE_PATH",ERR=*NEXT,NOTE_TYPE$,NOTE_PATH$,NOTE_FILE_NAME$,NOTE_DESC$,NOTE_DIR$,NOTE_FORMAT$,SCANNER_OPTIONS$
2750 IF NUL(%IL_TEMP_DIR$) THEN CALL "ZZGFUN;BUILD_TEMP_DIR"
2795 IF NUL(%IL_SCAN_LOCATION$) THEN CALL "ZZGFUN;GET_SOFTWARE_LOCATION",CANCEL_IT; IF CANCEL_IT THEN GOTO 2895
2800 SCAN_FILE$="[wdx]"+%IL_TEMP_DIR$+"\"+NOTE_FILE_NAME$
2805 ERASE SCAN_FILE$,ERR=*NEXT
2809 SCAN_CMD$=SUB(STP(%IL_PARM$(135,80)),"[TFSTD]",QUO+QUO+%IL_SCAN_LOCATION$+QUO+QUO)
2810 CMD$="[wdx]invoke hide wait"+QUO+%IL_COMSPEC$+" /C """""+SCAN_CMD$+"  /app=""""TopForm Software"""" /key=-1174193304 "+SCANNER_OPTIONS$+" "+SUB(SCAN_FILE$,"[wdx]","")+QUO+QUO+" "+QUO
2811 %MSG_STYLE=1; CALL "ZZGMSG",ERR=*NEXT,"C",MSG("ZZGFUN_19"),"Y+05"; %MSG_STYLE=0
2815 EXECUTE CMD$,ERR=*NEXT
2820 CALL "ZZGFUN;TRANSFER_FILE",SCAN_FILE$,NOTE_PATH$
2821 CALL "ZZGMSG",ERR=*NEXT,"D","",""
2825 ERASE SCAN_FILE$,ERR=*NEXT
2895 EXIT 
2899 ! *************************************************************
3000 GET_SOFTWARE_LOCATION:! determine path to scanner software component (currently ACQUIRE), including standard options and key info. Verify that software is loaded on their PC, if not offer to transfer over, if CANCEL then cancel the scan
3005 ENTER CANCEL
3006 CANCEL=0
3007 SV_MSGLIB$=MSG(*); MESSAGE_LIB %FLMAINT_MSG$
3010 IF NUL(%IL_TEMP_DIR$) THEN CALL "ZZGFUN;BUILD_TEMP_DIR"
3015 CALL %WDX$+"*windx.utl;get_lwd",LOCATION$; LOGO_LOCATION$=LOCATION$+"\topform\"; LOCATION$=MID(LOCATION$,1,POS("\"=LOCATION$,-1)) ! get location of base windx dir by getting lwd and removing the windx from the end
3017 OCX_LOCATION$=LOCATION$+"lib\"
3020 LOCATION$+="lib\acquire\",FROM_LOCATION$="lib"+DLM+"acquire"+DLM
3029 ! Check to see if directory is there
3030 CK=HFN; OPEN (CK,ERR=MAKE_DIR)%WDX$+LOCATION$; CLOSE (CK); GOTO DIR_OK
3035 MAKE_DIR:EXECUTE %WDX$+"invoke hide wait "+QUO+%IL_COMSPEC$+" /C mkdir "+QUO+"+QUO+"+QUO+MID(LOCATION$,1,LEN(LOCATION$)-1)+QUO+"+quo"
3036 DIR_OK:
3037 %IL_SCAN_LOCATION$=LOCATION$+"ACQUIRE.EXE"
3040 CK=HFN; OPEN (CK,ERR=SEND_SCANNER_FILES)%WDX$+%IL_SCAN_LOCATION$; CLOSE (CK); GOTO GET_SOFTWARE_DONE ! if exe program there, we're done
3045 SEND_SCANNER_FILES: MSGBOX MSG("ZZGFUN_12"),MSG("ZZGFUN_13"),"CANCEL",_ANS$; IF _ANS$<>"OK" THEN CANCEL=1; GOTO GET_SOFTWARE_DONE
3049 ! Tranfer all files in the from_location to location
3050 SELECT TF_NAME$ FROM FROM_LOCATION$ WHERE MID(TF_NAME$,1,1)<>"."
3060 CALL "ZZGFUN;TRANSFER_FILE",FROM_LOCATION$+TF_NAME$,%WDX$+LOCATION$+TF_NAME$
3070 NEXT RECORD 
3075 ! transfer OCX and il_logo.htm to ensure they are there
3080 CALL "ZZGFUN;TRANSFER_FILE","lib/_bmp/_OCX",%WDX$+OCX_LOCATION$+"_OCX"
3082 CALL "ZZGFUN;TRANSFER_FILE","lib/_bmp/il_logo.jpg",%WDX$+LOGO_LOCATION$+"il_logo.jpg"
3084 CALL "ZZGFUN;TRANSFER_FILE","lib/_bmp/il_logo.htm",%WDX$+LOGO_LOCATION$+"il_logo.htm"
3090 GET_SOFTWARE_DONE:
3092 MESSAGE_LIB SV_MSGLIB$
3095 EXIT 
3099 ! ********************************************************
3100 VIEW_NOTE_IN_WINDOW:! Given NOTE_PATH$, TEMP_PATH$ then copy to TEMP_PATH$ and view it - if TEMP_PATH$ is null then read parameters to get
3110 ENTER NOTE_PATH$,TEMP_PATH$,OPTION$,COLUMN,LINE,WIDTH,HEIGHT,OCX_HANDLE,ERR=*NEXT
3125 IF MID(NOTE_PATH$,1,1)=">" THEN MSGBOX MSG("ZZGFUN_09",STP(MID(NOTE_PATH$,2))),MSG("MB_ATTN"),"INFO"; GOTO VIEW_NOTE_IN_WINDOW_END ! If NOTE_PATH starts with ">" it is not a file name but a comment
3135 IF NUL(%IL_TEMP_DIR$) THEN CALL "ZZGFUN;BUILD_TEMP_DIR"
3140 IF NUL(TEMP_PATH$) THEN TEMP_PATH$=%IL_TEMP_DIR$
3145 FILE_NAME$=MID(NOTE_PATH$,MSK(NOTE_PATH$,"[^/\\]*$")),TEMP_FILE$=%WDX$+TEMP_PATH$+"\"+FILE_NAME$
3160 ALREADY_EXISTS=0; IF POS("A"=OPTION$) THEN AE=HFN; OPEN (AE,ERR=*NEXT)TEMP_FILE$; ALREADY_EXISTS=1; CLOSE (AE)
3180 IF NOT(ALREADY_EXISTS) THEN CALL "ZZGFUN;TRANSFER_FILE",ERR=*NEXT,NOTE_PATH$,TEMP_FILE$
3184 ! SYSTEM_HELP SUB(TEMP_FILE$,%WDX$,""),ERR=*NEXT
3185 CALL "[wdx]*OCX;URL_IN_IE",ERR=*NEXT,COLUMN,LINE,WIDTH,HEIGHT,"file://"+SUB(TEMP_FILE$,%WDX$,""),OCX_HANDLE,RETURN_CODE
3190 VIEW_NOTE_IN_WINDOW_END:
3195 EXIT 
3199 ! ********************************************************
3200 PROCESS_NOTE_PATH:! If NOTE_PATH$ starts with a "~" then we have a command to process
3210 IP$=NOTE_PATH$
3220 IF MID(NOTE_PATH$,1,6)="~SCAN~" THEN {! Scan in image, if ~CANCEL~ return then don't write out
3225 CALL "ZZGFUN;SCAN_NOTE",ERR=PIP_ERROR,NOTE_TYPE$,NOTE_PATH$
3228  }
3229 IF MID(NOTE_PATH$,1,6)="~COPY~" THEN {
3230 NOTE_PATH$=MID(NOTE_PATH$,7); TILDE=POS("~"=NOTE_PATH$); IF TILDE=0 THEN GOTO PIP_ERROR ELSE IMG_SRC$=MID(NOTE_PATH$,1,TILDE-1),NOTE_PATH$=MID(NOTE_PATH$,TILDE+1)
3232 IF NOT(NUL(MID(IMG_SRC$,-4,1))) THEN NOTE_FORMAT$=MID(IMG_SRC$,-3) ! Override normal image_format processing based on incoming file extension
3233 CALL "ZZGFUN;BUILD_NOTE_PATH",ERR=*NEXT,NOTE_TYPE$,NOTE_PATH$,NOTE_FILE_NAME$,NOTE_DESC$,NOTE_DIR$,NOTE_FORMAT$,SCANNER_OPTIONS$
3235 GOSUB MAKE_FILE_UNIQUE ! Make sure we have a unique file name
3237 CALL "ZZGFUN;TRANSFER_FILE",ERR=PIP_ERROR,IMG_SRC$,NOTE_PATH$
3239  }
3240 IF MID(NOTE_PATH$,1,6)="~FILE~" THEN {
3245 NOTE_PATH$=SUB(NOTE_PATH$,"~FILE~","")
3250 CALL "[WDX]*OCX;GET_FILE_BOX","READ",IMG_SRC$,MSG("ZZGFUN_15"),MSG("ZZGFUN_16"),MSG("ZZGFUN_17"),MSG("ZZGFUN_18")
3253 CALL "ZZGFUN;BUILD_NOTE_PATH",ERR=*NEXT,NOTE_TYPE$,NOTE_PATH$,NOTE_FILE_NAME$,NOTE_DESC$,NOTE_DIR$,NOTE_FORMAT$,SCANNER_OPTIONS$
3255 CALL "ZZGFUN;TRANSFER_FILE",ERR=PIP_ERROR,IMG_SRC$,NOTE_PATH$
3259  }
3290 RETURN 
3292 PIP_ERROR: NOTE_PATH$="~CANCEL~"; RETURN 
3295 ! ****************************************************
3300 BUILD_NOTE_PATH:! Given NOTE_FILE$, image_TYPE$, set NOTE_FILE$, set NOTE_FILE_NAME$ to name of the file only, return NOTE_DESC$,NOTE_DIR$,NOTE_FORMAT$,SCANNER_OPTIONS$ for use by other programs, if NOTE_FORMAT$ sent in, it will override the normal NOTE_FORMAT used
3305 ENTER NOTE_TYPE$,NOTE_FILE$,NOTE_FILE_NAME$,NOTE_DESC$,NOTE_DIR$,NOTE_FORMAT$,SCANNER_OPTIONS$
3308 IF NOT(NUL(NOTE_FORMAT$)) THEN OVERRIDE_NOTE_FORMAT$=NOTE_FORMAT$
3310 NOTE_FILE_NAME$=NOTE_FILE$,NOTE_DESC$="",NOTE_DIR$="",NOTE_FORMAT$="",SCANNER_OPTIONS$=""
3315 IF NOT(%IL_CODES) THEN PERFORM "ZZGFUN;BUILD_DOC_LIST"
3330 IF NUL(NOTE_TYPE$) THEN NOTE_DIR$=%DATAPATH$ ELSE FIND (%IL_CODES,KEY=PAD(NOTE_TYPE$,2),DOM=*NEXT)*,NOTE_DESC$,NOTE_DIR$,NOTE_FORMAT$,SCANNER_OPTIONS$
3333 IF NOT(NUL(OVERRIDE_NOTE_FORMAT$)) THEN NOTE_FORMAT$=OVERRIDE_NOTE_FORMAT$ ! Normal Format overridden
3334 IF MID(NOTE_FILE$,-4,1)<>"." THEN {
3335 IF NUL(NOTE_FORMAT$) THEN NOTE_FORMAT$="PDF"
3340 NOTE_FILE$+="."+LCS(STP(NOTE_FORMAT$))
3342  }
3345 IF MID(NOTE_FILE$,2,2)=":\" THEN NOTE_FILE$=MID(NOTE_FILE$,4) ELSE IF MID(NOTE_FILE$,2,1)=":" THEN NOTE_FILE$=MID(NOTE_FILE$,3) ! remove dos drive 'eg C:\" from front of the name
3360 NOTE_FILE$=SUB(SUB(SUB(NOTE_FILE$,"/","_"),"\","_")," ","_")
3365 NOTE_FILE_NAME$=NOTE_FILE$,NOTE_FILE$=NOTE_DIR$+DLM+NOTE_FILE$
3395 EXIT 
3399 ! *****************************************************
3400 MAKE_FILE_UNIQUE:! Verify that NOTE_PATH$ is unique, if not add _+counter before extension
3410 MFU_CHECK_FILE: MFU=HFN; OPEN (MFU,ERR=MFU_END)NOTE_PATH$; CLOSE (MFU)
3415 ! If here, we need to uniqize the file name, insert counter prior to extension 
3420 U$="_"+STR(++U)
3425 IF MID(NOTE_PATH$,-4,1)="." THEN NOTE_PATH$=MID(NOTE_PATH$,1,LEN(NOTE_PATH$)-4)+U$+MID(NOTE_PATH$,-4) ELSE NOTE_PATH$+=U$
3440 GOTO MFU_CHECK_FILE
3490 MFU_END:
3495 RETURN 
3499 ! ***********************************************************
9999 END 
10000 GRI_AR_INVOICE:! Get related images for AR_INVOICE
10002 ! Gather Invoice info from AR6 or AR8, line info in AR7_INFO$ (each 46 char long)
10005 Z$="01O AR6...  02O AR8... 03O AR7... 04O FS1... 05O FS2... 06O FT3... 07O FT4... "; GOSUB OPEN_GRI_FILES
10010 FIND (Z[1],KEY=SEARCH_REF$,DOM=*NEXT)AR6$,GL_LINK,TRANSACTION_LINK; INV_KEY$=AR6$(1,18),ORDER$=AR6$(66,8),AUDIT_NO$=AR6$(102,6),CUST_PO$=AR6$(36,15); IF NOT(NUL(AR6$(26,10))) THEN INV_KEY$(1,10)=AR6$(26,10) END_IF ; GOTO GOT_INVOICE
10012 FIND (Z[2],KEY=SEARCH_REF$,DOM=*NEXT)AR8$,TRANSACTION_LINK; INV_KEY$=AR8$(1,18); ORDER$=AR8$(53,8),AUDIT_NO$=AR8$(112,6),CUST_PO$=AR8$(36,15)
10015 GOT_INVOICE: CHECK$="",CASH_REC$="",INVOICE$=MID(INV_KEY$,1,17)+" " ! use only the first 7 of invoice number
10019 DIM AR7[2]; CALL "AR2XAB",X3$,X4$,Z[3],INV_KEY$,TRANSACTION_LINK,AR7$,AR7{ALL},FLAG$,SEQ$,"R"
10020 WHILE FLAG$<>"NONE"
10022 CHECK$+=INV_KEY$(1,10)+AR7$(26,8),CASH_REC$+=AR7$(34,6)
10023 CALL "AR2XAB",X3$,X4$,Z[3],INV_KEY$,TRANSACTION_LINK,AR7$,AR7{ALL},FLAG$,SEQ$,"R"
10024 WEND 
10030 ! Get order information
10032 DIM FS1$(350); FS1$(6,10)=INV_KEY$(1,10),FS1$(118,8)=ORDER$; IF NUL(CUST_PO$) THEN CUST_PO$=STP(ORDER$,0,"0")
10035 ORD_LINE_CHAN=Z[5]; FIND (Z[4],KEY=ORDER$,DOM=*NEXT)FS1$; GOTO GOT_ORDER
10037 ORD_LINE_CHAN=Z[7]; FIND (Z[6],KEY=ORDER$,DOM=DONE_WITH_ORDER)FS1$ ! Really FT3 info
10040 GOT_ORDER:
10045 ORD_LINE$="",FORM$="",RFQ$=STP(MID(FS1$,23,5)+MID(FS1$,3,3))
10049 READ (ORD_LINE_CHAN,KEY=ORDER$,DOM=*NEXT)
10050 NEXT_ORD_LINE:READ (ORD_LINE_CHAN,END=DONE_WITH_ORDER)FS2$; IF FS2$(147,8)<>ORDER$ THEN GOTO DONE_WITH_ORDER
10055 ORD_LINE$+=ORDER$+FS2$(6,3),RFQ$+=STP(FS2$(221,8))
10060 FORM$+=FS2$(161,10)+FS2$(19,10)
10065 GOTO NEXT_ORD_LINE
10070 DONE_WITH_ORDER:
10100 ! Process images now
10102 ! Set NOTE_ORDER$ and go through so we can easily change the order of the images, perhaps even allow for customization
10104 NOTE_ORDER$="A00513A7A104A2021203A400A501A9070809R0RBR1R2"
10106 WHILE NOT(NUL(NOTE_ORDER$))
10108 NOTE_INDEX$=MID(NOTE_ORDER$,1,2),NOTE_ORDER$=MID(NOTE_ORDER$,3)
10110 SWITCH NOTE_INDEX$
10112 CASE "A0"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","A0","Y",INVOICE$,17,2,IL1_CHAN,RESULT ! Customer Check 186745
10114 CASE "05"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","05","Y",CHECK$,18,2,IL1_CHAN,RESULT ! Customer Check
10116 CASE "A7"; CALL "ZZGFUN;ADD_TO_RESULT","A7","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Order Acknowledgement to Customer
10118 CASE "A1"; CALL "ZZGFUN;ADD_TO_RESULT","A1","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Packing List to Whse
10120 CASE "04"; CALL "ZZGFUN;ADD_TO_RESULT","04","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Customer Signed Delivery Ticket
10122 CASE "R0"; CALL "ZZGFUN;ADD_TO_RESULT","R0","Y",AUDIT_NO$,"",IL1_CHAN,RESULT; BREAK ! Sales journal
10124 CASE "R1"; CALL "ZZGFUN;ADD_TO_RESULT","R1","Y",AUDIT_NO$,"",IL1_CHAN,RESULT; BREAK ! Detail Sales journal
10126 CASE "R2"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","R2","Y",CASH_REC$,6,1,IL1_CHAN,RESULT; BREAK ! Cash Receipts Journal
10128 CASE "A2"; CALL "ZZGFUN;ADD_TO_RESULT","A2","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! P/O to Vendor
10130 CASE "02"; CALL "ZZGFUN;ADD_TO_RESULT","02","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Vendor Acknowledgement
10132 CASE "03"; CALL "ZZGFUN;ADD_TO_RESULT","03","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Receiving Document
10134 CASE "A4"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","A4","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! RFQ to Vendor
10136 CASE "00"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","00","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! Vendor Quote
10138 CASE "A5"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","A5","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! Customer quote
10140 CASE "01"; CALL "ZZGFUN;ADD_TO_RESULT","01","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Vendor Invoice
10142 CASE "A9"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","A9","Y",ORD_LINE$,11,2,IL1_CHAN,RESULT; BREAK ! Variable Print Proofs
10144 CASE "07"; CALL "ZZGFUN;ADD_TO_RESULT","07","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Form Proof Copy
10146 CASE "08"; CALL "ZZGFUN;ADD_TO_RESULT","08","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Form Sample Copy
10148 CASE "09"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","09","Y",FORM$,20,2,IL1_CHAN,RESULT; BREAK ! Item Image
10150 CASE "12"; CALL "ZZGFUN;ADD_TO_RESULT","12","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Job Notes
10152 CASE "13"; CALL "ZZGFUN;ADD_TO_RESULT","13","Y","",MID(FS1$,6,10)+CUST_PO$,IL1_CHAN,RESULT; CALL "ZZGFUN;ADD_TO_RESULT","13","N","",MID(FS1$,6,10)+MID(FS1$,118,8),IL1_CHAN,RESULT; CALL "ZZGFUN;ADD_TO_RESULT","13","N","",MID(FS1$,6,10)+MID(FS1$,120,6),IL1_CHAN,RESULT; BREAK ! Customer P/O, try with custpo from order and with the order number with and without the division as some people use the order number if no customer po
10154 CASE "RB"; CALL "ZZGFUN;ADD_TO_RESULT","RB","Y",AUDIT_NO$,"",IL1_CHAN,RESULT; BREAK ! Finance Charge journal
10175 END SWITCH 
10180 WEND 
10195 RETURN 
10199 ! ***************************************************
10200 GRI_AP_INVOICE:! Get related images for AP_INVOICE
10205 ! Gather Invoice info from API or APQ, line info in APJ
10210 Z$="01O API...  02O APQ... 03O APJ... 04O FS1... 05O FS2... 06O FT3... 07O FT4... "; GOSUB OPEN_GRI_FILES
10215 FIND (Z[1],KEY=SEARCH_REF$,DOM=*NEXT)API$,TRANSACTION_LINK; GOTO GOT_AP_INVOICE
10220 FIND (Z[2],KEY=SEARCH_REF$,DOM=*NEXT)API$,TRANSACTION_LINK
10225 GOT_AP_INVOICE: INV_KEY$=API$(1,20),AUDIT_NO$=API$(106,6),PO_NUM$=API$(56,9),ORDER$=API$(56,8)
10227 CHECK$="",DISB$="",MAN_CHECK$=""
10229 DIM APJ[2]; CALL "AR2XAB",X3$,X4$,Z[3],INV_KEY$,TRANSACTION_LINK,APJ$,APJ{ALL},FLAG$,SEQ$,"R"
10230 WHILE FLAG$<>"NONE"
10231 TMP$=APJ$(21,15); TMP=POS(":"=TMP$); IF TMP<>0 THEN TMP$=MID(TMP$,TMP+1) END_IF ; CHECK$+=INV_KEY$(1,10)+STP(TMP$,3)
10232 IF APJ$(36,1)="D" THEN DISB$+=APJ$(43,6) ELSE MAN_CHECK$+=APJ$(43,6)
10233 CALL "AR2XAB",X3$,X4$,Z[3],INV_KEY$,TRANSACTION_LINK,APJ$,APJ{ALL},FLAG$,SEQ$,"R"
10234 WEND 
10235 ! Get order information - only pick lines w/matching P/O code
10240 ORD_LINE_CHAN=Z[5]; FIND (Z[4],KEY=ORDER$,DOM=*NEXT)FS1$; GOTO GOT_AP_ORDER
10245 ORD_LINE_CHAN=Z[7]; FIND (Z[6],KEY=ORDER$,DOM=DONE_WITH_AP_ORDER)FS1$ ! Really FT3 info
10250 GOT_AP_ORDER:
10255 ORD_LINE$="",FORM$="",RFQ$=STP(MID(FS1$,23,5)+MID(FS1$,3,3))
10260 READ (ORD_LINE_CHAN,KEY=ORDER$,DOM=*NEXT)
10265 NEXT_AP_ORD_LINE:READ (ORD_LINE_CHAN,END=DONE_WITH_AP_ORDER)FS2$; IF FS2$(147,8)<>ORDER$ THEN GOTO DONE_WITH_AP_ORDER
10266 IF FS2$(9,1)<>PO_NUM$(9,1) THEN GOTO NEXT_AP_ORD_LINE ! Only get lines for this P/O
10270 ORD_LINE$+=ORDER$+FS2$(6,3),RFQ$+=STP(FS2$(221,8))
10275 IF NOT(NUL(FS2$(9,1))) THEN PO_NUM$+=ORDER$+FS2$(9,1)
10280 FORM$+=FS2$(161,10)+FS2$(19,10)
10285 GOTO NEXT_AP_ORD_LINE
10290 DONE_WITH_AP_ORDER:
10295 ! Process images now
10300 ! Set NOTE_ORDER$ and go through so we can easily change the order of the images, perhaps even allow for customization
10302 NOTE_ORDER$="01A2A4000203A8A9070809R3R4R5"
10304 WHILE NOT(NUL(NOTE_ORDER$))
10306 NOTE_INDEX$=MID(NOTE_ORDER$,1,2),NOTE_ORDER$=MID(NOTE_ORDER$,3)
10308 SWITCH NOTE_INDEX$
10310 CASE "01"; CALL "ZZGFUN;ADD_TO_RESULT","01","Y","",INV_KEY$,IL1_CHAN,RESULT; BREAK ! Vendor Invoices VEND#+inv#
10312 CASE "A2"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","A2","Y",PO_NUM$,9,1,IL1_CHAN,RESULT
10314 CASE "A8"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","A8","Y",CHECK$,16,2,IL1_CHAN,RESULT
10320 CASE "R3"; CALL "ZZGFUN;ADD_TO_RESULT; BREAK","R3","Y",AUDIT_NO$,"",IL1_CHAN,RESULT; BREAK ! Purchases journal
10322 CASE "R4"; CALL "ZZGFUN;ADD_TO_RESULT","R4","Y",DISB$,"",IL1_CHAN,RESULT; BREAK ! Cash Disbursements journal
10324 CASE "R5"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","R5","Y",MAN_CHECK$,6,1,IL1_CHAN,RESULT; BREAK ! Manual Check Register
10326 CASE "A2"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","A2","Y",PO_NUM$,9,1,IL1_CHAN,RESULT; BREAK ! P/O to Vendor
10328 CASE "02"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","02","Y",PO_NUM$,9,1,IL1_CHAN,RESULT; BREAK ! Vendor Acknowledgement
10330 CASE "03"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","03","Y",PO_NUM$,9,1,IL1_CHAN,RESULT; BREAK ! Receiving Document
10332 CASE "A4"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","A4","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! RFQ to Vendor
10334 CASE "00"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","00","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! Vendor Quote
10338 CASE "01"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","01","Y",PO_NUM$,9,1,IL1_CHAN,RESULT; BREAK ! Vendor Invoice
10340 CASE "A9"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","A9","Y",ORD_LINE$,11,2,IL1_CHAN,RESULT; BREAK ! Variable Print Proofs
10342 CASE "07"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","07","Y",PO_NUM$,9,1,IL1_CHAN,RESULT; BREAK ! Form Proof Copy
10344 CASE "08"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","08","Y",PO_NUM$,9,1,IL1_CHAN,RESULT; BREAK ! Form Sample Copy
10346 CASE "09"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","09","Y",FORM_CODE$,20,2,IL1_CHAN,RESULT; BREAK ! Item Image
10375 END SWITCH 
10380 WEND 
10395 RETURN 
10399 ! ***************************************************
10400 GRI_RFQ:! Get images for VENDOR_RFQ
10404 Z$="01O QSA... 02O QSB... "; GOSUB OPEN_GRI_FILES
10405 NOTE_ORDER$="A40013A509"; RFQ$=SEARCH_REF$
10406 FORM_CODE$="",CUST_PO$=""; FIND (Z[1],KEY=RFQ$,DOM=GOT_RFQ)QSA$; CUST_PO$=MID(QSA$,440,15); READ (Z[2],KEY=RFQ$,DOM=*NEXT)
10407 READ (Z[2],END=GOT_RFQ)QSB$; IF MID(QSB$,150,8)=RFQ$ THEN FORM_CODE$+=QSA$(10,10)+QSB$(10,10); GOTO *SAME
10410 GOT_RFQ:WHILE NOT(NUL(NOTE_ORDER$))
10415 NOTE_INDEX$=MID(NOTE_ORDER$,1,2),NOTE_ORDER$=MID(NOTE_ORDER$,3)
10420 SWITCH NOTE_INDEX$
10425 CASE "00"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","00","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! Vendor Quote
10430 CASE "A4"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","A4","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! RFQ to Vendor
10435 CASE "A5"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","A5","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! Customer quote
10448 CASE "09"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","09","Y",FORM_CODE$,20,2,IL1_CHAN,RESULT; BREAK ! Item Image
10450 CASE "13"; CALL "ZZGFUN;ADD_TO_RESULT","13","Y","",CUST_PO$,IL1_CHAN,RESULT; BREAK ! Customer P/O
10475 END SWITCH 
10480 WEND 
10495 RETURN 
10499 ! *******************************************************
10500 GRI_ORDER: PO_SEARCH=0,ITEM_SEARCH=0; GOTO GRI_O_START ! Get related images for  ORDER
10501 GRI_PO: PO_SEARCH=1,ITEM_SEARCH=0; GOTO GRI_O_START ! Get related images for Purchase order
10504 GRI_O_START:IF PO_SEARCH THEN ORDER$=MID(SEARCH_REF$,1,8) ELSE ORDER$=SEARCH_REF$
10505 Z$="04O FS1... 05O FS2... 06O FT3... 07O FT4... "; GOSUB OPEN_GRI_FILES
10510 GRI_O_FIND:! Get order information
10515 ORD_LINE_CHAN=Z[5]; FIND (Z[4],KEY=ORDER$,KNO=0,DOM=*NEXT)FS1$; GOTO GOT_ORDER_REC
10517 ORD_LINE_CHAN=Z[7]; FIND (Z[6],KEY=ORDER$,KNO=0,DOM=ORDER_DONE)FS1$ ! Really FT3 info
10520 GOT_ORDER_REC:
10524 IF NOT(ITEM_SEARCH) THEN FORM$="" ! if ITEM_SEARCH then FORM$ is already set
10525 ORD_LINE$="",CUST_PO$=MID(FS1$,28,15),RFQ$=STP(MID(FS1$,23,5)+MID(FS1$,3,3))
10529 READ (ORD_LINE_CHAN,KEY=ORDER$,DOM=*NEXT)
10530 NEXT_ORD_REC:READ (ORD_LINE_CHAN,END=ORDER_DONE)FS2$; IF FS2$(147,8)<>ORDER$ THEN GOTO ORDER_DONE
10535 ORD_LINE$+=ORDER$+FS2$(6,3),RFQ$+=STP(FS2$(221,8))
10540 IF NOT(ITEM_SEARCH) THEN FORM$+=FS2$(161,10)+FS2$(19,10) ! if ITEM_SEARCH we have already set the form code
10545 GOTO NEXT_ORD_REC
10550 ORDER_DONE:
10600 ! Process images now
10602 ! Set NOTE_ORDER$ and go through so we can easily change the order of the images, perhaps even allow for customization
10604 IF PO_SEARCH THEN NOTE_ORDER$="A20002131203A104A4A501A9070809" ELSE IF ITEM_SEARCH THEN NOTE_ORDER$="090708A7A104A202131203A400A501A9" ELSE NOTE_ORDER$="A7A104A202131203A400A501A9070809"
10606 WHILE NOT(NUL(NOTE_ORDER$))
10608 NOTE_INDEX$=MID(NOTE_ORDER$,1,2),NOTE_ORDER$=MID(NOTE_ORDER$,3)
10610 SWITCH NOTE_INDEX$
10616 CASE "A7"; CALL "ZZGFUN;ADD_TO_RESULT","A7","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Order Acknowledgement to Customer
10618 CASE "A1"; CALL "ZZGFUN;ADD_TO_RESULT","A1","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Packing List to Whse
10620 CASE "04"; CALL "ZZGFUN;ADD_TO_RESULT","04","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Customer Signed Delivery Ticket
10628 CASE "A2"; CALL "ZZGFUN;ADD_TO_RESULT","A2","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! P/O to Vendor
10630 CASE "02"; CALL "ZZGFUN;ADD_TO_RESULT","02","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Vendor Acknowledgement
10632 CASE "03"; CALL "ZZGFUN;ADD_TO_RESULT","03","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Receiving Document
10634 CASE "A4"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","A4","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! RFQ to Vendor
10636 CASE "00"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","00","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! Vendor Quote
10638 CASE "A5"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","A5","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! Customer quote
10640 CASE "01"; CALL "ZZGFUN;ADD_TO_RESULT","01","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Vendor Invoice
10642 CASE "A9"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","A9","Y",ORD_LINE$,11,2,IL1_CHAN,RESULT; BREAK ! Variable Print Proofs
10644 CASE "07"; CALL "ZZGFUN;ADD_TO_RESULT","07","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Form Proof Copy
10646 CASE "08"; CALL "ZZGFUN;ADD_TO_RESULT","08","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Form Sample Copy
10648 CASE "09"; CALL "ZZGFUN;ADD_MULTIPLE_ITEMS","09","Y",FORM$,20,2,IL1_CHAN,RESULT; BREAK ! Item Image
10650 CASE "12"; CALL "ZZGFUN;ADD_TO_RESULT","12","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Job Note
10652 CASE "13"; CALL "ZZGFUN;ADD_TO_RESULT","13","Y","",MID(FS1$,6,10)+CUST_PO$,IL1_CHAN,RESULT; CALL "ZZGFUN;ADD_TO_RESULT","13","N","",MID(FS1$,6,10)+MID(FS1$,118,8),IL1_CHAN,RESULT; CALL "ZZGFUN;ADD_TO_RESULT","13","N","",MID(FS1$,6,10)+MID(FS1$,120,6),IL1_CHAN,RESULT; BREAK ! Customer P/O, try with custpo from order and with the order number with and without the division as some people use the order number if no customer po
10675 END SWITCH 
10680 WEND 
10695 RETURN 
10699 ! ******************************************************
10700 GRI_AUDIT_REPORT:! Get images for audit report SEARCH_REF$ should be NOTE_TYPE$+$00$+start audit #+$00$+end audit #+$00$+start_date+$00$+end_date$+$00$
10705 Z$=""; GOSUB OPEN_GRI_FILES
10715 TF_SEARCH$=SEARCH_REF$
10718 NOTE_TYPE$=FN%NEXT_FROM_LIST$(TF_SEARCH$,$00$); TF_SEARCH$=MID(TF_SEARCH$,LEN(NOTE_TYPE$)+2)
10720 AUDIT_START$=FN%NEXT_FROM_LIST$(TF_SEARCH$,$00$); TF_SEARCH$=MID(TF_SEARCH$,LEN(AUDIT_START$)+2)
10725 AUDIT_END$=FN%NEXT_FROM_LIST$(TF_SEARCH$,$00$); TF_SEARCH$=MID(TF_SEARCH$,LEN(AUDIT_END$)+2)
10730 DATE_START$=FN%NEXT_FROM_LIST$(TF_SEARCH$,$00$); TF_SEARCH$=MID(TF_SEARCH$,LEN(DATE_START$)+2)
10735 DATE_END$=FN%NEXT_FROM_LIST$(TF_SEARCH$,$00$); TF_SEARCH$=MID(TF_SEARCH$,LEN(DATE_END$)+2)
10750 CALL "ZZGFUN;ADD_TO_RESULT",NOTE_TYPE$,"Y",AUDIT_START$+$00$+AUDIT_END$,DATE_START$+$00$+DATE_END$,IL1_CHAN,RESULT
10795 RETURN 
10799 ! **********************************************************
10800 GRI_CUSTOMER_NOTE:! Get images for a customer note
10805 Z$=""; GOSUB OPEN_GRI_FILES
10850 CALL "ZZGFUN;ADD_TO_RESULT","10","Y",SEARCH_REF$,"",IL1_CHAN,RESULT
10895 RETURN 
10899 ! ***********************************************************
10900 GRI_VENDOR_NOTE:! Get images for a vendor note
10905 Z$=""; GOSUB OPEN_GRI_FILES
10950 CALL "ZZGFUN;ADD_TO_RESULT","11","Y",SEARCH_REF$,"",IL1_CHAN,RESULT
10995 RETURN 
10999 ! ***********************************************************
11000 GRI_ITEM:! Get images for items
11001 ! will setup FORM$ and get ORDER$ if FM1 entry found and set from last order, then goto order processing, set ITEM_SEARCH to 1 to control order and flag what we are doing
11005 Z$="01O FM1... 04O FS1... 05O FS2... 06O FT3... 07O FT4... "; GOSUB OPEN_GRI_FILES
11010 FORM$=SEARCH_REF$,ITEM_SEARCH=1
11015 ORDER$=""; FIND (Z[1],KEY=FORM$,DOM=*NEXT)FM1$; IF NOT(NUL(MID(FM1$,132,8))) THEN ORDER$=MID(FM1$,132,8) ! Get last order number
11080 GOTO GRI_O_FIND ! go off to GRI_ORDER to get rest of order info, we won't be coming back here
11095 RETURN 
11099 ! **********************************************
13000 MAKE_JOB_LIST:
13010 ENTER ARG_1$,ARG_2$,ARG_3$,ERR=*NEXT
13020 CALL "ZZCOMP","","","",X3$,X4$,"",-1,0,0; DIM Z[NUM(X3$(60,3))]
13030 Z$="01O JT0... 02O AR6...  03O FS1...  04O FS2...  05O AR8...  06O FT3...  07O FT4...  08O FS6...  09O ASG... 10O QSA... 11O FS8... 12O ARB... "; CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
13040 JT0_LIST$="",JT0_NUM=0,NOTE_NUM=0,NOTE_LIST$="",%NOTE_LIST$="",%NOTE_NUM=0,ORD_LIST$="",ORD_NUM=0,RFQ_NUM=0,RFQ_LIST$=""
13050 TF_TYPE$=ARG_1$,TF_REF$=ARG_2$,TF_INVOLVES$=ARG_3$
13055 IF %ZZ_NOTES THEN CLOSE (%ZZ_NOTES,ERR=*PROCEED); %ZZ_NOTES=0
13060 %ZZ_NOTES=GFN; OPEN (%ZZ_NOTES)"*memory*"
13100 ! Build JT0_LIST
13105 IF TF_TYPE$<>"E" THEN IF TF_TYPE$<>"P" THEN JT0_LIST$+=PAD(TF_TYPE$,1)+PAD(TF_REF$,8),JT0_NUM=JT0_NUM+1 ELSE IF TF_TYPE$="P" THEN JT0_LIST$+="P"+PAD(TF_REF$,9),JT0_NUM+=1 ELSE JT0_LIST$+="I"+PAD(MID(TF_REF$,7,8),8),JT0_NUM+=1; IF LEN(TF_REF$)>=22 THEN JT0_LIST$+="O"+TF_REF$(15,8),JT0_NUM+=1; ORD$=TF_REF$(15,8); GOSUB GET_RFQS_FROM_ORDER ! Add the reference # sent in
13110 SWITCH TF_TYPE$
13115 CASE "I" ! For Invoices, add Order# from the invoice
13120 READ (Z[9],KEY=MID(TF_REF$,1,8),DOM=*NEXT)
13125 ASG_KEY$=KEY(Z[9],END=END_I)
13130 READ (Z[2],KEY=MID(ASG_KEY$,9,10)+MID(ASG_KEY$,1,8),DOM=*NEXT)INVOICE$
13135 READ (Z[5],KEY=MID(ASG_KEY$,9,10)+MID(ASG_KEY$,1,8),DOM=*NEXT)INVOICE$
13140 IF NOT(NUL(MID(INVOICE$,66,8))) THEN JT0_LIST$+="O"+INVOICE$(66,8),JT0_NUM=JT0_NUM+1; ORD$=INVOICE$(66,8); GOSUB GET_RFQS_FROM_ORDER
13145 END_I: BREAK ! "I"
13150 CASE "R" ! For RFQs get Order number ordered on
13155 READ (Z[10],KEY=TF_REF$,DOM=END_R)RFQ$
13160 IF NOT(NUL(MID(RFQ$,455,8))) THEN JT0_LIST$+="O"+RFQ$(455,8),JT0_NUM+=1
13165 END_R: BREAK ! "R"
13170 CASE "E" ! From Invoice Entry
13174 ARB_ORDER$=DIM(8); IF LEN(TF_REF$)=22 THEN ARB_ORDER$=TF_REF$(15,8) ! SSP285248, if we have the order number then use it
13175 READ (Z[12],KEY=MID(TF_REF$,1,14),DOM=*NEXT)INVOICE$; ARB_ORDER$=MID(INVOICE$,92,8) ! SSP285248
13180 IF NOT(NUL(ARB_ORDER$)) THEN JT0_LIST$+="O"+ARB_ORDER$,JT0_NUM+=1; ORD$=ARB_ORDER$; GOSUB GET_RFQS_FROM_ORDER ! SSP285248
13185 END_E: BREAK ! "E"
13200 CASE "O" ! For orders determine FS1/2 or FT3/4, set RFQ from header and/or lines, use FS6 to get invoices, don't add duplicates
13210 ORD$=TF_REF$; GOSUB GET_RFQS_FROM_ORDER
13230 IF NUL(ORDER$) THEN GOTO END_O
13235 ! Go through FS8 by order # and then get FS6 records and see if any invoices
13240 READ (Z[11],KEY=ORDER$(6,10)+ORDER$(118,8),DOM=*NEXT)
13245 READ_NEXT_FS8: FS8$=KEY(Z[11],END=FS8_DONE); READ (Z[11]); IF LEN(FS8$)<30 THEN GOTO READ_NEXT_FS8 ELSE IF MID(FS8$,1,18)<>ORDER$(6,10)+ORDER$(118,8) THEN GOTO FS8_DONE
13250 FIND (Z[8],KEY=FS8$(1,10)+FS8$(19,11)+FS8$(11,8)+FS8$(30,1),KNO=0,DOM=READ_NEXT_FS8)FS6$ ! SSP#256322
13255 IF NOT(NUL(MID(FS6$,40,8))) THEN IF POS("I"+FS6$(40,8)=JT0_LIST$)=0 THEN JT0_LIST$+="I"+FS6$(40,8),JT0_NUM+=1
13265 GOTO READ_NEXT_FS8
13270 FS8_DONE:
13290 END_O: BREAK ! "O"
13295 END SWITCH 
13300 ! JT0_LIST$ is built, now find matching entries
13305 IF JT0_NUM=0 THEN GOTO MJL_DONE ! No notes found, we're done
13310 FOR I=0 TO JT0_NUM-1
13315 IF JT0_LIST$(I*9+1,1)="P" THEN POS_KEY$=JT0_LIST$(I*9+1,10) ELSE POS_KEY$=JT0_LIST$(I*9+1,9) END_IF ; READ (Z[1],KEY=POS_KEY$,KNO=1,DOM=*NEXT)
13320 JT0_KEY$=KEY(Z[1],KNO=1,END=13350)
13325 DIM JT0[5]; READ (Z[1],KEY=JT0_KEY$,ERR=13320)JT0$,JT0[0],JT0[1],JT0[2],JT0[3],JT0[4]
13330 IF JT0$(16,10)<>PAD(POS_KEY$,10) THEN GOTO 13320 ! IF JT0$(16,9)<>JT0_LIST$(I*9+1,9) THEN GOTO 13320
13331 IF NOT(NUL(TF_INVOLVES$)) THEN IF JT0$(43,1)<>MID(STP(TF_INVOLVES$,2),1,1) THEN GOTO 13320 ! Exclude this record if not specified type  
13335 IF JT0_LIST$(I*9+1,1)="I" THEN INV_LIST$=INV_LIST$+JT0$(1,10),INV_NUM=INV_NUM+1
13340 IF JT0_LIST$(I*9+1,1)="O" THEN ORD_LIST$=ORD_LIST$+JT0$(1,10),ORD_NUM=ORD_NUM+1
13345 IF JT0_LIST$(I*9+1,1)="R" THEN RFQ_LIST$=RFQ_LIST$+JT0$(1,10),RFQ_NUM=RFQ_NUM+1
13346 IF JT0_LIST$(I*9+1,1)="P" THEN PO_LIST$=PO_LIST$+JT0$(1,10),PO_NUM=PO_NUM+1
13348 GOTO 13320
13350 NEXT I
13355 IF TF_TYPE$="I" THEN NOTE_LIST$=INV_LIST$+ORD_LIST$+RFQ_LIST$,NOTE_NUM=NOTE_NUM+RFQ_NUM+ORD_NUM+INV_NUM,RFQ_LIST$="",RFQ_NUM=0
13356 IF TF_TYPE$="E" THEN NOTE_LIST$=INV_LIST$+ORD_LIST$+RFQ_LIST$,NOTE_NUM=NOTE_NUM+RFQ_NUM+ORD_NUM+INV_NUM,RFQ_LIST$="",RFQ_NUM=0
13360 IF TF_TYPE$="O" THEN NOTE_LIST$=ORD_LIST$+RFQ_LIST$+INV_LIST$,NOTE_NUM=NOTE_NUM+RFQ_NUM+ORD_NUM+INV_NUM
13365 IF TF_TYPE$="R" THEN NOTE_LIST$=RFQ_LIST$,NOTE_NUM=RFQ_NUM
13367 IF TF_TYPE$="P" THEN NOTE_LIST$=PO_LIST$,NOTE_NUM=PO_NUM
13370 NEW_LIST$=NOTE_LIST$,NEW_NUM=NOTE_NUM,NOTE_LIST$="",NOTE_NUM=0
13375 NOTE_LIST$="",NOTE_NUM=0
13400 ADD_TO_ZZ_NOTES:! Open new %ZZ_NOTES file and add entries
13404 IF NEW_NUM>0 THEN {
13405 FOR I=0 TO NEW_NUM-1
13415 IF POS(MID(NEW_LIST$,I*10+1,10)=NOTE_LIST$,10)=0 THEN NOTE_LIST$=NOTE_LIST$+NEW_LIST$(I*10+1,10),NOTE_NUM=NOTE_NUM+1 ! Only add once
13420 NEXT I
13421  }
13425 %NOTE_LIST$=NOTE_LIST$,%NOTE_NUM=NOTE_NUM
13435 IF %NOTE_NUM>0 THEN {
13440 FOR I=0 TO %NOTE_NUM-1
13445 WRITE (%ZZ_NOTES,KEY=STR(I:"0000000000"))NOTE_LIST$(I*10+1,10)
13446 ! WRITE (%ZZ_NOTES,KEY=STR(NOTE_LIST$(I*10+1,10):"0000000000"))NOTE_LIST$(I*10+1,10)
13450 NEXT I
13455  }
13485 MJL_DONE:
13490 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
13495 EXIT 
13499 ! *****************************************************
13500 GET_RFQS_FROM_ORDER:! Given ORD$ search for RFQs on the order
13505 ! For orders determine FS1/2 or FT3/4, set RFQ from header and/or lines                                                 
13510 FIND (Z[3],KEY=ORD$,DOM=*NEXT)ORDER$; LINE_CHAN=Z[4]; GOTO FOUND_ORDER
13515 FIND (Z[6],KEY=ORD$,DOM=GRFO_DONE)ORDER$; LINE_CHAN=Z[6]
13520 FOUND_ORDER:IF NOT(NUL(MID(ORDER$,23,5)+MID(ORDER$,3,3))) THEN JT0_LIST$+="R"+ORDER$(23,5)+ORDER$(3,3),JT0_NUM+=1 ! Add RFQ# from header if not blank
13525 ! SELECT lines with the same order number that have non-blank RFQ #s
13530 SELECT OLINE$ FROM LINE_CHAN BEGIN MID(ORDER$,118,8) END MID(ORDER$,118,8)+$FE$ WHERE NUL(MID(OLINE$,221,8))=0
13535 IF POS("R"+OLINE$(221,8)=JT0_LIST$)=0 THEN JT0_LIST$+="R"+OLINE$(221,8),JT0_NUM+=1 ! Only add if not already on the list
13540 NEXT RECORD 
13590 GRFO_DONE:
13595 RETURN 
13599 ! **************************************************************
56000 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56001 REM "256322-I just viewed the job note for order 03-061685.  Then I went
56002 REM "260047-Flowpoint vendor invoices; New Job Note Type, Purchase Order
56004 REM "285248-Job note entered for an order, during PO rec type billing it
