0010 ! ZZGCTL - Terminal Control Key Setting
0035 ! "6.0 - 09/08/03 - 11.687222 - jir
0040 ! "Copyright 2003 Computer Software Inc.; Norcross, Georgia
0041 ! "        Licensed Software - All Rights Reserved.
0060 PROCESS "ZZGCTL","../ZZG/ZZ.EN"
0070 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZZPARM"
0170 _FIL_NO=HFN; OPEN (_FIL_NO,ERR=OPEN_ERR)_FILE_NAME$
0180 CALL "ZZCTLK",%X3$,K9$,"Z"; K9$="TCTL"+K9$,K9=LEN(K9$)
0185 READ (_FIL_NO,KEY=%X3$(1,8),DOM=*NEXT)IOL=0312
0186 _ZX0=HFN,_FILE_NAME$="ZX0"; OPEN (_ZX0,ERR=OPEN_ERR)_FILE_NAME$
0188 DIM A$(321+K9)
0190 A$(1,LEN(A$))="TCTLXXXXXXXXC4          0D          C8          C8          BB          C1          CA          D0          C5          CD          RESERVEDReturn  <--     <--     <F4>    <F10>   -->     Del     <F2>    <F3>    B8          B9          BA          BB          BC          BD          BE          BF          C0          C1           ",A$(1,K9)=K9$
0192 READ (_FIL_NO,KEY=K9$,DOM=*NEXT)A$
0199 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0312 IOLIST X3$,M1$,M2$,M3$,M4$,A9$
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1,_CUR_KEY$=""
0430 DIM _KEYS$[1:1]; _KEYS$[1]="ML_OPER$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0512 DIM DE$[10]; DE$[1]="Reserved",DE$[2]="Return/Enter",DE$[3]="Backspace Key",DE$[4]="Back Arrow Key",DE$[5]="End Screen",DE$[6]="Set Data Defaults",DE$[7]="Right Arrow Key",DE$[8]="Delete Key",DE$[9]="Up Arrow Key",DE$[10]="Down Arrow Key"
0520 MESSAGE_LIB _SV_MSGLIB$
0525 B$=A$(13,120),C$=A$(133,80),D$=A$(213,120)
0540 FOR XX=1 TO 10
0550 LIST_BOX LOAD LB_CONTROL.CTL,0,STR(XX-1)+SEP+DE$[XX]+SEP+B$(XX*12-11,12)+SEP+C$(XX*8-7,8)
0555 LIST_BOX LOAD LB_FUNCTION.CTL,0,"<F"+STR(XX)+">"+SEP+D$(XX*12-11,12)
0580 NEXT XX
0899 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1015 _CURKEY=1
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 _KEY$="CMP"+ML_COMP$
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1280 DIM A$(196)
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 BACK_A$=A$; GOSUB CREATE_VAR
1440 WRITE (_FIL_NO,KEY=K9$)A$
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY,CMD_STR$="E"
1500 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 IF _KEY$=_CUR_KEY$ THEN _KEY$=KEN(_FIL_NO,END=END_OF_FILE) ! Get past extracted record
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ (_FIL_NO,KEY=_KEY$)A$
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 EXTRACT (_FIL_NO,KEY=_KEY$)
3070 RETURN 
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=ML_OPER.CTL,_FIRST_FIELD=ML_TM1.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
8910 DEF FND$(Z9$)=Z9$(3,2)+"/"+Z9$(5,2)+"/"+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN ML_COMP$=""
13030 CB_REM_LOC$="N",ML_ACCESS$="",ML_ADDR1$="",ML_ADDR2$="",ML_ADDR3$="",ML_CURR_SYMB$="",ML_DIR_DATA$="",ML_EXT$="",ML_NAME$="",ML_PHONE$="",ML_SORT$=""
13040 ML_MASK$="",CB_BATCH$=" "
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 SELECT_CONTROL:
15005 DISABLE CONTROL BT_EXIT.CTL
15006 LB_CTRLS=EVN(ID$+".CTL")
15010 LIST_BOX READ LB_CTRLS,IDX
15020 LIST_BOX FIND LB_CTRLS,IDX,VAL$
15025 LIST_BOX DISABLE LB_CONTROL.CTL; LIST_BOX DISABLE LB_FUNCTION.CTL
15027 IF LB_CTRLS<>10001 THEN XX=POS(SEP=VAL$),SS$=VAL$(1,XX-1),SSS$=VAL$(XX+1),ML_OLD_HEX.CTL'VALUE$=STP(SSS$),ML_OPTION$=SS$,ORIG=XX; GOTO 15040
15030 XX=POS(SEP=VAL$,-1),ML_OLD_HEX.CTL'VALUE$=STP(VAL$(XX-12,12)),ML_OPTION$=VAL$,ORIG=XX
15040 XX=POS(SEP=ML_OPTION$); IF XX<>0 THEN ML_OPTION$(XX,1)=" "; GOTO *SAME
15050 ML_OPTION.CTL'VALUE$=ML_OPTION$
15060 CALL "*wingrp;show",OPTION.GRP$
15070 BB$=""; SET_FOCUS ML_NEW_HEX.CTL; SET_FOCUS 0
15071 PRINT 'EE','CURSOR'("ON"),'CURSOR'(0),@(51,18)," ",; READ RECORD (0,SIZ=1)AA$
15072 BB$=BB$+AA$,AA$=""; READ RECORD (0,SIZ=1,TIM=1,ERR=*NEXT)AA$
15073 IF AA$="" THEN GOTO 15110
15074 BB$=BB$+AA$,AA$=""; READ RECORD (0,SIZ=1,TIM=1,ERR=*NEXT)AA$
15075 IF AA$="" THEN GOTO 15110
15077 BB$=BB$+AA$
15110 ML_NEW_HEX$=HTA(BB$),ML_NEW_HEX.CTL'VALUE$=ML_NEW_HEX$,ML_NEW_HEX.CTL'LINE=18
15120 NEXT_ID=BT_DONE.CTL; RETURN 
15500 END_ENTRY:
15510 LIST_BOX ENABLE LB_CONTROL.CTL; LIST_BOX ENABLE LB_FUNCTION.CTL
15515 ML_NEW_HEX$="",REFRESH_FLG=1,ML_NEW_HEX.CTL'LINE=17
15520 CALL "*WINGRP;HIDE",OPTION.GRP$
15530 ENABLE CONTROL BT_EXIT.CTL
15540 RETURN 
15600 DONE:
15605 IF LB_CTRLS<>10001 THEN VAL$(ORIG+1,12)=PAD("",12," "),VAL$(ORIG+1,LEN(ML_NEW_HEX$))=ML_NEW_HEX$; GOTO 15615
15610 VAL$(ORIG-12,12)=PAD("",12," "),VAL$(ORIG-12,LEN(ML_NEW_HEX$))=ML_NEW_HEX$
15615 LIST_BOX LOAD LB_CTRLS,IDX,*
15620 LIST_BOX LOAD LB_CTRLS,IDX,VAL$
15630 CALL "*WINGRP;HIDE",OPTION.GRP$
15635 CALL "*WINGRP;ENABLE",BUTTONS.GRP$
15640 GOTO END_ENTRY
16000 CREATE_VAR:
16010 FOR A=1 TO 10
16020 LIST_BOX FIND LB_CONTROL.CTL,A,VAL$
16030 AA$=VAL$(1,POS(SEP=VAL$)-1),VAL$=VAL$(POS(SEP=VAL$)+1)
16040 BB$=VAL$(1,POS(SEP=VAL$)-1),VAL$=VAL$(POS(SEP=VAL$)+1)
16050 CC$=VAL$(1,POS(SEP=VAL$)-1),VAL$=VAL$(POS(SEP=VAL$)+1)
16060 DD$=VAL$,B1$=B1$+CC$,C1$=C1$+DD$
16070 LIST_BOX FIND LB_FUNCTION.CTL,A,VAL$
16080 AA$=VAL$(POS(SEP=VAL$)+1)
16090 D1$=D1$+AA$
16100 NEXT A
16120 A$(13,120)=B1$,A$(133,80)=C1$,A$(213,120)=D1$
16130 RETURN 
