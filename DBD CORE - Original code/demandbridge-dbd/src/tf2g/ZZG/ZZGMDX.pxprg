0010 ! ZZGMDX - Statistical Types Setup
0035 REM "5.5 - 09/07/07 - 15.743055 - jdf - SSP# 211380
0037 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
0040 REM "Copyright 2007 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "ZZGMDX","../ZZG/ZZ.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZZPARM"
0170 _FIL_NO=FN%FFN(_FILE_NAME$); IF _NIL_NO<=0 THEN _FIL_NO=HFN; OPEN (_FIL_NO,ERR=OPEN_ERR)_FILE_NAME$ ! [205471]-changed FFN() to FN%FFN()
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="ML_SSC$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 ! IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0965 %GRID=0
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 _KEY$="STAT"+ML_SSC$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1245 DIM A$(225); A$(1,4)="STAT",A$(5,3)=ML_SSC$
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1255 GOSUB LOAD_GRID; ML_SSC$=A$(5,3)
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1435 GOSUB ASSIGN_PRG; GOSUB SEL_GRID; A$(49,170)=PAD("",170," "),A$(49,LEN(VAR$))=VAR$
1436 A$(49,170)=PAD("",170," "),A$(49,LEN(VAR$))=VAR$
1440 WRITE (_FIL_NO,KEY=_KEY$)A$,A0
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ (_FIL_NO,KEY=_KEY$)A$,A0
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 GOSUB ASSIGN_LIB; GOSUB LOAD_GRID
3070 RETURN 
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3805 IF CHANGE_FLG=0 THEN GOSUB CLEAR_FIELDS
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=ML_SSC.CTL,_FIRST_FIELD=ML_NAME.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR"),_MSG_DIRECTORY$=MSG("DIRECTORY"),_MSG_END_OF_FIL$=MSG("END_OF_FIL"),_MSG_FILOPNERR1$=MSG("FILOPNERR1"),_MSG_JUST_CHECK$=MSG("JUST_CHECK"),_MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT"),_MSG_NON_NUMER$=MSG("NON_NUMER"),_MSG_NOT_FOUND$=MSG("NOT_FOUND"),_MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG"),_MSG_PRECEDING$=MSG("PRECEDING"),_MSG_PREFIX$=MSG("PREFIX"),_MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD"),_MSG_REC_CR_NEW$=MSG("REC_CR_NEW"),_MSG_REC_LOCKED$=MSG("REC_LOCKED"),_MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND"),_MSG_REC_NO_1ST$=MSG("REC_NO_1ST"),_MSG_REC_NO_LST$=MSG("REC_NO_LST"),_MSG_REC_REMOVE$=MSG("REC_REMOVE"),_MSG_REC_UPDADD$=MSG("REC_UPDADD"),_MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS"),_MSG_START_FILE$=MSG("START_FILE"),_MSG_UPDATE$=MSG("UPDATE"),_MSG_UPD_OTHER1$=MSG("UPD_OTHER1"),_MSG_UPD_OTHER2$=MSG("UPD_OTHER2"),_MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING"),_MSG_CANNOT_WRITE$=MSG("CANT_WRITE"),_MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 ML_SSC$="",ML_NAME$=""
13030 ML_SFN$="",ML_PACK$="U"
13040 ML_VFN$="",ML_DDF$="",ML_FC$=""
13050 ML_KAT$="",ML_MLK$=""
13060 ML_SETPGM$=""
13070 GOSUB DEL_GRID
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=MESSAGE_DATE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=MESSAGE_TIME.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=FROM.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ASSIGN_LIB:
15010 ML_SSC$=A$(5,3),ML_NAME$=A$(8,20)
15020 ML_SFN$=A$(28,6),ML_PACK$=A$(34,1)
15030 ML_VFN$=A$(35,6),ML_DDF$=A$(41,3),ML_FC$=A$(44,2)
15040 ML_KAT$=A$(46,3),ML_MLK$=STR(A0)
15050 ML_SETPGM$=A$(219,6),REFRESH_FLG=1
15060 RETURN 
15100 ASSIGN_PRG:
15110 A$(1,4)="STAT",A$(5,3)=ML_SSC$,A$(8,20)=ML_NAME$
15120 A$(28,6)=ML_SFN$,A$(34,1)=ML_PACK$
15130 A$(35,6)=ML_VFN$,A$(41,3)=ML_DDF$,A$(44,2)=ML_FC$
15140 A$(46,3)=ML_KAT$,A0=NUM(ML_MLK$)
15150 A$(219,6)=ML_SETPGM$
15160 RETURN 
16000 CHECK_QRY:
16010 ENTER TF_VALUE$,REC$
16020 IF LEN(TF_VALUE$)<>7 THEN EXIT 123
16025 IF LEN(REC$)<220 THEN EXIT 123
16030 EXIT 
23000 LOAD_GRID:
23003 B1$=A$(49,170)
23005 LINES=0,_BKEY$=_KEY$,BPO_NUMBER$=PO_NUMBER$,GRIDD$="",OPR$="",MAX_LINES=0
23008 ! X'COLUMM=-1,X'ROW=2,X'CELLTYPE$="Normal"
23009 GRID HIDE GRID_TYPE.CTL
23010 FOR AA=1 TO LEN(B1$) STEP 17
23045 IF AA>1 THEN GRIDD$=GRIDD$+"A"; GRID LOAD GRID_TYPE.CTL,1,0,"A"
23050 LINES=LINES+1,GRID_TYPE.CTL'ROW=LINES,GRID_TYPE.CTL'COLUMN=-1,GRID_TYPE.CTL'VALUE$=STR(LINES:"000")
23055 AA$=B1$(AA,17)
23060 GRID WRITE GRID_TYPE.CTL,1,LINES,AA$(1,1)
23062 GRID_TYPE.CTL'COLUMN=1,GRID_TYPE.CTL'ROW=LINES,GRID_TYPE.CTL'LEN=1
23065 IF STP(AA$(1,1))<>"" THEN GRID LOCK GRID_TYPE.CTL,1,LINES
23070 IF AA$(2,1)="Y" THEN CK=1 ELSE CK=0 END_IF ; GRID WRITE GRID_TYPE.CTL,2,LINES,STR(CK)
23072 GRID WRITE GRID_TYPE.CTL,3,LINES,AA$(3,3); GRID_TYPE.CTL'COLUMN=3,GRID_TYPE.CTL'LEN=3
23073 IF STP(AA$(3,3))<>"" THEN GRID LOCK GRID_TYPE.CTL,3,LINES
23074 GRID WRITE GRID_TYPE.CTL,4,LINES,AA$(6)
23075 GRID_TYPE.CTL'COLUMN=4,GRID_TYPE.CTL'LEN=12
23080 NEXT AA
23100 END_LOAD_GRID:
23120 IF LINES=0 THEN GOTO PROC_RE
24510 PROC_RE: _KEY$=_BKEY$
24515 GRID SHOW GRID_TYPE.CTL
24520 RETURN 
24530 GRID_FOCUS:
24535 IF ID$<>"GRID_TYPE" THEN GOTO *RETURN
24540 GRID SELECT READ GRID_TYPE.CTL,COL,ROW
24542 GRID FIND GRID_TYPE.CTL,COL,ROW,VAR$
24543 NEXT_ID=GRID_TYPE.CTL; IF COL=4 AND ROW=10 THEN %GRID=0
24545 ON COL GOTO *NEXT,CHECK_CODE,CHECK_ACCESS,CHECK_MASK,CHECK_DESC
24550 IF COL=1 THEN GRID GOTO GRID_TYPE.CTL,2,ROW; NEXT_ID=GRID_TYPE.CTL
24560 IF COL=2 AND ROW+1<=LINES THEN GRID GOTO GRID_TYPE.CTL,1,ROW+1; NEXT_ID=GRID_TYPE.CTL
24599 RETURN 
24600 ADD_LINES:
24610 LINES=LINES+1
24620 GRID ADD GRID_TYPE.CTL,0,LINES
24630 GRID_TYPE.CTL'ROW=LINES,GRID_TYPE.CTL'COLUMN=-1,GRID_TYPE.CTL'VALUE$=STR(LINES:"000"),GRID_TYPE.CTL'FONT$="MS Sans Serif"
24635 X=GRID_TYPE.CTL,X'COLUMN=1,X'ROW=LINES
24640 GRID WRITE GRID_TYPE.CTL,1,LINES,PRINT_LINE$
24645 GRID GOTO GRID_TYPE.CTL,1,LINES; NEXT_ID=GRID_TYPE.CTL
24650 RETURN 
25000 CHECK_CODE:
25010 IF STP(VAR$)="" OR LEN(VAR$)>1 THEN MSGBOX MSG("INVA_LEN"),MSG("WARNING"),"INFO,TIM=4"; GRID GOTO GRID_TYPE.CTL,COL,ROW; EXIT 
25020 VAR$=UCS(VAR$); GRID WRITE GRID_TYPE.CTL,COL,ROW,VAR$
25025 GRID GOTO GRID_TYPE.CTL,2,ROW
25030 RETURN 
25040 CHECK_ACCESS:
25050 GRID GOTO GRID_TYPE.CTL,3,ROW
25060 RETURN 
25070 CHECK_MASK:
25080 NO_NUM=1,VAR=NUM(VAR$,ERR=*NEXT),NO_NUM=0
25090 IF NO_NUM=1 OR STP(VAR$)="" OR LEN(VAR$)>3 THEN MSGBOX MSG("INVA_LEN"),MSG("WARNING"),"INFO,TIM=4"; GRID GOTO GRID_TYPE.CTL,COL,ROW; EXIT 
25100 GRID GOTO GRID_TYPE.CTL,4,ROW
25110 RETURN 
25120 CHECK_DESC:
25130 IF STP(VAR$)="" OR LEN(VAR$)>12 THEN MSGBOX MSG("INVA_LEN"),MSG("WARNING"),"INFO,TIM=4"; GRID GOTO GRID_TYPE.CTL,COL,ROW; EXIT 
25140 ROW=ROW+1
25150 IF ROW>10 THEN ROW=10
25160 GRID GOTO GRID_TYPE.CTL,1,ROW
25170 RETURN 
25700 SEL_GRID: VAR$=""
25710 FOR AA=1 TO LINES
25720 X=GRID_TYPE.CTL
25725 GRID FIND X,1,AA,CODE$; IF STP(CODE$)="" THEN EXITTO DEL_GRID ELSE VAR$=VAR$+CODE$
25730 GRID FIND X,2,AA,CODE$; IF CODE$="0" THEN CODE$="N" ELSE CODE$="Y" END_IF ; VAR$=VAR$+CODE$
25732 GRID FIND X,3,AA,CODE$; VAR$=VAR$+PAD(CODE$,3," ")
25740 GRID FIND X,4,AA,CODE$; VAR$=VAR$+PAD(CODE$,12," ")
25770 NEXT AA
25772 DEL_GRID:IF LINES=0 THEN GOTO *RETURN
25773 FOR AA=2 TO LINES; GRID DELETE GRID_TYPE.CTL,0,2; NEXT AA
25775 CHANGE_FLG=0,REFRESH_FLG=1,CHANGE_FLG=0
25780 GRID WRITE GRID_TYPE.CTL,1,1,""
25790 GRID WRITE GRID_TYPE.CTL,2,1,""
25792 GRID WRITE GRID_TYPE.CTL,3,1,""
25793 GRID WRITE GRID_TYPE.CTL,4,1,""
25800 IF MAX_LINES=0 THEN GOTO *RETURN
25900 RETURN 
26000 CREATE_REC:
26020 PO_DIV$=PO_NUMBER$(1,%PO_DIV_LEN),PO_NUM$=PO_NUMBER$(%PO_DIV_LEN+1)
26030 PO_LINE_NUM$="001",PRINT_LINE$="Y",TF_COMMENT$="",POE_UNUSED_1$=""
26040 _KEY$=PO_NUMBER$+PO_LINE_NUM$
27050 WRITE (_FIL_NO,KEY=_KEY$)
27060 RETURN 
27100 DEL_LN: AB=GRID_TYPE.CTL
27105 IF LINES>MAX_LINES THEN MAX_LINES=LINES
27110 GRID SELECT READ GRID_TYPE.CTL,COL,ROW
27120 GRID FIND GRID_TYPE.CTL,1,ROW,SEL$,ERR=NO_LN
27130 GRID FIND GRID_TYPE.CTL,2,ROW,SEL1$
27140 COLOR$="Light Red",AB'ROW=ROW,AB'COLUMN=2,AB'BACKCOLOR$=COLOR$,AB'COLUMN=1,AB'BACKCOLOR$=COLOR$
27150 MSGBOX MSG("WISH")+" "+MSG("DELETE")+" "+MSG("LINE")+" "+STR(ROW:"000B")+SEP+"("+SEL$+"-"+STP(SEL1$)+")",MSG("CONFIRMING"),"?,YESNO",OPT$
27155 AB'ROW=ROW,AB'COLUMN=2,AB'BACKCOLOR$="White",AB'COLUMN=1,AB'BACKCOLOR$="White"
27160 IF OPT$="NO" THEN EXIT 
27170 GRID DELETE GRID_TYPE.CTL,0,ROW
27180 LINES=LINES-1
27190 FOR AA=ROW TO LINES
27200 GRID_TYPE.CTL'ROW=AA,GRID_TYPE.CTL'COLUMN=-1,GRID_TYPE.CTL'VALUE$=STR(AA:"000")
27210 NEXT AA
27220 ! RETURN ! SSP 197212
27300 INS_LN:
27310 GRID SELECT READ GRID_TYPE.CTL,COL,ROW
27320 ! MSGBOX MSG("WISH")+" "+MSG("INSERT")+" "+MSG("LINE")+" "+STR(ROW:"000B"),MSG("CONFIRMING"),"!,YESNO",OPT$ !SSP 197212
27330 ! IF OPT$="NO" THEN RETURN ! SSP 197212
27340 ! GRID ADD GRID_TYPE.CTL,0,ROW
27350 LINES=LINES+1,BLINES=LINES,LINES=ROW-1
27355 GOSUB ADD_LINES; LINES=BLINES; BLINES=0
27357 GRID_TYPE.CTL'FONT$="MS Sans Serif"
27360 FOR AA=ROW TO LINES
27370 GRID_TYPE.CTL'ROW=AA,GRID_TYPE.CTL'COLUMN=-1,GRID_TYPE.CTL'VALUE$=STR(AA:"000"),GRID_TYPE.CTL'FONT$="MS Sans Serif"
27380 NEXT AA
27390 RETURN 
27400 NO_LN:
27410 MSGBOX MSG("NO_LN"),MSG("WARNING"),"!",OPT$
27420 RETURN 
28000 DEL_RECORDS:
28001 RETURN 
28010 B_PO$=PO_NUMBER$
28020 READ (_FIL_NO,KEY=B_PO$,DOM=*NEXT)
28025 READ_NXT:
28030 _KEY$=KEY(_FIL_NO,END=END_DEL_RECORDS); READ (_FIL_NO)
28040 IF MID(_KEY$,1,LEN(B_PO$))<>B_PO$ THEN GOTO END_DEL_RECORDS
28050 REMOVE (_FIL_NO,KEY=_KEY$)
28060 GOTO READ_NXT
28070 END_DEL_RECORDS: PO_NUMBER$=B_PO$; RETURN 
56000 REM + Modification History
56002 ! "197212-Program FMGMDA, ZZGMDX In item statistical data (FMS) shows 
56004 REM "205471-Oracle - FFN usage in tf2g progs. to be replaced by FN%FFN  
56006 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
