0010 ! ZWGZZZ - Support Issue Setup
0035 ! "6.0 - 12/05/03 - 9.67 - jir
0040 ! "Copyright 2003 Computer Software Inc.; Norcross, Georgia
0041 ! "        Licensed Software - All Rights Reserved.
0050 PROCESS "ZWGZZZ","../ZZG/ZZ.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0115 DEF FNT$(Z9$)=STR(NUM(Z9$(1,2))-12*POS("13"<=Z9$(1,2),2)+12*POS("00"=Z9$(1,2)):"00")+":"+STR(NUM(Z9$(3,2))*.6:"00")+" "+CHR(65+15*POS("12"<=Z9$(1,2),2))+"M"
0118 DEF FND$(Z9$)=Z9$(3,2)+"/"+Z9$(5,2)+"/"+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZW2"
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0172 _ZW8=HFN,_FILE_NAME$="ZW8"; OPEN (_ZW8,ERR=OPEN_ERR)_FILE_NAME$; GOSUB CREATE_LIST_BOX
0175 _ZW9=HFN,_FILE_NAME$="ZW9"; OPEN (_ZW9,ERR=OPEN_ERR)_FILE_NAME$; GOSUB CREATE_LIST_ZW9
0178 _ZW7=HFN,_FILE_NAME$="ZW7"; OPEN (_ZW7,ERR=OPEN_ERR)_FILE_NAME$; GOSUB CREATE_LIST_ZW7
0180 _ZW5=HFN,_FILE_NAME$="ZW5"; OPEN (_ZW5,ERR=OPEN_ERR)_FILE_NAME$
0185 _SS1=HFN,_FILE_NAME$="SS1"; OPEN (_SS1,ERR=OPEN_ERR)_FILE_NAME$
0190 _SSR=HFN,_FILE_NAME$="SSR"; OPEN (_SSR,ERR=OPEN_ERR)_FILE_NAME$
0192 _ZW4=HFN,_FILE_NAME$="ZW4"; OPEN (_ZW4,ERR=OPEN_ERR)_FILE_NAME$
0193 _ZWD=HFN,_FILE_NAME$="ZWD"; OPEN (_ZWD,ERR=OPEN_ERR)_FILE_NAME$
0194 _ZWE=HFN,_FILE_NAME$="ZWE"; OPEN (_ZWE,ERR=OPEN_ERR)_FILE_NAME$
0195 _ZWF=HFN,_FILE_NAME$="ZWF"; OPEN (_ZWF,ERR=OPEN_ERR)_FILE_NAME$
0196 _ZWH=HFN,_FILE_NAME$="ZWH"; OPEN (_ZWH,ERR=OPEN_ERR)_FILE_NAME$
0197 _ZWP=HFN,_FILE_NAME$="ZWP"; OPEN (_ZWP,ERR=OPEN_ERR)_FILE_NAME$
0199 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1,_CUR_KEY$=""
0430 DIM _KEYS$[1:1]; _KEYS$[1]="REF_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0562 NEXT_ID=INITIAL_DATE.CTL
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ! ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 CLOSE (_ZW5),(_SS1),(_SSR),(_ZW4),(_ZWD),(_ZWE),(_ZWF),(_ZWH),(_ZW8),(_ZW9),(_ZW7),(_ZWP)
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 %ST$="",%STR$="",%ZW9$="",%ZW7$=""
0999 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1015 XX=NUM(REF_NUM$,ERR=*NEXT),REF_NUM$=PAD(REF_NUM$,6,0,"0"); GOTO 1020
1017 IF STP(REF_NUM$)="C" THEN REF_NUM$="CLIENT",REF_NUM.CTL'VALUE$="CLIENT",NEXT_ID=CLIENT_CODE.CTL; CALL "*WINGRP;ENABLE",CLIENT.GRP$; NEXT_ID=CLIENT_CODE.CTL; EXIT ELSE REF_NUM$=PAD(REF_NUM$,5," ")
1020 REF_NUM.CTL'VALUE$=REF_NUM$
1025 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD,INITIAL_DATE$=%X3$(21,6),INITIAL_TIME$=STR(100*TIM:"0000"),STAT_DATE$=%X3$(21,6),STAT_TIME$=INITIAL_TIME$,PRIORITY$="1",BILLING_CODE$="S",TOTAL_TIME_SPENT$=".25",STAT_CODE$=" "
1271 VAL$=INITIAL_TIME$; GOSUB GET_TIME; HOUR$=HH$,MINUTE$=MM$,DB_TYPE$=TZ$
1272 VAL$=STAT_TIME$; GOSUB GET_TIME; HOUR1$=HH$,MINUTE1$=MM$,DB_TYPE1$=TZ$
1275 SSP_PERSON$="   ",XX=POS(SSP_PERSON$+" - "=%ZW7$); IF XX<>0 THEN DB_SSP_PERSON$=%ZW7$(XX,31)
1280 REFRESH_FLG=1
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1435 CATEGORY$=DB_CATEGORY$(1,2),SSP_PERSON$=MID(DB_SSP_PERSON$,1,3)
1437 SOLUTION_PROVIDER$=MID(DB_SOLUTION_PROVIDER$,1,3),RESPONDING_SSP$=MID(DB_RESPONDING_SSP$,1,3)
1438 CREDIT_RESP_PERSON$=MID(DB_CREDIT_RESP_PERSON$,1,3)
1440 WRITE (_FIL_NO,KEY=_KEY$)
1450 GOSUB WRITE_REMOVE_SORT_KEY
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 WRT=1; GOSUB WRITE_REMOVE_SORT_KEY; WRT=0
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 IF _KEY$=_CUR_KEY$ THEN _KEY$=KEN(_FIL_NO,END=END_OF_FILE) ! Get past extracted record
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 EXTRACT (_FIL_NO,KEY=_KEY$)
3060 _CUR_KEY$=_KEY$
3065 XX=POS(CATEGORY$+" - "=%ZW9$); IF XX<>0 THEN DB_CATEGORY$=%ZW9$(XX,25)
3066 XX=POS(SSP_PERSON$+" - "=%ZW7$); IF XX<>0 THEN DB_SSP_PERSON$=%ZW7$(XX,31)
3067 XX=POS(SOLUTION_PROVIDER$+" - "=%ZW7$); IF XX<>0 THEN DB_SOLUTION_PROVIDER$=%ZW7$(XX,31)
3068 XX=POS(RESPONDING_SSP$+" - "=%ZW7$); IF XX<>0 THEN DB_RESPONDING_SSP$=%ZW7$(XX,31)
3070 XX=POS(CREDIT_RESP_PERSON$+" - "=%ZW7$); IF XX<>0 THEN DB_CREDIT_RESP_PERSON$=%ZW7$(XX,31)
3080 GOSUB SEL_ENHA_NUM; GOSUB SEL_CLIENT; GOSUB SEL_SSR; GOSUB SAVE_SORT_KEY
3085 VAL$=INITIAL_TIME$; GOSUB GET_TIME; HOUR$=HH$,MINUTE$=MM$,DB_TYPE$=TZ$
3090 VAL$=STAT_TIME$; GOSUB GET_TIME; HOUR1$=HH$,MINUTE1$=MM$,DB_TYPE1$=TZ$
3100 IF STP(SCHEDULE_TIME$)<>"" THEN VAL$=SCHEDULE_TIME$; GOSUB GET_TIME; HOUR2$=HH$,MINUTE2$=MM$,DB_TYPE2$=TZ$ ELSE HOUR2$="",MINUTE2$="",DB_TYPE2$=" "
3199 RETURN 
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=REF_NUM.CTL,_FIRST_FIELD=INITIAL_DATE.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 TOTAL_TIME_SPENT$=STR(TOTAL_TIME_SPENT)
10030 ESTIMATED_HOURS$=STR(ESTIMATED_HOURS)
10040 WORK_ORDER_AMT_BILLD$=STR(WORK_ORDER_AMT_BILLD)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="TOTAL_TIME_SPENT",_X=TOTAL_TIME_SPENT.CTL,TOTAL_TIME_SPENT=NUM(TOTAL_TIME_SPENT$,ERR=NON_NUMERIC)
11030 _X$="ESTIMATED_HOURS",_X=ESTIMATED_HOURS.CTL,ESTIMATED_HOURS=NUM(ESTIMATED_HOURS$,ERR=NON_NUMERIC)
11040 _X$="WORK_ORDER_AMT_BILLD",_X=WORK_ORDER_AMT_BILLD.CTL,WORK_ORDER_AMT_BILLD=NUM(WORK_ORDER_AMT_BILLD$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN REF_NUM$=""
13030 INITIAL_DATE$=""
13040 INITIAL_TIME$=""
13050 CLIENT$="",CLIENT_NAME$="",OLD_NUM_DESC$="",PSW_DESC$=""
13060 CONT_PERSON$=""
13070 CLIENT_PHONE_NUM$=""
13080 SUPPORT_DESC_1$=""
13090 SUPPORT_DESC_2$=""
13100 CATEGORY$=""
13110 PROGRAM$=""
13120 ERROR_NUM$=""
13130 PROGRAM_LINE$=""
13140 SSP_PERSON$=""
13150 PRIORITY$=""
13160 STAT_CODE$=""
13170 STAT_DATE$=""
13180 STAT_TIME$=""
13190 BILLING_CODE$=" "
13200 PROCESSED_BY_ACCTG$=""
13210 PROMISE_DATE$=""
13220 MENU_INDEX$=""
13230 EXPIRATION_DATE$=""
13240 SCHEDULE_DATE$=""
13250 SCHEDULE_TIME$=""
13260 NOTES$=""
13270 FOLLOWUP_TYPE$=""
13280 CLIENT_CODE$=""
13290 SOLUTION_PROVIDER$=""
13300 RESPONDING_SSP$=""
13310 OLD_NUM$=""
13320 E_MAIL_ADDR$=""
13330 CREDIT_RESP_PERSON$=""
13340 PARTY_SOFTWARE_3RD$=""
13350 EMAIL_ADDRESS$=""
13360 DONT_USE$=""
13370 UNUSED$=""
13380 TOTAL_TIME_SPENT=0
13390 ESTIMATED_HOURS=0
13400 WORK_ORDER_AMT_BILLD=0
13410 DB_CATEGORY$="",DB_CREDIT_RESP_PERSON$="",DB_SOLUTION_PROVIDER$="",DB_SSP_PERSON$="",DB_RESPONDING_SSP$="",STAT_CODE$=" ",BILLING_CODE$="S",FOLLOWUP_TYPE$=" "
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1,NEXT_ID=REF_NUM.CTL
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 CREATE_LIST_BOX:! %ST$=DIM(20)+"|",%STR$=" "
15010 ZW8_K$=KEY(_ZW8,END=END_LIST); READ (_ZW8)ZW8$
15020 %ST$=%ST$+STP(ZW8$(2,20))+"|",%STR$=%STR$+ZW8$(1,1)
15030 GOTO 15010
15050 END_LIST:RETURN 
15100 CREATE_LIST_ZW9: %ZW9$=""
15110 READ (_ZW9,END=END_ZW9)ZW9$
15120 %ZW9$=%ZW9$+ZW9$(1,2)+" - "+ZW9$(3,20)+"|"
15130 GOTO 15110
15140 END_ZW9:RETURN 
15200 CREATE_LIST_ZW7: %ZW7$=""
15210 READ (_ZW7,END=END_ZW7)ZW7$
15220 %ZW7$=%ZW7$+ZW7$(1,3)+" - "+ZW7$(4,25)+"|"
15230 GOTO 15210
15240 END_ZW7:RETURN 
15300 SEL_ENHA_NUM: REFRESH_FLG=1,OLD_NUM_DESC$=""
15310 IF STP(OLD_NUM$)="" THEN RETURN 
15320 XX=NUM(OLD_NUM$,ERR=*NEXT),OLD_NUM$=PAD(OLD_NUM$,5,0,"0"); GOTO 15340
15330 OLD_NUM$=PAD(OLD_NUM$,5,"0")
15340 READ (_ZW5,KEY=OLD_NUM$,DOM=NO_ZW5)ZW5$
15350 OLD_NUM_DESC$=ZW5$(80,60)
15360 RETURN 
15370 NO_ZW5: OLD_NUM$="",NEXT_ID=OLD_NUM.CTL; RETURN 
15400 SEL_CLIENT: REFRESH_FLG=1,CLIENT_NAME$=""
15410 XX=NUM(CLIENT_CODE$,ERR=*NEXT),CLIENT_CODE$=PAD(CLIENT_CODE$,8,0,"0"),CLIENT_CODE$=PAD(CLIENT_CODE$,10,"0"); GOTO 15420
15415 CLIENT_CODE$=PAD(CLIENT_CODE$,10," ")
15420 READ (_SS1,KEY=CLIENT_CODE$,DOM=NO_SS1)SS1$
15430 CLIENT_NAME$=SS1$(11,35),EMAIL_ADDRESS$=STP(MID(SS1$,631,40))
15435 IF POS("CLIENT"=REF_NUM$)<>0 THEN CONT_PERSON$=SS1$(155,20),CLIENT_PHONE_NUM$=SS1$(195,14); GOSUB PROCESS_SCREEN; REF_NUM$="",CLIENT_NAME$="",CHANGE_FLG=0,CLIENT_CODE$=""; CALL "*WINGRP;DISABLE",CLIENT.GRP$; NEXT_ID=REF_NUM.CTL; EXIT 
15440 RETURN 
15450 NO_SS1:IF ID$="CLIENT_CODE" THEN CLIENT_CODE$="",NEXT_ID=CLIENT_CODE.CTL END_IF ; RETURN 
15500 SEL_SSR: REFRESH_FLG=1,PSW_DESC$=""
15510 IF STP(PARTY_SOFTWARE_3RD$)="" THEN RETURN 
15520 XX=NUM(PARTY_SOFTWARE_3RD$,ERR=*NEXT),PARTY_SOFTWARE_3RD$=PAD(PARTY_SOFTWARE_3RD$,5,0,"0"); GOTO 15540
15530 PARTY_SOFTWARE_3RD$=PAD(PARTY_SOFTWARE_3RD$,5," ")
15540 READ (_SSR,KEY=PARTY_SOFTWARE_3RD$,DOM=NO_SSR)SSR$
15550 PSW_DESC$=SSR$(6,40)
15560 RETURN 
15570 NO_SSR: PARTY_SOFTWARE_3RD$="",NEXT_ID=PARTY_SOFTWARE_3RD.CTL; RETURN 
15600 NXT_ASSIGN:
15610 EXTRACT (_ZWP,KEY="SSP")QQ$,Q0; REF_NUM$=STR(Q0:"000000"),Q0=Q0+1
15620 WRITE (_ZWP,KEY="SSP")QQ$,Q0
15630 REF_NUM.CTL'VALUE$=REF_NUM$,ID$="REF_NUM",_KEY$=REF_NUM$
15640 GOSUB 1030
15650 RETURN 
16000 SEL_OPTIONS:
16005 _SOUND_NAME$="open.wav"; PERFORM "$CTL-10;Sound_play"
16006 IF STP(CLIENT_CODE$)="" THEN NOO$="D" ELSE NOO$=""
16010 OPT_MNU$="[&Hard Copy=1,&Client Profile=2"+NOO$+",&Send Mail=3,&Internal Note=4,&Add *clientout*=5,&Notes Review=6,,&Research=7,&Enhancement Number=8,&File Layouts=9,&Programs Changed=10,Add *cl&ientin*=11,,E&xit=12]"
16020 POPUP_MENU OPT_MNU$,OPT
16025 IF OPT=12 THEN OPT=0
16030 ON OPT GOSUB *NEXT,HARD_COPY,CLIENT_PROFILE,SEND_MAIL,INTERNAL_NOTE,CLIENTOUT,NOTES_REVIEW,RESEARCH,ENHA_NUMBER,FILE_LAYOUTS,PGM_CHANGED,CLIENTIN
16035 _SOUND_NAME$="close.wav"; PERFORM "$CTL-10;Sound_play"
16040 EXIT 
16100 CLIENT_PROFILE:
16110 IF STP(CLIENT_CODE$)="" THEN GOTO 16020
16120 PROCESS "SSGMAZ","../SSG/SS.EN",CLIENT_CODE$
16130 RETURN 
16140 SEND_MAIL:
16150 PROCESS "GGOPTION.2","../ZZG/ZZ.EN"
16160 RETURN 
16170 INTERNAL_NOTE:
16171 CLIENTOUT:
16172 NOTES_REVIEW:
16173 CLIENTIN:
16190 H0$="z.csi/tfin"
16200 CALL "ZW2ZZY",%X3$,%X4$,REF_NUM$,"R","ZW4"
16210 Q$="ssp"+FID(0)
16220 IF OPT=5 THEN TEMP$="clientout" ELSE IF OPT=4 THEN TEMP$="internal note" ELSE TEMP$="clientin"
16230 S2$="umask 0;echo "+$220A$+"*"+TEMP$+"*"+%X3$(40,3)+"*"+FND$(%X3$(21,6))+"*"+FNT$(STR(INT(100*TIM):"0000"))+"*"+$0A22$
16240 Q$="ssp"+FID(0); S2$=S2$+" >> ./"+H0$+"/"+Q$
16245 PRINT 'DIALOGUE'(5,3,90,28,"Internal Note Reference : "+REF_NUM$,OPT="*S"),'CS','_WHITE'
16248 PRINT 'MESSAGE'('BLUE'+"Return to TopForm By Typing : q!"),'CURSOR'(6)
16249 IF OPT=6 THEN GOTO 16260
16250 INVOKE S2$
16260 Q$="umask 0; cd ./"+H0$+"; vi -c "+$22$+"$"+$22$+" "+Q$
16270 INVOKE Q$
16280 PRINT 'POP','CURSOR'(0),
16290 CALL "ZW2ZZY",%X3$,%X4$,REF_NUM$,"W","ZW4"
16300 RETURN 
16310 RESEARCH:
16320 PROCESS "ZWGZZZ.1","../ZZG/ZZ.EN",PROGRAM$,ERROR_NUM$,PROGRAM_LINE$
16330 RETURN 
16340 INIT_RESEARCH:
16350 _ZWE=HFN,_FILE_NAME$="ZWE"; OPEN (_ZWE,ERR=OPEN_ERR)_FILE_NAME$
16360 _ZW2=FFN("ZW2"),_ZW4=FFN("ZW4"),_SS1=FFN("SS1")
16370 RETURN 
16380 POST_DISPLAY_RESEARCH: SEARCH$=ARG_1$+ARG_2$+ARG_3$
16385 CALL "*WINGRP;HIDE",HIDE.GRP$
16390 READ (_ZWE,KEY=SEARCH$,DOM=*NEXT)
16400 ZWE_REC:
16410 ZWE_K$=KEY(_ZWE,END=END_ZWE); READ (_ZWE)
16420 IF MID(ZWE_K$,1,LEN(SEARCH$))<>SEARCH$ THEN GOTO END_ZWE
16430 READ (_ZW2,KEY=ZWE_K$(17,6),DOM=ZWE_REC)
16440 READ DATA FROM ZWE_K$(17,6) TO IOL=IOL(_ZW2:KEY,ERR=*NEXT) ! load fields from external key
16441 IF FROM_DATE$<>"" AND STAT_DATE$<FROM_DATE$ THEN GOTO ZWE_REC
16442 READ (_ZW4,KEY=ZWE_K$(17,6),DOM=*NEXT)
16445 NOTE1$="No"; ZW4_K$=KEY(_ZW4,END=*NEXT); IF MID(ZW4_K$,1,6)=ZWE_K$(17,6) THEN NOTES1$="Yes"
16450 DIM SS1$(725); READ (_SS1,KEY=CLIENT_CODE$,DOM=*NEXT)SS1$
16455 XX=POS(SSP_PERSON$+" - "=%ZW7$); IF XX<>0 THEN DB_SSP_PERSON$=%ZW7$(XX,31)
16500 IDX=IDX+1; LIST_BOX LOAD LB_LINE.CTL,IDX,REF_NUM$+SEP+FND$(STAT_DATE$)+SEP+SUPPORT_DESC_1$+SEP+SS1$(11,35)+SEP+NOTES1$
16510 IDX=IDX+1; LIST_BOX LOAD LB_LINE.CTL,IDX," "+SEP+FNT$(STAT_TIME$)+SEP+SUPPORT_DESC_2$+SEP+DB_SSP_PERSON$
16515 IDX=IDX+1; LIST_BOX LOAD LB_LINE.CTL,IDX," "+SEP
16520 GOTO ZWE_REC
16600 END_ZWE:EXIT 
16610 WRAUP_RESEARCH:
16620 IF _ZWE<>0 THEN CLOSE (_ZWE); _ZWE=0
16630 RETURN 
16640 SEL_LINES:
16650 XX=POS(SEP=LB_LINE$),XX$=STP(LB_LINE$(1,XX-1)); IF STP(XX$)="" THEN RETURN 
16660 PROCESS "ZWGZZZ","../ZZG/ZZ.EN",XX$
16670 RETURN 
16680 HARD_COPY:
16685 DIM A(4),Z(256); WRITE (_FIL_NO,KEY=_KEY$); SS=HFN; OPEN (SS)"ZW2"; READ (SS,KEY=REF_NUM$)A$,A{ALL}
16687 Z(3)=_SS1,Z(4)=_ZW9,Z(5)=_ZW7,Z(6)=_ZW8
16690 CALL "../ZZG/ZWGZZH",%X3$,%X4$,A$,A{ALL},Z{ALL}
16695 CLOSE (SS)
16698 RETURN 
17000 ENHA_NUMBER:
17010 PROCESS "ZWGDAA","../ZZG/ZZ.EN"
17020 RETURN 
17030 FILE_LAYOUTS:
17040 CALL "UTGFLA"
17050 RETURN 
17060 PGM_CHANGED:RETURN 
17500 GET_TIME: HH$=VAL$(1,2),MM$=STR(NUM(VAL$(3))*.6:"00"); IF NUM(HH$)<12 THEN TZ$="A" ELSE TZ$="P",HH$=STR(NUM(HH$)-12:"00") END_IF ; RETURN 
17510 PUT_TIME: HH$=VAL$(1,2),MM$=STR(NUM(VAL$(3))/60*100:"00"),VAL$=HH$+MM$; IF TZ$="P" THEN HH$=STR(NUM(HH$)+12:"00"),VAL$=HH$+MM$ END_IF ; RETURN 
18000 SAVE_SORT_KEY:! 18000,10
18010 A1$=REF_NUM$
18020 A2$=STAT_CODE$+PRIORITY$+INITIAL_DATE$+"00"+REF_NUM$
18030 A3$=PROGRAM$+ERROR_NUM$+PROGRAM_LINE$+REF_NUM$
18040 A4$=CLIENT_CODE$+REF_NUM$
18050 A5$=INITIAL_DATE$+INITIAL_TIME$+REF_NUM$
18060 RETURN 
18070 WRITE_REMOVE_SORT_KEY:
18080 ! ZW4
18090 CH=_ZW4,Q$=A1$; GOSUB REMOVE_R
18100 Q$=REF_NUM$; GOSUB WRITE_R
18110 ! ZWD
18120 CH=_ZWD,Q$=A2$; GOSUB REMOVE_R
18130 Q$=STAT_CODE$+PRIORITY$+INITIAL_DATE$+"00"+REF_NUM$; GOSUB WRITE_R
18140 ! 
18150 ! ZWE
18160 CH=_ZWE,Q$=A3$; GOSUB REMOVE_R
18170 Q$=PROGRAM$+ERROR_NUM$+PROGRAM_LINE$+REF_NUM$; GOSUB WRITE_R
18180 ! ZWF
18190 CH=_ZWF,Q$=A4$; GOSUB REMOVE_R
18200 Q$=CLIENT_CODE$+REF_NUM$; GOSUB WRITE_R
18210 ! ZWH
18220 CH=_ZWH,Q$=A5$; GOSUB REMOVE_R
18230 Q$=INITIAL_DATE$+INITIAL_TIME$+REF_NUM$; GOSUB WRITE_R
18240 ! 
18250 RETURN 
18260 REMOVE_R:REMOVE (CH,KEY=Q$,DOM=*RETURN); RETURN 
18270 WRITE_R:IF WRT=0 THEN WRITE (CH,KEY=Q$) END_IF ; RETURN 
18300 PROCESS_SCREEN:
18310 PROCESS "ZWGZZZ.2","../ZZG/ZZ.EN",CLIENT_CODE$,CLIENT_NAME$,CONT_PERSON$,CLIENT_PHONE_NUM$
18320 RETURN 
18330 INIT_CLIENT:
18340 CLIENT_CODE$=ARG_1$,CLIENT_NAME$=ARG_2$,CONT_PERSON$=ARG_3$,CLIENT_PHONE_NUM$=ARG_4$
18400 RETURN 
18410 POST_DISPLAY_CLIENT: NEXT_ID=CATEGORY.CTL
18600 RETURN 
19000 PROCEED:
19010 ! Check for open items
19020 _ZWF=FFN("ZWF"),_ZW2=FFN("ZW2"),_ZW4=FFN("ZW4"),Z1$="",IDX=0,RECS=0
19030 READ (_ZWF,KEY=CLIENT_CODE$,DOM=*NEXT)
19040 NXT_ZWF:
19050 ZWF_K$=KEY(_ZWF,END=END_ZWF); READ (_ZWF)
19060 IF ZWF_K$(1,10)<>CLIENT_CODE$ THEN GOTO END_ZWF
19070 READ (_ZW2,KEY=ZWF_K$(11),DOM=NXT_ZWF)ZW2$
19080 IF CATEGORY$<>"" AND ZW2$(173,2)<>CATEGORY$ THEN GOTO NXT_ZWF
19090 IF STP(SSP_PERSON$)<>"" AND ZW2$(191,3)<>SSP_PERSON$ THEN GOTO NXT_ZWF
19100 IF STATUS_CODE$<>"" AND POS(ZW2$(195,1)=STATUS_CODE$)<>0 THEN GOTO NXT_ZWF
19110 IF DATE_FROM1$<>"" AND ZW2$(208,6)<DATE_FROM1$ THEN GOTO NXT_ZWF
19120 IF DATE_END1$<>"" AND ZW2$(208,6)>DATE_END1$ THEN GOTO NXT_ZWF
19130 IF DATE_FROM2$<>"" AND ZW2$(228,6)<DATE_FROM2$ THEN GOTO NXT_ZWF
19140 IF DATE_END2$<>"" AND ZW2$(228,6)>DATE_END2$ THEN GOTO NXT_ZWF
19150 IF DATE_FROM3$<>"" AND ZW2$(222,6)<DATE_FROM3$ THEN GOTO NXT_ZWF
19160 IF DATE_END3$<>"" AND ZW2$(222,6)>DATE_END3$ THEN GOTO NXT_ZWF
19170 IF BILLING_CODE$<>"" AND POS(ZW2$(206,1)=BILLING_CODE$)=0 THEN GOTO NXT_ZWF
19180 IF PROVIDER$<>"" AND ZW2$(250,3)<>PROVIDER$ THEN GOTO NXT_ZWF
19190 IF RESPONSIBLE$<>"" AND ZW2$(253,3)<>RESPONSIBLE$ THEN GOTO NXT_ZWF
19200 IF FOLLOWUP_TYPE$="A" THEN FOLLOWUP_TYPE$=""
19210 IF FOLLOWUP_TYPE$<>"" AND FOLLOWUP_TYPE$<>ZW2$(239,1) THEN GOTO NXT_ZWF
19220 IF DATE_FROM4$<>"" AND ZW2$(7,6)<DATE_FROM4$ THEN GOTO NXT_ZWF
19230 IF DATE_END5$<>"" AND ZW2$(196,6)>DATE_END5$ THEN GOTO NXT_ZWF
19240 IF DATE_FROM5$<>"" AND ZW2$(196,6)<DATE_FROM5$ THEN GOTO NXT_ZWF
19245 IF STAT_CODE$="a" THEN STAT_CODE$=""
19250 IF STAT_CODE$<>"" AND STAT_CODE$<>ZW2$(195,1) THEN GOTO NXT_ZWF
19260 P=POS(ZW2$(7,6)<=Z1$); IF P=0 THEN Z1$=ZW2$(7,6)+ZW2$(1,6)+Z1$ ELSE Z1$=Z1$(1,P-1)+ZW2$(7,6)+ZW2$(1,6)+Z1$(P)
19265 RECS=RECS+1
19270 GOTO NXT_ZWF
19280 END_ZWF:
19285 IF Z1$="" THEN MSGBOX MSG("NODATA_AVA"),MSG("WARNING"),"INFO,TIM=5"; CMD_STR$="E"; EXIT 
19288 CALL "*WINGRP;SHOW",LB.GRP$; BUTTON HIDE BT_PROCEED.CTL
19289 RECORDS$="Records: "+STR(RECS:"##,###"),REFRESH_FLG=1,RECORDS.CTL'VALUE$=RECORDS$,Z1$=NOT(SRT(NOT(Z1$),12))
19300 FOR AA=1 TO LEN(Z1$) STEP 12
19310 READ (_ZW2,KEY=Z1$(AA+6,6))ZW2$
19312 READ (_ZW4,KEY=ZW2$(1,6),DOM=*NEXT)
19315 NOTE1$="No"; ZW4_K$=KEY(_ZW4,END=*NEXT); IF MID(ZW4_K$,1,6)=ZW2$(1,6) THEN NOTES1$="Yes"
19320 IDX=IDX+1; LIST_BOX LOAD LB_LINE.CTL,IDX,ZW2$(1,6)+SEP+FND$(ZW2$(7,6))+SEP+ZW2$(195,1)+SEP+ZW2$(23,16)+SEP+ZW2$(191,3)+SEP+NOTES1$
19330 IDX=IDX+1; LIST_BOX LOAD LB_LINE.CTL,IDX," "+SEP+ZW2$(53,60)
19340 IF STP(ZW2$(113,60))<>"" THEN IDX=IDX+1; LIST_BOX LOAD LB_LINE.CTL,IDX," "+SEP+ZW2$(113,60)
19350 NEXT AA
19360 NEXT_ID=BT_SEARCH.CTL
19370 RETURN 
19380 SEARCH:
19385 CALL "*WINGRP;HIDE",LB.GRP$
19400 FOR AA=1 TO IDX
19410 LIST_BOX LOAD LB_LINE.CTL,1,*
19420 NEXT AA
19430 BUTTON SHOW BT_PROCEED.CTL
19440 NEXT_ID=BT_PROCEED.CTL
19450 RETURN 
20000 SEL_INITIAL_TIME: REFRESH_FLG=1
20010 HOUR$=STR(NUM(HOUR$):"00"),MINUTE$=STR(NUM(MINUTE$):"00"),VAL$=HOUR$+MINUTE$,TZ$=DB_TYPE$; GOSUB PUT_TIME
20020 INITIAL_TIME$=VAL$
20030 RETURN 
20040 SEL_STAT_TIME: REFRESH_FLG=1
20050 HOUR1$=STR(NUM(HOUR1$):"00"),MINUTE1$=STR(NUM(MINUTE1$):"00"),VAL$=HOUR1$+MINUTE1$,TZ$=DB_TYPE1$; GOSUB PUT_TIME
20060 STAT_TIME$=VAL$
20070 RETURN 
20080 SEL_SCHEDULE_TIME: REFRESH_FLG=1
20090 HOUR2$=STR(NUM(HOUR2$):"00"),MINUTE2$=STR(NUM(MINUTE2$):"00"),VAL$=HOUR2$+MINUTE2$,TZ$=DB_TYPE2$; GOSUB PUT_TIME
20100 SCHEDULE_TIME$=VAL$
20110 RETURN 
