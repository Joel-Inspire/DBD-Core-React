0010 ! EFGNEW - Utility to update Unform setups from standards
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Oct. 30, 2007 8:52
0030 ! ************************************************************************
0035 REM "5.7 - 01/30/20 - 11.063333 - jvv - SSP# 298729
0037 REM "298729-Convert SaaS Jetform instances to Unform ** Required first  
0040 REM "Copyright 2020 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0060 IF TCB(88)=0 THEN MSGBOX "You must be using Windx to access this program" ELSE PROCESS "EFGNEW","../EFG/EF.EN"
0080 IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_FORMAT_TYPES
0160 _FILE_NAME$="ZZPARM"
0170 _FIL_NO=HFN; OPEN (_FIL_NO,ERR=OPEN_ERR)_FILE_NAME$
0180 _FILE_NAME$="FFU"
0181 _FFU_NO=HFN; OPEN (_FFU_NO,ERR=OPEN_ERR)_FILE_NAME$
0182 _FILE_NAME$="QSX"+%C$
0183 _QSX_NO=HFN; OPEN (_QSX_NO,ERR=OPEN_ERR)_FILE_NAME$
0184 _EF2=HFN; OPEN (_EF2,IOL=*,ERR=OPEN_ERR)"EF2"+%C$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 SETUP_FORMAT_TYPES:
0425 FMT_CNT=11
0430 DIM EF$[20,6]
0440 EF$[1,1]="FORMATPO",EF$[1,2]="Purchase Orders",EF$[1,3]="PO",EF$[1,4]="dbpo",EF$[1,5]="850",EF$[1,6]="PURCHASE_ORDER"
0444 EF$[2,1]="FORMATPL",EF$[2,2]="Packing List",EF$[2,3]="PL",EF$[2,4]="dbpl",EF$[2,5]="856",EF$[2,6]="PACKING_LIST"
0450 EF$[3,1]="FORMATCL",EF$[3,2]="Carton Label",EF$[3,3]="CL",EF$[3,4]="dbcl",EF$[3,5]="CARTON",EF$[3,6]="INVOICE"
0455 EF$[4,1]="FORMATIN",EF$[4,2]="Invoice",EF$[4,3]="IN",EF$[4,4]="dbinvoice",EF$[4,5]="810",EF$[4,6]="INVOICE"
0460 EF$[5,1]="FORMATST",EF$[5,2]="Statement",EF$[5,3]="ST",EF$[5,4]="dbpo",EF$[5,5]="STM",EF$[5,6]=""""
0465 EF$[6,1]="FORMATDT",EF$[6,2]="Deposit Ticket",EF$[6,3]="DT",EF$[6,4]="db",EF$[6,5]="",EF$[6,6]=""
0470 EF$[7,1]="FORMATUR",EF$[7,2]="Forms Usage",EF$[7,3]="UR",EF$[7,4]="db",EF$[7,5]="UR",EF$[7,6]="USAGE_REPORT"
0475 EF$[8,1]="FORMATRR",EF$[8,2]="W/H Receiving",EF$[8,3]="RR",EF$[8,4]="dbwhsrecv",EF$[8,5]="RR",EF$[8,6]="WHSE_RECEIVING"
0480 EF$[9,1]="FMFORMATR",EF$[9,2]="Reorder Notice",EF$[9,3]="RN",EF$[9,4]="dbronotice",EF$[9,5]="RO",EF$[9,6]="REORDER_NOTICE"
0485 EF$[10,1]="A/PCKF",EF$[10,2]="A/P Checks",EF$[10,3]="AC",EF$[10,4]="dbapcheck",EF$[10,5]="APCHECK",EF$[10,6]="AP_CHECK"
0490 EF$[11,1]="FORMATFX",EF$[11,2]="RFQ",EF$[11,3]="FX",EF$[11,4]="dbrfq",EF$[11,5]="840",EF$[11,6]="VENDOR_RFQ"
0499 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _OSM_NO<>0 THEN CLOSE (_OSM_NO); _OSM_NO=0
0941 IF _OS0_NO<>0 THEN CLOSE (_OS0_NO); _OS0_NO=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
3790 ! 3790 - See if changes are to be written
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
17000 QUERY:
17010 PROCESS "QRY_OSL","../OSG/OS.EN",VAL$
17020 IF STP(VAL$)="" THEN RETURN 
17030 _KEY$=VAL$; GOTO 1070
17099 ! 
17100 REOPEN_FFU:
17110 OPEN (HFN,ERR=OPEN_ERR)FFU_PATH$; _NEW_FFU_NO=LFO
17140 FFU_EXISTS:
17150 CLOSE (_FFU_NO); _FFU_NO=_NEW_FFU_NO
17180 GOSUB LIST_BOX_1
17195 RETURN 
17199 ! 
20000 SELECT_STD:
20010 SEL_STD=1
20012 GOTO 30000
20015 KF$="U",EF_CODE$=KF$
20032 FOR L1=1 TO FMT_CNT
20034 KT$=EF$[L1,1]
20035 IF STP(KT$,2)="" THEN GOTO CONT2_LOOP
20040 READ (_FFU_NO,KEY=KT$+KF$,DOM=*NEXT)A$; GOTO 20055
20045 KY$=KEY(_FFU_NO,END=CONTS_LOOP); READ (_FFU_NO)A$
20050 IF MID(KY$,1,LEN(KT$))<>KT$ THEN GOTO CONTS_LOOP
20055 DESC$=EF$[L1,2]; DESC$=DESC$+DIM(15),DESC$=DESC$(1,15)
20060 LTYPE$=MID(A$,LEN(KT$)+1,1),LDESC$=MID(A$,LEN(KT$)+LEN(LTYPE$)+1,30)
20070 FROM_LIST=1,NEW_COPY=0
20072 EF_CODE$=KF$
20075 EF_TYPE$=EF$[L1,3]
20076 EF_DTYPE$=EF$[L1,2]
20078 EF_DESC$=LDESC$
20080 GOSUB COPY_FORMAT
20090 IF NEW_COPY THEN LIST_BOX LOAD LIST_BOX_2.CTL,1,EF_TYPE$+" "+EF_DTYPE$+SEP+EF_CODE$+SEP+EF_DESC$ ! ITEM_NUMBER$
20095 GOSUB COPY_DELIVERY
20100 CONTS_LOOP:
20110 NEXT L1
20120 SEL_STD=0
20130 RETURN 
30000 SEL_ALL:
30005 SEL_STD=1
30010 ! Select all Lines from LIST BOX 1 to copy into ZZPARM or QSX
30020 AA=LIST_BOX_1.CTL'ITEMCOUNT; IF AA=0 THEN RETURN 
30030 FOR X=1 TO AA
30040 LIST_BOX FIND LIST_BOX_1.CTL,X,LIST_BOX_1$
30110 EF_TYPE$=LIST_BOX_1$(1,2); EF_DTYPE$=LIST_BOX_1$(4,15),EF_CODE$=LIST_BOX_1$(20,1); EF_DESC$=LIST_BOX_1$(22)
30120 ! BB=LIST_BOX_1.CTL'CURRENTITEM
30121 ! DD$=LIST_BOX_1.CTL'VALUE$
30122 FROM_LIST=1,NEW_COPY=0
30125 GOSUB COPY_FORMAT
30130 IF NEW_COPY THEN LIST_BOX LOAD LIST_BOX_2.CTL,1,EF_TYPE$+" "+EF_DTYPE$+SEP+EF_CODE$+SEP+EF_DESC$ ! ITEM_NUMBER$
30135 FOR L1=1 TO FMT_CNT
30140 IF EF_TYPE$=EF$[L1,3] THEN GOSUB COPY_DELIVERY; BREAK
30145 NEXT L1
30148 NEXT X
30149 SEL_STD=0
30150 RETURN 
30159 ! 
50000 LIST_BOX_1:
50005 ! Populate list box from Standard FFU file
50010 IDX=0
50030 LIST_BOX LOAD LIST_BOX_1.CTL,""
50032 FOR L1=1 TO FMT_CNT
50034 KT$=EF$[L1,1]
50035 IF STP(KT$,2)="" THEN GOTO CONT1_LOOP
50040 READ (_FFU_NO,KEY=KT$+"",DOM=*NEXT)
50045 KY$=KEY(_FFU_NO,END=CONT1_LOOP); READ (_FFU_NO)A$
50050 IF MID(KY$,1,LEN(KT$))<>KT$ THEN GOTO CONT1_LOOP
50055 DESC$=EF$[L1,2]; DESC$=DESC$+DIM(15),DESC$=DESC$(1,15)
50060 LTYPE$=MID(A$,LEN(KT$)+1,1),LDESC$=MID(A$,LEN(KT$)+LEN(LTYPE$)+1,30)
50072 IDX+=1; LIST_BOX LOAD LIST_BOX_1.CTL,IDX,EF$[L1,3]+" "+DESC$+SEP+LTYPE$+SEP+LDESC$
50080 GOTO 50045
50081 CONT1_LOOP:
50082 NEXT L1
50085 RETURN 
50089 ! 
50090 SEL_LINE_LB_1:
50091 ! Select Line from FFU to copy into ZZPARM or QSX
50095 IF LIST_BOX_1$="" THEN EXIT 
50100 IF _EOM$<>$02$ THEN EXIT 
50110 EF_TYPE$=LIST_BOX_1$(1,2); EF_DTYPE$=LIST_BOX_1$(4,15),EF_CODE$=LIST_BOX_1$(20,1); EF_DESC$=LIST_BOX_1$(22)
50120 BB=LIST_BOX_1.CTL'CURRENTITEM
50121 DD$=LIST_BOX_1.CTL'VALUE$
50122 FROM_LIST=1,NEW_COPY=0
50125 GOSUB COPY_FORMAT
50130 IF NEW_COPY THEN LIST_BOX LOAD LIST_BOX_2.CTL,1,EF_TYPE$+" "+EF_DTYPE$+SEP+EF_CODE$+SEP+EF_DESC$ ! ITEM_NUMBER$
50135 FOR L1=1 TO FMT_CNT
50140 IF EF_TYPE$=EF$[L1,3] THEN GOSUB COPY_DELIVERY; BREAK
50145 NEXT L1
50150 RETURN 
50159 ! 
50160 LIST_BOX_2:
50165 ! Populate List box from ZZPARM/QSX
50170 DELIVERY_OPT_CODE$="001"
50180 IDX_2=0
50200 LIST_BOX LOAD LIST_BOX_2.CTL,""
50205 FOR L2=1 TO FMT_CNT
50206 K2$=EF$[L2,1]; IF STP(K2$,2)="" THEN GOTO CONT2_LOOP
50208 IF EF$[L2,3]="FX" THEN _O_FIL=_QSX_NO ELSE _O_FIL=_FIL_NO
50210 READ (_O_FIL,KEY=K2$+"",DOM=*NEXT)
50220 KY$=KEY(_O_FIL,END=CONT2_LOOP); READ (_O_FIL)B$
50230 IF MID(KY$,1,LEN(K2$))<>K2$ THEN GOTO CONT2_LOOP
50240 DESC$=EF$[L2,2]; DESC$=DESC$+DIM(15),DESC$=DESC$(1,15)
50241 LCODE$=MID(B$,LEN(K2$)+1,1),LDESC$=MID(B$,LEN(K2$)+LEN(LCODE$)+1,30)
50242 IDX_2+=1; LIST_BOX LOAD LIST_BOX_2.CTL,IDX_2,EF$[L2,3]+" "+DESC$+SEP+LCODE$+SEP+LDESC$
50245 GOTO 50220
50250 CONT2_LOOP:
50252 NEXT L2
50253 ! 
50255 RETURN 
50259 ! 
50260 SEL_LINE_LB_2:
50261 IF _EOM$<>$02$ THEN EXIT 
50264 CC=LIST_BOX_2.CTL'CURRENTITEM
50275 EF_TYPE$=LIST_BOX_2$(1,2); EF_DTYPE$=LIST_BOX_2$(4,15),EF_CODE$=LIST_BOX_2$(20,1); EF_DESC$=LIST_BOX_2$(22)
50288 FROM_LIST=2,NEW_COPY=0
50290 GOSUB COPY_FORMAT
50295 IF NEW_COPY THEN LIST_BOX LOAD LIST_BOX_1.CTL,1,EF_TYPE$+" "+EF_DTYPE$+SEP+EF_CODE$+SEP+EF_DESC$ ! ITEM_NUMBER$
50310 RETURN 
50499 ! 
50599 ! 
50600 COPY_FORMAT:
50605 KT$="FORMAT"; SKEY$=KT$+EF_TYPE$; IF EF_TYPE$="RN" THEN SKEY$="FMFORMATR" ELSE IF EF_TYPE$="AC" THEN SKEY$="A/PCKF"
50610 OLD_KY$=SKEY$+EF_CODE$,NEW_KY$=OLD_KY$,NEW_DESC$=EF_DESC$
50615 IF EF_TYPE$="FX" THEN SEL_FIL=_QSX_NO ELSE SEL_FIL=_FIL_NO
50620 IF FROM_LIST=1 THEN IN_FILE=_FFU_NO,OUT_FILE=SEL_FIL ELSE IN_FILE=SEL_FIL,OUT_FILE=_FFU_NO
50630 CHECK_EXISTING:
50670 FIND (OUT_FILE,KEY=NEW_KY$,DOM=*NEXT)*; GOTO FORMAT_EXISTS
50672 NEW_COPY=1
50675 WRITE_REC:
50680 READ RECORD (IN_FILE,KEY=OLD_KY$)REC$
50682 REC$(1,LEN(NEW_KY$))=NEW_KY$,REC$(LEN(NEW_KY$)+1,30)=NEW_DESC$
50685 WRITE RECORD (OUT_FILE,KEY=NEW_KY$)SUB(REC$,$00$,"")
50690 EF_CODE$=MID(NEW_KY$,LEN(SKEY$)+1,1),EF_DESC$=NEW_DESC$
50695 GOTO *RETURN
50800 FORMAT_EXISTS:
50805 IF SEL_STD THEN REC_EXISTS$="FORMAT "+NEW_KY$+" ALREADY EXISTS"; GOTO 50815
50810 REC_EXISTS$="FORMAT "+SELECTED$+" ALREADY EXISTS"
50815 MSGBOX REC_EXISTS$+SEP+"DO YOU WISH TO OVERWRITE",MSG("CONFIRM"),"?,YESNO",ANSWER$
50820 IF ANSWER$="YES" THEN GOTO WRITE_REC
50830 FMT_SEL$=EF_CODE$+"  "+EF_DTYPE$+" "+EF_DESC$
50840 SELECTED$=""
50845 FMT_DESC$=EF_DESC$
50850 PROCESS "EFGCPU","../EFG/EF.EN",SELECTED$,FMT_SEL$,FMT_DESC$
50860 IF STP(SELECTED$,2)="" THEN GOTO *RETURN
50870 NEW_KY$=SKEY$+SELECTED$
50875 NEW_DESC$=EF_DESC$; IF STP(FMT_DESC$,2)<>"" THEN NEW_DESC$=FMT_DESC$
50880 GOTO CHECK_EXISTING
50890 RETURN 
51000 COPY_DELIVERY:
51010 DOC_CODE$=EF$[L1,5]; IF STP(DOC_CODE$,2)="" THEN RETURN ELSE DOC_CODE$=PAD(DOC_CODE$,10)
51020 FLEX_FORMAT_CODE$=EF_CODE$
51050 JOB_CARD_DATA$="-f dbdata/"+%C$+"/"+%C$+"-"+EF$[L1,4]+".rul -r "+EF$[L1,6]+" -debug"
51060 DELIVERY_OPT_CODE$="001"
51080 _KEY$=DOC_CODE$+FLEX_FORMAT_CODE$
51090 WRITE (_EF2,KEY=_KEY$,DOM=*NEXT); GOTO 51110
51110 RETURN 
51999 RETURN 
