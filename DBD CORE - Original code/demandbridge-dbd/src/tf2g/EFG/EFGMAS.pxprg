0010 ! EFGMAC - Flexible Format to Job Card Setup
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Nov. 1, 2002 13:17
0030 ! ************************************************************************
0035 REM "5.7 - 08/13/14 - 18.094722 - jvv - SSP# 271882
0037 REM "271882-E/F flexible format codes for thank you letters hard coded  
0040 REM "Copyright 2014 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "EFGMAS","../EFG/EF.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="EF2" ! New standard file in /usr/lib/pvx/tf2z/USR
0170 _FIL_NO=HFN; OPEN (_FIL_NO,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,REC=_CUR$)_FILE_NAME$
0182 _FILE_NAME$="ZF0"
0185 _ZF0_NO=HFN; OPEN (_ZF0_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=2
0430 DIM _KEYS$[1:2]; _KEYS$[1]="DOC_CODE$",_KEYS$[2]="FLEX_FORMAT_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 %DOC_CODE$="",%DOC_DEL$=""
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1015 ! OSUB FIND_DOC_CODE
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 FIND_READ:
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 MSGBOX MSG("ADD_RECORD"),MSG("VERIFY"),"?,YESNO",ANS$
1230 IF ANS$="NO" THEN _CLR_FLG$="R"; GOSUB CLEAR_FIELDS; NEXT_ID=FIRST_FIELD; RETURN 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3055 GOSUB LOAD_OPTIONS_LIST
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3521 ! GRID LOAD OPT_LIST.CTL,0,0,""
3523 %DOC_CODE$=DOC_CODE$; GOSUB FIND_DOC_CODE; GOSUB LOAD_FF_LIST; GOSUB LOAD_OPTIONS_LIST
3526 FF_POS=POS(SEP+FLEX_FORMAT_CODE$=SEP+FF_LOAD_LIST$); IF FF_POS>0 THEN FF_POS=POS(SEP=MID(SEP+FF_LOAD_LIST$,1,FF_POS),1,0); DROP_BOX WRITE FLEX_FORMAT_CODE.CTL,FF_POS,ERR=*NEXT
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=DOC_CODE.CTL,_FIRST_FIELD=JOB_CARD_DATA.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN DOC_CODE$=""
13030 IF _CLR_FLG$="R" THEN FLEX_FORMAT_CODE$=""
13035 DOC_DESCRIPTION$=""
13040 JOB_CARD_DATA$=""
13050 ALLOW_CARD_MODIFY$=""
13055 NUM_VER$=""
13060 DELIVERY_OPT_CODE$=""
13070 LOAD_DEL_LIST$=""
13075 PRT_UNCOLLATED$="" ! SSP 247529
13080 GRID LOAD OPT_LIST.CTL,0,0,""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=FLEX_FORMAT_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(7,"N") ! SSP 247529
15030 IF _ORIG.DOC_CODE$=_CUR.DOC_CODE$ OR DOC_CODE$=_CUR.DOC_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.DOC_CODE$=DOC_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("DOC_CODE")+" = "+_CUR.DOC_CODE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DOC_CODE")+" = "+_CUR.DOC_CODE$
15040 IF _ORIG.FLEX_FORMAT_CODE$=_CUR.FLEX_FORMAT_CODE$ OR FLEX_FORMAT_CODE$=_CUR.FLEX_FORMAT_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.FLEX_FORMAT_CODE$=FLEX_FORMAT_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("FLEX_F_C")+" = "+_CUR.FLEX_FORMAT_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FLEX_F_C")+" = "+_CUR.FLEX_FORMAT_CODE$
15050 IF _ORIG.JOB_CARD_DATA$=_CUR.JOB_CARD_DATA$ OR JOB_CARD_DATA$=_CUR.JOB_CARD_DATA$ THEN GOTO *NEXT ELSE IF _ORIG.JOB_CARD_DATA$=JOB_CARD_DATA$ THEN _CHG2$=_CHG2$+SEP+MSG("JOB_C_D")+" = "+_CUR.JOB_CARD_DATA$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("JOB_C_D")+" = "+_CUR.JOB_CARD_DATA$
15060 IF _ORIG.ALLOW_CARD_MODIFY$=_CUR.ALLOW_CARD_MODIFY$ OR ALLOW_CARD_MODIFY$=_CUR.ALLOW_CARD_MODIFY$ THEN GOTO *NEXT ELSE IF _ORIG.ALLOW_CARD_MODIFY$=ALLOW_CARD_MODIFY$ THEN _CHG2$=_CHG2$+SEP+MSG("ALLO_C_M")+" = "+_CUR.ALLOW_CARD_MODIFY$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALLO_C_M")+" = "+_CUR.ALLOW_CARD_MODIFY$
15070 IF _ORIG.NUM_VER$=_CUR.NUM_VER$ OR NUM_VER$=_CUR.NUM_VER$ THEN GOTO *NEXT ELSE IF _ORIG.NUM_VER$=NUM_VER$ THEN _CHG2$=_CHG2$+SEP+MSG("NUM_VER")+" = "+_CUR.NUM_VER$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NUM_VER")+" = "+_CUR.NUM_VER$
15080 IF _ORIG.DELIVERY_OPT_CODE$=_CUR.DELIVERY_OPT_CODE$ OR DELIVERY_OPT_CODE$=_CUR.DELIVERY_OPT_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.DELIVERY_OPT_CODE$=DELIVERY_OPT_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("DELV_OPCD")+" = "+_CUR.DELIVERY_OPT_CODE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DELV_OPCD")+" = "+_CUR.DELIVERY_OPT_CODE$
15090 IF _ORIG.PRT_UNCOLLATED$=_CUR.PRT_UNCOLLATED$ OR PRT_UNCOLLATED$=_CUR.PRT_UNCOLLATED$ THEN GOTO *NEXT ELSE IF _ORIG.PRT_UNCOLLATED$=PRT_UNCOLLATED$ THEN _CHG2$=_CHG2$+SEP+MSG("PRT_UC")+" = "+_CUR.PRT_UNCOLLATED$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRT_UC")+" = "+_CUR.PRT_UNCOLLATED$ ! SSP 247529
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN DOC_CODE$=_CUR.DOC_CODE$
16030 IF _CHG_VAR$(2,1)="Y" THEN FLEX_FORMAT_CODE$=_CUR.FLEX_FORMAT_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN JOB_CARD_DATA$=_CUR.JOB_CARD_DATA$
16050 IF _CHG_VAR$(4,1)="Y" THEN ALLOW_CARD_MODIFY$=_CUR.ALLOW_CARD_MODIFY$
16060 IF _CHG_VAR$(5,1)="Y" THEN NUM_VER$=_CUR.NUM_VER$
16070 IF _CHG_VAR$(6,1)="Y" THEN DELIVERY_OPT_CODE$=_CUR.DELIVERY_OPT_CODE$
16080 IF _CHG_VAR$(7,1)="Y" THEN PRT_UNCOLLATED$=_CUR.PRT_UNCOLLATED$ ! SSP 247529
16990 RETURN 
16999 ! 
17000 LOAD_OPTIONS_LIST:
17010 %DOC_DEL$=DOC_CODE$+DELIVERY_OPT_CODE$
17020 LOAD_DEL_LIST$="Y"
17025 GRID LOAD OPT_LIST.CTL,0,0,""
17030 OPEN (HFN,ERR=*RETURN)"EF4"+%C$; _EF4=LFO
17035 READ (_EF4,KEY=%DOC_DEL$,DOM=*NEXT)
17040 NEXT_DEL_OPT:
17045 NDOKEY$=KEY(_EF4,END=17085); READ (_EF4,KEY=NDOKEY$)EF4$
17050 IF MID(EF4$,1,LEN(%DOC_DEL$))<>%DOC_DEL$ THEN GOTO 17085
17060 GRID LOAD OPT_LIST.CTL,1,0,EF4$(14,2)+SEP+TBL(EF4$(16,1)="Y","0","1")+SEP+TBL(EF4$(21,1)="Y","0","1")+SEP+TBL(EF4$(17,1)="Y","0","1")+SEP+TBL(EF4$(18,1)="Y","0","1")+SEP+TBL(EF4$(19,1)="Y","0","1")+SEP+TBL(EF4$(20,1)="Y","0","1")+SEP
17080 GOTO NEXT_DEL_OPT
17085 CLOSE (_EF4); _EF4=0
17090 REFRESH_FLG=1
17095 RETURN 
17099 ! 
18000 PROCESS_QRY: VAL$=""
18005 _FIRST_KEY=DOC_CODE.CTL,_FIRST_FIELD=JOB_CARD_DATA.CTL
18010 PROCESS "QRY_EF2.1","../EFG/EF.EN",VAL$; IF STP(VAL$)="" THEN NEXT_ID=DOC_CODE.CTL; EXIT 
18020 DOC_CODE$=VAL$(1,10)
18035 GOSUB FIND_DOC_CODE; GOSUB LOAD_FF_LIST
18036 FF_POS=POS(SEP+VAL$(11,1)=SEP+FF_LOAD_LIST$); IF FF_POS>0 THEN FF_POS=POS(SEP=MID(SEP+FF_LOAD_LIST$,1,FF_POS),1,0); DROP_BOX WRITE FLEX_FORMAT_CODE.CTL,FF_POS,ERR=*NEXT
18038 FLEX_FORMAT_CODE$=VAL$(11,1)
18040 _KEY$=VAL$(1,11) ! READ (_FIL_NO,KEY=_KEY$)
18045 GOSUB FIND_READ
18046 GOTO 18070
18050 GOSUB PROCESS_READ
18060 GOSUB NUM_TO_STR
18070 REFRESH_FLG=1
18090 RETURN 
18099 ! 
18200 PAD_DEL_OPT_CODE:
18210 XX=NUM(DELIVERY_OPT_CODE$,ERR=*NEXT),DELIVERY_OPT_CODE$=STR(XX:"000"); GOTO 18240
18220 DELIVERY_OPT_CODE$=PAD(DELIVERY_OPT_CODE$,3," ")
18245 RETURN 
18249 ! 
19000 FIND_DOC_CODE:
19005 DOC_EXISTS=1
19008 DOC_CODE$=DOC_CODE$+DIM(10),DOC_CODE$=DOC_CODE$(1,10)
19010 FIND (_ZF0_NO,KEY=DOC_CODE$,DOM=NOT_EXISTS)DOC$
19015 DOC_DESCRIPTION$=MID(DOC$,11,20)
19030 ! ENABLE_FLG=2; GOSUB ENABLE_GROUPS ! If multiple key segments, enable the _KCNT segment
19035 ! GOSUB LOAD_FF_LIST
19040 REFRESH_FLG=1
19050 RETURN 
19060 NOT_EXISTS:
19065 DOC_EXISTS=0
19068 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
19070 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
19080 EXIT 
19199 ! 
19200 LOAD_FF_LIST:
19205 FFC=FLEX_FORMAT_CODE.CTL
19210 DROP_BOX LOAD FFC,""; FF_LOAD_LIST$="",FFKEY$="",FF_FILE$=""
19220 SWITCH STP(DOC_CODE$,2)
19223 CASE "810"
19226 FFKEY$="FORMATIN"; FF_FILE$="ZZPARM"; BREAK
19229 CASE "850"
19232 FFKEY$="FORMATPO"; FF_FILE$="ZZPARM"; BREAK
19235 CASE "856"
19238 FFKEY$="FORMATPL"; FF_FILE$="ZZPARM"; BREAK
19241 CASE "APCHECK","APREMIT" ! SSP#254469
19244 FFKEY$="A/PCKF"; FF_FILE$="ZZPARM"; BREAK
19247 CASE "FORMATCL"
19250 FFKEY$="FORMATCL"; FF_FILE$="ZZPARM"; BREAK
19253 CASE "RO"
19256 FFKEY$="FMFORMATR"; FF_FILE$="ZZPARM"; BREAK
19259 CASE "RR"
19262 FFKEY$="FORMATRR"; FF_FILE$="ZZPARM"; BREAK
19265 CASE "STM"
19268 FFKEY$="FORMATST"; FF_FILE$="ZZPARM"; BREAK
19271 CASE "UR"
19274 FFKEY$="FORMATUR"; FF_FILE$="ZZPARM"; BREAK
19277 CASE "840"
19280 FFKEY$="FORMATFX"; FF_FILE$="QSX"+%C$; BREAK
19283 CASE "THANKYOU"
19284 ! FF_LOAD_LIST$="1"+SEP+"2"+SEP+"3"+SEP
19286 FFKEY$="THANKYOU"; FF_FILE$="ZY3"+%C$; GOSUB THANK_YOU_FF; FF_FILE$=""; BREAK ! FF codes are hardcoded for THANKYOU - 1,2,3 as of 2011/02/22
19320 DEFAULT 
19325 MSGBOX "Invalid document code!",MSG("WARNING"),"OK,TIM=5"
19330 GOSUB CLEAR_REC; NEXT_ID=DOC_CODE.CTL; REFRESH_FLG=1
19340 END SWITCH 
19345 IF NUL(FF_FILE$) THEN GOTO DONE_LFL
19350 OPEN (HFN)FF_FILE$; FF_FILE=LFO
19355 READ (FF_FILE,KEY=FFKEY$,DOM=*NEXT)
19360 NEXT_FF_REC:
19365 FFK$=KEY(FF_FILE,END=DONE_LFL); READ (FF_FILE,KEY=FFK$)FFREC$
19368 IF MID(FFK$,1,LEN(FFKEY$))<>FFKEY$ THEN GOTO DONE_LFL
19370 FF_LOAD_LIST$+=MID(FFK$,LEN(FFKEY$)+1,1)+" - "+MID(FFREC$,LEN(FFKEY$)+2,30)+SEP
19375 GOTO NEXT_FF_REC
19380 DONE_LFL:
19385 DROP_BOX LOAD FFC,FF_LOAD_LIST$,ERR=*NEXT
19390 IF FF_FILE THEN CLOSE (FF_FILE); FF_FILE=0
19395 RETURN 
19399 ! 
19500 THANK_YOU_FF:! Thank you letter formats
19510 TKS$="",FFKEY$="ORDER"+DIM(7)
19520 OPEN (HFN)FF_FILE$; FF_FILE=LFO
19530 READ (FF_FILE,KEY=FFKEY$,DOM=*NEXT)
19540 NEXT_TK_REC:
19550 FFK$=KEY(FF_FILE,END=DONE_TKL); READ (FF_FILE,KEY=FFK$)TKREC$
19555 IF FFK$(1,12)<>FFKEY$ THEN GOTO DONE_TKL
19560 TKF$=MID(FFK$,13,1)
19570 IF POS(TKF$=TKS$)=0 THEN FF_LOAD_LIST$+=TKF$+SEP,TKS$+=TKF$
19580 GOTO NEXT_TK_REC
19585 DONE_TKL:
19590 RETURN 
19599 ! 
56002 REM "190626-Keep both costed stub and regular invoice copies in Image
56003 REM "237164-Install Unform. Implement electronic forms support in Unform
56004 REM "247529-Need for the Unform invoices to print using the J1 feature  
56005 REM "254469-Changes to AP Check Printing to print Remittance Advice doc 
56006 REM "271882-E/F flexible format codes for thank you letters hard coded  
