0010 ! FMGODB - File Maintenance Program for FS2-FD Sales Order Line Entry (="FS2"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Sep. 15, 2001 15:46
0030 ! ************************************************************************
0035 REM "5.7 - 08/20/24 - 12.438501 - jvv - SSP# 307477
0037 REM "307477-Changes to Carton Label maintenance and Print               
0040 REM "Copyright 2024 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0145 %VEND_CODE$="",%VEND_NAME$="",%PLANT_NAME$="",%CUST_NAME$="",%SPEC_FLG$=""; DIM S_UM$(21),S_UM[1],C_UM$(21),C_UM[1]; %SP_CUST$="" ! SSP 201990!SSP#297345
0146 DAY_FORMAT READ DAY_FORMAT$
0147 DIM M6[1]; M6[1]=2,M1$="##,###,###.00-",M6$=M1$
0150 GOSUB SETUP_KEYS
0155 IF ARG_2$="NEW" THEN WIZARD_MODE=1 ELSE WIZARD_MODE=0
0160 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; DIM Z[NUM(X3$(60,3))]
0165 Z$="01O FS2... 02O FS1... 03O FM1... 04O IC0... 05O QSA... 06O QSB... 07O QSC... 08O QSD... 09O FMP... 10O PO1... 11O AR4... 13O ZZPARM 15O FE5... 16O FE6... 17O FE7... 18O FM2... 20O FW0... 21O ASQ... 22O AP4... 23O AP8... 24O FSH... 25O FM0... 26O IC1... 27O IC2... 28O ICF... 29O OSD... 30O OS2... 31O EDW... 32O AR1... " ! AR4 is used in AR2COM, ! SSP 184532 SSP228057
0170 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
0172 QUOTE_CHAN=Z[5] ! Default for later use
0174 QSB=Z[6] ! ssp208671
0175 _FILE_NAME$=FIN(Z[1],"FILENAME"),_FIL_NO=Z[1]
0177 CLOSE (_FIL_NO); OPEN (_FIL_NO,IOL=*)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0181 TP$=FN%FID$(Z[3]); CLOSE (Z[3]); OPEN (Z[3],IOL=*)TP$(4,6); CALL "ZZWIOL",Z[3],"B",%FM1_IOL$ ! SSP205703-changed FID() to FN%FID$()             
0182 TP$=FN%FID$(Z[2]); CLOSE (Z[2]); OPEN (Z[2],IOL=*)TP$(4,6); CALL "ZZWIOL",Z[2],"B",%FS1_IOL$ ! SSP205703-changed FID() to FN%FID$()             
0183 TP$=FN%FID$(Z[4]); CLOSE (Z[4]); OPEN (Z[4],IOL=*)TP$(4,6); CALL "ZZWIOL",Z[4],"B",%IC0_IOL$ ! SSP205703-changed FID() to FN%FID$()             
0184 GOSUB GET_PARMS
0185 DIM Q[100],L0[100]
0186 TP$=FN%FID$(Z[32]); CLOSE (Z[32]); OPEN (Z[32],IOL=*)TP$(4,6); CALL "ZZWIOL",Z[32],"B",%AR1_IOL$ ! SSP205703-changed FID() to FN%FID$()  ! SSP233523 jdf
0196 DIM %OP_SECURITY$(255); READ (Z[13],KEY="osec"+%X3_OP_ID$,DOM=*NEXT)%OP_SECURITY$
0197 IF NUL(%OP_PARM$) THEN FIND (Z[13],KEY=%C$+"F/M",DOM=*NEXT)%OP_PARM$
0198 DISP_CIC$="N"; IF MID(%OP_PARM$,246,1)="Y" THEN DISP_CIC$="Y"; IF _FM1=0 THEN _FM1=HFN; OPEN (_FM1,ERR=*NEXT)"FM1"+%C$ ! SSP 307490
0199 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=2
0430 DIM _KEYS$[1:2]; _KEYS$[1]="ORDER$",_KEYS$[2]="ORDER_LINE_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 IF WIZARD_MODE THEN CALL "*wingrp;show",HIDE.GRP$; CALL "*wingrp;hide",WIZARD_OFF.GRP$ ELSE CALL "*wingrp;hide",HIDE.GRP$; CALL "*wingrp;show",WIZARD_OFF.GRP$; HIDE CONTROL BUTTON_1.CTL
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN ELSE DISABLE CONTROL ORDER.CTL
0545 IF ARG_2$<>"NEW" AND NOT(NUL(ARG_1$)) THEN _ENABLE_FLG=1,_KCNT=2,ORDER_DIV$=MID(ARG_1$,1,2),ORDER_NUM$=MID(ARG_1$,3,6),ORDER$=ORDER_DIV$+ORDER_NUM$,%QRY_ORDER$=ORDER$
0550 _KEY$=ARG_1$; IF WIZARD_MODE THEN _KEY$=_KEY$+"001"; READ (_FIL_NO,KEY=_KEY$,ERR=NEW_RECORD) ELSE IF WIZARD_MODE THEN RETURN ELSE IF LEN(ARG_1$)>=11 THEN ORDER_LINE_NUM$=ARG_1$(9,3),ENTER_LINE_NUMBER=0,_KEY$=ARG_1$(1,11); READ (_FIL_NO,KEY=_KEY$,ERR=*RETURN); EXISTING_RECORD=1,CUSTOMER$=CUST_DIV$+CUST_CODE$,QUOTE$=QUOTE_DIV$+QUOTE_NUM$,QUOTE_LINE_NUM_ENTRY$=QUOTE_LINE_NUM$; GOSUB GET_FS1_INFO; GOSUB INIT_FOLDER_1; GOSUB LOAD_LINE_TYPES ELSE _ENABLE_FLG=2,NEXT_ID=ORDER_LINE_NUM.CTL; ENTER_LINE_NUMBER=1; RETURN 
0555 GOSUB LOAD_LINE_TYPES
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0700 ! 700 - Set up tabbing between folders
0710 INIT_FOLDER:
0715 IF (NOT(WIZARD_MODE) AND NOT(EXISTING_RECORD)) THEN NEXT_FOLDER=FMGODB.1.CTL; CALL "*WINGRP;DISABLE",FIELDS.GRP$; NEXT_ID=ORDER_LINE_NUM.CTL; EXIT ! SSP 238671
0720 GOSUB ENABLE_GROUPS; GOSUB SET_FIELDS
0725 IF LEN(ARG_1$)=11 THEN CALL "*wingrp;disable",MOVE_BUTTONS.GRP$ ELSE CALL "*wingrp;enable",MOVE_BUTTONS.GRP$
0730 IF _ENABLE_FLG<>_KEY1 THEN IF TAB_FLG$="<" THEN NEXT_ID=_LAST_TAB ELSE NEXT_ID=_FIRST_TAB
0735 SWITCH FOLDER_ID$
0740 CASE "FMGODB.1"
0741 GOSUB INIT_FOLDER_1
0744 BREAK ! FMGODB.1
0745 CASE "FMGODB.2"
0746 IF LINE_TYPE$="M" THEN GOSUB SETUP_WHSE; CALL "*wingrp;Show",MESSAGE_WHSE.GRP$; CALL "*wingrp;enable",LINE_TYPE_M.GRP$; NEXT_ID=TF_DESC.CTL; REFRESH_FLG=1 ELSE CALL "*wingrp;enable",ITEM_ENTRY.GRP$; GOSUB CHECK_TOPS
0747 IF WIZARD_MODE THEN HIDE CONTROL WZ_DONE.CTL; SHOW CONTROL WZ_CANCEL.CTL; SHOW CONTROL WZ_BACK.CTL
0748 GOSUB FOLDER_2_SETUP
0749 BREAK ! FMGODB.2
0750 CASE "FMGODB.3"
0751 GOSUB PRINT_FLAGS_OUT; GOSUB SETUP_WHSE; GOSUB FOLDER_3_SETUP ! SSP 237364
0752 PERFORM PGN+";CALCULATIONS"
0753 IF WIZARD_MODE THEN HIDE CONTROL WZ_DONE.CTL; SHOW CONTROL WZ_CANCEL.CTL; SHOW CONTROL WZ_BACK.CTL
0754 ITEM_TITLE$=STP(ITEM_CODE$,1)+" - "+TF_DESC$; IF (LINE_TYPE$="C" OR LINE_TYPE$=" ") AND NOT(NUL(CUST_DIV$+CUST_CODE$)) THEN ITEM_TITLE$=FN%ZZDISP$(CUST_DIV$+CUST_CODE$,"A/R")+"-"+ITEM_TITLE$
0756 IF NUL(PO_CODE$) THEN NEXT_ID=WHSE.CTL ELSE IF POS("P"=PRINT_FLAGS$)<>0 THEN NEXT_ID=WHSE_CODE_PKLIST.CTL ELSE IF MID(S_UM$,20,1)="Y" THEN NEXT_ID=DISPLAY_SELL_QTY.CTL ELSE NEXT_ID=QTY_IN_SELL_UM.CTL
0757 IF LINE_TYPE$="S" AND NOT(NUL(PO_CODE$)) THEN IF POS("P"=PRINT_FLAGS$)<>0 THEN NEXT_ID=WHSE_CODE_PKLIST.CTL ELSE NEXT_ID=DISPLAY_SELL_QTY.CTL ! SSP 234279
0758 IF %AR1_PARM$(68,1)="Y" THEN CALL "*WINGRP;HIDE",HIDE.GRP$; CALL "*WINGRP;SHOW",SIC.GRP$ ELSE CALL "*WINGRP;SHOW",HIDE.GRP$ END_IF ; REFRESH_FLG=1 ! SSP#241863
0759 BREAK ! FMGODB.3
0760 CASE "FMGODB.4"
0762 GOSUB SET_SHIP_BUTTON
0763 GOSUB LOAD_FORMAT_DROP_BOXES
0764 NEXT_ID=CTN_PACK.CTL
0765 DIM PRODUCT_CODE$(100); FIND (Z[9],KEY="T"+PROD_CODE$,DOM=*NEXT,ERR=FMP_ERR)PRODUCT_CODE$; IF %NEW THEN GOSUB POST_CARTON_PACK END_IF ; REFRESH_FLG=1 ! SSP 307477
0766 IF POS(IC0.TOPS_ITEM$="USC")<>0 THEN CALL "*wingrp;disable",TOPS_SPEC.GRP$; REM disable special shipping SSP 203458
0769 BREAK ! FMGODB.4
0785 END SWITCH 
0790 IF ENTER_LINE_NUMBER THEN ENTER_LINE_NUMBER=0; NEXT_ID=ORDER_LINE_NUM.CTL; NEXT_FOLDER=FLDR.FMGODB.1.CTL; CALL "*wingrp;enable",KEY2.GRP$
0795 EXIT 
0900 ! 900 - Wrapup
0910 WRAPUP:
0915 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 %ML_COST=0,%ML_QTY=0,%EXTENSION=0,%ML_PRIMARY_UNIT$="",%BT_ML_SEQ$="" ! SSP219402 jdf 
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0955 SET_PARAM 'KR'=_SV_KR
0960 PRINT 'CI', ! SSP 228932
0990 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1015 IF _EOM$=$09$ AND NUL(ORDER_LINE_NUM$) THEN ORDER_LINE_NUM$="001"
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1025 EXISTING_RECORD=0; SPC_CHG_EXT_ONLY=0,UNIT_SELL_PRICE=0,UNIT_COST=0,COST_EXT=0,SELL_PRICE_EXT=0,PRICE_EXT_ONLY=0,COST_EXT_ONLY=0,EXIST_FLG=0
1026 UOM_COST_EXT=0; UOM_SELL_EXT=0 ! ssp 224626
1028 DIM S_UM$(21),S_UM[1],C_UM$(21),C_UM[1]; %SP_CUST$="" ! SSP 231692
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1035 IF ID$="ORDER_LINES" THEN GOTO 1041 ! SSP242299 jdf
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;PARSE_ORD",ORDER$,ORDER_DIV$,ORDER_NUM$
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1055 _KEY$=ORDER_DIV$+ORDER_NUM$+ORDER_LINE_NUM$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1065 IF %OP_PARM$(280,1)="Y" AND FS1.ORDER_TYPE_3$="B" AND ORDER_LINE_NUM$<>"001" THEN DISABLE_CUSTOM=1 ELSE DISABLE_CUSTOM=0
1070 %NEW=0; READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT); CUSTOMER$=CUST_DIV$+CUST_CODE$ ! SSP219153 jdf                                     
1071 IF WMS_PICK_HOLD$="Y" THEN MSGBOX MSG("FMGODB_P"),MSG("WARNING"); NEXT_ID=ORDER_LINE_NUM.CTL; EXIT 
1072 GOSUB LOAD_LINE_TYPES; GOSUB CHECK_SPEC; NEXT_ID=SPEC_REQ.CTL
1073 CALL "*WINGRP;ENABLE",WIZARD_OFF.GRP$ ! INSERTED BY DFF
1074 ENABLE CONTROL FLDR.FMGODB.2.CTL; ENABLE CONTROL FLDR.FMGODB.3.CTL; ENABLE CONTROL FLDR.FMGODB.4.CTL
1075 EXISTING_RECORD=1,WIZARD_MODE=0,ENTER_LINE_NUMBER=0
1076 CUSTOMER$=CUST_DIV$+CUST_CODE$; QUOTE$=QUOTE_DIV$+QUOTE_NUM$; QUOTE_LINE_NUM_ENTRY$=QUOTE_LINE_NUM$
1077 %LAST_WHSE$="" ! SSP 229237
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1095 CALL "*WINGRP;DISABLE",FIELDS.GRP$
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1105 NEXT_ID=SPECS_REQ.CTL,NO_SPEC=1; CALL "*WINGRP;ENABLE",QTE_1.GRP$
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1211 %NEW=1
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1251 %LOT_MANUAL=0,ENTER_LINE_NUMBER=0,SPECIAL_SHIP_QTY=0,ITEM_FLG=0
1253 ENABLE CONTROL FLDR.FMGODB.2.CTL; ENABLE CONTROL FLDR.FMGODB.3.CTL; ENABLE CONTROL FLDR.FMGODB.4.CTL
1254 WIZARD_MODE=1
1255 IF WIZARD_MODE THEN _ENABLE_FLG=-1,ORDER_DIV$=MID(ARG_1$,1,2),ORDER_NUM$=MID(ARG_1$,3,6),ORDER$=ORDER_DIV$+ORDER_NUM$; IF STP(ORDER_LINE_NUM$)="" THEN ORDER_LINE_NUM$="001"
1256 IF NOT(NUL(ARG_2$)) AND ARG_2$<>"NEW" THEN PO_CODE$=ARG_2$; CALL "*wingrp;Disable",POCODE.GRP$
1257 GOSUB GET_FS1_INFO
1260 IF ARG_2$<>"NEW" AND NOT(NUL(ARG_1$)) THEN _ENABLE_FLG=-1,ORDER_DIV$=MID(ARG_1$,1,2),ORDER_NUM$=MID(ARG_1$,3,6),ORDER$=ORDER_DIV$+ORDER_NUM$
1265 IF NOT(NUL(MID(%OP_PARM$,214,5))) THEN PRINT_FLAGS$=%OP_PARM$(214,5) ELSE PRINT_FLAGS$="SIP" ! SSP 283343
1266 IF POS(FS1.ORDER_TYPE_1$="RW")<>0 THEN IF NOT(NUL(MID(%OP_PARM$,292,5))) THEN PRINT_FLAGS$=%OP_PARM$(292,5) ELSE PRINT_FLAGS$=PAD("IP",5) ! SSP 283343
1267 ! IF POS("P"=PRINT_FLAGS$)=0 THEN PRINT_FLAGS$=PAD(STP(PRINT_FLAGS$,3)+"P",5)
1268 IF POS(%X3_COMP$="584585",3) AND FS1.ORDER_TYPE_1$="W" AND %NEW THEN LINE_TYPE$="I" ELSE IF POS(FS1.ORDER_TYPE_1$="WR")<>0 THEN LINE_TYPE$="C" ELSE LINE_TYPE$="I" ! ssp 194815
1269 GOSUB GLOBAL_VARS; GOSUB SET_LINE_DEFAULTS; GOSUB PRINT_FLAGS_IN; GOSUB INIT_FOLDER
1270 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1275 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=PO_CODE.CTL
1277 IF NOT(NUL(ARG_2$)) AND ARG_2$<>"NEW" THEN CALL "*wingrp;Disable",POCODE.GRP$; REFRESH_FLG=1
1280 NEXT_FOLDER=_FIRST_FOLDER
1285 RC_NUMBER$="",EDW0=0,EDW1=0; DIM EDW$(200) ! SSP 184532
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1442 IF SPECIAL_SHIP_BUTTON_PRESSED THEN RETURN 
1443 J=FFN("ZZPARM"); READ (J,KEY=FID(0)+DIM(6))X3$,*,X4$
1445 GOSUB END_OF_LINE_TASKS
1446 IF LEN(ARG_1$)>=11 THEN CMD_STR$="E"; RETURN 
1450 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS; REFRESH_FLG=1,NEXT_FOLDER=_FIRST_FOLDER
1455 IF ARG_1$<>"" THEN _ENABLE_FLG=2,_KCNT=2; GOSUB ENABLE_GROUPS; GOTO 1461
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 IF STP(ORDER$)<>"" THEN NEXT_ID=ORDER_LINE_NUM.CTL ELSE NEXT_ID=ORDER.CTL
1484 NEXT_ID=ORDER_LINE_NUM.CTL,NEXT_FOLDER=FLDR.FMGODB.1.CTL
1485 ENTER_LINE_NUMBER=1
1490 RETURN 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1635 IF DEL_REC THEN GOTO 1651 ! SSP200956 jdf
1640 IF WIZARD_MODE THEN MSGBOX MSG("CANCEL_CHK"),_MSG_JUST_CHECK$,"?,YESNO",_X$ ELSE MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1653 GOSUB CAN_WE_DELETE; IF CANT_DELETE THEN RETURN 
1658 FM2ODZ_CMD=-2; GOSUB DO_FM2ODZ
1659 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=*NEXT)
1662 CALL "UPDFS1;READBYKEY",0,0,ORDER_DIV$+ORDER_NUM$,"","","","",FS1_REC$,FS1_REC{ALL},DD; IF HAS_COMP_ITEM$="Y" THEN CALL "FM2OBD",%X3$,%X4$,_KEY$,FS1_REC$,-2 ! SSP 202907
1663 REMOVE (_FIL_NO,KEY=_KEY$,ERR=*NEXT) ! SSP 202907
1665 IF %OP_PARM$(322,1)<>"Y" THEN REMOVE (Z[31],KEY=_KEY$,DOM=*NEXT) ! SSP 184532, SSP234938, if parm set to not delete EDW when FS2 deleted, then don't.
1670 IF %MSLC THEN GOSUB MULTI_COMM_KEY; CALL "ARGSCM; DELETE_ORDER_DETAIL",SC_KEY$ ! SSP 225300
1675 IF MFF_PARM THEN CALL "FMGFV5;DELETE_FINDER_FEE_LINES",_KEY$ ! SSP 276772
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1692 IF DEL_REC THEN IF %OE_GRID THEN ZERO_INV_DEL=1 ! SSP 229365
1694 IF WIZARD_MODE THEN HIDE CONTROL WZ_NEXT.CTL; HIDE CONTROL WZ_CANCEL.CTL; SHOW CONTROL WZ_DONE.CTL
1695 NEXT_FOLDER=FLDR.FMGODB.1.CTL; FOLDER_ID$="FMGODB.1",ENTER_LINE_NUMBER=1; GOSUB CLEAR_REC; _ENABLE_FLG=_KEY1
1697 DEL_REC=0 ! SSP200956 jdf
1698 %ML_COST=0,%ML_QTY=0,%EXTENSION=0,%ML_PRIMARY_UNIT$="",%BT_ML_SEQ$="" ! SSP219402 jdf 
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH:IF WIZARD_MODE THEN GOTO 1680 ELSE MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1721 NO_SUCHX:IF WIZARD_MODE THEN CMD_STR$="END"; GOTO DELETE_DONE ELSE MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1725 DELETE_DONE:EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN IF STP(ORDER_DIV$+ORDER_NUM$,3)<>"" THEN _KCNT=2,_ENABLE_FLG=2; GOSUB ENABLE_GROUPS ELSE _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2035 READ (_FIL_NO,KEY=_KEY$,DOM=*NEXT)
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2045 IF ARG_1$<>"" THEN IF MID(_KEY$,1,LEN(ARG_1$))<>ARG_1$ THEN GOTO END_OF_FILE
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE:IF LEN(ARG_1$)=8 THEN ENABLE CONTROL ORDER_LINE_NUM.CTL; NEXT_ID=ORDER_LINE_NUM.CTL; REFRESH_FLG=1,_ENABLE_FLG=1,ARG_1_FLAG=1; GOSUB GET_FS1_INFO; EXIT ELSE MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2225 READ (_FIL_NO,KEY=_KEY$,DOM=*NEXT)
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); IF ARG_1$<>"" AND MID(_KEY$,1,LEN(ARG_1$))<>ARG_1$ THEN GOTO START_OF_FILE ELSE READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2422 IF LEN(ARG_1$)=11 THEN _KEY$=ARG_1$; GOTO READ_FIRST
2425 IF ARG_1$="" THEN {
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2435  } ELSE {
2440 READ (_FIL_NO,KEY=ARG_1$,DOM=*NEXT)
2445 _KEY$=KEY(_FIL_NO,ERR=NO_FIRST)
2448  }
2450 READ_FIRST:READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2625 IF ARG_1$="" THEN {
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2635  } ELSE {
2637 IF LEN(ARG_1$)=11 THEN {
2638 _KEY$=ARG_1$
2639  } ELSE {
2640 READ (_FIL_NO,KEY=ARG_1$+$FF$,DOM=*NEXT)
2645 _KEY$=KEP(_FIL_NO,ERR=NO_LAST)
2646  }
2648  }
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 ! - NOT NEEDED ->READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF NOT(%OE_GRID) THEN IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS ! SSP208671
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3051 FIND_FEE_VENDOR$=FIND_FEE_VEND_DIV$+FIND_FEE_VEND_CODE$ ! SSP 201116
3052 GOSUB GET_FS1_INFO; IF NOT(%OE_GRID) THEN GOSUB SET_SHIP_BUTTON ! SSP208671
3053 GOSUB SET_YESNO ! SSP208671
3054 IF LINE_TYPE$="S" THEN DIM FMP$(72),FMP[2]; SPC_CHG_EXT_ONLY=0; FIND (Z[9],KEY="X"+ITEM_CODE$,DOM=*NEXT)FMP$,FMP[0],FMP[1],FMP[2]; IF MID(FMP$,61,1)="Y" THEN SPC_CHG_EXT_ONLY=1
3055 GOSUB GLOBAL_VARS
3056 PRIOR_OPEN_QTY=OPEN_QTY; PREV_VEND$=VEND_DIV$+VEND_CODE$; SPECIAL_SHIP_QTY=OPEN_QTY
3057 IF NOT(NUL(QUOTE_LINE_NUM$)) THEN GOSUB READ_QUOTE_LINE ! SSP 240173
3058 IF NOT(NUL(QUOTE_LINE_NUM$)) OR POS(LINE_TYPE$="IC")<>0 THEN GOSUB 48700
3060 CHANGE_FLG=0
3062 IF NOT(%OE_GRID) OR SCRN_ID$="FMGODB.V7" THEN READ (Z[30],KEY=ITEM_CODE$,DOM=*NEXT)OSS2$; IF OSS2$<>"" THEN SHOW CONTROL TOPS_ITEM_CODE.CTL; TOPS_ITEM_CODE$=MID(OSS2$,11,15); OSS2$="",REFRESH_FLG=1; CALL "*wingrp;disable",YES_TOPS.GRP$; CALL "*wingrp;disable",TOPS_BUTTON.GRP$; REM SSP 307461
3063 IF OPEN_QTY AND UNIT_SELL_PRICE=0 AND SELL_PRICE_EXT THEN PRICE_EXT_ONLY=1
3065 IF OPEN_QTY AND UNIT_COST=0 AND COST_EXT THEN COST_EXT_ONLY=1
3092 IF MID(%OP_PARM$,310,1)<>"Y" THEN GOTO *RETURN ! SSP 184532
3093 RC_NUMBER$=""; DIM EDW$(200); FIND (Z[31],KEY=ORDER$+ORDER_LINE_NUM$,DOM=*NEXT)EDW$,EDW0,WDW1; RC_NUMBER$=EDW$(12,20) ! SSP 184532
3094 CUSTOMER$=CUST_DIV$+CUST_CODE$,%REST_FROM_SRC=0; REM SSP 205528
3099 RETURN ! SSP 184532
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 IF %ITEM_CODE_TAG$<>"Message:" THEN GOSUB DETERMINE_CHGS ! SSP242922 jdf
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3255 IF CHUI_ERR THEN CHUI_ERR=0; GOTO 3310
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3315 _KEY$=ORDER_DIV$+ORDER_NUM$+ORDER_LINE_NUM$
3320 WRT:IF LINE_TYPE$="I" THEN CUST_DIV$="  ",CUST_CODE$=DIM(8) ! SSP 196904
3322 IF SCRN_ID$="FMGODB.V7" THEN IF STP(ORDER_LINE_NUM$)="" THEN GOTO *RETURN ! SSP242299 jdf
3325 WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR) ! SSP 196904
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3361 IF MID(%OP_PARM$,310,1)<>"Y" OR POS(LINE_TYPE$="ICS ")=0 THEN GOTO 3370 ! SSP 184532
3362 IF STP(EDW$)="" THEN DIM EDW$(200) ! ssp 184532
3363 FIND (Z[9],KEY="D"+FS1_CUSTOMER$,DOM=*NEXT)O2$; IF MID(O2$,62,1)="Y" AND STP(RC_NUMBER$)="" AND %OP_PARM$(310,1)="Y" THEN MSGBOX MSG("RC_NUM_REQ"),MSG("WARNING"),"STOP,TIM=1"; NEXT_ID=RC_NUMBER.CTL,NEXT_FOLDER=FLDR.FMGODB.3.CTL,IGNORE_EXIT=1; EXIT ! ssp 184532 SSP 199731, SSP 203629
3365 EDW$(1,8)=ORDER$,EDW$(9,3)=ORDER_LINE_NUM$,EDW$(12,20)=RC_NUMBER$; WRITE (Z[31],KEY=EDW$(1,11))EDW$,EDW0,EDW1 ! SSP 184532
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3515 GOSUB SET_FIELDS
3525 GOSUB NUM_TO_STR; PERFORM PGN+";CALCULATIONS"
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=ORDER.CTL,_FIRST_FIELD=LINE_TYPE.CTL,_FIRST_FOLDER=FLDR.FMGODB.1.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3825 IF FORCE_SHIP THEN FORCE_SHIP=0; GOTO 3830 ! SSP 238502
3829 IF NORMAL_EXIT THEN NORMAL_EXIT=0; GOTO WRITE_REC ! Skip confirmation question
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO 1450 ! SSP246315 jdf
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 OPEN_QTY$=STR(OPEN_QTY)
10030 UNIT_COST$=STR(UNIT_COST)
10040 COST_QTY_PER$=STR(COST_QTY_PER)
10050 COST_EXT$=STR(COST_EXT)
10060 UNIT_SELL_PRICE$=STR(UNIT_SELL_PRICE)
10070 QTY_IN_SELL_UM$=STR(QTY_IN_SELL_UM)
10080 SELL_PRICE_EXT$=STR(SELL_PRICE_EXT)
10090 QTY_UNBILLED_SHIP$=STR(QTY_UNBILLED_SHIP)
10100 QTY_BO_RCV_FS3$=STR(QTY_BO_RCV_FS3)
10110 NUM_OF_CTN_LBL_PRNT$=STR(NUM_OF_CTN_LBL_PRNT)
10120 ORIG_QTY_ORDERED$=STR(ORIG_QTY_ORDERED)
10130 FIND_FEE_PRCNT$=STR(FIND_FEE_PRCNT)
10140 CTN_PACK$=STR(CTN_PACK)
10150 COMBO_QTY$=STR(COMBO_QTY)
10160 QTY_INV_TO_DATE$=STR(QTY_INV_TO_DATE)
10170 UNBILL_SHIP_UNIT_CST$=STR(UNBILL_SHIP_UNIT_CST)
10180 INVD_TO_DATE_QTY$=STR(INVD_TO_DATE_QTY)
10190 FRT_RETURNS_FROM_LOT$=STR(FRT_RETURNS_FROM_LOT)
10200 REV_UNIT_SELL_PRICE$=STR(REV_UNIT_SELL_PRICE)
10210 UNBILLED_SHIP_EXT$=STR(UNBILLED_SHIP_EXT)
10220 INVD_TO_DATE_EXTCST$=STR(INVD_TO_DATE_EXTCST)
10230 INVD_TO_DATE_EXT$=STR(INVD_TO_DATE_EXT)
10240 UNIT_LIST_PRICE$=STR(UNIT_LIST_PRICE)
10250 LINE_ITEM_DISC_PRCNT$=STR(LINE_ITEM_DISC_PRCNT)
10260 NUM_OF_CART_LBLS_2$=STR(NUM_OF_CART_LBLS_2)
10270 FS2_UNUSED_1$=STR(FS2_UNUSED_1)
10280 NUM_STORAGE_MTH$=STR(NUM_STORAGE_MTH:"00") ! ssp 200130
10290 FMS_PRICE$=STR(FMS_PRICE)
10300 FS2_UNUSED_4$=STR(FS2_UNUSED_4)
10310 FS2_UNUSED_5$=STR(FS2_UNUSED_5)
10500 GOSUB PRINT_FLAGS_IN
10505 %LINE_TYPE$=LINE_TYPE$
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="OPEN_QTY",_X=OPEN_QTY.CTL,OPEN_QTY=NUM(OPEN_QTY$,ERR=NON_NUMERIC)
11030 _X$="UNIT_COST",_X=UNIT_COST.CTL,UNIT_COST=NUM(UNIT_COST$,ERR=NON_NUMERIC)
11040 _X$="COST_QTY_PER",_X=COST_QTY_PER.CTL,COST_QTY_PER=NUM(COST_QTY_PER$,ERR=NON_NUMERIC)
11050 _X$="COST_EXT",_X=COST_EXT.CTL,COST_EXT=NUM(COST_EXT$,ERR=NON_NUMERIC)
11060 _X$="UNIT_SELL_PRICE",_X=UNIT_SELL_PRICE.CTL,UNIT_SELL_PRICE=NUM(UNIT_SELL_PRICE$,ERR=NON_NUMERIC)
11070 _X$="QTY_IN_SELL_UM",_X=QTY_IN_SELL_UM.CTL,QTY_IN_SELL_UM=NUM(QTY_IN_SELL_UM$,ERR=NON_NUMERIC)
11080 _X$="SELL_PRICE_EXT",_X=SELL_PRICE_EXT.CTL,SELL_PRICE_EXT=NUM(SELL_PRICE_EXT$,ERR=NON_NUMERIC)
11090 _X$="QTY_UNBILLED_SHIP",_X=QTY_UNBILLED_SHIP.CTL,QTY_UNBILLED_SHIP=NUM(QTY_UNBILLED_SHIP$,ERR=NON_NUMERIC)
11100 _X$="QTY_BO_RCV_FS3",_X=QTY_BO_RCV_FS3.CTL,QTY_BO_RCV_FS3=NUM(QTY_BO_RCV_FS3$,ERR=NON_NUMERIC)
11110 _X$="NUM_OF_CTN_LBL_PRNT",_X=NUM_OF_CTN_LBL_PRNT.CTL,NUM_OF_CTN_LBL_PRNT=NUM(NUM_OF_CTN_LBL_PRNT$,ERR=NON_NUMERIC)
11120 _X$="ORIG_QTY_ORDERED",_X=ORIG_QTY_ORDERED.CTL,ORIG_QTY_ORDERED=NUM(ORIG_QTY_ORDERED$,ERR=NON_NUMERIC)
11130 _X$="FIND_FEE_PRCNT",_X=FIND_FEE_PRCNT.CTL,FIND_FEE_PRCNT=NUM(FIND_FEE_PRCNT$,ERR=NON_NUMERIC)
11140 _X$="CTN_PACK",_X=CTN_PACK.CTL,CTN_PACK=NUM(CTN_PACK$,ERR=NON_NUMERIC)
11150 _X$="COMBO_QTY",_X=COMBO_QTY.CTL,COMBO_QTY=NUM(COMBO_QTY$,ERR=NON_NUMERIC)
11160 _X$="QTY_INV_TO_DATE",_X=QTY_INV_TO_DATE.CTL,QTY_INV_TO_DATE=NUM(QTY_INV_TO_DATE$,ERR=NON_NUMERIC)
11170 _X$="UNBILL_SHIP_UNIT_CST",_X=UNBILL_SHIP_UNIT_CST.CTL,UNBILL_SHIP_UNIT_CST=NUM(UNBILL_SHIP_UNIT_CST$,ERR=NON_NUMERIC)
11180 _X$="INVD_TO_DATE_QTY",_X=INVD_TO_DATE_QTY.CTL,INVD_TO_DATE_QTY=NUM(INVD_TO_DATE_QTY$,ERR=NON_NUMERIC)
11190 _X$="FRT_RETURNS_FROM_LOT",_X=FRT_RETURNS_FROM_LOT.CTL,FRT_RETURNS_FROM_LOT=NUM(FRT_RETURNS_FROM_LOT$,ERR=NON_NUMERIC)
11200 _X$="REV_UNIT_SELL_PRICE",_X=REV_UNIT_SELL_PRICE.CTL,REV_UNIT_SELL_PRICE=NUM(REV_UNIT_SELL_PRICE$,ERR=NON_NUMERIC)
11210 _X$="UNBILLED_SHIP_EXT",_X=UNBILLED_SHIP_EXT.CTL,UNBILLED_SHIP_EXT=NUM(UNBILLED_SHIP_EXT$,ERR=NON_NUMERIC)
11220 _X$="INVD_TO_DATE_EXTCST",_X=INVD_TO_DATE_EXTCST.CTL,INVD_TO_DATE_EXTCST=NUM(INVD_TO_DATE_EXTCST$,ERR=NON_NUMERIC)
11230 _X$="INVD_TO_DATE_EXT",_X=INVD_TO_DATE_EXT.CTL,INVD_TO_DATE_EXT=NUM(INVD_TO_DATE_EXT$,ERR=NON_NUMERIC)
11240 _X$="UNIT_LIST_PRICE",_X=UNIT_LIST_PRICE.CTL,UNIT_LIST_PRICE=NUM(UNIT_LIST_PRICE$,ERR=NON_NUMERIC)
11250 _X$="LINE_ITEM_DISC_PRCNT",_X=LINE_ITEM_DISC_PRCNT.CTL,LINE_ITEM_DISC_PRCNT=NUM(LINE_ITEM_DISC_PRCNT$,ERR=NON_NUMERIC)
11260 _X$="NUM_OF_CART_LBLS_2",_X=NUM_OF_CART_LBLS_2.CTL,NUM_OF_CART_LBLS_2=NUM(NUM_OF_CART_LBLS_2$,ERR=NON_NUMERIC)
11270 _X$="FS2_UNUSED_1",_X=FS2_UNUSED_1.CTL,FS2_UNUSED_1=NUM(FS2_UNUSED_1$,ERR=NON_NUMERIC)
11280 _X$="NUM_STORAGE_MTH",_X=NUM_STORAGE_MTH.CTL,NUM_STORAGE_MTH=NUM(NUM_STORAGE_MTH$,ERR=NON_NUMERIC) ! SSP 200130
11290 _X$="FMS_PRICE",_X=FMS_PRICE.CTL,FMS_PRICE=NUM(FMS_PRICE$,ERR=NON_NUMERIC)
11300 _X$="FS2_UNUSED_4",_X=FS2_UNUSED_4.CTL,FS2_UNUSED_4=NUM(FS2_UNUSED_4$,ERR=NON_NUMERIC)
11310 _X$="FS2_UNUSED_5",_X=FS2_UNUSED_5.CTL,FS2_UNUSED_5=NUM(FS2_UNUSED_5$,ERR=NON_NUMERIC)
11500 GOSUB PRINT_FLAGS_OUT
11505 IF STP(CUSTOMER$,3)<>"" THEN CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$
11510 IF STP(VENDOR$,3)<>"" THEN CALL "ZZWLKU;PARSE_VEND",VENDOR$,VEND_DIV$,VEND_CODE$; GOSUB GET_VEND_NAME ! SSP217566  BUG ssp 236117
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 CTN_LBL_FORMAT_CD$=""
13030 LOT_INV_ORDER_LINE$=""
13040 ORDER_LINE_COMPLETE$=""
13050 FIXED_PRICE$=""
13060 CSTM_ITEM_LINE_TYPE$=" "
13070 IF _CLR_FLG$="R" THEN ORDER_LINE_NUM$=""
13080 PO_CODE$=""
13090 WHSE$=""
13100 CUSTOM$=""
13110 QUOTE_LINE_NUM$=""; QSA.CUST_REF$=""
13120 SPECIAL_SHIPPING$=""
13130 ITEM_CODE$=""
13140 PROD_CODE$=""
13150 LEFT_RIGHT$=""
13160 TOP_BOTTOM$=""
13170 PLYS$=""
13180 TF_DESC$=""
13190 PLANT_CODE$=""
13200 VEND_DIV$=""
13210 VEND_CODE$=""
13220 STARTING_NUM$=""
13230 RO_DATE$=""
13240 SPECS_REQ$=""
13250 COST_UM$=""
13260 SELL_UM$=""
13270 COMM_CODE$=""
13280 SKIP_ORDER_HIST$=""
13290 RUSH_CHARGE$=""
13300 FIND_FEE$=""
13310 IS_LINE_TAXABLE$=""
13320 FIND_FEE_VEND_DIV$=""
13330 FIND_FEE_VEND_CODE$=""
13340 ! IF _CLR_FLG$="R" THEN ORDER_DIV$=""
13350 ! IF _CLR_FLG$="R" THEN ORDER_NUM$=""
13360 LINE_TYPE$="",%LINE_TYPE$=""
13370 PRINT_FLAGS$=""
13380 CUST_DIV$=""
13390 CUST_CODE$=""
13400 JOB_NUM$=""
13410 JOB_DATE$=""
13420 ENDING_NUM$=""
13430 CTN_WT$=""
13440 COST_CODE$=""
13450 ITEM_CLASS$=""
13460 WHSE_CODE_PKLIST$=""
13470 PO_LINE_RCV_COMP$=""
13480 CTN_LBL_CODE_2ND$=""
13490 QUOTE$=""
13495 PRIOR_OPEN_QTY=0 ! SSP245209 jdf
13500 OPEN_QTY=0
13510 UNIT_COST=0
13520 COST_QTY_PER=0
13530 COST_EXT=0
13540 UNIT_SELL_PRICE=0
13550 QTY_IN_SELL_UM=0
13560 SELL_PRICE_EXT=0
13570 QTY_UNBILLED_SHIP=0
13580 QTY_BO_RCV_FS3=0
13590 NUM_OF_CTN_LBL_PRNT=0
13600 ORIG_QTY_ORDERED=0
13610 FIND_FEE_PRCNT=0
13620 CTN_PACK=0
13630 COMBO_QTY=0
13640 QTY_INV_TO_DATE=0
13650 UNBILL_SHIP_UNIT_CST=0
13660 INVD_TO_DATE_QTY=0
13670 FRT_RETURNS_FROM_LOT=0
13680 REV_UNIT_SELL_PRICE=0
13690 UNBILLED_SHIP_EXT=0
13700 INVD_TO_DATE_EXTCST=0
13710 INVD_TO_DATE_EXT=0
13720 UNIT_LIST_PRICE=0
13730 LINE_ITEM_DISC_PRCNT=0
13740 NUM_OF_CART_LBLS_2=0
13750 FS2_UNUSED_1=0
13760 FS2_UNUSED_2=0
13770 FMS_PRICE=0
13780 FS2_UNUSED_4=0
13790 FS2_UNUSED_5=0
13795 SP0_PRICE_TYPE$="",CHECKSPP$="" ! SSP 191604 jvv - Temporarily commented out for releasing 208671
13796 TOPS_ITEM_CODE$="" ! SSP 307461
13800 QUOTE_LINE_NUM_ENTRY$=""
13980 GOSUB NUM_TO_STR
13985 SPECIAL_SHIP_QTY=0,SPECIAL_SHIP_BUTTON_PRESSED=0
13990 REFRESH_FLG=1
13992 RC_NUMBER$="" ! SSP 184532
13993 HAS_COMP_ITEM$="" ! SSP 225781
13994 Q9=0,Q8=0,S1=0 ! SSP 224867
13995 DISPLAY_SELL_QTY=0,DISPLAY_SELL_QTY$="" ! SSP 227656
13997 DISPLAY_COST_QTY=0,DISPLAY_COST_QTY$="" ! SSP242299 jdf
13998 LINE_SPEC_URL$=""
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$ ELSE CALL "*wingrp;Disable",KEY2.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14985 IF WIZARD_MODE THEN CALL "*wingrp;hide",WIZARD_OFF.GRP$; CALL "*wingrp;show",WIZARD.GRP$; CALL "*wingrp;show",HIDE.GRP$; CALL "*wingrp;disable",WIZARD_DISABLE.GRP$ ELSE CALL "*wingrp;hide",WIZARD.GRP$; CALL "*wingrp;hide",HIDE.GRP$; CALL "*wingrp;show",WIZARD_OFF.GRP$; IF NUL(ORDER_LINE_NUM$) THEN HIDE CONTROL BUTTON_1.CTL
14987 IF WIZARD_MODE THEN IF FOLDER_ID$="FMGODB.4" THEN HIDE CONTROL WZ_NEXT.CTL; SHOW CONTROL WZ_FINISH.CTL ELSE HIDE CONTROL WZ_FINISH.CTL ! If last screen then hide next, show finish
14988 IF WIZARD_MODE THEN IF FOLDER_ID$<>"FMGODB.4" THEN HIDE CONTROL WZ_DONE.CTL; HIDE CONTROL WZ_FINISH.CTL ELSE SHOW CONTROL WZ_FINISH.CTL; HIDE CONTROL WZ_DONE.CTL ! If last screen then hide next, show finish
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(78,"N")
15030 IF _ORIG.CTN_LBL_FORMAT_CD$=_CUR.CTN_LBL_FORMAT_CD$ OR CTN_LBL_FORMAT_CD$=_CUR.CTN_LBL_FORMAT_CD$ THEN GOTO *NEXT ELSE IF _ORIG.CTN_LBL_FORMAT_CD$=CTN_LBL_FORMAT_CD$ THEN _CHG2$=_CHG2$+SEP+MSG("CTN_L_F_C")+" = "+_CUR.CTN_LBL_FORMAT_CD$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CTN_L_F_C")+" = "+_CUR.CTN_LBL_FORMAT_CD$
15040 IF _ORIG.LOT_INV_ORDER_LINE$=_CUR.LOT_INV_ORDER_LINE$ OR LOT_INV_ORDER_LINE$=_CUR.LOT_INV_ORDER_LINE$ THEN GOTO *NEXT ELSE IF _ORIG.LOT_INV_ORDER_LINE$=LOT_INV_ORDER_LINE$ THEN _CHG2$=_CHG2$+SEP+MSG("LOT_I_O_L")+" = "+_CUR.LOT_INV_ORDER_LINE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOT_I_O_L")+" = "+_CUR.LOT_INV_ORDER_LINE$
15050 IF _ORIG.ORDER_LINE_COMPLETE$=_CUR.ORDER_LINE_COMPLETE$ OR ORDER_LINE_COMPLETE$=_CUR.ORDER_LINE_COMPLETE$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_LINE_COMPLETE$=ORDER_LINE_COMPLETE$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDE_L_C")+" = "+_CUR.ORDER_LINE_COMPLETE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDE_L_C")+" = "+_CUR.ORDER_LINE_COMPLETE$
15060 IF _ORIG.FIXED_PRICE$=_CUR.FIXED_PRICE$ OR FIXED_PRICE$=_CUR.FIXED_PRICE$ THEN GOTO *NEXT ELSE IF _ORIG.FIXED_PRICE$=FIXED_PRICE$ THEN _CHG2$=_CHG2$+SEP+MSG("FIXE_P")+" = "+_CUR.FIXED_PRICE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FIXE_P")+" = "+_CUR.FIXED_PRICE$
15070 IF _ORIG.CSTM_ITEM_LINE_TYPE$=_CUR.CSTM_ITEM_LINE_TYPE$ OR CSTM_ITEM_LINE_TYPE$=_CUR.CSTM_ITEM_LINE_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.CSTM_ITEM_LINE_TYPE$=CSTM_ITEM_LINE_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("CSTM_I_L_T")+" = "+_CUR.CSTM_ITEM_LINE_TYPE$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CSTM_I_L_T")+" = "+_CUR.CSTM_ITEM_LINE_TYPE$
15080 IF _ORIG.ORDER_LINE_NUM$=_CUR.ORDER_LINE_NUM$ OR ORDER_LINE_NUM$=_CUR.ORDER_LINE_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_LINE_NUM$=ORDER_LINE_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDE_L_N")+" = "+_CUR.ORDER_LINE_NUM$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDE_L_N")+" = "+_CUR.ORDER_LINE_NUM$
15090 IF _ORIG.PO_CODE$=_CUR.PO_CODE$ OR PO_CODE$=_CUR.PO_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PO_CODE$=PO_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PO_CODE")+" = "+_CUR.PO_CODE$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PO_CODE")+" = "+_CUR.PO_CODE$
15100 IF _ORIG.WHSE$=_CUR.WHSE$ OR WHSE$=_CUR.WHSE$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE$=WHSE$ THEN _CHG2$=_CHG2$+SEP+MSG("WHSE")+" = "+_CUR.WHSE$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WHSE")+" = "+_CUR.WHSE$
15110 IF _ORIG.CUSTOM$=_CUR.CUSTOM$ OR CUSTOM$=_CUR.CUSTOM$ THEN GOTO *NEXT ELSE IF _ORIG.CUSTOM$=CUSTOM$ THEN _CHG2$=_CHG2$+SEP+MSG("CUSTOM")+" = "+_CUR.CUSTOM$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUSTOM")+" = "+_CUR.CUSTOM$
15120 IF _ORIG.QUOTE_LINE_NUM$=_CUR.QUOTE_LINE_NUM$ OR QUOTE_LINE_NUM$=_CUR.QUOTE_LINE_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.QUOTE_LINE_NUM$=QUOTE_LINE_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("QUOT_L_N")+" = "+_CUR.QUOTE_LINE_NUM$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QUOT_L_N")+" = "+_CUR.QUOTE_LINE_NUM$
15130 IF _ORIG.SPECIAL_SHIPPING$=_CUR.SPECIAL_SHIPPING$ OR SPECIAL_SHIPPING$=_CUR.SPECIAL_SHIPPING$ THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_SHIPPING$=SPECIAL_SHIPPING$ THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_S")+" = "+_CUR.SPECIAL_SHIPPING$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_S")+" = "+_CUR.SPECIAL_SHIPPING$
15140 IF _ORIG.ITEM_CODE$=_CUR.ITEM_CODE$ OR ITEM_CODE$=_CUR.ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CODE$=ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$
15150 IF _ORIG.PROD_CODE$=_CUR.PROD_CODE$ OR PROD_CODE$=_CUR.PROD_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PROD_CODE$=PROD_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PROD_CODE")+" = "+_CUR.PROD_CODE$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PROD_CODE")+" = "+_CUR.PROD_CODE$
15160 IF _ORIG.LEFT_RIGHT$=_CUR.LEFT_RIGHT$ OR LEFT_RIGHT$=_CUR.LEFT_RIGHT$ THEN GOTO *NEXT ELSE IF _ORIG.LEFT_RIGHT$=LEFT_RIGHT$ THEN _CHG2$=_CHG2$+SEP+MSG("LEFT_RIGHT")+" = "+_CUR.LEFT_RIGHT$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LEFT_RIGHT")+" = "+_CUR.LEFT_RIGHT$
15170 IF _ORIG.TOP_BOTTOM$=_CUR.TOP_BOTTOM$ OR TOP_BOTTOM$=_CUR.TOP_BOTTOM$ THEN GOTO *NEXT ELSE IF _ORIG.TOP_BOTTOM$=TOP_BOTTOM$ THEN _CHG2$=_CHG2$+SEP+MSG("TOP_BOTTOM")+" = "+_CUR.TOP_BOTTOM$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TOP_BOTTOM")+" = "+_CUR.TOP_BOTTOM$
15180 IF _ORIG.PLYS$=_CUR.PLYS$ OR PLYS$=_CUR.PLYS$ THEN GOTO *NEXT ELSE IF _ORIG.PLYS$=PLYS$ THEN _CHG2$=_CHG2$+SEP+MSG("PLYS")+" = "+_CUR.PLYS$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLYS")+" = "+_CUR.PLYS$
15190 IF _ORIG.TF_DESC$=_CUR.TF_DESC$ OR TF_DESC$=_CUR.TF_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.TF_DESC$=TF_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC")+" = "+_CUR.TF_DESC$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC")+" = "+_CUR.TF_DESC$
15200 IF _ORIG.PLANT_CODE$=_CUR.PLANT_CODE$ OR PLANT_CODE$=_CUR.PLANT_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PLANT_CODE$=PLANT_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PLANT_CODE")+" = "+_CUR.PLANT_CODE$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLANT_CODE")+" = "+_CUR.PLANT_CODE$
15210 IF _ORIG.VEND_DIV$=_CUR.VEND_DIV$ OR VEND_DIV$=_CUR.VEND_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_DIV$=VEND_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$
15220 IF _ORIG.VEND_CODE$=_CUR.VEND_CODE$ OR VEND_CODE$=_CUR.VEND_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_CODE$=VEND_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$
15230 IF _ORIG.STARTING_NUM$=_CUR.STARTING_NUM$ OR STARTING_NUM$=_CUR.STARTING_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.STARTING_NUM$=STARTING_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("STAR_N")+" = "+_CUR.STARTING_NUM$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STAR_N")+" = "+_CUR.STARTING_NUM$
15240 IF _ORIG.RO_DATE$=_CUR.RO_DATE$ OR RO_DATE$=_CUR.RO_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.RO_DATE$=RO_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("RO_DATE")+" = "+_CUR.RO_DATE$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RO_DATE")+" = "+_CUR.RO_DATE$
15250 IF _ORIG.SPECS_REQ$=_CUR.SPECS_REQ$ OR SPECS_REQ$=_CUR.SPECS_REQ$ THEN GOTO *NEXT ELSE IF _ORIG.SPECS_REQ$=SPECS_REQ$ THEN _CHG2$=_CHG2$+SEP+MSG("SPECS_REQ")+" = "+_CUR.SPECS_REQ$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPECS_REQ")+" = "+_CUR.SPECS_REQ$
15260 IF _ORIG.COST_UM$=_CUR.COST_UM$ OR COST_UM$=_CUR.COST_UM$ THEN GOTO *NEXT ELSE IF _ORIG.COST_UM$=COST_UM$ THEN _CHG2$=_CHG2$+SEP+MSG("COST_UM")+" = "+_CUR.COST_UM$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COST_UM")+" = "+_CUR.COST_UM$
15270 IF _ORIG.SELL_UM$=_CUR.SELL_UM$ OR SELL_UM$=_CUR.SELL_UM$ THEN GOTO *NEXT ELSE IF _ORIG.SELL_UM$=SELL_UM$ THEN _CHG2$=_CHG2$+SEP+MSG("SELL_UM")+" = "+_CUR.SELL_UM$,_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SELL_UM")+" = "+_CUR.SELL_UM$
15280 IF _ORIG.COMM_CODE$=_CUR.COMM_CODE$ OR COMM_CODE$=_CUR.COMM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.COMM_CODE$=COMM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("COMM_CODE")+" = "+_CUR.COMM_CODE$,_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMM_CODE")+" = "+_CUR.COMM_CODE$
15290 IF _ORIG.SKIP_ORDER_HIST$=_CUR.SKIP_ORDER_HIST$ OR SKIP_ORDER_HIST$=_CUR.SKIP_ORDER_HIST$ THEN GOTO *NEXT ELSE IF _ORIG.SKIP_ORDER_HIST$=SKIP_ORDER_HIST$ THEN _CHG2$=_CHG2$+SEP+MSG("SKIP_O_H")+" = "+_CUR.SKIP_ORDER_HIST$,_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SKIP_O_H")+" = "+_CUR.SKIP_ORDER_HIST$
15300 IF _ORIG.RUSH_CHARGE$=_CUR.RUSH_CHARGE$ OR RUSH_CHARGE$=_CUR.RUSH_CHARGE$ THEN GOTO *NEXT ELSE IF _ORIG.RUSH_CHARGE$=RUSH_CHARGE$ THEN _CHG2$=_CHG2$+SEP+MSG("RUSH_C")+" = "+_CUR.RUSH_CHARGE$,_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RUSH_C")+" = "+_CUR.RUSH_CHARGE$
15310 IF _ORIG.FIND_FEE$=_CUR.FIND_FEE$ OR FIND_FEE$=_CUR.FIND_FEE$ THEN GOTO *NEXT ELSE IF _ORIG.FIND_FEE$=FIND_FEE$ THEN _CHG2$=_CHG2$+SEP+MSG("FIND_FEE")+" = "+_CUR.FIND_FEE$,_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FIND_FEE")+" = "+_CUR.FIND_FEE$
15320 IF _ORIG.IS_LINE_TAXABLE$=_CUR.IS_LINE_TAXABLE$ OR IS_LINE_TAXABLE$=_CUR.IS_LINE_TAXABLE$ THEN GOTO *NEXT ELSE IF _ORIG.IS_LINE_TAXABLE$=IS_LINE_TAXABLE$ THEN _CHG2$=_CHG2$+SEP+MSG("I_L_T")+" = "+_CUR.IS_LINE_TAXABLE$,_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("I_L_T")+" = "+_CUR.IS_LINE_TAXABLE$
15330 IF _ORIG.FIND_FEE_VEND_DIV$=_CUR.FIND_FEE_VEND_DIV$ OR FIND_FEE_VEND_DIV$=_CUR.FIND_FEE_VEND_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.FIND_FEE_VEND_DIV$=FIND_FEE_VEND_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("FIND_F_V_D")+" = "+_CUR.FIND_FEE_VEND_DIV$,_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FIND_F_V_D")+" = "+_CUR.FIND_FEE_VEND_DIV$
15340 IF _ORIG.FIND_FEE_VEND_CODE$=_CUR.FIND_FEE_VEND_CODE$ OR FIND_FEE_VEND_CODE$=_CUR.FIND_FEE_VEND_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.FIND_FEE_VEND_CODE$=FIND_FEE_VEND_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("FIND_F_V_C")+" = "+_CUR.FIND_FEE_VEND_CODE$,_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FIND_F_V_C")+" = "+_CUR.FIND_FEE_VEND_CODE$
15350 IF _ORIG.ORDER_DIV$=_CUR.ORDER_DIV$ OR ORDER_DIV$=_CUR.ORDER_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_DIV$=ORDER_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_DIV")+" = "+_CUR.ORDER_DIV$,_CHG_VAR$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_DIV")+" = "+_CUR.ORDER_DIV$
15360 IF _ORIG.ORDER_NUM$=_CUR.ORDER_NUM$ OR ORDER_NUM$=_CUR.ORDER_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_NUM$=ORDER_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_NUM")+" = "+_CUR.ORDER_NUM$,_CHG_VAR$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_NUM")+" = "+_CUR.ORDER_NUM$
15370 IF _ORIG.LINE_TYPE$=_CUR.LINE_TYPE$ OR LINE_TYPE$=_CUR.LINE_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.LINE_TYPE$=LINE_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("LINE_TYPE")+" = "+_CUR.LINE_TYPE$,_CHG_VAR$(35,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_TYPE")+" = "+_CUR.LINE_TYPE$
15380 IF _ORIG.PRINT_FLAGS$=_CUR.PRINT_FLAGS$ OR PRINT_FLAGS$=_CUR.PRINT_FLAGS$ THEN GOTO *NEXT ELSE IF _ORIG.PRINT_FLAGS$=PRINT_FLAGS$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIN_FLG")+" = "+_CUR.PRINT_FLAGS$,_CHG_VAR$(36,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIN_FLG")+" = "+_CUR.PRINT_FLAGS$
15390 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(37,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15400 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(38,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15410 IF _ORIG.JOB_NUM$=_CUR.JOB_NUM$ OR JOB_NUM$=_CUR.JOB_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.JOB_NUM$=JOB_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("JOB_NUM")+" = "+_CUR.JOB_NUM$,_CHG_VAR$(39,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("JOB_NUM")+" = "+_CUR.JOB_NUM$
15420 IF _ORIG.JOB_DATE$=_CUR.JOB_DATE$ OR JOB_DATE$=_CUR.JOB_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.JOB_DATE$=JOB_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("JOB_DATE")+" = "+_CUR.JOB_DATE$,_CHG_VAR$(40,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("JOB_DATE")+" = "+_CUR.JOB_DATE$
15430 IF _ORIG.ENDING_NUM$=_CUR.ENDING_NUM$ OR ENDING_NUM$=_CUR.ENDING_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.ENDING_NUM$=ENDING_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("ENDING_NUM")+" = "+_CUR.ENDING_NUM$,_CHG_VAR$(41,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ENDING_NUM")+" = "+_CUR.ENDING_NUM$
15440 IF _ORIG.CTN_WT$=_CUR.CTN_WT$ OR CTN_WT$=_CUR.CTN_WT$ THEN GOTO *NEXT ELSE IF _ORIG.CTN_WT$=CTN_WT$ THEN _CHG2$=_CHG2$+SEP+MSG("CTN_WT")+" = "+_CUR.CTN_WT$,_CHG_VAR$(42,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CTN_WT")+" = "+_CUR.CTN_WT$
15450 IF _ORIG.COST_CODE$=_CUR.COST_CODE$ OR COST_CODE$=_CUR.COST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.COST_CODE$=COST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("COST_CODE")+" = "+_CUR.COST_CODE$,_CHG_VAR$(43,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COST_CODE")+" = "+_CUR.COST_CODE$
15460 IF _ORIG.ITEM_CLASS$=_CUR.ITEM_CLASS$ OR ITEM_CLASS$=_CUR.ITEM_CLASS$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CLASS$=ITEM_CLASS$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CLASS")+" = "+_CUR.ITEM_CLASS$,_CHG_VAR$(44,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CLASS")+" = "+_CUR.ITEM_CLASS$
15470 IF _ORIG.WHSE_CODE_PKLIST$=_CUR.WHSE_CODE_PKLIST$ OR WHSE_CODE_PKLIST$=_CUR.WHSE_CODE_PKLIST$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE_CODE_PKLIST$=WHSE_CODE_PKLIST$ THEN _CHG2$=_CHG2$+SEP+MSG("WHSE_C_P")+" = "+_CUR.WHSE_CODE_PKLIST$,_CHG_VAR$(45,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WHSE_C_P")+" = "+_CUR.WHSE_CODE_PKLIST$
15480 IF _ORIG.PO_LINE_RCV_COMP$=_CUR.PO_LINE_RCV_COMP$ OR PO_LINE_RCV_COMP$=_CUR.PO_LINE_RCV_COMP$ THEN GOTO *NEXT ELSE IF _ORIG.PO_LINE_RCV_COMP$=PO_LINE_RCV_COMP$ THEN _CHG2$=_CHG2$+SEP+MSG("P_L_R_C")+" = "+_CUR.PO_LINE_RCV_COMP$,_CHG_VAR$(46,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("P_L_R_C")+" = "+_CUR.PO_LINE_RCV_COMP$
15490 IF _ORIG.CTN_LBL_CODE_2ND$=_CUR.CTN_LBL_CODE_2ND$ OR CTN_LBL_CODE_2ND$=_CUR.CTN_LBL_CODE_2ND$ THEN GOTO *NEXT ELSE IF _ORIG.CTN_LBL_CODE_2ND$=CTN_LBL_CODE_2ND$ THEN _CHG2$=_CHG2$+SEP+MSG("CTN_L_C_2")+" = "+_CUR.CTN_LBL_CODE_2ND$,_CHG_VAR$(47,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CTN_L_C_2")+" = "+_CUR.CTN_LBL_CODE_2ND$
15500 IF _ORIG.QUOTE$=_CUR.QUOTE$ OR QUOTE$=_CUR.QUOTE$ THEN GOTO *NEXT ELSE IF _ORIG.QUOTE$=QUOTE$ THEN _CHG2$=_CHG2$+SEP+MSG("QUOTE_NUM")+" = "+_CUR.QUOTE$,_CHG_VAR$(48,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QUOTE_NUM")+" = "+_CUR.QUOTE$
15510 IF _ORIG.OPEN_QTY=_CUR.OPEN_QTY OR OPEN_QTY=_CUR.OPEN_QTY THEN GOTO *NEXT ELSE IF _ORIG.OPEN_QTY=OPEN_QTY THEN _CHG2$=_CHG2$+SEP+MSG("OPEN_QTY")+" = "+STR(_CUR.OPEN_QTY),_CHG_VAR$(49,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OPEN_QTY")+" = "+STR(_CUR.OPEN_QTY)
15520 IF _ORIG.UNIT_COST=_CUR.UNIT_COST OR UNIT_COST=_CUR.UNIT_COST THEN GOTO *NEXT ELSE IF _ORIG.UNIT_COST=UNIT_COST THEN _CHG2$=_CHG2$+SEP+MSG("UNIT_COST")+" = "+STR(_CUR.UNIT_COST),_CHG_VAR$(50,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNIT_COST")+" = "+STR(_CUR.UNIT_COST)
15530 IF _ORIG.COST_QTY_PER=_CUR.COST_QTY_PER OR COST_QTY_PER=_CUR.COST_QTY_PER THEN GOTO *NEXT ELSE IF _ORIG.COST_QTY_PER=COST_QTY_PER THEN _CHG2$=_CHG2$+SEP+MSG("COST_Q_PUM")+" = "+STR(_CUR.COST_QTY_PER),_CHG_VAR$(51,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COST_Q_PUM")+" = "+STR(_CUR.COST_QTY_PER)
15540 IF _ORIG.COST_EXT=_CUR.COST_EXT OR COST_EXT=_CUR.COST_EXT THEN GOTO *NEXT ELSE IF _ORIG.COST_EXT=COST_EXT THEN _CHG2$=_CHG2$+SEP+MSG("COST_EXT")+" = "+STR(_CUR.COST_EXT),_CHG_VAR$(52,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COST_EXT")+" = "+STR(_CUR.COST_EXT)
15550 IF _ORIG.UNIT_SELL_PRICE=_CUR.UNIT_SELL_PRICE OR UNIT_SELL_PRICE=_CUR.UNIT_SELL_PRICE THEN GOTO *NEXT ELSE IF _ORIG.UNIT_SELL_PRICE=UNIT_SELL_PRICE THEN _CHG2$=_CHG2$+SEP+MSG("UNIT_S_P")+" = "+STR(_CUR.UNIT_SELL_PRICE),_CHG_VAR$(53,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNIT_S_P")+" = "+STR(_CUR.UNIT_SELL_PRICE)
15560 IF _ORIG.QTY_IN_SELL_UM=_CUR.QTY_IN_SELL_UM OR QTY_IN_SELL_UM=_CUR.QTY_IN_SELL_UM THEN GOTO *NEXT ELSE IF _ORIG.QTY_IN_SELL_UM=QTY_IN_SELL_UM THEN _CHG2$=_CHG2$+SEP+MSG("QTY_I_S_UM")+" = "+STR(_CUR.QTY_IN_SELL_UM),_CHG_VAR$(54,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_I_S_UM")+" = "+STR(_CUR.QTY_IN_SELL_UM)
15570 IF _ORIG.SELL_PRICE_EXT=_CUR.SELL_PRICE_EXT OR SELL_PRICE_EXT=_CUR.SELL_PRICE_EXT THEN GOTO *NEXT ELSE IF _ORIG.SELL_PRICE_EXT=SELL_PRICE_EXT THEN _CHG2$=_CHG2$+SEP+MSG("SELL_P_E")+" = "+STR(_CUR.SELL_PRICE_EXT),_CHG_VAR$(55,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SELL_P_E")+" = "+STR(_CUR.SELL_PRICE_EXT)
15580 IF _ORIG.QTY_UNBILLED_SHIP=_CUR.QTY_UNBILLED_SHIP OR QTY_UNBILLED_SHIP=_CUR.QTY_UNBILLED_SHIP THEN GOTO *NEXT ELSE IF _ORIG.QTY_UNBILLED_SHIP=QTY_UNBILLED_SHIP THEN _CHG2$=_CHG2$+SEP+MSG("QTY_U_S")+" = "+STR(_CUR.QTY_UNBILLED_SHIP),_CHG_VAR$(56,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_U_S")+" = "+STR(_CUR.QTY_UNBILLED_SHIP)
15590 IF _ORIG.QTY_BO_RCV_FS3=_CUR.QTY_BO_RCV_FS3 OR QTY_BO_RCV_FS3=_CUR.QTY_BO_RCV_FS3 THEN GOTO *NEXT ELSE IF _ORIG.QTY_BO_RCV_FS3=QTY_BO_RCV_FS3 THEN _CHG2$=_CHG2$+SEP+MSG("QTY_B_R_F")+" = "+STR(_CUR.QTY_BO_RCV_FS3),_CHG_VAR$(57,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_B_R_F")+" = "+STR(_CUR.QTY_BO_RCV_FS3)
15600 IF _ORIG.NUM_OF_CTN_LBL_PRNT=_CUR.NUM_OF_CTN_LBL_PRNT OR NUM_OF_CTN_LBL_PRNT=_CUR.NUM_OF_CTN_LBL_PRNT THEN GOTO *NEXT ELSE IF _ORIG.NUM_OF_CTN_LBL_PRNT=NUM_OF_CTN_LBL_PRNT THEN _CHG2$=_CHG2$+SEP+MSG("N_O_C_L_P")+" = "+STR(_CUR.NUM_OF_CTN_LBL_PRNT),_CHG_VAR$(58,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("N_O_C_L_P")+" = "+STR(_CUR.NUM_OF_CTN_LBL_PRNT)
15610 IF _ORIG.ORIG_QTY_ORDERED=_CUR.ORIG_QTY_ORDERED OR ORIG_QTY_ORDERED=_CUR.ORIG_QTY_ORDERED THEN GOTO *NEXT ELSE IF _ORIG.ORIG_QTY_ORDERED=ORIG_QTY_ORDERED THEN _CHG2$=_CHG2$+SEP+MSG("ORIG_Q_O")+" = "+STR(_CUR.ORIG_QTY_ORDERED),_CHG_VAR$(59,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORIG_Q_O")+" = "+STR(_CUR.ORIG_QTY_ORDERED)
15620 IF _ORIG.FIND_FEE_PRCNT=_CUR.FIND_FEE_PRCNT OR FIND_FEE_PRCNT=_CUR.FIND_FEE_PRCNT THEN GOTO *NEXT ELSE IF _ORIG.FIND_FEE_PRCNT=FIND_FEE_PRCNT THEN _CHG2$=_CHG2$+SEP+MSG("FIND_F_P")+" = "+STR(_CUR.FIND_FEE_PRCNT),_CHG_VAR$(60,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FIND_F_P")+" = "+STR(_CUR.FIND_FEE_PRCNT)
15630 IF _ORIG.CTN_PACK=_CUR.CTN_PACK OR CTN_PACK=_CUR.CTN_PACK THEN GOTO *NEXT ELSE IF _ORIG.CTN_PACK=CTN_PACK THEN _CHG2$=_CHG2$+SEP+MSG("CTN_PACK")+" = "+STR(_CUR.CTN_PACK),_CHG_VAR$(61,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CTN_PACK")+" = "+STR(_CUR.CTN_PACK)
15640 IF _ORIG.COMBO_QTY=_CUR.COMBO_QTY OR COMBO_QTY=_CUR.COMBO_QTY THEN GOTO *NEXT ELSE IF _ORIG.COMBO_QTY=COMBO_QTY THEN _CHG2$=_CHG2$+SEP+MSG("COMBO_QTY")+" = "+STR(_CUR.COMBO_QTY),_CHG_VAR$(62,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMBO_QTY")+" = "+STR(_CUR.COMBO_QTY)
15650 IF _ORIG.QTY_INV_TO_DATE=_CUR.QTY_INV_TO_DATE OR QTY_INV_TO_DATE=_CUR.QTY_INV_TO_DATE THEN GOTO *NEXT ELSE IF _ORIG.QTY_INV_TO_DATE=QTY_INV_TO_DATE THEN _CHG2$=_CHG2$+SEP+MSG("QTY_I_T_D")+" = "+STR(_CUR.QTY_INV_TO_DATE),_CHG_VAR$(63,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_I_T_D")+" = "+STR(_CUR.QTY_INV_TO_DATE)
15660 IF _ORIG.UNBILL_SHIP_UNIT_CST=_CUR.UNBILL_SHIP_UNIT_CST OR UNBILL_SHIP_UNIT_CST=_CUR.UNBILL_SHIP_UNIT_CST THEN GOTO *NEXT ELSE IF _ORIG.UNBILL_SHIP_UNIT_CST=UNBILL_SHIP_UNIT_CST THEN _CHG2$=_CHG2$+SEP+MSG("UNBI_S_U_C")+" = "+STR(_CUR.UNBILL_SHIP_UNIT_CST),_CHG_VAR$(64,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNBI_S_U_C")+" = "+STR(_CUR.UNBILL_SHIP_UNIT_CST)
15670 IF _ORIG.INVD_TO_DATE_QTY=_CUR.INVD_TO_DATE_QTY OR INVD_TO_DATE_QTY=_CUR.INVD_TO_DATE_QTY THEN GOTO *NEXT ELSE IF _ORIG.INVD_TO_DATE_QTY=INVD_TO_DATE_QTY THEN _CHG2$=_CHG2$+SEP+MSG("INVD_T_D_Q")+" = "+STR(_CUR.INVD_TO_DATE_QTY),_CHG_VAR$(65,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INVD_T_D_Q")+" = "+STR(_CUR.INVD_TO_DATE_QTY)
15680 IF _ORIG.FRT_RETURNS_FROM_LOT=_CUR.FRT_RETURNS_FROM_LOT OR FRT_RETURNS_FROM_LOT=_CUR.FRT_RETURNS_FROM_LOT THEN GOTO *NEXT ELSE IF _ORIG.FRT_RETURNS_FROM_LOT=FRT_RETURNS_FROM_LOT THEN _CHG2$=_CHG2$+SEP+MSG("FRT_R_F_L")+" = "+STR(_CUR.FRT_RETURNS_FROM_LOT),_CHG_VAR$(66,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FRT_R_F_L")+" = "+STR(_CUR.FRT_RETURNS_FROM_LOT)
15690 IF _ORIG.REV_UNIT_SELL_PRICE=_CUR.REV_UNIT_SELL_PRICE OR REV_UNIT_SELL_PRICE=_CUR.REV_UNIT_SELL_PRICE THEN GOTO *NEXT ELSE IF _ORIG.REV_UNIT_SELL_PRICE=REV_UNIT_SELL_PRICE THEN _CHG2$=_CHG2$+SEP+MSG("REV_U_S_P")+" = "+STR(_CUR.REV_UNIT_SELL_PRICE),_CHG_VAR$(67,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("REV_U_S_P")+" = "+STR(_CUR.REV_UNIT_SELL_PRICE)
15700 IF _ORIG.UNBILLED_SHIP_EXT=_CUR.UNBILLED_SHIP_EXT OR UNBILLED_SHIP_EXT=_CUR.UNBILLED_SHIP_EXT THEN GOTO *NEXT ELSE IF _ORIG.UNBILLED_SHIP_EXT=UNBILLED_SHIP_EXT THEN _CHG2$=_CHG2$+SEP+MSG("UNBI_S_E")+" = "+STR(_CUR.UNBILLED_SHIP_EXT),_CHG_VAR$(68,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNBI_S_E")+" = "+STR(_CUR.UNBILLED_SHIP_EXT)
15710 IF _ORIG.INVD_TO_DATE_EXTCST=_CUR.INVD_TO_DATE_EXTCST OR INVD_TO_DATE_EXTCST=_CUR.INVD_TO_DATE_EXTCST THEN GOTO *NEXT ELSE IF _ORIG.INVD_TO_DATE_EXTCST=INVD_TO_DATE_EXTCST THEN _CHG2$=_CHG2$+SEP+MSG("INVD_T_D_E")+" = "+STR(_CUR.INVD_TO_DATE_EXTCST),_CHG_VAR$(69,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INVD_T_D_E")+" = "+STR(_CUR.INVD_TO_DATE_EXTCST)
15720 IF _ORIG.INVD_TO_DATE_EXT=_CUR.INVD_TO_DATE_EXT OR INVD_TO_DATE_EXT=_CUR.INVD_TO_DATE_EXT THEN GOTO *NEXT ELSE IF _ORIG.INVD_TO_DATE_EXT=INVD_TO_DATE_EXT THEN _CHG2$=_CHG2$+SEP+MSG("INV_T_D_EX")+" = "+STR(_CUR.INVD_TO_DATE_EXT),_CHG_VAR$(70,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_T_D_EX")+" = "+STR(_CUR.INVD_TO_DATE_EXT)
15730 IF _ORIG.UNIT_LIST_PRICE=_CUR.UNIT_LIST_PRICE OR UNIT_LIST_PRICE=_CUR.UNIT_LIST_PRICE THEN GOTO *NEXT ELSE IF _ORIG.UNIT_LIST_PRICE=UNIT_LIST_PRICE THEN _CHG2$=_CHG2$+SEP+MSG("UNIT_L_P")+" = "+STR(_CUR.UNIT_LIST_PRICE),_CHG_VAR$(71,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNIT_L_P")+" = "+STR(_CUR.UNIT_LIST_PRICE)
15740 IF _ORIG.LINE_ITEM_DISC_PRCNT=_CUR.LINE_ITEM_DISC_PRCNT OR LINE_ITEM_DISC_PRCNT=_CUR.LINE_ITEM_DISC_PRCNT THEN GOTO *NEXT ELSE IF _ORIG.LINE_ITEM_DISC_PRCNT=LINE_ITEM_DISC_PRCNT THEN _CHG2$=_CHG2$+SEP+MSG("LINE_I_D_P")+" = "+STR(_CUR.LINE_ITEM_DISC_PRCNT),_CHG_VAR$(72,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_I_D_P")+" = "+STR(_CUR.LINE_ITEM_DISC_PRCNT)
15750 IF _ORIG.NUM_OF_CART_LBLS_2=_CUR.NUM_OF_CART_LBLS_2 OR NUM_OF_CART_LBLS_2=_CUR.NUM_OF_CART_LBLS_2 THEN GOTO *NEXT ELSE IF _ORIG.NUM_OF_CART_LBLS_2=NUM_OF_CART_LBLS_2 THEN _CHG2$=_CHG2$+SEP+MSG("N_O_C_L_2")+" = "+STR(_CUR.NUM_OF_CART_LBLS_2),_CHG_VAR$(73,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("N_O_C_L_2")+" = "+STR(_CUR.NUM_OF_CART_LBLS_2)
15760 IF _ORIG.FS2_UNUSED_1=_CUR.FS2_UNUSED_1 OR FS2_UNUSED_1=_CUR.FS2_UNUSED_1 THEN GOTO *NEXT ELSE IF _ORIG.FS2_UNUSED_1=FS2_UNUSED_1 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FS2_UNUSED_1),_CHG_VAR$(74,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FS2_UNUSED_1)
15770 IF _ORIG.FS2_UNUSED_2=_CUR.FS2_UNUSED_2 OR FS2_UNUSED_2=_CUR.FS2_UNUSED_2 THEN GOTO *NEXT ELSE IF _ORIG.FS2_UNUSED_2=FS2_UNUSED_2 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FS2_UNUSED_2),_CHG_VAR$(75,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FS2_UNUSED_2)
15780 IF _ORIG.FMS_PRICE=_CUR.FMS_PRICE OR FMS_PRICE=_CUR.FMS_PRICE THEN GOTO *NEXT ELSE IF _ORIG.FMS_PRICE=FMS_PRICE THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FMS_PRICE),_CHG_VAR$(76,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FMS_PRICE)
15790 IF _ORIG.FS2_UNUSED_4=_CUR.FS2_UNUSED_4 OR FS2_UNUSED_4=_CUR.FS2_UNUSED_4 THEN GOTO *NEXT ELSE IF _ORIG.FS2_UNUSED_4=FS2_UNUSED_4 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FS2_UNUSED_4),_CHG_VAR$(77,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FS2_UNUSED_4)
15800 IF _ORIG.FS2_UNUSED_5=_CUR.FS2_UNUSED_5 OR FS2_UNUSED_5=_CUR.FS2_UNUSED_5 THEN GOTO *NEXT ELSE IF _ORIG.FS2_UNUSED_5=FS2_UNUSED_5 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FS2_UNUSED_5),_CHG_VAR$(78,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FS2_UNUSED_5)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CTN_LBL_FORMAT_CD$=_CUR.CTN_LBL_FORMAT_CD$
16030 IF _CHG_VAR$(2,1)="Y" THEN LOT_INV_ORDER_LINE$=_CUR.LOT_INV_ORDER_LINE$
16040 IF _CHG_VAR$(3,1)="Y" THEN ORDER_LINE_COMPLETE$=_CUR.ORDER_LINE_COMPLETE$
16050 IF _CHG_VAR$(4,1)="Y" THEN FIXED_PRICE$=_CUR.FIXED_PRICE$
16060 IF _CHG_VAR$(5,1)="Y" THEN CSTM_ITEM_LINE_TYPE$=_CUR.CSTM_ITEM_LINE_TYPE$
16070 IF _CHG_VAR$(6,1)="Y" THEN ORDER_LINE_NUM$=_CUR.ORDER_LINE_NUM$
16080 IF _CHG_VAR$(7,1)="Y" THEN PO_CODE$=_CUR.PO_CODE$
16090 IF _CHG_VAR$(8,1)="Y" THEN WHSE$=_CUR.WHSE$
16100 IF _CHG_VAR$(9,1)="Y" THEN CUSTOM$=_CUR.CUSTOM$
16110 IF _CHG_VAR$(10,1)="Y" THEN QUOTE_LINE_NUM$=_CUR.QUOTE_LINE_NUM$
16120 IF _CHG_VAR$(11,1)="Y" THEN SPECIAL_SHIPPING$=_CUR.SPECIAL_SHIPPING$
16130 IF _CHG_VAR$(12,1)="Y" THEN ITEM_CODE$=_CUR.ITEM_CODE$
16140 IF _CHG_VAR$(13,1)="Y" THEN PROD_CODE$=_CUR.PROD_CODE$
16150 IF _CHG_VAR$(14,1)="Y" THEN LEFT_RIGHT$=_CUR.LEFT_RIGHT$
16160 IF _CHG_VAR$(15,1)="Y" THEN TOP_BOTTOM$=_CUR.TOP_BOTTOM$
16170 IF _CHG_VAR$(16,1)="Y" THEN PLYS$=_CUR.PLYS$
16180 IF _CHG_VAR$(17,1)="Y" THEN TF_DESC$=_CUR.TF_DESC$
16190 IF _CHG_VAR$(18,1)="Y" THEN PLANT_CODE$=_CUR.PLANT_CODE$
16200 IF _CHG_VAR$(19,1)="Y" THEN VEND_DIV$=_CUR.VEND_DIV$
16210 IF _CHG_VAR$(20,1)="Y" THEN VEND_CODE$=_CUR.VEND_CODE$
16220 IF _CHG_VAR$(21,1)="Y" THEN STARTING_NUM$=_CUR.STARTING_NUM$
16230 IF _CHG_VAR$(22,1)="Y" THEN RO_DATE$=_CUR.RO_DATE$
16240 IF _CHG_VAR$(23,1)="Y" THEN SPECS_REQ$=_CUR.SPECS_REQ$
16250 IF _CHG_VAR$(24,1)="Y" THEN COST_UM$=_CUR.COST_UM$
16260 IF _CHG_VAR$(25,1)="Y" THEN SELL_UM$=_CUR.SELL_UM$
16270 IF _CHG_VAR$(26,1)="Y" THEN COMM_CODE$=_CUR.COMM_CODE$
16280 IF _CHG_VAR$(27,1)="Y" THEN SKIP_ORDER_HIST$=_CUR.SKIP_ORDER_HIST$
16290 IF _CHG_VAR$(28,1)="Y" THEN RUSH_CHARGE$=_CUR.RUSH_CHARGE$
16300 IF _CHG_VAR$(29,1)="Y" THEN FIND_FEE$=_CUR.FIND_FEE$
16310 IF _CHG_VAR$(30,1)="Y" THEN IS_LINE_TAXABLE$=_CUR.IS_LINE_TAXABLE$
16320 IF _CHG_VAR$(31,1)="Y" THEN FIND_FEE_VEND_DIV$=_CUR.FIND_FEE_VEND_DIV$
16330 IF _CHG_VAR$(32,1)="Y" THEN FIND_FEE_VEND_CODE$=_CUR.FIND_FEE_VEND_CODE$
16340 IF _CHG_VAR$(33,1)="Y" THEN ORDER_DIV$=_CUR.ORDER_DIV$
16350 IF _CHG_VAR$(34,1)="Y" THEN ORDER_NUM$=_CUR.ORDER_NUM$
16360 IF _CHG_VAR$(35,1)="Y" THEN LINE_TYPE$=_CUR.LINE_TYPE$
16370 IF _CHG_VAR$(36,1)="Y" THEN PRINT_FLAGS$=_CUR.PRINT_FLAGS$
16380 IF _CHG_VAR$(37,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16390 IF _CHG_VAR$(38,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16400 IF _CHG_VAR$(39,1)="Y" THEN JOB_NUM$=_CUR.JOB_NUM$
16410 IF _CHG_VAR$(40,1)="Y" THEN JOB_DATE$=_CUR.JOB_DATE$
16420 IF _CHG_VAR$(41,1)="Y" THEN ENDING_NUM$=_CUR.ENDING_NUM$
16430 IF _CHG_VAR$(42,1)="Y" THEN CTN_WT$=_CUR.CTN_WT$
16440 IF _CHG_VAR$(43,1)="Y" THEN COST_CODE$=_CUR.COST_CODE$
16450 IF _CHG_VAR$(44,1)="Y" THEN ITEM_CLASS$=_CUR.ITEM_CLASS$
16460 IF _CHG_VAR$(45,1)="Y" THEN WHSE_CODE_PKLIST$=_CUR.WHSE_CODE_PKLIST$
16470 IF _CHG_VAR$(46,1)="Y" THEN PO_LINE_RCV_COMP$=_CUR.PO_LINE_RCV_COMP$
16480 IF _CHG_VAR$(47,1)="Y" THEN CTN_LBL_CODE_2ND$=_CUR.CTN_LBL_CODE_2ND$
16490 IF _CHG_VAR$(48,1)="Y" THEN QUOTE$=_CUR.QUOTE$
16500 IF _CHG_VAR$(49,1)="Y" THEN OPEN_QTY=_CUR.OPEN_QTY
16510 IF _CHG_VAR$(50,1)="Y" THEN UNIT_COST=_CUR.UNIT_COST
16520 IF _CHG_VAR$(51,1)="Y" THEN COST_QTY_PER=_CUR.COST_QTY_PER
16530 IF _CHG_VAR$(52,1)="Y" THEN COST_EXT=_CUR.COST_EXT
16540 IF _CHG_VAR$(53,1)="Y" THEN UNIT_SELL_PRICE=_CUR.UNIT_SELL_PRICE
16550 IF _CHG_VAR$(54,1)="Y" THEN QTY_IN_SELL_UM=_CUR.QTY_IN_SELL_UM
16560 IF _CHG_VAR$(55,1)="Y" THEN SELL_PRICE_EXT=_CUR.SELL_PRICE_EXT
16570 IF _CHG_VAR$(56,1)="Y" THEN QTY_UNBILLED_SHIP=_CUR.QTY_UNBILLED_SHIP
16580 IF _CHG_VAR$(57,1)="Y" THEN QTY_BO_RCV_FS3=_CUR.QTY_BO_RCV_FS3
16590 IF _CHG_VAR$(58,1)="Y" THEN NUM_OF_CTN_LBL_PRNT=_CUR.NUM_OF_CTN_LBL_PRNT
16600 IF _CHG_VAR$(59,1)="Y" THEN ORIG_QTY_ORDERED=_CUR.ORIG_QTY_ORDERED
16610 IF _CHG_VAR$(60,1)="Y" THEN FIND_FEE_PRCNT=_CUR.FIND_FEE_PRCNT
16620 IF _CHG_VAR$(61,1)="Y" THEN CTN_PACK=_CUR.CTN_PACK
16630 IF _CHG_VAR$(62,1)="Y" THEN COMBO_QTY=_CUR.COMBO_QTY
16640 IF _CHG_VAR$(63,1)="Y" THEN QTY_INV_TO_DATE=_CUR.QTY_INV_TO_DATE
16650 IF _CHG_VAR$(64,1)="Y" THEN UNBILL_SHIP_UNIT_CST=_CUR.UNBILL_SHIP_UNIT_CST
16660 IF _CHG_VAR$(65,1)="Y" THEN INVD_TO_DATE_QTY=_CUR.INVD_TO_DATE_QTY
16670 IF _CHG_VAR$(66,1)="Y" THEN FRT_RETURNS_FROM_LOT=_CUR.FRT_RETURNS_FROM_LOT
16680 IF _CHG_VAR$(67,1)="Y" THEN REV_UNIT_SELL_PRICE=_CUR.REV_UNIT_SELL_PRICE
16690 IF _CHG_VAR$(68,1)="Y" THEN UNBILLED_SHIP_EXT=_CUR.UNBILLED_SHIP_EXT
16700 IF _CHG_VAR$(69,1)="Y" THEN INVD_TO_DATE_EXTCST=_CUR.INVD_TO_DATE_EXTCST
16710 IF _CHG_VAR$(70,1)="Y" THEN INVD_TO_DATE_EXT=_CUR.INVD_TO_DATE_EXT
16720 IF _CHG_VAR$(71,1)="Y" THEN UNIT_LIST_PRICE=_CUR.UNIT_LIST_PRICE
16730 IF _CHG_VAR$(72,1)="Y" THEN LINE_ITEM_DISC_PRCNT=_CUR.LINE_ITEM_DISC_PRCNT
16740 IF _CHG_VAR$(73,1)="Y" THEN NUM_OF_CART_LBLS_2=_CUR.NUM_OF_CART_LBLS_2
16750 IF _CHG_VAR$(74,1)="Y" THEN FS2_UNUSED_1=_CUR.FS2_UNUSED_1
16760 IF _CHG_VAR$(75,1)="Y" THEN FS2_UNUSED_2=_CUR.FS2_UNUSED_2
16770 IF _CHG_VAR$(76,1)="Y" THEN FMS_PRICE=_CUR.FMS_PRICE
16780 IF _CHG_VAR$(77,1)="Y" THEN FS2_UNUSED_4=_CUR.FS2_UNUSED_4
16790 IF _CHG_VAR$(78,1)="Y" THEN FS2_UNUSED_5=_CUR.FS2_UNUSED_5
16990 RETURN 
17000 ALT_KEY_CHECK:! Checks for Vendor and Product code when using ALT key !SSP218659 jdf
17010 IF NOT(NUL(PO_CODE$)) AND NUL(VENDOR$) THEN MSGBOX MSG("FMGODB_89"),MSG("MB_ATTN"),"!"; NEXT_ID=VENDOR.CTL; EXIT ! SSP218659 jdf
17020 IF STP(PROD_CODE$)="" THEN PROD_CODE$=IC0.PROD_CODE$; IF STP(PROD_CODE$)="" THEN PROD_CODE$=FM1.PROD_CODE$; END_IF ; IF LINE_TYPE$="S" AND STP(MID(FMP$,52,3))<>"" THEN PROD_CODE$=FMP$(52,3); END_IF ; IF STP(ORDER_LINE_NUM$)<>"" THEN GOSUB CHECK_PROD_CODE ! SSP213686 jdf   ! SSP218659 jdf SSP 234835 ! SSP246315 jdf  
17030 RETURN ! SSP218659 jdf
20400 WIZARD_BACK:! They hit the back button in wizard mode
20450 SWITCH FOLDER_ID$
20455 CASE "FMGODB.1"; CMD_STR$="E",ARG_3$="DELETE"; BREAK
20460 CASE "FMGODB.2"; NEXT_FOLDER=FLDR.FMGODB.1.CTL; BREAK
20465 CASE "FMGODB.3"; NEXT_FOLDER=FLDR.FMGODB.2.CTL ! SSP 199731
20467 FIND (Z[9],KEY="D"+FS1_CUSTOMER$,DOM=*NEXT)O2$; IF MID(O2$,62,1)="Y" AND STP(RC_NUMBER$)="" AND %OP_PARM$(310,1)="Y" THEN MSGBOX MSG("RC_NUM_REQ"),MSG("WARNING"),"STOP,TIM=1"; NEXT_ID=RC_NUMBER.CTL,NEXT_FOLDER=FLDR.FMGODB.3.CTL,IGNORE_EXIT=1 ! ssp 184532 SSP 199731, SSP 203629
20469 BREAK ! SSP 199731
20470 CASE "FMGODB.4"; NEXT_FOLDER=FLDR.FMGODB.3.CTL; BREAK
20480 END SWITCH 
20490 RETURN 
20500 WIZARD_NEXT:! They hit the next button in wizard mode
20510 SWITCH FOLDER_ID$
20515 CASE "FMGODB.1"
20520 GOSUB CHECK_CSTM_ITEM_LINE_TYPE
20522 GOSUB PRINT_FLAGS_OUT ! make sure print_flags gets set
20525 NEXT_FOLDER=FLDR.FMGODB.2.CTL,REFRESH_FLG=1; BREAK
20530 BREAK
20535 CASE "FMGODB.2"
20537 GOSUB CHECK_REORDER_DATE
20539 IF LINE_TYPE$="M" THEN {
20541 NORMAL_EXIT=1; GOSUB CHECK_CHANGES
20542  } ELSE {! SSP#276949
20543 IF NOT(NUL(VENDOR$)) THEN FIND (Z[22],KEY=VENDOR$,DOM=*NEXT)VENDCK$; GOTO 20545 ELSE GOTO 20545 ! SSP#276949!SSP#283414
20544 MSGBOX MSG("CD3ERR_04"),MSG("MB_ATTN"),"!"; NEXT_ID=VENDOR.CTL; EXIT ! SSP#276949
20545 NEXT_ID=_FIRST_FIELD ! IF NUL(ITEM_CODE$) THEN NEXT_ID=ITEM_CODE.CTL; EXIT ! Must have an item code!SSP#276949
20546 IF NOT(NUL(PO_CODE$)) AND NUL(VENDOR$) THEN MSGBOX MSG("FMGODB_89"),MSG("MB_ATTN"),"!"; NEXT_ID=VENDOR.CTL; EXIT 
20547 GOSUB CHECK_PROD_CODE; IF NO_PROD_CODE THEN NO_PROD_CODE=0,NEXT_ID=PROD_CODE.CTL; EXIT ! SSP 230251
20548 NEXT_FOLDER=FLDR.FMGODB.3.CTL; REFRESH_FLG=1 ! Goto next folder
20549  }
20550 BREAK ! FMGODB.2
20555 CASE "FMGODB.4","FMGODB.5" ! SSP 217092 - Added case FMGODB.5 
20558 IF %OP_PARM$(151,1)="Y" THEN IF LINE_TYPE$=" " THEN GOSUB MODIFY_REV_DATE ! SSP#200645                   
20560 GOSUB FINISH_A_LINE
20569 BREAK
20570 CASE "FMGODB.3"
20571 NEXT_FOLDER=FLDR.FMGODB.4.CTL,REFRESH_FLG=1
20572 FIND (Z[9],KEY="D"+FS1_CUSTOMER$,DOM=*NEXT)O2$; IF MID(O2$,62,1)="Y" AND STP(RC_NUMBER$)="" AND %OP_PARM$(310,1)="Y" THEN MSGBOX MSG("RC_NUM_REQ"),MSG("WARNING"),"STOP,TIM=1"; NEXT_ID=RC_NUMBER.CTL,NEXT_FOLDER=FLDR.FMGODB.3.CTL,IGNORE_EXIT=1 ! ssp 184532 SSP 199731, SSP 203629
20574 BREAK
20575 END SWITCH 
20590 RETURN 
21000 ! 21000 - Get Order Header (FS1) info
21005 GET_FS1_INFO:
21006 IF %AR_DIV_LEN=0 THEN ORDER$=ORDER_NUM$ ELSE ORDER$=ORDER_DIV$+ORDER_NUM$
21009 DIM FS1$:IOL(Z[2]); %WHSE_QRY_TYPE$=""; DIM SP_AR1$(600) ! SSP 228057
21010 EXTRACT (Z[2],KEY=ORDER_DIV$+ORDER_NUM$,ERR=*NEXT,DOM=*NEXT,REC=FS1$) ! SSP248358 jdf
21012 FS1_CUSTOMER$=FS1.CUST_DIV$+FS1.CUST_CODE$ ! SSP 228057
21013 %QRY_ORDER$=ORDER_DIV$+ORDER_NUM$; %CUSTOMER$=CUSTOMER$
21015 CALL "ZZWLKU;AR_CUST_VAL",FS1.CUST_DIV$+FS1.CUST_CODE$,"","_FS1"
21020 IF FS1.ORDER_TYPE_1$="R" THEN %WHSE_QRY_TYPE$="9"
21025 IF FS1.JOB_COSTING$="Y" THEN %OP_PARM$(280,1)="N" ! SSP 239965
21030 FIND (Z[32],KEY=FS1_CUSTOMER$,DOM=*NEXT)SP_AR1$ ! SSP 228057
21035 AR1.CUST_PRICE_CATEGORY$=SP_AR1$(398,3),AR1.TAX_EXEMPT$=SP_AR1$(245,1) ! SSP 228057
21095 RETURN 
21700 GET_PARMS:! get parameters 
21725 %OP_PARM$=""; FIND (Z[13],KEY=%X3_COMP$+"F/M",DOM=*PROCEED)%OP_PARM$; IF NUL(%OP_PARM$) THEN MSGBOX MSG("FMGODA_2"),MSG(ERR),"!"; CMD_STR$="END",ARG_3$="CANCEL"; RETURN 
21726 MFF_PARM=0; IF MID(%OP_PARM$,337,1)="Y" THEN MFF_PARM=1 ! SSP 276772
21728 DIM %IC_PARM$(200); FIND (Z[13],KEY=%X3_COMP$+"I/C",DOM=*NEXT)%IC_PARM$
21730 %AR1_PARM$=""; FIND (Z[13],KEY=%X3_COMP$+"AR1",DOM=*PROCEED)%AR1_PARM$; IF NUL(%AR1_PARM$) THEN MSGBOX MSG("FMGODA_19"),MSG(ERR),"!"; CMD_STR$="END",ARG_3$="CANCEL"; RETURN 
21735 %AR_PARM$=""; FIND (Z[13],KEY=%X3_COMP$+"A/R",DOM=*PROCEED)%AR_PARM$; IF NUL(%AR_PARM$) THEN MSGBOX MSG("FMGODA_28"),MSG(ERR),"!"; CMD_STR$="END",ARG_3$="CANCEL"; RETURN 
21740 DIM SMP_PARM$(50); CALL "ZZ2PRP","SP",RESULT$,TF_DATE$; IF RESULT$="Y" THEN CIG_PLUS$="Y"; READ (Z[13],KEY=X3$(9,3)+"SMP",DOM=*NEXT)SMP_PARM$ ELSE CIG_PLUS$="N"; REM "SSP144414
21745 DIM %OP_SECURITY$(255); READ (Z[13],KEY="osec"+%X3_OP_ID$,DOM=*NEXT)%OP_SECURITY$
21750 CALL "ZZ2PRP","OS",RESULT$,TF_DATE$; IF RESULT$="Y" THEN USING_TOPS=1 ELSE USING_TOPS=0 ! SSP 307461
21752 DIM OSP_PARMS$(512); IF USING_TOPS THEN FIND (Z[13],KEY=%X3$(9,3)+"OSP",DOM=*NEXT)OSP_PARMS$ ! SSP 307461
21795 RETURN 
21799 ! 
22000 ! 22000 - Print flag field in and out of display fields
22005 PRINT_FLAGS_IN:
22010 IF POS("S"=PRINT_FLAGS$)<>0 THEN PRINT_FLAG_S$="Y" ELSE PRINT_FLAG_S$="N"
22015 IF POS("I"=PRINT_FLAGS$)<>0 THEN PRINT_FLAG_I$="Y" ELSE PRINT_FLAG_I$="N"
22020 IF POS("P"=PRINT_FLAGS$)<>0 THEN PRINT_FLAG_P$="Y" ELSE PRINT_FLAG_P$="N"
22030 REFRESH_FLG=1 ! SSP 283343
22045 RETURN 
22050 PRINT_FLAGS_OUT:
22055 PRINT_FLAGS$=""
22060 IF PRINT_FLAG_S$="Y" THEN PRINT_FLAGS$+="S"
22065 IF PRINT_FLAG_I$="Y" THEN PRINT_FLAGS$+="I"
22070 IF PRINT_FLAG_P$="Y" THEN PRINT_FLAGS$+="P"
22090 PRINT_FLAGS$=PAD(PRINT_FLAGS$,5,1)
22095 RETURN 
22100 ANALYZE_PO_CODE:! check if po already exists for this po_code and if it is ok to use it, and whether or not THIS line can be a custom line or not. Rule  is lowest line number ("first" line) on the p/o is the only one that can be the custom line
22104 IF %OP_PARM$(280,1)="Y" AND FS1.ORDER_TYPE_3$="B" AND ORDER_LINE_NUM$<>"001" THEN DISABLE_CUSTOM=1 ELSE DISABLE_CUSTOM=0
22105 PO_EXISTS=0,PO_FLAG$=" "; FIND (Z[10],KEY=ORDER_DIV$+ORDER_NUM$+PO_CODE$,DOM=ANALYZE_DONE,REC=PO1$) ! If no existing PO for this po_code then no worries
22110 FIRST_LINE=999,CUSTOM_FOUND=0
22115 ! Find the lowsest numbered line on this order with the same po_code
22120 SELECT FS2$ FROM FIN(Z[1],"FILENAME") BEGIN ORDER_DIV$+ORDER_NUM$+"000" END ORDER_DIV$+ORDER_NUM$+"999" WHERE FS2$(9,1)=PO_CODE$ AND FS2$(6,3)<>ORDER_LINE_NUM$
22125 IF FIRST_LINE=999 THEN FIRST_LINE=NUM(FS2$(6,3),ERR=*NEXT)
22130 IF FS2$(155,1)=" " THEN CUSTOM_FOUND=NUM(FS2$(6,3),ERR=*BREAK); BREAK ! If custom line found, then break, we don't need to know about the other lines
22135 NEXT RECORD 
22140 ! analyze results
22145 IF CUSTOM_FOUND THEN DISABLE_CUSTOM=1; IF NUM(ORDER_LINE_NUM$)<CUSTOM_FOUND THEN MSGBOX MSG("FMGODB_35",STR(FIRST_LINE)),MSG("MB_ATTN"),"!"; PO_FLAG$="N"; NEXT_ID=PO_CODE.CTL; GOTO ANALYZE_DONE ! If lower # than custom line on p/o , they must pick another p/o code
22150 IF CUSTOM_FOUND AND NUM(ORDER_LINE_NUM$,ERR=*NEXT)>FIRST_LINE THEN PO_FLAG$="C"; SPECS_REQ$="N",DISABLE_CUSTOM=0,REFRESH_FLG=1; GOTO FINISH_ANALYSIS ! old way -> MSGBOX MSG("FMGODB_36",STR(FIRST_LINE)),MSG("MB_ATTN"),"!"; PO_FLAG$="C"; GOTO FINISH_ANALYSIS
22155 IF NUM(ORDER_LINE_NUMBER$)>FIRST_LINE THEN PO_FLAG$="I" ELSE PO_FLAG$="Y"
22175 FINISH_ANALYSIS:
22180 PO_EXISTS=1,CUSTOM$=" ",SPECS_REQ$="N"
22185 VEND_DIV$=PO1.VEND_DIV$,VEND_CODE$=PO1.VEND_CODE$,PLANT_CODE$=PO1.PLANT_CODE$
22190 ANALYZE_DONE:
22195 RETURN 
22199 ! 
23000 ! 23000 - Get Customer name
23005 GET_CUST_NAME:
23007 IF %LINE_TYPE$="C" OR %LINE_TYPE$=" " THEN %QRY_CUSTOMER$=CUST_DIV$+CUST_CODE$ ELSE %QRY_CUSTOMER$=DIM(10)
23015 IF STP(CUSTOMER$,3)="" THEN %CUST_NAME_FS2$="" ELSE CALL "ZZWLKU;AR_CUST_VAL",CUSTOMER$,"","_FS2"
23020 IF STP(CUSTOMER$,3)<>"" THEN CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$
23022 GOSUB GLOBAL_VARS
23025 RETURN 
23050 REJECT_VENDOR:! Vendor has failed our additional checks
23055 IF _CUR_ID=VENDOR.CTL OR _CUR_ID=FIND_FEE_VENDOR.CTL THEN NEXT_ID=_CUR_ID ! if inputting Vendor then stay there, else we are just giving a message
23070 MSGBOX REJECT_MSG$,MSG("MB_ATTN"),"!"
23095 RETURN 
23099 ! 
23100 ! ^100 - Get Vendor name
23105 GET_VEND_NAME:
23110 CALL "ZZWLKU;VEND_CODE_VAL",VENDOR$,"",""
23115 CALL "ZZWLKU;PARSE_VEND",VENDOR$,VEND_DIV$,VEND_CODE$
23120 DIM AP4$:IOL(Z[22]); FIND (Z[22],KEY=VEND_DIV$+VEND_CODE$,REC=AP4$,DOM=*NEXT)
23125 IF %X3_330_1$="1" THEN IF POS(VEND_DIV$="0001",2)=0 THEN REJECT_MSG$=MSG("FMGODB_43"); GOTO REJECT_VENDOR
23130 IF AP4.VEND_STAT$="I" AND REJECT_VEND=0 THEN REJECT_MSG$=MSG("FMGODB_44"); REJECT_VEND=1; GOTO REJECT_VENDOR ! SSP231951 jdf
23135 IF NOT(VENDOR_CHG_FLAG) THEN IF PREV_VEND$<>VEND_DIV$+VEND_CODE$ AND NOT(NUL(PO_CODE$)) AND POS(LINE_TYPE$="IC")<>0 AND ORIG_QTY_ORDERED<>0 THEN MSGBOX MSG("FMGODB_45"),MSG("MB_ATTN"),"!"; VENDOR_CHG_FLAG=1 ! SSP208671, SSP 224709 - msgbox annoying, needs to be user friendly
23140 %PLANT_VEND$=VEND_DIV$+VEND_CODE$ ! %PLANT_VEND_NAME$=%VEND_NAME$ <<< REMOVED BY DFF BECAUSE %VEND_NAME WAS ADDED...
23145 IF STP(PLANT_CODE$,3)<>"" THEN CALL "ZZWLKU;PLANT_FMT",PLANT_CODE$,"" ! %VEND_NAME$=%PLANT_NAME$ ELSE %PLANT_NAME$=%VEND_NAME$ <<< REMOVED BY DFF
23150 GOSUB CHECK_AP_MESSAGE
23154 GET_PLANT_NAME:
23160 READ (Z[25],KEY="P"+VEND_DIV$+VEND_CODE$,DOM=*NEXT)
23165 FM0_KEY$=KEY(Z[25],END=DISABLE_PLANT); IF MID(FM0_KEY$,1,1)<>"P" OR MID(FM0_KEY$,2,10)<>VEND_DIV$+VEND_CODE$ OR STP(VENDOR$)="" THEN GOTO DISABLE_PLANT ELSE GOTO ENABLE_PLANT ! SSP246186 jdf
23170 DISABLE_PLANT:CALL "*wingrp;Disable",PLANT.GRP$; GOTO END_OF_TEST
23175 ENABLE_PLANT:CALL "*wingrp;Enable",PLANT.GRP$; GOTO END_OF_TEST
23180 END_OF_TEST:
23195 RETURN 
23200 ! ^100,5 Get & set item information
23205 ITEM_CODE_VAL:ENTER FIELD$,ERR_MSG$,VAR_TAG$,ERR=ITEM_CODE; GOTO ITEM_CODE
23206 ITEM_CODE_FMT:ENTER FIELD$,VAR_TAG$,ERR=ITEM_CODE; GOTO ITEM_CODE
23210 ITEM_CODE:
23212 IF STP(FIELD$,3)="" THEN GOTO ITEM_CODE_DONE ELSE FIELD$=PAD(FIELD$,10)
23215 XX=0
23216 INV_ITEM=0 ! SSP 242299
23230 SWITCH %LINE_TYPE$
23235 CASE "I"
23236 IC0_PROCESSING:IF %ITEM_CODE_LEN<10 THEN FIELD$=PAD(STR(NUM(FIELD$,ERR=*NEXT):DIM(%ITEM_CODE_LEN,"0")),10)
23240 XX=HFN; OPEN (XX,IOL=*)"IC0"+%C$
23242 %CUST_KEY$=PAD(%CUST_KEY$,10),%SP_CUST$=%CUST_KEY$ ! SSP 201990
23244 MISSING_MSG$=MSG("ITEM_CODE")+" "+MSG("NOT_FOUND")+".",BUSY_MSG$=MSG("ITEM_CODE")+" "+MSG("BUSY")+"."
23245 FIND (XX,KEY=%CUST_KEY$+FIELD$,ERR=ITEM_CODE_ERR,DOM=ITEM_CODE_MISSING)
23255 BREAK
23260 CASE "C"," "
23264 IF %ITEM_CODE_LEN<10 THEN FIELD$=PAD(STR(NUM(FIELD$,ERR=*NEXT):DIM(%ITEM_CODE_LEN,"0")),10)
23265 XX=HFN; OPEN (XX,IOL=*)"FM1"+%C$
23268 MISSING_MSG$=MSG("ITEM_CODE")+" "+MSG("NOT_FOUND")+".",BUSY_MSG$=MSG("ITEM_CODE")+" "+MSG("BUSY")+"."
23269 IF %LINE_TYPE$="C" THEN FIND (XX,KEY=%CUST_KEY$+FIELD$,ERR=ITEM_CODE_ERR,DOM=IC0_PROCESSING)FM1_REC$ ELSE FIND (XX,KEY=%CUST_KEY$+FIELD$,ERR=ITEM_CODE_ERR,DOM=MISSING_FM1_ITEM)FM1_REC$ ! SSP 195084
23270 IF STP(MID(FM1_REC$,185,10))<>"" THEN FIND (XX,KEY=FM1_REC$(185,10)+FIELD$,ERR=ITEM_CODE_ERR,DOM=MISSING_FM1_ITEM); %CUST_KEY$=FM1_REC$(185,10); %FROM_SRC=1,%SP_CUST$=%CUST_KEY$ ! SSP 195084 SSP 201990
23274 BREAK ! CASE "C" !SSP 195084
23275 CASE "S"
23277 XX=HFN; OPEN (XX)"FMP"+%C$
23279 MISSING_MSG$=MSG("SPEC_CHRG")+" "+MSG("NOT_FOUND")+".",BUSY_MSG$=MSG("SPEC_CHRG")+" "+MSG("BUSY")+"."
23281 FIND (XX,KEY="X"+FIELD$,ERR=ITEM_CODE_ERR,DOM=ITEM_CODE_MISSING)
23283 BREAK ! CASE "S"
23295 END SWITCH 
23300 ! Done now
23305 ITEM_CODE_DONE:
23315 IF XX THEN CLOSE (XX)
23330 EXIT 
23350 ITEM_CODE_MISSING: INV_ITEM=1; IF %OE_GRID THEN ERR_MSG$=MISSING_MSG$; END_IF ; IF %CUSTOM$="Y" OR %LINE_TYPE$=" " THEN GOTO ITEM_CODE_DONE ELSE ERR_MSG$=MISSING_MSG$; GOTO ITEM_CODE_DONE ! SSP 242299
23360 ITEM_CODE_ERR: INV_ITEM=1; ERR_MSG$=BUSY_MSG$; GOTO ITEM_CODE_DONE ! SSP 242299
23400 ! Missing Item Code in FM1 Record.
23410 MISSING_FM1_ITEM:
23415 %ITEM_CODE_ANS$="" ! SSP219136 jdf
23420 MSGBOX MSG("ITEM_N_F")+SEP+MSG("WOULD_ADD"),MSG("FYI"),"!,YesNo",ANS$
23430 IF ANS$="NO" THEN ITEM_CODE$=""; %ITEM_CODE_ANS$=ANS$; %NO_ITEM=1; NEXT_ID=ITEM_CODE.CTL; IF %OE_GRID THEN ERR_MSG$=MISSING_MSG$ END_IF ; GOTO ITEM_CODE_DONE ! SSP219136 jdf
23440 %ITEM_CODE$=FIELD$
23450 CALL "FMGIAZ"
23470 GOTO ITEM_CODE_VAL
23480 RETURN 
23500 ! ^100 Set values (possibly new) for the global vars we are keeping around
23505 GLOBAL_VARS:
23510 %LINE_TYPE$=LINE_TYPE$
23514 IF LINE_TYPE$="C" OR LINE_TYPE$=" " THEN IF NUL(CUSTOMER$) THEN CUST_DIV$=FS1.CUST_DIV$,CUST_CODE$=FS1.CUST_CODE$,CUSTOMER$=CUST_DIV$+CUST_CODE$ ELSE CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$ ! SSP 227773
23515 IF LINE_TYPE$="I" THEN CUST_DIV$=DIM(2),CUST_CODE$=DIM(8) END_IF ; %CUST_KEY$=CUST_DIV$+CUST_CODE$,%CUSTOMER$=%CUST_KEY$,%CUST_DIV$=CUST_DIV$,%CUST_CODE$=CUST_CODE$
23516 %QRY_CUSTOMER$=""
23520 IF %AR_DIV_LEN=0 THEN ORDER$=ORDER_NUM$ ELSE ORDER$=ORDER_DIV$+ORDER_NUM$
23525 IF NUL(CUSTOMER$) AND %AR_DIV_LEN=0 THEN CUSTOMER$=CUST_CODE$ ELSE IF NUL(CUSTOMER$) THEN CUSTOMER$=CUST_DIV$+MID(CUST_CODE$,1,%CUST_LEN)
23526 IF STP(CUSTOMER$,3)="" THEN %CUST_NAME_FS2$="" ELSE CALL "ZZWLKU;AR_CUST_VAL",CUSTOMER$,"","_FS2"
23530 IF %AP_DIV_LEN=0 THEN VENDOR$=VEND_CODE$ ELSE VENDOR$=VEND_DIV$+MID(VEND_CODE$,1,%VEND_LEN)
23550 %ITEM_CODE_TAG$=MSG("LIN_TYP_"+STP(%LINE_TYPE$))
23580 SWITCH LINE_TYPE$
23581 CASE "I"; %ITEM_QRY$="QRY_IC0",%QRY_CUSTOMER$=DIM(10); BREAK
23582 CASE " "; %ITEM_QRY$="QRY_FM1",%QRY_CUSTOMER$=CUST_DIV$+CUST_CODE$; BREAK
23583 CASE "C"; %ITEM_QRY$="QRY_IC0",%QRY_CUSTOMER$=CUST_DIV$+CUST_CODE$; BREAK
23584 CASE "S"; %ITEM_QRY$="QRY_FMPX"; BREAK
23588 DEFAULT ; %ITEM_QRY$=""
23589 END SWITCH 
23595 RETURN 
23600 ! ^100 perform entry point
23605 SET_GLOBAL_VARS:
23610 GOSUB GLOBAL_VARS
23620 RETURN 
23800 ! ^100,5 Format order line number
23805 ORDER_LINE_VAL:ENTER FIELD$,ERR_MSG$,VAR_TAG$,ERR=ORDER_LINE; GOTO ORDER_LINE
23806 ORDER_LINE_FMT:ENTER FIELD$,VAR_TAG$,ERR=ORDER_LINE; GOTO ORDER_LINE
23809 ORDER_LINE:
23810 IF STP(FIELD$,3)="" THEN GOTO ORDER_LINE_DONE
23812 IF FIELD$="0" OR FIELD$="00" OR FIELD$="000" THEN FIELD$="001"; GOTO ORDER_LINE_DONE ! SSP#255251 !Moved as root 6/21/2012 256088!SSP#266008 moved line
23820 OL=NUM(FIELD$,ERR=OL_NOT_NUMBER); GOTO OL_CHECK_MAX
23825 OL_NOT_NUMBER: ERR_MSG$=MSG("ORDER_LINE")+" "+MSG("MUST_BE_#")+"."; GOTO ORDER_LINE_DONE
23830 OL_CHECK_MAX:IF OL>206 THEN ERR_MSG$=MSG("ORDER_LINE")+" "+MSG("LESS_THAN")+"."; GOTO ORDER_LINE_DONE
23835 FIELD$=STR(OL:"000")
23895 ORDER_LINE_DONE:EXIT 
24000 ! ^1000,5 Default when item_code changes
24005 ITEM_CODE_DEFAULTS:
24010 SWITCH LINE_TYPE$
24015 CASE "I"
24016 DIM %CUST_KEY$(10); %SP_CUST$=%CUST_KEY$ ! SSP 201990
24020 FIND (Z[4],KEY=%CUST_KEY$+ITEM_CODE$,DOM=ITEM_CODE_DEFAULT_END,REC=IC0$)
24022 NEW_COST=0,NEW_PRICE=0; IF POS(IC0.TOPS_ITEM$="USC")<>0 THEN DIM I[40]; CALL "OS2OBC",%X3$,%X4$,ITEM_CODE$,I{ALL},FS1.CUST_DIV$+FS1.CUST_CODE$+DIM(5)+FS1.ORDER_DATE$,"FMGODB",NEW_PRICE,"",NEW_COST,0; IC0.BASE_PRICE=NEW_PRICE,IC0.LAST_PURCH_COST=NEW_COST; REM SSP 203458. SSP214095
24023 IF POS(IC0.TOPS_ITEM$="USC")<>0 THEN READ (Z[30],KEY=IC0.ITEM_CODE$,DOM=*NEXT)OS2$; IF NOT(%OE_GRID) OR SCRN_ID$="FMGODB.V7" THEN SHOW CONTROL TOPS_ITEM_CODE.CTL; TOPS_ITEM_CODE$=MID(OS2$,11,15); OS2$="",REFRESH_FLG=1; CALL "*wingrp;disable",YES_TOPS.GRP$; CALL "*wingrp;disable",TOPS_BUTTON.GRP$; REM SSP 307461
24024 REM TAX_TYPE$=IC0.TAX_TYPE$; REM SSP 201823
24025 PROD_CODE$=IC0.PROD_CODE$,LEFT_RIGHT$=IC0.LEFT_RIGHT$,TOP_BOTTOM$=IC0.TOP_BOTTOM$,PLYS$=IC0.PLYS$,TF_DESC$=IC0.ITEM_DESC$,PLANT_CODE$=IC0.PLANT_CODE$,VEND_DIV$=IC0.VEND_DIV$,VEND_CODE$=IC0.VEND_CODE$,COST_UM$=IC0.INVENTORY_UM$,SELL_UM$=IC0.SELL_UM$,PREV_VEND$=VEND_DIV$+VEND_CODE$; IF NUL(PO_CODE$) THEN LOT_INV_ORDER_LINE$=IC0.LOT_INV_FOR_THIS_ITM$ ! Removed by DFF 03/03/05 !SSP#250189!SSP#265275
24030 UNIT_COST=IC0.AVG_COST,COST_QTY_PER=IC0.INVENTORY_QTY_PER,UNIT_SELL_PRICE=IC0.BASE_PRICE,QTY_IN_SELL_UM=IC0.SELL_QTY_PER,CTN_PACK=IC0.CTN_PACK,UNIT_LIST_PRICE=IC0.BASE_PRICE,LINE_ITEM_DISC_PRCNT=FS1.LINE_ITEM_DISC_PRCNT
24035 UNIT_SELL_PRICE=UNIT_LIST_PRICE-(UNIT_LIST_PRICE*LINE_ITEM_DISC_PRCNT*.01) ! Calculate list item disc
24040 IF FS1.WORK_ORDER$="Y" THEN IF UNIT_COST<>0 THEN UNBILL_SHIP_UNIT_CST=UNIT_COST*1000/COST_QTY_PER ! Work order ->addtl needed see FM2OB5@5415
24045 IF NEW_COST<>0 THEN UNIT_COST=NEW_COST
24050 IF FS1.ORDER_TYPE_3$="B" THEN SPECIAL_SHIPPING$="Y" ! 172972
24090 IF NOT(%OE_GRID) THEN PRINT 'CI'; NEXT_ID=WZ_NEXT.CTL ! SSP208671
24094 GOSUB READ_IC2 ! SSP 196080
24095 BREAK ! CASE "I"
24099 ! 
24100 CASE " "
24104 IF NOT(NUL(QUOTE_LINE_NUM$)) AND FS1.RFQ_TYPE_QUOTATION$<>"Y" THEN GOSUB SETUP_FORM_FROM_EQ
24105 FIND (Z[3],KEY=%CUST_KEY$+ITEM_CODE$,DOM=ITEM_CODE_DEFAULT_END,REC=FM1$); FIND (Z[3],KEY=%CUST_KEY$+ITEM_CODE$)FM1_2$
24107 IF FLAG_CHK THEN VENDOR$=FM1.VEND_DIV$+FM1.VEND_CODE$,REFRESH_FLG=1,FLAG_CHK=0; CALL "ZZWLKU;VEND_CODE_VAL",ERR=*NEXT,VENDOR$,MM$,MM1$
24108 IF NOT(NUL(PO_CODE$)) THEN IF POS(FM1.ITEM_STAT_CODE$="03467")>0 THEN DIM FS2_2$(155); FS2_2$(147,8)=ORDER$; CALL "FM2OBZ",X3$,FS2_2$,FM1_2$,Z[3],Z[9],"","",Z9 ! IF FM1.NUMBERING$="Y" THEN ENABLE CONTROL STARTING_NUM.CTL ELSE DISABLE CONTROL STARTING_NUM.CTL
24110 PROD_CODE$=FM1.PROD_CODE$,LEFT_RIGHT$=FM1.LEFT_RIGHT$,TOP_BOTTOM$=FM1.TOP_BOTTOM$,PLYS$=FM1.PLYS$,TF_DESC$=FM1.ITEM_DESC$,PLANT_CODE$=FM1.PLANT_CODE$,VEND_DIV$=FM1.VEND_DIV$,VEND_CODE$=FM1.VEND_CODE$,COST_UM$=FM1.COST_UM$,SELL_UM$=FM1.SELL_UM$
24112 IF STP(FM1.FIND_FEE$,3)<>"" THEN FIND_FEE$=FM1.FIND_FEE$,FIND_FEE_VEND_DIV$=FM1.FIND_FEE_VEND_DIV$,FIND_FEE_VEND_CODE$=FM1.FIND_FEE_VEND_CODE$,FIND_FEE_VENDOR$=FIND_FEE_VEND_DIV$+FIND_FEE_VEND_CODE$,FIND_FEE_PRCNT=FM1.FIND_FEE_PRCNT
24115 UNIT_COST=IC0.TF_COST,COST_QTY_PER=IC0.COST_QTY_PER,UNIT_SELL_PRICE=IC0.PRICE,QTY_IN_SELL_UM=IC0.SELL_QTY_PER,CTN_PACK=IC0.CTN_PACK,UNIT_LIST_PRICE=IC0.PRICE,LINE_ITEM_DISC_PRCNT=FS1.LINE_ITEM_DISC_PRCNT
24116 IF FM1.COST_QTY_PER<>0 THEN COST_QTY_PER=FM1.COST_QTY_PER
24117 IF FM1.PRICE<>0 THEN UNIT_SELL_PRICE=FM1.PRICE; REM SSP180847
24118 IF FM1.SELL_QTY_PER<>0 THEN QTY_IN_SELL_UM=FM1.SELL_QTY_PER; REM SSP180847
24119 IF FM1.TF_COST<>0 THEN UNIT_COST=FM1.TF_COST; REM SSP180847
24120 IF FS1.WORK_ORDER$="Y" THEN IF UNIT_COST<>0 THEN UNBILL_SHIP_UNIT_CST=UNIT_COST*1000/COST_QTY_PER ! Work order ->addtl needed see FM2OB5@5415
24121 IF NOT(NUL(FM1.SRC_CUST_CODE$)) AND STP(PO_CODE$)="" THEN CUSTOMER$=FM1.SRC_CUST_DIV$+FM1.SRC_CUST_CODE$ ! SSP204068 jdf
24123 IF FM1.CTN_PACK<>0 THEN CTN_PACK=FM1.CTN_PACK
24124 IF NOT(NUL(PO_CODE$)) AND FM1.FMS_PRICE<>0 THEN FMS_PRICE$=STR(FM1.FMS_PRICE),FMS_PRICE=FM1.FMS_PRICE ! 307483
24125 ! Get starting number from last number, leave right justified, if err just transfer the value
24129 IF STP(FM1.ENDING_NUM$,3)="" THEN GOTO 24131
24130 IF NOT(NUL(PO_CODE$)) THEN STARTING_NUM$=FM1.ENDING_NUM$; TMP$=STP(FM1.ENDING_NUM$); STARTING_NUM$=PAD(STR(NUM(TMP$,ERR=*NEXT)+1:DIM(LEN(TMP$))),9,0) ! SSP232856 jdf
24135 IF FS1.ORDER_TYPE_3$="B" THEN SPECIAL_SHIPPING$="Y" ! 172972
24140 IF FM1.NUMBERING$="Y" THEN ENABLE CONTROL STARTING_NUM.CTL ELSE DISABLE CONTROL STARTING_NUM.CTL
24190 PRINT 'CI'; NEXT_ID=WZ_NEXT.CTL
24195 BREAK ! CASE "C"
24199 ! 
24200 CASE "S"
24205 DIM FMP$(72),FMP[2]; SPC_CHG_EXT_ONLY=0; FIND (Z[9],KEY="X"+ITEM_CODE$)FMP$,FMP[0],FMP[1],FMP[2]
24210 PROD_CODE$=FMP$(52,3),TF_DESC$=FMP$(12,40),COST_UM$=FMP$(55,4),SELL_UM$=FMP$(55,4)
24215 UNIT_COST=FMP[2],COST_QTY_PER=FMP[0],UNIT_LIST_PRICE=FMP[1],QTY_IN_SELL_UM=FMP[0],UNIT_SELL_PRICE=UNIT_LIST_PRICE-(UNIT_LIST_PRICE*LINE_ITEM_DISC_PRCNT*.01); IF MID(FMP$,61,1)="Y" THEN SPC_CHG_EXT_ONLY=1,SELL_PRICE_EXT=UNIT_SELL_PRICE,COST_EXT=UNIT_COST,UNIT_SELL_PRICE=0,UNIT_COST=0
24280 IF NOT(%OE_GRID) THEN CALL "*wingrp;Enable",LINE_TYPE_SD.GRP$; NEXT_ID=TF_DESC.CTL; REFRESH_FLG=1 ! ssp208671
24285 IF NOT(%OE_GRID) THEN NEXT_ID=TF_DESC.CTL ! ssp208671
24295 BREAK ! CASE "S"
24299 ! 
24300 CASE "N"
24310 IF NUL(COST_UM$) THEN IF FS1.WORK_ORDER$="Y" THEN COST_UM$="M",COST_QTY_PER=1000 ELSE IF %OP_PARM$(260,1)="Y" THEN COST_UM$="M",COST_QTY_PER=1000 ELSE COST_UM$="EACH",COST_QTY_PER=1
24320 IF NUL(SELL_UM$) THEN IF FS1.WORK_ORDER$="Y" THEN SELL_UM$="M",QTY_IN_SELL_UM=1000 ELSE IF %OP_PARM$(260,1)="Y" THEN SELL_UM$="M",QTY_IN_SELL_UM=1000 ELSE SELL_UM$="EACH",QTY_IN_SELL_UM=1
24325 IF FS1.ORDER_TYPE_3$="B" THEN SPECIAL_SHIPPING$="Y" ! 172972
24330 CALL "*WINGRP;ENABLE",NON_STK_2.GRP$
24335 NEXT_ID=TF_DESC.CTL
24395 BREAK ! CASE "N"
24399 ! 
24400 CASE "C"
24402 FOUND_FM1=0; FIND (Z[3],KEY=%CUST_KEY$+ITEM_CODE$,DOM=*NEXT,REC=FM1$); PROD_CODE$=FM1.PROD_CODE$,COST_UM$=FM1.COST_UM$,SELL_UM$=FM1.SELL_UM$,COST_QTY_PER=FM1.COST_QTY_PER,QTY_IN_SELL_UM=FM1.SELL_QTY_PER,UNIT_SELL_PRICE=FM1.PRICE,UNIT_COST=FM1.TF_COST,FOUND_FM1=1 ! SSP208671 - track if on fm1
24403 IF %OE_GRID THEN ITEM_DESC$=FM1.ITEM_DESC$,TF_DESC$=FM1.ITEM_DESC$ ! SSP208671
24405 FIND (Z[4],KEY=%CUST_KEY$+ITEM_CODE$,DOM=ITEM_CODE_DEFAULT_END,REC=IC0$)
24406 IF %OE_GRID THEN ITEM_DESC$=IC0.ITEM_DESC$,TF_DESC$=IC0.ITEM_DESC$ ! SSP208671
24410 NEW_COST=0,NEW_PRICE=0; IF POS(IC0.TOPS_ITEM$="USC")<>0 THEN DIM I[40]; CALL "OS2OBC",%X3$,%X4$,ITEM_CODE$,I{ALL},DIM(15)+FS1.ORDER_DATE$,"FMGODB",NEW_PRICE,"",NEW_COST,0; IC0.BASE_PRICE=NEW_PRICE,IC0.LAST_PURCH_COST=NEW_COST; REM SSP 203458
24412 IF STP(FM1.FIND_FEE$,3)<>"" THEN FIND_FEE$=FM1.FIND_FEE$,FIND_FEE_VEND_DIV$=FM1.FIND_FEE_VEND_DIV$,FIND_FEE_VEND_CODE$=FM1.FIND_FEE_VEND_CODE$,FIND_FEE_VENDOR$=FIND_FEE_VEND_DIV$+FIND_FEE_VEND_CODE$,FIND_FEE_PRCNT=FM1.FIND_FEE_PRCNT; REM SSP 199045
24415 IF POS(IC0.TOPS_ITEM$="USC")<>0 THEN READ (Z[30],KEY=IC0.ITEM_CODE$,DOM=*NEXT)OS2$; IF NOT(%OE_GRID) OR SCRN_ID$="FMGODB.V7" THEN SHOW CONTROL TOPS_ITEM_CODE.CTL; TOPS_ITEM_CODE$=MID(OS2$,11,15); OS2$="",REFRESH_FLG=1; CALL "*wingrp;disable",YES_TOPS.GRP$; CALL "*wingrp;disable",TOPS_BUTTON.GRP$; REM SSP 307461
24430 PROD_CODE$=IC0.PROD_CODE$,LEFT_RIGHT$=IC0.LEFT_RIGHT$,TOP_BOTTOM$=IC0.TOP_BOTTOM$,PLYS$=IC0.PLYS$,TF_DESC$=IC0.ITEM_DESC$,PLANT_CODE$=IC0.PLANT_CODE$,VEND_DIV$=IC0.VEND_DIV$,VEND_CODE$=IC0.VEND_CODE$,COST_UM$=IC0.INVENTORY_UM$,SELL_UM$=IC0.SELL_UM$,LOT_INV_ORDER_LINE$=IC0.LOT_INV_FOR_THIS_ITM$,PREV_VEND$=VEND_DIV$+VEND_CODE$
24435 UNIT_COST=IC0.AVG_COST,COST_QTY_PER=IC0.INVENTORY_QTY_PER,UNIT_SELL_PRICE=IC0.BASE_PRICE,QTY_IN_SELL_UM=IC0.SELL_QTY_PER,CTN_PACK=IC0.CTN_PACK,UNIT_LIST_PRICE=IC0.BASE_PRICE,LINE_ITEM_DISC_PRCNT=FS1.LINE_ITEM_DISC_PRCNT
24437 IF FOUND_FM1 AND %OE_GRID AND PO_CODE$<>"" THEN PROD_CODE$=FM1.PROD_CODE$,COST_UM$=FM1.COST_UM$,SELL_UM$=FM1.SELL_UM$,COST_QTY_PER=FM1.COST_QTY_PER,QTY_IN_SELL_UM=FM1.SELL_QTY_PER,UNIT_SELL_PRICE=FM1.PRICE,UNIT_COST=FM1.TF_COST ! SSP208671 - use fm1 values per lmc notes 10/20/07
24440 UNIT_SELL_PRICE=UNIT_LIST_PRICE-(UNIT_LIST_PRICE*LINE_ITEM_DISC_PRCNT*.01) ! Calculate list item disc
24445 IF FS1.WORK_ORDER$="Y" THEN IF UNIT_COST<>0 THEN UNBILL_SHIP_UNIT_CST=UNIT_COST*1000/COST_QTY_PER ! Work order ->addtl needed see FM2OB5@5415
24450 IF NEW_COST<>0 THEN UNIT_COST=NEW_COST
24455 IF FS1.ORDER_TYPE_3$="B" THEN SPECIAL_SHIPPING$="Y" ! 172972
24460 IF STP(FM1.ENDING_NUM$,3)="" THEN GOTO 24465 ! 208671
24462 IF NOT(NUL(PO_CODE$)) THEN STARTING_NUM$=FM1.ENDING_NUM$; TMP$=STP(FM1.ENDING_NUM$); STARTING_NUM$=PAD(STR(NUM(TMP$,ERR=*NEXT)+1:DIM(LEN(TMP$))),9,0) ! SSP232856 jdf
24465 IF FM1.NUMBERING$="Y" THEN ENABLE CONTROL STARTING_NUM.CTL ELSE DISABLE CONTROL STARTING_NUM.CTL
24480 IF NOT(%OE_GRID) THEN PRINT 'CI'; NEXT_ID=WZ_NEXT.CTL ! ssp208671
24499 BREAK ! CASE "C"
24500 END SWITCH 
24505 IF NOT(%OE_GRID) AND EXSIST_PO THEN VENDOR$=PO1.VEND_DIV$+PO1.VEND_CODE$ ! SSP 217566
24507 IF %OE_GRID AND PO_CODE$<>"" THEN CALL "UPDPO1;READBYKEY",PO1,0,ORDER_DIV$,ORDER_NUM$,PO_CODE$,SEG4$,SEG5$,TMPPO1$,TMPPO1{ALL},FOUNDTMPPO1; IF FOUNDTMPPO1 THEN VEND_DIV$=TMPPO1$(7,2),VEND_CODE$=TMPPO1$(9,8); VENDOR$=VEND_DIV$+VEND_CODE$ ! SSP208671
24510 GOTO 24600
24590 ITEM_CODE_DEFAULT_END:END SWITCH 
24593 IF NOT(%OE_GRID) THEN NEXT_ID=WZ_NEXT.CTL ! ssp208671
24595 IF NOT(%OE_GRID) THEN REFRESH_FLG=1; RETURN 
24599 ! 
24600 IF FS1.JOB_COSTING$<>"Y" THEN ITEM_FLG=1
24605 IF STP(PROD_CODE$)="" THEN PROD_CODE$=IC0.PROD_CODE$; IF STP(PROD_CODE$)="" THEN PROD_CODE$=FM1.PROD_CODE$; END_IF ; IF LINE_TYPE$="S" AND STP(FMP$(52,3))<>"" THEN PROD_CODE$=FMP$(52,3) ! SSP213686 jdf
24610 IF POS(LINE_TYPE$="NM")=0 THEN GOSUB PROD_CODE_DEFAULT
24620 IF NOT(NUL(VENDOR$)) THEN GOSUB GET_VEND_NAME
24625 IF NOT(NUL(FIND_FEE_VENDOR$)) THEN GOSUB GET_FIND_FEE_NAME
24630 IF NOT(%OE_GRID) THEN IF MID(PRODUCT_CODE$,51,1)="Y" THEN CALL "*WINGRP;Hide",SUPRESS.GRP$ ELSE CALL "*WINGRP;SHOW",SUPRESS.GRP$ ! ssp208671
24680 REFRESH_FLG=1; GOSUB NUM_TO_STR; GOSUB GLOBAL_VARS; IF NOT(IN_QUOTE_LINE_ENTRY) THEN PERFORM PGN+";CALCULATIONS"
24681 IF NOT(%OE_GRID) OR SCRN_ID$<>"FMGODB.V7" THEN PERFORM "*winproc;REFRESH_SCRN" ! ssp208671
24685 ! IF POS(LINE_TYPE$=" CI") AND POS(FS1.ORDER_TYPE_1$="RW")=0 THEN CALL "FMGOAW",%CUST_KEY$,ITEM_CODE$; IF %OP_PARM$(243,1)="A" THEN CALL "FMGDAJ",%CUST_KEY$+ITEM_CODE$,1
24686 GOSUB VENDOR_COMM ! SSP 217566
24687 IF %OP_PARM$(243,1)="A" THEN CALL "FMGDAJ",%CUST_KEY$+ITEM_CODE$,1
24690 IF NOT(IN_QUOTE_LINE_ENTRY) AND NOT(NUL(PO_CODE$)) AND CUSTOM$="Y" THEN MSGBOX MSG("FMGODB_47"),MSG("FMGODB_48"),"?,YESNO",_YESNO$; IF _YESNO$="YES" THEN %CUSTOMER$=CUST_DIV$+CUST_CODE$,%ITEM_CODE$=ITEM_CODE$; CALL "FMGIAB"; FLAG_CHK=1; GOTO ITEM_CODE_DEFAULTS ! ssp208671 ; !SSP 227738
24693 REM TMP$="CALL "+QUO+"*wingrp;enable"+QUO+","+"LINE_TYPE_"+STP(%LINE_TYPE$)+".GRP$"; EXECUTE (TMP$)
24694 IF NOT(%OE_GRID) THEN IF (FS1.RFQ_TYPE_QUOTATION$="Y" AND NOT(NUL(QUOTE_LINE_NUM$)) AND NOT(NUL(VEND_DIV$+VEND_CODE$))) OR NUL(PO_CODE$) OR LINE_TYPE$="M" OR PO_EXISTS THEN CALL "*wingrp;DISABLE",VENDOR.GRP$ ELSE CALL "*wingrp;ENABLE",VENDOR.GRP$; IF LINE_TYPE$="S" AND STP(VENDOR$)="" THEN CALL "*wingrp;DISABLE",PLANT.GRP$ ! ssp208671 ! SSP246186 jdf
24695 RETURN 
24700 PROD_CODE_DEFAULT:! Default based on product code
24702 IF LINE_TYPE$="M" OR LINE_TYPE_M$="M" THEN RETURN ! SSP221727 jdf SSP 234201
24703 IF STP(PROD_CODE$)="" THEN PROD_CODE$=IC0.PROD_CODE$; IF STP(PROD_CODE$)="" THEN PROD_CODE$=FM1.PROD_CODE$; END_IF ; IF LINE_TYPE$="S" AND STP(FMP$(52,3))<>"" THEN PROD_CODE$=FMP$(52,3) ! SSP213686 jdf
24705 IF NUL(PROD_CODE$) THEN MSGBOX MSG("FMGODB_96"),MSG("MB_ATTN"),"!"; NEXT_ID=PROD_CODE.CTL; RETURN 
24706 IF %OE_GRID AND NUL(PROD_CODE$) THEN DIM PROD_CODE$(3) ! ssp208671
24710 DIM PRODUCT_CODE$(100); FIND (Z[9],KEY="T"+PROD_CODE$,DOM=*NEXT)PRODUCT_CODE$
24720 IF PRODUCT_CODE$(22,1)="N" THEN NUM_OF_CTN_LBL_PRNT=0
24721 IF NOT(%NEW) THEN GOTO 24735 ! SSP 276772
24722 IF %OP_PARM$(184,1)="Y" OR LINE_TYPE$="C" THEN FF$=PAD(FS1.CUST_DIV$+FS1.CUST_CODE$+PROD_CODE$+CUST_DIV$+CUST_CODE$+ITEM_CODE$,34,1); IF MFF_PARM THEN CALL "FS2MFF",%X3$,%X4$,FF$,FF,ORDER$+ORDER_LINE_NUM$; GOTO 24735 ELSE CALL "FS2DAF",%X3$,%X4$,FF$,FF; IF FF$>"" THEN FIND_FEE$=FF$(11,1),FIND_FEE_VEND_DIV$=FF$(1,2),FIND_FEE_VENDOR$=FF$(3,8),FIND_FEE_PRCNT$=STR(FF); REM SSP 199045 SSP 276772
24723 IF %AP_DIV_LEN=0 THEN FIND_FEE_VENDOR$=FIND_FEE_VENDOR$ ELSE FIND_FEE_VENDOR$=FIND_FEE_VEND_DIV$+MID(FIND_FEE_VEND_CODE$,1,%VEND_LEN); REM SSP 199045 ! SSP242443 jdf
24725 IF PRODUCT_CODE$(47,1)="Y" THEN FIND_FEE_PRCNT=0,FIND_FEE_VEND_DIV$="",FIND_FEE_VEND_CODE$="",FIND_FEE_VENDOR$="",FIND_FEE$=" ",FIND_FEE_PRCNT$=""; REM SSP 199045
24735 REFRESH_FLG=1
24740 GOSUB SET_TAX_AND_COMMISSION
24745 RETURN 
24749 ! 
24750 SET_TAX_AND_COMMISSION:
24752 TAX_TYPE$=""; REM SSP 201823
24755 IF FS1.TAXABLE$<>"Y" THEN IS_LINE_TAXABLE$="N" ELSE IF NUL(IS_LINE_TAXABLE$) THEN IS_LINE_TAXABLE$="Y"
24760 SWITCH MID(PRODUCT_CODE$,23,1)
24762 CASE "N"; IF IS_LINE_TAXABLE$="Y" THEN IS_LINE_TAXABLE$="N"
24763 BREAK
24764 CASE "C"; IF IS_LINE_TAXABLE$="Y" THEN IS_LINE_TAXABLE$="C"
24765 BREAK
24766 END SWITCH 
24767 IF FM1.TAX_TYPE$<>DIM(1) THEN TAX_TYPE$=FM1.TAX_TYPE$; GOTO 24769; REM SSP 201823
24768 IF IC0.TAX_TYPE$<>DIM(1) THEN TAX_TYPE$=IC0.TAX_TYPE$; REM SSP 201823
24769 IF TAX_TYPE$=" " THEN GOTO 24770 ELSE IF TAX_TYPE$="E" THEN IS_LINE_TAXABLE$="N" ELSE IF TAX_TYPE$="C" THEN IS_LINE_TAXABLE$="C" ELSE IF TAX_TYPE$="T" THEN IS_LINE_TAXABLE$="Y"; REM SSP 201823
24770 IF %MSLC THEN GOSUB MULTI_COMM_KEY; CALL "ARGSCM;COMM_PROD_OVERRIDE",SC_KEY$,PROD_CODE$; RETURN ! SSP225300
24772 IF %OP_PARM$(186,1)="Y" THEN IF NOT(NUL(MID(PRODUCT_CODE$,38,5))) THEN COMM_CODE$=MID(PRODUCT_CODE$,38,5) ! SSP 225300
24775 IF MID(%AR_PARM$,122,1)="Y" THEN FIND (Z[21],KEY=FS1.SPER_CODE$+PROD_CODE$,DOM=*NEXT)ASQ$; COMM_CODE$=MID(ASQ$,8,5)
24795 RETURN 
24799 ! 
25000 ! ^1000,3 show/hide fields
25005 SET_FIELDS:
25008 IF SCRN_ID$="FMGODB.V7" THEN IF (POS(LINE_TYPE$="INMS")<>0) THEN CUSTOMER$=""; CALL "*WINGRP;HIDE",CUSTOMER.GRP$ ELSE CALL "*WINGRP;SHOW",CUSTOMER.GRP$ ! SSP 242299 JVV
25010 IF FOLDER_ID$="FMGODB.2" OR SCRN_ID$="FMGODB.V7" THEN {! SSP242299 jdf
25015 CIC_FLG$="N"; IF NUL(ITEM_CODE$) THEN CALL "FS2DAK",%X3$,%X4$,0,FS1.CUST_DIV$+FS1.CUST_CODE$,CIC_FLG$,"",""
25020 %ITEM_CODE_TAG$=MSG("LIN_TYP_"+STP(%LINE_TYPE$))
25025 TMP$="CALL "+QUO+"*wingrp;show"+QUO+","+"LINE_TYPE_"+STP(%LINE_TYPE$)+".GRP$"; EXECUTE (TMP$)
25030 IF CIC_FLG$="Y" AND POS(LINE_TYPE$=" IC")<>0 THEN CALL "*wingrp;show",CIC.GRP$ ELSE CALL "*wingrp;hide",CIC.GRP$
25031 IF (FS1.RFQ_TYPE_QUOTATION$="Y" AND NOT(NUL(QUOTE_LINE_NUM$)) AND NOT(NUL(VEND_DIV$+VEND_CODE$))) OR NUL(PO_CODE$) OR LINE_TYPE$="M" OR PO_EXISTS THEN CALL "*wingrp;DISABLE",VENDOR.GRP$ ELSE CALL "*wingrp;ENABLE",VENDOR.GRP$
25032 IF SCRN_ID$="FMGODB.V7" THEN RETURN ! SSP 242299
25035 SWITCH LINE_TYPE$
25040 CASE "I"; IF CIC_FLG$="Y" THEN _FIRST_TAB=CIC_CODE.CTL ELSE _FIRST_TAB=ITEM_CODE.CTL END_IF ; _LAST_TAB=PLANT_CODE.CTL; NEXT_ID=_FIRST+TAB; BREAK
25045 CASE "C"," "; IF NUL(CUSTOMER$) THEN _FIRST_TAB=CUSTOMER.CTL ELSE IF CIC_FLG$="Y" THEN _FIRST_TAB=CIC_CODE.CTL ELSE _FIRST_TAB=ITEM_CODE.CTL END_IF ; END_IF ; IF LINE_TYPE$=" " AND FM1.NUMBERING$="Y" THEN ENABLE CONTROL STARTING_NUM.CTL END_IF ; _LAST_TAB=PLANT_CODE.CTL; NEXT_ID=_FIRST_TAB; BREAK
25050 CASE "S"; _FIRST_TAB=ITEM_CODE.CTL; _LAST_TAB=PLANT_CODE.CTL; NEXT_ID=ITEM_CODE.CTL; BREAK
25055 CASE "M"; _FIRST_TAB=TF_DESC.CTL; _LAST_TAB=TF_DESC.CTL; NEXT_ID=TF_DESC.CTL; IF WIZARD_MODE THEN HIDE CONTROL WZ_NEXT.CTL; SHOW CONTROL WZ_FINISH.CTL END_IF ; BREAK
25060 CASE "N"; _FIRST_TAB=ITEM_CODE.CTL,_LAST_TAB=PLYS.CTL; NEXT_ID=ITEM_CODE.CTL; MULTI_LINE ENABLE LEFT_RIGHT.CTL; MULTI_LINE ENABLE TOP_BOTTOM.CTL; MULTI_LINE ENABLE PLYS.CTL; BUTTON HIDE ITEM_CODE.CTL+3000; BREAK ! CALL "*WINGRP;SHOW",NON_STK.GRP$; CALL "*WINGRP;ENABLE",NON_STK_2.GRP$; BREAK 
25065 END SWITCH 
25070  }
25075 IF FOLDER_ID$="FMGODB.3" THEN {
25080 _FIRST_TAB=WHSE.CTL,_LAST_TAB=COST_EXT.CTL,NEXT_ID=DISPLAY_SELL_QTY.CTL
25085  }
25099 RETURN 
25100 ! ^100 - Get order info
25105 GET_ORDER:
25110 CALL "ZZWLKU;PARSE_ORD",ORDER$,ORDER_DIV$,ORDER_NUM$
25115 GOSUB GET_FS1_INFO
25120 REFRESH_FLG=1
25125 GOTO FIND_REC
25195 EXIT 
25200 ! ^100,5 - New line - get next line number
25205 NEW_BUTTON:
25207 PRIOR_OPEN_QTY=0
25210 IF STP(ORDER_DIV$+ORDER_NUM$,3)="" THEN MSGBOX MSG("FMGODB_13"),MSG("FMGODB_14"); GOTO NEW_BUTTON_END
25215 ORDER_LINE_NUM$="001"
25220 READ (_CUR_FN,KEY=ORDER_DIV$+ORDER_NUM$+"zzz",DOM=*NEXT)
25225 DIM PKEY$(11); PKEY$=KEP(_CUR_FN,ERR=*NEXT)
25230 IF MID(PKEY$,1,LEN(ORDER_DIV$+ORDER_NUM$))=ORDER_DIV$+ORDER_NUM$ THEN ORDER_LINE_NUM$=STR(NUM(MID(PKEY$,9,3),ERR=*NEXT)+1:"000") ELSE ORDER_LINE_NUM$="001"
25235 CALL "*wingrp;disable",WIZARD_OFF.GRP$
25240 REFRESH_FLG=1,WIZARD_MODE=1
25245 ID$="ORDER_LINE_NUM",_KCNT=2,_EOM$=$0D$,_ENABLE_FLG=1 ! Act like we entered a key
25250 GOTO FIND_REC
25295 NEW_BUTTON_END:EXIT 
25299 ! 
25300 ! ^100,5 - Calculations for pricing
25302 ! Need to add logic for 'S' type ext only and U/M types w/ext only
25305 CALCULATIONS:IF NOT(%OE_GRID) THEN IF ID$="DISPLAY_SELL_QTY" AND MID(%OP_SECURITY$,42,1)="Y" AND DISPLAY_SELL_QTY<0 AND STP(PO_CODE$)="" THEN NEXT_ID=DISPLAY_SELL_QTY.CTL,DISPLAY_SELL_QTY$="",DISPLAY_COST_QTY$="",DISPLAY_SELL_QTY=0,REFRESH_FLG=1; EXIT ! SSP 200952! ssp208671  ! SSP224681 jdf
25306 DONT_MOD$="N"; IF EXISTING_RECORD THEN IF UNIT_SELL_PRICE>0 AND %OP_PARM$(254,1)="Y" THEN DONT_MOD$="Y" ! SSP 225920
25307 IF NOT(%OE_GRID) THEN IF DISPLAY_SELL_QTY<>0 THEN CALL "*wingrp;disable",WHSE.GRP$ ! ssp208671 ! SSP224681 jdf
25308 GOSUB READ_IC2
25310 GOSUB STR_TO_NUM
25311 TMPPTH$=PTH(Z[13],ERR=*NEXT); GOTO 25313 ! Temp fix for zzparm getting closed
25312 OPEN (Z[13])"ZZPARM"
25316 GOSUB CHECK_UOM ! SSP 231692
25317 IF NOT(%OE_GRID) THEN IF _EOM$=$09$ AND ID$="DISPLAY_SELL_QTY" AND BB$="" AND DISPLAY_SELL_QTY<0 AND MID(%IC_PARM$,44,1)="Y" AND POS(LINE_TYPE$="IC")<>0 AND NUL(PO_CODE$) AND (LOT_INV_ORDER_LINE$="Y" OR IC0.LOT_INV_FOR_THIS_ITM$="Y") THEN GOSUB LOT_RETURN ! SSP208671 ! SSP224681 jdf
25318 IF %OE_GRID AND GRD_RETURN THEN IF DISPLAY_SELL_QTY<0 AND MID(%IC_PARM$,44,1)="Y" AND NUL(PO_CODE$) AND POS(LINE_TYPE$="IC")<>0 AND ((LOT_INV_ORDER_LINE$="Y" OR IC0.LOT_INV_FOR_THIS_ITM$="Y")) THEN GOSUB LOT_RETURN; GRD_RETURN=0 ! ssp208671 SSP 238272 SSP  226319
25319 OLD_QTY_IN_SELL_UM=QTY_IN_SELL_UM,OLD_COST_QTY_PER=COST_QTY_PER
25320 IF NOT(%OE_GRID) THEN IF ID$="QTY_IN_SELL_UM" THEN OLD_QTY_IN_SELL_UM=NUM(PRIOR_VAL$,ERR=*NEXT) ELSE IF ID$="COST_QTY_PER" THEN OLD_COST_QTY_PER=NUM(PRIOR_VAL$,ERR=*NEXT) ! If one of these fields changed get old value from Pre field change! ssp208671
25321 IF %OE_GRID AND QTY_IN_SELL_UM=0 THEN QTY_IN_SELL_UM=1 ! SSP208671
25322 IF ID$="DISPLAY_SELL_QTY" OR %OE_GRID THEN {! ssp208671
25323 IF FS1.RFQ_TYPE_QUOTATION$="Y" AND NOT(NUL(QUOTE_LINE_NUM$)) AND NOT(NUL(PO_CODE$)) THEN GOSUB 48700 ! SSP 240173
25324 IF MID(S_UM$,20,1)="Y" THEN OPEN_QTY=DISPLAY_SELL_QTY*S_UM[1] ELSE OPEN_QTY=DISPLAY_SELL_QTY*QTY_IN_SELL_UM ! Set quantity if typed in  ! SSP224681 jdf
25325 IF INV_AVAIL_CHECK=1 THEN INV_AVAIL_CHECK=0; IF OPEN_QTY>0 AND POS(LINE_TYPE$="CI")>0 AND STP(PO_CODE$)="" THEN GOSUB ZERO_INVENTORY_CHK; IF IC0.LOT_INV_FOR_THIS_ITM$<>"Y" AND AVAILABLE<OPEN_QTY THEN Q0=AVAILABLE,ORIG_OPENQTY=OPEN_QTY; IF Q0<0 THEN Q0=0 END_IF ; GOSUB CHECK_FOR_BO; OPEN_QTY=ORIG_OPENQTY ! SSP 229365 !SSP 197125, 234847
25326 ! F MID(%OP_SECURITY$,41,1)="Y" OR IC0.NEVER_BACKORDER$="Y" THEN GOTO ZERO_INVENTORY_CHK ! SSP200956 jdf  SSP 229365 SSP 229365
25327 IF NEED_TO_DO_LOTS AND NOT(%LOT_MANUAL) THEN IF %IC_PARM$(44,1)="Y" AND NUL(PO_CODE$) AND POS(LINE_TYPE$="IC")<>0 AND IC0.LOT_INV_FOR_THIS_ITM$="Y" AND POS(%IC_PARM$(52,1)="C")=0 THEN Q0=OPEN_QTY,ORIG_OPENQTY=OPEN_QTY; GOSUB DO_LOTS; OPEN_QTY=ORIG_OPENQTY ! SSP 223633 SSP 224446
25328 ORIG_QTY_ORDERED+=(OPEN_QTY-PRIOR_OPEN_QTY),PRIOR_OPEN_QTY=OPEN_QTY
25330 GOSUB 48550 ! Set price?
25333  }
25334 GOSUB EXTEND_PRICE; GOSUB EXTEND_COST
25336 IF MID(S_UM$,20,1)="Y" THEN IF S_UM[0]<>0 THEN QTY_IN_SELL_UM=S_UM[0] ELSE QTY_IN_SELL_UM=S_UM[1] END_IF ; IF QTY_IN_SELL_UM=0 THEN QTY_IN_SELL_UM=1 END_IF ; CALL "*wingrp;disable",SELL_QTY_PER.GRP$ ELSE CALL "*wingrp;enable",SELL_QTY_PER.GRP$
25339 IF QTY_IN_SELL_UM<>OLD_QTY_IN_SELL_UM AND OLD_QTY_IN_SELL_UM<>0 THEN UNIT_SELL_PRICE=UNIT_SELL_PRICE*QTY_IN_SELL_UM/OLD_QTY_IN_SELL_UM; GOSUB EXTEND_PRICE ! Adjust unit price if u/m has changed
25342 IF MID(C_UM$,20,1)="Y" THEN IF C_UM[0]<>0 THEN COST_QTY_PER=C_UM[0] ELSE COST_QTY_PER=C_UM[1] END_IF ; IF COST_QTY_PER=0 THEN COST_QTY_PER=1 END_IF ; CALL "*wingrp;disable",COST_QTY_PER.GRP$ ELSE CALL "*wingrp;enable",COST_QTY_PER.GRP$
25345 IF COST_QTY_PER<>OLD_COST_QTY_PER AND OLD_COST_QTY_PER<>0 THEN UNIT_COST=UNIT_COST*COST_QTY_PER/OLD_COST_QTY_PER; GOSUB EXTEND_COST ! adjust if cost um changed
25346 IF POS(LINE_TYPE$="MS")=0 THEN IF SP0_PRICE_TYPE$<>"MAN" THEN CALL "UPDSP0;GET_PRICE",ERR=*NEXT,0,CUSTOMER$,%SP_CUST$+ITEM_CODE$,UNIT_SELL_PRICE,UNIT_COST,SP0_PRICE,SP0_PRICE_TYPE$,COST_QTY_PER,QTY_IN_SELL_UM; IF SP0_PRICE_TYPE$<>"" THEN IF CHECKSPP$="Y" AND UNIT_SELL_PRICE<>SP0_PRICE THEN SP0_PRICE_TYPE$="MAN",CHECKSPP$="" ELSE UNIT_SELL_PRICE=SP0_PRICE ! SSP 191604 jvv - Temporarily commented for releasing 208671 ssp 201990
25348 GOSUB EXTEND_PRICE; GOSUB EXTEND_COST ! IF ID$="UNIT_SELL_PRICE" THEN GOSUB EXTEND_PRICE ELSE IF ID$="UNIT_COST" THEN GOSUB EXTEND_COST
25351 ! now calc values
25354 DISPLAY_SELL_QTY=FN%QTY_IN_UM(OPEN_QTY,SELL_UM$,QTY_IN_SELL_UM)
25357 DISPLAY_SELL_QTY$=STR(DISPLAY_SELL_QTY:"##,###,###.00-"); DISPLAY_SELL_QTY=NUM(DISPLAY_SELL_QTY$,ERR=*NEXT) ! SSP224681 jdf
25360 DISPLAY_COST_QTY=FN%QTY_IN_UM(OPEN_QTY,COST_UM$,COST_QTY_PER),DISPLAY_COST_QTY$=STR(DISPLAY_COST_QTY:"##,###,###.00-")
25363 GP_EXT=SELL_PRICE_EXT-COST_EXT,GP_EXT$=STR(GP_EXT:"##,###,###.00-")
25366 GP_PERCENT$=TBL(SGN(ABS(SELL_PRICE_EXT)),"***.**",STR(GP_EXT*100/SELL_PRICE_EXT:"###.00-")) ! IF sell_price_ext is 0 put asterisks, else calc value
25369 IF NOT(%OE_GRID) THEN IF GP_EXT.CTL<>0 THEN GP1=GP_EXT.CTL,GP2=GP_PERCENT.CTL; IF GP_EXT<0 THEN GP1'TEXTCOLOUR$=MSG("GP_NEG_COL"),GP1'BACKCOLOUR$=MSG("GP_NEG_BC"),GP2'TEXTCOLOUR$=MSG("GP_NEG_COL"),GP2'BACKCOLOUR$=MSG("GP_NEG_BC") ELSE GP1'TEXTCOLOUR$=MSG("GP_POS_COL"),GP1'BACKCOLOUR$=MSG("GP_POS_BC"),GP2'TEXTCOLOUR$=MSG("GP_POS_COL"),GP2'BACKCOLOUR$=MSG("GP_POS_BC") ! ssp208671
25380 GOSUB DISPLAY_AVAILABLE
25385 GOSUB NUM_TO_STR
25390 REFRESH_FLG=1
25391 IF ID$="DISPLAY_SELL_QTY" AND POS(MID(%OP_PARM$,281,1)="YB",1)<>0 AND STP(PO_CODE$)="" AND DO_CHECK_REORDER=1 THEN GOSUB CHECK_REORDER ! SSP 201536, 202393 SSP 230773
25392 IF %ML_COST<>0 THEN CALL "FM2EXT",Z[13],1,COST_UM$,COST_QTY_PER,%EXTENSION,U,%ML_COST,M6[1]; UNIT_COST$=STR(U),UNIT_COST=U; REFRESH_FLG=1 ! SSP219402 jdf ssp 226319
25393 IF MID(WHSE$,1,1)="9" AND LINE_TYPE$<>"S" THEN UNIT_COST$="0"; REFRESH_FLG=1 REM IF %ML_COST<>0 AND NUM(DISPLAY_SELL_QTY$)<>0 THEN UNIT_COST$=STR(-%ML_COST/NUM(DISPLAY_SELL_QTY$)); REFRESH_FLG=1 REM ELSE UNIT_COST$=STR(COST_PER_UNIT); END_IF ; REFRESH_FLG=1 ! SSP219402 jdf !SSP#253961
25394 ! F %OE_GRID THEN IF DISPLAY_SELL_QTY<0 AND MID(%IC_PARM$,44,1)="Y" AND NUL(PO_CODE$) AND (LOT_INV_ORDER_LINE$="Y" OR IC0.LOT_INV_FOR_THIS_ITM$="Y") THEN GOSUB LOT_RETURN ! ssp208671
25395 RETURN 
26000 ! ^100,5 Extend the price
26010 EXTEND_PRICE:
26015 IF SPC_CHG_EXT_ONLY OR PRICE_EXT_ONLY OR UOM_SELL_EXT THEN RETURN ! SSP 224626
26020 IF MID(S_UM$,20,1)<>"Y" THEN IF UNIT_SELL_PRICE*QTY_IN_SELL_UM=0 THEN SELL_PRICE_EXT=0 ELSE SELL_PRICE_EXT=OPEN_QTY/QTY_IN_SELL_UM*UNIT_SELL_PRICE END_IF ELSE IF S_UM[1]=0 THEN SELL_PRICE_EXT=0 ELSE SELL_PRICE_EXT=OPEN_QTY/S_UM[1]*UNIT_SELL_PRICE; IF S_UM[0]<>0 THEN SELL_PRICE_EXT=SELL_PRICE_EXT/S_UM[0] ! Calculste sell
26095 RETURN 
26100 ! ^100,5 Extend the cost
26105 EXTEND_COST:
26115 IF SPC_CHG_EXT_ONLY OR COST_EXT_ONLY OR UOM_COST_EXT THEN RETURN ! SSP 224626 
26125 IF MID(C_UM$,20,1)<>"Y" THEN IF UNIT_COST*COST_QTY_PER=0 THEN COST_EXT=0 ELSE COST_EXT=OPEN_QTY/COST_QTY_PER*UNIT_COST END_IF ELSE IF C_UM[1]=0 THEN COST_EXT=0 ELSE COST_EXT=OPEN_QTY/C_UM[1]*UNIT_COST; IF C_UM[0]<>0 THEN COST_EXT=COST_EXT/C_UM[0] ! Calculste cost
26195 RETURN 
26200 ! ^100,5 - Set state of ship button based on special shipping
26205 SET_SHIP_BUTTON:
26206 ! if not special shipping or this is new record (we will handle shipping later), then disable it
26207 ! IF FS1.ORDER_TYPE_3$="B" THEN DISABLE CONTROL SPECIAL_SHIPPING.CTL ! 234822
26208 IF SPECIAL_SHIPPING$<>"Y" AND EXISTING_RECORD THEN GOSUB CHECK_SPEC_SHIP
26210 IF SPECIAL_SHIPPING$<>"Y" OR EXISTING_RECORD=0 THEN HIDE CONTROL SPECIAL_SHIP_BUTTON.CTL; RETURN 
26220 SHOW CONTROL SPECIAL_SHIP_BUTTON.CTL
26225 REFRESH_FLG=1
26230 RETURN 
26235 CHECK_SPEC_SHIP:
26237 IF FS1.ORDER_TYPE_3$="B" AND POS(LINE_TYPE$="SM",1)=0 THEN MSGBOX MSG("FMGODB_101"),MSG("FYI"),"!"; SPECIAL_SHIPPING$="Y"; REFRESH_FLG=1; RETURN 
26238 SPEC_SHIP_FLG=0
26240 _PO3=HFN; OPEN (_PO3)"PO3"+%C$
26245 KEY_PO3$=ORDER$+" "+ORDER_LINE_NUM$
26250 READ (_PO3,KEY=KEY_PO3$,DOM=*NEXT)
26255 KEY_PO3$=KEY(_PO3,END=26275); READ (_PO3,KEY=KEY_PO3$)PO3_REC$
26260 IF KEY_PO3$(1,8)=ORDER$ AND KEY_PO3$(10,3)=ORDER_LINE_NUM$ AND KEY_PO3$(13,1)<>" " THEN SPEC_SHIP_FLG=1; GOTO 26275
26265 IF KEY_PO3$(1,12)<>ORDER$+" "+ORDER_LINE_NUM$ THEN RETURN 
26270 GOTO 26250
26275 CLOSE (_PO3); IF SPEC_SHIP_FLG THEN MSGBOX MSG("FMGODB_100"),MSG("VERIFY"),"?,YesNo",_ANS$ ELSE RETURN 
26280 IF _ANS$="NO" THEN SPECIAL_SHIPPING$="Y"; RETURN 
26285 GOSUB DELETE_SPECIAL_SHIPPING
26290 RETURN 
26295 ! 
26300 ! ^100,5 - In y/n checkboxes set blank values to N
26305 SET_YESNO:
26310 IF FIXED_PRICE$=" " THEN FIXED_PRICE$="N"
26315 IF SPECIAL_SHIPPING$=" " THEN SPECIAL_SHIPPING$="N"
26320 RETURN 
26325 ! Delete Special Shipping if Changed on the line.
26330 DELETE_SPECIAL_SHIPPING:
26335 _PO3=HFN; OPEN (_PO3)"PO3"+%C$
26340 KEY_PO3$=ORDER$+" "+ORDER_LINE_NUM$
26345 READ (_PO3,KEY=KEY_PO3$,DOM=*NEXT)
26350 KEY_PO3$=KEY(_PO3,END=26370); READ (_PO3,KEY=KEY_PO3$)PO3_REC$
26355 IF KEY_PO3$(1,8)<>ORDER$ THEN GOTO 26370
26360 IF KEY_PO3$(1,8)=ORDER$ AND KEY_PO3$(10,3)=ORDER_LINE_NUM$ AND KEY_PO3$(13,1)<>" " THEN REMOVE (_PO3,KEY=KEY_PO3$)
26365 GOTO 26350
26370 CLOSE (_PO3)
26390 RETURN 
26395 ! 
26400 ! ^100,5 - New record do defaults
26405 DEFAULT_NEW:
26410 PRINT_FLAGS$="SIP  "; GOSUB PRINT_FLAGS_IN
26415 GOSUB GET_FS1_INFO
26490 RETURN 
26495 ! 
26500 ! ^100,5 - PO_CODE either set or unset, adjust the line
26510 PO_CODE_ENTERED:
26511 ! F _EOM$<>$09$ THEN RETURN ; !SSP 239117
26512 IF EXISTING_RECORD THEN RETURN 
26513 GOSUB CHECK_SPEC ! ssp 
26514 REFRESH_FLG=1
26515 IF NUL(PO_CODE$) THEN {
26520 IF POS(FS1.ORDER_TYPE_3$="BS")<>0 THEN NEXT_ID=PO_CODE.CTL; RETURN 
26530 IF POS("P"=PRINT_FLAGS$)=0 THEN PRINT_FLAGS$=PAD(STP(PRINT_FLAGS$,3)+"P",5); GOSUB PRINT_FLAGS_IN
26532 IF POS(FS1.ORDER_TYPE_1$="RW")=0 AND NOT(NUL(MID(%OP_PARM$,214,5))) THEN PRINT_FLAGS$=%OP_PARM$(214,5); GOSUB PRINT_FLAGS_IN ! SSP307342       
26535 CUSTOM$=" ",SPECS_REQ$=" "
26545  } ELSE {! po_code$ is NOT blank
26550 IF POS("P"=PRINT_FLAGS$)<>0 AND POS("P"=%OP_PARM$(214,5))=0 THEN PRINT_FLAGS$=PAD(STP(PRINT_FLAGS$,3,"P"),5); GOSUB PRINT_FLAGS_IN ! SSP#216044
26555 ! IF CUSTOM$<>"N" THEN CUSTOM$="Y"
26560 LINE_TYPE$="I",CUST_DIV$="",CUST_CODE$=""; GOSUB GLOBAL_VARS ! 242869 Default line type to "I" when PO code is set26560 LINE_TYPE$="I",CUST_DIV$="",CUST_CODE$=""; GOSUB GLOBAL_VARS ! 242869 Default line type to "I" when PO code is set, was previously " "
26565 GOSUB ANALYZE_PO_CODE
26580  }
26585 GOSUB LOAD_LINE_TYPES
26587 IF STP(PO_CODE$)="" AND POS(LINE_TYPE$="I")<>0 THEN SPECS_REQ$="N",%SPEC_FLG$="Y",REFRESH_FLG=1 ! SSP 201618
26588 IF NOT(NUL(PO_CODE$)) AND NUM_STORAGE_MTH=0 THEN IF MID(SP_AR1$,524,2)<>DIM(2) THEN NUM_STORAGE_MTH=NUM(MID(SP_AR1$,524,2),ERR=*NEXT) ! WO264206, default number of storage months
26589 IF NOT(NUL(VENDOR$)) THEN GOSUB GET_VEND_NAME ! SSP#297345
26590 RETURN 
26595 ! 
26600 ! ^100,5 - Get finder fee name
26605 GET_FIND_FEE_NAME:
26610 CALL "ZZWLKU;FIND_FEE_VAL",FIND_FEE_VENDOR$,"",""
26620 CALL "ZZWLKU;PARSE_VEND",FIND_FEE_VENDOR$,FIND_FEE_VEND_DIV$,FIND_FEE_VEND_CODE$
26630 DIM FF_AP4$:IOL(Z[22]); FIND (Z[22],KEY=FIND_FEE_VEND_DIV$+FIND_FEE_VEND_CODE$,REC=FF_AP4$,DOM=*NEXT)
26640 IF FF_AP4.VEND_STAT$="I" THEN REJECT_MSG$=MSG("FMGODB_46"); GOTO REJECT_VENDOR
26690 RETURN 
26695 ! 
26800 READ_QUOTE_LINE:! SSP 240173  Reread quote info into QSB when going back into an exisiing order lined
26810 IF NUL(QUOTE_LINE_NUM$) THEN RETURN ! SSP 240173
26820 IF FS1.QUOTE_FROM_LINES$="Y" THEN RQTE$=QUOTE_DIV$+QUOTE_NUM$ ELSE RQTE$=FS1.MASTER_QUOTE_PART_1$+FS1.MASTER_QUOTE_PART_2$ ! SSP 240173
26825 RQTE$=RQTE$+QUOTE_LINE_NUM$ ! SSP 240173
26830 READ DATA FROM "" TO QSB$; READ DATA FROM "" TO QSC$ ! SSP 240173
26840 FIND (QSB,REC=QSB$,KEY=RQTE$,ERR=*RETURN) ! SSP 240173
26850 FIND (Z[7],REC=QSC$,KEY=RQTE$,ERR=*RETURN) ! SSP 240173
26890 RETURN ! SSP 240173
27000 GET_THE_QUOTE:! Get RFQ quote from  and check for consistency
27010 READ_QUOTE:! Come here to just read quote in, but not check it out
27013 CALL "ZZWLKU;PARSE_QUOTE",QUOTE$,QUOTE_DIV$,QUOTE_NUM$
27015 DIM QSA$:IOL(QUOTE_CHAN); FIND (QUOTE_CHAN,KEY=QUOTE$,REC=QSA$,DOM=DONE_WITH_QUOTE)
27020 IF %CHECK_QUOTE$<>"Y" THEN GOTO DONE_WITH_QUOTE
27022 IF %OE_GRID THEN %OE_GRID_QUOTE$=QUOTE$,%OE_GRID_QSA_CUST_DIV$=QSA.CUST_DIV$,%OE_GRID_QSA_CUST_CODE$=QSA.CUST_CODE$,%OE_GRID_QUOTE_DIV$=QUOTE_DIV$,%OE_GRID_QUOTE_NUM$=QUOTE_NUM$ ! SSP208671 SSP 224018
27024 ! does the customer on quote match customer on order?
27025 IF QSA.PROSPECT_OR_CUST$="C" THEN IF FS1.CUST_DIV$+FS1.CUST_CODE$<>QSA.CUST_DIV$+QSA.CUST_CODE$ THEN {
27026 MSG$=MSG("FMGODB_26")+" "+TBL(SGN(%AR_DIV_LEN),"",QSA.CUST_DIV$+"-")+QSA.CUST_CODE$(1,%CUST_LEN)+" "+MSG("FMGODB_27")
27029 MSGBOX MSG$,MSG("FMGODB_28"),"OK,!,BEEP"
27030  }
27034 ! Check if ordered already
27035 IF STP(QSA.ORDER_DIV$+QSA.ORDER_NUM$)<>"" THEN {
27036 MSG$=MSG("FMGODB_29")+" "+TBL(SGN(%OP_DIV_LEN),"",QSA.ORDER_DIV$+"-")+QSA.ORDER_NUM$(1,%ORDER_LEN)+" "+MSG("FMGODB_30")+" "+FN%FMT_TFDATE$(QSA.ORDERDATE$,"%Ms %D, %Y")
27038 MSGBOX MSG$,MSG("FMGODB_31"),"OK,!,BEEP"
27040  }
27080 GOSUB LOAD_QUOTE_LINE
27085 DONE_WITH_QUOTE:
27090 %CHECK_QUOTE$=""; REFRESH_FLG=1
27095 RETURN 
27099 ! 
27100 LOAD_QUOTE_LINE:
27102 SET_PARAM 'XI' ! SSP 229720
27105 LIST_BOX LOAD QUOTE_LINE_NUM_ENTRY.CTL,""; READ DATA FROM "" TO QSB$
27110 IF NUL(QUOTE$) THEN GOTO DONE_WITH_LOAD_QUOTE_LINE ! 263238
27115 SELECT *,REC=QSB$ FROM QSB BEGIN QUOTE$+"000" END QUOTE$+"999",ERR=DONE_WITH_LOAD_QUOTE_LINE ! changed z[6] to QSB ! ssp208671
27120 LOAD_LINE$=QSB.QUOTE_LINE_NUM$+" "+STP(QSB.ITEM_CODE$)+" - "+QSB.ITEM_DESC$
27135 LIST_BOX LOAD QUOTE_LINE_NUM_ENTRY.CTL,0,LOAD_LINE$
27170 NEXT RECORD 
27190 DONE_WITH_LOAD_QUOTE_LINE: SET_PARAM -'XI' ! SSP 229720
27191 SETERR 27196
27195 RETURN 
27196 SETERR 0000; CHUI_ERR=1; EXIT 
27199 ! 
27200 POST_QUOTE_LINE_ENTRY:! After we enter the quote line
27205 IF NOT(%OE_GRID) THEN QUOTE_LINE_NUM$=MID(QUOTE_LINE_NUM_ENTRY$,1,3) ! SSP208671 - already set  !ssp208671
27210 READ DATA FROM "" TO QSB$; READ DATA FROM "" TO QSC$
27215 FIND (QSB,REC=QSB$,KEY=QUOTE$+QUOTE_LINE_NUM$,ERR=DONE_WITH_POST_QUOTE_LINE_ENTRY) ! changed qsb from z[6] ! ssp208671
27216 IF QSB.CUSTOM_ITEM$="Y" THEN {
27217 IF NUL(PO_CODE$) THEN MSGBOX MSG("FMGODB_38"),MSG("MB_ATTN"),"!"; NEXT_ID=QUOTE_LINE_NUM_ENTRY.CTL; QUOTE_LINE_NUM_ENTRY$=DIM(3),REFRESH_FLG=1; GOTO DONE_WITH_POST_QUOTE_LINE_ENTRY
27218 IF PO_EXISTS THEN MSGBOX MSG("FMGODB_37"),MSG("MB_ATTN"),"!"; NEXT_ID=PO_CODE.CTL; QUOTE_LINE_NUM_ENTRY$=DIM(3),QUOTE$="",QUOTE_LINE_NUM$=DIM(3); LIST_BOX LOAD QUOTE_LINE_NUM_ENTRY.CTL,""; REFRESH_FLG=1; GOTO 27205 ! SSP 239117
27219  }
27220 FIND (Z[7],REC=QSC$,KEY=QUOTE$+QUOTE_LINE_NUM$,ERR=*NEXT)
27224 IF QSB.LINE_TYPE$<>"S" AND QSB.LINE_TYPE$<>"M" THEN PROCESS "QSGDAB.OE","../QSG/QS.EN",MID(QUOTE$,1,2)+SEP+MID(QUOTE$,3)+SEP+QUOTE_LINE_NUM$ ! ssp 193332
27225 CALL "FM2OBB",%X3$,QUOTE$+QUOTE_LINE_NUM$,FS1.CUST_DIV$+FS1.CUST_CODE$
27226 CUSTOM$=QSB.CUSTOM_ITEM$; ITEM_CODE$=QSB.ITEM_CODE$; CUST_DIV$=QSA.CUST_DIV$,CUST_CODE$=QSA.CUST_CODE$
27227 IF QSB.CUSTOM_ITEM$="Y" THEN CSTM_ITEM_LINE_TYPE$=TBL(QSB.LINE_TYPE$=" ",QSB.LINE_TYPE$,"N"); LINE_TYPE$=" "; GOSUB LOAD_LINE_TYPES ELSE LINE_TYPE$=QSB.LINE_TYPE$; GOSUB LOAD_LINE_TYPES
27228 IN_QUOTE_LINE_ENTRY=1; GOSUB ITEM_CODE_DEFAULTS; IN_QUOTE_LINE_ENTRY=0
27229 PROD_CODE$=QSB.PROD_CODE$; LEFT_RIGHT$=QSB.LEFT_RIGHT$; TOP_BOTTOM$=QSB.TOP_BOTTOM$; PLYS$=QSB.PLYS$; TF_DESC$=QSB.ITEM_DESC$; SELL_UM$=QSB.SELL_UM$
27230 QTY_IN_SELL_UM=QSB.SELL_QTY_PER; FIXED_PRICE$=QSB.FIXED_PRICE$; CTN_PACK=QSB.CTN_PACK
27231 COST_UM$=QSC.COST_UM$; COST_QTY_PER=QSC.COST_QTY_PER; UNIT_COST=QSC.QUOTED_COST
27232 IF QSB.LINE_TYPE$="S" THEN IF SPC_CHG_EXT_ONLY THEN UNIT_SELL_PRICE=QSB.SELL_EXT,UNIT_COST=QSC.COST_EXT ELSE UNIT_SELL_PRICE=QSB.QUOTED_PRICE,UNIT_COST=QSC.QUOTED_COST ! SSP 240444
27233 IF POS(QSB.LINE_TYPE$="SM",1)<>0 THEN SPECS_REQ$="N" ELSE SPECS_REQ$="Y"
27235 ! IF QSB.SELL_BREAK_1=0 THEN OPEN_QTY=QSB.QUOTED_QTY,ORIG_QTY_ORDERED=QSB.QUOTED_QTY,UNIT_SELL_PRICE=QSB.QUOTED_PRICE,SELL_PRICE_EXT=QSB.SELL_EXT,UNIT_COST=QSC.QUOTED_COST,COST_EXT=QSC.COST_EXT ELSE OPEN_QTY=QSB.SELL_BREAK_1,ORIG_QTY_ORDERED=QSB.SELL_BREAK_1,UNIT_SELL_PRICE=QSB.SELL_PRICE_1 ! SELL_PRICE_EXT
27236 DIM L[36]; FIND (Z[7],KEY=QUOTE$+QUOTE_LINE_NUM$,DOM=6541)IOL=40361
27240 ! Pick vendor just use first one for now.
27241 GOTO QLE_VENDOR_DONE ! skip picking vendor here
27242 READ (Z[8],KEY=QUOTE$+QUOTE_LINE_NUM$,DOM=*NEXT)
27244 READ DATA FROM "" TO QSD$; READ (Z[8],END=QLE_VENDOR_DONE,REC=QSD$)
27245 IF QSD.QUOTE_DIV$+QSD.QUOTE_NUM$+QSD.QUOTE_LINE_NUM$<>QUOTE$+QUOTE_LINE_NUM$ THEN GOTO QLE_VENDOR_DONE
27247 VEND_DIV$=QSD.VEND_DIV$; VEND_CODE$=QSD.VEND_CODE$; PLANT_CODE$=QSD.PLANT_CODE$,UNIT_COST=QSD.COST_QTY_BREAK_1
27249 QLE_VENDOR_DONE:
27250 GOSUB 48550
27270 GOSUB NUM_TO_STR; GOSUB GLOBAL_VARS; GOSUB CALCULATIONS; REFRESH_FLG=1
27280 ! CALL "*WINGRP;ENABLE",QTE_1.GRP$; REFRESH_FLG=1
27290 DONE_WITH_POST_QUOTE_LINE_ENTRY:
27295 RETURN 
27299 ! 
27300 AT_LINE_NUMBER:! at the line number entry, set the buttons
27310 IF WIZARD_MODE THEN CALL "*wingrp;hide",WIZARD.GRP$; SHOW CONTROL WZ_DONE.CTL
27315 ! CALL "*wingrp;Disable",FIELDS.GRP$
27330 DISABLE CONTROL FLDR.FMGODB.2.CTL; DISABLE CONTROL FLDR.FMGODB.3.CTL; DISABLE CONTROL FLDR.FMGODB.4.CTL
27350 EXTRACT (Z[2],KEY=ORDER_DIV$+ORDER_NUM$,ERR=*NEXT,DOM=*NEXT,REC=FS1$)* ! SSP248358 jdf
27395 RETURN 
27399 ! 
27400 SET_LINE_DEFAULTS:
27410 IF NOT(NUL(FS1.COMM_CODE$)) THEN COMM_CODE$=FS1.COMM_CODE$
27415 ORDER_LINE_COMPLETE$="N"
27420 FIXED_PRICE$="Y"
27425 SPECIAL_SHIPPING$="N"
27430 SKIP_ORDER_HIST$="Y"
27435 LINE_ITEM_DISC_PRCNT=FS1.LINE_ITEM_DISC_PRCNT
27440 IF AR1.TAX_EXEMPT$="Y" THEN IS_LINE_TAXABLE$="N" ELSE IS_LINE_TAXABLE$="Y"
27450 FIND (Z[9],KEY="D"+FS1_CUSTOMER$,DOM=*NEXT)O2$,O0; FIND_FEE$=O2$(12,1),FIND_FEE_VEND_DIV$=O2$(13,2),FIND_FEE_VEND_CODE$=O2$(15,8),FIND_FEE_VENDOR$=FIND_FEE_VEND_DIV$+FIND_FEE_VEND_CODE$,FIND_FEE_PRCNT=O0; IF STP(FIND_FEE_VENDOR$,3)<>"" THEN GOSUB GET_FIND_FEE_NAME
27460 GOSUB LOAD_LINE_TYPES
27465 ! 172972 IF FS1.ORDER_TYPE_3$="B" THEN SPECIAL_SHIPPING$="Y"
27470 IF %MSLC THEN GOSUB MULTI_COMM_KEY; CALL "ARGSCM;DEFAULT_LINE_SETUP",SC_TYPE$,SC_KEY1$,SC_KEY2$,SC_LINE$ ! SSP 225300
27472 IF SCRN_ID$="FMGODB.V7" AND USING_TOPS=1 THEN GOSUB CHECK_TOPS ! SSP 307461
27490 SET_LINE_DEFAULTS_END:RETURN 
27495 ! 
27500 INIT_FOLDER_1:! Initialize folder 1 fields
27505 IF POS(FS1.ORDER_TYPE_1$="RW")<>0 THEN IF FS1.ORDER_TYPE_1$="W" AND POS(%X3_COMP$="584585",3) AND %NEW THEN LINE_TYPE$="I" ELSE IF LINE_TYPE$="" THEN LINE_TYPE$="C" END_IF ; REFRESH_FLG=1; IF %NEW THEN IF POS("P"=%OP_PARM$(292,5))<>0 THEN PRINT_FLAG_P$="Y" ! ssp 194815 SSP 227704 
27506 REFRESH_FLG=1; IF POS(FS1.ORDER_TYPE_1$="RW")<>0 AND POS("S"=%OP_PARM$(292,5))<>0 AND %NEW THEN PRINT_FLAG_S$="Y" ! SSP 227704
27508 IF ITEM_FLG THEN CALL "*WINGRP;DISABLE",FIELDS.GRP$
27510 IF FS1.QUOTE_FROM_LINES$="Y" THEN {
27515 CALL "*wingrp;Enable",QUOTE.GRP$
27550  } ELSE {! quote_from_lines$<>"Y"
27555 IF NUL(FS1.MASTER_QUOTE_PART_1$+FS1.MASTER_QUOTE_PART_2$) THEN QUOTE_DIV$=DIM(2),QUOTE_NUM$=DIM(6),QUOTE_LINE_NUM$=DIM(3); CALL "*wingrp;Disable",QUOTE.GRP$; GOTO IF1_ELSE_END
27579 IF1_ELSE_END:
27580  }
27585 IF FS1.RFQ_TYPE_QUOTATION$="Y" THEN QUOTE_CHAN=Z[5],%USE_FE5=0,%MASTER_QUOTE_QRY$="QRY_QSA.1,../QSG/QS.EN" ELSE QUOTE_CHAN=Z[15],%USE_FE5=1,%MASTER_QUOTE_QRY$="QRY_FE5,../FEG/FE.EN" ! ssp 193332
27590 _FIRST_TAB=PO_CODE.CTL,_LAST_TAB=PRINT_FLAG_P.CTL; IF ARG_1_FLAG THEN NEXT_ID=ORDER_LINE_NUM.CTL,ARG_1_FLAG=0; CALL "*wingrp;enable",KEY2.GRP$ ELSE NEXT_ID=PO_CODE.CTL
27591 _LAST_TAB=WZ_NEXT.CTL
27592 IF WIZARD_MODE THEN HIDE CONTROL WZ_DONE.CTL; HIDE CONTROL WZ_BACK.CTL; SHOW CONTROL WZ_CANCEL.CTL
27594 IF ARG_2$<>"NEW" AND NOT(NUL(ARG_2$)) THEN PO_CODE$=ARG_2$; CALL "*wingrp;disable",POCODE.GRP$
27595 ! IF NOT(NUL(ITEM_CODE$)) THEN CALL "*wingrp;Disable",FIELDS.GRP$
27598 RETURN 
27599 ! 
27600 POST_CUSTOM:! logic after Custom checkbox
27610 IF CUSTOM$<>"Y" AND LINE_TYPE$<>"C" THEN SPECS_REQ$="N",REFRESH_FLG=1 ELSE LINE_TYPE$=" ",%LINE_TYPE$=" ",REFRESH_FLG=1 ! SSP 229206 - ORIG TYPO
27620 IF %OP_PARM$(251,1)="Y" THEN IF PO_CODE$<>" " AND CUSTOM$="Y" THEN SPECIAL_SHIPPING$="Y"
27625 IF %SPEC_FLG$="Y" THEN SPECS_REQ$="N" ELSE SPECS_REQ$="Y"
27630 IF CUSTOM$="Y" THEN %SPEC_FLG$="Y" ELSE %SPEC_FLG$="N"
27650 ! IF PO_FLAG$="C" THEN SPEC_REQ$="N" ELSE SPECS_REQ$="Y",%SPEC_FLG$="Y" END_IF ; REFRESH_FLG=1
27660 GOSUB LOAD_LINE_TYPES
27662 GOSUB CHECK_SPEC; IF NO_SPEC=0 THEN SPECS_REQ$="Y",%SPEC_FLG$="N" ELSE SPECS_REQ$="N",%SPEC_FLG$="Y"
27663 IF STP(PO_CODE$)="" AND POS(LINE_TYPE$="I")<>0 THEN SPECS_REQ$="N",%SPEC_FLG$="Y",REFRESH_FLG=1 ! SSP 201618
27695 RETURN 
27699 ! 
27700 LOAD_LINE_TYPES:! Load line types based on parms, order type and PO_CODE$
27705 %LINE_TYPE_LIST$="",%LINE_TYPE_VALUES$=""
27710 IF NOT(NUL(PO_CODE$)) AND CUSTOM$="Y" THEN LINE_TYPE$=" " ELSE IF NUL(LINE_TYPE$) THEN IF FS1.ORDER_TYPE_1$="R" THEN LINE_TYPE$="C" ELSE LINE_TYPE$="C"; IF %OP_PARM$(280,1)="Y" AND FS1.ORDER_TYPE_3$="B" AND ORDER_LINE_NUM$<>"001" THEN LINE_TYPE$="S"
27715 IF %OP_PARM$(280,1)="Y" AND FS1.ORDER_TYPE_3$="B" AND FS1.JOB_COSTING$<>"Y" AND ORDER_LINE_NUM$<>"001" THEN DISABLE_CUSTOM=1,%LINE_TYPE_VALUES$="MS" ELSE IF POS(FS1.ORDER_TYPE_3$="BS")=0 AND NOT(NUL(PO_CODE$)) AND PO_FLAG$<>"C" THEN %LINE_TYPE_VALUES$=" IMSN" ELSE %LINE_TYPE_VALUES$=" CIMSN"
27718 IF POS(FS1.ORDER_TYPE_3$="BS")=0 AND NOT(NUL(PO_CODE$)) AND CUSTOM$<>"Y" THEN %LINE_TYPE_VALUES$=" IMSN" ! SSP 278826
27720 IF NUL(PO_CODE$) OR CUSTOM$<>"Y" THEN %LINE_TYPE_VALUES$=SUB(%LINE_TYPE_VALUES$," ","") ! LINE_TYPE$="I" ! blank is used for display only if PO_CODE$ is set, remove otherwise
27730 ! IF FS1.ORDER_TYPE_1$="R" THEN %LINE_TYPE_VALUES$=SUB(%LINE_TYPE_VALUES$,"S","") ! No special charges on Releases  SSP#253961
27732 IF FS1.ORDER_TYPE_1$="R" THEN %LINE_TYPE_VALUES$=SUB(%LINE_TYPE_VALUES$,"I","") ! No Stock Items on Releases
27734 IF FS1.ORDER_TYPE_1$="R" OR FS1.ORDER_TYPE_1$="W" THEN %LINE_TYPE_VALUES$=SUB(%LINE_TYPE_VALUES$,"N",""); IF FS1.ORDER_TYPE_1$="W" AND POS(%X3_COMP$="584585",3) AND %NEW THEN LINE_TYPE$="I" ELSE IF LINE_TYPE$="" THEN LINE_TYPE$="C" END_IF ; IF POS("P"=%OP_PARM$(292,5))<>0 AND %NEW THEN PRINT_FLAG_P$="Y"; IF POS("P"=PRINT_FLAGS$)=0 THEN PRINT_FLAGS$=PRINT_FLAGS$+"P" ! No Non-Stock Items on Releases or billable releases ssp 194815  SSP 227704
27740 IF SCRN_ID$="FMGODB.V7" THEN %LINE_TYPE_VALUES$=SUB(%LINE_TYPE_VALUES$,"N","") ! SP242299
27750 FOR II=1 TO LEN(%LINE_TYPE_VALUES$)
27760 %LINE_TYPE_LIST$+=MSG("LINE_TYP_"+STP(%LINE_TYPE_VALUES$(II,1)))+"|"
27770 NEXT II
27775 IF NOT(%OE_GRID) THEN IF LINE_TYPE.CTL<>0 THEN LINE_TYPE.CTL'TBL$=%LINE_TYPE_VALUES$ ! SSP208671
27780 IF NOT(%OE_GRID) THEN DROP_BOX LOAD LINE_TYPE.CTL,"",ERR=*NEXT; DROP_BOX LOAD LINE_TYPE.CTL,%LINE_TYPE_LIST$,ERR=*NEXT ! DMM - GETTING ERROR 65 IF IN WINDOWS! ssp208671
27782 IF NOT(%OE_GRID) THEN DROP_BOX WRITE LINE_TYPE.CTL,POS(LINE_TYPE$=%LINE_TYPE_VALUES$),ERR=*NEXT ! ssp208671
27785 REFRESH_FLG=1; GOSUB GLOBAL_VARS
27795 RETURN 
27799 ! 
27800 POST_LINE_TYPE:! handle logic after operator sets line type
27805 DROP_BOX READ LINE_TYPE.CTL,LINE_TYPE_INDEX; LINE_TYPE$=MID(%LINE_TYPE_VALUES$,LINE_TYPE_INDEX,1) ! we have to get value and fix here because although we loaded the box, the values list in nomads for the drop box is the old one.
27808 PRE_LINE_TYPE:
27810 IF LINE_TYPE$<>"C" THEN CUST_DIV$=DIM(2),CUST_CODE$=DIM(8)
27815 IF LINE_TYPE$="M" THEN {
27816 CUSTOM$="N"
27817 LINE_ITEM_DISC_PRCNT=0
27820  } ELSE {
27825 COMM_PARM$=PAD(PO_CODE$,1,1)+PAD(LINE_TYPE$,1,1)+%X3_COMP$+PAD(COMM_CODE$,5,1)
27830 CALL "AR2COM","DEFAULT",COMM_PARM$,A{ALL},Z[13],0,0
27834 COMM_CODE$=COMM_PARM$
27835 IF %MSLC THEN GOSUB MULTI_COMM_KEY; CALL "AR2MCM","DEFAULT",COMM_PARM$,A{ALL},Z[13],0,0,0,SC_KEY$,0 ! SSP 225300
27836  } ! SSP 225300
27838 IF LINE_TYPE$="S" OR LINE_TYPE$="M" OR LINE_TYPE$="N" THEN SPECS_REQ$="N"; REFRESH_FLG=1 ! SSP219344 jdf
27840 GOSUB SET_GLOBAL_VARS
27841 IF NOT(%OE_GRID) THEN DROP_BOX WRITE LINE_TYPE.CTL,POS(LINE_TYPE$=%LINE_TYPE_VALUES$),ERR=*NEXT ! ssp208671
27845 RETURN 
27849 ! 
27850 POST_CIC_CODE:
27853 CIC_CODE$=PAD(CIC_CODE$,20)
27855 CALL "*wingrp;hide",CIC.GRP$
27860 READ (Z[3],KNO=3,KEY=CUSTOMER$+CIC_CODE$,DOM=*NEXT)
27862 KEY_3$=KEY(Z[3],END=CIC_END)
27864 IF KEY_3$(1,30)<>CUSTOMER$+CIC_CODE$ THEN GOTO CIC_NOT_FOUND
27865 ! CIC_FLG$="N"
27866 READ (Z[3],KEY=KEY_3$)
27870 CIC_FLG$="N"; CIC_CODE$=""; RO_DATE$="" ! ITEM_CODE$=CIC_CODE$,CIC_CODE$=""
27871 READ (Z[3],KNO=0,KEY="",DOM=*NEXT)
27872 REFRESH_FLG=1 ! GOTO ITEM_CODE_DEFAULTS!SSP#290903 doing item code def twice for CIC once here once POST_ITEM_CODE
27873 IF NOT(NUL(SRC_CUST_CODE$)) THEN %CUST_KEY$=SRC_CUST_DIV$+SRC_CUST_CODE$; %FROM_SRC=1,%SP_CUST$=%CUST_KEY$ ! SSP 306930
27874 RETURN 
27875 CIC_END:
27877 READ (Z[3],KNO=0,KEY="",DOM=*NEXT)
27879 RETURN 
27880 CIC_NOT_FOUND:
27882 MSGBOX MSG("INVALID_C"),MSG("FYI"),"STOP"
27884 CIC_CODE$=""; NEXT_ID=CIC_CODE.CTL; CALL "*wingrp;Show",CIC.GRP$
27886 READ (Z[3],KNO=0,KEY="",DOM=*NEXT)
27888 REFRESH_FLG=1
27895 RETURN 
27899 ! 
27900 SETUP_FORM_FROM_EQ:! If quotation & EQ type quotation then see if form is there, if not then setup
27905 FIND (Z[3],KEY=%CUST_KEY$+ITEM_CODE$,DOM=*NEXT); GOTO *RETURN
27910 FM1_IOLIST:IOLIST C$,C[0],C[1],C[2],C[3],C[4],C[5],C[6],C[7],C[8],C[9],C[10],C[11],C[12],C[13],C[14],C[15],C[16],C[17],C[18],C[19],C[20],C[21],C[22],C[23],C[24],C[25],C[26],C[27],C[28],C[29],C[30],C[31]
27915 DIM C[31],C$(448)
27920 C$(1,20)=%CUST_KEY$+ITEM_CODE$,C$(21,61)=PROD_CODE$+LEFT_RIGHT$+TOP_BOTTOM$+PLYS$+TF_DESC$,C$(82,14)=VEND_DIV$+VEND_CODE$+PLANT_CODE$,C$(96,4)=COST_UM$,C$(100,4)=SELL_UM$,C[2]=COST_QTY_PER,C[4]=QTY_IN_SELL_UM
27925 WRITE (Z[3],KEY=C$(1,20),DOM=*RETURN)IOL=FM1_IOLIST
27930 WRITE (Z[18],KEY=C$(21,3)+C$(24,16)+C$(40,2)+C$(11,10)+C$(1,10))
27945 RETURN 
27949 ! 
27950 VENDOR_ITEM_NUMBER_QUERY:! Do Query by Vendor Item Number
27955 PROCESS "QRY_ICD","../ICG/IC.EN",ICD$
27960 IF LEN(ICD$)<54 THEN NEXT_ID=ITEM_CODE.CTL; RETURN 
27965 FIND (Z[4],KEY=%CUST_KEY$+ICD$(45,10),DOM=*NEXT); GOTO ICD_OK
27970 NEXT_ID=ITEM_CODE.CTL; RETURN 
27975 ICD_OK:
27980 ITEM_CODE$=ICD$(45,10),NEXT_ID=TF_DESC.CTL
27985 GOTO ITEM_CODE_DEFAULTS
27995 RETURN 
27999 ! 
28000 POST_ITEM_CODE:! Check form master and override I type if needed, nothing to do for S type
28001 IF %FROM_SRC AND (STP(PO_CODE$)="") THEN CUSTOMER$=%CUST_KEY$; CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$; CUSTOMER.CTL'VALUE$=FN%ZZDISP$(CUSTOMER$,"A/R"),%QRY_CUSTOMER$=CUSTOMER$; GOSUB GET_CUST_NAME; %REST_FROM_SRC=1,REFRESH_FLG=1,%FROM_SRC=0 ! SSP 195084  ! SSP204068 jdf
28002 IF NOT(%OE_GRID) THEN IF (FS1.ORDER_TYPE_1$=" " OR FS1.ORDER_TYPE_1$="W") AND LINE_TYPE$="C" AND STP(ITEM_CODE$,3," ")="" THEN ENABLE CONTROL CUSTOMER.CTL; NEXT_ID=CUSTOMER.CTL; RETURN ! ssp208671
28004 IF NOT(%OE_GRID) THEN IF _EOM$=$00$ AND QRY_VAL$="" THEN RETURN ELSE IF STP(ITEM_CODE$)="" THEN NEXT_ID=_FIRST_FIELD.CTL; EXIT ! ssp208671
28006 IF NOT(%OE_GRID) THEN IF %NO_ITEM THEN %NO_ITEM=0; NEXT_ID=ITEM_CODE.CTL; RETURN ELSE FM1.PRICE=0; FM1.TF_COST=0 ! SSP208671
28008 IF NOT(%OE_GRID) THEN IF LINE_TYPE$="S" THEN ENABLE CONTROL PROD_CODE.CTL ! ssp208671
28010 IF LINE_TYPE$="S" OR LINE_TYPE$="N" THEN GOTO ITEM_CODE_DEFAULTS ! Nothing to do for S type
28012 IF NUL(CUST_DIV$+CUST_CODE$) THEN FROM_CUST$=FS1.CUST_DIV$+FS1.CUST_CODE$ ELSE FROM_CUST$=CUST_DIV$+CUST_CODE$
28014 FM1.PRICE=0; FM1.TF_COST=0
28016 ! IF FM1.NUMBERING$="Y" THEN ENABLE CONTROL STARTING_NUM.CTL; STARTING_NUM$=ENDING_NUM$; REFRESH_FLG=1
28018 AFTER_ITEM_CHECK:
28020 CONTRACT$="Y"; IF %OP_PARM$(304,1)="Y" AND FM1.DIST_ITEM$="Y" AND NOT(NUL(FM1.CONTRACT_EXPIRE$)) AND FM1.CONTRACT_EXPIRE$<%X3_MACH_DATE$ THEN CONTRACT$="N"; MSGBOX MSG("FMGODB_41"),MSG("MB_ATTN"),"!"
28030 IF LINE_TYPE$="I" AND MID(%IC_PARM$,50,1)="Y" THEN FIXED_PRICE$="N" ELSE FIXED_PRICE$="Y" ! SSP#258392
28032 IF NOT(%NEW) THEN GOTO 28040 ! SSP 276772
28035 IF %OP_PARM$(184,1)="Y" OR LINE_TYPE$="C" THEN FF$=PAD(FS1.CUST_DIV$+FS1.CUST_CODE$+FM1.PROD_CODE$+CUST_DIV$+CUST_CODE$+ITEM_CODE$,34,1); IF MFF_PARM THEN CALL "FS2MFF",%X3$,%X4$,FF$,FF,ORDER$+ORDER_LINE_NUM$; GOTO 28040 ELSE CALL "FS2DAF",%X3$,%X4$,FF$,FF; IF FF$>"" THEN FIND_FEE$=FF$(11,1),FIND_FEE_VEND_DIV$=FF$(1,2),FIND_FEE_VEND_CODE$=FF$(3,8),FIND_FEE_PRCNT=FF; REM SSP 199045 SSP 276772  
28037 CALL "ZZWLKU;PARSE_VEND",FIND_FEE_VENDOR$,FIND_FEE_VEND_DIV$,FIND_FEE_VEND_CODE$; REM SSP 199045
28040 GOTO ITEM_CODE_DEFAULTS ! Finish up
28045 REFRESH_FLG=1; RETURN 
28049 ! 
28095 RETURN 
28099 ! 
28100 CHECK_AP_MESSAGE:! ^100,5 - Check for vendor entry in AP8
28105 IF LAST_AP8$=VEND_DIV$+VEND_CODE$ THEN RETURN 
28110 DIM AP8$:IOL(Z[23]); FIND (Z[23],KEY=VEND_DIV$+VEND_CODE$,DOM=*RETURN,REC=AP8$)
28115 IF NUL(AP8.VEND_OE_MESS_1$+AP8.VEND_OE_MESS_2$) THEN RETURN 
28120 LAST_AP8$=VEND_DIV$+VEND_CODE$ ! Save off so we don't repeat message
28125 MSGBOX STP(AP8.VEND_OE_MESS_1$,2)+SEP+STP(AP8.VEND_OE_MESS_2$,2),MSG("IMP_MSG"),""
28130 RETURN 
28135 ! 
28150 CHECK_CSTM_ITEM_LINE_TYPE:! Make sure we have a value here
28160 IF CUSTOM$="Y" AND NUL(CSTM_ITEM_LINE_TYPE$) THEN MSGBOX MSG("FMGODB_49"),MSG("MB_ATTN"),"!"; NEXT_ID=CSTM_ITEM_LINE_TYPE.CTL; EXIT 
28195 RETURN 
28199 ! 
28200 SETUP_NEW_ITEM:! Ask if need to setup new item
28205 IF CUSTOM$="Y" OR LINE_TYPE$=" " THEN GOTO *NEXT ELSE GOTO AFTER_ITEM_CHECK
28210 MSGBOX MSG("FMGODB_50"),MSG("FMGODB_51"),"?,YESNO",_YESNO$; IF _YESNO$<>"YES" THEN ITEM_CODE$=DIM(10),REFRESH_FLG=1,NEXT_ID=ITEM_CODE.CTL; EXIT 
28220 IF NOT(NUL(CIC_CODE$)) THEN USED$="",CIC_ITEM$="",TF_ITEM$=""; CALL "FS2DAK",%X3$,%X4$,2,CUST_DIV$+CUST_CODE$+ITEM_CODE$,USED$,CIC_ITEM$,TF_ITEM$; IF USED$="Y" THEN MSGBOX MSG("FMGODB_52",STP(TF_ITEM$,1),STP(CIC_ITEM$,1)),MSG("MB_ATTN"),"!"; NEXT_ID=CIC_CODE.CTL; EXIT 
28230 IF CUSTOM$="Y" THEN {! Copy from another customer?
28235 CALL "FMGOBA",CUST_DIV$+CUST_CODE$,ITEM_CODE$,ACTION$
28240 IF ACTION$="DONE" THEN GOTO *NEXT ELSE IF ACTION$="SKIP" THEN %CUSTOMER$=CUST_DIV$+CUST_CODE$,%ITEM_CODE$=ITEM_CODE$; CALL "FMGIAB"; GOTO *NEXT ELSE ITEM_CODE$=DIM(10),REFRESH_FLG=1,NEXT_ID=CIC_CODE.CTL; EXIT 
28260  }
28295 GOTO POST_ITEM_CODE
28299 ! 
28300 CHECK_REORDER_DATE:! Verify reorder date is less than order date
28320 IF NOT(NUL(RO_DATE$)) AND RO_DATE$<FS1.ORDER_DATE$ THEN MSGBOX MSG("FMGODB_53",FN%FMT_TFDATE$(FS1.ORDER_DATE$,DAY_FORMAT$)),MSG("MB_ATTN"),"!"; NEXT_ID=RO_DATE.CTL; EXIT 
28345 RETURN 
28349 ! 
28350 WHSE_SUB:! Substitute whse based on division
28355 DIM FSH$:IOL(Z[24]); FIND (Z[24],KEY=ORDER_DIV$,DOM=*NEXT,REC=FSH$)
28360 IF NUM(MID(FSH.ALT_ORD_SEQ_10$,1,3),ERR=*NEXT)>0 THEN IF LINE_TYPE$="C" THEN DEFAULT_WHSE$="9"+MID(FSH.ALT_ORD_SEQ_10$,1,3) ELSE DEFAULT_WHSE$="0"+MID(FSH.ALT_ORD_SEQ_10$,1,3)
28395 RETURN 
28399 ! 
28400 SETUP_WHSE:! Setup whse as needed
28402 DISABLE_PRICE_COST=0 ! SSP 224626
28405 IF NOT(NUL(PO_CODE$)) AND POS("P"=PRINT_FLAGS$)<>0 THEN WHSE_FOR_PACK_LIST=1 ELSE WHSE_FOR_PACK_LIST=0 END_IF ; IF POS(LINE_TYPE$="MS")>0 AND POS("P"=PRINT_FLAGS$)=0 OR (POS("P"=PRINT_FLAGS$)=0 AND NOT(NUL(PO_CODE$))) THEN GOTO *RETURN
28407 OLD_WHSE$=WHSE$
28410 IF NOT(%OE_GRID) THEN IF LINE_TYPE$="M" THEN CALL "*wingrp;show",MESSAGE_WHSE.GRP$; CALL "*wingrp;Enable",M_WHSE.GRP$ ELSE CALL "*wingrp;show",WHSE.GRP$ ! ssp208671
28415 %WHSE_UA$="",DEFAULT_WHSE$=DIM(4)
28420 IF FS1.WORK_ORDER$="Y" THEN {
28425 %WHSE_UA$=MSG("FMGODB_55"); IF LINE_TYPE$="N" THEN CALL "*wingrp;show",MATERIAL_COST.GRP$
28430 IF LINE_TYPE$="C" THEN DEFAULT_WHSE$="9002" ELSE DEFAULT_WHSE$="0002"
28435  } ELSE {
28440 IF LINE_TYPE$<>"I" THEN %WHSE_UA$=MSG("FMGODB_56") ELSE %WHSE_UA$=MSG("FMGODB_57")
28445 IF LINE_TYPE$="M" THEN %WHSE_UA$+=MSG("FMGODB_58")
28450 IF %OP_PARM$(153,1)="Y" THEN GOSUB WHSE_SUB
28455 IF LINE_TYPE$="C" AND FS1.ORDER_TYPE_1$<>"W" THEN CALL "FMGODA;GET_WHRE_9",ORDER_DIV$,DEFAULT_WHSE$ ELSE CALL "FMGODA;GET_WHRE_1",ORDER_DIV$,DEFAULT_WHSE$
28460  }
28462 IF NOT(NUL(PO_CODE$)) AND POS("P"=PRINT_FLAGS$)<>0 THEN %WHSE_UA$=MSG("FMGODB_97"); IF NUL(WHSE_CODE_PKLIST$) OR TOPS_ITEM_CHECK$="1" THEN WHSE$="DS"+DIM(2) ! WHSE_CODE_PKLIST$=DEFAULT_WHSE$; !SSP 238043
28463 IF %NEW=1 OR NUL(WHSE$) THEN IF FS1.ORDER_TYPE_1$="W" AND LINE_TYPE$="I" AND %OP_PARM$(282,1)="Y" THEN CALL "FM2OLW",%X3$,%X4$,DIM(10)+ITEM_CODE$,WHERE$; IF STP(WHERE$)<>"" THEN WHSE$=WHERE$,%LAST_WHSE$=WHERE$ ! SSP 191008 / SSP 198296 !SSP#263914
28464 IF NUL(WHSE$) AND %OP_PARM$(282,1)="Y" THEN CALL "FM2OLW",X3$,X4$,CUSTOMER$+ITEM_CODE$,WHSE$; IF FS1.ORDER_TYPE_1$="R" AND NOT(NUL(WHSE$)) THEN WHSE$(1,1)="9" END_IF ; %LAST_WHSE$=WHSE$ ! SSP#263914
28465 IF NUL(WHSE$) OR WHSE$=DIM(4) THEN WHSE$=DEFAULT_WHSE$; GOSUB WHSE_OK ! SSP208671
28470 IF NOT(NUL(PO_CODE$)) AND LINE_TYPE$="M" AND POS("P"=PRINT_FLAGS$)<>0 THEN CHK_PO_CODE$=PO_CODE$,CHK_ORDER$=ORDER$; CALL "UPDFS2;GET_PO_WHSE",ERR=*NEXT,CHK_ORDER$,CHK_PO_CODE$,PO_WHSE$,FOUNDFS2PO; IF FOUNDFS2PO THEN WHSE$=PO_WHSE$
28485 REFRESH_FLG=1
28487 ! IF %NEW=1 THEN IF FS1.ORDER_TYPE_1$="W" AND LINE_TYPE$="I" AND %OP_PARM$(282,1)="Y" THEN CALL "FM2OLW",%X3$,%X4$,DIM(10)+ITEM_CODE$,WHERE$; IF STP(WHERE$)<>"" THEN WHSE$=WHERE$,%LAST_WHSE$=WHERE$ ! SSP 191008 / SSP 198296 !SSP#263914
28488 ! IF FS1.ORDER_TYPE_1$="W" AND LINE_TYPE$="I" AND %OP_PARM$(282,1)="Y" THEN CALL "FM2OLW",%X4$,%X4$,DIM(10)+ITEM_CODE$,WHERE$; IF STP(WHERE$)<>"" THEN WHSE$=WHERE$ ! SSP 191008
28495 RETURN 
28499 ! 
28500 POST_WHSE:! ^100 check whse entered
28502 BAD_WHSE=0 ! SSP208671
28503 ! IF _EOM$=$00$ THEN RETURN ; REM "remmed out line under SSP 221727 jdf
28505 REFRESH_FLG=1
28510 IF STP(WHSE$,3)="DS" AND LINE_TYPE$="M" THEN WHSE$="DS  "; GOTO WHSE_OK
28515 IF NOT(NUL(PO_CODE$)) AND LINE_TYPE$="M" AND POS("P"=PRINT_FLAGS$)<>0 THEN IF STP(WHSE$)<>"DS" AND STP(WHSE$)<>"" THEN WHSE_CODE_PKLIST$=WHSE$,WHSE$="DS  " ! SSP262159 !SSP#267380
28520 ! IF POS(%X3_COMP$="491505506507377546552562563092537629101288130644",3)=0 THEN IF NOT(NUL(%X3$(333,2))) THEN WHSE$=MID(WHSE$,1,1)+"0"+%X3$(333,2) ! SSP#286885!ssp#307292 DBSPT-94483!SSP#307330 DBSPT-110365 SSP307430-DBD-333-DBSPT-149880!SSP#307462 DBD-421
28521 IF MID(%OP_PARM$,348,1)<>"Y" THEN IF NOT(NUL(%X3$(333,2))) THEN WHSE$=MID(WHSE$,1,1)+"0"+%X3$(333,2) ! SSP#286885!ssp#307292 DBSPT-94483!SSP#307330 DBSPT-110365 SSP307430-DBD-333-DBSPT-149880!SSP#307462 DBD-421 SSP307463 DBD-422
28522 IF LINE_TYPE$="I" AND WHSE$>"8999" THEN MSGBOX MSG("FMGODB_59"),MSG("MB_ATTN"),"!"; GOTO WHSE_BAD ! ssp 238561
28524 IF FS1.ORDER_TYPE_1$="R" AND WHSE$<"9000" THEN MSGBOX MSG("FMGODB_77"),MSG("MB_ATTN"),"!"; GOTO WHSE_BAD ! ssp 238561
28525 IF POS(LINE_TYPE$="IC")=0 THEN GOTO *NEXT ELSE READ DATA FROM "" TO IC1$; FIND (Z[26],KEY=%CUST_KEY$+ITEM_CODE$+WHSE$,DOM=WHSE_INVENTORY,REC=IC1$)
28528 DISABLE_PRICE_COST=0; IF MID(WHSE$,1,1)="9" AND LINE_TYPE$<>"S" THEN DISABLE_PRICE_COST=1,UNIT_SELL_PRICE=0,UNIT_SELL_PRICE$="0",UNIT_COST=0,UNIT_COST$="0" ! SSP 224626
28529 IF NOT(%OE_GRID) THEN IF MID(WHSE$,1,1)="9" AND LINE_TYPE$<>"S" THEN CALL "*WINGRP;DISABLE",PRICE_COST.GRP$,DISABLE_PRICE_COST=1 ELSE IF (FS1.ORDER_TYPE$="W" OR FS1.ORDER_TYPE_1$=" ") AND MID(WHSE$,1,1)<>"9" THEN CALL "*WINGRP;DISABLE",PRICE_COST.GRP$; CALL "*WINGRP;ENABLE",PRICE.GRP$ ! ssp208671 !SSP#253961
28530 IF NOT(%OE_GRID) THEN IF MID(WHSE$,1,1)="9" AND LINE_TYPE$<>"S" THEN CALL "*WINGRP;DISABLE",PRICE_COST.GRP$; DISABLE_PRICE_COST=0 ! 224626!SSP#253961
28532 IF FS1.WORK_ORDER$="Y" AND MID(WHSE$,-1)<>"2" THEN MSGBOX MSG("FMGODB_60"),MSG("MB_ATTN"),"!"; GOTO WHSE_BAD
28535 IF NUL(WHSE$) THEN IF POS(LINE_TYPE$="NM")<>0 OR (LINE_TYPE$="S" AND NUL(PO_CODE$)) THEN GOTO WHSE_OK ELSE GOTO WHSE_BAD ! SSP 226947
28570 WHSE_OK:
28575 READ DATA FROM "" TO IC1$; FIND (Z[26],KEY=PAD(CUST_DIV$,2,1)+PAD(CUST_CODE$,8,1)+ITEM_CODE$+WHSE$,DOM=*NEXT,REC=IC1$)
28580 IF NOT(%OE_GRID) THEN IF WHSE$<>OLD_WHSE$ AND POS(LINE_TYPE$="NMS")=0 THEN GOSUB ADJUST_COST ! SSP208671 !SSP#253961
28581 IF %OE_GRID AND POS(LINE_TYPE$="NM")=0 THEN GOSUB ADJUST_COST ! SSP208671
28583 ! F NOT(%OE_GRID) THEN IF DISABLE_PRICE_COST THEN CALL "*WINGRP;DISABLE",PRICE_COST.GRP$ ELSE CALL "*WINGRP;DISABLE",PRICE_COST.GRP$; CALL "*WINGRP;ENABLE",PRICE.GRP$ ! ssp208671
28585 GOSUB DISPLAY_AVAILABLE
28587 IF STP(LINE_TYPE$)="M" THEN NEXT_ID=WZ_FINISH.CTL
28590 RETURN 
28595 WHSE_BAD:! SSP208671
28596 BAD_WHSE=1; IF %OE_GRID THEN EXIT ELSE NEXT_ID=WHSE.CTL; EXIT ! ssp208671
28599 ! 
28600 DISPLAY_AVAILABLE:! ^100 Display available inventory - assumes IC1 may not be correct
28605 ON_HAND=0,TF_COMMITTED=0,AVAILABLE=0,ON_PO=0,POSSIBLE=0,REFRESH_FLG=1
28615 READ DATA FROM "" TO IC1$; FIND (Z[26],KEY=FN_CUST_PART$+ITEM_CODE$+WHSE$,DOM=*NEXT,REC=IC1$)
28620 ON_HAND=FN%QTY_IN_UM(IC1.BEG_BAL+IC1.RECEIPTS-IC1.SALES+IC1.ADJUSTMENTS,SELL_UM$,NUM(QTY_IN_SELL_UM$,ERR=*NEXT),ERR=*NEXT)
28625 IF FS1.WORK_ORDER$="Y" THEN T3=IC1.TF_COMMITTED*1.15 ELSE T3=IC1.TF_COMMITTED
28630 TF_COMMITTED=FN%QTY_IN_UM(T3,SELL_UM$,NUM(QTY_IN_SELL_UM$,ERR=*NEXT),ERR=*NEXT)
28635 AVAILABLE=ON_HAND-TF_COMMITTED
28640 ON_PO=FN%QTY_IN_UM(IC1.ON_PO,SELL_UM$,NUM(QTY_IN_SELL_UM$,ERR=*NEXT),ERR=*NEXT)
28645 POSSIBLE=AVAILABLE+ON_PO
28685 DA_END: ON_HAND$=STR(ON_HAND),TF_COMMITTED$=STR(TF_COMMITTED),AVAILABLE$=STR(AVAILABLE),ON_PO$=STR(ON_PO),POSSIBLE$=STR(POSSIBLE); REFRESH_FLG=1
28695 RETURN 
28699 ! 
28700 ADJUST_COST:! ^100 if whse changes adjust cost  - assumes IC1 correct
28705 DIM IC1$:IOL(Z[26]); FIND (Z[26],KEY=FN_CUST_PART$+ITEM_CODE$+WHSE$,DOM=*NEXT,REC=IC1$)
28715 IF IC1.AVG_COST<>0 THEN UNIT_COST=IC1.AVG_COST; IF FS1.WORK_ORDER$="Y" THEN IF POS(LINE_TYPE$="IC")>0 AND MID(WHSE$,1,1)<"9" AND COST_QTY_PER<>0 THEN UNBILL_SHIP_UNIT_CST=UNIT_COST*1000/COST_QTY_PER
28725 IF LINE_TYPE$="C" AND MID(WHSE$,1,1)="9" THEN UNIT_COST=0,COST_EXT=0,SELL_PRICE_EXT=0,UNIT_LIST_PRICE=0,LINE_ITEM_DISC_PRCNT=0; IF FS1.WORK_ORDER$<>"Y" THEN UNIT_SELL_PRICE=0
28730 IF LINE_TYPE$="C" AND MID(WHSE$,1,1)<>"9" THEN UNIT_SELL_PRICE=FM1.PRICE,UNIT_LIST_PRICE=FM1.PRICE,LINE_ITEM_DISC_PRCNT=FS1.LINE_ITEM_DISC_PRCNT
28733 IF LINE_TYPE$="I" AND STP(MASTER_ITEM_LINE_NUM$)="" THEN UNIT_SELL_PRICE=IC0.BASE_PRICE,UNIT_LIST_PRICE=IC0.BASE_PRICE,LINE_ITEM_DISC_PRCNT=FS1.LINE_ITEM_DISC_PRCNT,UNIT_SELL_PRICE=UNIT_LIST_PRICE-(UNIT_LIST_PRICE*LINE_ITEM_DISC_PRCNT*.01) ! SSP#285794
28785 GOSUB NUM_TO_STR; GOSUB CALCULATIONS
28795 RETURN 
28799 ! 
28800 PRE_SELL_QTY:! ^100
28805 PRIOR_OPEN_QTY=OPEN_QTY
28810 NEED_TO_DO_LOTS=1
28815 INV_AVAIL_CHECK=1 ! SSP 197125
28820 %LOT_MANUAL=0
28830 IF NOT(NUL(QUOTE_LINE_NUM$)) OR POS(LINE_TYPE$="IC")<>0 THEN GOSUB 48700
28895 RETURN 
28899 ! 
28900 POST_CARTON_PACK:! After carton pack SSP 307477 (28900-28945)
28910 NUM_OF_CTN_LBL_PRNT=0,NUM_OF_CART_LBLS_2=0
28915 IF MID(PRODUCT_CODE$,22,1)="N" THEN GOTO POST_CARTON_PACK_EXIT
28920 IF MID(%OP_PARM$,349,1)="Y" THEN IF CTN_PACK=0 THEN NUM_OF_CTN_LBL_PRNT=1; GOTO POST_CARTON_PACK_EXIT
28925 IF CTN_PACK<>0 THEN NUM_OF_CTN_LBL_PRNT=INT(OPEN_QTY/CTN_PACK*1.1+.9); IF NUM_OF_CTN_LBL_PRNT<0 THEN NUM_OF_CTN_LBL_PRNT=0
28935 POST_CARTON_PACK_EXIT:
28940 GOSUB NUM_TO_STR
28945 RETURN 
28949 ! 
28950 LOAD_FORMAT_DROP_BOXES:! Load the format drop boxes
28955 FINDEX=0,F1INDEX=0,F2INDEX=0; DROP_BOX LOAD CTN_LBL_FORMAT_CD.CTL,"",ERR=*PROCEED; IF %OP_PARM$(252,1)="Y" THEN DROP_BOX LOAD CTN_LBL_CODE_2ND.CTL,"",ERR=*NEXT
28960 SELECT FORMAT$ FROM "ZZPARM" BEGIN "FORMATCL " END "FORMATCL~"
28965 FCODE$=MID(FORMAT$,9,1),FDESC$=STP(MID(FORMAT$,10,30),2)
28970 DROP_BOX LOAD CTN_LBL_FORMAT_CD.CTL,++FINDEX,FCODE$+" - "+FDESC$,ERR=*NEXT
28972 IF FCODE$=CTN_LBL_FORMAT_CD$ THEN F1INDEX=FINDEX
28975 IF %OP_PARM$(252,1)="Y" THEN DROP_BOX LOAD CTN_LBL_CODE_2ND.CTL,FINDEX,FCODE$+" - "+FDESC$,ERR=*PROCEED; IF FCODE$=CTN_LBL_CODE_2ND$ THEN F2INDEX=FINDEX
28980 NEXT RECORD 
28985 IF F1INDEX THEN DROP_BOX WRITE CTN_LBL_FORMAT_CD.CTL,F1INDEX,ERR=*NEXT
28986 IF F2INDEX THEN DROP_BOX WRITE CTN_LBL_CODE_2ND.CTL,F2INDEX,ERR=*NEXT
28995 RETURN 
28999 ! 
29000 END_OF_LINE_TASKS:! ^100 things needed as we are exiting line
29010 EXSIST_PO=0; GOSUB CHECK_FOR_PO; IF EXSIST_PO THEN GOTO 29040
29015 IF ORDER_LINE_COMPLETE$="Y" THEN GOTO 29040 ! SSP 198828 204200           
29018 IF %CLOSE_PO1<>0 THEN %CLOSE_PO1=0 ! SSP 204200                           
29020 IF NOT(NUL(PO_CODE$)) THEN {
29024 %SALES_ORDER_PREFIX$=""; OLD_ORDER$=ORDER$; OLD_PO_CODE$=PO_CODE$
29025 CALL "PO2MAA",%X3$,%X4$,"GOE",PAD(ORDER_DIV$+ORDER_NUM$,8)+PAD(ORDER_LINE_NUM$,3)+PAD(FM1.PREV_JOB_NUM$+FM1.PREV_JOB_NUM_DATE$,18)+PAD(CSTM_ITEM_LINE_TYPE$,1)+DIM(10)
29028 SVE_VENDOR$=VENDOR$ ! SSP 217566
29030 %PO_NUM$=ORDER_DIV$+ORDER_NUM$+PO_CODE$,%FROM_FMGODB=1,%ORDER_NUM_PO$=ORDER_DIV$+ORDER_NUM$+ORDER_LINE_NUM$; IF %CLOSE_PO1=0 THEN PROCESS "POGMAA.OR","../POG/PO.EN"; %FROM_FMGODB=0 ELSE %FROM_FMGODB=0 ! ssp 198828
29032 IF %OE_GRID THEN VENDOR$=%VENDOR$; GOSUB GET_VEND_NAME; IF SVE_VENDOR$<>VENDOR$ THEN GOSUB VENDOR_COMM ! SSP208671 SSP 217566
29035  }
29040 IF %OE_GRID THEN GOTO *RETURN ! SSP208671
29045 GOSUB MODIFY_SPECS ! SSP208671
29060 IF ARG_4$="ADD" THEN FM2ODZ_CMD=1; GOSUB DO_FM2ODZ
29070 CALL "UPDFS1;READBYKEY",0,0,ORDER_DIV$+ORDER_NUM$,"","","","",FS1_REC$,FS1_REC{ALL},DD; IF POS(LINE_TYPE$=" IC")>0 AND FN%HAS_MODULE("EC")>0 THEN CALL "FM2OBD",%X3$,%X4$,_KEY$,FS1_REC$,1; READ (Z(1),KEY=_KEY$) ! SSP 202907
29095 RETURN 
29099 ! 
29100 MODIFY_SPECS:! Handle whether we do specs
29103 IF MID(PRODUCT_CODE$,1,4)<>"T"+PROD_CODE$ THEN DIM PRODUCT_CODE$(100); FIND (Z[9],KEY="T"+PROD_CODE$,DOM=*NEXT)PRODUCT_CODE$ ! 187593 - Make sure we have the correct product because we make decisions based on it
29104 %CUSTOMER$=CUST_DIV$+CUST_CODE$,_CUSTOMER$=%CUSTOMER$; %ITEM_CODE$=ITEM_CODE$,_ITEM_CODE$=%ITEM_CODE$
29105 SWITCH SPECS_REQ$
29110 CASE "Y"
29115 IF NOT(%OE_GRID) THEN %SPEC_PROMPT$=STP(ITEM_CODE$,1)+"-"+STP(TF_DESC$,1); PROCESS "FMGOB6","" ! SSP208671
29120 SWITCH %SPEC_ANSWER$
29125 CASE "C"; CALL "FMGIAW",ERR=*PROCEED; BREAK
29130 CASE "M"
29131 IF MID(PRODUCT_CODE$,21,1)<>"Y" THEN CALL "FMGIAU",ERR=*NEXT; END_IF ; IF NOT(NUL(MID(PRODUCT_CODE$,33,3))) THEN CALL "FMGIAR",ERR=*NEXT ! SSP238825 jdf
29132 IF NOT(NUL(PLYS$)) THEN CALL "FMGIAS",ERR=*NEXT,_CUSTOMER$,_ITEM_CODE$
29133 ! IF NUL(MID(PRODUCT_CODE$,33,3)) THEN CALL "FMGIAU",ERR=*NEXT ELSE CALL "FMGIAR",ERR=*NEXT
29134 IF MID(PRODUCT_CODE$,50,1)<>"Y" THEN CALL "FMGIAW",ERR=*NEXT ! SSP188003
29140 END SWITCH 
29145 BREAK
29150 CASE "C"
29160 CALL "FMGIAW",ERR=*NEXT
29165 BREAK
29180 END SWITCH 
29185 %CUSTOMER$=CUST_DIV$+CUST_CODE$; %ITEM_CODE$=ITEM_CODE$
29195 RETURN 
29199 ! 
29200 ! ^100,5 - call FM2ODZ
29205 DO_FM2ODZ:
29210 DIM A[29]
29215 READ DATA FROM REC(IOL(_FIL_NO)) TO IOL=29240
29220 READ (_FIL_NO,KEY=_KEY$,DOM=*NEXT)IOL=29240
29223 B$=REC(IOL(Z[2]),REC=FS1$)
29224 IF FM2ODZ_CMD=-2 THEN IF NOT(NUL(MID(A$,9,1))) THEN %IN_FMGODM=1; CALL "FM2ODP",ERR=*PROCEED,(X3$),(A$); %IN_FMGODM=0
29225 CALL "FM2ODZ",X3$,FM2ODZ_CMD,A$,A{ALL},B$
29230 IF FM2ODZ_CMD<>-2 THEN WRITE (_FIL_NO,KEY=_KEY$)IOL=29240
29235 RETURN 
29240 IOLIST A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15],A[16],A[17],A[18],A[19],A[20],A[21],A[22],A[23],A[24],A[25],A[26],A[27],A[28],A[29]
29245 ! 
29249 ! *******************************************************
29300 CAN_WE_DELETE:! Check to see if delete is ok
29301 LINEMSG$="Order line "+FN%ZZDISP$(MID(_KEY$,1,8),"O/P")+": "+MID(_KEY$,9,3)+" - "
29305 CANT_DELETE=0
29308 DIM A[29]
29309 READ DATA FROM REC(IOL(_FIL_NO)) TO IOL=29240
29310 READ (_FIL_NO,KEY=_KEY$,DOM=*NEXT)IOL=29240
29312 B$=REC(IOL(Z[2]),REC=FS1$)
29315 IF MID(B$,1,1)<>" " AND MID(%OP_SECURITY$,54,1)="Y" THEN MSGBOX LINEMSG$+MSG("FMGODB_92"),MSG("MB_ATTN"),"!"; CANT_DELETE=1; GOTO DELETE_CHECKS_DONE
29320 IF A[19]<>0 THEN {
29325 MSGBOX LINEMSG$+MSG("FMGODB_93",STR(A[19]:"###,###.00-")),MSG("MB_ATTN"),"!"
29330 IF POS(MID(X3$,9,3)="491080568589321020288101603084500")<>0 THEN {
29333 PROCESS "PASSWORD","../ZZG/ZZ.EN",PASS$; IF POS(%C$="080568589",3)<>0 AND PASS$<>"4MONKEY" THEN CANT_DELETE=1 ELSE IF PASS$<>"DONN" THEN CANT_DELETE=1 END_IF ; GOTO DELETE_CHECKS_DONE ! SSP#245964
29335  } ELSE {
29337 CANT_DELETE=1; GOTO DELETE_CHECKS_DONE
29338  }
29340  }
29345 IF MID(B$,241,1)="Y" THEN MSGBOX LINEMSG$+MSG("FMGODB_94"),MSG("MB_ATTN"),"!"; CANT_DELETE=1; GOTO DELETE_CHECKS_DONE
29350 IF A$(9,1)<>" " AND MID(%OP_SECURITY$,67,1)="Y" THEN {
29352 DIM POCF$(512); FIND (Z[10],KEY=A$(147,8)+A$(9,1),DOM=*NEXT)POCF$
29358 IF MID(POCF$,189,1)="P" THEN MSGBOX LINEMSG$+MSG("FMGODB_95",FN%ZZDISP$(A$(147,8)+A$(9,1),"P/O")),MSG("MB_ATTN"),"!"; CANT_DELETE=1; GOTO DELETE_CHECKS_DONE
29360  }
29390 DELETE_CHECKS_DONE:
29395 RETURN 
29399 ! ********************************************************
29400 VENDOR_COMM:! VENDOR COMMISSION CODE SUBSTITUTION SSP 217566
29405 IF NUL(PO_CODE$) OR STP(%AR1_PARM$(75,1),2)="" OR %AR1_PARM$(76,1)="Y" OR LINE_TYPE$="M" THEN RETURN ! SSP 217566, SSP 222237
29420 READ DATA FROM REC(IOL(_FIL_NO)) TO CFS2$ ! SSP 217566
29430 CC3$=""; CALL "AR2COM","VENDCOM",CC3$,A{ALL},0,0,0,CFS2$; COMM_CODE$=CC3$ ! SSP 217566 SSP 225300
29440 CC3$=""; IF %MSLC THEN CMKEY$="O"+ORDER$+FS1.CUST_DIV$+FS1.CUST_CODE$+ORDER_LINE_NUM$; CALL "AR2MCM","VENDCOM",CC3$,A{ALL},0,0,0,CMKEY$,0,CFS2$ ! SSP 225300
29490 RETURN ! SSP 217566
29499 ! 
29500 WHSE_INVENTORY:
29510 IF MID(WHSE$,1,1)="9" THEN MSGBOX MSG("FMGODB_I1")+SEP+SEP+MSG("FMGODB_I2"),MSG("WARNING"),"?,YESNO",_YESNO$; IF _YESNO$="YES" THEN DEL_REC=1; GOTO DELETE_REC ELSE GOTO WHSE_BAD
29530 IF MID(WHSE$,1,1)<>"9" THEN MSGBOX MSG("FMGODB_I3"),MSG("FYI"),"?,YESNO",_YESNO$; IF _YESNO$="YES" THEN GOTO *NEXT ELSE GOTO WHSE_INVENTORY_ALTERNATE ! *NEXT ELSE DEL_REC=1; GOTO DELETE_REC ;!SSP 307468
29590 RETURN 
29599 ! 
29600 WHSE_INVENTORY_ALTERNATE:! SSP 307468
29610 ! MSGBOX "WE ARE CHECKING ALTERNATE WHSES FOR THIS ITEM"
29615 %CUST$=%CUSTOMER$; %ITEM$=ITEM_CODE$
29620 VALIN$=""; PROCESS "QRY_IC1.2","../ICG/IC.EN",VALIN$ ! SSP 307316
29630 IF NOT(NUL(VALIN$)) THEN WHSE$=VALIN$; REFRESH_FLG=1; GOTO POST_WHSE ELSE DEL_REC=1; GOTO DELETE_REC
29695 RETURN 
29699 ! 
30000 DEF FN_CUST_PART$
30010 LOCAL CP$
30015 DIM CP$(10)
30020 IF LINE_TYPE$<>"I" THEN CP$(1)=CUST_DIV$,CP$(3)=CUST_CODE$
30090 RETURN CP$
30095 END DEF
30099 ! ********************************
30100 CHECK_PROD_CODE:! Check the product code
30103 IF LINE_TYPE$="M" OR LINE_TYPE_M$="M" THEN RETURN ! SSP221727 jdf SSP 234201
30104 IF LINE_TYPE$="S" THEN IF NUL(ITEM_CODE$) THEN MSGBOX MSG("FMGODB_111"),MSG("MB_ATTN"),"!"; NEXT_ID=ITEM_CODE.CTL; EXIT ! SSP 234835
30105 IF STP(PROD_CODE$)="" THEN PROD_CODE$=IC0.PROD_CODE$; IF STP(PROD_CODE$)="" THEN PROD_CODE$=FM1.PROD_CODE$; END_IF ; IF LINE_TYPE$="S" AND STP(FMP$(52,3))<>"" THEN PROD_CODE$=FMP$(52,3) ! SSP213686 jdf 
30110 IF NUL(PROD_CODE$) THEN MSGBOX MSG("FMGODB_96"),MSG("MB_ATTN"),"!"; NEXT_ID=PROD_CODE.CTL; EXIT 
30120 FIND (Z[9],KEY="T"+PROD_CODE$,DOM=*NEXT); GOTO PROD_CODE_OK
30125 MSGBOX MSG("FMGODB_99",PROD_CODE$),MSG("MB_ATTN"),"!"; NEXT_ID=PROD_CODE.CTL; NO_PROD_CODE=1; RETURN ! SSP 230251
30130 PROD_CODE_OK:
30195 RETURN 
30199 ! ************************************
30300 CHECK_SPEC: NO_SPEC=0
30301 IF POS(FS1.ORDER_TYPE_1$="WR")<>0 THEN NO_SPEC=1; GOTO *RETURN
30305 _F_FS2=HFN; OPEN (_F_FS2)"FS2"+%C$
30310 READ (_F_FS2,KEY=ORDER$,DOM=*NEXT)
30320 READ (_F_FS2,END=END_CHECK_SPEC)F_FS2$
30330 IF F_FS2$(147,8)<>ORDER$ THEN GOTO END_CHECK_SPEC
30340 IF F_FS2$(9,1)<>PO_CODE$ THEN GOTO 30320
30350 IF F_FS2$(6,3)=ORDER_LINE_NUM$ THEN GOTO 30320
30360 IF F_FS2$(119,1)="N" THEN GOTO 30320
30370 NO_SPEC=1
30380 END_CHECK_SPEC:
30390 IF NO_SPEC THEN CALL "*WINGRP;DISABLE",QTE.GRP$ ELSE CALL "*WINGRP;ENABLE",QTE.GRP$
30395 CLOSE (_F_FS2,ERR=*NEXT)
30400 RETURN 
31000 ! Options for Folder 2
31010 FOLDER_2_SETUP:
31020 IF EXIST_FLG=1 THEN CALL "*WINGRP;DISABLE",EXISTING.GRP$; EXIST_FLG=1
31030 IF NOT(NUL(ARG_3$)) THEN VENDOR$=ARG_3$; CALL "*wingrp;Disable",VENDOR.GRP$
31040 EXSIST_PO=0; GOSUB CHECK_FOR_PO; IF EXSIST_PO THEN VENDOR$=PO1.VEND_DIV$+PO1.VEND_CODE$; CALL "*WINGRP;DISABLE",VENDOR.GRP$; PO_EXIST=1
31050 _FIRST_FIELD=CUSTOMER.CTL
31060 READ (Z[3],KEY=CUSTOMER$+ITEM_CODE$,DOM=*NEXT)FM1_F$; NUMBERING$=FM1_F$(104,1) ! SSP245980 jdf
31090 REFRESH_FLG=1
31095 RETURN 
32000 ! Options for Folder 3
32010 FOLDER_3_SETUP:
32015 ! PRICE_EXT_ONLY=0,COST_EXT_ONLY=0
32016 DISABLE_PRICE_COST=0 ! SSP 246957
32017 EXIST_FLG=1
32020 IF LINE_TYPE$="M" AND SCRN_ID$="FMGODB.V7" THEN RETURN ! SSP 242299
32025 IF LINE_TYPE$="M" THEN NEXT_FOLDER=FLDR.FMGODB.2.CTL; RETURN 
32027 IF %NEW=1 AND NEW_TOGGLE=1 THEN GOTO 32038 ! SSP248606 jdf
32030 IF %NEW<>1 THEN GOTO 32038 ! SSP248606 jdf
32033 NEW_TOGGLE=1 ! SSP248606 jdf
32035 IF LINE_TYPE$="I" AND MID(%IC_PARM$,50,1)="Y" THEN FIXED_PRICE$="N" ELSE FIXED_PRICE$="Y" ! SSP#: 195244 dff  ! SSP248606 jdf
32037 IF LINE_TYPE$="S" THEN FIXED_PRICE$="Y"; REM IF (LINE_TYPE$=" " AND NOT(NUL(PO_CODE$))) OR LINE_TYPE$="S" THEN FIXED_PRICE$="Y" ! SSP#: 195244 dff ! SSP248606 jdf
32170 IF POS(LINE_TYPE$="IC")<>0 AND NUL(PO_CODE$) THEN DISABLE CONTROL UNIT_COST.CTL
32172 IF LINE_TYPE$="S" THEN IF SPC_CHG_EXT_ONLY THEN CALL "*WINGRP;HIDE",EXT_ONLY.GRP$; CALL "*WINGRP;ENABLE",EXTENSIONS.GRP$ ELSE CALL "*WINGRP;ENABLE",PRICE_COST.GRP$ ! ssp224626
32175 IF MID(WHSE$,1,1)="9" AND LINE_TYPE$<>"S" THEN DISABLE_PRICE_COST=1; CALL "*wingrp;disable",PRICE_COST.GRP$ ! SSP#253961
32178 IF POS(LINE_TYPE$="IC")<>0 AND NUL(PO_CODE$) THEN DISABLE CONTROL UNIT_COST.CTL
32179 GOSUB CHECK_UOM ! SSP 231692
32180 IF NOT(NUL(QUOTE_LINE_NUM$)) AND EXISTING_RECORD=0 THEN GOSUB DISPLAY_RFQ ! SSP 240173
32185 IF %MSLC THEN HIDE CONTROL COMM_CODE.CTL; ID=COMM_CODE.CTL; HIDE CONTROL ID+3000; HIDE CONTROL %COMMISSION_DESC.CTL; CALL "*WINGRP;SHOW",MULTI_COMM.GRP$; CALL "*WINGRP;ENABLE",MULTI_COMM.GRP$ ELSE CALL "*WINGRP;HIDE",MULTI_COMM.GRP$ ! ; SHOW CONTROL COMM_CODE.CTL ! SSP 225300
32195 RETURN 
32199 ! *********************************************
32200 CHECK_UOM:! Test for U/M Parameter settings and field access  SSP 231692
32212 DIM C_UM$(25); C_UM$(4,4)=COST_UM$; FIND (Z[13],KEY="U/M"+C_UM$(4,4),DOM=*NEXT)C_UM$,C_UM[0],C_UM[1] ! SSP 231692, 245367
32214 DIM S_UM$(25); S_UM$(4,4)=SELL_UM$; FIND (Z[13],KEY="U/M"+S_UM$(4,4),DOM=*NEXT)S_UM$,S_UM[0],S_UM[1] ! SSP 231692, 245367
32215 IF DISABLE_PRICE_COST THEN RETURN ! SSP 246957
32216 IF MID(C_UM$,21,1)="Y" THEN UNIT_COST$="0",UNIT_COST=0,UOM_COST_EXT=1; REFRESH_FLG=1 ELSE UOM_COST_EXT=0; ENABLE CONTROL UNIT_COST.CTL; DISABLE CONTROL COST_EXT.CTL,UOM_COST_EXT=0 ! SSP 231692
32218 IF MID(C_UM$,20,1)="Y" THEN CALL "*wingrp;disable",COST_QTY_PER.GRP$ ELSE CALL "*wingrp;enable",COST_QTY_PER.GRP$
32230 IF MID(S_UM$,21,1)="Y" THEN UNIT_SELL_PRICE$="0",UNIT_SELL_PRICE=0; UOM_SELL_EXT=1; REFRESH_FLG=1 ELSE UOM_SELL_EXT=0; IF MID(WHSE$,1,1)<>"9" AND NUL(PO_CODE$) AND POS(LINE_TYPE$="C")=0 THEN ENABLE CONTROL UNIT_SELL_PRICE.CTL END_IF ; DISABLE CONTROL SELL_PRICE_EXT.CTL ! SSP 231692  !SSP#239163
32232 IF MID(S_UM$,20,1)="Y" THEN CALL "*wingrp;disable",SELL_QTY_PER.GRP$ ELSE CALL "*wingrp;enable",SELL_QTY_PER.GRP$
32235 IF COST_EXT_ONLY=1 OR UOM_COST_EXT=1 OR SPC_CHG_EXT_ONLY=1 THEN DISABLE CONTROL UNIT_COST.CTL; ENABLE CONTROL COST_EXT.CTL ! SSP 231692
32240 IF PRICE_EXT_ONLY=1 OR UOM_SELL_EXT=1 OR SPC_CHG_EXT_ONLY=1 THEN DISABLE CONTROL UNIT_SELL_PRICE.CTL; ENABLE CONTROL SELL_PRICE_EXT.CTL ELSE ENABLE CONTROL UNIT_SELL_PRICE.CTL; DISABLE CONTROL SELL_PRICE_EXT.CTL ! SSP 231692 !SSP#239163
32242 IF MID(WHSE$,1,1)="9" AND LINE_TYPE$<>"S" THEN DISABLE CONTROL UNIT_SELL_PRICE.CTL ! ssp#253961
32245 IF POS(LINE_TYPE$="IC")<>0 AND NUL(PO_CODE$) THEN DISABLE CONTROL UNIT_COST.CTL
32250 ! } ! SSP 231692
32290 RETURN ! SSP 231692
32300 ! More Item Process
32310 ADDITIONAL_ITEM_PROCESS:
32320 IF NUL(ITEM_CODE$) THEN RETURN 
32332 IF MID(S_UM$,20,1)="Y" THEN CALL "*wingrp;disable",SELL_QTY_PER.GRP$ ELSE CALL "*wingrp;enable",SELL_QTY_PER.GRP$
32340 NEXT_ID=WZ_NEXT.CTL
32350 CALL "*WINGRP;ENABLE",NEW.GRP$
32360 NEXT_ID=PROD_CODE.CTL ! IF PO_CODE$<>"" THEN IF POS(LINE_TYPE$="SM")=0 AND POS(FM1.ITEM_STAT_CODE$="03467")>0 THEN DIM AA$(155),CC$(255); AA$(148,8)=ORDER$,CC$(1,20)=CUSTOMER$+ITEM_CODE$,CC$(254,1)=FM1.ITEM_STAT_CODE$; NNN$=PTH(14,ERR=*NEXT); PRINT 'CI'; CALL "FM2OBZ",%X3$,AA$,CC$,Z(3),Z(4),"","",Z9
32390 RETURN 
32395 ! *************************************************
33000 ! Check for Exsisting Purchase Orders
33010 CHECK_FOR_PO:
33015 KEY_10$=ORDER_DIV$+ORDER_NUM$+PO_CODE$
33020 FIND (Z[10],KEY=KEY_10$,DOM=*NEXT,REC=PO1$); EXSIST_PO=1
33095 RETURN 
33099 ! **************************************
34000 ! Lot return for Negative Quantities
34010 LOT_RETURN:
34020 Q0$="ICN"+ORDER$+ORDER_LINE_NUM$
34021 IF LEN(ORDER$)=6 THEN Q0$="ICN"+"00"+ORDER$+ORDER_LINE_NUM$ ! SSP208553, if non-divisional ORDER$ may be 6 characters, need to precede with 00 for division
34025 CALL "ZZWLKU;Parse_cust",FS1_CUSTOMER$,FS1_CUST_DIV$,FS1_CUST_CODE$; FS1_CUSTOMER$=FS1_CUST_DIV$+FS1_CUST_CODE$
34030 Q1$=FS1_CUSTOMER$+ITEM_CODE$+WHSE$+DIM(6)+VENDOR$+PLANT_CODE$
34035 IF LINE_TYPE$="I" THEN Q1$(1,10)=IC0.CUST_DIV$+IC0.CUST_CODE$ ! SSP205044
34037 IF LINE_TYPE$="C" AND STP(FM1.SRC_CUST_CODE$,2)<>"" THEN Q1$(1,10)=FM1.SRC_CUST_DIV$+FM1.SRC_CUST_CODE$ ! SSP205044
34040 ! 
34050 PROCESS "ICGLAB","../ICG/IC.EN",X3$,X4$,Q0$,Q1$; %EXTENSION=NUM(Q0$),%ML_COST=NUM(Q1$) ! SSP 272120
34052 DISPLAY_SELL_QTY$=STR(-%EXTENSION) ! SSP272120
34054 ! ISPLAY_SELL_QTY$=STR(FN%QTY_IN_UM(-%EXTENSION,SELL_UM$,QTY_IN_SELL_UM)) ! SSP219402 jdf
34055 REM DISPLAY_SELL_QTY$=STR(-(%ML_QTY)) ! SSP219402 jdf
34056 QTY_UNBILLED_SHIP=-%EXTENSION ! SE QTY_UNBILLED_SHIP=0 ! SSP219402 jdf;FI;REFRESH_FLG=1 ! SSP219402 jdf SSP 284087
34057 DISPLAY_SELL_QTY$=STR(FN%QTY_IN_UM(QTY_UNBILLED_SHIP,SELL_UM$,QTY_IN_SELL_UM)) ! SSP223555 jdf SSP 284087
34058 DISPLAY_SELL_QTY=NUM(DISPLAY_SELL_QTY$,ERR=*NEXT) ! SSP224681 jdf
34060 IF WHSE$(1,1)="9" THEN %ML_COST=0; RETURN ! SSP 226319 
34070 REM CALL "FM2EXT",Z[13],1,COST_UM$,COST_QTY_PER,Q0,U,C,M6[1] ! SSP219402 jdf
34076 IF %ML_COST<>0 THEN {! SSP219402 jdf
34077 IF DISPLAY_SELL_QTY<0 THEN DISPLAY_SELL_QTYII=-DISPLAY_SELL_QTY ELSE DISPLAY_SELL_QTYII=DISPLAY_SELL_QTY; END_IF ; QUANTITY_IN_EACH=COST_QTY_PER*DISPLAY_SELL_QTYII ! SSP219402 jdf ! SSP224681 jdf
34078 ! CALL "FM2EXT",Z[13],0,COST_UM$,COST_QTY_PER,QUANTITY_IN_EACH,%ML_COST,C,M6[1] ! SSP219402
34079 ! ALL "FM2EXT",Z[13],0,COST_UM$,COST_QTY_PER,QUANTITY_IN_EACH,%ML_COST,C,M6[1] ! SSP219402
34080 REM COST_PER_UNIT=C/(%ML_QTY*%ML_QTY) ! SSP219402 jdf
34081 REM COST_PER_UNIT=C/(%ML_QTY*DISPLAY_SELL_QTYII*QTY_IN_SELL_UM/COST_QTY_PER) ! SSP219402 jdf
34084  } ! SSP219402 jdf
34095 RETURN 
34099 ! ***************************************
35000 ! Display RFQ Information
35010 DISPLAY_RFQ:
35020 CALL "*WINGRP;SHOW",QTE.GRP$
35030 IF QSB.QUOTED_QTY=0 THEN QUOTED_QTY$=DIM(3,"-") ELSE QUOTED_QTY$=STR(QSB.QUOTED_QTY:"###,###-")
35040 IF QSB.QUOTED_PRICE=0 THEN QUOTED_PRICE=QSB.SELL_PRICE_1 ELSE QUOTED_PRICE=QSB.QUOTED_PRICE
35045 IF SPC_CHG_EXT_ONLY THEN QUOTED_PRICE=QSB.SELL_EXT ! SSP 240444
35050 FOR XX=1 TO 5
35060 EXECUTE "IF QSB.SELL_BREAK_"+STR(XX)+"<>0 THEN SELL_BREAK_"+STR(XX)+"=QSB.SELL_BREAK_"+STR(XX)+";SELL_PRICE_"+STR(XX)+"=QSB.SELL_PRICE_"+STR(XX)+" ELSE HIDE CONTROL SELL_BREAK_"+STR(XX)+".CTL;HIDE CONTROL SELL_PRICE_"+STR(XX)+".CTL"
35070 NEXT XX
35090 RETURN 
35099 ! ***************************************
36000 ! Set the query for the item code
36010 ITEM_CODE_QRY:
36015 VAL$=ITEM_CODE.CTL'VALUE$
36020 PROCESS %ITEM_QRY$,"",VAL$
36030 IF NUL(VAL$) THEN NEXT_ID=ITEM_CODE.CTL ELSE QRY_VAL$=VAL$,NEXT_ID=WZ_NEXT.CTL
36090 RETURN 
36099 ! ***************************************
37000 MULTI_COMM_MAINT:! SSP 225300
37005 GOSUB MULTI_COMM_KEY ! SSP 22530
37050 CALL "ARGSCM",X3$,X4$,SC_KEY$,DF_COMM$; COMM_CODE$=DF_COMM$ ! SSP225300
37099 RETURN 
38000 MULTI_COMM_KEY:! SSP 225300
38010 SC_TYPE$="O",SC_KEY1$=ORDER_DIV$+ORDER_NUM$,SC_KEY2$=FS1.CUST_DIV$+FS1.CUST_CODE$,SC_LINE$=ORDER_LINE_NUM$ ! SSP 225300 SSP 307322
38011 SC_KEY$=SC_TYPE$+SC_KEY1$+SC_KEY2$+SC_LINE$ ! SSP 225300    
38014 RETURN ! SSP 225300
38015 MULTI_COMM_SETUP:! SSP 225300
38020 DIM MCCDE$[5]; DIM MCSPLT[5],MCOMM$[5] ! SALESMAN CODES  SALESMAN SPLIT
38030 MCCDE$[1]=FS1.SPER_CODE$,MCCDE$[2]=FS1.OTHER_SPER_1$,MCCDE$[3]=FS1.OTHER_SPER_2$,MCCDE$[4]=FS1.OTHER_SPER_3$,MCCDE$[5]=FS1.OTHER_SPER_4$
38040 MCSPLT[1]=FS1.SALESMAN_1_PCT_SALE,MCSPLT[2]=FS1.ALT_SPER_PRCNT_1,MCSPLT[3]=FS1.ALT_SPER_PRCNT_2,MCSPLT[4]=FS1.ALT_SPER_PRCNT_3,MCSPLT[5]=FS1.ALT_SPER_PRCNT_4
38050 FOR SLP=1 TO 5; IF STP(MCCDE$[SLP],2)<>"" AND MCSPLT[SLP]>0 THEN MCOMM$[SLP]=FS1.COMM_CODE$; END_IF ; NEXT SLP
38100 RETURN 
39000 ! ^39000 FN_IC0_BUCKET Given B, bucket number return value from IC0 record
39005 DEF FN_IC0_BUCKET(LOCAL B)
39010 SWITCH B
39011 CASE 0; RETURN IC0.BASE_PRICE; BREAK
39012 CASE 1; RETURN IC0.QTY_BREAK_1; BREAK
39013 CASE 2; RETURN IC0.QTY_PRICE_1; BREAK
39014 CASE 3; RETURN IC0.QTY_BREAK_2; BREAK
39015 CASE 4; RETURN IC0.QTY_PRICE_2; BREAK
39016 CASE 5; RETURN IC0.QTY_BREAK_3; BREAK
39017 CASE 6; RETURN IC0.QTY_PRICE_3; BREAK
39018 CASE 7; RETURN IC0.QTY_BREAK_4; BREAK
39019 CASE 8; RETURN IC0.QTY_PRICE_4; BREAK
39020 CASE 9; RETURN IC0.QTY_BREAK_5; BREAK
39021 CASE 10; RETURN IC0.QTY_PRICE_5; BREAK
39022 CASE 11; RETURN IC0.QTY_BREAK_6; BREAK
39023 CASE 12; RETURN IC0.QTY_PRICE_6; BREAK
39024 CASE 13; RETURN IC0.AVG_SALE_PR_FOR_FMGT; BREAK
39025 CASE 14; RETURN IC0.SELL_QTY_PER; BREAK
39026 CASE 15; RETURN IC0.INVENTORY_QTY_PER; BREAK
39027 CASE 16; RETURN IC0.CTN_WT; BREAK
39028 CASE 17; RETURN IC0.LAST_PURCH_COST; BREAK
39029 CASE 18; RETURN IC0.AVG_COST; BREAK
39030 CASE 19; RETURN IC0.CTN_PACK; BREAK
39031 CASE 20; RETURN IC0.SPER_UNIT_COST; BREAK
39032 CASE 21; RETURN IC0.QTY_BREAK_7; BREAK
39033 CASE 22; RETURN IC0.QTY_PRICE_7; BREAK
39034 CASE 23; RETURN IC0.QTY_BREAK_8; BREAK
39035 CASE 24; RETURN IC0.QTY_PRICE_8; BREAK
39036 CASE 25; RETURN IC0.QTY_BREAK_9; BREAK
39037 CASE 26; RETURN IC0.QTY_PRICE_9; BREAK
39038 CASE 27; RETURN IC0.QTY_BREAK_10; BREAK
39039 CASE 28; RETURN IC0.QTY_PRICE_10; BREAK
39040 CASE 29; RETURN IC0.QTY_BREAK_11; BREAK
39041 CASE 30; RETURN IC0.QTY_PRICE_11; BREAK
39042 CASE 31; RETURN IC0.QTY_BREAK_12; BREAK
39043 CASE 32; RETURN IC0.QTY_PRICE_12; BREAK
39044 CASE 33; RETURN IC0.IC0_UNUSED_2; BREAK
39045 CASE 34; RETURN IC0.IC0_UNUSED_3; BREAK
39046 CASE 35; RETURN IC0.IC0_UNUSED_4; BREAK
39047 CASE 36; RETURN IC0.IC0_UNUSED_5; BREAK
39048 CASE 37; RETURN IC0.IC0_UNUSED_6; BREAK
39049 CASE 38; RETURN IC0.IC0_UNUSED_7; BREAK
39050 CASE 39; RETURN IC0.IC0_UNUSED_8; BREAK
39051 CASE 40; RETURN IC0.IC0_UNUSED_9; BREAK
39095 END DEF
39099 ! 
39100 ! ^39100 FN_QSB_BUCKET Given B, bucket number, return value from QSB
39105 DEF FN_QSB_BUCKET(LOCAL B)
39110 SWITCH B
39120 CASE 0; RETURN QSB.SELL_QTY_PER; BREAK
39121 CASE 1; RETURN QSB.QUOTED_QTY; BREAK
39122 CASE 2; RETURN QSB.SELL_BREAK_1; BREAK
39123 CASE 3; RETURN QSB.SELL_BREAK_2; BREAK
39124 CASE 4; RETURN QSB.SELL_BREAK_3; BREAK
39125 CASE 5; RETURN QSB.SELL_BREAK_4; BREAK
39126 CASE 6; RETURN QSB.SELL_BREAK_5; BREAK
39127 CASE 7; RETURN QSB.DESIRED_GP_1; BREAK
39128 CASE 8; RETURN QSB.DESIRED_GP_2; BREAK
39129 CASE 9; RETURN QSB.DESIRED_GP_3; BREAK
39130 CASE 10; RETURN QSB.DESIRED_GP_4; BREAK
39131 CASE 11; RETURN QSB.DESIRED_GP_5; BREAK
39132 CASE 12; RETURN QSB.SELL_PRICE_1; BREAK
39133 CASE 13; RETURN QSB.SELL_PRICE_2; BREAK
39134 CASE 14; RETURN QSB.SELL_PRICE_3; BREAK
39135 CASE 15; RETURN QSB.SELL_PRICE_4; BREAK
39136 CASE 16; RETURN QSB.SELL_PRICE_5; BREAK
39137 CASE 17; RETURN QSB.QUOTED_PRICE; BREAK
39138 CASE 18; RETURN QSB.SELL_EXT; BREAK
39139 CASE 19; RETURN QSB.CALC_COST_1; BREAK
39140 CASE 20; RETURN QSB.CALC_COST_2; BREAK
39141 CASE 21; RETURN QSB.CALC_COST_3; BREAK
39142 CASE 22; RETURN QSB.CALC_COST_4; BREAK
39143 CASE 23; RETURN QSB.CALC_COST_5; BREAK
39144 CASE 24; RETURN QSB.CTN_PACK; BREAK
39190 END SWITCH 
39195 END DEF
39199 ! 
39200 ! ^100 old functions
39205 DEF FNQ$(Z0,Z9$)=STR(Z0:Z9$(1,POS(".00"=STR(Z0:Z9$)+".00")-1))
39210 DEF FNS$(Z9$)=Z9$(1,POS("     "=Z9$+"     ")-1)
40330 IOLIST C$,C[0],C[1],C[2],C[3],C[4],C[5],C[6],C[7],C[8],C[9],C[10],C[11],C[12],C[13],C[14],C[15],C[16],C[17],C[18],C[19],C[20],C[21],C[22],C[23],C[24],C[25],C[26],C[27],C[28],C[29],C[30],C[31]
40350 IOLIST E$,E[0],E[1],E[2]
40361 IOLIST L$,L0$,L[0],L[1],L[2],L[3],L[4],L[5],L[6],L[7],L[8],L[9],L[10],L[11],L[12],L[13],L[14],L[15],L[16],L[17],L[18],L[19],L[20],L[21],L[22],L[23],L[24],L[25],L[26],L[27],L[28],L[29],L[30],L[31],L[32],L[33],L[34],L[35],L[36]
40390 IOLIST E2$
40440 IOLIST REORDPT$,F1[0],F1[1],F1[2],F1[3],F1[4],F1[5],F1[6],F1[7],F1[8],F1[9],F1[10],F1[11],F1[12],F1[13],F1[14],F1[15],F1[16],F1[17],F1[18],F1[19],F1[20],F1[21],F1[22],F1[23],F1[24],F1[25],F1[26],F1[27],F1[28],F1[29],F1[30],F1[31]
44200 REM "Set unit cost into UNIT_COST from total cost of lots C
44205 IF MID(WHSE$,1,1)="9" OR C=0 THEN {
44207 UNIT_COST=0,C=0,UNIT_COST$="0"
44209  } ELSE {
44210 CALL "FM2EXT",Z[13],1,COST_UM$,COST_QTY_PER,Q0,U,C,M6[1]
44215 UNIT_COST=U,UNIT_COST$=STR(UNIT_COST)
44219  }
44220 REM "If S1 is set, then set the unit price to S1, and C0 to 1 to cause display to be done.
44221 GOSUB GET_LOT_PRICE_CLASS
44225 IF MID(WHSE$,1,1)="9" AND LINE_TYPE$<>"S" THEN UNIT_SELL_PRICE=0,UNIT_SELL_PRICE$="0" ELSE IF S1<>0 THEN C0=1; IF DONT_MOD$<>"Y" THEN UNIT_SELL_PRICE=S1,UNIT_SELL_PRICE$=STR(UNIT_SELL_PRICE) ! SSP#253961
44229 BB$="NO"; GOSUB CALCULATIONS; BB$=""
44230 RETURN 
44500 ! ^44500 Handle returns
44502 Q0$="ICN"+ORDER_DIV$+ORDER_NUM$+ORDER_LINE_NUM$
44504 Q1$=CUST_DIV$+CUST_CODE$+ITEM_CODE$+WHSE$+"      "+VEND_DIV$+VEND_CODE$+PLANT_CODE$
44508 CALL "IC2LAB",%X3$,%X4$,Q0$,Q1$
44510 C=0,C=NUM(Q1$,ERR=44511),LOT_INV_ORDER_LINE$="Y"
44512 Q0=0,Q0=NUM(Q0$,ERR=44513)
44514 GOSUB 44200
44516 OPEN_QTY=-Q0
44518 IF OPEN_QTY<>K[1] THEN ORIG_QTY_ORDERED=ORIG_QTY_ORDERED+(OPEN_QTY-K[1])
44520 N9=N0,N0=0; GOSUB 44524; GOSUB 44524; N0=N9
44522 RETURN 
46047 REM "202876-Shipping Panel FM2ODG should not show the Tops fields if       
47800 ! ^47800 Contract Price from Item Master
47802 IF %IC_PARM$(225,1)<>"Y" OR MID(WHSE$,1,1)="9" THEN GOTO 47812
47804 READ (Z[3],KEY=FS1.CUST_DIV$+FS1.CUST_CODE$+ITEM_CODE$,DOM=47812)IOL=40330
47806 IF FM1.DIST_ITEM$<>"Y" OR FM1.PRICE=0 OR FM1.SELL_QTY_PER=0 THEN GOTO 47812
47808 IF DONT_MOD$<>"Y" THEN UNIT_SELL_PRICE=FM1.PRICE*QTY_IN_SELL_UM/FM1.SELL_QTY_PER; IF CONTRACT$="N" THEN IF IC0.SELL_QTY_PER<>0 THEN UNIT_SELL_PRICE=IC0.BASE_PRICE*QTY_IN_SELL_UM/IC0.SELL_QTY_PER ! WO155894
47810 IF CONTRACT$="Y" THEN FIXED_PRICE$="Y"
47812 RETURN 
48100 DO_LOTS:! Lot Inventory -> automatic and manual
48101 MAN_BO$="" ! SSP 224175
48102 IF OPEN_QTY<0 OR (%OE_GRID AND DISPLAY_SELL_QTY<0) THEN RETURN ! SSP 226319 
48103 IF NOT(NEED_TO_DO_LOTS) OR PRIOR_OPEN_QTY=OPEN_QTY THEN NEED_TO_DO_LOTS=0; RETURN ! SSP 225920  !SSP 232212
48104 LOT_INV_ORDER_LINE$="Y" ! SSP 232212 - this was not being set if no lots found and order put on backorder
48105 IF POS(%IC_PARM$(52,1)="AB")=0 OR QTY_UNBILLED_SHIP>0 THEN MAN_BO$="Y"; GOSUB SELECT_MANUAL_LOT; MAN_BO$=""; RETURN ! SSP 223633 SSP 224175 SSP 225920 
48106 X$=PAD(CUST_DIV$+CUST_CODE$,10,1)+ITEM_CODE$+WHSE$+ORDER_DIV$+ORDER_NUM$+ORDER_LINE_NUM$
48107 IF LINE_TYPE$="I" THEN X$(1,10)=DIM(10)
48108 READ (Z[28],KEY=X$(1,24),DOM=48110)
48110 K$=KEY(Z[28],END=NO_LOTS_AT_ALL); IF K$(1,24)<>X$(1,24) THEN Q0=0; GOTO NO_LOTS_AT_ALL
48111 LOT_LINE=12; IF POS(%IC_PARM$(52,1)="ABO")<>0 THEN LOT_TYPE$=%IC_PARM$(52,1) ELSE LOT_TYPE$=" " ! SSP 225482 SSP226476   
48112 IF Q0=0 THEN SAVE_LOT_TYPE$=LOT_TYPE$,LOT_TYPE$="D"
48113 S1=0; CALL "IC2LCA",%X3$,%X4$,LOT_TYPE$,LOT_LINE,X$,Q0,C,F,S1,S1$,S2,S3$,S3,S4; IF Q0=0 THEN LOT_TYPE$=SAVE_LOT_TYPE$,SAVE_LOT_TYPE$=""
48114 IF Q0=-1 THEN Q0=0 ELSE LOT_INV_ORDER_LINE$="Y"; BO_MSG=1; GOSUB CHECK_FOR_BO
48115 RETURN_FROM_LOTS:IF MID(%OP_PARM$,261,1)="Y" AND F<>0 THEN FRT_RETURNS_FROM_LOT=F,FRT_RETURNS_FROM_LOT$=STR(FRT_RETURNS_FROM_LOT); MSGBOX MSG("FMGODB_71",STR(F:"$####.00-")),MSG("FYI"),"INFO"; GOTO 48117; REM "92395, 173646
48116 IF MID(%OP_PARM$,193,1)="Y" AND F<>0 THEN MSGBOX MSG("FMGODB_71",STR(F:"$####.00-")),MSG("FYI"),"INFO"
48118 IF S1<>0 THEN SELL_UM$=S1$,QTY_IN_SELL_UM$=STR(S2),UNIT_SELL_PRICE=S1 ! SSP 207964
48120 IF FNS$(S3$(9,3))>"" THEN PROD_CODE$=S3$(9,3); GOSUB PROD_CODE_DEFAULT
48122 IF FNS$(S3$(12,5))>"" THEN COMM_CODE$=S3$(12,5); IF %MSLC THEN GOSUB MULTI_COMM_KEY; CALL "ARGSCM;DEFAULT_LOT_SETUP",SC_KEY$,S3$(12,5) ! REM "Will auto re-display after lot entry !SSP225300
48123 ! IF OPEN_QTY<0 THEN Q0=OPEN_QTY ! SSP 224446
48124 DO_LOTS_END: NEED_TO_DO_LOTS=0; DISPLAY_SELL_QTY$=STR(FN%QTY_IN_UM(OPEN_QTY,SELL_UM$,QTY_IN_SELL_UM)); DISPLAY_SELL_QTY=NUM(DISPLAY_SELL_QTY$); GOSUB 44200; IF MID(WHSE$,1,1)<>"9" THEN Q8=UNIT_COST ! SSP224681 jdf  SSP 226134
48126 X$=""
48134 RETURN 
48150 NO_LOTS_AT_ALL: MSGBOX MSG("FMGODB_90"),MSG("MB_ATTN"),"!"; Q0=0,NEED_TO_DO_LOTS=0; BO_MSG=0; GOSUB CHECK_FOR_BO; RETURN 
48300 ! ^48300
48301 CHECK_REORDER:
48302 REM "Will this qty ordered now put the item below ROP, WO105419           ,148299
48304 DIM F1[31]; READ (Z[3],KEY=FS1.CUST_DIV$+FS1.CUST_CODE$+ITEM_CODE$,DOM=48502)IOL=40440
48306 IF F1[22]=0 AND F1[23]=0 THEN GOTO 48328
48308 ROP_DAYS=0; IF F1[22]>0 THEN ROP_DAYS=F1[22]/30*F1[24]; REM "ROP using ROP in days                                                                  
48310 ROP_QTY=0; IF F1[23]>0 THEN ROP_QTY=F1[23]; REM "ROP quantity             
48312 AVAILABLE=IC1.BEG_BAL+IC1.RECEIPTS-IC1.SALES+IC1.ADJUSTMENTS-IC1.TF_COMMITTED+IC1.ON_PO
48314 BELOW_DAYS=0; IF ROP_DAYS>0 THEN BELOW_DAYS=ROP_DAYS-(AVAILABLE-OPEN_QTY)
48316 BELOW_QTY=0; IF ROP_QTY>0 THEN BELOW_QTY=ROP_QTY-(AVAILABLE-OPEN_QTY)
48318 IF BELOW_DAYS<=0 AND BELOW_QTY<=0 THEN GOTO 48328
48320 IF BELOW_DAYS>0 THEN AMOUNT=BELOW_DAYS,X$=MSG("FMGODB_73",STR(AMOUNT)) ELSE AMOUNT=BELOW_QTY,X$=MSG("FMGODB_74",STR(AMOUNT))
48322 IF BELOW_DAYS>0 AND BELOW_QTY>0 THEN IF BELOW_QTY>BELOW_DAYS THEN AMOUNT=BELOW_QTY,X$=MSG("FMGODB_75",STR(AMOUNT))
48324 MSGBOX X$,MSG("FYI"),"INFO"
48325 DO_CHECK_REORDER=0 ! SSP 23073
48326 RETURN 
48500 ! ^48500
48502 Y5=20
48504 IF QUOTE_LINE_NUM$<>"   " OR PO_CODE$<>" " THEN GOTO 48518
48508 N0=1
48512 IF FS1.WORK_ORDER$="Y" THEN T3=IC1.COMMITTED*1.15 ELSE T3=IC1.TF_COMMITTED
48514 T0=IC1.BEG_BAL+IC1.RECEIPTS-IC1.SALES+IC1.ADJUSTMENTS,T1=T0-T3,T2=T1+IC1.ON_PO
48518 RETURN 
48520 IF Q[18]=0 THEN GOTO 48524
48522 ! FOR X=0 TO 5; IF Q[X+18]=0 THEN EXITTO 48523 ELSE X1=X*10; PRINT @(17+X1,Y5),Q[X+18]/T[2]:M4$,@(16+X1,Y5+1),Q[X+12]:M5$,; NEXT X
48524 RETURN 
48551 IF NOT(NUL(QUOTE_LINE_NUM$)) AND LINE_TYPE$="S" THEN GOTO 48585 ELSE IF %OE_GRID AND S1=0 THEN Q9=UNIT_SELL_PRICE ! SSP 236354 SSP 240444
48552 IF S1<>0 THEN Q9=UNIT_SELL_PRICE,Q8=UNIT_COST; GOTO 48575 ELSE IF CUSTOM$="Y" AND POS(" "<>QUOTE_LINE_NUM$)=0 THEN Q9=UNIT_SELL_PRICE,Q8=UNIT_COST; GOTO 48575 ! SSP 224018
48553 IF C<>0 THEN Q8=UNIT_COST
48554 IF FS1.WORK_ORDER$<>"Y" THEN IF MID(WHSE$,1,1)="9" THEN Q9=0,Q8=0; UNIT_SELL_PRICE=0,UNIT_COST=0; GOTO 48575 ! SSP 224018
48555 IF STP(LINE_TYPE$)="S" THEN Q9=UNIT_SELL_PRICE; Q8=UNIT_COST
48556 IF POS(" "<>IC0.ITEM_GROUP_CODE$+IC0.PRICING_FEATURES$)<>0 THEN VEND_DIV$=IC0.VEND_DIV$,VEND_CODE$=IC0.VEND_CODE$; ATMP$=VEND_DIV$+VEND_CODE$+COST_UM$+SELL_UM$; DIM ATMP[5]; ATMP[0]=OPEN_QTY,ATMP[2]=COST_QTY_PER,ATMP[5]=QTY_IN_SELL_UM; CALL "FMGOBA.1",%X3$,ATMP$,IC0.ITEM_GROUP_CODE$+IC0.PRICING_FEATURES$,ATMP{ALL},Q8,Q9,M6[1]; UNIT_COST=Q8,UNIT_SELL_PRICE=Q9; GOTO 48575 ! SSP 224018
48557 Q_SN=0 ! SSP 224018 (variable to keep supplier number from quote)
48558 IF Q[0]=0 OR ABS(OPEN_QTY)<ABS(Q[0]) THEN GOTO 48570 ! SSP228057
48560 QTYBR$="N",STL=0,ELP=5 ! SSP 228057
48562 FOR X=STL TO ELP ! SSP 228057
48564 IF OPEN_QTY<Q[X] THEN EXITTO 48570 ! SSP 228057
48566 IF (%OE_GRID AND GRID_1.CTL'CURRENTCOLUMN<>8) THEN GOTO 48567 ELSE IF Q[X]<>0 THEN Q9=Q[X+6],UNIT_SELL_PRICE=Q9; IF NOT(NUL(QUOTE_LINE_NUM$)) THEN Q_SN=Q[X+24] ! SSP 228057  SSP 224018 ! SSP242777 jdf
48568 NEXT X ! SSP 228057
48569 IF NUL(QUOTE_LINE_NUM$) THEN IF QTYBR$="N" THEN QTYBR$="Y",STL=STL+24,ELP=ELP+24; GOTO 48562 ! SSP 228057 SSP 224018
48570 IF Q[18]=0 OR ABS(OPEN_QTY)<ABS(Q[18]) THEN GOTO 48574 ! SSP228057 SSP 224018
48572 FOR X=18 TO 23; IF OPEN_QTY<Q[X] THEN EXITTO 48574 ELSE IF Q[X]<>0 THEN Q8=Q[X-6],UNIT_COST=Q8; END_IF ; END_IF ; NEXT X ! SSP 228057  SSP 224018 SSP 231188
48573 FOR X=42 TO 47; IF OPEN_QTY<Q[X] THEN EXITTO 48574 ELSE IF Q[X]<>0 THEN Q8=Q[X-6],UNIT_COST=Q8; END_IF ; END_IF ; NEXT X ! SSP 228057  SSP 224018 SSP 231188 WO273055
48574 IF FS1.RFQ_TYPE_QUOTATION$="Y" AND POS(" "<>QUOTE_LINE_NUM$)<>0 AND NOT(EXISTING_RECORD) THEN GOSUB 48600 ! SSP 228057 SSP 240173
48575 ! F FS1.RFQ_TYPE_QUOTATION$="Y" AND POS(" "<>QUOTE_LINE_NUM$)<>0 THEN GOSUB 48600 ! SSP 228057
48576 IF POS(%X3$(9,3)="049")>0 THEN IF NUM(AR1.CUST_PRICE_CATEGORY$,ERR=48577)>0 THEN Q9=Q9*(100-NUM(AR1.CUST_PRICE_CATEGORY$))*.01 ! JVV228057 - REMOVE TEST FOR CO 500
48577 REM "IF AR1.CUST_PRICE_CATEGORY$+IC0.ITEM_PRICE_CLASS$<>DIM(6) THEN CALL "FMGODA;DO_CATEGORY",AR1.CUST_PRICE_CATEGORY$,IC0.ITEM_PRICE_CLASS$,Q9,OPEN_QTY,QTY_IN_SELL_UM,IC0.SELL_QTY_PER ! SSP 228057
48578 IF LINE_TYPE$="I" AND NOT(NUL(PO_CODE$)) THEN GOSUB IC2_COST; Q8=IC2_COST ! SSP 227832
48579 IF %NEW=0 THEN Q8=UNIT_COST ! SSP#216036
48580 IF EXISTING_RECORD THEN RETURN ! SSP 225920
48585 IF Q9<>0 THEN UNIT_SELL_PRICE=Q9 END_IF ; IF Q8<>0 THEN UNIT_COST=Q8 ! SSP 225920
48595 RETURN 
48599 ! 
48600 ! 48600 RFQ pricing
48602 IF Q_SN=0 THEN Q_SN=1 ! !SSP 224018
48603 SUPPLIER_NUM=Q_SN ! SSP 224018
48604 ! IF X<19 THEN Z0=32 ELSE Z0=X+13
48606 IF FS1.QUOTE_FROM_LINES$="Y" THEN QTE$=QUOTE_DIV$+QUOTE_NUM$ ELSE QTE$=FS1.MASTER_QUOTE_PART_1$+FS1.MASTER_QUOTE_PART_2$
48607 ! UPPLIER_NUM=EVN("QSC.SUPPLIER_NUM_"+STR(Z0-31))
48608 READ (Z[8],KEY=QTE$+QUOTE_LINE_NUM$+STR(SUPPLIER_NUM:"00"),DOM=48628)J5$
48610 IF F1$="*" AND VEND_DIV$+VEND_CODE$<>J5$(12,10) THEN MSGBOX MSG("FMGODB_76"),MSG("MB_ATTN"),"!"; GOTO 48628
48612 REM "we have to change the vendor
48614 IF VEND_DIV$+VEND_CODE$=J5$(12,10) THEN GOTO 48628 ELSE VEND_DIV$=J5$(12,2),VEND_CODE$=J5$(14,8)
48616 DIM E$(400),E[2]; FIND (Z[22],KEY=VEND_DIV$+VEND_CODE$,DOM=48628)IOL=40350
48618 PLANT_CODE$=J5$(85,4)
48620 DIM E2$(200); FIND (Z[25],KEY="P"+VEND_DIV$+VEND_CODE$+PLANT_CODE$,DOM=48621)IOL=40390
48625 IF OPEN_QTY<>0 THEN IF NUL(PLANT_CODE$) THEN VMSG$=MSG("FMGODB_78",FN%ZZDISP$(VEND_DIV$+VEND_CODE$,"A/P"),STP(MID(E$,11,35),1)) ELSE VMSG$=MSG("FMGODB_78",FN%ZZDISP$(VEND_DIV$+VEND_CODE$,"A/P")+"-"+STP(PLANT_CODE$,1),STP(MID(E2$,16,35),1))
48626 ! MSGBOX VMSG$,MSG("MB_ATTN"),"!"
48627 PREV_VEND$=VEND_DIV$+VEND_CODE$,VENDOR$=PREV_VEND$; GOSUB GET_VEND_NAME
48630 RETURN 
48632 RETURN 
48700 ! ^48700 Price Breaks 
48702 PRECISION M6[1]
48704 REM "J(2) is avg cost from location, I(18) is avg cost from item
48705 FIND (Z[4],KEY=%CUST_KEY$+ITEM_CODE$,DOM=*NEXT,REC=IC0$)
48706 IF IC0.SELL_QTY_PER=0 THEN IC0.SELL_QTY_PER=1 END_IF ; IF IC0.INVENTORY_QTY_PER=0 THEN IC0.INVENTORY_QTY_PER=1
48707 IF COST_QTY_PER=0 THEN COST_QTY_PER=1
48708 Q9=IC0.BASE_PRICE*QTY_IN_SELL_UM/IC0.SELL_QTY_PER; IF IC1.AVG_COST<>0 THEN Q8=IC1.AVG_COST*COST_QTY_PER/IC0.INVENTORY_QTY_PER ELSE Q8=IC0.AVG_COST*COST_QTY_PER/IC0.INVENTORY_QTY_PER
48710 REM "Q(), 0-5 & 24-29=Price breaks, 6-11 & 30-35=prices, 12-17=costs, 18-23=cost breaks 36-41=COSTS(7-12), 42-47=COST BREAKS (7-12); WO273055
48712 DIM Q[47] ! WO273055
48714 IF COST_QTY_PER=0 THEN COST_QTY_PER=1
48716 IF NOT(NUL(QUOTE_LINE_NUM$)) THEN GOTO 48727
48718 IF IC0.SELL_QTY_PER=0 THEN IC0.SELL_QTY_PER=1
48720 PERFORM "FMGOB8;START_HERE"; IF M[14]=0 THEN M[14]=1
48722 Q8=M[0]*COST_QTY_PER/M[14]
48724 FOR X=0 TO 5; Q[X]=FN_IC0_BUCKET(X*2+1),Q[X+24]=FN_IC0_BUCKET(X*2+21),Q[X+6]=FN_IC0_BUCKET(X*2+2)*QTY_IN_SELL_UM/IC0.SELL_QTY_PER,Q[X+30]=FN_IC0_BUCKET(X*2+22)*QTY_IN_SELL_UM/IC0.SELL_QTY_PER,Q[X+12]=M[X*2+2]*COST_QTY_PER/M[14],Q[X+18]=M[X*2+1],Q[X+36]=M[X*2+18]*COST_QTY_PER/M[14],Q[X+42]=M[X*2+18]; NEXT X ! WO273055
48726 GOTO 48736
48728 IF QSB.SELL_QTY_PER=0 THEN QSB.SELL_QTY_PER=1
48730 FOR X=0 TO 4; Q[X]=FN_QSB_BUCKET(X+2),Q[X+6]=FN_QSB_BUCKET(X+12)*QTY_IN_SELL_UM/QSB.SELL_QTY_PER,Q[X+12]=FN_QSB_BUCKET(X+19)*COST_QTY_PER/QSB.SELL_QTY_PER,Q[X+18]=Q[X],Q[X+24]=EVN("QSC.SUPPLIER_NUM_"+STR(X+1)); NEXT X ! SSP 224018
48732 Q9=FN_QSB_BUCKET(12),Q8=FN_QSB_BUCKET(19)*COST_QTY_PER/QSB.SELL_QTY_PER
48734 IF LINE_TYPE$="C" AND MID(WHSE$,1,1)="9" THEN Q9=0,Q8=0
48735 IF %OE_GRID THEN IF LINE_TYPE$="S" THEN IF SPC_CHG_EXT_ONLY THEN SELL_PRICE_EXT=QSB.SELL_EXT,COST_EXT=QSC.COST_EXT ELSE UNIT_SELL_PRICE=QSB.QUOTED_PRICE,UNIT_COST=QSC.QUOTED_COST; END_IF ; RETURN ! SSP 240444
48736 IF NUL(QUOTE_LINE_NUM$) THEN IF NOT(NUL(IC0.ITEM_PRICE_CLASS$)) THEN IF POS(" "<>IC0.ITEM_PRICE_CLASS$+AR1.CUST_PRICE_CATEGORY$)>0 THEN X$=IC0.ITEM_PRICE_CLASS$+AR1.CUST_PRICE_CATEGORY$+IC0.CUST_DIV$+IC0.CUST_CODE$+IC0.ITEM_CODE$; CALL "IC2ICF",%X3$,Z[9],X$,QTY_IN_SELL_UM,IC0.INVENTORY_QTY_PER,IC0.SELL_QTY_PER,IC0.BASE_PRICE,IC0.AVG_COST,IC0.LAST_PURCH_COST,IC0.SPER_UNIT_COST,Q{ALL}; IF X$="" THEN ITEM_CLASS$="N" ELSE ITEM_CLASS$="Y" ! SSP 242903
48738 IF MID(%IC_PARM$,71,1)="Y" THEN ITEM_CLASS$="N"; REM " IF VALIDATING QBG FILE NEVER SET FLAG TO YES SSP# 156908
48740 PRECISION 2
48742 IF N0=1 THEN GOTO 48750
48744 IF MID(%IC_PARM$,44,1)="Y" AND NUL(PO_CODE$) AND POS(LINE_TYPE$="IC")<>0 AND IC0.LOT_INV_FOR_THIS_ITM$="Y" THEN GOTO 48750
48746 IF Q[0]=0 AND UNIT_SELL_PRICE=0 AND STP(MASTER_ITEM_LINE_NUM$)="" THEN UNIT_SELL_PRICE=Q9; GOTO 48750 ELSE IF Q[24]<>0 THEN GOSUB 48850; GOTO 48750 ! SSP#285794
48748 ! FOR X=0 TO 5; IF Q[X]=0 THEN EXITTO 48749 ELSE X1=X*10; PRINT @(17+X1,17),FNQ$(Q[X]/QTY_IN_SELL_UM,M1$),@(16+X1,18),Q[X+6]:M6$(2),; NEXT X
48750 GOSUB 48500
48752 N0=1
48754 RETURN 
48800 ! ^48800
48802 DIM P9[5]; FIND (Z[13],KEY=%X3$(9,3)+"F/M")*,*,*,P9[0],P9[1],P9[2],P9[3]
48804 IF MID(WHSE$,1,1)="9" OR LINE_TYPE$="N" THEN P9[4]=0 ELSE P9[4]=P9[0]
48806 P9[5]=P9[1]; IF ABS(OPEN_QTY)<P9[3] THEN P9[4]=P9[4]+P9[2],P9[5]=0
48808 P9[5]=P9[5]+UNBILL_SHIP_UNIT_CST
48810 REM "BETTER PRECISION
48812 IF OPEN_QTY<>0 THEN UNIT_COST=(COST_QTY_PER*P9[4]+COST_QTY_PER*P9[5]*OPEN_QTY/1000)/OPEN_QTY ELSE UNIT_COST=UNBILL_SHIP_UNIT_CST
48814 RETURN 
48850 ! ^48850 More than 6 breaks
48853 RETURN 
48854 FOR X=0 TO 5
48856 X1=X*10; PRINT @(17+X1,16),FNQ$(Q[X]/QTY_IN_SELL_UM,M1$),@(16+X1,17),Q[X+6]:M6$(2),
48858 IF Q[X+24]<>0 THEN PRINT @(17+X1,18),FNQ$(Q[X+24]/QTY_IN_SELL_UM,M1$),@(16+X1,19),Q[X+30]:M6$(2),
48860 NEXT X
48862 RETURN 
48900 CHECK_FOR_BO:! Check lot qty vs ordered and set shipped, and B/O quantites, give message if BO_MSG=1, set Q0 back to ordered amount
48910 IF Q0<OPEN_QTY THEN {! Bo situation
48920 QTY_UNBILLED_SHIP=Q0,QTY_UNBILLED_SHIP$=STR(QTY_UNBILLED_SHIP)
48930 QTY_BO_RCV_FS3=OPEN_QTY-QTY_UNBILLED_SHIP,QTY_BO_RCV_FS3$=STR(QTY_BO_RCV_FS3)
48940 MJ$=""; IF IC0.NEVER_BACKORDER$="Y" THEN MJ$="NEVER BACKORDER ITEM SET",QTY_BO_RCV_FS3=0,QTY_BO_RCV_FS3$="0" ! SSP 229365  
48960 M91$="###,###,##0-"; MSGBOX MJ$+" "+MSG("FMGODB_91",STP(STR(FN%QTY_IN_UM(OPEN_QTY,SELL_UM$,QTY_IN_SELL_UM):M91$),2),TBL(ABS(SGN(QTY_UNBILLED_SHIP)),LCS(MSG("NONE")),LCS(MSG("ONLY"))+" "+STP(STR(FN%QTY_IN_UM(QTY_UNBILLED_SHIP,SELL_UM$,QTY_IN_SELL_UM):M91$),2)),STP(STR(FN%QTY_IN_UM(QTY_BO_RCV_FS3,SELL_UM$,QTY_IN_SELL_UM):M91$),2)),MSG("MB_ATTN"),"!" ! SSP 229365
48975 ! Q0=OPEN_QTY ! SSP 224446
48980  } ELSE {
48981 QTY_BO_RCV_FS3=0,QTY_BO_RCV_FS3$="0"
48982 QTY_UNBILLED_SHIP=Q0; QTY_UNBILLED_SHIP$=STR(QTY_UNBILLED_SHIP) ! SSP 228932
48983  }
48985 BO_MSG=0
48995 RETURN 
48999 ! ****************************************************
49000 GET_LOT_PRICE_CLASS:
49010 IF X$<>"" THEN {
49040 LOT_REC$=X$(1,20)+WHSE$+ORDER_DIV$+ORDER_NUM$+ORDER_LINE_NUM$
49050 CALL "UPDICF;GET_PRICE_CLASS",-99,Z[13],%X3$,LOT_REC$,LOT_PRICE_CLASS$
49060 IF LOT_PRICE_CLASS$<>DIM(3) THEN IF POS(" "<>LOT_PRICE_CLASS$+AR1.CUST_PRICE_CATEGORY$)>0 THEN X$=LOT_PRICE_CLASS$+AR1.CUST_PRICE_CATEGORY$+IC0.CUST_DIV$+IC0.CUST_CODE$+IC0.ITEM_CODE$; CALL "IC2ICF",%X3$,Z[9],X$,QTY_IN_SELL_UM,IC0.INVENTORY_QTY_PER,IC0.SELL_QTY_PER,IC0.BASE_PRICE,IC0.AVG_COST,IC0.LAST_PURCH_COST,IC0.SPER_UNIT_COST,Q{ALL}; IF X$="" THEN ITEM_CLASS$="N" ELSE ITEM_CLASS$="Y" ! SSP 228057
49080  }
49090 RETURN 
50000 SELECT_MANUAL_LOT:
50010 X$=PAD(CUST_DIV$+CUST_CODE$,10,1)+ITEM_CODE$+WHSE$+ORDER_DIV$+ORDER_NUM$+ORDER_LINE_NUM$
50015 IF LINE_TYPE$="I" THEN X$(1,10)=DIM(10)
50020 READ (Z[28],KEY=X$(1,24),DOM=*NEXT)
50030 ! K$=KEY(Z[28],END=NO_LOTS_AT_ALL); IF K$(1,24)<>X$(1,24) THEN MSGBOX MSG("FMGODB_90"),MSG("MB_ATTN"),"!,TIM=5"; IF %OE_GRID THEN QTY_BO_RCV_FS3=0,QTY_BO_RCV_FS3$="0"; OPEN_QTY=0,OPEN_QTY$="0"; RETURN ELSE IF MAN_BO$="Y" THEN EXITTO NO_LOTS_AT_ALL ELSE NEXT_ID=DISPLAY_SELL_QTY.CTL; EXIT ! ssp208671 SSP 224175
50035 K$=KEY(Z[28],END=NO_LOTS_AT_ALL); IF K$(1,24)<>X$(1,24) THEN IF %OE_GRID THEN QTY_BO_RCV_FS3=0,QTY_BO_RCV_FS3$="0"; OPEN_QTY=0,OPEN_QTY$="0"; MSGBOX MSG("FMGODB_90"),MSG("MB_ATTN"),"!,TIM=5"; RETURN ELSE IF MAN_BO$="Y" THEN EXITTO NO_LOTS_AT_ALL ELSE NEXT_ID=DISPLAY_SELL_QTY.CTL; EXIT ! ssp208671 SSP 224175
50050 LOT_INV_ORDER_LINE$="Y"
50100 AR4$="15",AR5$=STR(X$),AR6$=STR(Q0),AR7$=STR(C),AR8$=STR(F),AR9$="",AR10$="",AR11$="",AR12$=S3$,AR13$="",S1=0,AR14$=STR(S1),AR15$=STR(S2),ARG16$=S1$,AR17$=STR(S3),%LOT_PGM$="O/E"; PROCESS "ICGTDA.3","../ICG/IC.EN",X3$,X4$," ",AR4$,AR5$,AR6$,AR7$,AR8$,AR9$,AR10$,AR11$,AR12$,AR13$,AR14$,AR15$,AR16$,AR17$; Q0=NUM(AR6$),C=NUM(AR7$),F=NUM(AR8$),S3$=AR12$,S1=NUM(AR14$),S2=NUM(AR15$),S1$=AR16$,%LOT_PGM$="" ! ,UNIT_COST$=STR(C); SSP 207964  ssp 227476
50110 %LOT_MANUAL=1
50115 ! "line commented out for 228932?";IF NOT(%OE_GRID) AND MAN_BO$<>"Y" THEN QTY_UNBILLED_SHIP=Q0,QTY_UNBILLED_SHIP$=(STR(Q0)),QTY_BO_RCV_FS3=0,QTY_BO_RCV_FS3$="0" ! 175270 - If manual lot sel (use the hand) then assume no back order ----> BO_MSG=1; GOSUB CHECK_FOR_BO ! ssp208671  SSP 224175; SSP 228932
50116 IF OPEN_QTY=0 THEN OPEN_QTY=Q0 ! SSP 226134
50117 GOSUB CHECK_FOR_BO ! ssp208671 224175  SSP 228932
50118 IF (POS(FS1.ORDER_TYPE_1$="RW")<>0 OR NUL(PO_CODE$)) AND QTY_UNBILLED_SHIP>OPEN_QTY THEN M91$="###,###,##0-"; MSGBOX MSG("FMGODB_91O",STP(STR(FN%QTY_IN_UM(QTY_UNBILLED_SHIP,SELL_UM$,QTY_IN_SELL_UM):M91$),2),STP(STR(FN%QTY_IN_UM(OPEN_QTY,SELL_UM$,QTY_IN_SELL_UM):M91$),2),TBL(ABS(SGN(QTY_UNBILLED_SHIP)),LCS(MSG("NONE")),LCS(MSG("ONLY")))),MSG("WARNING"),"!" ! SSP 233819
50119 GOSUB 48700 ! SSP 234830
50120 DISPLAY_SELL_QTY$=STR(FN%QTY_IN_UM(OPEN_QTY,SELL_UM$,QTY_IN_SELL_UM)); DISPLAY_SELL_QTY=NUM(DISPLAY_SELL_QTY$); IF NOT(%OE_GRID) THEN REFRESH_FLG=1,NEXT_ID=UNIT_SELL_PRICE.CTL ! SSP208671  ! SSP224681 jdf SSP 226134
50130 IF NOT(%OE_GRID) THEN ID$="DISPLAY_SELL_QTY" ! ; GOSUB CALCULATIONS! ssp208671
50135 IF POS(MID(%OP_PARM$,281,1)="YB",1)<>0 AND STP(PO_CODE$)="" THEN GOSUB CHECK_REORDER ! SSP307269
50150 GOTO RETURN_FROM_LOTS
50199 ! ***********************************
50200 FINISH_A_LINE:! ready to write line out, check out special shipping, etc
50210 IF SPECIAL_SHIPPING$="Y" AND SPECIAL_SHIP_QTY<>OPEN_QTY THEN DO_SPECIAL_SHIP=1,DSS$=ORDER_DIV$+ORDER_NUM$+" "+ORDER_LINE_NUM$ ELSE DO_SPECIAL_SHIP=0; DSS$="" ! Save info, here it is destroyed in WRITE_REC,but we must write record before going off
50220 IF STP(ORDER_LINE_NUM$)<>"" THEN GOSUB CHECK_PROD_CODE; END_IF ; IF NO_PROD_CODE THEN NO_PROD_CODE=0,IGNORE_EXIT=1; RETURN ! SSP 230251  ! SSP233489 jdf  ! SSP242299 jdf SSP307159
50230 NORMAL_EXIT=1; IF NOT(%OE_GRID) THEN GOSUB CHECK_CHANGES END_IF ; IF DO_SPECIAL_SHIP THEN DO_SPECIAL_SHIP=0; PROCESS "FMGODG","",DSS$
50250 SPECIAL_SHIP_QTY=OPEN_QTY
50260 EXSIST_PO=0; GOSUB CHECK_FOR_PO ! SSP 204200                              
50270 IF EXSIST_PO=0 AND ORDER_LINE_COMPLETE$="N" THEN GOTO END_OF_LINE_TASKS ! SSP 204200                                                               
50295 RETURN 
50299 ! **************************************
50300 SPECIAL_SHIP_BUTTON:! Logic for special shipping button
50310 DSS$=ORDER_DIV$+ORDER_NUM$+" "+ORDER_LINE_NUM$
50320 IF NOT(%OE_GRID) THEN SPECIAL_SHIP_BUTTON_PRESSED=1; GOSUB WRITE_REC; SPECIAL_SHIP_BUTTON_PRESSED=0 ! We have to write the record so FMGODG can pickup values, but we will skip end of line tasks ! SSP208671! ssp208671
50325 %SS_FLG=0
50330 PROCESS "FMGODG","",DSS$
50340 IF NOT(%OE_GRID) THEN IF %SS_FLG THEN %SS_FLG=0; SPECIAL_SHIPPING$="N"; HIDE CONTROL SPECIAL_SHIP_BUTTON.CTL ! SSP208671! ssp208671
50350 SPECIAL_SHIP_QTY=OPEN_QTY
50390 IF NOT(%OE_GRID) THEN REFRESH_FLG=1 ! ssp208671
50395 RETURN 
50399 ! *************************************
50400 CHECK_TOPS:
50405 TOPS_ITEM_CHECK$="",TOPS_ITEM_CODE$=""
50410 CALL "ZZ2PRP","OS",RESULT$,TF_DATE$; IF RESULT$="Y" THEN USING_TOPS=1 ELSE USING_TOPS=0
50415 DIM OSP_PARMS$(512); IF USING_TOPS THEN FIND (Z[13],KEY=%X3$(9,3)+"OSP",DOM=*NEXT)OSP_PARMS$
50420 IF USING_TOPS AND %LINE_TYPE$="I" AND ITEM_CODE$="" AND (VENDOR$=OSP_PARMS$(60,8) OR PO_EXISTS=0) THEN CALL "*wingrp;show",TOPS_BUTTON.GRP$ ELSE CALL "*wingrp;hide",TOPS_BUTTON.GRP$
50421 IF USING_TOPS=0 THEN CALL "*wingrp;hide",TOPS_BUTTON.GRP$; REM SSP 202876
50450 IF SCRN_ID$="FMGODB.V7" AND USING_TOPS=1 AND %LINE_TYPE$="I" AND ITEM_CODE$="" THEN SHOW CONTROL BT_TOPS_QRY.CTL; ENABLE CONTROL BT_TOPS_QRY.CTL ELSE HIDE CONTROL BT_TOPS_QRY.CTL ! AND (VENDOR$=OSP_PARMS$(60,8) OR PO_EXISTS=0) THEN CALL "*wingrp;show",TOPS_BUTTON.GRP$ ELSE CALL "*wingrp;hide",TOPS_BUTTON.GRP$; !SSP 307461
50480 REFRESH_FLG=1
50495 RETURN 
50499 ! *************************************
50500 TOPS_FLAG:
50510 IF TOPS_ITEM_CHECK$="1" THEN {
50515 CALL "*wingrp;show",YES_TOPS.GRP$
50530 CALL "*wingrp;disable",NO_TOPS.GRP$
50540  } ELSE {
50550 CALL "*wingrp;hide",YES_TOPS.GRP$
50560 CALL "*wingrp;enable",NO_TOPS.GRP$
50570  }
50595 RETURN 
50599 ! *************************************
50600 POST_TOPS_ITEM_CODE:
50608 NOTONFIL=0 ! SSP 307461
50610 READ (Z[29],KEY=TOPS_ITEM_CODE$,DOM=*NEXT)
50615 DIM KYZ29$(32); KYZ29$=KEY(Z[29],END=*NEXT)
50620 IF KYZ29$(1,20)<>PAD(TOPS_ITEM_CODE$,20) THEN MSGBOX MSG("NO_ITM_FL"); NEXT_ID=TOPS_ITEM_CODE.CTL; GOTO *RETURN ! SSP#225722
50625 NOTONFIL+=1; READ (Z[4],KEY=DIM(10)+KYZ29$(22,10),DOM=*NEXT)INV$; NOTONFIL=0
50630 IF NOTONFIL THEN CALL "OS2C02",%X3$,%X4$,KYZ29$(22,10),QQ1$; IF NOTONFIL<3 THEN GOTO 50625 ELSE GOTO *NEXT ! 208671 - Infinite loop if TOPS item setup fails for any reason
50635 IF POS(MID(INV$,108,1)="ID")<>0 THEN MSGBOX "",MSG("DIS_ITM"); NEXT_ID=TOPS_ITEM_CODE.CTL; GOTO *RETURN
50640 CALL "OS2C02",%X3$,%X4$,KYZ29$(22,10),QQ1$
50645 OS2$=""; READ (Z[30],KEY=KYZ29$(22,10),DOM=*NEXT)OS2$
50670 CALL "*wingrp;disable",YES_TOPS.GRP$; CALL "*wingrp;disable",TOPS_BUTTON.GRP$
50672 ITEM_CODE$=KYZ29$(22,10)
50675 CALL "FMGODB;ITEM_CODE_VAL",ITEM_CODE$,ERR_MSG$,VAR_TAG$
50680 GOSUB POST_ITEM_CODE
50685 IF STP(OSP_PARMS$(449,5),3)<>"" THEN PRINT_FLAGS$=OSP_PARMS$(449,5); GOSUB PRINT_FLAGS_IN; GOSUB PRINT_FLAGS_OUT ! SSP#227803
50687 SPECIAL_SHIPPING$="N"
50689 TOPS_LINE$="Y" ! SSP225003
50690 IF MID(OSP_PARMS$,455,4)<>DIM(4) THEN WHSE_CODE_PKLIST$=MID(OSP_PARMS$,455,4) ! SSP22503
50691 IF MID(OSP_PARMS$,648,1)="Y" AND MID(O2$,238,4)<>DIM(4) THEN WHSE_CODE_PKLIST$=MID(O2$,238,4) ! WO222052/225003
50692 REFRESH_FLG=1
50695 RETURN 
50699 ! *************************************
50700 GROSS_PROFIT_VAL:! SSP198835 jdf
50703 GP_YES$="" ! SSP198835 jdf
50705 IF NUM(GP_PERCENT$,ERR=*NEXT)<10 THEN MSGBOX MSG("MODIFY"),MSG("FMGODB_990"),"YESNO,1,?",GP_YES$ ! SSP198835 jdf
50710 IF MID(FMP$,61,1)="Y" AND GP_YES$="YES" THEN NEXT_ID=SELL_PRICE_EXT.CTL ! SSP198835 jdf
50715 IF MID(FMP$,61,1)<>"Y" AND GP_YES$="YES" THEN NEXT_ID=UNIT_SELL_PRICE.CTL ! SSP198835 jdf
50720 REFRESH_FLG=1 ! SSP198835 jdf
50725 RETURN ! SSP198835 jdf
50730 ! **************************************** SSP198835 jdf
51000 FMP_ERR: Z(9)=HFN; OPEN (Z(9))"FMP"+%C$; GOTO 0765
51300 ! Warehouse Availability Query
51310 AVAIL_QRY: QRY_VAL$=""
51320 PROCESS "QRY_IC1.2","../ICG/IC.EN",QRY_VAL$ ! SSP 307316
51330 IF NUL(QRY_VAL$) THEN EXIT ELSE WHSE$=QRY_VAL$
51340 NEXT_ID=SELL_UM.CTL; REFRESH_FLG=1
51345 RETURN 
51400 ! Inventory Available Calculation
51410 AVAIL_CALC:
51415 %ONHAND=0
51420 ENTER BEG_BAL,RECEIPTS,SALES,ADJ,INV_QTY_PER,INV_UM$
51430 ZZPARM=HFN; OPEN (ZZPARM)"ZZPARM"
51440 READ (ZZPARM,KEY="U/M"+INV_UM$,DOM=51490)U1$,U1,U2
51450 IF U1$(20,1)<>"Y" THEN UM_AMT=INV_QTY_PER ELSE UM_AMT=U2
51460 IF UM_AMT=0 THEN UM_AMT=1
51470 %ONHAND=(BEG_BAL+RECEIPTS-SALES+ADJ) ! SSP 307316
51472 ! %ONHAND=(BEG_BAL+RECEIPTS-SALES+ADJ)/UM_AMT
51490 CLOSE (ZZPARM)
51495 EXIT 
51510 AVAIL_TOPS: QRY_VAL$="" ! SSP 307461
51520 PROCESS "QRY_OSD_OE","../OSG/OS.EN",QRY_VAL$ ! SSP 307461
51530 IF NUL(QRY_VAL$) THEN EXIT ELSE TOPS_ITEM_CODE$=QRY_VAL$; GOSUB POST_TOPS_ITEM_CODE ! SSP 307461
51540 NEXT_ID=TF_DESC.CTL; REFRESH_FLG=1 ! SSP 307461
51545 RETURN ! SSP 307461
52000 READ_IC2:! SSP 196080
52010 DIM IC2[30] ! WO273055
52015 IF PLANT_CODE$="" THEN PL_C$=DIM(4) ELSE PL_C$=PLANT_CODE$
52020 READ (Z(27),KEY=%CUST_KEY$+ITEM_CODE$+VEND_DIV$+VEND_CODE$+PL_C$,DOM=*RETURN)IC2$,IC2{ALL}
52030 RETURN 
52040 IC2_COST: IC2_COST=0,OLD=0
52042 IF IC2[14]=0 THEN IC2[14]=1 ! SSP 227832
52045 IF IC2[0]<>0 THEN IC2_COST=IC2[0]*COST_QTY_PER/IC2[14] ! SSP 227832
52048 IF IC2[1]=0 THEN GOTO *RETURN
52050 DIM C[12,1] ! WO273055
52052 FOR I=1 TO 6; C[I,0]=IC2[1+(I-1)*2],C[I,1]=IC2[2+(I-1)*2]; NEXT I
52054 FOR I=7 TO 12; C[I,0]=IC2[1+(I+1)*2],C[I,1]=IC2[2+(I+1)*2]; NEXT I ! WO273055, breaks 7 through 12 are in IC2[17] through [28]
52056 FOR I=1 TO 12 ! WO273055, additional 6 cost breaks
52060 IF OPEN_QTY<C[I,0] THEN EXITTO 52075
52065 IF C[I,0]<>0 THEN IC2_COST=C[I,1]*COST_QTY_PER/IC2[14]
52070 NEXT I
52075 ! IC2_COST=OLD,OLD=0 ; !ssp 227832
52080 RETURN 
52200 MODIFY_REV_DATE:! SSP#200645-added routine (lines 52200-52295)          
52202 REM "This routine will prompt the user to allow them to change           
52203 REM "the Item Revision Date for the current item being ordered.          
52204 REM "This will only be allowed if the Order Entry Parameter is           
52205 REM "set. The parameter can be found on Page 2 of the Order              
52206 REM "Entry Parameters program.                                           
52230 MSG_TITLE$="Modify Item Revision Date"
52240 MSG_TEXT$="Do you wish to change the Item Revision Date? (Current Date: "+FM1.ITEM_REVISION$+")"
52250 MSGBOX MSG_TEXT$,MSG_TITLE$,"INFO,YESNO",MSG_RESP$
52260 IF MSG_RESP$="YES" THEN CALL "FM2ODR","",%CUST_KEY$+ITEM_CODE$,Z[3]
52295 RETURN 
52300 ZERO_INVENTORY_CHK:! Restrict entry of orders with zero inventory available in stock?    subroutine created by jdf, SSP200956
52305 ON_HAND=0,TF_COMMITTED=0,AVAILABLE=0,ON_PO=0,POSSIBLE=0,REFRESH_FLG=1 ! SSP200956  jdf
52315 READ DATA FROM "" TO IC1$; FIND (Z[26],KEY=FN_CUST_PART$+ITEM_CODE$+WHSE$,DOM=*NEXT,REC=IC1$) ! SSP200956  jdf
52320 ON_HAND=IC1.BEG_BAL+IC1.RECEIPTS-IC1.SALES+IC1.ADJUSTMENTS ! SSP200956 SSP 229365
52325 IF FS1.WORK_ORDER$="Y" THEN T3=IC1.TF_COMMITTED*1.15 ELSE T3=IC1.TF_COMMITTED ! SSP200956 jdf
52330 TF_COMMITTED=T3 ! SSP200956 jdf  SSP 229365
52335 AVAILABLE=ON_HAND-TF_COMMITTED ! SSP200956  jdf
52340 ON_PO=IC1.ON_PO ! SSP200956  jdf SSP 229365
52345 POSSIBLE=AVAILABLE+ON_PO ! SSP200956 jdf
52347 IF MID(%OP_SECURITY$,41,1)="Y" AND POSSIBLE<OPEN_QTY THEN {! SSP200956 jdf SSP 229365    
52350 MSGBOX ("The number of items ordered is more than the number available! Entry will be deleted since Qty ordered exceeds available Qty for this location"),MSG("WARNING") ! SSP200956  jdf
52353 DEL_REC=1 ! SSP200956 jdf
52355 EXITTO DELETE_REC ! SSP200956  jdf  SSP229365
52360  } ! SSP200956 jdf SSP 229365
52370 IF IC0.NEVER_BACKORDER$="Y" AND AVAILABLE<=0 THEN {! SSP200956 jdf SSP 229365    
52380 MSGBOX ("Line will be deleted, no available inventory for item set to never backorder"),MSG("WARNING") ! SSP 229365
52385 DEL_REC=1 ! SSP 229365
52390 EXITTO DELETE_REC ! SSP 229365
52395  } ! SSP 229365
52400 RETURN ! SSP 229365
53000 REM "          ! SSP219402 jdf
53010 POST_FMGODB_5:! Panel FMGODB.5 display  SSP219402 jdf
53015 FORCE_SHIP=0 ! SSP 238502
53020 SHIPPED=ORIG_QTY_ORDERED-QTY_BO_RCV_FS3 ! SSP219402 jdf
53030 REFRESH_FLG=1 ! SSP219402 jdf
53040 IF FS1.ORDER_TYPE_1$<>" " THEN {! SSP219402 jdf
53050 ST1=(FN%QTY_IN_UM(ORIG_QTY_ORDERED,SELL_UM$,QTY_IN_SELL_UM)) ! SSP219402 jdf SSP 226134
53060  } ELSE {! SSP219402 jdf
53070 ST1=-FN%QTY_IN_UM(ORIG_QTY_ORDERED,SELL_UM$,QTY_IN_SELL_UM) ! SSP219402 jdf
53080  } ! SSP219402 jdf
53090 ST2=FN%QTY_IN_UM(QTY_UNBILLED_SHIP,SELL_UM$,QTY_IN_SELL_UM) ! SSP219402 jdf
53100 ST3=FN%QTY_IN_UM(QTY_BO_RCV_FS3,SELL_UM$,QTY_IN_SELL_UM) ! SSP219402 jdf
53110 ST4=FN%QTY_IN_UM(INVD_TO_DATE_QTY,SELL_UM$,QTY_IN_SELL_UM) ! SSP219402 jdf
53120 ST5=FN%QTY_IN_UM(QTY_UNBILLED_SHIP,COST_UM$,COST_QTY_PER) ! SSP219402 jdf
53130 IF FS1.ORDER_TYPE_1$=" " AND STP(PO_CODE$)<>"" THEN ST5=FN%QTY_IN_UM(QTY_UNBILLED_SHIP,COST_UM$,COST_QTY_PER) ELSE ST5=0; END_IF ; IF %NEW=1 THEN SHOW CONTROL WZ_FINISH.CTL ! SSP219402 jdf !ssp#239714
53140 IF POS(FS1.ORDER_TYPE_1$="RW")<>0 AND IC0.LOT_INV_FOR_THIS_ITM$<>"Y" THEN GOTO *NEXT ELSE GOTO *RETURN ! SSP 238502
53142 CALL "*WINGRP;UNLOCK",FORCE_SHIP.GRP$; CALL "*WINGRP;ENABLE",FORCE_SHIP.GRP$ ! SSP 238502
53190 RETURN ! SSP219402 jdf SSP 238502
53199 ! ************************************************************
54000 FORCE_SHP:! SSP 238502; Allow for force shipment- modify backorder amounts to shipped - ONLY FOR R/W type orders and NON- LOTTED Items. 54000-54100
54020 IF ID$="ST2" THEN ST3=ST1-ST2
54030 IF ID$="ST3" THEN ST2=ST1-ST3
54040 REFRESH_FLG=1
54050 IF SELL_UM$<>MID(S_UM$,4,4) THEN DIM S_UM$(25); S_UM$(4,4)=SELL_UM$; FIND (Z[13],KEY="U/M"+S_UM$(4,4),DOM=*NEXT)S_UM$,S_UM[0],S_UM[1]
54060 IF MID(S_UM$,20,1)="Y" THEN QTY_UNBILLED_SHIP=ST2*S_UM[1] ELSE QTY_UNBILLED_SHIP=ST2*QTY_IN_SELL_UM ! Set quantity 
54065 QTY_UNBILLED_SHIP$=STR(QTY_UNBILLED_SHIP)
54070 IF MID(S_UM$,20,1)="Y" THEN QTY_BO_RCV_FS3=ST3*S_UM[1] ELSE QTY_BO_RCV_FS3=ST3*QTY_IN_SELL_UM ! Set quantity  
54075 QTY_BO_RCV_FS3$=STR(QTY_BO_RCV_FS3)
54090 FORCE_SHIP=1
54100 RETURN ! SSP 238502
55000 LOAD_DETAILS:! SSP242299 jdf (5500 55000-55690)
55005 CALL "*WINGRP;HIDE",TOPS_BUTTON.GRP$ ! SSP 307461
55006 IF USING_TOPS THEN DISABLE CONTROL BT_TOPS_QRY.CTL
55008 CALL "ZZ2PRP","OS",RESULT$,TF_DATE$; IF RESULT$="Y" THEN USING_TOPS=1 ELSE USING_TOPS=0 ! SSP 307461
55010 TOTAL_AMT=0,TOTAL_GP=0,TOTAL_COST_EXT=0,LINE_COUNT=0 ! SSP 212984
55020 ORDER_LINES_IOL:IOLIST COL1$,COL2$,COL3$,COL3I$,COL4$,COL4I$,COL5$,GP$,COL6$,COL7$ ! ssp 197895,ssp 212984
55030 LIST_BOX LOAD ORDER_LINES.CTL,""
55040 IF _FS2=0 THEN OPEN (HFN,IOL=*)"FS2"+%C$; _FS2=LFO
55050 READ (_FS2,KEY=ORDER_DIV$+ORDER_NUM$,DOM=*NEXT)
55060 NEXT_FS2_REC:READ (_FS2,END=DONE_LOADING,REC=FS2$)
55070 IF FS2.ORDER_DIV$<>ORDER_DIV$ OR FS2.ORDER_NUM$<>ORDER_NUM$ THEN GOTO DONE_LOADING
55080 LINE1: COL1$=FS2.ORDER_LINE_NUM$,COL2$=FS2.TF_DESC$
55090 GOSUB SHIP_FROM_IN_COL6
55100 GOSUB LOAD_LIST
55110 LINE2:IF FS2.LINE_TYPE$="M" THEN GOTO NEXT_FS2_REC
55112 CIC_CODE_DISP$=""; IF DISP_CIC$="Y" THEN FIND (_FM1,KEY=CUST_DIV$+CUST_CODE$+FS2.ITEM_CODE$,DOM=*NEXT)FM1_CIC$; CIC_CODE_DISP$=STP(MID(FM1_CIC$,350,20),2) ! SSP 307490
55115 TOPS_DISP$=""; IF USING_TOPS THEN GOSUB LINE_2_TOPS; IF STP(TOPS_DISP$,2)="" THEN IF STP(CIC_CODE_DISP$,2)<>"" THEN TOPS_DISP$="["+CIC_CODE_DISP$+"]" END_IF ; END_IF ELSE IF STP(CIC_CODE_DISP$,2)<>"" THEN TOPS_DISP$="["+CIC_CODE_DISP$+"]" ! ssp 307461 SSP 307461
55120 IF NUL(FS2.CUST_DIV$+FS2.CUST_CODE$) THEN COL2$=FS2.ITEM_CODE$+" "+TOPS_DISP$ ELSE COL2$="["+FN%ZZDISP$(FS2.CUST_DIV$+FS2.CUST_CODE$,"A/R")+"] "+FS2.ITEM_CODE$+" "+TOPS_DISP$ ! SSP 307461
55130 COL3I$=STP(FS2.SELL_UM$,2)+"/"+STP(STR(FS2.QTY_IN_SELL_UM:"-##,###"),2)
55140 LINE_COUNT+=1,TOTAL_AMT+=FS2.SELL_PRICE_EXT,TOTAL_GP+=FS2.SELL_PRICE_EXT-FS2.COST_EXT,TOTAL_COST_EXT+=FS2.COST_EXT,PRINT_QTY=FN%QTY_IN_UM(FS2.OPEN_QTY,FS2.SELL_UM$,FS2.QTY_IN_SELL_UM); COL3$=STR(PRINT_QTY:TBL(ABS(SGN(FPT(PRINT_QTY))),"-#,###,###","-#,###,###.##")),COL4$=STR(FS2.SELL_PRICE_EXT:"##,###,###.00-"),COL4I$=STR(FS2.COST_EXT:"##,###,###.00-"),COL5$=STR(FS2.SELL_PRICE_EXT-FS2.COST_EXT:"##,###,###.00-") ! SSP 212984
55150 PRECISION 4; GP$="0.00",GP$=STR((FS2.SELL_PRICE_EXT-FS2.COST_EXT)/FS2.SELL_PRICE_EXT*100:"###.00-",ERR=*NEXT) ! ssp 197895
55160 PRECISION 2 ! ssp 197895
55170 DO_SHIPTOS:
55180 IF NOT(FN%ISOPEN(_PO3)) THEN _PO3=HFN; OPEN (_PO3,IOL=*,ERR=NEXT_FS2_REC)"PO3"+%C$; CALL "ZZWIOL",_PO3,"B",PO3_IOL$; DIM GENERAL$:CPL(PO3_IOL$),SPECIAL$:CPL(PO3_IOL$) ! 256888
55190 IF _FM0=0 THEN _FM0=HFN; OPEN (_FM0,IOL=*,ERR=NEXT_FS2_REC)"FM0"+%C$; CALL "ZZWIOL",_FM0,"B",FM0_IOL$; DIM FM0$:CPL(FM0_IOL$)
55200 IF FS2.SPECIAL_SHIPPING$="Y" THEN GOTO DO_SPECIAL_SHIPPING
55210 ! General shipping only, print the one line & we're done
55220 READ DATA FROM "" TO GENERAL$; FIND (_PO3,KEY=ORDER_DIV$+ORDER_NUM$+DIM(5),DOM=*NEXT,REC=GENERAL$)
55230 COL6$="To:"+GENERAL.LOC_TYPE$+" "+GENERAL.LOC_CODE$+" "+GENERAL.COMP_NAME_TO_SHIP_TO$
55240 GOSUB LOAD_LIST
55250 GOTO NEXT_FS2_REC
55260 DO_SPECIAL_SHIPPING:! loop through records for line and make multiple lines
55270 GOSUB LOAD_LIST ! Go ahead and put out line, then add special shipping lines
55280 CALL "ZZWLKU;PARSE_ORD",ORDER$,ORDER_DIV$,ORDER_NUM$; ORDER$=ORDER_DIV$+ORDER_NUM$
55290 READ (_PO3,KEY=ORDER_DIV$+ORDER_NUM$+" "+FS2.ORDER_LINE_NUM$,DOM=*NEXT)
55300 NEXT_SPECIAL_REC: READ DATA FROM "" TO SPECIAL$; READ (_PO3,END=END_SPECIAL_SHIPPING,REC=SPECIAL$); IF SPECIAL.PO_DIV$<>ORDER_DIV$ OR SPECIAL.PO_NUM$(1,LEN(ORDER_NUM$))<>ORDER_NUM$ OR SPECIAL.ORDER_LINE_NUM$<>FS2.ORDER_LINE_NUM$ THEN GOTO END_SPECIAL_SHIPPING
55310 PRINT_QTY=FN%QTY_IN_UM(SPECIAL.SHIP_QTY,FS2.SELL_UM$,FS2.QTY_IN_SELL_UM)
55320 COL6$=STR(PRINT_QTY:TBL(ABS(SGN(FPT(PRINT_QTY))),"-#,###,###","-#,###,###.##"))+" To: "+SPECIAL.LOC_TYPE$+" "+SPECIAL.LOC_CODE$+" "+SPECIAL.COMP_NAME_TO_SHIP_TO$
55330 GOSUB LOAD_LIST
55340 GOTO NEXT_SPECIAL_REC
55350 END_SPECIAL_SHIPPING:
55360 DONE_WITH_FS2:GOTO NEXT_FS2_REC
55370 DONE_LOADING: GP$="0.00"; PRECISION 4; GP$=STR(TOTAL_GP/TOTAL_AMT*100:"###.00-",ERR=*NEXT) ! ssp 197895
55380 PRECISION 2 ! Print totals, freight, deposit ! ssp 197895
55390 IF LINE_COUNT>0 THEN COL3I$='BR'+MSG("FMGODM_15"),COL4$='BR'+STR(TOTAL_AMT:"##,###,###.00-"),COL4I$='BR'+STR(TOTAL_COST_EXT:"##,###,###.00-"),COL5$='BR'+STR(TOTAL_GP:"##,###,###.00-"); GOSUB LOAD_LIST ! ssp 212984
55400 IF FRT_AMT+FRT_FROM_LOTS<>0 THEN COL3I$='_BLUE'+'WHITE'+MSG("FMGODM_16"),COL4$='_BLUE'+'WHITE'+STR(FRT_AMT+FRT_FROM_LOTS:"##,###,###.00-"); GOSUB LOAD_LIST ! SSP 192718
55410 IF DEPOSIT_AMT<>0 THEN COL3I$='_GREEN'+'WHITE'+MSG("FMGODM_17"),COL4$='_GREEN'+'WHITE'+STR(DEPOSIT_AMT:"##,###,###.00-"); GOSUB LOAD_DEPOSIT_INFO; GOSUB LOAD_LIST
55420 RETURN 
55430 LOAD_LIST: LIST_BOX LOAD ORDER_LINES.CTL,0,REC(IOL=ORDER_LINES_IOL)
55440 READ DATA FROM "" TO IOL=ORDER_LINES_IOL
55450 RETURN 
55460 SHIP_FROM_IN_COL6:
55470 ! Open file and load iolist if not open
55480 IF STP(FS2.PO_CODE$,2)<>"" THEN GOTO DO_PO
55490 IF _FM0=0 THEN _FM0=HFN; OPEN (_FM0,IOL=*,ERR=*RETURN)"FM0"+%C$; CALL "ZZWIOL",_FM0,"B",FM0_IOL$; DIM FM0$:CPL(FM0_IOL$)
55500 READ DATA FROM "" TO FM0$
55510 FIND (_FM0,KEY="D"+DIM(10)+FS2.WHSE$,DOM=*NEXT,REC=FM0$)
55520 COL6$="From: "+FS2.WHSE$+"-"+FM0.LOC_DESC$
55530 GOTO *RETURN
55540 DO_PO:! there is a p/O code
55550 IF _AP4=0 THEN _AP4=HFN; OPEN (_AP4,IOL=*,ERR=*RETURN)"AP4"+%C$; CALL "ZZWIOL",_AP4,"B",AP4_IOL$; DIM AP4$:CPL(AP4_IOL$)
55560 READ DATA FROM "" TO AP4$; FIND (_AP4,KEY=FS2.VEND_DIV$+FS2.VEND_CODE$,DOM=*RETURN,REC=AP4$)
55570 %CLOSE_PO1=0; FIND (Z(10),KEY=_KEY$(1,8)+FS2.PO_CODE$,DOM=*NEXT); GOTO 55590 ! ssp 192843   , SSP198828
55580 %CLOSE_PO1=1; COL6$='RED'+ORDER$+"-"+FS2.PO_CODE$+"-> ** P/O Closed for Vendor :"+AP4.VEND_NAME$; GOTO *RETURN ! ssp 192843, ssp198828
55590 COL6$=ORDER$+"-"+FS2.PO_CODE$+"->"+AP4.VEND_NAME$
55600 RETURN 
55610 LOAD_DEPOSIT_INFO:! load up check number and date if available, else leave blank
55620 DEPOSIT_INFO$=""
55630 IF NOT(NUL(DEPOSIT_CHECK_NUM$)) THEN DEPOSIT_INFO$=MSG("FMGODA_14")+" "+STP(DEPOSIT_CHECK_NUM$,1)
55640 IF NOT(NUL(DEPOSIT_CHECK_DATE$)) THEN DEPOSIT_INFO$+="   "+MSG("FMGODA_15")+" "+FN%FMT_TFDATE$(DEPOSIT_CHECK_DATE$,MSG("STD_MDY1"))
55650 IF NOT(NUL(DEPOSIT_INFO$)) THEN {
55660 COL5$='_GREEN'+'WHITE'+" " ! color column 5 green for continuity, but no data
55670 COL6$='_GREEN'+'WHITE'+DEPOSIT_INFO$
55680  }
55690 RETURN 
55692 LINE_2_TOPS:! SSP 307461
55693 TOPS_DISP$="" ! SSP 307461
55694 FIND (Z[30],KEY=FS2.ITEM_CODE$,DOM=*NEXT)TOS2$; TOPS_DISP$="("+STP(MID(TOS2$,11,15),2)+")" ! SSP 307461
55695 RETURN ! SSP 307461
55700 CHECK_V7:! SSP242299 jdf
55705 IGNORE_V7_EXIT=0
55706 IF SCRN_ID$="FMGODB.V7" THEN IF STP(ORDER_LINE_NUM$)="" THEN GOTO *RETURN ! SSP 272049
55710 IF LINE_TYPE$<>"M" AND (STP(SELL_UM$)="" OR STP(COST_UM$)="") AND STP(ORDER_LINE_NUM$)<>"" THEN IF STP(ITEM_CODE$)="" THEN NEXT_ID=ITEM_CODE.CTL ELSE NEXT_ID=SELL_UM.CTL; END_IF ; IGNORE_V7_EXIT=1
55715 IF NOT(NUL(PO_CODE$)) AND POS("P"=PRINT_FLAGS$)<>0 AND NUL(WHSE_CODE_PKLIST$) THEN NEXT_ID=WHSE_CODE_PKLIST.CTL; IGNORE_V7_EXIT=1 ! SSP 284128
55720 IF LINE_TYPE$<>"M" THEN IF NOT(NUL(PO_CODE$)) AND NUL(VENDOR$) THEN MSGBOX MSG("FMGODB_89"),MSG("MB_ATTN"),"!"; NEXT_ID=VENDOR.CTL; IGNORE_V7_EXIT=1
55722 IF CUSTOM$="Y" AND NUL(CSTM_ITEM_LINE_TYPE$) THEN MSGBOX MSG("FMGODB_49"),MSG("MB_ATTN"),"!"; ENABLE CONTROL CSTM_ITEM_LINE_TYPE.CTL; NEXT_ID=CSTM_ITEM_LINE_TYPE.CTL; REFRESH_FLG=1; IGNORE_V7_EXIT=1
55724 IF LINE_TYPE$<>"M" THEN FIND (Z[9],KEY="D"+FS1_CUSTOMER$,DOM=*NEXT)O2$; IF MID(O2$,62,1)="Y" AND STP(RC_NUMBER$)="" AND %OP_PARM$(310,1)="Y" THEN MSGBOX MSG("RC_NUM_REQ"),MSG("WARNING"),"STOP,TIM=1"; NEXT_ID=RC_NUMBER.CTL,IGNORE_V7_EXIT=1 ! SSP 272049 SSP 283343
55730 RETURN 
55740 V7_FOLDER_2:
55742 IF LINE_TYPE$="M" THEN GOSUB SETUP_WHSE; CALL "*wingrp;Show",MESSAGE_WHSE.GRP$; CALL "*wingrp;enable",LINE_TYPE_M.GRP$; NEXT_ID=TF_DESC.CTL; REFRESH_FLG=1 ELSE CALL "*wingrp;enable",ITEM_ENTRY.GRP$; GOSUB CHECK_TOPS ! SSP 307461
55745 GOSUB FOLDER_2_SETUP
55746 ! OSUB SET_FIELDS; GOSUB FOLDER_2_SETUP
55748 IF SCRN_ID$="FMGODB.V7" THEN IF (POS(LINE_TYPE$="INMS")<>0) THEN CUSTOMER$=""; CALL "*WINGRP;HIDE",CUSTOMER.GRP$ ELSE CALL "*WINGRP;SHOW",CUSTOMER.GRP$ ! SSP 242299 JVV
55749 ! NO_SPEC=1 THEN RETURN ! F UID="jvv" THEN ESCAPE 
55750 ! F NO_SPEC=0 THEN NEXT_ID=SPECS_REQ.CTL ELSE IF CUSTOM$="Y" OR NO_SPEC=1 THEN NEXT_ID=CSTM_LINE_ITEM_TYPE.CTL ELSE NEXT_ID=ITEM_CODE.CTL
55760 IF CIC_FLG$="Y" AND POS(LINE_TYPE$=" IC")<>0 THEN CIC_CODE$=""; CALL "*wingrp;show",CIC.GRP$ ELSE CALL "*wingrp;hide",CIC.GRP$ ! SSP 307456
55780 RETURN 
55800 V7_FOLDER_3:! ssp 242299
55803 IF LINE_TYPE$<>"M" AND NUL(PROD_CODE$) THEN NEXT_ID=PROD_CODE.CTL; RETURN 
55804 ! IF NUL(ITEM_CODE$) THEN NEXT_ID=ITEM_CODE.CTL; RETURN 
55805 IF POS(FS1.ORDER_TYPE_1$="RW")=0 AND NOT(NUL(MID(%OP_PARM$,214,5))) THEN PRINT_FLAGS$=%OP_PARM$(214,5) ELSE IF POS(FS1.ORDER_TYPE_1$="RW")<>0 AND NOT(NUL(MID(%OP_PARM$,292,5))) THEN PRINT_FLAGS$=%OP_PARM$(292,5) ! ELSE PRINT_FLAGS$=PAD("SI",5) !SSP 283343            
55808 GOSUB SETUP_WHSE; GOSUB FOLDER_3_SETUP; IF LINE_TYPE$="M" THEN RETURN ! SSP 242299
55809 PERFORM PGN+";CALCULATIONS"
55810 ITEM_TITLE$=STP(ITEM_CODE$,1)+" - "+TF_DESC$; IF (LINE_TYPE$="C" OR LINE_TYPE$=" ") AND NOT(NUL(CUST_DIV$+CUST_CODE$)) THEN ITEM_TITLE$=FN%ZZDISP$(CUST_DIV$+CUST_CODE$,"A/R")+"-"+ITEM_TITLE$
55815 IF NUL(PO_CODE$) THEN NEXT_ID=WHSE.CTL ELSE IF POS("P"=PRINT_FLAGS$)<>0 THEN NEXT_ID=WHSE_CODE_PKLIST.CTL ELSE IF MID(S_UM$,20,1)="Y" THEN NEXT_ID=DISPLAY_SELL_QTY.CTL ELSE NEXT_ID=QTY_IN_SELL_UM.CTL ! ssp 242299
55820 ! IF LINE_TYPE$="S" AND NOT(NUL(PO_CODE$)) THEN IF POS("P"=PRINT_FLAGS$)<>0 THEN NEXT_ID=WHSE_CODE_PKLIST.CTL ELSE NEXT_ID=DISPLAY_SELL_QTY.CTL ! SSP 242299
55821 IF LINE_TYPE$="S" THEN NEXT_ID=TF_DESC.CTL ! P"=PRINT_FLAGS$)<>0 THEN NEXT_ID=WHSE_CODE_PKLIST.CTL ELSE NEXT_ID=DISPLAY_SELL_QTY.CTL ! SSP 242299
55850 RETURN 
56000 REM "193611-Stopover order. When you enter several messages lines tied  
56002 REM "193639-Program FMGODB on a billable release, line type is no longer
56004 REM "193611-Stopover order. When you enter several messages lines tied  
56005 ! "193332-GUI programs and panels are hardwired to look in tf2g       
56006 ! "195473-When she enters orders and system says she does not have    
56007 ! "       lots to process and puts all lines on B/Order"
56008 ! "195084-Per Julie, test the From field in GUI order entry. Customer 
56009 ! "       code should default."
56010 ! "184532-See 180100 for Tully  Wihr. Require entry or RC Number new
56011 ! "       A/R,R1 screen for parameter/changes to order entry."
56012 REM "194087-Changes made at Whitepaper during 2nd week of install       
56013 ! 196080-Stock item with quantity breaks, pulls in different sell    
56014 ! "196904-Program FMGODB Order number 500899. Line 7 and 8 are Line   
56015 ! "191008-Order entry will not choose the oldest whse location if the
56016 ! item is a general inventory item."
56018 REM "190538-Item price class pricing by bin identifier.                 
56019 ! "198828-Program FMGODM, Message on the order summary screen "PO     
56020 ! "       closed to vendor disappears when you double click the line."
56022 REM "197945-WMS picking.  if zero pick or qty<ord                       
56025 ! "200952-The option to restrict a user from entering a negative      
56027 ! "199731-RC Number is entered on one panel but the check for the RC
56028 ! "       number is on the next panel."
56030 ! "201536-Reorder Notice, message does not work in GUI that should pop
56031 ! "       up in order entry if you are below a reorder point."
56040 ! "201116-How do you do customer rebates                              
56042 ! "201618-lev5 & 7-modify specs question should not come up when      
56043 REM "202393-QATST and TFCentral - Reorder Points, In Ord Entry, always  
56044 ! "201260-GUI - Issue on Backorders when you have available inventory,
56045 ! "       but order more than available."
56046 REM "201823-Provide the ability to set the taxable flag  by Item 
56050 ! "202907-Companion items broken in GUI. Add special charge or message
56051 ! "       line and it does not come through to order."
56052 REM "199045-Workorder to restrict Finder's Fees to items assigned to
56054 REM "208671-Order Entry - GUI Order Lines. Redesign based upon a        
56056 ! 225003/222052 - office product type item, set flag, set whse
56058 REM "223633-Order entry - if parameter is set to N for manual lot       
56059 ! "224626-Special Charge Price Field works like previous line in      
56060 REM "224709-When you change the vendor on a sales order for stock items 
56061 REM "233523-When there is a suggested item setup getting PE 81 in       
56062 REM "232856-GUI Releases pulling wrong inventory start number           
56063 REM "233489-Message concerning blank product code after line was        
56064 REM "233819-Modify qty order to a lower amount, and end up with amount  
56065 REM "234830-When using "special pricing" from pricing table, if you type
56066 REM "224018-Order Entry Grid...RFQ not populating correctly in the      
56068 REM "238502-GUI: Cannot force an item from backorder to shipped in      
56070 REM "226319-Order Entry Grid: There are issues when trying to enter a   
56072 REM "240444-RFQ-special Charges and message lines are not correcty      
56073 REM "239163-change the unit of measure from Lot to M it does not let us 
56074 REM "242903-Program exception in GUI Grid & Non Grid, when customer     
56075 REM "245367-FMGODB - Special charge - extension only.  Cannot access    
56076 REM "245964-Need to change the password on the override key for deleting
56077 REM "253961-Modify GUI Order Entry for R type orders to allow billable special charge order lines
56078 REM "262159-Add M type line with PO code and whse for PL printing but   
56079 REM "263238-Delay in Order Line entry if using Quotes at line level
56080 REM "250189-Negative DT is not printing the quantity order on stock     
56081 REM "258392-Manual enter order line only first line has "fixed price"   
56082 REM "263914-Issue with the order entry grid not looking at parameter in 
56084 ! WO264206 - Default number of storage months
56085 REM "267380-Message line with PO attached aren't getting a whse to print
56086 REM "272049-GUI:  Order Line Entry in Summary Grid - PO Closed to Vendor
56087 REM "273055-Expand IC2 for 6 additional cost breaks, allow entry in GUI 
56088 REM "272120-GUI Summary Grid issue - Negative release with multiple lots
56089 REM "276772-Multiple Finder's Fees per Customer/Item/Order Line.        
56090 REM "278826-GUI Order Entry will allow operator to enter a PO code for  
56091 REM "283343-Print on Flag on order line is not being set correctly      
56092 REM "283261-O/P System Parameter; for new graphical order trigger       
56093 REM "284128-Summary Grid:  For PO line if you check print on of packing 
56094 REM "284087-A sales order that contains a negative release does not     
56095 REM "285794-Issue with Companion item set to sell as zero.  One item    
56096 REM "286885-Workorder quote:  Would like the warehouse restriction in     
56097 REM "290903-When CIC code is used to select item in order entry, user   
56098 REM "292036-Two orders (02-500070 and 02-500011) with items that can't  
56099 REM "292036-Two orders (02-500070 and 02-500011) with items that can't  
56100 REM "297345-Most of our users are encoutering an error after we upgraded
56101 REM "238561-Gui Order Entry will allow you to enter a whse location     
56102 REM "307159-Disable legacy Grid Order Entry, replace with Summary OE    
56103 REM "306930-When the CIC code is used to enter an item code, the order  
56104 REM "307269-Message Display in GUI for Reorder Notice                   
56105 REM "307292-DBSPT-94483 Bypass operator security by divison for warehous
56106 REM "307316-Inventory Loc shows 0 on hand in O/E query                  
56107 REM "307322-Incorrect Multi Commission payable when distributor         
56108 REM "307330-DBSPT-110365 Unhook warehouse code from security by operator
56109 REM "307342-Default Print on Flags not correct in GUI order entry       
56110 REM "307430-DBD-333;Add 101 to some of 288's company specfic code       
56111 REM "307447-DBSPT-161865 add company specific code for 101 to FMGODB    
56112 REM "307456-Add support for CIC in GUI Summary Order Line entry         
56113 REM "307461-Display Office Supply Item in GUI Ordr Entry                
56114 REM "307462-Security by operator division restriction also restricts the Warehouse code
56115 REM "307463-Allow access to all warehouses even if security by operator division restriction. 
56116 REM "307468-DBD-246 Order Entry Right Query Warehouse code  lookup does 
56117 REM "307483-DBD-457:Support for IMS price in purchase order line        
56118 REM "307490-Add CIC Code to order summary list box view                 
56119 REM "307477-Changes to Carton Label maintenance and Print               
