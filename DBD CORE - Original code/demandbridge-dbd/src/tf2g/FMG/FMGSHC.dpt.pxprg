0010 ! FMGSHC - Requisition Charge Setup
0035 REM "5.6 - 02/27/08 - 12.7675 - dpt - SSP# 199421
0037 REM "199421-Requisiton Charges in GUI                                   
0040 REM "Copyright 2008 DemandBridge, Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "FMGSHC","../FMG/FM.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=2,_FIRST_KEY=0,_FIRST_FIELD=0,MAX_BREAK=10,BREAK_CNT=0; REM SSP 199421
0150 GOSUB SETUP_KEYS
0155 X0$="FMGSHC"; X1$="Requisition Charges"; CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; IF X1>0 THEN RETURN 
0160 ! 
0165 ! Define File String used by ZZFLES to manage open / close activity and channel allocation.
0170 DIM Z[NUM(X3$(60,3))]
0175 Z$="01O FMP...  02OSFMP...  03O AR1...  04O ARH...  05O FTR...  "
0180 GOSUB OPEN_FILES
0185 ! 
0190 ! Use an easier to read reference to the file channel numbers
0195 _FIL_NO=Z[1],_CUR_FN=Z[2],_AR1=Z[3],_ARH=Z[4],_FTR=Z[5]
0200 FMPIOL$="IOLIST R_CONSTANT$:[CHR(1,SEP=SEP)],CUST_DIV$:[CHR(2,SEP=SEP)],CUST_CODE$:[CHR(8,SEP=SEP)],OP_S_C$:[CHR(10,SEP=SEP)],B_P_DESC$:[CHR(40,SEP=SEP)],CALC_M$:[CHR(1,SEP=SEP)],TYPE_O_C$:[CHR(1,SEP=SEP)],APPLY_O_T$:[CHR(5,SEP=SEP)],OMIT_B_O$:[CHR(1,SEP=SEP)],COMM_CODE$:[CHR(5,SEP=SEP)],COST_CODE$:[CHR(9,SEP=SEP)],APPLY_S_I$:[CHR(1,SEP=SEP)],NO_PRIN_$:[CHR(1,SEP=SEP)],APPLY_SVC$:[CHR(5,SEP=SEP)],AP_M_M_GPA$:[CHR(1,SEP=SEP)],INVT_OWN$:[CHR(1,SEP=SEP)],WHSE_CODE$:[CHR(4,SEP=SEP)],APPLY_PC_SET$:[CHR(2,SEP=SEP)],APPLY_TO_BO$:[CHR(1,SEP=SEP)],WHSE_CODE_IN$:[CHR(4,SEP=SEP)],LINE_ACCT_COST$:[CHR(1,SEP=SEP)],APPLY_TO_TERMS$:[CHR(2,SEP=SEP)],TF_UNUSED$:[CHR(SEP,SIZ=93)],PRICE,MEMO_CHRG,SPER,P_MIN,P_MAX"
0205 FMPIOL$=CPL(FMPIOL$)
0210 FMPKEY$="IOLIST R_CONSTANT$:[CHR(1,SEP=SEP)],CUST_DIV$:[CHR(2,SEP=SEP)],CUST_CODE$:[CHR(8,SEP=SEP)],OP_S_C$:[CHR(10,SEP=SEP)]"
0215 FMPKEY$=CPL(FMPKEY$)
0220 FMPPFX$="R"
0230 ! D0 = unused, D1-D20 = BreakStart[1],BreakRate[1] thru BreakStart[10],BreakRate[10], D21-D30 = unused
0235 FTR_IOL:IOLIST D$,D[0],D[1],D[2],D[3],D[4],D[5],D[6],D[7],D[8],D[9],D[10],D[11],D[12],D[13],D[14],D[15],D[16],D[17],D[18],D[19],D[20],D[21],D[22],D[23],D[24],D[25],D[26],D[27],D[28],D[29],D[30]
0240 ! IO Lists - do not forget to DIM any arrays
0245 DIM D$(48),D[30]
0250 RETURN 
0300 ! 300 - Set up the message library
0306?= IF _ORIG.CALC_M$+"T" THEN ENABLE CONTROL FLDR.FMGSHC.2
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=3
0430 DIM _KEYS$[1:3]; _KEYS$[1]="R_CONSTANT$",_KEYS$[2]="CUSTOMER$",_KEYS$[3]="OP_S_C$"
0440 _KEY1=2
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; READ (_FIL_NO,KEY=R_CONSTANT$,ERR=*RETURN)IOL=FMPIOL$
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)IOL=FMPIOL$
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0700 ! 700 - Set up tabbing between folders
0710 INIT_FOLDER:
0720 SWITCH FOLDER_ID$
0730 CASE "FMGSHC.1"
0735 _FIRST_TAB=B_P_DESC.CTL,_LAST_TAB=COST_CODE.CTL
0740 BREAK
0745 CASE "FMGSHC.2"
0750 _FIRST_TAB=BREAK_1_START.CTL,_LAST_TAB=BREAK_10_RATE.CTL
0755 GOSUB DISPLAY_BREAKS
0760 BREAK
0765 DEFAULT 
0770 END SWITCH 
0775 ! GOSUB ENABLE_GROUPS
0780 NEXT_ID=_FIRST_TAB
0790 EXIT 
0900 ! 900 - Wrapup
0910 WRAPUP:
0915 %CUST_NAME$=""
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0925 ! 
0930 ! Reset all channel references - these held channels defined by ZZFLES
0935 ! the symbols were used for ease of reading, _AR1 is more meaningful than Z[1]
0940 _FIL_NO=0,_CUR_FN=0,_AR1=0,_ARH=0,_FTR=0
0945 GOSUB CLOSE_FILES
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$
1050 READ DATA FROM REC(FMPKEY$,ERR=*NEXT) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)IOL=FMPIOL$
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$; IF _YESNO$="NO" THEN NEXT_ID=CUSTOMER.CTL; GOTO CLEAR_REC
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1415 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,DIV$,CODE$; CUSTOMER$=DIV$+CODE$ ! SSP 189525
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(FMPKEY$,ERR=*NEXT) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1705 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS ! SSP 189525
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0,NEXT_ID=CUSTOMER.CTL
1855 NEXT_FOLDER=FLDR.FMGSHC.1.CTL; REM DISABLE CONTROL FLDR.FMGSHC.2.CTL
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 IF _KEY$(1,1)<>FMPPFX$ THEN GOTO END_OF_FILE
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT)IOL=FMPIOL$; GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT)IOL=FMPIOL$
2095 GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE)
2231 IF _KEY$(1,1)<>FMPPFX$ THEN GOTO START_OF_FILE
2232 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT)IOL=FMPIOL$; GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE)IOL=FMPIOL$
2265 GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 READ (_FIL_NO,KEY=R_CONSTANT$,ERR=*NEXT)IOL=FMPIOL$
2431 _KEY$=KEY(_FIL_NO,ERR=NO_FIRST)
2440 IF _KEY$(1,1)<>FMPPFX$ THEN GOTO NO_FIRST
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT)IOL=FMPIOL$; GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 READ (_FIL_NO,KEY=R_CONSTANT$+$FE$,ERR=*NEXT)IOL=FMPIOL$
2640 _KEY$=KEP(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE)IOL=FMPIOL$; GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=FMPKEY$,ERR=*NEXT ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3061 CUSTOMER$=CUST_DIV$+CUST_CODE$,APPLY_O_T1$=APPLY_O_T$; IF STP(APPLY_O_T$)="" THEN APPLY_O_T$=" "
3062 GOSUB GET_RC_TABLE_REC; REM GOSUB LOAD_BREAKS
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),REC=_CUR$,DOM=WRT)IOL=FMPIOL$
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)IOL=FMPIOL$
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3365 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS ! SSP 189525
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3525 IF FOLDER_ID$="FMGSHC.2" THEN GOSUB DISPLAY_BREAKS
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=R_CONSTANT.CTL ! _FIRST_FIELD=B_P_DESC.CTL
3815 _FIRST_FIELD=_FIRST_TAB
3817 IF CHANGE_FLG>0 THEN GOSUB VALIDATE_CHANGE_FLG
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3825 MSGBOX "CHANGE_FLG: "+STR(CHANGE_FLG)
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9800 ! 
9810 ! Opens all files
9820 OPEN_FILES:
9830 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
9840 RETURN 
9850 ! 
9860 ! Closes all files
9870 CLOSE_FILES:
9880 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9890 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 PRICE$=STR(PRICE)
10030 MEMO_CHRG$=STR(MEMO_CHRG)
10040 SPER$=STR(SPER)
10050 P_MIN$=STR(P_MIN)
10060 P_MAX$=STR(P_MAX)
10070 ! Use the Statement Execute facility to convert the Requisition Charge break data
10080 FOR B=1 TO MAX_BREAK
10090 N=(B*2)-1
10095 ! create BREAK_1_START$=STR(D(1)) thru BREAK_10_START$=STR(D(19))
10100 STMT$="BREAK_"+STR(B)+"_START$=STR(D("+STR(N)+"))"; EXECUTE STMT$
10105 ! create BREAK_1_RATE$=STR(D(2)) thru BREAK_10_RATE$=STR(D(20))
10110 STMT$="BREAK_"+STR(B)+"_RATE$=STR(D("+STR(N+1)+"))"; EXECUTE STMT$
10120 NEXT 
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="PRICE",_X=PRICE.CTL,PRICE=NUM(PRICE$,ERR=NON_NUMERIC)
11030 _X$="MEMO_CHRG",_X=MEMO_CHRG.CTL,MEMO_CHRG=NUM(MEMO_CHRG$,ERR=NON_NUMERIC)
11040 _X$="SPER",_X=SPER.CTL,SPER=NUM(SPER$,ERR=NON_NUMERIC)
11050 _X$="P_MIN",_X=P_MIN.CTL,P_MIN=NUM(P_MIN$,ERR=NON_NUMERIC)
11060 _X$="P_MAX",_X=P_MAX.CTL,P_MAX=NUM(P_MAX$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN R_CONSTANT$="R"
13030 IF _CLR_FLG$="R" THEN CUST_DIV$="",CUSTOMER$="",%CUST_NAME$="" ! SSP 189525
13040 IF _CLR_FLG$="R" THEN CUST_CODE$=""
13050 IF _CLR_FLG$="R" THEN OP_S_C$=""
13060 B_P_DESC$=""
13070 CALC_M$=""
13080 TYPE_O_C$=""
13090 APPLY_O_T$=""
13100 OMIT_B_O$=""
13110 COMM_CODE$=""
13120 COST_CODE$=""
13130 APPLY_S_I$=""
13140 NO_PRIN_0$=""
13150 APPLY_SVC$=""
13160 AP_M_M_GPA$=""
13170 INVT_OWN$=""
13180 WHSE_CODE$=""
13190 APPLY_PC_SET$=""
13200 APPLY_TO_BO$=""
13210 WHSE_CODE_IN$=""
13220 LINE_ACCT_COST$=""
13230 TF_UNUSED$=""
13240 PRICE=0
13250 MEMO_CHRG=0
13260 SPER=0
13270 P_MIN=0
13280 P_MAX=0
13290 FOR N=1 TO MAX_BREAK; D(N)=0,D(N+1)=0; NEXT N
13300 GOSUB NUM_TO_STR
13310 REFRESH_FLG=1
13320 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUSTOMER.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=OP_S_C.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(27,"N")
15030 IF _ORIG.R_CONSTANT$=_CUR.R_CONSTANT$ OR R_CONSTANT$=_CUR.R_CONSTANT$ THEN GOTO *NEXT ELSE IF _ORIG.R_CONSTANT$=R_CONSTANT$ THEN _CHG2$=_CHG2$+SEP+"R_CONSTANT = "+_CUR.R_CONSTANT$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"R_CONSTANT = "+_CUR.R_CONSTANT$
15040 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+"CUST_DIV = "+_CUR.CUST_DIV$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"CUST_DIV = "+_CUR.CUST_DIV$
15050 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+"CUST_CODE = "+_CUR.CUST_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"CUST_CODE = "+_CUR.CUST_CODE$
15060 IF _ORIG.OP_S_C$=_CUR.OP_S_C$ OR OP_S_C$=_CUR.OP_S_C$ THEN GOTO *NEXT ELSE IF _ORIG.OP_S_C$=OP_S_C$ THEN _CHG2$=_CHG2$+SEP+"OP_S_C = "+_CUR.OP_S_C$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"OP_S_C = "+_CUR.OP_S_C$
15070 IF _ORIG.B_P_DESC$=_CUR.B_P_DESC$ OR B_P_DESC$=_CUR.B_P_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.B_P_DESC$=B_P_DESC$ THEN _CHG2$=_CHG2$+SEP+"B_P_DESC = "+_CUR.B_P_DESC$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"B_P_DESC = "+_CUR.B_P_DESC$
15080 IF _ORIG.CALC_M$=_CUR.CALC_M$ OR CALC_M$=_CUR.CALC_M$ THEN GOTO *NEXT ELSE IF _ORIG.CALC_M$=CALC_M$ THEN _CHG2$=_CHG2$+SEP+"CALC_M = "+_CUR.CALC_M$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"CALC_M = "+_CUR.CALC_M$
15090 IF _ORIG.TYPE_O_C$=_CUR.TYPE_O_C$ OR TYPE_O_C$=_CUR.TYPE_O_C$ THEN GOTO *NEXT ELSE IF _ORIG.TYPE_O_C$=TYPE_O_C$ THEN _CHG2$=_CHG2$+SEP+"TYPE_O_C = "+_CUR.TYPE_O_C$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"TYPE_O_C = "+_CUR.TYPE_O_C$
15100 IF _ORIG.APPLY_O_T$=_CUR.APPLY_O_T$ OR APPLY_O_T$=_CUR.APPLY_O_T$ THEN GOTO *NEXT ELSE IF _ORIG.APPLY_O_T$=APPLY_O_T$ THEN _CHG2$=_CHG2$+SEP+"APPLY_O_T = "+_CUR.APPLY_O_T$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"APPLY_O_T = "+_CUR.APPLY_O_T$
15110 IF _ORIG.OMIT_B_O$=_CUR.OMIT_B_O$ OR OMIT_B_O$=_CUR.OMIT_B_O$ THEN GOTO *NEXT ELSE IF _ORIG.OMIT_B_O$=OMIT_B_O$ THEN _CHG2$=_CHG2$+SEP+"OMIT_B_O = "+_CUR.OMIT_B_O$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"OMIT_B_O = "+_CUR.OMIT_B_O$
15120 IF _ORIG.COMM_CODE$=_CUR.COMM_CODE$ OR COMM_CODE$=_CUR.COMM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.COMM_CODE$=COMM_CODE$ THEN _CHG2$=_CHG2$+SEP+"COMM_CODE = "+_CUR.COMM_CODE$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"COMM_CODE = "+_CUR.COMM_CODE$
15130 IF _ORIG.COST_CODE$=_CUR.COST_CODE$ OR COST_CODE$=_CUR.COST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.COST_CODE$=COST_CODE$ THEN _CHG2$=_CHG2$+SEP+"COST_CODE = "+_CUR.COST_CODE$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"COST_CODE = "+_CUR.COST_CODE$
15140 IF _ORIG.APPLY_S_I$=_CUR.APPLY_S_I$ OR APPLY_S_I$=_CUR.APPLY_S_I$ THEN GOTO *NEXT ELSE IF _ORIG.APPLY_S_I$=APPLY_S_I$ THEN _CHG2$=_CHG2$+SEP+"APPLY_S_I = "+_CUR.APPLY_S_I$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"APPLY_S_I = "+_CUR.APPLY_S_I$
15150 IF _ORIG.NO_PRIN_0$=_CUR.NO_PRIN_0$ OR NO_PRIN_0$=_CUR.NO_PRIN_0$ THEN GOTO *NEXT ELSE IF _ORIG.NO_PRIN_0$=NO_PRIN_0$ THEN _CHG2$=_CHG2$+SEP+"NO_PRIN_0 = "+_CUR.NO_PRIN_0$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"NO_PRIN_0 = "+_CUR.NO_PRIN_0$
15160 IF _ORIG.APPLY_SVC$=_CUR.APPLY_SVC$ OR APPLY_SVC$=_CUR.APPLY_SVC$ THEN GOTO *NEXT ELSE IF _ORIG.APPLY_SVC$=APPLY_SVC$ THEN _CHG2$=_CHG2$+SEP+"APPLY_SVC = "+_CUR.APPLY_SVC$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"APPLY_SVC = "+_CUR.APPLY_SVC$
15170 IF _ORIG.AP_M_M_GPA$=_CUR.AP_M_M_GPA$ OR AP_M_M_GPA$=_CUR.AP_M_M_GPA$ THEN GOTO *NEXT ELSE IF _ORIG.AP_M_M_GPA$=AP_M_M_GPA$ THEN _CHG2$=_CHG2$+SEP+"AP_M_M_GPA = "+_CUR.AP_M_M_GPA$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"AP_M_M_GPA = "+_CUR.AP_M_M_GPA$
15180 IF _ORIG.INVT_OWN$=_CUR.INVT_OWN$ OR INVT_OWN$=_CUR.INVT_OWN$ THEN GOTO *NEXT ELSE IF _ORIG.INVT_OWN$=INVT_OWN$ THEN _CHG2$=_CHG2$+SEP+"INVT_OWN = "+_CUR.INVT_OWN$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"INVT_OWN = "+_CUR.INVT_OWN$
15190 IF _ORIG.WHSE_CODE$=_CUR.WHSE_CODE$ OR WHSE_CODE$=_CUR.WHSE_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE_CODE$=WHSE_CODE$ THEN _CHG2$=_CHG2$+SEP+"WHSE_CODE = "+_CUR.WHSE_CODE$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"WHSE_CODE = "+_CUR.WHSE_CODE$
15200 IF _ORIG.APPLY_PC_SET$=_CUR.APPLY_PC_SET$ OR APPLY_PC_SET$=_CUR.APPLY_PC_SET$ THEN GOTO *NEXT ELSE IF _ORIG.APPLY_PC_SET$=APPLY_PC_SET$ THEN _CHG2$=_CHG2$+SEP+"APPLY_PC_SET = "+_CUR.APPLY_PC_SET$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"APPLY_PC_SET = "+_CUR.APPLY_PC_SET$
15210 IF _ORIG.APPLY_TO_BO$=_CUR.APPLY_TO_BO$ OR APPLY_TO_BO$=_CUR.APPLY_TO_BO$ THEN GOTO *NEXT ELSE IF _ORIG.APPLY_TO_BO$=APPLY_TO_BO$ THEN _CHG2$=_CHG2$+SEP+"APPLY_TO_BO = "+_CUR.APPLY_TO_BO$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"APPLY_TO_BO = "+_CUR.APPLY_TO_BO$
15220 IF _ORIG.WHSE_CODE_IN$=_CUR.WHSE_CODE_IN$ OR WHSE_CODE_IN$=_CUR.WHSE_CODE_IN$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE_CODE_IN$=WHSE_CODE_IN$ THEN _CHG2$=_CHG2$+SEP+"WHSE_CODE_IN = "+_CUR.WHSE_CODE_IN$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"WHSE_CODE_IN = "+_CUR.WHSE_CODE_IN$
15230 IF _ORIG.LINE_ACCT_COST$=_CUR.LINE_ACCT_COST$ OR LINE_ACCT_COST$=_CUR.LINE_ACCT_COST$ THEN GOTO *NEXT ELSE IF _ORIG.LINE_ACCT_COST$=LINE_ACCT_COST$ THEN _CHG2$=_CHG2$+SEP+"LINE_ACCT_COST = "+_CUR.LINE_ACCT_COST$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"LINE_ACCT_COST = "+_CUR.LINE_ACCT_COST$
15240 IF _ORIG.TF_UNUSED$=_CUR.TF_UNUSED$ OR TF_UNUSED$=_CUR.TF_UNUSED$ THEN GOTO *NEXT ELSE IF _ORIG.TF_UNUSED$=TF_UNUSED$ THEN _CHG2$=_CHG2$+SEP+"UNUSED = "+_CUR.TF_UNUSED$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"UNUSED = "+_CUR.TF_UNUSED$
15250 IF _ORIG.PRICE=_CUR.PRICE OR PRICE=_CUR.PRICE THEN GOTO *NEXT ELSE IF _ORIG.PRICE=PRICE THEN _CHG2$=_CHG2$+SEP+"PRICE = "+STR(_CUR.PRICE),_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"PRICE = "+STR(_CUR.PRICE)
15260 IF _ORIG.MEMO_CHRG=_CUR.MEMO_CHRG OR MEMO_CHRG=_CUR.MEMO_CHRG THEN GOTO *NEXT ELSE IF _ORIG.MEMO_CHRG=MEMO_CHRG THEN _CHG2$=_CHG2$+SEP+"MEMO_CHRG = "+STR(_CUR.MEMO_CHRG),_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"MEMO_CHRG = "+STR(_CUR.MEMO_CHRG)
15270 IF _ORIG.SPER=_CUR.SPER OR SPER=_CUR.SPER THEN GOTO *NEXT ELSE IF _ORIG.SPER=SPER THEN _CHG2$=_CHG2$+SEP+"SPER = "+STR(_CUR.SPER),_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"SPER = "+STR(_CUR.SPER)
15280 IF _ORIG.P_MIN=_CUR.P_MIN OR P_MIN=_CUR.P_MIN THEN GOTO *NEXT ELSE IF _ORIG.P_MIN=P_MIN THEN _CHG2$=_CHG2$+SEP+"P_MIN = "+STR(_CUR.P_MIN),_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"P_MIN = "+STR(_CUR.P_MIN)
15290 IF _ORIG.P_MAX=_CUR.P_MAX OR P_MAX=_CUR.P_MAX THEN GOTO *NEXT ELSE IF _ORIG.P_MAX=P_MAX THEN _CHG2$=_CHG2$+SEP+"P_MAX = "+STR(_CUR.P_MAX),_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"P_MAX = "+STR(_CUR.P_MAX)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN R_CONSTANT$=_CUR.R_CONSTANT$
16030 IF _CHG_VAR$(2,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16040 IF _CHG_VAR$(3,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN OP_S_C$=_CUR.OP_S_C$
16060 IF _CHG_VAR$(5,1)="Y" THEN B_P_DESC$=_CUR.B_P_DESC$
16070 IF _CHG_VAR$(6,1)="Y" THEN CALC_M$=_CUR.CALC_M$
16080 IF _CHG_VAR$(7,1)="Y" THEN TYPE_O_C$=_CUR.TYPE_O_C$
16090 IF _CHG_VAR$(8,1)="Y" THEN APPLY_O_T$=_CUR.APPLY_O_T$
16100 IF _CHG_VAR$(9,1)="Y" THEN OMIT_B_O$=_CUR.OMIT_B_O$
16110 IF _CHG_VAR$(10,1)="Y" THEN COMM_CODE$=_CUR.COMM_CODE$
16120 IF _CHG_VAR$(11,1)="Y" THEN COST_CODE$=_CUR.COST_CODE$
16130 IF _CHG_VAR$(12,1)="Y" THEN APPLY_S_I$=_CUR.APPLY_S_I$
16140 IF _CHG_VAR$(13,1)="Y" THEN NO_PRIN_0$=_CUR.NO_PRIN_0$
16150 IF _CHG_VAR$(14,1)="Y" THEN APPLY_SVC$=_CUR.APPLY_SVC$
16160 IF _CHG_VAR$(15,1)="Y" THEN AP_M_M_GPA$=_CUR.AP_M_M_GPA$
16170 IF _CHG_VAR$(16,1)="Y" THEN INVT_OWN$=_CUR.INVT_OWN$
16180 IF _CHG_VAR$(17,1)="Y" THEN WHSE_CODE$=_CUR.WHSE_CODE$
16190 IF _CHG_VAR$(18,1)="Y" THEN APPLY_PC_SET$=_CUR.APPLY_PC_SET$
16200 IF _CHG_VAR$(19,1)="Y" THEN APPLY_TO_BO$=_CUR.APPLY_TO_BO$
16210 IF _CHG_VAR$(20,1)="Y" THEN WHSE_CODE_IN$=_CUR.WHSE_CODE_IN$
16220 IF _CHG_VAR$(21,1)="Y" THEN LINE_ACCT_COST$=_CUR.LINE_ACCT_COST$
16230 IF _CHG_VAR$(22,1)="Y" THEN TF_UNUSED$=_CUR.TF_UNUSED$
16240 IF _CHG_VAR$(23,1)="Y" THEN PRICE=_CUR.PRICE
16250 IF _CHG_VAR$(24,1)="Y" THEN MEMO_CHRG=_CUR.MEMO_CHRG
16260 IF _CHG_VAR$(25,1)="Y" THEN SPER=_CUR.SPER
16270 IF _CHG_VAR$(26,1)="Y" THEN P_MIN=_CUR.P_MIN
16280 IF _CHG_VAR$(27,1)="Y" THEN P_MAX=_CUR.P_MAX
16990 RETURN 
17000 SEL_QRY:
17010 VAL$=""; PROCESS "QRY_FMPR.1","../FMG/FM.EN",VAL$
17020 IF VAL$="" THEN NEXT_ID=CUSTOMER.CTL; EXIT 
17030 CUSTOMER$=VAL$(1,10),OP_S_C$=VAL$(11,10)
17035 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$
17040 _KEY$="R"+VAL$
17045 GOTO 1050
18000 SEL_CUSTOMER: REFRESH_FLG=1
18010 IF LEN(CUSTOMER$)<3 THEN GOTO CHECK_DIVISION
18020 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,DIV$,CODE$; CUSTOMER$=DIV$+CODE$
18030 FIND (_AR1,KEY=CUSTOMER$,REC=_AR1$,DOM=NO_CUST)
18040 %CUST_NAME$=_AR1.CUST_NAME$,REFRESH_FLG=1
18045 IF %AR_DIV_LEN=0 THEN CUSTOMER$=CUSTOMER$(3),NEXT_ID=-1 ! SSP 189525
18050 RETURN 
18100 NO_CUST:
18110 MSGBOX "Customer : "+CUSTOMER$+SEP+"not found",MSG("WARNING"),"!,TIM=4" ! ssp 189525
18120 GOTO 18620
18500 CHECK_DIVISION:
18510 CUSTOMER$=PAD(CUSTOMER$,2,"0")
18520 FIND (_ARH,KEY=CUSTOMER$,REC=_ARH$,DOM=NO_DIVISION)
18530 %CUST_NAME$=_ARH.DIV_DESC$,CUSTOMER$=PAD(CUSTOMER$,10," ")
18540 RETURN 
18600 NO_DIVISION:
18610 MSGBOX "Division : "+CUSTOMER$+SEP+"not found",MSG("WARNING"),"!,TIM=4" ! ssp 189525
18620 CUSTOMER$="",NEXT_ID=CUSTOMER.CTL
18630 RETURN 
19000 ! 
19010 ! Load and display the charge requisition charge table for this customer
19020 LOAD_BREAKS:
19025 DIM D$(48),D[30]
19030 ! DISABLE CONTROL FLDR.FMGSHC.2.CTL
19035 ! IF CALC_M$<>"T" THEN NEXT_FOLDER=FLDR.FMGSHC.1.CTL; GOTO *RETURN
19040 ! ENABLE CONTROL FLDR.FMGSHC.2.CTL
19045 ! N=1; GOSUB CLEAR_BREAKS
19050 D$(1,1)="T",D$(2,10)=CUSTOMER$,D$(12,10)=OP_S_C$,D1$=D$(1,21)
19060 READ (_FTR,KEY=D1$,DOM=*NEXT)IOL=FTR_IOL
19070 BREAK_CNT=0
19080 FOR N=1 TO 20 STEP 2
19090 IF D(N)>0 THEN {
19100 BREAK_CNT++
19110 STMT$="BREAK_"+STR(BREAK_CNT)+"_START$="+QUO+STR(D(N))+QUO; EXECUTE STMT$
19120 STMT$="BREAK_"+STR(BREAK_CNT)+"_RATE$="+QUO+STR(D(N+1))+QUO; EXECUTE STMT$
19130 IF BREAK_CNT>1 THEN {
19140 STMT$="BREAK_"+STR(BREAK_CNT-1)+"_END$="+QUO+STR(D(N)-.01)+QUO; EXECUTE STMT$
19150  }
19160  }
19170 NEXT 
19180 IF FOLDER_ID$="FMGSHC.2" THEN GOSUB DISPLAY_BREAKS
19190 RETURN 
19200 ! 
19210 ! Get the charge requisition charge table for this customer
19220 GET_RC_TABLE_REC:
19230 DIM D$(48),D[30]
19240 D$(1,1)="T",D$(2,10)=CUSTOMER$,D$(12,10)=OP_S_C$,D1$=D$(1,21)
19250 READ (_FTR,KEY=D1$,DOM=*NEXT)IOL=FTR_IOL
19260 READ DATA FROM REC(IOL(FTR_IOL,ERR=*NEXT)),REC=_ORIG2$ TO IOL=FTR_IOL ! Save record for review
19270 RETURN 
19300 ! 
19310 ! Save BREAK's START value for comparison in validation logic.
19320 BREAK_START_FOCUS:
19330 BREAK_START$=EVS(ID$+"$")
19335 ! MSGBOX ID$+" Received Focus - captured: "+BREAK_START$+" CHANGE_FLG: "+STR(CHANGE_FLG)
19340 RETURN 
19500 ! 
19505 ! Validation rules & processing for current BREAK's START value
19510 BREAK_START:
19520 ! MSGBOX "H: "+BREAK_START$+"  F: "+ EVS(ID$+"$")+" CHANGE_FLG: "+STR(CHANGE_FLG); IF CHANGE_FLG>0 THEN CHANGE_FLG--; MSGBOX "CHANGE_FLG: "+STR(CHANGE_FLG)
19550 ! If the End of Message (EOM) character is a NUL, SOH, STX, usually mouse events, exit this subroutine
19555 ! Unless a validation script steals focus, another Enabled field or button, like CLEAR or EXIT, is selectable
19560 IF POS(_EOM$=$000102090D$)=0 THEN RETURN 
19565 ! get this BREAK's number from its ID: BREAK_n[n]_START
19570 N=NUM(MID(ID$,7,1)); IF MID(ID$,8,1)="0" THEN N=MAX_BREAK
19575 ! using Evaluate, get this BREAK's START value: BREAK_n[n]_START$
19580 CURVAL=NUM(EVS(ID$+"$"))
19585 ! If current BREAK's START value is 0, erase all subsequent breaks and set next entry field
19590 IF CURVAL=0 THEN {
19600 GOSUB CLEAR_AND_SET_BREAKS
19605  } ELSE {
19610 ! Hold onto where we are supposed to go next ( NEXT_ID )
19615 HOLD_NEXT_ID=NEXT_ID
19620 ! Insure current BREAK's START value is greater than previous BREAK's START value
19625 ! and, set the previous BREAK's END value to less than current BREAK's START value
19630 GOSUB INSURE_CB_GT_PB
19635 ! If successful, insure current BREAK's START value is less than next BREAK's START value
19640 IF HOLD_NEXT_ID=NEXT_ID THEN GOSUB INSURE_CB_LT_NB
19650  }
19655 REFRESH_FLG=1
19660 RETURN 
19800 ! 
19805 ! Clear extraneous breaks and set next entry point
19810 CLEAR_AND_SET_BREAKS:
19815 ! Clear all Breaks from this point forward
19820 GOSUB CLEAR_BREAKS
19825 ! If this is NOT the FIRST BREAK
19830 IF N>1 THEN {
19835 ! Initialize previous BREAK's END value
19840 PB$=STR(N-1); STMT$="BREAK_"+PB$+"_END$="+QUO+QUO; EXECUTE STMT$
19845 ! and, Set the previous BREAK's START field as the next entry point
19850 NEXT_ID=EVN("BREAK_"+PB$+"_START.CTL")
19855  } ELSE {
19860 ! Display the first BREAK
19865 CALL "*wingrp;Show",BREAK_1.GRP$
19870 ! and, Set the first BREAK's START field as the next entry point
19875 NEXT_ID=BREAK_1_START.CTL
19880  }
19885 RETURN 
20000 ! 
20005 ! Insure current BREAK's START value is greater than previous BREAK's START value
20010 INSURE_CB_GT_PB:
20015 ! If this is NOT the FIRST BREAK
20020 IF N>1 THEN {
20025 ! determine previous BREAK and get its START value
20030 PB$=STR(N-1); PREVAL=NUM(EVS("BREAK_"+PB$+"_START$"))
20035 ! if START value is greater than previous BREAK's START value
20040 IF CURVAL>PREVAL THEN {
20045 ! Set previous BREAK's END value to .01 less than this BREAK's START value
20050 STMT$="BREAK_"+PB$+"_END$="+QUO+STR(CURVAL-.01)+QUO; EXECUTE STMT$
20055 ! otherwise, notify user, reset BREAK's START value and stay put
20060  } ELSE {
20065 MSGBOX MSG("_RCNOTGT"),X1$
20070 STMT$="BREAK_"+STR(N)+"_START$="+QUO+QUO; EXECUTE STMT$
20075 NEXT_ID=EVN(ID$+".CTL")
20080  }
20085  }
20090 RETURN 
20200 ! 
20205 ! Insure current BREAK's START value is less than next BREAK's START value
20210 INSURE_CB_LT_NB:
20215 ! If this is NOT the LAST BREAK
20217 ! MSGBOX "N: "+STR(N)+"  BREAK_CNT: "+STR(BREAK_CNT)
20220 IF N<BREAK_CNT THEN {
20225 ! determine next BREAK and get its START value
20230 NB$=STR(N+1); NEXTVAL=NUM(EVS("BREAK_"+NB$+"_START$"))
20235 ! if next BREAK's START value is less than or equal to current BREAK's START value
20240 ! notify user, reset BREAK's START value and stay put
20245 IF NEXTVAL<=CURVAL THEN {
20250 MSGBOX MSG("_RCNOTLT"),X1$
20255 STMT$="BREAK_"+STR(N)+"_START$="+QUO+QUO; EXECUTE STMT$
20260 NEXT_ID=EVN(ID$+".CTL")
20265  }
20270  }
20280 RETURN 
20400 ! 
20410 ! Save BREAK's RATE value for comparison in validation logic.
20420 BREAK_RATE_FOCUS:
20430 BREAK_RATE$=EVS(ID$+"$")
20435 ! MSGBOX ID$+" Received Focus - captured: "+BREAK_RATE$+" CHANGE_FLG: "+STR(CHANGE_FLG)
20440 RETURN 
20500 ! 
20510 ! Validation rules & processing for current BREAK's RATE value
20515 BREAK_RATE:
20517 ! MSGBOX "H: "+BREAK_RATE$+"  F: "+ EVS(ID$+"$")+" CHANGE_FLG: "+STR(CHANGE_FLG); IF CHANGE_FLG>0 THEN CHANGE_FLG--; MSGBOX "CHANGE_FLG: "+STR(CHANGE_FLG)
20520 ! If the End of Message (EOM) character is a NUL, SOH, STX, usually mouse events, exit this subroutine
20525 ! Unless a validation script steals focus, another Enabled field or button, like CLEAR or EXIT, is selectable
20530 IF POS(_EOM$=$000102$)>0 THEN EXIT 
20535 ! get this BREAK's number from its ID: BREAK_n[n]_RATE
20540 N=NUM(MID(ID$,7,1)); IF MID(ID$,8,1)="0" THEN N=MAX_BREAK
20545 ! using Evaluate, get this BREAK's RATE value: BREAK_n[n]_RATE$
20550 CURVAL=NUM(EVS(ID$+"$"))
20555 ! If this BREAK's RATE is greater than 0
20560 IF CURVAL>0 THEN {
20565 ! If this is not the max table entry, activate the next table entry
20570 IF N<MAX_BREAK THEN {
20575 GROUP$=EVS("BREAK_"+STR(N+1)+".GRP$"); CALL "*wingrp;Show",GROUP$
20580 ! else, start over with first table entry
20585  } ELSE {
20590 NEXT_ID=_FIRST_TAB
20595  }
20600 ! else, stay put, a value > 0 is required
20610  } ELSE {
20620 NEXT_ID=EVN(ID$+".CTL")
20630  }
20640 REFRESH_FLG=1
20650 EXIT 
21000 ! 
21010 ! Show (or Hide) each Break depending whether the Break has a starting value, or not.
21020 DISPLAY_BREAKS:
21030 FOR B=1 TO MAX_BREAK
21040 FLDVAL$=EVS("BREAK_"+STR(B)+"_START$"); GROUP$=EVS("BREAK_"+STR(B)+".GRP$")
21050 IF NUM(FLDVAL$)>0 THEN CALL "*wingrp;Show",GROUP$ ELSE CALL "*wingrp;Hide",GROUP$
21060 NEXT 
21070 IF BREAK_CNT=0 AND CALC_M$="T" THEN CALL "*wingrp;Show",BREAK_1.GRP$
21075 IF CALC_M$<>"T" THEN CALL "*wingrp;Disable",FIELDS.GRP$
21080 REFRESH_FLG=1
21090 RETURN 
21100 ! 
21110 ! Clear the Break table fields and Hide each Break
21115 ! This uses the execute command to build and initialize the variables BREAK_n_START$, 
21120 ! BREAK_n_END$, & BREAK_n_RATE$; where B is a number ranging from 1 to MAX_BREAK
21130 CLEAR_BREAKS:
21140 FOR B=N TO BREAK_CNT
21150 STMT$="BREAK_"+STR(B)+"_START$="+QUO+"0"+QUO; EXECUTE STMT$
21160 STMT$="BREAK_"+STR(B)+"_END$="+QUO+QUO; EXECUTE STMT$
21170 STMT$="BREAK_"+STR(B)+"_RATE$="+QUO+"0"+QUO; EXECUTE STMT$
21180 GROUP$=EVS("BREAK_"+STR(B)+".GRP$"); CALL "*wingrp;Hide",GROUP$
21190 NEXT 
21200 BREAK_CNT-=((BREAK_CNT-N)+1)
21210 RETURN 
21300 ! 
21310 ! Toggle access to Charge Table based on Calculation Method
21320 CALC_METHOD:
21330 IF CALC_M$="T" THEN GOSUB LOAD_BREAKS
21340 EXIT 
21500 ! 21500 - Determine whether any actual changes have been made
21505 ! the system flag CHANGE_FLG may have false counts
21510 VALIDATE_CHANGE_FLG:
21520 CHANGE_FLG=0
21530 IF _ORIG.R_CONSTANT$=R_CONSTANT$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21540 IF _ORIG.CUST_DIV$=CUST_DIV$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21550 IF _ORIG.CUST_CODE$=CUST_CODE$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21560 IF _ORIG.OP_S_C$=OP_S_C$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21570 IF _ORIG.B_P_DESC$=B_P_DESC$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21580 IF _ORIG.CALC_M$=CALC_M$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21590 IF _ORIG.TYPE_O_C$=TYPE_O_C$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21600 IF _ORIG.APPLY_O_T$=APPLY_O_T$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21610 IF _ORIG.OMIT_B_O$=OMIT_B_O$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21620 IF _ORIG.COMM_CODE$=COMM_CODE$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21630 IF _ORIG.COST_CODE$=COST_CODE$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21640 IF _ORIG.APPLY_S_I$=APPLY_S_I$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21650 IF _ORIG.NO_PRIN_0$=NO_PRIN_0$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21660 IF _ORIG.APPLY_SVC$=APPLY_SVC$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21670 IF _ORIG.AP_M_M_GPA$=AP_M_M_GPA$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21680 IF _ORIG.INVT_OWN$=INVT_OWN$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21690 IF _ORIG.WHSE_CODE$=WHSE_CODE$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21700 IF _ORIG.APPLY_PC_SET$=APPLY_PC_SET$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21710 IF _ORIG.APPLY_TO_BO$=APPLY_TO_BO$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21720 IF _ORIG.WHSE_CODE_IN$=WHSE_CODE_IN$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21730 IF _ORIG.LINE_ACCT_COST$=LINE_ACCT_COST$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21740 IF _ORIG.TF_UNUSED$=TF_UNUSED$ THEN GOTO *NEXT ELSE CHANGE_FLG++
21750 IF _ORIG.PRICE=PRICE THEN GOTO *NEXT ELSE CHANGE_FLG++
21760 IF _ORIG.MEMO_CHRG=MEMO_CHRG THEN GOTO *NEXT ELSE CHANGE_FLG++
21770 IF _ORIG.SPER=SPER THEN GOTO *NEXT ELSE CHANGE_FLG++
21780 IF _ORIG.P_MIN=P_MIN THEN GOTO *NEXT ELSE CHANGE_FLG++
21790 IF _ORIG.P_MAX=P_MAX THEN GOTO *NEXT ELSE CHANGE_FLG++
21800 FOR B=1 TO MAX_BREAK
21810 N=(B*2)-1
21820 IF _ORIG2.D(N)=D(N) THEN GOTO *NEXT ELSE CHANGE_FLG++
21830 IF _ORIG2.D(N+1)=D(N+1) THEN GOTO *NEXT ELSE CHANGE_FLG++
21840 NEXT B
21990 RETURN 
56000 ! "189525-Auto Req charge displaying customer number incorrectly.     
56002 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
