0010 ! "FMGMPB-Order Processing Division Setup
0035 REM "5.7 - 01/08/16 - 9.166111 - tma - SSP# 282112
0037 REM "282112-Trying to get an order number for a billable release and    
0040 REM "Copyright 2016 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "FMGMPB","../FMG/FM.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="FSH"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="DIV_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE; IF _ABORT_WRITE THEN _ABORT_WRITE=0; RETURN 
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1705 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS ! SSP 190148
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0,NEXT_ID=_FIRST_KEY
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3061 NEXT_ORDER$=NEXT_ORDER_DIV$+NEXT_ORDER_NUM$
3062 NEXT_REQ$=NEXT_REQ_DIV$+NEXT_REQ_NUM$
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$="",_ABORT_WRITE=0
3230 EXTRACT (_FIL_NO,KEY=KEC(_FIL_NO),REC=_CUR$,DOM=WRT,ERR=REC_BUSY)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3365 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS ! SSP 190148
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3410 REC_BUSY:
3420 IF ERR=0 THEN MSGBOX _MSG_REC_LOCKED$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG_CANNOT_WRITE$+SEP+MSG(ERR),_ERROR$
3430 _ABORT_WRITE=1
3440 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3535 ! IF WHO="crg" THEN MSGBOX "DISP_REC: Change_flg="+STR(CHANGE_FLG)
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=DIV_NUM.CTL,_FIRST_FIELD=NEXT_ORDER.CTL
3815 ! IF WHO="crg" THEN MSGBOX "Change_flg="+STR(CHANGE_FLG)
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN DIV_NUM$=""
13030 NEXT_ORDER_DIV$="",NEXT_ORDER$="",NEXT_REQ$="" ! SSP 190148
13040 NEXT_ORDER_NUM$=""
13050 SEND_PROOFS_TO_LINE1$=""
13060 SEND_PROOFS_TO_LINE2$=""
13070 SEND_PROOFS_TO_LINE3$=""
13080 NEXT_REQ_DIV$=""
13090 NEXT_REQ_NUM$=""
13100 DIV_PHONE_NUM$=""
13110 ALT_ORD_SEQ_1$=""
13120 ALT_ORD_SEQ_2$=""
13130 ALT_ORD_SEQ_3$=""
13140 ALT_ORD_SEQ_4$=""
13150 ALT_ORD_SEQ_5$=""
13160 ALT_ORD_SEQ_6$=""
13170 ALT_ORD_SEQ_7$=""
13180 ALT_ORD_SEQ_8$=""
13190 ALT_ORD_SEQ_9$=""
13200 ALT_ORD_SEQ_10$=""
13210 SEND_INVOICES_TO_LINE_1$=""
13220 SEND_INVOICES_TO_LINE_2$=""
13230 SEND_INVOICES_TO_LINE_3$=""
13240 SEND_INVOICES_TO_LINE_4$=""
13250 UPDATE_SELL_PRICE$=""
13260 COMP_NAME_SUMM_BILL$=""
13261 ORD_SEQ_ALPHA_ALLOW$="" ! 277659
13262 ORD_SEQ_FREEZE_DIGIT$="" ! 277659
13270 FSH_UNUSED_1$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=1 THEN CALL "*wingrp;Enable",KEY1.GRP$; NEXT_ID=_FIRST_KEY ELSE CALL "*wingrp;Disable",KEY1.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(28,"N")
15030 IF _ORIG.DIV_NUM$=_CUR.DIV_NUM$ OR DIV_NUM$=_CUR.DIV_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.DIV_NUM$=DIV_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("DIV_NUM")+" = "+_CUR.DIV_NUM$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DIV_NUM")+" = "+_CUR.DIV_NUM$
15040 IF _ORIG.NEXT_ORDER_DIV$=_CUR.NEXT_ORDER_DIV$ OR NEXT_ORDER_DIV$=_CUR.NEXT_ORDER_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.NEXT_ORDER_DIV$=NEXT_ORDER_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("NEXT_O_D")+" = "+_CUR.NEXT_ORDER_DIV$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NEXT_O_D")+" = "+_CUR.NEXT_ORDER_DIV$
15050 IF _ORIG.NEXT_ORDER_NUM$=_CUR.NEXT_ORDER_NUM$ OR NEXT_ORDER_NUM$=_CUR.NEXT_ORDER_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.NEXT_ORDER_NUM$=NEXT_ORDER_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("NEXT_O_N")+" = "+_CUR.NEXT_ORDER_NUM$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NEXT_O_N")+" = "+_CUR.NEXT_ORDER_NUM$
15060 IF _ORIG.SEND_PROOFS_TO_LINE1$=_CUR.SEND_PROOFS_TO_LINE1$ OR SEND_PROOFS_TO_LINE1$=_CUR.SEND_PROOFS_TO_LINE1$ THEN GOTO *NEXT ELSE IF _ORIG.SEND_PROOFS_TO_LINE1$=SEND_PROOFS_TO_LINE1$ THEN _CHG2$=_CHG2$+SEP+MSG("SEND_P_T_L")+" = "+_CUR.SEND_PROOFS_TO_LINE1$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEND_P_T_L")+" = "+_CUR.SEND_PROOFS_TO_LINE1$
15070 IF _ORIG.SEND_PROOFS_TO_LINE2$=_CUR.SEND_PROOFS_TO_LINE2$ OR SEND_PROOFS_TO_LINE2$=_CUR.SEND_PROOFS_TO_LINE2$ THEN GOTO *NEXT ELSE IF _ORIG.SEND_PROOFS_TO_LINE2$=SEND_PROOFS_TO_LINE2$ THEN _CHG2$=_CHG2$+SEP+MSG("SEN_P_T_L2")+" = "+_CUR.SEND_PROOFS_TO_LINE2$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEN_P_T_L2")+" = "+_CUR.SEND_PROOFS_TO_LINE2$
15080 IF _ORIG.SEND_PROOFS_TO_LINE3$=_CUR.SEND_PROOFS_TO_LINE3$ OR SEND_PROOFS_TO_LINE3$=_CUR.SEND_PROOFS_TO_LINE3$ THEN GOTO *NEXT ELSE IF _ORIG.SEND_PROOFS_TO_LINE3$=SEND_PROOFS_TO_LINE3$ THEN _CHG2$=_CHG2$+SEP+MSG("SEN_P_T_L3")+" = "+_CUR.SEND_PROOFS_TO_LINE3$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEN_P_T_L3")+" = "+_CUR.SEND_PROOFS_TO_LINE3$
15090 IF _ORIG.NEXT_REQ_DIV$=_CUR.NEXT_REQ_DIV$ OR NEXT_REQ_DIV$=_CUR.NEXT_REQ_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.NEXT_REQ_DIV$=NEXT_REQ_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("NEXT_R_D")+" = "+_CUR.NEXT_REQ_DIV$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NEXT_R_D")+" = "+_CUR.NEXT_REQ_DIV$
15100 IF _ORIG.NEXT_REQ_NUM$=_CUR.NEXT_REQ_NUM$ OR NEXT_REQ_NUM$=_CUR.NEXT_REQ_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.NEXT_REQ_NUM$=NEXT_REQ_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("NEXT_R_N")+" = "+_CUR.NEXT_REQ_NUM$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NEXT_R_N")+" = "+_CUR.NEXT_REQ_NUM$
15110 IF _ORIG.DIV_PHONE_NUM$=_CUR.DIV_PHONE_NUM$ OR DIV_PHONE_NUM$=_CUR.DIV_PHONE_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.DIV_PHONE_NUM$=DIV_PHONE_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("DIV_P_N")+" = "+_CUR.DIV_PHONE_NUM$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DIV_P_N")+" = "+_CUR.DIV_PHONE_NUM$
15120 IF _ORIG.ALT_ORD_SEQ_1$=_CUR.ALT_ORD_SEQ_1$ OR ALT_ORD_SEQ_1$=_CUR.ALT_ORD_SEQ_1$ THEN GOTO *NEXT ELSE IF _ORIG.ALT_ORD_SEQ_1$=ALT_ORD_SEQ_1$ THEN _CHG2$=_CHG2$+SEP+MSG("ALT_O_S_1")+" = "+_CUR.ALT_ORD_SEQ_1$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_O_S_1")+" = "+_CUR.ALT_ORD_SEQ_1$
15130 IF _ORIG.ALT_ORD_SEQ_2$=_CUR.ALT_ORD_SEQ_2$ OR ALT_ORD_SEQ_2$=_CUR.ALT_ORD_SEQ_2$ THEN GOTO *NEXT ELSE IF _ORIG.ALT_ORD_SEQ_2$=ALT_ORD_SEQ_2$ THEN _CHG2$=_CHG2$+SEP+MSG("ALT_O_S_2")+" = "+_CUR.ALT_ORD_SEQ_2$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_O_S_2")+" = "+_CUR.ALT_ORD_SEQ_2$
15140 IF _ORIG.ALT_ORD_SEQ_3$=_CUR.ALT_ORD_SEQ_3$ OR ALT_ORD_SEQ_3$=_CUR.ALT_ORD_SEQ_3$ THEN GOTO *NEXT ELSE IF _ORIG.ALT_ORD_SEQ_3$=ALT_ORD_SEQ_3$ THEN _CHG2$=_CHG2$+SEP+MSG("ALT_O_S_3")+" = "+_CUR.ALT_ORD_SEQ_3$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_O_S_3")+" = "+_CUR.ALT_ORD_SEQ_3$
15150 IF _ORIG.ALT_ORD_SEQ_4$=_CUR.ALT_ORD_SEQ_4$ OR ALT_ORD_SEQ_4$=_CUR.ALT_ORD_SEQ_4$ THEN GOTO *NEXT ELSE IF _ORIG.ALT_ORD_SEQ_4$=ALT_ORD_SEQ_4$ THEN _CHG2$=_CHG2$+SEP+MSG("ALT_O_S_4")+" = "+_CUR.ALT_ORD_SEQ_4$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_O_S_4")+" = "+_CUR.ALT_ORD_SEQ_4$
15160 IF _ORIG.ALT_ORD_SEQ_5$=_CUR.ALT_ORD_SEQ_5$ OR ALT_ORD_SEQ_5$=_CUR.ALT_ORD_SEQ_5$ THEN GOTO *NEXT ELSE IF _ORIG.ALT_ORD_SEQ_5$=ALT_ORD_SEQ_5$ THEN _CHG2$=_CHG2$+SEP+MSG("ALT_O_S_5")+" = "+_CUR.ALT_ORD_SEQ_5$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_O_S_5")+" = "+_CUR.ALT_ORD_SEQ_5$
15170 IF _ORIG.ALT_ORD_SEQ_6$=_CUR.ALT_ORD_SEQ_6$ OR ALT_ORD_SEQ_6$=_CUR.ALT_ORD_SEQ_6$ THEN GOTO *NEXT ELSE IF _ORIG.ALT_ORD_SEQ_6$=ALT_ORD_SEQ_6$ THEN _CHG2$=_CHG2$+SEP+MSG("ALT_O_S_6")+" = "+_CUR.ALT_ORD_SEQ_6$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_O_S_6")+" = "+_CUR.ALT_ORD_SEQ_6$
15180 IF _ORIG.ALT_ORD_SEQ_7$=_CUR.ALT_ORD_SEQ_7$ OR ALT_ORD_SEQ_7$=_CUR.ALT_ORD_SEQ_7$ THEN GOTO *NEXT ELSE IF _ORIG.ALT_ORD_SEQ_7$=ALT_ORD_SEQ_7$ THEN _CHG2$=_CHG2$+SEP+MSG("ALT_O_S_7")+" = "+_CUR.ALT_ORD_SEQ_7$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_O_S_7")+" = "+_CUR.ALT_ORD_SEQ_7$
15190 IF _ORIG.ALT_ORD_SEQ_8$=_CUR.ALT_ORD_SEQ_8$ OR ALT_ORD_SEQ_8$=_CUR.ALT_ORD_SEQ_8$ THEN GOTO *NEXT ELSE IF _ORIG.ALT_ORD_SEQ_8$=ALT_ORD_SEQ_8$ THEN _CHG2$=_CHG2$+SEP+MSG("ALT_O_S_8")+" = "+_CUR.ALT_ORD_SEQ_8$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_O_S_8")+" = "+_CUR.ALT_ORD_SEQ_8$
15200 IF _ORIG.ALT_ORD_SEQ_9$=_CUR.ALT_ORD_SEQ_9$ OR ALT_ORD_SEQ_9$=_CUR.ALT_ORD_SEQ_9$ THEN GOTO *NEXT ELSE IF _ORIG.ALT_ORD_SEQ_9$=ALT_ORD_SEQ_9$ THEN _CHG2$=_CHG2$+SEP+MSG("ALT_O_S_9")+" = "+_CUR.ALT_ORD_SEQ_9$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_O_S_9")+" = "+_CUR.ALT_ORD_SEQ_9$
15210 IF _ORIG.ALT_ORD_SEQ_10$=_CUR.ALT_ORD_SEQ_10$ OR ALT_ORD_SEQ_10$=_CUR.ALT_ORD_SEQ_10$ THEN GOTO *NEXT ELSE IF _ORIG.ALT_ORD_SEQ_10$=ALT_ORD_SEQ_10$ THEN _CHG2$=_CHG2$+SEP+MSG("ALT_O_S_10")+" = "+_CUR.ALT_ORD_SEQ_10$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_O_S_10")+" = "+_CUR.ALT_ORD_SEQ_10$
15220 IF _ORIG.SEND_INVOICES_TO_LINE_1$=_CUR.SEND_INVOICES_TO_LINE_1$ OR SEND_INVOICES_TO_LINE_1$=_CUR.SEND_INVOICES_TO_LINE_1$ THEN GOTO *NEXT ELSE IF _ORIG.SEND_INVOICES_TO_LINE_1$=SEND_INVOICES_TO_LINE_1$ THEN _CHG2$=_CHG2$+SEP+MSG("SND_INV_L1")+" = "+_CUR.SEND_INVOICES_TO_LINE_1$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SND_INV_L1")+" = "+_CUR.SEND_INVOICES_TO_LINE_1$
15230 IF _ORIG.SEND_INVOICES_TO_LINE_2$=_CUR.SEND_INVOICES_TO_LINE_2$ OR SEND_INVOICES_TO_LINE_2$=_CUR.SEND_INVOICES_TO_LINE_2$ THEN GOTO *NEXT ELSE IF _ORIG.SEND_INVOICES_TO_LINE_2$=SEND_INVOICES_TO_LINE_2$ THEN _CHG2$=_CHG2$+SEP+MSG("SND_INV_L2")+" = "+_CUR.SEND_INVOICES_TO_LINE_2$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SND_INV_L2")+" = "+_CUR.SEND_INVOICES_TO_LINE_2$
15240 IF _ORIG.SEND_INVOICES_TO_LINE_3$=_CUR.SEND_INVOICES_TO_LINE_3$ OR SEND_INVOICES_TO_LINE_3$=_CUR.SEND_INVOICES_TO_LINE_3$ THEN GOTO *NEXT ELSE IF _ORIG.SEND_INVOICES_TO_LINE_3$=SEND_INVOICES_TO_LINE_3$ THEN _CHG2$=_CHG2$+SEP+MSG("SND_INV_L3")+" = "+_CUR.SEND_INVOICES_TO_LINE_3$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SND_INV_L3")+" = "+_CUR.SEND_INVOICES_TO_LINE_3$
15250 IF _ORIG.SEND_INVOICES_TO_LINE_4$=_CUR.SEND_INVOICES_TO_LINE_4$ OR SEND_INVOICES_TO_LINE_4$=_CUR.SEND_INVOICES_TO_LINE_4$ THEN GOTO *NEXT ELSE IF _ORIG.SEND_INVOICES_TO_LINE_4$=SEND_INVOICES_TO_LINE_4$ THEN _CHG2$=_CHG2$+SEP+MSG("SND_INV_L4")+" = "+_CUR.SEND_INVOICES_TO_LINE_4$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SND_INV_L4")+" = "+_CUR.SEND_INVOICES_TO_LINE_4$
15260 IF _ORIG.UPDATE_SELL_PRICE$=_CUR.UPDATE_SELL_PRICE$ OR UPDATE_SELL_PRICE$=_CUR.UPDATE_SELL_PRICE$ THEN GOTO *NEXT ELSE IF _ORIG.UPDATE_SELL_PRICE$=UPDATE_SELL_PRICE$ THEN _CHG2$=_CHG2$+SEP+MSG("UPDT_S_P")+" = "+_CUR.UPDATE_SELL_PRICE$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UPDT_S_P")+" = "+_CUR.UPDATE_SELL_PRICE$
15270 IF _ORIG.COMP_NAME_SUMM_BILL$=_CUR.COMP_NAME_SUMM_BILL$ OR COMP_NAME_SUMM_BILL$=_CUR.COMP_NAME_SUMM_BILL$ THEN GOTO *NEXT ELSE IF _ORIG.COMP_NAME_SUMM_BILL$=COMP_NAME_SUMM_BILL$ THEN _CHG2$=_CHG2$+SEP+MSG("CN_SB")+" = "+_CUR.COMP_NAME_SUMM_BILL$,_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CN_SB")+" = "+_CUR.COMP_NAME_SUMM_BILL$
15271 IF _ORIG.ORD_SEQ_ALPHA_ALLOW$=_CUR.ORD_SEQ_ALPHA_ALLOW$ OR ORD_SEQ_ALPHA_ALLOW$=_CUR.ORD_SEQ_ALPHA_ALLOW$ THEN GOTO *NEXT ELSE IF _ORIG.ORD_SEQ_ALPHA_ALLOW$=ORD_SEQ_ALPHA_ALLOW$ THEN _CHG2$=_CHG2$+SEP+MSG("CN_SB")+" = "+_CUR.ORD_SEQ_ALPHA_ALLOW$,_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CN_SB")+" = "+_CUR.ORD_SEQ_ALPHA_ALLOW$
15272 IF _ORIG.ORD_SEQ_FREEZE_DIGIT$=_CUR.ORD_SEQ_FREEZE_DIGIT$ OR ORD_SEQ_FREEZE_DIGIT$=_CUR.ORD_SEQ_FREEZE_DIGIT$ THEN GOTO *NEXT ELSE IF _ORIG.ORD_SEQ_FREEZE_DIGIT$=ORD_SEQ_FREEZE_DIGIT$ THEN _CHG2$=_CHG2$+SEP+MSG("CN_SB")+" = "+_CUR.ORD_SEQ_FREEZE_DIGIT$,_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CN_SB")+" = "+_CUR.ORD_SEQ_FREEZE_DIGIT$
15280 IF _ORIG.FSH_UNUSED_1$=_CUR.FSH_UNUSED_1$ OR FSH_UNUSED_1$=_CUR.FSH_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.FSH_UNUSED_1$=FSH_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.FSH_UNUSED_1$,_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.FSH_UNUSED_1$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN DIV_NUM$=_CUR.DIV_NUM$
16030 IF _CHG_VAR$(2,1)="Y" THEN NEXT_ORDER_DIV$=_CUR.NEXT_ORDER_DIV$
16040 IF _CHG_VAR$(3,1)="Y" THEN NEXT_ORDER_NUM$=_CUR.NEXT_ORDER_NUM$
16050 IF _CHG_VAR$(4,1)="Y" THEN SEND_PROOFS_TO_LINE1$=_CUR.SEND_PROOFS_TO_LINE1$
16060 IF _CHG_VAR$(5,1)="Y" THEN SEND_PROOFS_TO_LINE2$=_CUR.SEND_PROOFS_TO_LINE2$
16070 IF _CHG_VAR$(6,1)="Y" THEN SEND_PROOFS_TO_LINE3$=_CUR.SEND_PROOFS_TO_LINE3$
16080 IF _CHG_VAR$(7,1)="Y" THEN NEXT_REQ_DIV$=_CUR.NEXT_REQ_DIV$
16090 IF _CHG_VAR$(8,1)="Y" THEN NEXT_REQ_NUM$=_CUR.NEXT_REQ_NUM$
16100 IF _CHG_VAR$(9,1)="Y" THEN DIV_PHONE_NUM$=_CUR.DIV_PHONE_NUM$
16110 IF _CHG_VAR$(10,1)="Y" THEN ALT_ORD_SEQ_1$=_CUR.ALT_ORD_SEQ_1$
16120 IF _CHG_VAR$(11,1)="Y" THEN ALT_ORD_SEQ_2$=_CUR.ALT_ORD_SEQ_2$
16130 IF _CHG_VAR$(12,1)="Y" THEN ALT_ORD_SEQ_3$=_CUR.ALT_ORD_SEQ_3$
16140 IF _CHG_VAR$(13,1)="Y" THEN ALT_ORD_SEQ_4$=_CUR.ALT_ORD_SEQ_4$
16150 IF _CHG_VAR$(14,1)="Y" THEN ALT_ORD_SEQ_5$=_CUR.ALT_ORD_SEQ_5$
16160 IF _CHG_VAR$(15,1)="Y" THEN ALT_ORD_SEQ_6$=_CUR.ALT_ORD_SEQ_6$
16170 IF _CHG_VAR$(16,1)="Y" THEN ALT_ORD_SEQ_7$=_CUR.ALT_ORD_SEQ_7$
16180 IF _CHG_VAR$(17,1)="Y" THEN ALT_ORD_SEQ_8$=_CUR.ALT_ORD_SEQ_8$
16190 IF _CHG_VAR$(18,1)="Y" THEN ALT_ORD_SEQ_9$=_CUR.ALT_ORD_SEQ_9$
16200 IF _CHG_VAR$(19,1)="Y" THEN ALT_ORD_SEQ_10$=_CUR.ALT_ORD_SEQ_10$
16210 IF _CHG_VAR$(20,1)="Y" THEN SEND_INVOICES_TO_LINE_1$=_CUR.SEND_INVOICES_TO_LINE_1$
16220 IF _CHG_VAR$(21,1)="Y" THEN SEND_INVOICES_TO_LINE_2$=_CUR.SEND_INVOICES_TO_LINE_2$
16230 IF _CHG_VAR$(22,1)="Y" THEN SEND_INVOICES_TO_LINE_3$=_CUR.SEND_INVOICES_TO_LINE_3$
16240 IF _CHG_VAR$(23,1)="Y" THEN SEND_INVOICES_TO_LINE_4$=_CUR.SEND_INVOICES_TO_LINE_4$
16250 IF _CHG_VAR$(24,1)="Y" THEN UPDATE_SELL_PRICE$=_CUR.UPDATE_SELL_PRICE$
16260 IF _CHG_VAR$(25,1)="Y" THEN COMP_NAME_SUMM_BILL$=_CUR.COMP_NAME_SUMM_BILL$
16261 IF _CHG_VAR$(27,1)="Y" THEN ORD_SEQ_ALPHA_ALLOW$=_CUR.ORD_SEQ_ALPHA_ALLOW$
16262 IF _CHG_VAR$(28,1)="Y" THEN ORD_SEQ_FREEZE_DIGIT$=_CUR.ORD_SEQ_FREEZE_DIGIT$
16270 IF _CHG_VAR$(26,1)="Y" THEN FSH_UNUSED_1$=_CUR.FSH_UNUSED_1$
16990 RETURN 
17000 SEL_ALT_ORD_SEQ:
17010 EXECUTE "TEST$="+ID$+"$"
17020 TEST$=PAD(TEST$,6," "),XX=NUM(TEST$,ERR=*NEXT),TEST$=STR(XX:"000000"),REFRESH_FLG=1
17030 EXECUTE ID$+"$=TEST$"
17040 RETURN 
17100 QUERY: VAL$=""
17110 PROCESS "QRY_FSH","../FMG/FM.EN",VAL$; IF VAL$="" THEN RETURN 
17120 _KEY$=VAL$
17130 GOSUB 1070
17140 NEXT_ID=NEXT_ORDER.CTL
17150 RETURN 
18000 REM "Get next order number, ORDERNUM$, for given customer division and sequence type (main, release, alt 1 - alt 9)  ! 277659
18020 IOL_FSH:IOLIST FSH$
18050 GET_NEXT_ORDERNUM:
18060 ENTER FSH,DIV$,SEQTYPE$,OPTIONS$,ORDERNUM$,ERRMSG$,ERR=*NEXT
18080 EXTRACT (FSH,KEY=PAD(DIV$,2),DOM=ERR_INVALID_DIV)IOL=IOL_FSH
18100 ALLOW_ALPHA$=MID(FSH$,379,1) ! Alphanumeric mode enabled
18120 FIX_DIGIT$=MID(FSH$,380,1) ! Skip changes to first digit if parameter enabled for this division
18140 IF NUL(SEQTYPE$) THEN ORDERNUM$=FSH$(3,8),N1=5 ELSE IF SEQTYPE$="R" AND STP(FSH$(116,8))<>"" THEN ORDERNUM$=FSH$(116,8),N1=118 ELSE IF SEQTYPE$="R" AND STP(FSH$(116,8))="" THEN ORDERNUM$=FSH$(3,8),N1=5 ELSE N1=NUM(SEQTYPE$,ERR=ERR_INVALID_SEQTYPE)*6+132; ORDERNUM$=FSH$(1,2)+FSH$(N1,6) ! SSP#282112
18160 IF ORDERNUM$(1,2)="  " THEN ORDERNUM$(1,2)="00"
18180 ! Now increment sequence for the next time
18200 N2=6; IF FIX_DIGIT$="Y" THEN N1=N1+1,N2=5 ! Skip first digit
18220 P0$=FSH$(N1,N2) ! Get sequence string to increment
18240 INCR_NUMBER: MAX_NUM=NUM(DIM(N2,"9")); P0=NUM(P0$,ERR=INCR_ALPHA),P0=P0+1; IF P0>MAX_NUM THEN IF ALLOW_ALPHA$="Y" THEN GOTO INCR_ALPHA ELSE P0=1 END_IF ; END_IF ; P0$=STR(P0:DIM(N2,"0")); GOTO INCR_DONE
18260 INCR_ALPHA:IF P0$=DIM(N2,"Z") THEN P0$=DIM(N2,"0") END_IF ; P0$=FN%NEXT_SEQ$(P0$,7,ERR=*NEXT); GOTO INCR_DONE
18280 INCR_DONE:
18300 FSH$(N1,N2)=P0$
18340 WRITE_FSH:WRITE (FSH,KEY=PAD(DIV$,2))FSH$
18390 GNO_DONE:
18395 EXIT 
18399 ! 
18400 ERR_INVALID_DIV: ERRMSG$="Error: Invalid division: ["+PAD(DIV$,2)+"]"; GOTO GNO_DONE
18420 ERR_INVALID_SEQTYPE: ERRMSG$="Error: Invalid sequence type: ["+SEQTYPE$+"]"; READ (FSH,KEY=PAD(DIV$,2),ERR=GNO_DONE)FSH$; GOTO GNO_DONE
18499 ! 
56000 ! "190148-Setting up a new division in FMGMPB does not hold Next      
56001 ! "       Order Number and Release Number"
56002 REM "277659-Modify Division Next Order# sequence logic, allow for alpha 
56003 REM "282112-Trying to get an order number for a billable release and    
