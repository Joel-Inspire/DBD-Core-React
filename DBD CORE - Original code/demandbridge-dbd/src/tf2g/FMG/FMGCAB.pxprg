0010 ! FMGCAB - Item/Order Bundled Price Setup 
0035 REM "5.7 - 09/04/24 - 10.171531 - jvv - SSP# 307497
0037 REM "307497-GUI Item/Order Bundled pricing does not alsways calculate   
0040 REM "Copyright 2024 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0060 PROCESS "FMGCAB","../FMG/FM.EN"
0070 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0132 IOLIST D$,D[0],D[1],D[2],D[3],D[4],D[5],D[6],D[7],D[8] ! SSP240432 jdf
0134 IOLIST A$(1),A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15],A[16],A[17],A[18],A[19] ! SSP240432 jdf
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0142 IOLIST X$,X[0,Q],X[1,Q],X[2,Q],X[3,Q],X[4,Q],X[5,Q],X[6,Q],X[7,Q],X[8,Q],X[9,Q],X[10,Q] ! SSP240432 jdf
0145 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; DIM Z[NUM(X3$(60,3))] ! SSP240432 jdf
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="AS7"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0185 _FILE_NAME$="ZZPARM",_ZZP=HFN; OPEN (_ZZP,ERR=OPEN_ERR)_FILE_NAME$ ! SSP240432 jdf
0187 _FILE_NAME$="FS6"+%C$ ! SSP240432 jdf
0188 _FS6_NO=HFN; OPEN (_FS6_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$ ! SSP240432 jdf
0189 _FILE_NAME$="FM1"+%C$,_FM1=HFN; OPEN (_FM1,IOL=*,ERR=OPEN_ERR)_FILE_NAME$ ! SSP240432 jdf
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=3
0430 DIM _KEYS$[1:3]; _KEYS$[1]="CUSTOMER$",_KEYS$[2]="ITEM_CODE$",_KEYS$[3]="PO_NUMBER$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 IF _FS6_NO<>0 THEN CLOSE (_FS6_NO); _FS6_NO=0 ! SSP240432 jdf
0947 IF _FM1<>0 THEN CLOSE (_FM1); _FM1=0 ! SSP240432 jdf
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND PAD(STP(QRY_VAL$,3,"-"),LEN(EVS(_KEYS$[_CURKEY]))," ")=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN ! SSP240432 jdf
1022 IF MID(CUSTOMER$,3,4)="INIT" THEN GOTO 7500 ! SSP240432 jdf
1024 CALL "ZZWLKU;AR_CUST_VAL",CUSTOMER$,ERR_MSG$,"_AS7"; IF STP(ERR_MSG$)<>"" THEN MSGBOX (ERR_MSG$),MSG("Input validation failure"),"!"; CUSTOMER$=""; NEXT_ID=CUSTOMER.CTL; REFRESH_FLG=1; RETURN ! SSP240432 jdf
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$; CUSTOMER$=CUST_DIV$+CUST_CODE$
1046 CALL "ZZWLKU;PARSE_PORDER",PO_NUMBER$,PO_DIV$,PO_NUM$; PO_NUMBER$=PO_DIV$+PO_NUM$ ! SSP 213578
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=CUSTOMER.CTL
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=CUSTOMER.CTL
1705 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3045 GOSUB UNIT_LOCK ! SSP240432 jdf
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3061 CUSTOMER$=CUST_DIV$+CUST_CODE$
3063 PO_NUMBER$=PO_DIV$+PO_NUM$
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3365 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
3366 NEXT_ID=CUSTOMER.CTL
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3525 GOSUB GET_UNIT_TOTAL ! SSP240432 jdf
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUSTOMER.CTL,_FIRST_FIELD=PO_DATE.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
7500 UPDATE_AS7:REM "Update AS7 from Order History ! SSP240432 jdf
7501 MSGBOX MSG("FMGCAB_01"),MSG("CONFIRM"),"?,YESNO",ANS$ ! SSP240432 jdf
7502 IF ANS$="NO" THEN NEXT_ID=CUSTOMER.CTL; CUSTOMER$=""; REFRESH_FLG=1; RETURN ! SSP240432 jdf
7505 DIM D[8],X[10],A[19] ! SSP240432 jdf
7510 READ (_FS6_NO,KEY="00",DOM=7511) ! SSP240432 jdf
7515 GOSUB INIT_DRFILE ! SSP240432 jdf put before the loop begins 
7520 K$=KEY(_FS6_NO,END=7590); READ (_FS6_NO,END=7590)IOL=0132 ! SSP240432 jdf
7525 IF D$(11,1)<>"B" THEN READ (_FS6_NO,KEY=D$(1,11)+$FF$,DOM=7520) ! SSP240432 jdf
7535 D0$=D$(1,10)+D$(12,10),D1$=D$(22,8) ! SSP240432 jdf
7538 X8$="B" ! SSP240432 jdf
7540 CALL "FM2UZG",ERR=7541,X3$,0,"B",D0$,D1$,C0$,C1,C2; REM "ssp # 098425 pet 03/20/2000   ! SSP240432 jdf
7555 DIM A$(79),A[19] ! SSP240432 jdf
7560 A$(1,10)=D$(1,10),A$(11,10)=D$(12,10),A$(21,9)=D$(22,8) ! SSP240432 jdf
7562 FIND (_FIL_NO,KEY=A$(1,29),DOM=7563)IOL=0134 ! SSP240432 jdf
7565 A$(30,6)=D$(34,6),A$(36,4)=D$(101,4),A$(76,4)=C0$,A$(40,9)=D$(40,8) ! SSP240432 jdf
7570 A[0]=D[2],A[1]=D[0],A[2]=X[9,0]; IF D[5]=0 THEN A[2]=D[0] ! SSP240432 jdf
7571 A[17]=C1,A[18]=C2 ! ,A[19]=X[10,0] SSP240432 jdf
7575 A[3]=A[3]+X[0,0],A[4]=A[4]+X[3,0],A[5]=A[5]+X[2,0],A[6]=A[6]+X[1,0],A[9]=A[3]+A[4]+A[5]+A[6] ! SSP240432 jdf
7580 WRITE (_FIL_NO,KEY=A$(1,29))IOL=0134 ! SSP240432 jdf
7581 READ (_FS6_NO,KEY=K$) ! SSP240432 jdf
7583 DC=DC+1; IF MOD(DC,DT0)=1 THEN GOSUB UPDATE_PROG_DRFILE ! SSP240432 jdf put in the loop
7585 GOTO 7520
7592 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS ! SSP240432 jdf
7593 DC=DT; GOSUB UPDATE_PROG_DRFILE ! SSP240432 jdf put outside the loop at the end, where control goes when loop is finished.
7594 DC=0; CALL "ZZBARG",X3$,"Hp",PROG2,10,50,DT1,DT,DC; CALL "ZZBARG;UPDATE_PERCENT","",0 ! SSP240432 jdf put outside the loop at the end, where control goes when loop is finished, clears bar and percentage.
7595 RETURN ! SSP240432 jdf
7620 A[9]=0; FOR X=3 TO 8; A[9]=A[9]+A[X]; NEXT X ! SSP240432 jdf
7625 PRECISION 4; A[18]=A[9]/A[2]*A[17]; PRECISION 2; REM " A[18]=A[9]*A[17]/A[2]   ! SSP240432 jdf
7695 RETURN ! SSP240432 jdf
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 UM_QTY_PER$=STR(UM_QTY_PER)
10030 TOTAL_QTY$=STR(TOTAL_QTY)
10040 BILLED_QTY$=STR(BILLED_QTY)
10050 PROD_BILLINGS$=STR(PROD_BILLINGS)
10060 OTHER_CHARGES$=STR(OTHER_CHARGES)
10070 FRT_BILLED$=STR(FRT_BILLED)
10080 STAX_BILLED$=STR(STAX_BILLED)
10090 OTHER_1$=STR(OTHER_1)
10100 OTHER_2$=STR(OTHER_2)
10110 TOTAL_BILLED_TO_DT$=STR(TOTAL_BILLED_TO_DT)
10120 COSTS_1$=STR(COSTS_1)
10130 COSTS_2$=STR(COSTS_2)
10140 COSTS_3$=STR(COSTS_3)
10150 COSTS_4$=STR(COSTS_4)
10160 COSTS_5$=STR(COSTS_5)
10170 COSTS_6$=STR(COSTS_6)
10180 TOTAL_COSTS_TO_DT$=STR(TOTAL_COSTS_TO_DT)
10190 VALUE_QTY_PER$=STR(VALUE_QTY_PER)
10200 VALUATION$=STR(VALUATION)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="UM_QTY_PER",_X=UM_QTY_PER.CTL,UM_QTY_PER=NUM(UM_QTY_PER$,ERR=NON_NUMERIC)
11030 _X$="TOTAL_QTY",_X=TOTAL_QTY.CTL,TOTAL_QTY=NUM(TOTAL_QTY$,ERR=NON_NUMERIC)
11040 _X$="BILLED_QTY",_X=BILLED_QTY.CTL,BILLED_QTY=NUM(BILLED_QTY$,ERR=NON_NUMERIC)
11050 _X$="PROD_BILLINGS",_X=PROD_BILLINGS.CTL,PROD_BILLINGS=NUM(PROD_BILLINGS$,ERR=NON_NUMERIC)
11060 _X$="OTHER_CHARGES",_X=OTHER_CHARGES.CTL,OTHER_CHARGES=NUM(OTHER_CHARGES$,ERR=NON_NUMERIC)
11070 _X$="FRT_BILLED",_X=FRT_BILLED.CTL,FRT_BILLED=NUM(FRT_BILLED$,ERR=NON_NUMERIC)
11080 _X$="STAX_BILLED",_X=STAX_BILLED.CTL,STAX_BILLED=NUM(STAX_BILLED$,ERR=NON_NUMERIC)
11090 _X$="OTHER_1",_X=OTHER_1.CTL,OTHER_1=NUM(OTHER_1$,ERR=NON_NUMERIC)
11100 _X$="OTHER_2",_X=OTHER_2.CTL,OTHER_2=NUM(OTHER_2$,ERR=NON_NUMERIC)
11110 _X$="TOTAL_BILLED_TO_DT",_X=TOTAL_BILLED_TO_DT.CTL,TOTAL_BILLED_TO_DT=NUM(TOTAL_BILLED_TO_DT$,ERR=NON_NUMERIC)
11120 _X$="COSTS_1",_X=COSTS_1.CTL,COSTS_1=NUM(COSTS_1$,ERR=NON_NUMERIC)
11130 _X$="COSTS_2",_X=COSTS_2.CTL,COSTS_2=NUM(COSTS_2$,ERR=NON_NUMERIC)
11140 _X$="COSTS_3",_X=COSTS_3.CTL,COSTS_3=NUM(COSTS_3$,ERR=NON_NUMERIC)
11150 _X$="COSTS_4",_X=COSTS_4.CTL,COSTS_4=NUM(COSTS_4$,ERR=NON_NUMERIC)
11160 _X$="COSTS_5",_X=COSTS_5.CTL,COSTS_5=NUM(COSTS_5$,ERR=NON_NUMERIC)
11170 _X$="COSTS_6",_X=COSTS_6.CTL,COSTS_6=NUM(COSTS_6$,ERR=NON_NUMERIC)
11180 _X$="TOTAL_COSTS_TO_DT",_X=TOTAL_COSTS_TO_DT.CTL,TOTAL_COSTS_TO_DT=NUM(TOTAL_COSTS_TO_DT$,ERR=NON_NUMERIC)
11190 _X$="VALUE_QTY_PER",_X=VALUE_QTY_PER.CTL,VALUE_QTY_PER=NUM(VALUE_QTY_PER$,ERR=NON_NUMERIC)
11200 _X$="VALUATION",_X=VALUATION.CTL,VALUATION=NUM(VALUATION$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN CUST_DIV$="",%CUSTOMER$="",CUSTOMER$=""
13030 IF _CLR_FLG$="R" THEN CUST_CODE$=""
13040 IF _CLR_FLG$="R" THEN ITEM_CODE$="",ITEM_DESC$="",%ITEM_DESC$="" ! SSP240432 jdf
13050 IF _CLR_FLG$="R" THEN PO_DIV$="",PO_NUMBER$=""
13060 IF _CLR_FLG$="R" THEN PO_NUM$=""
13070 PO_DATE$=""
13080 UM$=""
13090 INV_NUM_1$=""
13100 INV_NUM_2$=""
13110 INV_NUM_3$=""
13120 INV_NUM_4$=""
13130 VALUE_UM$=""
13140 UM_QTY_PER=0
13150 TOTAL_QTY=0
13160 BILLED_QTY=0
13170 PROD_BILLINGS=0
13180 OTHER_CHARGES=0
13190 FRT_BILLED=0
13200 STAX_BILLED=0
13210 OTHER_1=0
13220 OTHER_2=0
13230 TOTAL_BILLED_TO_DT=0
13240 COSTS_1=0
13250 COSTS_2=0
13260 COSTS_3=0
13270 COSTS_4=0
13280 COSTS_5=0
13290 COSTS_6=0
13300 TOTAL_COSTS_TO_DT=0
13310 VALUE_QTY_PER=0
13320 VALUATION=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14025 IF _ENABLE_FLG=1 THEN CALL "*wingrp;Enable",KEY1.GRP$; NEXT_ID=CUST_CODE.CTL ELSE CALL "*wingrp;Disable",KEY1.GRP$ ! SSP240432 jdf
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUST_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=ITEM_CODE.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14060 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(31,"N")
15030 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15040 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15050 IF _ORIG.ITEM_CODE$=_CUR.ITEM_CODE$ OR ITEM_CODE$=_CUR.ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CODE$=ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$
15060 IF _ORIG.PO_DIV$=_CUR.PO_DIV$ OR PO_DIV$=_CUR.PO_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.PO_DIV$=PO_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("PO_DIV")+" = "+_CUR.PO_DIV$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PO_DIV")+" = "+_CUR.PO_DIV$
15070 IF _ORIG.PO_NUM$=_CUR.PO_NUM$ OR PO_NUM$=_CUR.PO_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.PO_NUM$=PO_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("PO_NUM")+" = "+_CUR.PO_NUM$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PO_NUM")+" = "+_CUR.PO_NUM$
15080 IF _ORIG.PO_DATE$=_CUR.PO_DATE$ OR PO_DATE$=_CUR.PO_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.PO_DATE$=PO_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("PO_DATE")+" = "+_CUR.PO_DATE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PO_DATE")+" = "+_CUR.PO_DATE$
15090 IF _ORIG.UM$=_CUR.UM$ OR UM$=_CUR.UM$ THEN GOTO *NEXT ELSE IF _ORIG.UM$=UM$ THEN _CHG2$=_CHG2$+SEP+MSG("UM")+" = "+_CUR.UM$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UM")+" = "+_CUR.UM$
15100 IF _ORIG.INV_NUM_1$=_CUR.INV_NUM_1$ OR INV_NUM_1$=_CUR.INV_NUM_1$ THEN GOTO *NEXT ELSE IF _ORIG.INV_NUM_1$=INV_NUM_1$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_NUM_1")+" = "+_CUR.INV_NUM_1$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_NUM_1")+" = "+_CUR.INV_NUM_1$
15110 IF _ORIG.INV_NUM_2$=_CUR.INV_NUM_2$ OR INV_NUM_2$=_CUR.INV_NUM_2$ THEN GOTO *NEXT ELSE IF _ORIG.INV_NUM_2$=INV_NUM_2$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_NUM_2")+" = "+_CUR.INV_NUM_2$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_NUM_2")+" = "+_CUR.INV_NUM_2$
15120 IF _ORIG.INV_NUM_3$=_CUR.INV_NUM_3$ OR INV_NUM_3$=_CUR.INV_NUM_3$ THEN GOTO *NEXT ELSE IF _ORIG.INV_NUM_3$=INV_NUM_3$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_NUM_3")+" = "+_CUR.INV_NUM_3$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_NUM_3")+" = "+_CUR.INV_NUM_3$
15130 IF _ORIG.INV_NUM_4$=_CUR.INV_NUM_4$ OR INV_NUM_4$=_CUR.INV_NUM_4$ THEN GOTO *NEXT ELSE IF _ORIG.INV_NUM_4$=INV_NUM_4$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_NUM_4")+" = "+_CUR.INV_NUM_4$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_NUM_4")+" = "+_CUR.INV_NUM_4$
15140 IF _ORIG.VALUE_UM$=_CUR.VALUE_UM$ OR VALUE_UM$=_CUR.VALUE_UM$ THEN GOTO *NEXT ELSE IF _ORIG.VALUE_UM$=VALUE_UM$ THEN _CHG2$=_CHG2$+SEP+MSG("VALUE_UM")+" = "+_CUR.VALUE_UM$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VALUE_UM")+" = "+_CUR.VALUE_UM$
15150 IF _ORIG.UM_QTY_PER=_CUR.UM_QTY_PER OR UM_QTY_PER=_CUR.UM_QTY_PER THEN GOTO *NEXT ELSE IF _ORIG.UM_QTY_PER=UM_QTY_PER THEN _CHG2$=_CHG2$+SEP+MSG("UM_QTY_PER")+" = "+STR(_CUR.UM_QTY_PER),_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UM_QTY_PER")+" = "+STR(_CUR.UM_QTY_PER)
15160 IF _ORIG.TOTAL_QTY=_CUR.TOTAL_QTY OR TOTAL_QTY=_CUR.TOTAL_QTY THEN GOTO *NEXT ELSE IF _ORIG.TOTAL_QTY=TOTAL_QTY THEN _CHG2$=_CHG2$+SEP+MSG("TOTAL_QTY")+" = "+STR(_CUR.TOTAL_QTY),_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TOTAL_QTY")+" = "+STR(_CUR.TOTAL_QTY)
15170 IF _ORIG.BILLED_QTY=_CUR.BILLED_QTY OR BILLED_QTY=_CUR.BILLED_QTY THEN GOTO *NEXT ELSE IF _ORIG.BILLED_QTY=BILLED_QTY THEN _CHG2$=_CHG2$+SEP+MSG("BILLED_QTY")+" = "+STR(_CUR.BILLED_QTY),_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BILLED_QTY")+" = "+STR(_CUR.BILLED_QTY)
15180 IF _ORIG.PROD_BILLINGS=_CUR.PROD_BILLINGS OR PROD_BILLINGS=_CUR.PROD_BILLINGS THEN GOTO *NEXT ELSE IF _ORIG.PROD_BILLINGS=PROD_BILLINGS THEN _CHG2$=_CHG2$+SEP+MSG("PROD_B")+" = "+STR(_CUR.PROD_BILLINGS),_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PROD_B")+" = "+STR(_CUR.PROD_BILLINGS)
15190 IF _ORIG.OTHER_CHARGES=_CUR.OTHER_CHARGES OR OTHER_CHARGES=_CUR.OTHER_CHARGES THEN GOTO *NEXT ELSE IF _ORIG.OTHER_CHARGES=OTHER_CHARGES THEN _CHG2$=_CHG2$+SEP+MSG("OTHE_C")+" = "+STR(_CUR.OTHER_CHARGES),_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OTHE_C")+" = "+STR(_CUR.OTHER_CHARGES)
15200 IF _ORIG.FRT_BILLED=_CUR.FRT_BILLED OR FRT_BILLED=_CUR.FRT_BILLED THEN GOTO *NEXT ELSE IF _ORIG.FRT_BILLED=FRT_BILLED THEN _CHG2$=_CHG2$+SEP+MSG("FRT_BILLED")+" = "+STR(_CUR.FRT_BILLED),_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FRT_BILLED")+" = "+STR(_CUR.FRT_BILLED)
15210 IF _ORIG.STAX_BILLED=_CUR.STAX_BILLED OR STAX_BILLED=_CUR.STAX_BILLED THEN GOTO *NEXT ELSE IF _ORIG.STAX_BILLED=STAX_BILLED THEN _CHG2$=_CHG2$+SEP+MSG("STAX_B")+" = "+STR(_CUR.STAX_BILLED),_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STAX_B")+" = "+STR(_CUR.STAX_BILLED)
15220 IF _ORIG.OTHER_1=_CUR.OTHER_1 OR OTHER_1=_CUR.OTHER_1 THEN GOTO *NEXT ELSE IF _ORIG.OTHER_1=OTHER_1 THEN _CHG2$=_CHG2$+SEP+MSG("OTHER_1")+" = "+STR(_CUR.OTHER_1),_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OTHER_1")+" = "+STR(_CUR.OTHER_1)
15230 IF _ORIG.OTHER_2=_CUR.OTHER_2 OR OTHER_2=_CUR.OTHER_2 THEN GOTO *NEXT ELSE IF _ORIG.OTHER_2=OTHER_2 THEN _CHG2$=_CHG2$+SEP+MSG("OTHER_2")+" = "+STR(_CUR.OTHER_2),_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OTHER_2")+" = "+STR(_CUR.OTHER_2)
15240 IF _ORIG.TOTAL_BILLED_TO_DT=_CUR.TOTAL_BILLED_TO_DT OR TOTAL_BILLED_TO_DT=_CUR.TOTAL_BILLED_TO_DT THEN GOTO *NEXT ELSE IF _ORIG.TOTAL_BILLED_TO_DT=TOTAL_BILLED_TO_DT THEN _CHG2$=_CHG2$+SEP+MSG("TOTA_B_T_D")+" = "+STR(_CUR.TOTAL_BILLED_TO_DT),_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TOTA_B_T_D")+" = "+STR(_CUR.TOTAL_BILLED_TO_DT)
15250 IF _ORIG.COSTS_1=_CUR.COSTS_1 OR COSTS_1=_CUR.COSTS_1 THEN GOTO *NEXT ELSE IF _ORIG.COSTS_1=COSTS_1 THEN _CHG2$=_CHG2$+SEP+MSG("COSTS_1")+" = "+STR(_CUR.COSTS_1),_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COSTS_1")+" = "+STR(_CUR.COSTS_1)
15260 IF _ORIG.COSTS_2=_CUR.COSTS_2 OR COSTS_2=_CUR.COSTS_2 THEN GOTO *NEXT ELSE IF _ORIG.COSTS_2=COSTS_2 THEN _CHG2$=_CHG2$+SEP+MSG("COSTS_2")+" = "+STR(_CUR.COSTS_2),_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COSTS_2")+" = "+STR(_CUR.COSTS_2)
15270 IF _ORIG.COSTS_3=_CUR.COSTS_3 OR COSTS_3=_CUR.COSTS_3 THEN GOTO *NEXT ELSE IF _ORIG.COSTS_3=COSTS_3 THEN _CHG2$=_CHG2$+SEP+MSG("COSTS_3")+" = "+STR(_CUR.COSTS_3),_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COSTS_3")+" = "+STR(_CUR.COSTS_3)
15280 IF _ORIG.COSTS_4=_CUR.COSTS_4 OR COSTS_4=_CUR.COSTS_4 THEN GOTO *NEXT ELSE IF _ORIG.COSTS_4=COSTS_4 THEN _CHG2$=_CHG2$+SEP+MSG("COSTS_4")+" = "+STR(_CUR.COSTS_4),_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COSTS_4")+" = "+STR(_CUR.COSTS_4)
15290 IF _ORIG.COSTS_5=_CUR.COSTS_5 OR COSTS_5=_CUR.COSTS_5 THEN GOTO *NEXT ELSE IF _ORIG.COSTS_5=COSTS_5 THEN _CHG2$=_CHG2$+SEP+MSG("COSTS_5")+" = "+STR(_CUR.COSTS_5),_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COSTS_5")+" = "+STR(_CUR.COSTS_5)
15300 IF _ORIG.COSTS_6=_CUR.COSTS_6 OR COSTS_6=_CUR.COSTS_6 THEN GOTO *NEXT ELSE IF _ORIG.COSTS_6=COSTS_6 THEN _CHG2$=_CHG2$+SEP+MSG("COSTS_6")+" = "+STR(_CUR.COSTS_6),_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COSTS_6")+" = "+STR(_CUR.COSTS_6)
15310 IF _ORIG.TOTAL_COSTS_TO_DT=_CUR.TOTAL_COSTS_TO_DT OR TOTAL_COSTS_TO_DT=_CUR.TOTAL_COSTS_TO_DT THEN GOTO *NEXT ELSE IF _ORIG.TOTAL_COSTS_TO_DT=TOTAL_COSTS_TO_DT THEN _CHG2$=_CHG2$+SEP+MSG("TOTA_C_T_D")+" = "+STR(_CUR.TOTAL_COSTS_TO_DT),_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TOTA_C_T_D")+" = "+STR(_CUR.TOTAL_COSTS_TO_DT)
15320 IF _ORIG.VALUE_QTY_PER=_CUR.VALUE_QTY_PER OR VALUE_QTY_PER=_CUR.VALUE_QTY_PER THEN GOTO *NEXT ELSE IF _ORIG.VALUE_QTY_PER=VALUE_QTY_PER THEN _CHG2$=_CHG2$+SEP+MSG("VALU_Q_P")+" = "+STR(_CUR.VALUE_QTY_PER),_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VALU_Q_P")+" = "+STR(_CUR.VALUE_QTY_PER)
15330 IF _ORIG.VALUATION=_CUR.VALUATION OR VALUATION=_CUR.VALUATION THEN GOTO *NEXT ELSE IF _ORIG.VALUATION=VALUATION THEN _CHG2$=_CHG2$+SEP+MSG("VALUATION")+" = "+STR(_CUR.VALUATION),_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VALUATION")+" = "+STR(_CUR.VALUATION)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16030 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN ITEM_CODE$=_CUR.ITEM_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN PO_DIV$=_CUR.PO_DIV$
16060 IF _CHG_VAR$(5,1)="Y" THEN PO_NUM$=_CUR.PO_NUM$
16070 IF _CHG_VAR$(6,1)="Y" THEN PO_DATE$=_CUR.PO_DATE$
16080 IF _CHG_VAR$(7,1)="Y" THEN UM$=_CUR.UM$
16090 IF _CHG_VAR$(8,1)="Y" THEN INV_NUM_1$=_CUR.INV_NUM_1$
16100 IF _CHG_VAR$(9,1)="Y" THEN INV_NUM_2$=_CUR.INV_NUM_2$
16110 IF _CHG_VAR$(10,1)="Y" THEN INV_NUM_3$=_CUR.INV_NUM_3$
16120 IF _CHG_VAR$(11,1)="Y" THEN INV_NUM_4$=_CUR.INV_NUM_4$
16130 IF _CHG_VAR$(12,1)="Y" THEN VALUE_UM$=_CUR.VALUE_UM$
16140 IF _CHG_VAR$(13,1)="Y" THEN UM_QTY_PER=_CUR.UM_QTY_PER
16150 IF _CHG_VAR$(14,1)="Y" THEN TOTAL_QTY=_CUR.TOTAL_QTY
16160 IF _CHG_VAR$(15,1)="Y" THEN BILLED_QTY=_CUR.BILLED_QTY
16170 IF _CHG_VAR$(16,1)="Y" THEN PROD_BILLINGS=_CUR.PROD_BILLINGS
16180 IF _CHG_VAR$(17,1)="Y" THEN OTHER_CHARGES=_CUR.OTHER_CHARGES
16190 IF _CHG_VAR$(18,1)="Y" THEN FRT_BILLED=_CUR.FRT_BILLED
16200 IF _CHG_VAR$(19,1)="Y" THEN STAX_BILLED=_CUR.STAX_BILLED
16210 IF _CHG_VAR$(20,1)="Y" THEN OTHER_1=_CUR.OTHER_1
16220 IF _CHG_VAR$(21,1)="Y" THEN OTHER_2=_CUR.OTHER_2
16230 IF _CHG_VAR$(22,1)="Y" THEN TOTAL_BILLED_TO_DT=_CUR.TOTAL_BILLED_TO_DT
16240 IF _CHG_VAR$(23,1)="Y" THEN COSTS_1=_CUR.COSTS_1
16250 IF _CHG_VAR$(24,1)="Y" THEN COSTS_2=_CUR.COSTS_2
16260 IF _CHG_VAR$(25,1)="Y" THEN COSTS_3=_CUR.COSTS_3
16270 IF _CHG_VAR$(26,1)="Y" THEN COSTS_4=_CUR.COSTS_4
16280 IF _CHG_VAR$(27,1)="Y" THEN COSTS_5=_CUR.COSTS_5
16290 IF _CHG_VAR$(28,1)="Y" THEN COSTS_6=_CUR.COSTS_6
16300 IF _CHG_VAR$(29,1)="Y" THEN TOTAL_COSTS_TO_DT=_CUR.TOTAL_COSTS_TO_DT
16310 IF _CHG_VAR$(30,1)="Y" THEN VALUE_QTY_PER=_CUR.VALUE_QTY_PER
16320 IF _CHG_VAR$(31,1)="Y" THEN VALUATION=_CUR.VALUATION
16990 RETURN 
17000 QUERY:
17001 ! 
17010 PROCESS "QRY_AS7","../FMG/FM.EN",VAL$; IF STP(VAL$)="" THEN RETURN 
17020 CUSTOMER$=VAL$(1,10)
17030 ITEM_CODE$=VAL$(11,10)
17035 GOSUB GET_ITEM_DESC ! SSP240432 jdf
17040 PO_NUMBER$=VAL$(21)
17050 _KEY$=VAL$
17060 GOSUB 1045
17070 NEXT_ID=PO_DATE.CTL
17080 RETURN 
17499 ! 
17500 SEL_UM:
17501 ! 
17510 REFRESH_FLG=1,VAR$=UM$; GOSUB READ_ZZPARM
17520 IF U$(20,1)="Y" THEN DISABLE CONTROL UM_QTY_PER.CTL; UM_QTY_PER=O1,UM_QTY_PER$=STR(O1) ELSE ENABLE CONTROL UM_QTY_PER.CTL; UM_QTY_PER=O2,UM_QTY_PER$=STR(O2)
17530 IF UM_QTY_PER=0 THEN UM_QTY_PER=1,UM_QTY_PER$="1"
17590 RETURN 
17599 ! 
17600 VALUE_UNIT:
17601 ! 
17610 REFRESH_FLG=1,VAR$=VALUE_UM$; GOSUB READ_ZZPARM
17620 IF U$(20,1)="Y" THEN DISABLE CONTROL VALUE_QTY_PER.CTL; VALUE_QTY_PER=O1,VALUE_QTY_PER$=STR(O1) ELSE ENABLE CONTROL VALUE_QTY_PER.CTL; VALUE_QTY_PER=O2,VALUE_QTY_PER$=STR(O2)
17630 IF VALUE_QTY_PER=0 THEN VALUE_QTY_PER=1,VALUE_QTY_PER$="1"
17700 RETURN 
17999 ! 
18000 READ_ZZPARM:
18001 ! 
18020 READ (_ZZP,KEY="U/M"+VAR$,ERR=*NEXT)U$,O1,O2
18030 RETURN 
19000 INIT_DRFILE:! SSP240432 jdf
19005 PROG2=30 ! SSP240432 jdf  sets the height of the horizontal bar
19010 CALL "ZZINFO",_FS6_NO,DT9,X3$,DT,DT0,DK,DB,DD,DS0,DS1,DF$ ! SSP240432 jdf
19020 DC=0 ! SSP240432 jdf
19030 DT0=INT(DT*.02); IF DT0<=1 THEN DT0=2 ! SSP240432 jdf
19040 RETURN ! SSP240432 jdf
19050 ! SSP240432 jdf
19500 UPDATE_PROG_DRFILE:! SSP240432 jdf
19510 CALL "ZZBARG",X3$,"HG",PROG2,10,50,DT1,DT,DC ! SSP240432 jdf
19520 RETURN ! SSP240432 jdf
19530 ! SSP240432 jdf
19600 GET_ITEM_DESC:! SSP240432 jdf
19610 READ (_FM1,KEY=CUSTOMER$+ITEM_CODE$,DOM=*NEXT) ! SSP240432 jdf
19615 IF STP(ITEM_CODE$)="" THEN ITEM_DESC$="" ! SSP240432 jdf
19620 %ITEM_DESC$=ITEM_DESC$ ! SSP240432 jdf
19630 REFRESH_FLG=1 ! SSP240432 jdf
19640 RETURN ! SSP240432 jdf
19700 UNIT_LOCK:! SSP240432  jdf
19720 READ (_ZZP,KEY="U/M"+UM$,DOM=*NEXT)U1$,U1,U2 ! SSP240432 jdf
19730 IF MID(U1$,20,1)="Y" THEN DISABLE CONTROL UM_QTY_PER.CTL ELSE ENABLE CONTROL UM_QTY_PER.CTL ! SSP240432 jdf
19740 READ (_ZZP,KEY="U/M"+VALUE_UM$,DOM=*NEXT)V1$,V1,V2 ! SSP240432 jdf
19750 IF MID(V1$,20,1)="Y" THEN DISABLE CONTROL VALUE_QTY_PER.CTL ELSE ENABLE CONTROL VALUE_QTY_PER.CTL ! SSP240432 jdf
19755 U1$="",V1$="",U1=0,U2=0,V1=0,V2=0 ! SSP240432 jdf
19760 REFRESH_FLG=1 ! SSP240432 jdf
19770 RETURN ! SSP240432 jdf
19800 GET_UNIT_TOTAL:! SSP240432 jdf
19805 DIM M6[1]; CALL "IC2PRE",X3$,_ZZP,M6$,M6{ALL},"",0,"",0 ! SSP240432 jdf
19807 IF STP(VALUE_UM$)="" THEN CALL "FM2EXT",_ZZP,1,UM$,NUM(UM_QTY_PER$),NUM(BILLED_QTY$),U,NUM(TOTAL_BILLED_TO_DT$),M6[1]; VALUATION=U; GOTO 19819 ! SSP240432 jdf
19808 VALUE_UM$=VALUE_UM$+DIM(4),VALUE_UM$=VALUE_UM$(1,4) ! SSP 307497
19810 CALL "FM2EXT",_ZZP,1,VALUE_UM$,NUM(VALUE_QTY_PER$),NUM(BILLED_QTY$),U,NUM(TOTAL_BILLED_TO_DT$),M6[1]; VALUATION=U ! SSP240432 jdf
19820 VALUATION$=STR(VALUATION) ! SSP240432 jdf
19830 REFRESH_FLG=1 ! SSP240432 jdf
19840 RETURN ! SSP240432 jdf
56000 ! "213578-FMGCAB - Bundled pricing utility.  This option will need to 
56002 REM "240432-Program FMGCAB Bundle Price Data Utility does not accept    
56003 REM "307497-GUI Item/Order Bundled pricing does not alsways calculate   
