0010 ! "FMGLAA - Ship-To Location Setup
0035 REM "5.7 - 07/19/22 - 15.374239 - crg - SSP# 307410
0037 REM "307410-DBD-273 - Long receiving dept field changes using ZYR file  
0040 REM "Copyright 2022 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PNL_INVOKE:
0055 _CUSTOMER$=%CUSTOMER$
0060 PROCESS "FMGLAA","../ARG/AR.EN"
0065 %CUSTOMER$=_CUSTOMER$
0070 EXIT 
0100 ! 100 - Initialization
0105 INIT:
0113 _CUSTOMER$=%CUSTOMER$
0115 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0120 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0125 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0130 %LOC_TYPE$="C"
0135 GOSUB SETUP_KEYS
0140 _FILE_NAME$="FM0"+%C$
0145 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0150 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0155 _FILE_NAME$="AR1"+%C$; _AR1=HFN; OPEN (_AR1,ERR=OPEN_ERR,IOL=*)_FILE_NAME$
0160 _FILE_NAME$="ZZPARM"; _ZZPARM=HFN; OPEN (_ZZPARM,ERR=OPEN_ERR)_FILE_NAME$
0165 READ (_ZZPARM,KEY=%C$+"F/M")%OPS_PARM$
0167 DIM SEC_BY_OP$(255); READ (_ZZPARM,KEY="osec"+%X3_OP_ID$,DOM=*NEXT)SEC_BY_OP$
0170 HAS_EC=0; READ (_ZZPARM,KEY=%C$+"E/C",DOM=*NEXT)EC$; HAS_EC=1
0172 TM_PARMS$=""; CALL "RTWPRM",ERR=*NEXT,TM_PARMS$
0173 CALL "ZZ2PRP","SM",SM_ACTIVE$,TMP$
0174 HAS_MODULE_TW=FN%HAS_MODULE("TW"); IF HAS_MODULE_TW THEN FIND (_ZZPARM,KEY=%C$+"T/W",DOM=*NEXT)TW_PARMS$ ! 249059
0175 _FILE_NAME$="FMP"+%C$; _FMP=HFN; OPEN (_FMP,ERR=OPEN_ERR)_FILE_NAME$
0180 _FILE_NAME$="FMM"+%C$,_FMM=HFN; OPEN (_FMM,ERR=OPEN_ERR)_FILE_NAME$
0181 _FILE_NAME$="FTD"+%C$,_FTD=HFN; OPEN (_FTD,ERR=OPEN_ERR)_FILE_NAME$
0182 _FILE_NAME$="ASH"+%C$,_ASH=HFN; OPEN (_ASH,ERR=OPEN_ERR)_FILE_NAME$
0183 _FILE_NAME$="ASR"+%C$,_ASR=HFN; OPEN (_ASR,ERR=OPEN_ERR)_FILE_NAME$
0184 _FILE_NAME$="AR5"+%C$,_AR5=HFN; OPEN (_AR5,ERR=OPEN_ERR)_FILE_NAME$
0185 QLL=FN%HAS_MODULE("QL") ! SSP 307387
0186 _FILE_NAME$="ZYR"+%C$,_ZYR=HFN; OPEN (_ZYR,ERR=OPEN_ERR)_FILE_NAME$ ! 307410
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0325 MESSAGE_LIB %FLMAINT_MSG$,ERR=*NEXT; GOTO 0360
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=2
0430 DIM _KEYS$[1:2]; _KEYS$[1]="CUSTOMER$",_KEYS$[2]="LOC_CODE$"
0440 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0515 CALLED$="N"; IF %OPS_PARM$(279,1)<>"Y" THEN HIDE CONTROL RD_LOOKUP.CTL
0517 IF FN%HAS_MODULE("EC") THEN CALL "*WINGRP;SHOW",WEB_EC.GRP$
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 IF STP(_CUSTOMER$,3)<>"" THEN CUSTOMER$=_CUSTOMER$; CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$; CUSTOMER$=CUST_DIV$+CUST_CODE$,%CUSTOMER$=CUSTOMER$,ARG_1$="C"+CUSTOMER$
0540 IF ARG_1$="" THEN _ENABLE_FLG=1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$,_ENABLE_FLG=_NUMKEYS,_CURKEY=_NUMKEYS-1,_KCNT=_NUMKEYS,CALLED$="Y"; GOSUB ENABLE_GROUPS; READ (_FIL_NO,KEY=_KEY$,DOM=*NEXT)
0560 ! _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0700 ! 700 - Set up tabbing between folders
0710 INIT_FOLDER:
0720 GOSUB ENABLE_GROUPS
0730 IF _ENABLE_FLG<>1 THEN IF TAB_FLG$="<" THEN NEXT_ID=_LAST_TAB ELSE NEXT_ID=_FIRST_TAB
0735 IF FOLDER_ID$="FMGLAA.1" AND CALLED$="Y" THEN NEXT_ID=LOC_CODE.CTL
0736 IF FOLDER_ID$="FMGLAA.2" AND FN%HAS_MODULE("OS") THEN CALL "*WINGRP;SHOW",OPT.GRP$ ! SSP#282488
0737 IF FOLDER_ID$="FMGLAA.3" AND FN%HAS_MODULE("EC") THEN CALL "*WINGRP;SHOW",WEB_EC.GRP$
0740 EXIT 
0900 ! 900 - Wrapup
0905 WRAPUP:
0910 READ DATA FROM "" TO IOL=GLOBAL_IOL
0915 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0920 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0925 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0930 IF _AR1<>0 THEN CLOSE (_AR1); _AR1=0
0935 IF _ZZPARM<>0 THEN CLOSE (_ZZPARM); _ZZPARM=0
0940 IF _FMP<>0 THEN CLOSE (_FMP); _FMP=0
0945 IF _FMM<>0 THEN CLOSE (_FMM); _FMM=0
0950 IF _FTD<>0 THEN CLOSE (_FTD); _FTD=0
0955 IF _ASH<>0 THEN CLOSE (_ASH); _ASH=0
0960 IF _ASR<>0 THEN CLOSE (_ASR); _ASR=0
0961 IF _AR5<>0 THEN CLOSE (_AR5); _AR5=0
0962 IF _ZYR<>0 THEN CLOSE (_ZYR); _ZYR=0 ! 307410
0965 MESSAGE_LIB _SV_MSGLIB$
0970 SET_PARAM 'KR'=_SV_KR
0990 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1025 IF ID$="CUSTOMER" THEN IF STP(CUSTOMER$,3)="" THEN TEXT$="Customer field may not  be blank"; MSGBOX TEXT$; NEXT_ID=CUSTOMER.CTL; EXIT 
1030 IF _ENABLE_FLG<0 THEN _KCNT=1,_ENABLE_FLG=1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$; CUSTOMER$=CUST_DIV$+CUST_CODE$
1060 LOC_TYPE$=%LOC_TYPE$
1070 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1080 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1090 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1100 GOSUB PROCESS_READ
1110 GOSUB NUM_TO_STR
1120 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=LOC_DESC.CTL
1130 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1215 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",ANSWER$
1216 IF ANSWER$="NO" THEN GOTO CLEAR_REC
1220 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1225 IF STP(LOC_CODE$,3)="" THEN MSGBOX "Location code is blank.  Please try again.","Attention","!"; NEXT_ID=LOC_CODE.CTL; GOTO *RETURN
1230 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1240 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1250 NEXT_FOLDER=_FIRST_FOLDER
1255 GOSUB SET_NEW_RECORD_DEFAULTS
1260 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG THEN EXIT ! IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1450 IF _ENABLE_FLG THEN _KCNT=1,_ENABLE_FLG=1; GOSUB ENABLE_GROUPS
1460 CHANGE_FLG=0
1470 NEXT_ID=_FIRST_KEY
1480 EXIT 
1600 ! 1600 - Delete
1605 DELETE_REC:
1610 IF SEC_BY_OP$(76,1)="Y" THEN MSGBOX "Access Denied! You may not delete a Customer Ship-to","Attention","!"; RETURN 
1615 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1620 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1625 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1630 IF _X$<>"YES" THEN RETURN 
1635 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1640 IF TM_PARMS$<>"" THEN CUST$=CUST_DIV$+CUST_CODE$; CALL "RTGWOC",ERR=*NEXT,CUST$,"FM0...","D",_KEY$
1645 GOSUB REMOVE_SORT_FILES
1650 IF _ENABLE_FLG THEN _KCNT=1,_ENABLE_FLG=1; GOSUB ENABLE_GROUPS
1655 CHANGE_FLG=0
1660 NEXT_ID=_FIRST_KEY
1700 EXIT 
1710 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF CALLED$="Y" THEN _ENABLE_FLG=_NUMKEYS,_CURKEY=_NUMKEYS-1,_KCNT=_NUMKEYS; GOSUB ENABLE_GROUPS ELSE IF _ENABLE_FLG THEN _KCNT=1,_ENABLE_FLG=1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1855 IF CALLED$="Y" THEN NEXT_ID=LOC_CODE.CTL ELSE NEXT_ID=CUSTOMER.CTL
1856 HIDE CONTROL SHIP_ID_BTN.CTL
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2045 IF MID(_KEY$,1,1)<>%LOC_TYPE$ THEN GOTO END_OF_FILE ! Only scroll to C type records
2050 IF CALLED$="Y" THEN IF _KEY$(1,11)<>%LOC_TYPE$+%CUSTOMER$ THEN GOTO END_OF_FILE ! Only scroll thru records pertaining to this cust if coming from menu or other program
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!" ! SSP 217066
2110 IF CALLED$="Y" THEN READ (_FIL_NO,KEY=%LOC_TYPE$+%CUSTOMER$+$FE$,ERR=*NEXT)
2120 GOTO 2640
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE)
2231 IF _KEY$(1,1)<>%LOC_TYPE$ THEN GOTO START_OF_FILE ! Only scroll to C type records
2233 IF CALLED$="Y" THEN IF _KEY$(1,11)<>%LOC_TYPE$+%CUSTOMER$ THEN GOTO START_OF_FILE ! Only scroll thru records pertaining to this cust if coming from menu of other program
2235 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!" ! SSP 217066
2280 IF CALLED$="Y" THEN READ (_FIL_NO,KEY=%LOC_TYPE$+%CUSTOMER$,ERR=*NEXT) ! SSP 217066
2290 GOTO 2431
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 IF CALLED$="Y" THEN READ (_FIL_NO,KEY=%LOC_TYPE$+%CUSTOMER$,ERR=*NEXT) ELSE READ (_FIL_NO,KEY=%LOC_TYPE$,ERR=*NEXT) ! If coming from menu or other program, position file to first record for this cust else position to first C type record
2431 _KEY$=KEY(_FIL_NO,ERR=NO_FIRST)
2435 IF _KEY$(1,1)<>%LOC_TYPE$ THEN GOTO NO_FIRST
2440 IF CALLED$="Y" THEN IF _KEY$(1,11)<>%LOC_TYPE$+%CUSTOMER$ THEN GOTO NO_FIRST
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 IF CALLED$="Y" THEN READ (_FIL_NO,KEY=%LOC_TYPE$+%CUSTOMER$+$FE$,ERR=*NEXT) ELSE READ (_FIL_NO,KEY=%LOC_TYPE$+$FE$,ERR=*NEXT) ! If coming from menu or other program, position file to last record for this cust else position to last C record
2640 _KEY$=KEP(_FIL_NO,ERR=NO_LAST)
2642 IF _KEY$(1,1)<>%LOC_TYPE$ THEN GOTO NO_LAST
2645 IF CALLED$="Y" THEN IF _KEY$(1,11)<>%LOC_TYPE$+%CUSTOMER$ THEN GOTO NO_LAST
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3005 ! Processing required by READ
3010 PROCESS_READ:
3015 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3020 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3025 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3030 CHANGE_FLG=0
3035 GOSUB SET_CHECK_BOX_VALUES
3040 CUSTOMER$=CUST_DIV$+CUST_CODE$
3045 GOSUB SET_OLD_SORT_KEY_VALUES
3050 DIM CUST_PARM_D$(243); READ (_FMP,KEY="D"+CUSTOMER$,DOM=*NEXT)CUST_PARM_D$
3055 IF CUST_PARM_D$(24,1)="Y" THEN IF STP(FMS_METHOD$,3)="" THEN MSGBOX "This is an "+MSG("FMS")+" customer, and no location usage method is set!","Attention","!" ! SSP#282099
3060 IF SM_ACTIVE$="Y" THEN SHOW CONTROL SHIP_ID_BTN.CTL
3065 GOSUB PROCESS_AR5
3066 GOSUB GET_LONG_RECVG_DEPT
3080 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$)
3325 IF TM_PARMS$<>"" THEN CUST$=CUST_DIV$+CUST_CODE$; CALL "RTGWOC",ERR=*NEXT,CUST$,"FM0...","U",_KEY$
3326 GOSUB WRITE_SORT_FILES
3327 GOSUB SET_LONG_RECVG_DEPT
3328 IF QLL THEN XET$="FM0",XSYS$="EQLINK",XKY$=CUST_DIV$+CUST_CODE$+LOC_CODE$,XVAL$=RECVG_DEPT$; CALL "UPDZYR;WRITE_XREF",ERR=*NEXT,XET$,XSYS$,XKY$,XVAL$,"Y" ! SSP 307387
3330 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3340 GOSUB NUM_TO_STR
3350 REFRESH_FLG=1
3355 IF SM_ACTIVE$="Y" THEN SHOW CONTROL SHIP_ID_BTN.CTL
3360 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=LOC_CODE.CTL,_FIRST_FIELD=LOC_DESC.CTL,_FIRST_FOLDER=FLDR.FMGLAA.1.CTL
3815 _W_FLG=0
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=1,_ENABLE_FLG=1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 RETURN 
11030 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11040 NEXT_ID=_X
11050 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12012 _W_FLG=0
12015 GOSUB LOC_DUP_CHECK
12017 IF POS(%OPS_PARM$(279,1)="YF")<>0 THEN GOSUB DEPT_DUP_CHECK
12019 GOSUB CHECK_SALESTAX_CODE
12030 RETURN 
13000 ! 13000 - Clear the record fields
13001 GLOBAL_IOL:IOLIST %CUSTOMER_J$
13010 CLEAR_FIELDS:
13015 IF CALLED$="Y" THEN GOTO 13050
13020 IF _CLR_FLG$="R" THEN LOC_TYPE$=""
13030 IF _CLR_FLG$="R" THEN CUST_DIV$=""
13040 IF _CLR_FLG$="R" THEN CUST_CODE$="",CUSTOMER$=""; READ DATA FROM "" TO IOL=GLOBAL_IOL
13050 IF _CLR_FLG$="R" THEN LOC_CODE$=""
13060 LOC_DESC$=""
13070 LOC_ADDR_1$=""
13080 LOC_ADDR_2$=""
13090 LOC_CITY$=""
13100 LOC_ST$=""
13110 LOC_ZIP_CODE$=""
13115 LOC_COUNTRY$="" ! SSP307210
13120 LOC_FAX$=""
13130 LOC_LOOKUP$=""
13140 LOC_AGENT$=""
13150 LOC_GREETING$=""
13160 LOC_PHONE$=""
13170 CUST_LOC_CODE$=""
13180 FMS_METHOD$=""
13190 STAX_CODE$=""
13200 EXC_FROM_FMS_ONHAND$=""
13210 FM0_UNUSED_1$=""
13220 COST_CENTER_CODE$=""
13230 MULTI_CNT_STOPS$=""
13240 DIGITS_FOR_CNT_STOPS$=""
13250 LOC_NAME$=""
13260 LOC_TAX_EXEMPT$=""
13270 DFLT_SUPPLY_WHSE$=""
13280 DFLT_FOB_CODE$=""
13290 DFLT_HOW_TO_SHIP$=""
13300 DFLT_INSIDE_DLVRY$=""
13310 DFLT_SHIP_VIA_CODE$=""
13320 DFLT_SHIP_VIA_TEXT$=""
13330 CNT_SCHD$=""
13340 SECURE_ITEMS_HERE$=""
13350 LOC_OPTS$=""
13360 CNT_ENTRY_ID$=""
13370 FM0_UNUSED_2$=""
13380 RECVG_DEPT$="",LONG_RECVG_DEPT$="" ! 307410
13390 LOC_ADDL_ADDR_1$=""
13400 LOC_ADDL_ADDR_2$=""
13410 LOC_ADDL_ADDR_3$=""
13420 LOC_ADDL_ADDR_4$=""
13430 FM0_UNUSED_3$="",FM0_UNUSED_4$=""
13435 UNITED_ACCT$=""; WILL_CALL$="",DROP_SHIP$=""; REM SSP 197118
13440 GOSUB NUM_TO_STR
13450 REFRESH_FLG=1
13460 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$ ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 ! IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$ ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 ! IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$ ELSE CALL "*wingrp;Disable",KEY4.GRP$
14060 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14070 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14075 IF CALLED$="Y" THEN DISABLE CONTROL CUSTOMER.CTL
14076 IF %OPS_PARM$(244,1)<>"Y" AND FOLDER_ID$="FMGLAA.4" THEN CALL "*wingrp;Disable",ADDL.GRP$; CALL "*wingrp;Show",NO_ADDL.GRP$
14077 IF MID(CUST_PARM_D$,24,1)<>"Y" THEN CALL "*wingrp;Hide",FMS.GRP$
14078 IF MID(CUST_PARM_D$,24,1)<>"Y" OR POS(FMS_METHOD$="CE")=0 THEN DISABLE CONTROL MULTI_CNT_STOPS.CTL
14079 IF HAS_EC=0 THEN HIDE CONTROL NO_SHOW_EC.CTL
14080 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(46,"N"); REM SSP 197118 SSP307210
15030 IF _ORIG.LOC_TYPE$=_CUR.LOC_TYPE$ OR LOC_TYPE$=_CUR.LOC_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_TYPE$=LOC_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_TYPE")+" = "+_CUR.LOC_TYPE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_TYPE")+" = "+_CUR.LOC_TYPE$
15040 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15050 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15060 IF _ORIG.LOC_CODE$=_CUR.LOC_CODE$ OR LOC_CODE$=_CUR.LOC_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_CODE$=LOC_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_CODE")+" = "+_CUR.LOC_CODE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_CODE")+" = "+_CUR.LOC_CODE$
15070 IF _ORIG.LOC_DESC$=_CUR.LOC_DESC$ OR LOC_DESC$=_CUR.LOC_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_DESC$=LOC_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_DESC")+" = "+_CUR.LOC_DESC$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_DESC")+" = "+_CUR.LOC_DESC$
15080 IF _ORIG.LOC_ADDR_1$=_CUR.LOC_ADDR_1$ OR LOC_ADDR_1$=_CUR.LOC_ADDR_1$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_ADDR_1$=LOC_ADDR_1$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_ADDR_1")+" = "+_CUR.LOC_ADDR_1$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_ADDR_1")+" = "+_CUR.LOC_ADDR_1$
15090 IF _ORIG.LOC_ADDR_2$=_CUR.LOC_ADDR_2$ OR LOC_ADDR_2$=_CUR.LOC_ADDR_2$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_ADDR_2$=LOC_ADDR_2$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_ADDR_2")+" = "+_CUR.LOC_ADDR_2$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_ADDR_2")+" = "+_CUR.LOC_ADDR_2$
15100 IF _ORIG.LOC_CITY$=_CUR.LOC_CITY$ OR LOC_CITY$=_CUR.LOC_CITY$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_CITY$=LOC_CITY$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_CITY")+" = "+_CUR.LOC_CITY$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_CITY")+" = "+_CUR.LOC_CITY$
15110 IF _ORIG.LOC_ST$=_CUR.LOC_ST$ OR LOC_ST$=_CUR.LOC_ST$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_ST$=LOC_ST$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_ST")+" = "+_CUR.LOC_ST$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_ST")+" = "+_CUR.LOC_ST$
15120 IF _ORIG.LOC_ZIP_CODE$=_CUR.LOC_ZIP_CODE$ OR LOC_ZIP_CODE$=_CUR.LOC_ZIP_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_ZIP_CODE$=LOC_ZIP_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_Z_C")+" = "+_CUR.LOC_ZIP_CODE$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_Z_C")+" = "+_CUR.LOC_ZIP_CODE$
15130 IF _ORIG.LOC_FAX$=_CUR.LOC_FAX$ OR LOC_FAX$=_CUR.LOC_FAX$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_FAX$=LOC_FAX$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_FAX")+" = "+_CUR.LOC_FAX$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_FAX")+" = "+_CUR.LOC_FAX$
15140 IF _ORIG.LOC_LOOKUP$=_CUR.LOC_LOOKUP$ OR LOC_LOOKUP$=_CUR.LOC_LOOKUP$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_LOOKUP$=LOC_LOOKUP$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_LOOKUP")+" = "+_CUR.LOC_LOOKUP$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_LOOKUP")+" = "+_CUR.LOC_LOOKUP$
15150 IF _ORIG.LOC_AGENT$=_CUR.LOC_AGENT$ OR LOC_AGENT$=_CUR.LOC_AGENT$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_AGENT$=LOC_AGENT$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_AGENT")+" = "+_CUR.LOC_AGENT$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_AGENT")+" = "+_CUR.LOC_AGENT$
15160 IF _ORIG.LOC_GREETING$=_CUR.LOC_GREETING$ OR LOC_GREETING$=_CUR.LOC_GREETING$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_GREETING$=LOC_GREETING$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_G")+" = "+_CUR.LOC_GREETING$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_G")+" = "+_CUR.LOC_GREETING$
15170 IF _ORIG.LOC_PHONE$=_CUR.LOC_PHONE$ OR LOC_PHONE$=_CUR.LOC_PHONE$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_PHONE$=LOC_PHONE$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_PHONE")+" = "+_CUR.LOC_PHONE$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_PHONE")+" = "+_CUR.LOC_PHONE$
15180 IF _ORIG.CUST_LOC_CODE$=_CUR.CUST_LOC_CODE$ OR CUST_LOC_CODE$=_CUR.CUST_LOC_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_LOC_CODE$=CUST_LOC_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_L_C")+" = "+_CUR.CUST_LOC_CODE$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_L_C")+" = "+_CUR.CUST_LOC_CODE$
15190 IF _ORIG.FMS_METHOD$=_CUR.FMS_METHOD$ OR FMS_METHOD$=_CUR.FMS_METHOD$ THEN GOTO *NEXT ELSE IF _ORIG.FMS_METHOD$=FMS_METHOD$ THEN _CHG2$=_CHG2$+SEP+MSG("FMS_METHOD")+" = "+_CUR.FMS_METHOD$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FMS_METHOD")+" = "+_CUR.FMS_METHOD$
15200 IF _ORIG.STAX_CODE$=_CUR.STAX_CODE$ OR STAX_CODE$=_CUR.STAX_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.STAX_CODE$=STAX_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("STAX_CODE")+" = "+_CUR.STAX_CODE$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STAX_CODE")+" = "+_CUR.STAX_CODE$
15210 IF _ORIG.EXC_FROM_FMS_ONHAND$=_CUR.EXC_FROM_FMS_ONHAND$ OR EXC_FROM_FMS_ONHAND$=_CUR.EXC_FROM_FMS_ONHAND$ THEN GOTO *NEXT ELSE IF _ORIG.EXC_FROM_FMS_ONHAND$=EXC_FROM_FMS_ONHAND$ THEN _CHG2$=_CHG2$+SEP+MSG("EXC_F_F_O")+" = "+_CUR.EXC_FROM_FMS_ONHAND$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EXC_F_F_O")+" = "+_CUR.EXC_FROM_FMS_ONHAND$
15220 IF _ORIG.FM0_UNUSED_1$=_CUR.FM0_UNUSED_1$ OR FM0_UNUSED_1$=_CUR.FM0_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.FM0_UNUSED_1$=FM0_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.FM0_UNUSED_1$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.FM0_UNUSED_1$
15230 IF _ORIG.COST_CENTER_CODE$=_CUR.COST_CENTER_CODE$ OR COST_CENTER_CODE$=_CUR.COST_CENTER_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.COST_CENTER_CODE$=COST_CENTER_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("COST_C_C")+" = "+_CUR.COST_CENTER_CODE$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COST_C_C")+" = "+_CUR.COST_CENTER_CODE$
15240 IF _ORIG.MULTI_CNT_STOPS$=_CUR.MULTI_CNT_STOPS$ OR MULTI_CNT_STOPS$=_CUR.MULTI_CNT_STOPS$ THEN GOTO *NEXT ELSE IF _ORIG.MULTI_CNT_STOPS$=MULTI_CNT_STOPS$ THEN _CHG2$=_CHG2$+SEP+MSG("MULT_C_S")+" = "+_CUR.MULTI_CNT_STOPS$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MULT_C_S")+" = "+_CUR.MULTI_CNT_STOPS$
15250 IF _ORIG.DIGITS_FOR_CNT_STOPS$=_CUR.DIGITS_FOR_CNT_STOPS$ OR DIGITS_FOR_CNT_STOPS$=_CUR.DIGITS_FOR_CNT_STOPS$ THEN GOTO *NEXT ELSE IF _ORIG.DIGITS_FOR_CNT_STOPS$=DIGITS_FOR_CNT_STOPS$ THEN _CHG2$=_CHG2$+SEP+MSG("DIGI_F_C_S")+" = "+_CUR.DIGITS_FOR_CNT_STOPS$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DIGI_F_C_S")+" = "+_CUR.DIGITS_FOR_CNT_STOPS$
15260 IF _ORIG.LOC_NAME$=_CUR.LOC_NAME$ OR LOC_NAME$=_CUR.LOC_NAME$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_NAME$=LOC_NAME$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_NAME")+" = "+_CUR.LOC_NAME$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_NAME")+" = "+_CUR.LOC_NAME$
15270 IF _ORIG.LOC_TAX_EXEMPT$=_CUR.LOC_TAX_EXEMPT$ OR LOC_TAX_EXEMPT$=_CUR.LOC_TAX_EXEMPT$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_TAX_EXEMPT$=LOC_TAX_EXEMPT$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_T_E")+" = "+_CUR.LOC_TAX_EXEMPT$,_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_T_E")+" = "+_CUR.LOC_TAX_EXEMPT$
15280 IF _ORIG.DFLT_SUPPLY_WHSE$=_CUR.DFLT_SUPPLY_WHSE$ OR DFLT_SUPPLY_WHSE$=_CUR.DFLT_SUPPLY_WHSE$ THEN GOTO *NEXT ELSE IF _ORIG.DFLT_SUPPLY_WHSE$=DFLT_SUPPLY_WHSE$ THEN _CHG2$=_CHG2$+SEP+MSG("DFLT_S_W")+" = "+_CUR.DFLT_SUPPLY_WHSE$,_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DFLT_S_W")+" = "+_CUR.DFLT_SUPPLY_WHSE$
15290 IF _ORIG.DFLT_FOB_CODE$=_CUR.DFLT_FOB_CODE$ OR DFLT_FOB_CODE$=_CUR.DFLT_FOB_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.DFLT_FOB_CODE$=DFLT_FOB_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("DFLT_F_C")+" = "+_CUR.DFLT_FOB_CODE$,_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DFLT_F_C")+" = "+_CUR.DFLT_FOB_CODE$
15300 IF _ORIG.DFLT_HOW_TO_SHIP$=_CUR.DFLT_HOW_TO_SHIP$ OR DFLT_HOW_TO_SHIP$=_CUR.DFLT_HOW_TO_SHIP$ THEN GOTO *NEXT ELSE IF _ORIG.DFLT_HOW_TO_SHIP$=DFLT_HOW_TO_SHIP$ THEN _CHG2$=_CHG2$+SEP+MSG("DFLT_H_T_S")+" = "+_CUR.DFLT_HOW_TO_SHIP$,_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DFLT_H_T_S")+" = "+_CUR.DFLT_HOW_TO_SHIP$
15310 IF _ORIG.DFLT_INSIDE_DLVRY$=_CUR.DFLT_INSIDE_DLVRY$ OR DFLT_INSIDE_DLVRY$=_CUR.DFLT_INSIDE_DLVRY$ THEN GOTO *NEXT ELSE IF _ORIG.DFLT_INSIDE_DLVRY$=DFLT_INSIDE_DLVRY$ THEN _CHG2$=_CHG2$+SEP+MSG("DFLT_I_D")+" = "+_CUR.DFLT_INSIDE_DLVRY$,_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DFLT_I_D")+" = "+_CUR.DFLT_INSIDE_DLVRY$
15320 IF _ORIG.DFLT_SHIP_VIA_CODE$=_CUR.DFLT_SHIP_VIA_CODE$ OR DFLT_SHIP_VIA_CODE$=_CUR.DFLT_SHIP_VIA_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.DFLT_SHIP_VIA_CODE$=DFLT_SHIP_VIA_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("DFLT_S_V_C")+" = "+_CUR.DFLT_SHIP_VIA_CODE$,_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DFLT_S_V_C")+" = "+_CUR.DFLT_SHIP_VIA_CODE$
15330 IF _ORIG.DFLT_SHIP_VIA_TEXT$=_CUR.DFLT_SHIP_VIA_TEXT$ OR DFLT_SHIP_VIA_TEXT$=_CUR.DFLT_SHIP_VIA_TEXT$ THEN GOTO *NEXT ELSE IF _ORIG.DFLT_SHIP_VIA_TEXT$=DFLT_SHIP_VIA_TEXT$ THEN _CHG2$=_CHG2$+SEP+MSG("DFLT_S_V_T")+" = "+_CUR.DFLT_SHIP_VIA_TEXT$,_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DFLT_S_V_T")+" = "+_CUR.DFLT_SHIP_VIA_TEXT$
15340 IF _ORIG.CNT_SCHD$=_CUR.CNT_SCHD$ OR CNT_SCHD$=_CUR.CNT_SCHD$ THEN GOTO *NEXT ELSE IF _ORIG.CNT_SCHD$=CNT_SCHD$ THEN _CHG2$=_CHG2$+SEP+MSG("CNT_SCHD")+" = "+_CUR.CNT_SCHD$,_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CNT_SCHD")+" = "+_CUR.CNT_SCHD$
15350 IF _ORIG.SECURE_ITEMS_HERE$=_CUR.SECURE_ITEMS_HERE$ OR SECURE_ITEMS_HERE$=_CUR.SECURE_ITEMS_HERE$ THEN GOTO *NEXT ELSE IF _ORIG.SECURE_ITEMS_HERE$=SECURE_ITEMS_HERE$ THEN _CHG2$=_CHG2$+SEP+MSG("SECU_I_H")+" = "+_CUR.SECURE_ITEMS_HERE$,_CHG_VAR$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SECU_I_H")+" = "+_CUR.SECURE_ITEMS_HERE$
15360 IF _ORIG.LOC_OPTS$=_CUR.LOC_OPTS$ OR LOC_OPTS$=_CUR.LOC_OPTS$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_OPTS$=LOC_OPTS$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_OPTS")+" = "+_CUR.LOC_OPTS$,_CHG_VAR$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_OPTS")+" = "+_CUR.LOC_OPTS$
15370 IF _ORIG.CNT_ENTRY_ID$=_CUR.CNT_ENTRY_ID$ OR CNT_ENTRY_ID$=_CUR.CNT_ENTRY_ID$ THEN GOTO *NEXT ELSE IF _ORIG.CNT_ENTRY_ID$=CNT_ENTRY_ID$ THEN _CHG2$=_CHG2$+SEP+MSG("CNT_E_I")+" = "+_CUR.CNT_ENTRY_ID$,_CHG_VAR$(35,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CNT_E_I")+" = "+_CUR.CNT_ENTRY_ID$
15380 IF _ORIG.FM0_UNUSED_2$=_CUR.FM0_UNUSED_2$ OR FM0_UNUSED_2$=_CUR.FM0_UNUSED_2$ THEN GOTO *NEXT ELSE IF _ORIG.FM0_UNUSED_2$=FM0_UNUSED_2$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.FM0_UNUSED_2$,_CHG_VAR$(36,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.FM0_UNUSED_2$
15390 IF _ORIG.RECVG_DEPT$=_CUR.RECVG_DEPT$ OR RECVG_DEPT$=_CUR.RECVG_DEPT$ THEN GOTO *NEXT ELSE IF _ORIG.RECVG_DEPT$=RECVG_DEPT$ THEN _CHG2$=_CHG2$+SEP+MSG("RECVG_DEPT")+" = "+_CUR.RECVG_DEPT$,_CHG_VAR$(37,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RECVG_DEPT")+" = "+_CUR.RECVG_DEPT$
15400 IF _ORIG.LOC_ADDL_ADDR_1$=_CUR.LOC_ADDL_ADDR_1$ OR LOC_ADDL_ADDR_1$=_CUR.LOC_ADDL_ADDR_1$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_ADDL_ADDR_1$=LOC_ADDL_ADDR_1$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_A_A_1")+" = "+_CUR.LOC_ADDL_ADDR_1$,_CHG_VAR$(38,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_A_A_1")+" = "+_CUR.LOC_ADDL_ADDR_1$
15410 IF _ORIG.LOC_ADDL_ADDR_2$=_CUR.LOC_ADDL_ADDR_2$ OR LOC_ADDL_ADDR_2$=_CUR.LOC_ADDL_ADDR_2$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_ADDL_ADDR_2$=LOC_ADDL_ADDR_2$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_A_A_2")+" = "+_CUR.LOC_ADDL_ADDR_2$,_CHG_VAR$(39,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_A_A_2")+" = "+_CUR.LOC_ADDL_ADDR_2$
15420 IF _ORIG.LOC_ADDL_ADDR_3$=_CUR.LOC_ADDL_ADDR_3$ OR LOC_ADDL_ADDR_3$=_CUR.LOC_ADDL_ADDR_3$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_ADDL_ADDR_3$=LOC_ADDL_ADDR_3$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_A_A_3")+" = "+_CUR.LOC_ADDL_ADDR_3$,_CHG_VAR$(40,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_A_A_3")+" = "+_CUR.LOC_ADDL_ADDR_3$
15430 IF _ORIG.LOC_ADDL_ADDR_4$=_CUR.LOC_ADDL_ADDR_4$ OR LOC_ADDL_ADDR_4$=_CUR.LOC_ADDL_ADDR_4$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_ADDL_ADDR_4$=LOC_ADDL_ADDR_4$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_A_A_4")+" = "+_CUR.LOC_ADDL_ADDR_4$,_CHG_VAR$(41,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_A_A_4")+" = "+_CUR.LOC_ADDL_ADDR_4$
15440 IF _ORIG.FM0_UNUSED_3$=_CUR.FM0_UNUSED_3$ OR FM0_UNUSED_3$=_CUR.FM0_UNUSED_3$ THEN GOTO *NEXT ELSE IF _ORIG.FM0_UNUSED_3$=FM0_UNUSED_3$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.FM0_UNUSED_3$,_CHG_VAR$(42,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.FM0_UNUSED_3$
15441 IF _ORIG.UNITED_ACCT$=_CUR.UNITED_ACCT$ OR UNITED_ACCT$=_CUR.UNITED_ACCT$ THEN GOTO *NEXT ELSE IF _ORIG.UNITED_ACCT$=UNITED_ACCT$ THEN _CHG2$=_CHG2$+SEP+MSG("SHIP_ACCT")+" = "+_CUR.UNITED_ACCT$,_CHG_VAR$(43,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SHIP_ACCT")+" = "+_CUR.UNITED_ACCT$; REM SSP 197118
15442 IF _ORIG.WILL_CALL$=_CUR.WILL_CALL$ OR WILL_CALL$=_CUR.WILL_CALL$ THEN GOTO *NEXT ELSE IF _ORIG.WILL_CALL$=WILL_CALL$ THEN _CHG2$=_CHG2$+SEP+MSG("WILL_CALL")+" = "+_CUR.WILL_CALL$,_CHG_VAR$(44,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WILL_CALL")+" = "+_CUR.WILL_CALL$; REM SSP 197118
15443 IF _ORIG.DROP_SHIP$=_CUR.DROP_SHIP$ OR DROP_SHIP$=_CUR.DROP_SHIP$ THEN GOTO *NEXT ELSE IF _ORIG.DROP_SHIP$=DROP_SHIP$ THEN _CHG2$=_CHG2$+SEP+MSG("DROP_SHIP")+" = "+_CUR.DROP_SHIP$,_CHG_VAR$(45,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DROP_SHIP")+" = "+_CUR.DROP_SHIP$; REM SSP 197118
15444 IF _ORIG.LOC_COUNTRY$=_CUR.LOC_COUNTRY$ OR LOC_COUNTRY$=_CUR.LOC_COUNTRY$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_COUNTRY$=LOC_COUNTRY$ THEN _CHG2$=_CHG2$+SEP+MSG("COUNTRY")+" = "+_CUR.LOC_COUNTRY$,_CHG_VAR$(46,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COUNTRY")+" = "+_CUR.LOC_COUNTRY$ ! SSP 307210
15450 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN LOC_TYPE$=_CUR.LOC_TYPE$
16030 IF _CHG_VAR$(2,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16040 IF _CHG_VAR$(3,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN LOC_CODE$=_CUR.LOC_CODE$
16060 IF _CHG_VAR$(5,1)="Y" THEN LOC_DESC$=_CUR.LOC_DESC$
16070 IF _CHG_VAR$(6,1)="Y" THEN LOC_ADDR_1$=_CUR.LOC_ADDR_1$
16080 IF _CHG_VAR$(7,1)="Y" THEN LOC_ADDR_2$=_CUR.LOC_ADDR_2$
16090 IF _CHG_VAR$(8,1)="Y" THEN LOC_CITY$=_CUR.LOC_CITY$
16100 IF _CHG_VAR$(9,1)="Y" THEN LOC_ST$=_CUR.LOC_ST$
16110 IF _CHG_VAR$(10,1)="Y" THEN LOC_ZIP_CODE$=_CUR.LOC_ZIP_CODE$
16120 IF _CHG_VAR$(11,1)="Y" THEN LOC_FAX$=_CUR.LOC_FAX$
16130 IF _CHG_VAR$(12,1)="Y" THEN LOC_LOOKUP$=_CUR.LOC_LOOKUP$
16140 IF _CHG_VAR$(13,1)="Y" THEN LOC_AGENT$=_CUR.LOC_AGENT$
16150 IF _CHG_VAR$(14,1)="Y" THEN LOC_GREETING$=_CUR.LOC_GREETING$
16160 IF _CHG_VAR$(15,1)="Y" THEN LOC_PHONE$=_CUR.LOC_PHONE$
16170 IF _CHG_VAR$(16,1)="Y" THEN CUST_LOC_CODE$=_CUR.CUST_LOC_CODE$
16180 IF _CHG_VAR$(17,1)="Y" THEN FMS_METHOD$=_CUR.FMS_METHOD$
16190 IF _CHG_VAR$(18,1)="Y" THEN STAX_CODE$=_CUR.STAX_CODE$
16200 IF _CHG_VAR$(19,1)="Y" THEN EXC_FROM_FMS_ONHAND$=_CUR.EXC_FROM_FMS_ONHAND$
16210 IF _CHG_VAR$(20,1)="Y" THEN FM0_UNUSED_1$=_CUR.FM0_UNUSED_1$
16220 IF _CHG_VAR$(21,1)="Y" THEN COST_CENTER_CODE$=_CUR.COST_CENTER_CODE$
16230 IF _CHG_VAR$(22,1)="Y" THEN MULTI_CNT_STOPS$=_CUR.MULTI_CNT_STOPS$
16240 IF _CHG_VAR$(23,1)="Y" THEN DIGITS_FOR_CNT_STOPS$=_CUR.DIGITS_FOR_CNT_STOPS$
16250 IF _CHG_VAR$(24,1)="Y" THEN LOC_NAME$=_CUR.LOC_NAME$
16260 IF _CHG_VAR$(25,1)="Y" THEN LOC_TAX_EXEMPT$=_CUR.LOC_TAX_EXEMPT$
16270 IF _CHG_VAR$(26,1)="Y" THEN DFLT_SUPPLY_WHSE$=_CUR.DFLT_SUPPLY_WHSE$
16280 IF _CHG_VAR$(27,1)="Y" THEN DFLT_FOB_CODE$=_CUR.DFLT_FOB_CODE$
16290 IF _CHG_VAR$(28,1)="Y" THEN DFLT_HOW_TO_SHIP$=_CUR.DFLT_HOW_TO_SHIP$
16300 IF _CHG_VAR$(29,1)="Y" THEN DFLT_INSIDE_DLVRY$=_CUR.DFLT_INSIDE_DLVRY$
16310 IF _CHG_VAR$(30,1)="Y" THEN DFLT_SHIP_VIA_CODE$=_CUR.DFLT_SHIP_VIA_CODE$
16320 IF _CHG_VAR$(31,1)="Y" THEN DFLT_SHIP_VIA_TEXT$=_CUR.DFLT_SHIP_VIA_TEXT$
16330 IF _CHG_VAR$(32,1)="Y" THEN CNT_SCHD$=_CUR.CNT_SCHD$
16340 IF _CHG_VAR$(33,1)="Y" THEN SECURE_ITEMS_HERE$=_CUR.SECURE_ITEMS_HERE$
16350 IF _CHG_VAR$(34,1)="Y" THEN LOC_OPTS$=_CUR.LOC_OPTS$
16360 IF _CHG_VAR$(35,1)="Y" THEN CNT_ENTRY_ID$=_CUR.CNT_ENTRY_ID$
16370 IF _CHG_VAR$(36,1)="Y" THEN FM0_UNUSED_2$=_CUR.FM0_UNUSED_2$
16380 IF _CHG_VAR$(37,1)="Y" THEN RECVG_DEPT$=_CUR.RECVG_DEPT$
16390 IF _CHG_VAR$(38,1)="Y" THEN LOC_ADDL_ADDR_1$=_CUR.LOC_ADDL_ADDR_1$
16400 IF _CHG_VAR$(39,1)="Y" THEN LOC_ADDL_ADDR_2$=_CUR.LOC_ADDL_ADDR_2$
16410 IF _CHG_VAR$(40,1)="Y" THEN LOC_ADDL_ADDR_3$=_CUR.LOC_ADDL_ADDR_3$
16420 IF _CHG_VAR$(41,1)="Y" THEN LOC_ADDL_ADDR_4$=_CUR.LOC_ADDL_ADDR_4$
16430 IF _CHG_VAR$(42,1)="Y" THEN FM0_UNUSED_3$=_CUR.FM0_UNUSED_3$
16431 IF _CHG_VAR$(43,1)="Y" THEN UNITED_ACCT$=_CUR.UNITED_ACCT$; REM SSP 197118
16432 IF _CHG_VAR$(44,1)="Y" THEN WILL_CALL$=_CUR.WILL_CALL$; REM SSP 197118
16433 IF _CHG_VAR$(45,1)="Y" THEN DROP_SHIP$=_CUR.DROP_SHIP$; REM SSP 197118
16434 IF _CHG_VAR$(46,1)="Y" THEN LOC_COUNTRY$=_CUR.LOC_COUNTRY$; REM SSP307210
16440 RETURN 
20000 ! 20000 - LOOKUP BUTTON BY RECEIVING DEPARTMENT LOGIC
20010 LOOKUP:
20020 PROCESS "QRY_FM0.1","../ARG/AR.EN",X$
20030 READ DATA FROM X$ TO LOC_CODE$
20040 _EOM$=$0D$,_ENABLE_FLG=1,_KCNT=_NUMKEYS
20050 GOTO FIND_REC
20060 ! 
20100 SET_CHECK_BOX_VALUES:
20110 IF MULTI_CNT_STOPS$=" " THEN MULTI_CNT_STOPS$="N"
20115 IF LOC_TAX_EXEMPT$=" " THEN LOC_TAX_EXEMPT$="N"
20120 IF NO_SHOW_EC$=" " THEN NO_SHOW_EC$="N"
20125 IF POS(NO_SHOW_EC$="YN")=0 THEN NO_SHOW_EC$="N" ! Clear out old data
20140 SET_CHECK_BOX_VALUES_END:RETURN 
20145 ! 
20150 SET_OLD_SORT_KEY_VALUES:
20160 OLD_FMM_SORT_KEY$=LOC_TYPE$+CUST_DIV$+CUST_CODE$+CUST_LOC_CODE$+LOC_CODE$
20165 OLD_FTD_SORT_KEY$=LOC_TYPE$+CUST_DIV$+CUST_CODE$+RECVG_DEPT$+LOC_CODE$
20170 OLD_ASH_SORT_KEY$=LOC_ZIP_CODE$+CUST_DIV$+CUST_CODE$+LOC_CODE$
20175 OLD_ASR_SORT_KEY$=PAD(LOC_PHONE$,10)+LOC_TYPE$+CUST_DIV$+CUST_CODE$+LOC_CODE$
20190 SET_OLD_SORT_KEY_VALUES_END:RETURN 
20195 ! 
20200 SET_NEW_RECORD_DEFAULTS:
20210 DIM CUST_PARM_D$(243); READ (_FMP,KEY="D"+CUSTOMER$,DOM=*NEXT)CUST_PARM_D$
20215 IF CUST_PARM_D$(46,2)<>"  " THEN FMS_METHOD$="I"
20220 IF CUST_PARM_D$(24,1)="Y" THEN FMS_METHOD$="I"
20225 DFLT_FOB_CODE$=CUST_PARM_D$(28,1),DFLT_HOW_TO_SHIP$=CUST_PARM_D$(29,1),DFLT_INSIDE_DLVRY$=CUST_PARM_D$(30,15),DFLT_SHIP_VIA_CODE$=CUST_PARM_D$(45,1)
20230 READ (_AR1,DOM=*NEXT,KEY=CUSTOMER$,REC=CUST$)
20235 LOC_ADDR_1$=CUST.CUST_ADDR_1$,LOC_ADDR_2$=CUST.CUST_ADDR_2$
20240 LOC_CITY$=CUST.CUST_CITY$,LOC_ST$=CUST.CUST_ST$,LOC_ZIP_CODE$=CUST.CUST_ZIP_CODE$
20245 LOC_FAX$=CUST.CUST_FAX$,LOC_LOOKUP$=CUST.CUST_LOOKUP$,LOC_AGENT$=CUST.PURCH_AGENT$
20250 LOC_GREETING$=CUST.CUST_GREETING$,LOC_PHONE$=CUST.CUST_PHONE$
20255 LOC_DESC$=CUST.CUST_NAME$
20260 LOC_TAX_EXEMPT$=CUST.TAX_EXEMPT$,STAX_CODE$=CUST.STAX_CODE$
20265 CUST_LOC_CODE$=LOC_CODE$
20270 IF POS(%OPS_PARM$(279,1)="YF")<>0 THEN RECVG_DEPT$=LOC_CODE$
20290 SET_NEW_RECORD_DEFAULTS_END:RETURN 
20295 ! 
20300 CUST_LOC_CODE_ENTRY:
20310 IF STP(CUST_LOC_CODE$,3)="" THEN CUST_LOC_CODE$=LOC_CODE$,REFRESH_FLG=1
20340 CUST_LOC_CODE_ENTRY_END:RETURN 
20345 ! 
20350 REC_DEPT_ENTRY:
20360 IF POS(%OPS_PARM$(279,1)="YF")<>0 THEN IF STP(RECVG_DEPT$,3)="" THEN RECVG_DEPT$=LOC_CODE$; REFRESH_FLG=1
20390 REC_DEPT_ENTRY_END:RETURN 
20395 ! 
20400 SHIP_VIA_CODE_ENTRY:
20410 IF STP(DFLT_SHIP_VIA_CODE$,3)="" THEN GOTO SHIP_VIA_CODE_ENTRY_END
20415 READ (_FMP,KEY="S"+DFLT_SHIP_VIA_CODE$,DOM=SHIP_VIA_CODE_ENTRY_END)SVC$
20420 DFLT_SHIP_VIA_TEXT$=SVC$(3,15),REFRESH_FLG=1
20440 SHIP_VIA_CODE_ENTRY_END:RETURN 
20445 ! 
20500 WRITE_SORT_FILES:
20510 GOSUB REMOVE_SORT_FILES
20520 WRITE (_FMM,KEY=LOC_TYPE$+CUST_DIV$+CUST_CODE$+PAD(CUST_LOC_CODE$,9)+PAD(LOC_CODE$,4))
20540 IF POS(%OPS_PARM$(279,1)="YF")<>0 THEN WRITE (_FTD,KEY=LOC_TYPE$+CUST_DIV$+CUST_CODE$+PAD(RECVG_DEPT$,20)+PAD(LOC_CODE$,4))
20560 WRITE (_ASH,KEY=PAD(LOC_ZIP_CODE$,9)+CUST_DIV$+CUST_CODE$+PAD(LOC_CODE$,4))
20580 WRITE (_ASR,KEY=PAD(LOC_PHONE$,10)+LOC_TYPE$+CUST_DIV$+CUST_CODE$+PAD(LOC_CODE$,4))
20590 WRITE_SORT_FILES_END:RETURN 
20595 ! 
20600 REMOVE_SORT_FILES:
20610 REMOVE (_FMM,KEY=OLD_FMM_SORT_KEY$,DOM=*NEXT)
20620 REMOVE (_FTD,KEY=OLD_FTD_SORT_KEY$,DOM=*NEXT)
20630 REMOVE (_ASH,KEY=OLD_ASH_SORT_KEY$,DOM=*NEXT)
20635 REMOVE (_ASR,KEY=OLD_ASR_SORT_KEY$,DOM=*NEXT)
20640 REMOVE_SORT_FILES_END:RETURN 
20645 ! 
20700 LOC_DUP_CHECK:
20704 IF STP(_CUSTOMER$,3)<>"" AND STP(%CUSTOMER$,3)="" THEN %CUSTOMER$=_CUSTOMER$ ! SSP#230948
20705 Q$=LOC_TYPE$+%CUSTOMER$+PAD(CUST_LOC_CODE$,9)+PAD(LOC_CODE$,4) ! SSP#281580
20710 READ (_FMM,KEY=Q$(1,20),DOM=*NEXT)
20715 K$=KEY(_FMM,END=LOC_DUP_CHECK_END); IF MID(K$,1,20)<>Q$(1,20) THEN GOTO LOC_DUP_CHECK_END ELSE IF MID(K$,21,4)=Q$(21,4) THEN GOTO LOC_DUP_CHECK_END
20720 IF POS(%C$="135020566")<>0 THEN GOTO LOC_DUP_CHECK_END ! SSP#278651
20725 MSGBOX "This Location already exists for this customer."+SEP+"You must enter a unique Location Code for this Ship-to code.","Attention","!"
20730 _W_FLG=1; EXITTO 12030
20740 LOC_DUP_CHECK_END:RETURN 
20745 ! 
20750 DEPT_DUP_CHECK:
20755 Q$=LOC_TYPE$+CUST_DIV$+CUST_CODE$+PAD(RECVG_DEPT$,20)+PAD(LOC_CODE$,4) ! SSP#281580
20760 READ (_FTD,KEY=Q$(1,31),DOM=*NEXT)
20765 K$=KEY(_FTD,END=DEPT_DUP_CHECK_END); IF K$(1,31)<>Q$(1,31) THEN GOTO DEPT_DUP_CHECK_END ELSE IF K$(32,4)=Q$(32,4) THEN GOTO DEPT_DUP_CHECK_END
20770 MSGBOX "This Receiving Department already exists for this customer."+SEP+"You must enter a unique Receiving Department for this Ship-to code.","Attention","!"
20775 _W_FLG=1; EXITTO 12030
20790 DEPT_DUP_CHECK_END:RETURN 
20795 ! 
20800 SHIPPER_ID:
20810 PROCESS "SHGMCA","../SHG/SH.EN",CUSTOMER$,LOC_CODE$
20840 SHIPPER_ID_END:RETURN 
20845 ! 
21000 LOOKUP_ZIP:! Lookup zipcode, set city & state if found, set NEW_ZIP for later use
21005 NEW_ZIP=0
21010 CALL "ZYGMBA;CHECK_ZIP",LOC_ZIP_CODE$,ZIP_FOUND,ZIP_CITY$,ZIP_ST$,"",ZIP_AREA_CODE$,"",ZIP_STAX_CODE$; REM SSP 199160
21012 IF ZIP_STAX_CODE$<>DIM(10) THEN STAX_CODE$=ZIP_STAX_CODE$; REM SSP 199160
21015 IF LOC_PHONE$="" THEN LOC_PHONE$=DIM(14)
21020 IF ZIP_FOUND THEN LOC_CITY$=ZIP_CITY$,LOC_ST$=ZIP_ST$; IF STP(MID(LOC_PHONE$,1,3))="" THEN LOC_PHONE$(1,3)=ZIP_AREA_CODE$; END_IF ; IF LEN(LOC_FAX$)=0 THEN LOC_FAX$=DIM(3); END_IF ; IF STP(MID(LOC_FAX$,1,3))="" THEN LOC_FAX$(1,3)=ZIP_AREA_CODE$; END_IF ; REFRESH_FLG=1,NEXT_ID=LOC_PHONE.CTL ELSE NEW_ZIP=1 ! SSP247904 jdf
21095 RETURN 
21099 ! 
21100 UPDATE_ZIP:! If new_zip then update the zip code table
21110 IF NEW_ZIP THEN CALL "ZYGMBA;UPDATE_ZIP",LOC_ZIP_CODE$,LOC_CITY$,LOC_ST$,"",MID(LOC_PHONE$,1,3),LOC_CITY$ ! get area code from phone,long city from regular city
21180 NEW_ZIP=0
21195 RETURN 
21199 ! 
22400 PROCESS_AR5:! 249059
22410 DIM AR5[7]
22420 FIND (_AR5,KEY=STAX_CODE$,DOM=*NEXT)AR5$,AR5{ALL}
22430 PRECISION 3; SHOW_TAX=AR5(0)+AR5(2)+AR5(3); PRECISION 2
22440 REFRESH_FLG=1
22450 RETURN 
22500 REM "Sales Tax Interface module - Check for valid sales tax code - 249059
22510 CHECK_SALESTAX_CODE:
22515 TAX_CODE_OK$="Y"
22520 IF HAS_MODULE_TW AND MID(TW_PARMS$,8,1)="Y" THEN {
22525 IF NUL(LOC_ST$) THEN GOTO CHECK_SALESTAX_CODE_END
22530 DIM G$(190); CALL "TW2FUN;LOOKUP_TAX_CODE",ERR=*NEXT,X3$,X4$,UCS(LOC_ST$),MID(LOC_ZIP_CODE$,1,5),MID(UCS(LOC_CITY$),1,16),"",T$,T{ALL}; G$(1)=T$(1)
22535 IF NUL(MID(G$,1,10)) OR MID(STAX_CODE$,1,7)=MID(G$,1,7) THEN GOTO CHECK_SALESTAX_CODE_END
22540 TAX_CODE_OK$="N"
22550  }
22560 IF TAX_CODE_OK$<>"Y" THEN {
22565 MSGBOX MSG("TW_BAD_TAX",STAX_CODE$,LOC_ST$,LOC_ZIP_CODE$,LOC_CITY$,MID(G$,1,10)),MSG("ATTN"),"!,TIM=5"
22570 STAX_CODE$=MID(G$,1,10); GOSUB PROCESS_AR5
22575 NEXT_FOLDER=FLDR.FMGLAA.3.CTL; REFRESH_FLG=1
22577 ! PREINPUT NEXT NEXT_FOLDER; PREINPUT NEXT_FOLDER
22580 _W_FLG=1; EXITTO 12030
22590  }
22595 CHECK_SALESTAX_CODE_END:RETURN 
22599 ! 
25000 CHECK_WRITE:
25010 MSGBOX MSG("WRITE_REC"),MSG("CONFIRM"),"?,YESNO",ANSWER$
25020 IF ANSWER$="YES" THEN GOTO WRITE_REC
25040 CHECK_WRITE_END:RETURN 
25045 ! 
26000 SEL_REC:ENTER VAL$
26010 EXIT 
26019 ! 
26020 GET_LONG_RECVG_DEPT:
26030 CALL "ZZGZYR;GETVALUE",ERR=*NEXT,_ZYR,"FM0","RECVGDEPT","","C"+CUST_DIV$+CUST_CODE$+LOC_CODE$,LONG_RECVG_DEPT$,""
26035 REFRESH_FLG=1
26040 RETURN 
26049 ! 
26050 SET_LONG_RECVG_DEPT:
26055 IF NUL(LONG_RECVG_DEPT$) THEN RETURN 
26060 CALL "ZZGZYR;SETVALUE",ERR=*NEXT,_ZYR,"FM0","RECVGDEPT","","C"+CUST_DIV$+CUST_CODE$+LOC_CODE$,LONG_RECVG_DEPT$,"Y"
26065 REFRESH_FLG=1
26090 RETURN 
26099 ! 
26100 FIND_LOC_FROM_LONG_RECVG_DEPT:
26110 ENTER CUSTOMER$,LONG_RECVG_DEPT$,IS_ACTIVE$,LOC_CODE$,ERR=*NEXT
26115 OPEN (HFN,ERR=END_FIND_XREF)"ZYR"+%C$; ZYR=LFO
26120 FOUND=0
26130 CALL "ZZGZYR;GETKEY",ERR=END_FIND_XREF,ZYR,"FM0","RECVGDEPT","","C"+CUSTOMER$,LONG_RECVG_DEPT$,LOC_KEY$,IS_ACTIVE$
26140 LOC_CODE$=MID(LOC_KEY$,12,4)
26160 END_FIND_XREF:
26190 CLOSE (ZYR)
26195 EXIT 
26199 ! 
56005 REM "194087-Changes made at Whitepaper during 2nd week of install       
56010 REM "197118-Account number field was not showing in Gen. Shipping screen   
56011 REM "199160-Add sales tax codes to ZY2MBA Zip Code Table 
56012 REM "213756-Need to import new location records for a customer.         
56015 ! "217066-Ship to records are being written with the key for one      
56016 REM "249059-Customer and Ship-to record sales tax code validation
56017 REM "281580-Getting error in order entry when creating a new ship to    
56018 REM "282099-Program: FMGLAA Change FMS to IMS on message "This is an    
56019 REM "282488-Would like to know what the field 'OP Account' is used for  
56020 REM "307210-International shipping address - add country code           
56021 REM "307387-EQLink DBD Bridge to Qnet                                   
56022 REM "307410-DBD-273 - Long receiving dept field changes using ZYR file  
