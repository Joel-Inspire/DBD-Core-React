0010 ! FMGOCC - File Maintenance Program for FTS_Contracts (="FTS"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Aug. 2, 2007 10:29
0030 ! ************************************************************************
0035 REM "5.7 - 03/12/19 - 8.716388 - tma - SSP# 306731
0037 REM "306731-When entering a new record for Order Contracts it           
0040 REM "Copyright 2019 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0060 PROCESS "FMGOCC","../FMG/FM.EN"
0070 IF %GUI THEN EXIT ELSE RUN "ZMENU"
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="FTS"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _ZZP_CHN=HFN; OPEN (_ZZP_CHN,ERR=OPEN_ERR)"ZZPARM"
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=3,_CUR_KEY$=""
0430 DIM _KEYS$[1:3]; _KEYS$[1]="CUSTOMER$",_KEYS$[2]="CONTRACT_NUM$",_KEYS$[3]="CONTRACT_DATE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0915 %CUSTOMER$=""
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1025 CUST_DIV$=CUSTOMER$(1,2)
1026 CUST_CODE$=CUSTOMER$(3,8)
1027 %CUSTOMER$=CUSTOMER$
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1215 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX _MSG_REC_MISS1$+(FN%ZZDISP$(CUSTOMER$,"A/R")+" "+CONTRACT_NUM$+" "+FN%FMT_TFDATE$(CONTRACT_DATE$,""))+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$ ! SSP#306731
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 WRITE (_FIL_NO,KEY=_KEY$)
1450 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_UPDADD$+(FN%ZZDISP$(CUSTOMER$,"A/R")+" "+CONTRACT_NUM$+" "+FN%FMT_TFDATE$(CONTRACT_DATE$,"")),_FYI$,"INFO" ! SSP#306731
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1475 GOSUB CLEAR_REC
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1695 GOSUB CLEAR_REC
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 IF _KEY$=_CUR_KEY$ THEN _KEY$=KEN(_FIL_NO,END=END_OF_FILE) ! Get past extracted record
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 EXTRACT (_FIL_NO,KEY=_KEY$)
3055 CUSTOMER$=CUST_DIV$+CUST_CODE$
3057 %CUSTOMER$=CUSTOMER$
3060 _CUR_KEY$=_KEY$
3070 RETURN 
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUST_DIV.CTL,_FIRST_FIELD=CONTRACT_DESC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 CONTRACT_AMOUNT$=STR(CONTRACT_AMOUNT)
10030 TOT_INV_AMT$=STR(TOT_INV_AMT)
10040 TOT_COST$=STR(TOT_COST)
10050 NET_SALES$=STR(NET_SALES)
10060 UNUSED_NUM1$=STR(UNUSED_NUM1)
10070 UNUSED_NUM2$=STR(UNUSED_NUM2)
10080 UNUSED_NUM3$=STR(UNUSED_NUM3)
10090 UNUSED_NUM4$=STR(UNUSED_NUM4)
10100 UNUSED_NUM5$=STR(UNUSED_NUM5)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="CONTRACT_AMOUNT",_X=CONTRACT_AMOUNT.CTL,CONTRACT_AMOUNT=NUM(CONTRACT_AMOUNT$,ERR=NON_NUMERIC)
11030 _X$="TOT_INV_AMT",_X=TOT_INV_AMT.CTL,TOT_INV_AMT=NUM(TOT_INV_AMT$,ERR=NON_NUMERIC)
11040 _X$="TOT_COST",_X=TOT_COST.CTL,TOT_COST=NUM(TOT_COST$,ERR=NON_NUMERIC)
11050 _X$="NET_SALES",_X=NET_SALES.CTL,NET_SALES=NUM(NET_SALES$,ERR=NON_NUMERIC)
11060 _X$="UNUSED_NUM1",_X=UNUSED_NUM1.CTL,UNUSED_NUM1=NUM(UNUSED_NUM1$,ERR=NON_NUMERIC)
11070 _X$="UNUSED_NUM2",_X=UNUSED_NUM2.CTL,UNUSED_NUM2=NUM(UNUSED_NUM2$,ERR=NON_NUMERIC)
11080 _X$="UNUSED_NUM3",_X=UNUSED_NUM3.CTL,UNUSED_NUM3=NUM(UNUSED_NUM3$,ERR=NON_NUMERIC)
11090 _X$="UNUSED_NUM4",_X=UNUSED_NUM4.CTL,UNUSED_NUM4=NUM(UNUSED_NUM4$,ERR=NON_NUMERIC)
11100 _X$="UNUSED_NUM5",_X=UNUSED_NUM5.CTL,UNUSED_NUM5=NUM(UNUSED_NUM5$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12030 IF LEN(STP(CONTRACT_DATE$))=0 THEN {
12035 _W_FLG=0
12040 NEXT_ID=CONTRACT_DATE.CTL
12045  }
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13015 IF _CLR_FLG$="R" THEN CUSTOMER$=""
13020 IF _CLR_FLG$="R" THEN CUST_DIV$=""
13030 IF _CLR_FLG$="R" THEN CUST_CODE$=""
13040 IF _CLR_FLG$="R" THEN CONTRACT_NUM$=""
13050 IF _CLR_FLG$="R" THEN CONTRACT_DATE$=""
13060 CONTRACT_DESC$=""
13070 CONTRACT_EXPIRATION$=""
13080 VALID_OPERATOR1$=""
13090 VALID_OPERATOR2$=""
13100 VALID_OPERATOR3$=""
13110 VALID_OPERATOR4$=""
13120 VALID_OPERATOR5$=""
13130 TF_UNUSED$=""
13140 CONTRACT_AMOUNT=0
13150 TOT_INV_AMT=0
13160 TOT_COST=0
13170 NET_SALES=0
13180 UNUSED_NUM1=0
13190 UNUSED_NUM2=0
13200 UNUSED_NUM3=0
13210 UNUSED_NUM4=0
13220 UNUSED_NUM5=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=1 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUSTOMER.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=CONTRACT_NUM.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=CONTRACT_DATE.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 VALIDATE_OPERATOR:
15020 IF ID=VALID_OPERATOR1.CTL THEN TMP_OPERATOR$=VALID_OPERATOR1$
15030 IF ID=VALID_OPERATOR2.CTL THEN TMP_OPERATOR$=VALID_OPERATOR2$
15040 IF ID=VALID_OPERATOR3.CTL THEN TMP_OPERATOR$=VALID_OPERATOR3$
15050 IF ID=VALID_OPERATOR4.CTL THEN TMP_OPERATOR$=VALID_OPERATOR4$
15060 IF ID=VALID_OPERATOR5.CTL THEN TMP_OPERATOR$=VALID_OPERATOR5$
15090 IF LEN(STP(TMP_OPERATOR$))=0 THEN RETURN 
15100 ZZP_KEY$="o"+TMP_OPERATOR$
15110 READ (_ZZP_CHN,KEY=ZZP_KEY$,DOM=INVALID_OPERATOR,ERR=INVALID_OPERATOR)ZZP_REC$
15195 RETURN 
15200 INVALID_OPERATOR:
15220 MSG_TITLE$=MSG("INVALID")+" "+MSG("OP")
15230 MSG_PARAM$="i,OK"
15240 MSG_TEXT$=MSG("OP")+" "+MSG("NOF")
15250 MSGBOX MSG_TEXT$,MSG_TITLE$,MSG_PARAM$
15380 NEXT_ID=ID
15395 RETURN 
15998 ! 
15999 ! 
16000 FTS_QRY:
16010 VAL$=""
16020 PROCESS "QRY_FTS","../FMG/FM.EN",VAL$
16030 IF LEN(STP(VAL$))>0 THEN {
16040 CUST_DIV$=VAL$(1,2)
16045 CUST_CODE$=VAL$(3,8)
16050 CUSTOMER$=VAL$(1,10)
16055 CONTRACT_NUM$=VAL$(11,20)
16060 CONTRACT_DATE$=VAL$(31,6)
16065 _KEY$=VAL$(1,36)
16070 READ (_FIL_NO,KEY=_KEY$)
16075 GOSUB PROCESS_READ
16080 GOSUB DISP_REC
16085  }
16090 REFRESH_FLG=1
16095 RETURN 
55998 ! 
55999 ! 
56000 REM + Modification History
56002 REM "200893-Create New Contract number field in order processing        
56004 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
