0010 ! FMGOBA - File Maintenance Program for Copy from Form  
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Sep. 27, 2003 9:35
0030 ! ************************************************************************
0035 REM "5.6 - 10/10/08 - 15.290277 - jdf - SSP# 206206
0037 REM "206206-RFQ. When setting up a new form and you use the copy feature
0040 REM "Copyright 2008 DemandBridge, Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 ENTER NEW_CUSTOMER$,NEW_ITEM_CODE$,ACTION$
0053 ACTION$="CANCEL" ! in case any bad things happen
0054 %NEW_CUSTOMER$=NEW_CUSTOMER$,%NEW_ITEM_CODE$=PAD(NEW_ITEM_CODE$,10,1)
0055 PROCESS "FMGOBA","../OPG/OP.EN"
0075 ACTION$=%ACTION$
0085 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; DIM Z[NUM(X3$(60,3))]
0165 IF %RFQ THEN Z$="01O QS1... 02O QSS... 03O FMU... 04O FMV... 05O QS2... 06O QSF... 13O ZZPARM " ELSE Z$="01O FM1... 02O FMS... 03O FMU... 04O FMV... 05O FM2... 06O FSF... 13O ZZPARM " ! SSP206206 jdf
0170 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
0175 _FILE_NAME$=FIN(Z[1],"FILENAME"),_FIL_NO=Z[1]
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0185 %OBA_DESC$=""
0188 CUSTOMER$=%NEW_CUSTOMER$; CALL "ZZWLKU;AR_CUST_FMT",CUSTOMER$,""
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=3
0430 DIM _KEYS$[1:3]; _KEYS$[1]="CUST_DIV$",_KEYS$[2]="CUST_CODE$",_KEYS$[3]="ITEM_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=*RETURN)
0560 _ENABLE_FLG=-1 ! GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0915 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUST_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=ITEM_CODE.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
20000 CANCEL_BUTTON:! Cancel the creation of a new record
20010 %ACTION$="CANCEL"
20080 CMD_STR$="END"
20095 RETURN 
20099 ! 
20100 OK_BUTTON:! Verify on file, then copy
20105 IF NUL(CUSTOMER$+ITEM_CODE$) THEN GOTO OLD_FM1_NOF
20110 DIM OLD_FM1$:CPL(%FM1_IOL$); IF %RFQ THEN FIND (Z[1],KEY=%SPEC$,DOM=OLD_FM1_NOF,REC=OLD_FM1$) ELSE FIND (Z[1],KEY=CUSTOMER$+ITEM_CODE$,DOM=OLD_FM1_NOF,REC=OLD_FM1$) ! SSP206206 jdf 
20120 DIM NEW_FM1$:CPL(%FM1_IOL$); NEW_FM1$=OLD_FM1$
20130 NEW_FM1.CUST_DIV$=MID(%NEW_CUSTOMER$,1,2),NEW_FM1.CUST_CODE$=MID(%NEW_CUSTOMER$,3,8),NEW_FM1.ITEM_CODE$=%NEW_ITEM_CODE$
20132 NEW_FM1.RO_DATE$="",NEW_FM1.ITEM_STAT_CODE$="0",NEW_FM1.ITEM_STAT_DATE$=X3$(15,6)
20133 NEW_FM1.FIND_FEE$=""; NEW_FM1.FIND_FEE.VEND_DIV$=""; NEW_FM1.FIND_FEE.VEND_CODE$=""; NEW_FM1.LAST_ORDER_DATE$=""; NEW_FM1.LAST_ORDER_DIV$=""; NEW_FM1.LAST_ORDER_NUM$=""; NEW_FM1.ENDING_NUM$=""; NEW_FM1.PREV_JOB_NUM$=""; NEW_FM1.PREV_JOB_NUM_DATE$=""; NEW_FM1.ITEM_REVISION$=""; NEW_FM1.FUNC_CODE$=""
20134 NEW_FM1.SRC_CUST_DIV$=""; NEW_FM1.SRC_CUST_CODE$=""; NEW_FM1.ACTIVE_STATUS$=""; NEW_FM1.FM1_UNUSED_2$=""; NEW_FM1.PREV_ITEM_CODE$=""; NEW_FM1.ITEM_CONT_CODE$=""; NEW_FM1.ART_DISK_FILE$=""; NEW_FM1.ART_STATUS_CODE$=""; NEW_FM1.ART_STAT_DATE$=""
20135 NEW_FM1.ITEM_STAT_MEMO$=""; NEW_FM1.AUTO_PRICE_EST_GROUP$=""; NEW_FM1.AUTO_PRICE_FEATURES$=""; NEW_FM1.REQ_ACCESS_CNTL_CODE$=""; NEW_FM1.NO_RON_TIL$=""; NEW_FM1.CASUAL_CNT_DATE$=""; NEW_FM1.ITEM_1ST_USED$=""; NEW_FM1.ITEM_LAST_WHSE_SHIP$=""; NEW_FM1.DFLT_COST_CODE$=""; NEW_FM1.CIC$=""; NEW_FM1.SPEC_CODE$=""; NEW_FM1.CONTRACT_EXPIRE$=""; NEW_FM1.FM1_UNSED_3$=""; NEW_FM1.TF_MEMO$=""
20140 NEW_FM1.EST_YRLY_USAGE=0,NEW_FM1.FIND_FEE_PRCNT=0,NEW_FM1.YTD_NUM_INV=0,NEW_FM1.YTD_QTY=0,NEW_FM1.YTD_NET_SALE=0,NEW_FM1.YTD_GP=0,NEW_FM1.LY_NUM_INV=0,NEW_FM1.LY_QTY=0,NEW_FM1.LY_NET_SALE=0,NEW_FM1.LY_GP=0,NEW_FM1.LAST_QTY_ORDERED=0,NEW_FM1.COMBO_QTY=0,NEW_FM1.AVG_MONTHLY_USAGE=0
20150 IF %RFQ THEN WRITE (Z[1],KEY=%SPEC$,REC=NEW_FM1$) ELSE WRITE (Z[1],KEY=NEW_FM1.CUST_DIV$+NEW_FM1.CUST_CODE$+NEW_FM1.ITEM_CODE$,REC=NEW_FM1$) ! SSP206206  jdf
20155 IF %RFQ THEN WRITE (Z[5],KEY=NEW_FM1.PROD_CODE$+NEW_FM1.LEFT_RIGHT$+NEW_FM1.TOP_BOTTOM$+NEW_FM1.PLYS$+%SPEC$) ELSE WRITE (Z[5],KEY=NEW_FM1.PROD_CODE$+NEW_FM1.LEFT_RIGHT$+NEW_FM1.TOP_BOTTOM$+NEW_FM1.PLYS$+NEW_FM1.ITEM_CODE$+NEW_FM1.CUST_DIV$+NEW_FM1.CUST_CODE$) ! SSP206206 jdf
20160 ! Copy othe records
20165 OLD_KEY$=OLD_FM1.CUST_DIV$+OLD_FM1.CUST_CODE$+OLD_FM1.ITEM_CODE$
20170 FOR TR=2 TO 4; GOSUB TRANSFER_RECORDS; NEXT TR
20175 TR=6; GOSUB TRANSFER_RECORDS
20180 %ACTION$="DONE"
20185 CMD_STR$="END"
20195 RETURN 
20199 ! 
20200 OLD_FM1_NOF:! Didn't find item to copy from
20210 IF NUL(CUSTOMER$) THEN ITEM_DISPLAY$=ITEM_CODE$ ELSE ITEM_DISPLAY$=FN%ZZDISP$(CUSTOMER$,"A/R")+"-"+ITEM_CODE$
20230 MSGBOX MSG("FMGOBA_2",ITEM_DISPLAY$),MSG("MB_ATTN"),"!"
20280 IF NUL(CUSTOMER$) THEN NEXT_ID=CUSTOMER.CTL ELSE NEXT_ID=ITEM_CODE.CTL
20295 RETURN 
20299 ! 
20400 TRANSFER_RECORDS:! Transfer records with key OLD_KEY$ in file Z(TR) to key %NEW_CUSTOMER$+%NEW_ITEM_CODE$
20405 EXTRACT (Z[TR],KEY=OLD_KEY$,DOM=*NEXT)
20410 TR_LOOP: K$=KEY(Z[TR],END=TR_DONE)
20415 IF MID(K$,1,LEN(OLD_KEY$))<>OLD_KEY$ THEN GOTO TR_DONE
20420 READ RECORD (Z[TR],END=TR_DONE)A8$
20425 A8$(1,20)=%NEW_CUSTOMER$+%NEW_ITEM_CODE$
20430 WRITE RECORD (Z[TR],KEY=A8$(1,LEN(K$)))A8$
20435 READ (Z[TR],KEY=K$,END=TR_DONE)
20440 GOTO TR_LOOP
20445 TR_DONE:
20490 RETURN 
20495 ! 
23200 ! ^100,5 Get & set item information
23205 ITEM_CODE_VAL:ENTER FIELD$,ERR_MSG$,VAR_TAG$,ERR=ITEM_CODE; GOTO ITEM_CODE
23210 ITEM_CODE_FMT:ENTER FIELD$,VAR_TAG$,ERR=ITEM_CODE; GOTO ITEM_CODE
23215 ITEM_CODE:
23218 FM1_CHAN=FN%FFN(%FM1$) ! [205471]-changed FFN() to FN%FFN()
23220 IF STP(FIELD$,3)="" THEN GOTO ITEM_CODE_DONE ELSE FIELD$=PAD(FIELD$,10)
23235 MISSING_MSG$=MSG("ITEM_CODE")+" "+MSG("NOT_FOUND")+".",BUSY_MSG$=MSG("ITEM_CODE")+" "+MSG("BUSY")+"."
23240 FIND (FM1_CHAN,KEY=%QRY_CUSTOMER$+FIELD$,ERR=ITEM_CODE_ERR,DOM=ITEM_CODE_MISSING)FM1$; %OBA_DESC$=MID(FM1$,42,40),REFRESH_FLG=1
23245 ! Done now
23250 ITEM_CODE_DONE:
23260 EXIT 
23265 ITEM_CODE_MISSING: ERR_MSG$=MISSING_MSG$; GOTO ITEM_CODE_DONE
23270 ITEM_CODE_ERR: ERR_MSG$=BUSY_MSG$+"["+STR(ERR)+"]"; GOTO ITEM_CODE_DONE
56000 REM + Modification History
56002 REM "205471-Oracle - FFN usage in tf2g progs. to be replaced by FN%FFN  
56004 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56006 REM "206206-RFQ. When setting up a new form and you use the copy feature
