0010 ! FMGIAS - Item Ply Specifications Setup
0035 REM "5.7 - 04/26/10 - 15.156388 - tma - SSP# 237934
0037 REM "237934-In FMGIAS cannot Tab or Enter through the Item Ply          
0040 REM "Copyright 2010 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0042 SETERR 0050; ENTER CUSTOMER$,ITEM_CODE$,LINE_NUM$
0045 PROCESS "FMGIAS","../FMG/FM.EN",CUSTOMER$,ITEM_CODE$
0047 EXIT 
0050 IF TCB(13)=1 THEN BEGIN 
0055 _CUSTOMER$=%CUSTOMER$,_ITEM_CODE$=%ITEM_CODE$
0056 IF %SPEC$<>"" THEN PROCESS "FMGIAS.QS","../FMG/FM.EN"; GOTO 0065
0060 PROCESS "FMGIAS","../FMG/FM.EN"
0065 %CUSTOMER$=_CUSTOMER$,%ITEM_CODE$=_ITEM_CODE$
0075 END 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0112 IF ARG_1$+ARG_2$<>"" THEN %CUSTOMER$=ARG_1$,%ITEM_CODE$=ARG_2$,%LINE_NUM$=ARG_3$
0113 _CUSTOMER$=%CUSTOMER$,_ITEM_CODE$=%ITEM_CODE$,_LINE_NUM$=%LINE_NUM$,%GRID=0 ! SSP#237934
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0155 DIM X[2]
0156 IF STP(%SPEC$)="" THEN FL$="FM1",FLL$="FMU" ELSE FL$="QS1",FLL$="QSU"
0160 _FILE_NAME$=FLL$+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0185 _FILE_NAME$=FL$+%C$,_FM1=HFN; OPEN (_FM1,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0187 _FILE_NAME$="IC0"+%C$,_IC0=HFN; OPEN (_IC0,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0188 _FILE_NAME$="FMP"+%C$,_FMP=HFN; OPEN (_FMP,ERR=OPEN_ERR)_FILE_NAME$
0189 _FILE_NAME$="AR1"+%C$,_AR1=HFN; OPEN (_AR1,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=3
0430 DIM _KEYS$[1:3]; _KEYS$[1]="CUSTOMER$",_KEYS$[2]="ITEM_CODE$",_KEYS$[3]="LINE_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0515 CALLED$="N",NEW$="N"
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 IF STP(_CUSTOMER$,3)<>"" AND STP(_ITEM_CODE$,3)<>"" THEN ARG_1$=_CUSTOMER$+_ITEM_CODE$,CUSTOMER$=_CUSTOMER$,ITEM_CODE$=_ITEM_CODE$,PLYS$="001",%CUSTOMER$=CUSTOMER$,%ITEM_CODE$=ITEM_CODE$
0536 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$; CUSTOMER$=CUST_DIV$+CUST_CODE$
0538 IF ARG_1$+ARG_2$+ARG_3$<>"" THEN _KEY$=_CUSTOMER$+_ITEM_CODE$+_LINE_NUM$,FLAG=1,CALLED$="Y"
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _ENABLE_FLG=_NUMKEYS,_CURKEY=_NUMKEYS-1,_KCNT=_NUMKEYS,CALLED$="Y"; GOSUB ENABLE_GROUPS; READ (_FIL_NO,KEY=_KEY$,DOM=*NEXT); GOSUB PROCESS_READ
0558 IF ARG_3$<>"" THEN CUSTOMER$=ARG_1$,ITEM_CODE$=ARG_2$,LINE_NUM$=ARG_3$,REFRESH_FLG=1
0560 GOSUB READ_ITEM_RECORD
0570 RETURN 
0700 ! 700 - Set up tabbing between folders
0710 INIT_FOLDER:
0720 GOSUB ENABLE_GROUPS
0730 IF _ENABLE_FLG<>_KEY1 THEN IF TAB_FLG$="<" THEN NEXT_ID=_LAST_TAB ELSE NEXT_ID=_FIRST_TAB
0735 IF FOLDER_ID$="FMGIAS.1" AND CALLED$="Y" THEN NEXT_ID=LINE_NUM.CTL
0740 EXIT 
0900 ! 900 - Wrapup
0910 WRAPUP:
0915 READ DATA FROM "" TO IOL=GLOBAL_IOL ! GOSUB CLEAR_CUSTOM
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 IF _FM1<>0 THEN CLOSE (_FM1); _FM1=0
0947 IF _IC0<>0 THEN CLOSE (_IC0); _IC0=0
0948 IF _FMP<>0 THEN CLOSE (_FMP); _FMP=0
0949 IF _AR1<>0 THEN CLOSE (_AR1); _AR1=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC: REFRESH_FLG=1
1012 IF ID$="CUSTOMER" AND STP(CUSTOMER$)="" THEN CUSTOMER$="          " ELSE GOSUB PROCESS_AR1
1015 IF ID$="ITEM_CODE" THEN GOSUB ITEM
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1025 IF ID$="ITEM_CODE" THEN GOSUB READ_ITEM_RECORD
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1042 IF STP(CUSTOMER$)="" THEN GOTO 1050
1045 CALL "ZZWLKU;parse_cust",CUSTOMER$,CUST_DIV$,CUST_CODE$
1050 IF %SPEC$<>"" THEN CALL "ZZWLKU;PARSE_QUOTE",%SPEC$(1,8),RFQ_DIV$,RFQ_NUM$; _KEY$=%SPEC$+CUSTOMER$+ITEM_CODE$+LINE_NUM$; GOTO 1070 ! SSP 194966 ! SSP206206 jdf
1055 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=COLOR.CTL
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1215 IF LINE_NUM$="000" THEN IF _EOM$=$00$ THEN RETURN ELSE MSGBOX MSG("FMGIAS_01"),MSG("MB_ATTN"),"!"; NEXT_ID=LINE_NUM.CTL; RETURN 
1220 IF NUM(LINE_NUM$)>NUM_PLYS THEN MSGBOX MSG("FMGIAS_02",STR(NUM_PLYS)),MSG("MB_ATTN"),"!"; LINE_NUMBER$="000",CHANGE_FLG=0; GOSUB CLEAR_REC; GOTO *RETURN
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1265 IF _FIRST_FIELD=0 THEN _FIRST_FIELD=COLOR.CTL
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1280 NEXT_FOLDER=_FIRST_FOLDER
1282 COPY_CHANGE_CODE_TMP$="5"
1283 ! GOSUB READ_ITEM_RECORD
1285 X[0]=NUM(LINE_NUM$); IF LINE_NUM$="001" THEN NEW$="Y" ELSE NEW$="N"
1286 GOSUB SETUP_DATA_FOR_LINE
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF CALLED$<>"Y" THEN IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 IF CALLED$<>"Y" THEN NEXT_ID=_FIRST_KEY ELSE NEXT_ID=LINE_NUM.CTL
1485 IF FLAG THEN GOSUB MAIN_POST_DISPLAY ! CMD_STR$="E"
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1665 IF CALLED$="Y" THEN CHANGE_FLG=0; GOSUB CLEAR_REC; GOTO 1710
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1705 ! IF FLAG THEN CMD_STR$="E"
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF CALLED$="Y" OR SPECIAL$="Y" THEN _ENABLE_FLG=_NUMKEYS,_CURKEY=_NUMKEYS-1,_KCNT=_NUMKEYS; GOSUB ENABLE_GROUPS ELSE IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1855 IF CALLED$="Y" OR SPECIAL$="Y" THEN NEXT_ID=LINE_NUM.CTL ELSE NEXT_ID=CUSTOMER.CTL
1858 ! IF FLAG THEN CMD_STR$="E"
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 IF CALLED$="Y" THEN IF _KEY$(1,20)<>%CUSTOMER$+%ITEM_CODE$ THEN GOTO END_OF_FILE ! Only scroll thru records pertaining to this item if coming from menu or other program
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE)
2231 IF CALLED$="Y" THEN IF _KEY$(1,20)<>%CUSTOMER$+%ITEM_CODE$ THEN GOTO START_OF_FILE ! Only scroll thru records pertaining to this item if coming from menu of other program
2232 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 IF CALLED$="Y" THEN READ (_FIL_NO,KEY=%CUSTOMER$+%ITEM_CODE$,ERR=*NEXT) ! If coming from menu or other program, position file to first record for this item
2431 IF CALLED$="Y" THEN _KEY$=KEY(_FIL_NO,ERR=NO_FIRST) ELSE _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2440 IF CALLED$="Y" THEN IF _KEY$(1,20)<>%CUSTOMER$+%ITEM_CODE$ THEN GOTO NO_FIRST
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 IF CALLED$="Y" THEN READ (_FIL_NO,KEY=%CUSTOMER$+%ITEM_CODE$+$FE$,ERR=*NEXT) ! If coming from menu or other program, position file to last record for this item
2640 IF CALLED$="Y" THEN _KEY$=KEP(_FIL_NO,ERR=NO_LAST) ELSE _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2645 IF CALLED$="Y" THEN IF _KEY$(1,20)<>%CUSTOMER$+%ITEM_CODE$ THEN GOTO NO_LAST
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ (_FIL_NO,KEY=_KEY$)
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3061 CUSTOMER$=CUST_DIV$+CUST_CODE$,NEW$="N"
3065 GOSUB SET_CHECK_BOX_VALUES; GOSUB SET_COPY_CHANGE_CODE
3067 GOSUB READ_ITEM_RECORD; GOSUB CARBON_SPECS_GROUP
3070 GOSUB PROCESS_AR1
3080 IF %SPEC$<>"" THEN LINE_NUM$=RFQ_LINE_NUM$ ! SSP 194966
3100 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:IF %SPEC$<>"" THEN RFQ_LINE_NUM$=%SPEC$(9,3) ! SSP 194966 ! SSP206206 jdf
3322 WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR) ! SSP 194966
3323 IF %SPEC$<>"" THEN GOTO 3330
3325 IF NEW$="Y" AND X[0]>=1 AND X[0]<NUM_PLYS AND POS(%C$="125",3)=0 THEN X[0]=X[0]+1; GOSUB AUTO_PLY_DUP; GOTO WRT ELSE NEW$="N",X[0]=0
3330 IF CALLED$="Y" THEN CHANGE_FLG=0; GOSUB CLEAR_REC; GOTO *RETURN
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUSTOMER.CTL,_FIRST_FIELD=COLOR.CTL,_FIRST_FOLDER=FLDR.FMGIAS.1.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13001 GLOBAL_IOL:IOLIST %CUSTOMER$,%ITEM_CODE$,%VENDOR$
13010 CLEAR_FIELDS:
13015 IF CALLED$="Y" OR SPECIAL$="Y" THEN GOTO 13050
13020 IF _CLR_FLG$="R" THEN CUST_DIV$=""
13030 IF _CLR_FLG$="R" THEN CUST_CODE$="",CUSTOMER$=""; READ DATA FROM "" TO IOL=GLOBAL_IOL
13040 IF _CLR_FLG$="R" THEN ITEM_CODE$=""
13050 IF _CLR_FLG$="R" THEN LINE_NUM$=""
13060 COLOR$=""
13070 WT$=""
13080 PAPER_GRADE$="",ITEM.ITEM_DESC$="",ITEM.CUST_NAME$="",AR1.CUST_NAME$=""
13090 LEFT_RIGHT$=""
13100 TOP_BOTTOM$=""
13110 INK_COLOR_1$=""
13120 INK_COLOR_2$=""
13130 INK_COLOR_3$=""
13140 BACKER$=""
13150 PERFS_CONT_SNAPOUT$=""
13160 EXTRA_PERFS$=""
13170 COPY_CHANGE_CODE$=""
13180 COPY_CHANGE_FRONT$=""
13190 COPY_CHANGE_BACK$=""
13200 CARBON_WIDTH$=""
13210 CARBON_COLOR$=""
13220 MARGINAL_WORDS_POS$=""
13230 MARGINAL_WORDS$=""
13240 CARBON_TYPE$=""
13250 PLATE_NUM_INK_1$=""
13260 PLATE_NUM_INK_2$=""
13270 PLATE_NUM_INK_3$=""
13280 PLATE_NUM_INK_BACKER$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=1 THEN CALL "*wingrp;Enable",KEY1.GRP$; NEXT_ID=CUSTOMER.CTL ELSE IF _ENABLE_FLG<1 OR _ENABLE_FLG>3 THEN CALL "*wingrp;Disable",KEY1.GRP$
14040 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=ITEM_CODE.CTL ELSE IF _ENABLE_FLG<2 OR _ENABLE_FLG>3 THEN CALL "*wingrp;Disable",KEY2.GRP$; DISABLE CONTROL BTN_ADD.CTL
14050 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=LINE_NUM.CTL; ENABLE CONTROL BTN_ADD.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14985 IF POS(%C$="101302",3)<>0 THEN CALL "*wingrp;Show",PLATE.GRP$
14988 IF SPECIAL$="Y" THEN DISABLE CONTROL CUSTOMER.CTL,ITEM_CODE.CTL; CALL "*wingrp;hide",BT_CALL.GRP$ ! SSP 213575
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(27,"N")
15030 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15040 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15050 IF _ORIG.ITEM_CODE$=_CUR.ITEM_CODE$ OR ITEM_CODE$=_CUR.ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CODE$=ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$
15060 IF _ORIG.LINE_NUM$=_CUR.LINE_NUM$ OR LINE_NUM$=_CUR.LINE_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.LINE_NUM$=LINE_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("LINE_NUM")+" = "+_CUR.LINE_NUM$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_NUM")+" = "+_CUR.LINE_NUM$
15070 IF _ORIG.COLOR$=_CUR.COLOR$ OR COLOR$=_CUR.COLOR$ THEN GOTO *NEXT ELSE IF _ORIG.COLOR$=COLOR$ THEN _CHG2$=_CHG2$+SEP+MSG("COLOR")+" = "+_CUR.COLOR$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COLOR")+" = "+_CUR.COLOR$
15080 IF _ORIG.WT$=_CUR.WT$ OR WT$=_CUR.WT$ THEN GOTO *NEXT ELSE IF _ORIG.WT$=WT$ THEN _CHG2$=_CHG2$+SEP+MSG("WT")+" = "+_CUR.WT$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WT")+" = "+_CUR.WT$
15090 IF _ORIG.PAPER_GRADE$=_CUR.PAPER_GRADE$ OR PAPER_GRADE$=_CUR.PAPER_GRADE$ THEN GOTO *NEXT ELSE IF _ORIG.PAPER_GRADE$=PAPER_GRADE$ THEN _CHG2$=_CHG2$+SEP+MSG("PAPE_G")+" = "+_CUR.PAPER_GRADE$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PAPE_G")+" = "+_CUR.PAPER_GRADE$
15100 IF _ORIG.LEFT_RIGHT$=_CUR.LEFT_RIGHT$ OR LEFT_RIGHT$=_CUR.LEFT_RIGHT$ THEN GOTO *NEXT ELSE IF _ORIG.LEFT_RIGHT$=LEFT_RIGHT$ THEN _CHG2$=_CHG2$+SEP+MSG("LEFT_RIGHT")+" = "+_CUR.LEFT_RIGHT$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LEFT_RIGHT")+" = "+_CUR.LEFT_RIGHT$
15110 IF _ORIG.TOP_BOTTOM$=_CUR.TOP_BOTTOM$ OR TOP_BOTTOM$=_CUR.TOP_BOTTOM$ THEN GOTO *NEXT ELSE IF _ORIG.TOP_BOTTOM$=TOP_BOTTOM$ THEN _CHG2$=_CHG2$+SEP+MSG("TOP_BOTTOM")+" = "+_CUR.TOP_BOTTOM$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TOP_BOTTOM")+" = "+_CUR.TOP_BOTTOM$
15120 IF _ORIG.INK_COLOR_1$=_CUR.INK_COLOR_1$ OR INK_COLOR_1$=_CUR.INK_COLOR_1$ THEN GOTO *NEXT ELSE IF _ORIG.INK_COLOR_1$=INK_COLOR_1$ THEN _CHG2$=_CHG2$+SEP+MSG("INK_C_1")+" = "+_CUR.INK_COLOR_1$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INK_C_1")+" = "+_CUR.INK_COLOR_1$
15130 IF _ORIG.INK_COLOR_2$=_CUR.INK_COLOR_2$ OR INK_COLOR_2$=_CUR.INK_COLOR_2$ THEN GOTO *NEXT ELSE IF _ORIG.INK_COLOR_2$=INK_COLOR_2$ THEN _CHG2$=_CHG2$+SEP+MSG("INK_C_2")+" = "+_CUR.INK_COLOR_2$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INK_C_2")+" = "+_CUR.INK_COLOR_2$
15140 IF _ORIG.INK_COLOR_3$=_CUR.INK_COLOR_3$ OR INK_COLOR_3$=_CUR.INK_COLOR_3$ THEN GOTO *NEXT ELSE IF _ORIG.INK_COLOR_3$=INK_COLOR_3$ THEN _CHG2$=_CHG2$+SEP+MSG("INK_C_3")+" = "+_CUR.INK_COLOR_3$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INK_C_3")+" = "+_CUR.INK_COLOR_3$
15150 IF _ORIG.BACKER$=_CUR.BACKER$ OR BACKER$=_CUR.BACKER$ THEN GOTO *NEXT ELSE IF _ORIG.BACKER$=BACKER$ THEN _CHG2$=_CHG2$+SEP+MSG("BACKER")+" = "+_CUR.BACKER$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BACKER")+" = "+_CUR.BACKER$
15160 IF _ORIG.PERFS_CONT_SNAPOUT$=_CUR.PERFS_CONT_SNAPOUT$ OR PERFS_CONT_SNAPOUT$=_CUR.PERFS_CONT_SNAPOUT$ THEN GOTO *NEXT ELSE IF _ORIG.PERFS_CONT_SNAPOUT$=PERFS_CONT_SNAPOUT$ THEN _CHG2$=_CHG2$+SEP+MSG("PERF_C_S")+" = "+_CUR.PERFS_CONT_SNAPOUT$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PERF_C_S")+" = "+_CUR.PERFS_CONT_SNAPOUT$
15170 IF _ORIG.EXTRA_PERFS$=_CUR.EXTRA_PERFS$ OR EXTRA_PERFS$=_CUR.EXTRA_PERFS$ THEN GOTO *NEXT ELSE IF _ORIG.EXTRA_PERFS$=EXTRA_PERFS$ THEN _CHG2$=_CHG2$+SEP+MSG("EXTR_P")+" = "+_CUR.EXTRA_PERFS$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EXTR_P")+" = "+_CUR.EXTRA_PERFS$
15180 IF _ORIG.COPY_CHANGE_CODE$=_CUR.COPY_CHANGE_CODE$ OR COPY_CHANGE_CODE$=_CUR.COPY_CHANGE_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.COPY_CHANGE_CODE$=COPY_CHANGE_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("COPY_C_C")+" = "+_CUR.COPY_CHANGE_CODE$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COPY_C_C")+" = "+_CUR.COPY_CHANGE_CODE$
15190 IF _ORIG.COPY_CHANGE_FRONT$=_CUR.COPY_CHANGE_FRONT$ OR COPY_CHANGE_FRONT$=_CUR.COPY_CHANGE_FRONT$ THEN GOTO *NEXT ELSE IF _ORIG.COPY_CHANGE_FRONT$=COPY_CHANGE_FRONT$ THEN _CHG2$=_CHG2$+SEP+MSG("COPY_C_F")+" = "+_CUR.COPY_CHANGE_FRONT$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COPY_C_F")+" = "+_CUR.COPY_CHANGE_FRONT$
15200 IF _ORIG.COPY_CHANGE_BACK$=_CUR.COPY_CHANGE_BACK$ OR COPY_CHANGE_BACK$=_CUR.COPY_CHANGE_BACK$ THEN GOTO *NEXT ELSE IF _ORIG.COPY_CHANGE_BACK$=COPY_CHANGE_BACK$ THEN _CHG2$=_CHG2$+SEP+MSG("COPY_C_B")+" = "+_CUR.COPY_CHANGE_BACK$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COPY_C_B")+" = "+_CUR.COPY_CHANGE_BACK$
15210 IF _ORIG.CARBON_WIDTH$=_CUR.CARBON_WIDTH$ OR CARBON_WIDTH$=_CUR.CARBON_WIDTH$ THEN GOTO *NEXT ELSE IF _ORIG.CARBON_WIDTH$=CARBON_WIDTH$ THEN _CHG2$=_CHG2$+SEP+MSG("CARB_W")+" = "+_CUR.CARBON_WIDTH$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CARB_W")+" = "+_CUR.CARBON_WIDTH$
15220 IF _ORIG.CARBON_COLOR$=_CUR.CARBON_COLOR$ OR CARBON_COLOR$=_CUR.CARBON_COLOR$ THEN GOTO *NEXT ELSE IF _ORIG.CARBON_COLOR$=CARBON_COLOR$ THEN _CHG2$=_CHG2$+SEP+MSG("CARB_C")+" = "+_CUR.CARBON_COLOR$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CARB_C")+" = "+_CUR.CARBON_COLOR$
15230 IF _ORIG.MARGINAL_WORDS_POS$=_CUR.MARGINAL_WORDS_POS$ OR MARGINAL_WORDS_POS$=_CUR.MARGINAL_WORDS_POS$ THEN GOTO *NEXT ELSE IF _ORIG.MARGINAL_WORDS_POS$=MARGINAL_WORDS_POS$ THEN _CHG2$=_CHG2$+SEP+MSG("MARG_W_P")+" = "+_CUR.MARGINAL_WORDS_POS$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MARG_W_P")+" = "+_CUR.MARGINAL_WORDS_POS$
15240 IF _ORIG.MARGINAL_WORDS$=_CUR.MARGINAL_WORDS$ OR MARGINAL_WORDS$=_CUR.MARGINAL_WORDS$ THEN GOTO *NEXT ELSE IF _ORIG.MARGINAL_WORDS$=MARGINAL_WORDS$ THEN _CHG2$=_CHG2$+SEP+MSG("MARG_W")+" = "+_CUR.MARGINAL_WORDS$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MARG_W")+" = "+_CUR.MARGINAL_WORDS$
15250 IF _ORIG.CARBON_TYPE$=_CUR.CARBON_TYPE$ OR CARBON_TYPE$=_CUR.CARBON_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.CARBON_TYPE$=CARBON_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("CARB_T")+" = "+_CUR.CARBON_TYPE$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CARB_T")+" = "+_CUR.CARBON_TYPE$
15260 IF _ORIG.PLATE_NUM_INK_1$=_CUR.PLATE_NUM_INK_1$ OR PLATE_NUM_INK_1$=_CUR.PLATE_NUM_INK_1$ THEN GOTO *NEXT ELSE IF _ORIG.PLATE_NUM_INK_1$=PLATE_NUM_INK_1$ THEN _CHG2$=_CHG2$+SEP+MSG("PLAT_N_I_1")+" = "+_CUR.PLATE_NUM_INK_1$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLAT_N_I_1")+" = "+_CUR.PLATE_NUM_INK_1$
15270 IF _ORIG.PLATE_NUM_INK_2$=_CUR.PLATE_NUM_INK_2$ OR PLATE_NUM_INK_2$=_CUR.PLATE_NUM_INK_2$ THEN GOTO *NEXT ELSE IF _ORIG.PLATE_NUM_INK_2$=PLATE_NUM_INK_2$ THEN _CHG2$=_CHG2$+SEP+MSG("PLAT_N_I_2")+" = "+_CUR.PLATE_NUM_INK_2$,_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLAT_N_I_2")+" = "+_CUR.PLATE_NUM_INK_2$
15280 IF _ORIG.PLATE_NUM_INK_3$=_CUR.PLATE_NUM_INK_3$ OR PLATE_NUM_INK_3$=_CUR.PLATE_NUM_INK_3$ THEN GOTO *NEXT ELSE IF _ORIG.PLATE_NUM_INK_3$=PLATE_NUM_INK_3$ THEN _CHG2$=_CHG2$+SEP+MSG("PLAT_N_I_3")+" = "+_CUR.PLATE_NUM_INK_3$,_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLAT_N_I_3")+" = "+_CUR.PLATE_NUM_INK_3$
15290 IF _ORIG.PLATE_NUM_INK_BACKER$=_CUR.PLATE_NUM_INK_BACKER$ OR PLATE_NUM_INK_BACKER$=_CUR.PLATE_NUM_INK_BACKER$ THEN GOTO *NEXT ELSE IF _ORIG.PLATE_NUM_INK_BACKER$=PLATE_NUM_INK_BACKER$ THEN _CHG2$=_CHG2$+SEP+MSG("PLAT_N_I_B")+" = "+_CUR.PLATE_NUM_INK_BACKER$,_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLAT_N_I_B")+" = "+_CUR.PLATE_NUM_INK_BACKER$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16030 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN ITEM_CODE$=_CUR.ITEM_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN LINE_NUM$=_CUR.LINE_NUM$
16060 IF _CHG_VAR$(5,1)="Y" THEN COLOR$=_CUR.COLOR$
16070 IF _CHG_VAR$(6,1)="Y" THEN WT$=_CUR.WT$
16080 IF _CHG_VAR$(7,1)="Y" THEN PAPER_GRADE$=_CUR.PAPER_GRADE$
16090 IF _CHG_VAR$(8,1)="Y" THEN LEFT_RIGHT$=_CUR.LEFT_RIGHT$
16100 IF _CHG_VAR$(9,1)="Y" THEN TOP_BOTTOM$=_CUR.TOP_BOTTOM$
16110 IF _CHG_VAR$(10,1)="Y" THEN INK_COLOR_1$=_CUR.INK_COLOR_1$
16120 IF _CHG_VAR$(11,1)="Y" THEN INK_COLOR_2$=_CUR.INK_COLOR_2$
16130 IF _CHG_VAR$(12,1)="Y" THEN INK_COLOR_3$=_CUR.INK_COLOR_3$
16140 IF _CHG_VAR$(13,1)="Y" THEN BACKER$=_CUR.BACKER$
16150 IF _CHG_VAR$(14,1)="Y" THEN PERFS_CONT_SNAPOUT$=_CUR.PERFS_CONT_SNAPOUT$
16160 IF _CHG_VAR$(15,1)="Y" THEN EXTRA_PERFS$=_CUR.EXTRA_PERFS$
16170 IF _CHG_VAR$(16,1)="Y" THEN COPY_CHANGE_CODE$=_CUR.COPY_CHANGE_CODE$
16180 IF _CHG_VAR$(17,1)="Y" THEN COPY_CHANGE_FRONT$=_CUR.COPY_CHANGE_FRONT$
16190 IF _CHG_VAR$(18,1)="Y" THEN COPY_CHANGE_BACK$=_CUR.COPY_CHANGE_BACK$
16200 IF _CHG_VAR$(19,1)="Y" THEN CARBON_WIDTH$=_CUR.CARBON_WIDTH$
16210 IF _CHG_VAR$(20,1)="Y" THEN CARBON_COLOR$=_CUR.CARBON_COLOR$
16220 IF _CHG_VAR$(21,1)="Y" THEN MARGINAL_WORDS_POS$=_CUR.MARGINAL_WORDS_POS$
16230 IF _CHG_VAR$(22,1)="Y" THEN MARGINAL_WORDS$=_CUR.MARGINAL_WORDS$
16240 IF _CHG_VAR$(23,1)="Y" THEN CARBON_TYPE$=_CUR.CARBON_TYPE$
16250 IF _CHG_VAR$(24,1)="Y" THEN PLATE_NUM_INK_1$=_CUR.PLATE_NUM_INK_1$
16260 IF _CHG_VAR$(25,1)="Y" THEN PLATE_NUM_INK_2$=_CUR.PLATE_NUM_INK_2$
16270 IF _CHG_VAR$(26,1)="Y" THEN PLATE_NUM_INK_3$=_CUR.PLATE_NUM_INK_3$
16280 IF _CHG_VAR$(27,1)="Y" THEN PLATE_NUM_INK_BACKER$=_CUR.PLATE_NUM_INK_BACKER$
16990 RETURN 
20000 LINE_NUM_FMT:ENTER FIELD$,VAR_TAG$,ERR=*NEXT
20005 LINE_NUM_VAL:ENTER FIELD$,ERR_MSG$,VAR_TAG$,ERR=*NEXT
20010 FIELD$=STR(NUM(FIELD$,ERR=*NEXT):"000"); GOTO LINE_NUM_FMT_END
20015 ERR_MSG$="Line number field must be numeric."
20040 LINE_NUM_FMT_END:IF FIELD$="000" THEN FIELD$="001" END_IF ; EXIT ! 213575 
20045 ! 
21400 SET_CHECK_BOX_VALUES:
21410 IF EXTRA_PERFS$=" " THEN EXTRA_PERFS$="N"
21440 SET_CHECK_BOX_VALUES_END:RETURN 
21445 ! 
21450 READ_ITEM_RECORD:
21460 ITEM:IF STP(%SPEC$)="" THEN KK$=CUST_DIV$+CUST_CODE$+ITEM_CODE$ ELSE KK$=%SPEC$
21461 READ (_FM1,KEY=KK$,REC=ITEM$,DOM=*NEXT); GOTO 21470
21462 CUST:CALL "ZZWLKU;parse_cust",CUSTOMER$,CUST_DIV$,CUST_CODE$
21465 READ (_IC0,KEY=CUST_DIV$+CUST_CODE$+ITEM_CODE$,REC=ITEM$,DOM=*NEXT)
21470 NUM_PLYS=NUM(ITEM.PLYS$)
21475 %VENDOR$=ITEM.VEND_DIV$+ITEM.VEND_CODE$
21480 ITEM_DESC$=ITEM.ITEM_DESC$
21490 READ_ITEM_RECORD_END:RETURN 
21495 ! 
21500 CARBON_SPECS_GROUP:
21510 IF NUM_PLYS<2 OR (POS(MID(PAPER_GRADE$,1,3)="CB CFBCF ",3)>0 AND POS(%C$="101302322")=0) THEN CALL "*wingrp;Disable",CARBON_SPECS.GRP$
21540 CARBON_SPECS_GROUP_END:RETURN 
21545 ! 
21550 COPY_CHANGE_CODE_SELECTION:
21560 ON POS(COPY_CHANGE_CODE_TMP$="12345") GOTO 21569,21565,21566,21567,21568,21569
21565 COPY_CHANGE_CODE$="CA"; GOTO COPY_CHANGE_CODE_SELECTION_END
21566 COPY_CHANGE_CODE$="CC"; GOTO COPY_CHANGE_CODE_SELECTION_END
21567 COPY_CHANGE_CODE$="CD"; GOTO COPY_CHANGE_CODE_SELECTION_END
21568 COPY_CHANGE_CODE$="AS"; GOTO COPY_CHANGE_CODE_SELECTION_END
21569 COPY_CHANGE_CODE$="  "
21590 COPY_CHANGE_CODE_SELECTION_END:RETURN 
21595 ! 
21600 ! ^21600,10 - Add Line
21610 ADD_LINE:
21620 DIM PKEY$(23)
21630 READ (_FIL_NO,KEY=CUST_DIV$+CUST_CODE$+ITEM_CODE$+"zzz",DOM=*NEXT)
21640 PKEY$=KEP(_FIL_NO,ERR=*NEXT)
21650 LINE_NUM$="001"
21660 IF PKEY$(1,20)=CUST_DIV$+CUST_CODE$+ITEM_CODE$ THEN LINE_NUM$=STR(NUM(MID(PKEY$,21,3),ERR=*NEXT)+1:"000")
21665 IF NUM(LINE_NUM$)>NUM_PLYS THEN MSGBOX "You may not add this ply number."+SEP+"It is higher than the number of plys for this item.","Attention","!"; LINE_NUMBER$="000",CHANGE_FLG=0; GOSUB CLEAR_REC; GOTO *RETURN
21680 REFRESH_FLG=1
21690 _EOM$=$0D$,_KCNT=3,_FIRST_FIELD=COLOR.CTL,_KEY$=CUST_DIV$+CUST_CODE$+ITEM_CODE$+LINE_NUM$
21700 GOSUB NEW_RECORD
21710 _ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
21720 RETURN 
21730 ! 
21800 SET_COPY_CHANGE_CODE:
21805 ON INT(POS(COPY_CHANGE_CODE$="CACCCDAS  ")/2+1) GOTO 21830,21810,21815,21820,21825,21830
21810 COPY_CHANGE_CODE_TMP$="1"; GOTO SET_COPY_CHANGE_CODE_END
21815 COPY_CHANGE_CODE_TMP$="2"; GOTO SET_COPY_CHANGE_CODE_END
21820 COPY_CHANGE_CODE_TMP$="3"; GOTO SET_COPY_CHANGE_CODE_END
21825 COPY_CHANGE_CODE_TMP$="4"; GOTO SET_COPY_CHANGE_CODE_END
21830 COPY_CHANGE_CODE_TMP$="5"
21835 SET_COPY_CHANGE_CODE_END:RETURN 
21840 ! 
21900 SETUP_DATA_FOR_LINE:
21910 DIM E$(36),E1$(32)
21915 FIND (_FMP,KEY="V"+ITEM.VEND_DIV$+ITEM.VEND_CODE$,DOM=*NEXT)E$
21920 FIND (_FMP,KEY="T"+ITEM.PROD_CODE$,DOM=*NEXT)E1$
21925 IF X[0]>0 THEN IF X[0]<7 THEN COLOR$=E$(9+X[0]*3,3)
21930 LEFT_RIGHT$=ITEM.LEFT_RIGHT$,TOP_BOTTOM$=ITEM.TOP_BOTTOM$
21935 IF E1$(20,1)="C" THEN PERFS_CONT_SNAPOUT$="1/2L 1/2R" ELSE IF E1$(20,1)="S" THEN PERFS_CONT_SNAPOUT$="T "+E$(30,5)
21940 SETUP_DATA_FOR_LINE_END:RETURN 
21945 ! 
22000 AUTO_PLY_DUP:
22005 IF %SPEC$<>"" THEN READ (_FIL_NO,KEY=%QUOTE_DIV$+%QUOTE_NUM$+"001"+CUST_DIV$+CUST_CODE$+ITEM_CODE$+"001") ELSE READ (_FIL_NO,KEY=CUST_DIV$+CUST_CODE$+ITEM_CODE$+"001")
22006 LINE_NUM$=STR(X[0]:"000"),_KEY$=CUST_DIV$+CUST_CODE$+ITEM_CODE$+LINE_NUM$; IF %SPEC$<>"" THEN _KEY$=%QUOTE_DIV$+%QUOTE_NUM$+"001"+CUST_DIV$+CUST_CODE$+ITEM_CODE$+"001"
22010 REM "Marginal Words - Do not dupe"
22015 MARGINAL_WORDS$=""
22020 REM "Paper Color - If ply 1 matches 1st vendor std color, use vendor standards, else use dupe ply 1's color
22025 IF COLOR$=E$(12,3) AND X[0]>0 AND X[0]<7 AND E$(9+X[0]*3,3)<>"   " THEN COLOR$=E$(9+X[0]*3,3)
22030 REM "Check Stock
22035 IF EXTRA_PERFS$="Y" AND (WT$="26 " OR PAPER_GRADE$(1,4)="MICR") THEN MARGINAL_WORDS$="Non-Negotiable",EXTRA_PERFS$="N"
22040 REM "Paper Weight - If grade is CB or MICR  and weight is 15#, then last ply is 15# and interior plys are 14#
22045 IF POS(%C$="338",3)<>0 THEN IF PAPER_GRADE$(1,3)="CB " OR PAPER_GRADE$(1,4)="MICR" THEN IF X[0]<NUM_PLYS THEN WT$="53 "; GOTO 22053 ELSE WT$="57 "; GOTO 22053
22050 IF PAPER_GRADE$(1,3)="CB " OR PAPER_GRADE$(1,4)="MICR" THEN IF X[0]<NUM_PLYS THEN WT$="14 " ELSE WT$="15 "
22055 REM "Paper Grade - If CB then last ply is CF and interior plys CFB
22060 IF PAPER_GRADE$(1,3)="CB " THEN IF X[0]<NUM_PLYS THEN PAPER_GRADE$="CFB   " ELSE PAPER_GRADE$="CF    "
22065 REM "No Carbon width & color on last ply"
22070 IF X[0]=NUM_PLYS THEN CARBON_WIDTH$="",CARBON_COLOR$="",CARBON_TYPE$=""
22090 AUTO_PLY_DUP_END:RETURN 
22095 ! 
22100 NUM_PLYS_CHECK:
22110 IF STP(CUST_DIV$+CUST_CODE$+ITEM_CODE$,3)="" OR STP(ITEM_CODE$,3)="" THEN CMD_STR$="END"; GOTO NUM_PLYS_CHECK_END
22115 TOTAL_PLYS=0; IF %SPEC$<>"" THEN A1$=%SPEC$ ELSE A1$=CUST_DIV$+CUST_CODE$+ITEM_CODE$
22120 READ (_FIL_NO,KEY=A1$,DOM=*NEXT)
22125 K$=KEY(_FIL_NO,END=PLY_CHECK); READ (_FIL_NO,REC=TEST$)
22130 IF K$(1,LEN(A1$))<>A1$ THEN GOTO PLY_CHECK
22135 TOTAL_PLYS++
22140 GOTO 22125
22175 PLY_CHECK:
22180 IF TOTAL_PLYS<>NUM_PLYS THEN MSGBOX STR(TOTAL_PLYS)+" of "+STR(NUM_PLYS)+" plys entered, the correct number of plys "+SEP+"must be entered before exiting.","Attention","!"; CHANGE_FLG=0,SPECIAL$="Y"; GOSUB CLEAR_REC; SPECIAL$="N"; GOTO NUM_PLYS_CHECK_END
22185 CMD_STR$="END"
22190 NUM_PLYS_CHECK_END:RETURN 
22195 ! 
22200 PAPER_GRADE_ENTRY:
22205 PAPER_GRADE$=PAD(PAPER_GRADE$,6)
22210 IF NUM_PLYS<2 OR (POS(PAPER_GRADE$(1,3)="CB CFBCF ",3)>0 AND POS(%C$="101302322")=0) THEN GOTO PAPER_GRADE_ENTRY_END
22220 IF NEW$="Y" AND STP(CARBON_WIDTH$,3)="" AND PAPER_GRADE$(1,2)<>"CB" AND NUM_PLYS>1 THEN CARBON_WIDTH$="STANDARD"
22240 PAPER_GRADE_ENTRY_END:RETURN 
22245 ! 
23000 PROCESS_AR1: AR1.CUST_NAME$=""
23005 CALL "ZZWLKU;parse_cust",CUSTOMER$,CUST_DIV$,CUST_CODE$; CUSTOMER$=CUST_DIV$+CUST_CODE$
23010 READ (_AR1,KEY=CUSTOMER$,REC=AR1$,DOM=*NEXT)
23020 REFRESH_FLG=1
23030 RETURN 
56000 ! "194966-RFQ Specs were overwriting and duplicating plys.            
56002 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56005 ! "213575-Comments and Ply section of GUI specs need work
56006 REM "206206-RFQ. When setting up a new form and you use the copy feature
56007 REM "237934-In FMGIAS cannot Tab or Enter through the Item Ply          
