0010 ! FMGNC1 - Item Set Copy
0035 REM "5.7 - 04/19/21 - 14.297747 - dmm - SSP# 307341
0037 REM "307341-DBD-164-DBSPT-114826;Item Setup Copy missing fields         
0040 REM "Copyright 2021 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0060 PROCESS "FMGNC1","../FMG/FM.EN"
0070 EXIT 
0100 ! 
0110 ! 100 - Initialization
0120 INIT:
0130 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0140 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0150 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=0,_FIRST_KEY=0,_FIRST_FIELD=0
0155 X0$="FMGNC1"; X1$="Item Set Copy"; CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; IF X1>0 THEN RETURN 
0160 ! 
0170 ! Define File String used by ZZFLES to manage open / close activity and channel allocation.
0180 DIM Z[NUM(X3$(60,3))]
0190 Z$="01O AR1...  02O FM1...  03O FMP...  04O FMS...  05O FMU...  06O FMV...  07O FM2...  08O FSF...  09O IC0...  10OSFM1...  11OSFMU...  12OSFMV...  13O ZZS...  14O ECR...  " ! SSP 305780
0200 GOSUB OPEN_FILES
0205 ! 
0206 ! Use an easier to read reference to the file channel numbers
0207 _AR1=Z[1],_FM1=Z[2],_FMP=Z[3],_FMS=Z[4],_FMU=Z[5],_FMV=Z[6],_FM2=Z[7],_FSF=Z[8],_IC0=Z[9],_FM1S=Z[10],_FMUS=Z[11],_FMVS=Z[12],_ZZS=Z[13],_ECR=Z[14] ! SSP305780
0208 ! IO Lists - do not forget to DIM the arrays
0209 DIM FM1[31],IC0[40],C[31],W[4],ZZS$[100],R0$[128],W$[41]
0210 FM1_IOL:IOLIST FM1$,FM1[0],FM1[1],FM1[2],FM1[3],FM1[4],FM1[5],FM1[6],FM1[7],FM1[8],FM1[9],FM1[10],FM1[11],FM1[12],FM1[13],FM1[14],FM1[15],FM1[16],FM1[17],FM1[18],FM1[19],FM1[20],FM1[21],FM1[22],FM1[23],FM1[24],FM1[25],FM1[26],FM1[27],FM1[28],FM1[29],FM1[30],FM1[31]
0215 IC0_IOL:IOLIST IC0$,IC0[0],IC0[1],IC0[2],IC0[3],IC0[4],IC0[5],IC0[6],IC0[7],IC0[8],IC0[9],IC0[10],IC0[11],IC0[12],IC0[13],IC0[14],IC0[15],IC0[16],IC0[17],IC0[18],IC0[19],IC0[20],IC0[21],IC0[22],IC0[23],IC0[24],IC0[25],IC0[26],IC0[27],IC0[28],IC0[29],IC0[30],IC0[31],IC0[32],IC0[33],IC0[34],IC0[35],IC0[36],IC0[37],IC0[38],IC0[39],IC0[40]
0217 FM1S_IOL:IOLIST C$,C[0],C[1],C[2],C[3],C[4],C[5],C[6],C[7],C[8],C[9],C[10],C[11],C[12],C[13],C[14],C[15],C[16],C[17],C[18],C[19],C[20],C[21],C[22],C[23],C[24],C[25],C[26],C[27],C[28],C[29],C[30],C[31]
0218 ZZS_IOL:IOLIST ZZS$,R0$,W$,W[0],W[1],W[2],W[3],W[4]
0220 RETURN 
0230 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0240 CMD_STR$="END"
0250 RETURN 
0300 ! 
0310 ! 300 - Set up the message library
0320 SETUP_LIBRARY:
0330 _SV_MSGLIB$=MSG(*)
0340 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0350 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO SET_MSG
0360 MESSAGE_LIB "*msglib.en"
0370 SET_MSG:GOSUB SETUP_MESSAGES
0380 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=5
0430 DIM _KEYS$[1:5]; _KEYS$[1]="CUSTOMER$",_KEYS$[2]="ITEM_CODE$",_KEYS$[3]="LOC_CODE$",_KEYS$[4]="RECEIPT_DATE$",_KEYS$[5]="SEQ_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 
0510 ! 500 - Main panel post_display logic
0520 MAIN_POST_DISPLAY:
0530 MESSAGE_LIB _SV_MSGLIB$
0540 GOSUB CLEAR_REC
0550 GOSUB LOAD_PARAMS
0560 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0915 IF STP(CUST_TO$)<>"" THEN GOSUB SAVE_PARAMS
0920 ! ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0922 ! 
0924 ! Reset all channel references - these held channels defined by ZZFLES
0926 ! the symbols were used for ease of reading, _AR1 is more meaningful than Z[1]
0928 _AR1=0,_FM1=0,_FMP=0,_FMS=0,_FMU=0,_FMV=0,_FM2=0,_FSF=0,_IC0=0,_FM1S=0,_FMUS=0,_FMVS=0,_ZZS=0,_ECR=0 ! SSP 305780
0930 GOSUB CLOSE_FILES
0940 MESSAGE_LIB _SV_MSGLIB$
0950 SET_PARAM 'KR'=_SV_KR
0960 RETURN 
0970 END 
1000 ! 
1010 ! Find (from) Customer - Item Codes are copied from this Customer
1020 FIND_CUST_FROM:
1030 ! Refresh the Customer Name
1040 REFRESH_FLG=1; CUST_NAME1$=%CUST_NAME$
1050 ! If the End of Message (EOM) character is NOT a NUL, SOH, STX, TAB or CR, exit this subroutine
1060 ! Unless a validation script steals focus, another Enabled field or button, like CLEAR or EXIT, is selectable
1070 IF POS(_EOM$=$000102090D$)=0 THEN RETURN 
1080 ! 
1090 IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=CUST_FROM$ THEN QRY_VAL$="" ELSE RETURN 
1100 ! If a customer code is not supplied, stay put
1110 IF STP(CUST_FROM$)="" THEN GOSUB CLEAR_REC; RETURN 
1120 ! Enable Item Code, Customer To entry fields and CLEAR button, set next input field
1130 _ENABLE_FLG=1; GOSUB ENABLE_GROUPS; NEXT_ID=ITEM_START.CTL; RETURN 
1140 EXIT 
1200 ! 
1210 ! Find (to) Customer - Items Codes are copied to this Customer
1220 FIND_CUST_TO:
1230 ! Refresh the Customer Name
1235 IF STP(CUST_TO$)="" THEN CUST_NAME2$=""; CALL "*WINGRP;ENABLE",CUST_CAT.GRP$; CALL "*WINGRP;DISABLE",CUST_TO.GRP$; REFRESH_FLG=1; RETURN 
1238 CALL "*WINGRP;DISABLE",CUST_CAT.GRP$
1240 REFRESH_FLG=1; CUST_NAME2$=%CUST_NAME$
1250 ! If the End of Message (EOM) character is NOT a NUL, SOH, STX, TAB or CR, exit this subroutine
1260 ! Unless a validation script steals focus, another Enabled field or button, like CLEAR or EXIT, is selectable
1270 IF POS(_EOM$=$000102090D$)=0 THEN RETURN 
1280 ! 
1290 IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=CUST_TO$ THEN QRY_VAL$="" ELSE RETURN 
1300 ! Customer values must be different
1310 IF STP(CUST_TO$)=STP(CUST_FROM$) THEN MSGBOX MSG("_CNOTDIFF"),X1$; CUST_TO$=""
1320 ! If a customer code is not supplied, stay put
1330 IF STP(CUST_TO$)="" THEN CUST_NAME2$=""; NEXT_ID=CUST_TO.CTL; RETURN 
1340 ! Enable COPY button, set next input field
1350 _ENABLE_FLG=2; GOSUB ENABLE_GROUPS; NEXT_ID=COPY_ECR.CTL; RETURN ! SSP 305780
1351 ! _ENABLE_FLG=2; GOSUB ENABLE_GROUPS; NEXT_ID=COPY_BTN.CTL; RETURN 
1360 EXIT 
1400 ! 
1410 ! Insure precedence of Item Code selection
1420 VAL_ITEM_CODES:
1430 ! If the End of Message (EOM) character is NOT a NUL, SOH, STX, TAB or CR, exit this subroutine
1440 ! Unless a validation script steals focus, another Enabled field or button, like CLEAR or EXIT, is selectable
1450 IF POS(_EOM$=$000102090D$)=0 THEN RETURN 
1460 ! 
1470 IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=ITEM_END$ THEN QRY_VAL$="" ELSE RETURN 
1480 ! Default Item Start to low values
1490 TEMP_START$=ITEM_START$; IF STP(TEMP_START$)="" THEN TEMP_START$=DIM(10," ")
1500 ! Default Item End to high values
1510 TEMP_END$=ITEM_END$; IF STP(TEMP_END$)="" THEN TEMP_END$=DIM(10,"~")
1520 ! If Item End is less than Item Start, let user know there is a problem and stay put
1530 IF PAD(TEMP_END$,10)<PAD(TEMP_START$,10) THEN {
1540 MSGBOX MSG("_ICNOTLAST"),X1$
1550 STMT$=ID$+"$="+QUO+QUO; EXECUTE STMT$
1560 NEXT_ID=EVN(ID$+".CTL")
1570  }
1580 RETURN 
1800 ! 
1810 ! Clear Screen contents, disable fields
1820 CLEAR_REC:
1830 GOSUB CLEAR_FIELDS
1840 ! Disable all fields and buttons except for EXIT & Customer From.
1850 _ENABLE_FLG=0; GOSUB ENABLE_GROUPS
1860 ! Set the next control to receive input - should be Customer From input field
1870 NEXT_ID=CUST_FROM.CTL
1880 RETURN 
2000 ! 
2100 ! Find (to) Customer Category - Items Codes are copied to this Customer
2120 FIND_CUST_CAT:! ssp 305780
2130 ! Refresh the Customer Name
2135 IF STP(CUST_CAT_TO$)="" THEN CUST_NAME2$=""; CALL "*WINGRP;enable",CUST_TO.GRP$; CALL "*WINGRP;DISABLE",CUST_CAT.GRP$; NEXT_ID=CUST_TO.CTL; RETURN 
2140 REFRESH_FLG=1; CUST_NAME2$="",CUST_TO$=""
2142 CALL "*WINGRP;DISABLE",CUST_TO.GRP$
2150 ! If the End of Message (EOM) character is NOT a NUL, SOH, STX, TAB or CR, exit this subroutine
2160 ! Unless a validation script steals focus, another Enabled field or button, like CLEAR or EXIT, is selectable
2170 IF POS(_EOM$=$000102090D$)=0 THEN RETURN 
2180 ! 
2250 _ENABLE_FLG=2; GOSUB ENABLE_GROUPS; NEXT_ID=COPY_ECR.CTL; RETURN 
2260 EXIT 
3000 CREATE_LIST:! SSP 305780
3010 IF STP(CUST_TO$,2)<>"" THEN TCUST$=CUST_TO$; GOSUB WRITE_FILE; RETURN 
3020 CUST_FOUND=0
3050 READ (Z[1],KEY=CUST_CAT_TO$+"",KNO=6,DOM=*NEXT)
3055 NEXT_CAT_CUST:
3060 CK$=KEY(Z[1],KNO=6,END=CREATE_LIST_EXIT); READ (Z[1],KEY=CK$)CCUST$
3070 IF CK$(1,LEN(CUST_CAT_TO$))<>CUST_CAT_TO$ THEN GOTO CREATE_LIST_EXIT
3080 TCUST$=CK$(10)
3090 GOSUB WRITE_FILE
3100 CUST_FOUND=1
3110 GOTO NEXT_CAT_CUST
3150 CREATE_LIST_EXIT:
3160 CK$=KEY(Z[1],KNO=0)
3170 IF CUST_FOUND=0 THEN MSGBOX "No destination customer records were found","FYI"
3290 RETURN 
3299 ! 
3500 WRITE_FILE:
3520 WRITE (WORK,KEY=TCUST$)TCUST$
3590 RETURN 
3599 ! 
3600 ! 
3610 ! Busy Record display
3620 BUSY_CHK:
3630 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3640 IF _D$="NO" THEN EXIT 
3650 RETURN 
3800 ! 
3810 ! Check Changes
3820 CHECK_CHANGES:
3870 RETURN 
4000 ! 
4010 ! 4000 - Get the current key segment number
4020 GET_CURKEY:
4030 FOR _CURKEY=1 TO _NUMKEYS
4040 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4050 NEXT _CURKEY
4060 RETURN 
9000 ! 
9010 ! 9000 - Retrieve messages from the *msglib.xxx library
9020 SETUP_MESSAGES:
9030 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9040 _MSG_DIRECTORY$=MSG("DIRECTORY")
9050 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9060 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9070 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9080 _MSG_MANDATORY$=MSG("MANDATORY")
9090 _MSG_NEXT$=MSG("NEXT")
9100 _MSG_NON_NUMER$=MSG("NON_NUMER")
9110 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9120 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9130 _MSG_PRECEDING$=MSG("PRECEDING")
9140 _MSG_PREFIX$=MSG("PREFIX")
9150 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9160 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9170 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9180 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9190 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9200 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9210 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9220 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9230 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9240 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9250 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9260 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9270 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9280 _MSG_START_FILE$=MSG("START_FILE")
9290 _MSG_UPDATE$=MSG("UPDATE")
9300 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9310 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9320 _MSG_UPD_SAME$=MSG("UPD_SAME")
9330 _MSG_WARNING$=MSG("WARNING")
9340 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9350 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9360 RETURN 
9800 ! 
9810 ! Opens all files
9820 OPEN_FILES:
9830 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
9840 RETURN 
9850 ! 
9860 ! Closes all files
9870 CLOSE_FILES:
9880 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
9890 RETURN 
9999 END 
13000 ! 
13010 ! Clear fields
13020 CLEAR_FIELDS:
13030 %CUSTOMER$="",%CUST_DIV$="",%CUST_CODE$="",%CUST_NAME$=""
13040 CUST_FROM$="",CUST_NAME1$=""
13050 ITEM_START$="",ITEM_END$=""
13060 CUST_TO$="",CUST_NAME2$=""
13070 REFRESH_FLG=1
13080 RETURN 
14000 ! 
14010 ! Enable/Disable groups
14020 ENABLE_GROUPS:
14030 IF _ENABLE_FLG=0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14040 IF _ENABLE_FLG=1 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",CLEAR_BUTTON.GRP$
14050 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",COPY_BUTTON.GRP$
14060 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Disable",COPY_BUTTON.GRP$
14070 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14080 RETURN 
17100 ! 
17110 ! Find the customer record to obtain the customer name - used in argument processing only
17120 SEL_CUSTOMER:
17130 IF STP(CUSTOMER$)="" THEN CUSTOMER$="          " ELSE CUSTOMER$=PAD(CUSTOMER$,10,"0")
17140 FIND (_AR1,KEY=CUSTOMER$,DOM=NO_AR1)AR1$
17150 CUST_NAME$=AR1$(11,30)
17160 RETURN 
17170 NO_AR1:
17180 CUST_NAME$=""; CUSTOMER$=""
17190 RETURN 
17300 ! 
17310 ! Find the Item record using the supplied Customer & Item Code
17320 SEL_ITEM:
17330 REFRESH_FLG=1
17340 FIND (_SRC,KEY=%CUSTOMER$+ITEM_CODE$,DOM=NO_SRC)IC0$
17350 ITEM_DESC$=IC0$(21,40)
17360 RETURN 
17370 NO_SRC:
17380 ITEM_DESC$=""
17390 RETURN 
28000 ! 
28010 ! Copy_Items - For each Item Code specified for the FROM Customer create a copy for the TO Customer.
28020 COPY_ITEMS:
28021 GOSUB SAVE_PARAMS
28026 ! If the ALL radio button is selected, insure the Item Start & End fields are initalized.
28027 IF ITEM_CODE_BTN$="1" THEN ITEM_START$="",ITEM_START$=PAD(ITEM_START$,10); ITEM_END$="",ITEM_END$=PAD(ITEM_END$,10)
28030 ! Reorder Item Code range, if necessary
28040 IF PAD(ITEM_START$,10)>PAD(ITEM_END$,10) THEN ITEM_TEMP$=ITEM_START$,ITEM_START$=ITEM_END$,ITEM_END$=ITEM_TEMP$
28050 ! Set the first record key
28060 _KEY$=CUST_FROM$+ITEM_START$
28065 WORK=HFN; OPEN (WORK)"*memory*" ! Holding file for Customer codes
28068 GOSUB CREATE_LIST
28069 READ (WORK,KEY="",DOM=*NEXT)
28070 ! 
28072 READ_WORK:
28075 KW$=KEY(WORK,END=WORK_END); READ (WORK,KEY=KW$)CUST_TO$
28080 ! Read the Form Item (start) record based on the supplied key.
28090 READ_NEXT:
28100 READ (_FM1,KEY=_KEY$,DOM=SRC_RNF,ERR=SRC_ERR,END=SRC_EOF)IOL=FM1_IOL
28110 ! If customer has changed, we've processed all Item Codes
28120 IF STP(FM1$(1,10))<>STP(CUST_FROM$) THEN GOTO SRC_EOF
28130 ! If item exceeds the last specified item, we've processed all Item Codes
28140 IF STP(ITEM_END$)<>"" THEN IF PAD(FM1$(11,10),10)>PAD(ITEM_END$,10) THEN GOTO SRC_EOF
28145 ! 
28150 ! Create all Item Code related records for the specified Customer (To)
28160 GOSUB PROCESS_RECD
28170 ! 
28180 ! Set the next record key
28190 SRC_RNF: _KEY$=KEY(_FM1,ERR=SRC_ERR,END=SRC_EOF); GOTO READ_NEXT
28200 ! 
28210 ! If we have an error, bug out, otherwise deal with busy data
28220 SRC_ERR:
28230 IF ERR<>0 THEN EXIT ERR
28240 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
28250 _KEY$=KEN(_FM1,KEY=_KEY$,END=SRC_EOF); GOTO READ_NEXT
28260 ! 
28270 ! End of file
28280 SRC_EOF:
28281 _KEY$=CUST_FROM$+ITEM_START$
28282 GOTO READ_WORK
28285 WORK_END:
28288 ! Disable all fields and buttons except for EXIT & Customer From.
28290 _ENABLE_FLG=0; GOSUB ENABLE_GROUPS
28295 ! Set the next control to receive input - should be Customer From input field
28296 CLOSE (WORK,ERR=*NEXT)
28298 COPY_ECR$=""
28300 NEXT_ID=CUST_FROM.CTL
28310 RETURN 
28320 ! 
28330 ! Process Recd - Create a copy of the Item Record for the specified customer
28340 PROCESS_RECD:
28370 GOSUB CREATE_FM1_RECD
28380 GOSUB CREATE_FM2_RECD
28390 GOSUB CREATE_FMS_RECD
28400 GOSUB CREATE_FMU_RECD
28410 GOSUB CREATE_FMV_RECD
28420 GOSUB CREATE_FSF_RECD
28430 GOSUB CREATE_IC0_RECD
28440 IF COPY_ECR$="Y" THEN GOSUB CREATE_ECR_RECD ! SSP 305780
28450 RETURN 
28700 ! 
28710 ! Create the FM1 record
28715 CREATE_FM1_RECD:
28717 DIM C$(448),C[31] ! SSP307341-DBD-164-DBSPT-114826
28720 C$=FM1$
28725 FOR COUNT=0 TO 31; C[COUNT]=FM1[COUNT]; NEXT COUNT
28730 C$(1,10)=CUST_TO$
28735 C$(109)="",C$(254,1)="0",C$(255,6)=X3$(15,6)
28740 C[6]=0,C[7]=0,C[8]=0,C[9]=0,C[10]=0,C[11]=0,C[12]=0,C[13]=0,C[14]=0,C[15]=0,C[16]=0,C[17]=0,C[24]=0,C[30]=0
28742 C$(387,1)=FM1$(387,1),C$(238,16)=FM1$(238,16),C$(212,3)=FM1$(212,3) ! SSP307341-DBD-164-DBSPT-114826 missing from graphical version, see FM2NC3 character version
28745 DIM CUST_DEF[3]
28750 READ (_FMP,KEY="D"+CUST_TO$,DOM=FM1_READ_FMPA)CUST_DEF$,CUST_DEF[0],CUST_DEF[1],CUST_DEF[2],CUST_DEF[3]
28755 C[30]=CUST_DEF[1]
28760 ! 
28765 FM1_READ_FMPA:
28770 READ (_FMP,KEY="A"+CUST_TO$,DOM=FM1_WRITE)CUST_FMS_PARAM_III$
28775 C$(108,1)=CUST_FMS_PARAM_III$(12,1)
28780 IF NUM(CUST_FMS_PARAM_III$(13,3))>0 THEN C[22]=NUM(CUST_FMS_PARAM_III$(13,3))
28785 ! 
28790 FM1_WRITE:
28800 WRITE (_FM1S,KEY=C$(1,20),DOM=FM1_ERROR)IOL=FM1S_IOL
28810 GOTO FM1_BYE ! GOSUB UPDATE_RT_DATA; GOTO FM1_BYE!SSP#307185 RT no longer used
28815 ! 
28820 FM1_ERROR:
28825 MSGBOX MSG("_DUPRECFND","FM1",CUST_TO$+" - "+FM1$(11,10)),X1$
28830 ! 
28835 FM1_BYE:
28840 RETURN 
28900 ! 
28910 ! Create the FMS record
28915 CREATE_FMS_RECD:
28920 READ (_FMS,KEY=FM1$(1,20),DOM=FMS_BYE)FMS$
28925 FMS$(1,10)=CUST_TO$
28930 WRITE (_FMS,KEY=FMS$(1,20),DOM=*NEXT)FMS$; GOTO FMS_BYE
28935 MSGBOX MSG("_DUPRECFND","FMS",CUST_TO$+" - "+FMS$(11,10)),X1$
28940 ! 
28945 FMS_BYE:
28950 RETURN 
29000 ! 
29010 ! Create the FMU record(s)
29015 CREATE_FMU_RECD:
29020 READ (_FMU,KEY=FM1$(1,20),DOM=*NEXT)
29025 ! 
29030 FMU_NXT:
29035 FMU_KEY$=KEY(_FMU,END=FMU_BYE)
29040 READ RECORD (_FMU,KEY=FMU_KEY$)FMU$
29045 IF FMU$(1,20)<>FM1$(1,20) THEN GOTO FMU_BYE
29050 ! 
29055 FMU$(1,10)=CUST_TO$
29060 WRITE RECORD (_FMUS,KEY=FMU$(1,23),DOM=*NEXT)FMU$; GOTO FMU_NXT
29065 MSGBOX MSG("_DUPRECFND","FMU",CUST_TO$+" - "+FMU$(11,10)+" - "+FMU$(21,3)),X1$
29070 GOTO FMU_NXT
29075 ! 
29080 FMU_BYE:
29085 RETURN 
29100 ! 
29110 ! Create the FMV record(s)
29115 CREATE_FMV_RECD:
29120 READ (_FMV,KEY=FM1$(1,20),DOM=*NEXT)
29125 ! 
29130 FMV_NXT:
29135 FMV_KEY$=KEY(_FMV,END=FMV_BYE)
29140 READ RECORD (_FMV,KEY=FMV_KEY$)FMV$
29145 IF FMV$(1,20)<>FM1$(1,20) THEN GOTO FMV_BYE
29150 ! 
29155 FMV$(1,10)=CUST_TO$
29160 WRITE RECORD (_FMVS,KEY=FMV$(1,23),DOM=*NEXT)FMV$; GOTO FMV_NXT
29165 MSGBOX MSG("_DUPRECFND","FMV",CUST_TO$+" - "+FMV$(11,10)+" - "+FMV$(21,3)),X1$
29170 GOTO FMV_NXT
29175 ! 
29180 FMV_BYE:
29185 RETURN 
29200 ! 
29210 ! Create the FM2 record
29220 CREATE_FM2_RECD:
29230 IF LEN(FM1$)<42 THEN GOTO FM2_BYE
29240 WRITE (_FM2,KEY=FM1$(21,3)+FM1$(24,16)+FM1$(40,2)+FM1$(11,10)+CUST_TO$,DOM=*NEXT); GOTO FM2_BYE
29250 MSGBOX MSG("_DUPRECFND","FM2",FM1$(21,3)+" - "+FM1$(24,16)+" - "+FM1$(40,2)+" - "+FM1$(11,10)+" - "+CUST_TO$(1,10)),X1$
29260 ! 
29270 FM2_BYE:
29280 RETURN 
29300 ! 
29310 ! Create the FSF record
29315 CREATE_FSF_RECD:
29320 READ RECORD (_FSF,KEY=FM1$(1,20),DOM=FSF_BYE)FSF$
29325 FSF$(1,10)=CUST_TO$
29330 WRITE RECORD (_FSF,KEY=FSF$(1,20),DOM=*NEXT)FSF$; GOTO FSF_BYE
29335 MSGBOX MSG("_DUPRECFND","FSF",CUST_TO$+" - "+FSF$(11,10)),X1$
29375 ! 
29380 FSF_BYE:
29385 RETURN 
29400 ! 
29410 ! Create the IC0 record
29415 CREATE_IC0_RECD:
29420 DIM IC0[40]
29425 READ (_IC0,KEY=FM1$(1,20),DOM=IC0_BYE)IOL=IC0_IOL
29430 IC0$(1,10)=CUST_TO$
29435 ! 
29440 ! Setting costs to zero
29445 IC0[17]=0,IC0[18]=0,IC0[20]=0
29450 IC0$(102,6)=DIM(6),IC0$(96,6)=DIM(6)
29455 WRITE (_IC0,KEY=IC0$(1,20),DOM=*NEXT)IOL=IC0_IOL; GOTO IC0_BYE
29460 MSGBOX MSG("_DUPRECFND","IC0",CUST_TO$+" - "+IC0$(11,10)),X1$
29465 ! 
29470 IC0_BYE:
29475 RETURN 
29500 ! 
29510 ! Update Remote Telemarketing Data using Customer and Item Code from new FM1 record
29520 UPDATE_RT_DATA:
29530 W9$="" ! Empty parameter means there is no RT0 file, yet.
29535 ! 
29540 ! Get Remote Telemarketing (RT) Parameters
29545 CALL "RT2PRM",ERR=0586,X3$,X4$,W9$
29550 ! 
29555 ! Write RT7 Data to Customer, if RT parameters exist
29560 IF W9$<>"" THEN CUSTOMER$=C$(1,10); CALL "RT2WOC",ERR=*NEXT,X3$,X4$,CUSTOMER$,"FM1...","U",C$(1,20) END_IF 
29565 RETURN 
29600 ! 
29610 ! Get saved parameters from the ZZS file.
29620 LOAD_PARAMS:
29625 _KEY$=PAD("FM2NC3",18),KLEN=LEN(STP(_KEY$))
29630 FIND (_ZZS,KEY=_KEY$,DOM=GET_PARAMS_EXIT)IOL=ZZS_IOL
29635 ZZS$=PAD(ZZS$,100),R0$=PAD(R0$,128),W$=PAD(W$,41) ! In case of a corrupted record
29640 CUSTOMER$=W$(1,10); GOSUB SEL_CUSTOMER; CUST_FROM$=CUSTOMER$,CUST_NAME1$=CUST_NAME$
29650 IF CUST_FROM$<>"" THEN CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,%CUST_DIV$,%CUST_CODE$; %CUSTOMER$=%CUST_DIV$+%CUST_CODE$
29660 CUSTOMER$=ZZS$(72+KLEN,10); GOSUB SEL_CUSTOMER; CUST_TO$=CUSTOMER$,CUST_NAME2$=CUST_NAME$
29670 ITEM_START$=W$(21,10),ITEM_END$=W$(31,10)
29671 IF ITEM_START$=DIM(10," ") THEN ITEM_START$=""
29672 IF ITEM_END$=DIM(10,"~") THEN ITEM_END$=""
29675 ! IF STP(CUST_TO$)<>"" THEN _ENABLE_FLG=4; GOSUB ENABLE_GROUPS; NEXT_ID=COPY_BTN.CTL
29680 GET_PARAMS_EXIT:
29685 ! MSGBOX "Found this: "+" "+ZZS$+CHR(13)+R0$+" "+W$+" "+STR(W[0])+" "+STR(W[1])+" "+STR(W[2])+" "+STR(W[3])+" "+STR(W[4])
29690 RETURN 
29700 ! Create the ECR record
29715 CREATE_ECR_RECD:
29720 READ (_ECR,KEY=FM1$(1,20),DOM=ECR_BYE)ECR$
29725 ECR$(1,10)=CUST_TO$
29730 WRITE (_ECR,KEY=ECR$(1,20),DOM=*NEXT)ECR$; GOTO ECR_BYE
29735 MSGBOX MSG("_DUPRECFND","ECR",CUST_TO$+" - "+ECR$(11,10)),X1$ ! SSP#307234 DBSPT-77083
29740 ! 
29745 ECR_BYE:
29750 RETURN 
29790 ! 
29800 ! 
29810 ! Save parameters to the ZZS file.
29820 SAVE_PARAMS:
29825 IF STP(CUST_FROM$)="" OR STP(CUST_TO$)="" THEN RETURN 
29830 _KEY$=PAD("FM2NC3",18),OFFSET=LEN(STP(_KEY$))
29840 READ (_ZZS,KEY=_KEY$,DOM=*NEXT)IOL=ZZS_IOL
29845 ! Record key, Report parameter, Item Copy parameter
29850 ZZS$=PAD(ZZS$,100); ZZS$(1,18)=_KEY$,ZZS$(65+OFFSET,1)="1",ZZS$(72+OFFSET,10)=CUST_TO$
29855 ! Default report parameters
29860 R0$=PAD(R0$,128); R0$(1,2)="IU",R0$(8,3)="NNN",R0$(15,2)="66"
29865 ! Item Copy parameters
29866 IF STP(ITEM_START$)="" THEN ITEM_START$=DIM(10," ")
29867 IF STP(ITEM_END$)="" THEN ITEM_END$=DIM(10,"~")
29870 W$=PAD(W$,41); W$(1,10)=CUST_FROM$,W$(11,10)=CUST_FROM$,W$(21,10)=ITEM_START$,W$(31,10)=ITEM_END$
29880 WRITE (_ZZS,KEY=_KEY$)IOL=ZZS_IOL
29890 RETURN 
56000 REM "305780-Item Set Copy; Add ECR to copy, allow entry of cust category
56001 REM "307185-FMGNC1 call to remote telemarketing parameters errors to     wrap up and closes files
56002 REM "307234-Program exception in item set copy DBSPT-77083              
56004 REM "307341-DBD-164-DBSPT-114826;Item Setup Copy missing fields         
