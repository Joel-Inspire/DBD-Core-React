0010 ! FMGIAU - Composition Setup
0035 REM "5.7 - 10/03/12 - 9.096111 - crg - SSP# 258265
0037 REM "258265-In GUI - can you make the composition specs be able to blank
0040 REM "Copyright 2012 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 IF TCB(13)=1 THEN BEGIN 
0055 _CUSTOMER$=%CUSTOMER$,_ITEM_CODE$=%ITEM_CODE$
0060 PROCESS "FMGIAU","../FMG/FM.EN"
0065 %CUSTOMER$=_CUSTOMER$,%ITEM_CODE$=_ITEM_CODE$
0075 END 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0113 _CUSTOMER$=%CUSTOMER$,_ITEM_CODE$=%ITEM_CODE$
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 IF %SPEC THEN _FILE_NAME$="QSS"+%C$ ELSE _FILE_NAME$="FMS"+%C$ ! SSP206206 jdf
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0175 IF %SPEC THEN _QS1=HFN; OPEN (_QS1,IOL=*,REC=QS1$)"QS1"+%C$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0185 _FILE_NAME$="FM1"+%C$,_FM1=HFN; OPEN (_FM1,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0186 _FILE_NAME$="IC0"+%C$,_IC0=HFN; OPEN (_IC0,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0187 _FILE_NAME$="ZZPARM",_ZZPARM=HFN; OPEN (_ZZPARM,ERR=OPEN_ERR)_FILE_NAME$
0188 _FILE_NAME$="FMP"+%C$,_FMP=HFN; OPEN (_FMP,ERR=OPEN_ERR)_FILE_NAME$
0189 DIM %OPS_PARM[0]; READ (_ZZPARM,KEY=%C$+"F/M",DOM=*NEXT)%OPS_PARM$,%OPS_PARM[0]
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=2
0430 DIM _KEYS$[1:2]; _KEYS$[1]="CUSTOMER$",_KEYS$[2]="ITEM_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0515 CALLED$="N"
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 IF STP(_CUSTOMER$)+STP(_ITEM_CODE$)<>"" THEN ARG_1$=_CUSTOMER$+_ITEM_CODE$,CUSTOMER$=_CUSTOMER$,ITEM_CODE$=_ITEM_CODE$,CALLED$="Y"
0537 IF %SPEC THEN ARG_1$=%SPEC$ ! SSP206206 jdf
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$,_ENABLE_FLG=_KCNT,CALLED$="Y"; READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD) ! SSP206206 jdf
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0700 ! 700 - Set up tabbing between folders
0710 INIT_FOLDER:
0720 GOSUB ENABLE_GROUPS; GOSUB CUSTOM_GROUPS
0730 IF _ENABLE_FLG<>_KEY1 THEN IF TAB_FLG$="<" THEN NEXT_ID=_LAST_TAB ELSE NEXT_ID=_FIRST_TAB
0740 EXIT 
0900 ! 900 - Wrapup
0910 WRAPUP:
0915 READ DATA FROM "" TO IOL=GLOBAL_IOL
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 IF _FM1<>0 THEN CLOSE (_FM1); _FM1=0
0946 IF _IC0<>0 THEN CLOSE (_IC0); _IC0=0
0947 IF _ZZPARM<>0 THEN CLOSE (_ZZPARM); _ZZPARM=0
0948 IF _FMP<>0 THEN CLOSE (_FMP); _FMP=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1025 IF ID$="CUSTOMER" THEN CALL "ZZWLKU;parse_cust",CUSTOMER$,CUST_DIV$,CUST_CODE$; CUSTOMER$=CUST_DIV$+CUST_CODE$
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;parse_cust",CUSTOMER$,CUST_DIV$,CUST_CODE$
1047 IF ID$="ITEM_CODE" THEN GOSUB IC0
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1280 NEXT_FOLDER=_FIRST_FOLDER
1285 GOSUB NEW_RECORD_DEFAULTS
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1425 IF %RFQ THEN GOSUB GET_FMS ! SSP206206 jdf
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1485 IF CALLED$="Y" THEN CMD_STR$="E"
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1705 IF CALLED$="Y" THEN CMD_STR$="E"
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1855 IF CALLED$="Y" THEN CMD_STR$="E"
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3025 IF %RFQ THEN GOSUB GET_QSS ! SSP206206 jdf
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3061 CUSTOMER$=CUST_DIV$+CUST_CODE$
3063 NEW$="N"
3065 ! GOSUB SET_CHECK_BOX_FIELD_VALUES ! 258265
3067 GOSUB READ_ITEM_RECORD
3068 GOSUB CUSTOM_GROUPS
3069 GOSUB IC0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUSTOMER.CTL,_FIRST_FIELD=ITEM_DESC.CTL,_FIRST_FOLDER=FLDR.FMGIAU.1.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13001 GLOBAL_IOL:IOLIST %CUSTOMER$,%ITEM_CODE$,%CUST_NAME$,%ITEM_DESC$
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN CUST_DIV$=""
13030 IF _CLR_FLG$="R" THEN CUST_CODE$="",CUSTOMER$=""
13040 IF _CLR_FLG$="R" THEN ITEM_CODE$=""
13050 PLANT_TO_SET_COPY$="",IC0.ITEM_DESC$="",%CUST_NAME$=""
13060 CR_COPY$=""
13070 NEGATIVES_ATTACHED$=""
13080 EXTRA_FIELD$=""
13090 ARTWORK$=""
13100 PLANT_TO_SET_SCRNS$=""
13110 PLANT_TO_MAKE_ADJ$=""
13120 RETURN_ART$=""
13130 RETURN_NEGS$=""
13140 RETURN_CR_COPY$=""
13150 DESTROY_OLD_COPY$=""
13160 PROOF_REQUIRED$=""
13170 IMPRINT_REQUIRED$=""
13180 CARBON_DUMMY$=""
13190 SAMPLES$=""
13200 SUBPACK_UM$=""
13210 SUBPACK_QTY_PER$=""
13220 FMS_UNUSED_1$=""
13230 TF_MOD$=""
13240 NUM_OF_POS$=""
13250 COLOR$=""
13260 ARABIC$=""
13270 PRESS$=""
13280 TF_COLLATE$=""
13290 GUARANTEED_NUM$=""
13300 TF_LIST$=""
13310 JUMBO$=""
13320 MICR$=""
13330 TF_STATIC$=""
13340 CONSECUTIVE$=""
13350 OTHERS$=""
13360 GLUE_LEFT$=""
13370 GLUE_RIGHT$=""
13380 CRIMP_LEFT$=""
13390 CRIMP_RIGHT$=""
13400 OTHERS_1$=""
13410 PLYS$=""
13420 TF_POSITION$=""
13430 TF_NUMBER$=""
13440 DIAMETER$=""
13450 CENTER_TO_CENTER$=""
13460 BOOKS$=""
13470 PADS$=""
13480 NUM_OF_SETS_PER$=""
13490 WRAP_AROUND$=""
13500 TRIAD$=""
13510 OPEN_END$=""
13520 PARTS_LEFT_IN_BOOK$=""
13530 POLYWRAP$=""
13540 PRINTER$=""
13550 DECOLLATOR_TYPE$=""
13560 BURSTER_TYPE$=""
13570 FMS_UNUSED_2$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=ITEM_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=ITEM_CODE.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14987 IF CALLED$="Y" THEN CALL "*wingrp;Hide",SCROLL.GRP$ ! If coming from menu or other program, hide scroll buttons, only allow user access to this item's record
14988 IF CALLED$="Y" THEN DISABLE CONTROL CUSTOMER.CTL ! If coming from menu or other program, no access to key fields.
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(56,"N")
15030 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15040 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15050 IF _ORIG.ITEM_CODE$=_CUR.ITEM_CODE$ OR ITEM_CODE$=_CUR.ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CODE$=ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$
15060 IF _ORIG.PLANT_TO_SET_COPY$=_CUR.PLANT_TO_SET_COPY$ OR PLANT_TO_SET_COPY$=_CUR.PLANT_TO_SET_COPY$ THEN GOTO *NEXT ELSE IF _ORIG.PLANT_TO_SET_COPY$=PLANT_TO_SET_COPY$ THEN _CHG2$=_CHG2$+SEP+MSG("PLAN_T_S_C")+" = "+_CUR.PLANT_TO_SET_COPY$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLAN_T_S_C")+" = "+_CUR.PLANT_TO_SET_COPY$
15070 IF _ORIG.CR_COPY$=_CUR.CR_COPY$ OR CR_COPY$=_CUR.CR_COPY$ THEN GOTO *NEXT ELSE IF _ORIG.CR_COPY$=CR_COPY$ THEN _CHG2$=_CHG2$+SEP+MSG("CR_COPY")+" = "+_CUR.CR_COPY$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CR_COPY")+" = "+_CUR.CR_COPY$
15080 IF _ORIG.NEGATIVES_ATTACHED$=_CUR.NEGATIVES_ATTACHED$ OR NEGATIVES_ATTACHED$=_CUR.NEGATIVES_ATTACHED$ THEN GOTO *NEXT ELSE IF _ORIG.NEGATIVES_ATTACHED$=NEGATIVES_ATTACHED$ THEN _CHG2$=_CHG2$+SEP+MSG("NEGA_A")+" = "+_CUR.NEGATIVES_ATTACHED$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NEGA_A")+" = "+_CUR.NEGATIVES_ATTACHED$
15090 IF _ORIG.EXTRA_FIELD$=_CUR.EXTRA_FIELD$ OR EXTRA_FIELD$=_CUR.EXTRA_FIELD$ THEN GOTO *NEXT ELSE IF _ORIG.EXTRA_FIELD$=EXTRA_FIELD$ THEN _CHG2$=_CHG2$+SEP+MSG("EXTR_F")+" = "+_CUR.EXTRA_FIELD$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EXTR_F")+" = "+_CUR.EXTRA_FIELD$
15100 IF _ORIG.ARTWORK$=_CUR.ARTWORK$ OR ARTWORK$=_CUR.ARTWORK$ THEN GOTO *NEXT ELSE IF _ORIG.ARTWORK$=ARTWORK$ THEN _CHG2$=_CHG2$+SEP+MSG("ARTWORK")+" = "+_CUR.ARTWORK$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ARTWORK")+" = "+_CUR.ARTWORK$
15110 IF _ORIG.PLANT_TO_SET_SCRNS$=_CUR.PLANT_TO_SET_SCRNS$ OR PLANT_TO_SET_SCRNS$=_CUR.PLANT_TO_SET_SCRNS$ THEN GOTO *NEXT ELSE IF _ORIG.PLANT_TO_SET_SCRNS$=PLANT_TO_SET_SCRNS$ THEN _CHG2$=_CHG2$+SEP+MSG("PLAN_T_S_S")+" = "+_CUR.PLANT_TO_SET_SCRNS$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLAN_T_S_S")+" = "+_CUR.PLANT_TO_SET_SCRNS$
15120 IF _ORIG.PLANT_TO_MAKE_ADJ$=_CUR.PLANT_TO_MAKE_ADJ$ OR PLANT_TO_MAKE_ADJ$=_CUR.PLANT_TO_MAKE_ADJ$ THEN GOTO *NEXT ELSE IF _ORIG.PLANT_TO_MAKE_ADJ$=PLANT_TO_MAKE_ADJ$ THEN _CHG2$=_CHG2$+SEP+MSG("PLAN_T_M_A")+" = "+_CUR.PLANT_TO_MAKE_ADJ$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLAN_T_M_A")+" = "+_CUR.PLANT_TO_MAKE_ADJ$
15130 IF _ORIG.RETURN_ART$=_CUR.RETURN_ART$ OR RETURN_ART$=_CUR.RETURN_ART$ THEN GOTO *NEXT ELSE IF _ORIG.RETURN_ART$=RETURN_ART$ THEN _CHG2$=_CHG2$+SEP+MSG("RETURN_ART")+" = "+_CUR.RETURN_ART$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RETURN_ART")+" = "+_CUR.RETURN_ART$
15140 IF _ORIG.RETURN_NEGS$=_CUR.RETURN_NEGS$ OR RETURN_NEGS$=_CUR.RETURN_NEGS$ THEN GOTO *NEXT ELSE IF _ORIG.RETURN_NEGS$=RETURN_NEGS$ THEN _CHG2$=_CHG2$+SEP+MSG("RETU_N")+" = "+_CUR.RETURN_NEGS$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RETU_N")+" = "+_CUR.RETURN_NEGS$
15150 IF _ORIG.RETURN_CR_COPY$=_CUR.RETURN_CR_COPY$ OR RETURN_CR_COPY$=_CUR.RETURN_CR_COPY$ THEN GOTO *NEXT ELSE IF _ORIG.RETURN_CR_COPY$=RETURN_CR_COPY$ THEN _CHG2$=_CHG2$+SEP+MSG("RETU_C_C")+" = "+_CUR.RETURN_CR_COPY$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RETU_C_C")+" = "+_CUR.RETURN_CR_COPY$
15160 IF _ORIG.DESTROY_OLD_COPY$=_CUR.DESTROY_OLD_COPY$ OR DESTROY_OLD_COPY$=_CUR.DESTROY_OLD_COPY$ THEN GOTO *NEXT ELSE IF _ORIG.DESTROY_OLD_COPY$=DESTROY_OLD_COPY$ THEN _CHG2$=_CHG2$+SEP+MSG("DEST_O_C")+" = "+_CUR.DESTROY_OLD_COPY$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DEST_O_C")+" = "+_CUR.DESTROY_OLD_COPY$
15170 IF _ORIG.PROOF_REQUIRED$=_CUR.PROOF_REQUIRED$ OR PROOF_REQUIRED$=_CUR.PROOF_REQUIRED$ THEN GOTO *NEXT ELSE IF _ORIG.PROOF_REQUIRED$=PROOF_REQUIRED$ THEN _CHG2$=_CHG2$+SEP+MSG("PROO_R")+" = "+_CUR.PROOF_REQUIRED$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PROO_R")+" = "+_CUR.PROOF_REQUIRED$
15180 IF _ORIG.IMPRINT_REQUIRED$=_CUR.IMPRINT_REQUIRED$ OR IMPRINT_REQUIRED$=_CUR.IMPRINT_REQUIRED$ THEN GOTO *NEXT ELSE IF _ORIG.IMPRINT_REQUIRED$=IMPRINT_REQUIRED$ THEN _CHG2$=_CHG2$+SEP+MSG("IMPR_R")+" = "+_CUR.IMPRINT_REQUIRED$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("IMPR_R")+" = "+_CUR.IMPRINT_REQUIRED$
15190 IF _ORIG.CARBON_DUMMY$=_CUR.CARBON_DUMMY$ OR CARBON_DUMMY$=_CUR.CARBON_DUMMY$ THEN GOTO *NEXT ELSE IF _ORIG.CARBON_DUMMY$=CARBON_DUMMY$ THEN _CHG2$=_CHG2$+SEP+MSG("CARB_D")+" = "+_CUR.CARBON_DUMMY$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CARB_D")+" = "+_CUR.CARBON_DUMMY$
15200 IF _ORIG.SAMPLES$=_CUR.SAMPLES$ OR SAMPLES$=_CUR.SAMPLES$ THEN GOTO *NEXT ELSE IF _ORIG.SAMPLES$=SAMPLES$ THEN _CHG2$=_CHG2$+SEP+MSG("SAMPLES")+" = "+_CUR.SAMPLES$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SAMPLES")+" = "+_CUR.SAMPLES$
15210 IF _ORIG.SUBPACK_UM$=_CUR.SUBPACK_UM$ OR SUBPACK_UM$=_CUR.SUBPACK_UM$ THEN GOTO *NEXT ELSE IF _ORIG.SUBPACK_UM$=SUBPACK_UM$ THEN _CHG2$=_CHG2$+SEP+MSG("SUBPACK_UM")+" = "+_CUR.SUBPACK_UM$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SUBPACK_UM")+" = "+_CUR.SUBPACK_UM$
15220 IF _ORIG.SUBPACK_QTY_PER$=_CUR.SUBPACK_QTY_PER$ OR SUBPACK_QTY_PER$=_CUR.SUBPACK_QTY_PER$ THEN GOTO *NEXT ELSE IF _ORIG.SUBPACK_QTY_PER$=SUBPACK_QTY_PER$ THEN _CHG2$=_CHG2$+SEP+MSG("SUBP_Q_P")+" = "+_CUR.SUBPACK_QTY_PER$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SUBP_Q_P")+" = "+_CUR.SUBPACK_QTY_PER$
15230 IF _ORIG.FMS_UNUSED_1$=_CUR.FMS_UNUSED_1$ OR FMS_UNUSED_1$=_CUR.FMS_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.FMS_UNUSED_1$=FMS_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.FMS_UNUSED_1$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.FMS_UNUSED_1$
15240 IF _ORIG.TF_MOD$=_CUR.TF_MOD$ OR TF_MOD$=_CUR.TF_MOD$ THEN GOTO *NEXT ELSE IF _ORIG.TF_MOD$=TF_MOD$ THEN _CHG2$=_CHG2$+SEP+MSG("MOD")+" = "+_CUR.TF_MOD$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MOD")+" = "+_CUR.TF_MOD$
15250 IF _ORIG.NUM_OF_POS$=_CUR.NUM_OF_POS$ OR NUM_OF_POS$=_CUR.NUM_OF_POS$ THEN GOTO *NEXT ELSE IF _ORIG.NUM_OF_POS$=NUM_OF_POS$ THEN _CHG2$=_CHG2$+SEP+MSG("NUM_OF_POS")+" = "+_CUR.NUM_OF_POS$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NUM_OF_POS")+" = "+_CUR.NUM_OF_POS$
15260 IF _ORIG.COLOR$=_CUR.COLOR$ OR COLOR$=_CUR.COLOR$ THEN GOTO *NEXT ELSE IF _ORIG.COLOR$=COLOR$ THEN _CHG2$=_CHG2$+SEP+MSG("COLOR")+" = "+_CUR.COLOR$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COLOR")+" = "+_CUR.COLOR$
15270 IF _ORIG.ARABIC$=_CUR.ARABIC$ OR ARABIC$=_CUR.ARABIC$ THEN GOTO *NEXT ELSE IF _ORIG.ARABIC$=ARABIC$ THEN _CHG2$=_CHG2$+SEP+MSG("ARABIC")+" = "+_CUR.ARABIC$,_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ARABIC")+" = "+_CUR.ARABIC$
15280 IF _ORIG.PRESS$=_CUR.PRESS$ OR PRESS$=_CUR.PRESS$ THEN GOTO *NEXT ELSE IF _ORIG.PRESS$=PRESS$ THEN _CHG2$=_CHG2$+SEP+MSG("PRESS")+" = "+_CUR.PRESS$,_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRESS")+" = "+_CUR.PRESS$
15290 IF _ORIG.TF_COLLATE$=_CUR.TF_COLLATE$ OR TF_COLLATE$=_CUR.TF_COLLATE$ THEN GOTO *NEXT ELSE IF _ORIG.TF_COLLATE$=TF_COLLATE$ THEN _CHG2$=_CHG2$+SEP+MSG("COLLATE")+" = "+_CUR.TF_COLLATE$,_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COLLATE")+" = "+_CUR.TF_COLLATE$
15300 IF _ORIG.GUARANTEED_NUM$=_CUR.GUARANTEED_NUM$ OR GUARANTEED_NUM$=_CUR.GUARANTEED_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.GUARANTEED_NUM$=GUARANTEED_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("GUAR_N")+" = "+_CUR.GUARANTEED_NUM$,_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GUAR_N")+" = "+_CUR.GUARANTEED_NUM$
15310 IF _ORIG.TF_LIST$=_CUR.TF_LIST$ OR TF_LIST$=_CUR.TF_LIST$ THEN GOTO *NEXT ELSE IF _ORIG.TF_LIST$=TF_LIST$ THEN _CHG2$=_CHG2$+SEP+MSG("LIST")+" = "+_CUR.TF_LIST$,_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LIST")+" = "+_CUR.TF_LIST$
15320 IF _ORIG.JUMBO$=_CUR.JUMBO$ OR JUMBO$=_CUR.JUMBO$ THEN GOTO *NEXT ELSE IF _ORIG.JUMBO$=JUMBO$ THEN _CHG2$=_CHG2$+SEP+MSG("JUMBO")+" = "+_CUR.JUMBO$,_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("JUMBO")+" = "+_CUR.JUMBO$
15330 IF _ORIG.MICR$=_CUR.MICR$ OR MICR$=_CUR.MICR$ THEN GOTO *NEXT ELSE IF _ORIG.MICR$=MICR$ THEN _CHG2$=_CHG2$+SEP+MSG("MICR")+" = "+_CUR.MICR$,_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MICR")+" = "+_CUR.MICR$
15340 IF _ORIG.TF_STATIC$=_CUR.TF_STATIC$ OR TF_STATIC$=_CUR.TF_STATIC$ THEN GOTO *NEXT ELSE IF _ORIG.TF_STATIC$=TF_STATIC$ THEN _CHG2$=_CHG2$+SEP+MSG("STATIC")+" = "+_CUR.TF_STATIC$,_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STATIC")+" = "+_CUR.TF_STATIC$
15350 IF _ORIG.CONSECUTIVE$=_CUR.CONSECUTIVE$ OR CONSECUTIVE$=_CUR.CONSECUTIVE$ THEN GOTO *NEXT ELSE IF _ORIG.CONSECUTIVE$=CONSECUTIVE$ THEN _CHG2$=_CHG2$+SEP+MSG("CONS")+" = "+_CUR.CONSECUTIVE$,_CHG_VAR$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CONS")+" = "+_CUR.CONSECUTIVE$
15360 IF _ORIG.OTHERS$=_CUR.OTHERS$ OR OTHERS$=_CUR.OTHERS$ THEN GOTO *NEXT ELSE IF _ORIG.OTHERS$=OTHERS$ THEN _CHG2$=_CHG2$+SEP+MSG("OTHERS")+" = "+_CUR.OTHERS$,_CHG_VAR$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OTHERS")+" = "+_CUR.OTHERS$
15370 IF _ORIG.GLUE_LEFT$=_CUR.GLUE_LEFT$ OR GLUE_LEFT$=_CUR.GLUE_LEFT$ THEN GOTO *NEXT ELSE IF _ORIG.GLUE_LEFT$=GLUE_LEFT$ THEN _CHG2$=_CHG2$+SEP+MSG("GLUE_LEFT")+" = "+_CUR.GLUE_LEFT$,_CHG_VAR$(35,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GLUE_LEFT")+" = "+_CUR.GLUE_LEFT$
15380 IF _ORIG.GLUE_RIGHT$=_CUR.GLUE_RIGHT$ OR GLUE_RIGHT$=_CUR.GLUE_RIGHT$ THEN GOTO *NEXT ELSE IF _ORIG.GLUE_RIGHT$=GLUE_RIGHT$ THEN _CHG2$=_CHG2$+SEP+MSG("GLUE_RIGHT")+" = "+_CUR.GLUE_RIGHT$,_CHG_VAR$(36,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GLUE_RIGHT")+" = "+_CUR.GLUE_RIGHT$
15390 IF _ORIG.CRIMP_LEFT$=_CUR.CRIMP_LEFT$ OR CRIMP_LEFT$=_CUR.CRIMP_LEFT$ THEN GOTO *NEXT ELSE IF _ORIG.CRIMP_LEFT$=CRIMP_LEFT$ THEN _CHG2$=_CHG2$+SEP+MSG("CRIMP_LEFT")+" = "+_CUR.CRIMP_LEFT$,_CHG_VAR$(37,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CRIMP_LEFT")+" = "+_CUR.CRIMP_LEFT$
15400 IF _ORIG.CRIMP_RIGHT$=_CUR.CRIMP_RIGHT$ OR CRIMP_RIGHT$=_CUR.CRIMP_RIGHT$ THEN GOTO *NEXT ELSE IF _ORIG.CRIMP_RIGHT$=CRIMP_RIGHT$ THEN _CHG2$=_CHG2$+SEP+MSG("CRIM_R")+" = "+_CUR.CRIMP_RIGHT$,_CHG_VAR$(38,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CRIM_R")+" = "+_CUR.CRIMP_RIGHT$
15410 IF _ORIG.OTHERS_1$=_CUR.OTHERS_1$ OR OTHERS_1$=_CUR.OTHERS_1$ THEN GOTO *NEXT ELSE IF _ORIG.OTHERS_1$=OTHERS_1$ THEN _CHG2$=_CHG2$+SEP+MSG("OTHERS_1")+" = "+_CUR.OTHERS_1$,_CHG_VAR$(39,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OTHERS_1")+" = "+_CUR.OTHERS_1$
15420 IF _ORIG.PLYS$=_CUR.PLYS$ OR PLYS$=_CUR.PLYS$ THEN GOTO *NEXT ELSE IF _ORIG.PLYS$=PLYS$ THEN _CHG2$=_CHG2$+SEP+MSG("PLYS")+" = "+_CUR.PLYS$,_CHG_VAR$(40,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLYS")+" = "+_CUR.PLYS$
15430 IF _ORIG.TF_POSITION$=_CUR.TF_POSITION$ OR TF_POSITION$=_CUR.TF_POSITION$ THEN GOTO *NEXT ELSE IF _ORIG.TF_POSITION$=TF_POSITION$ THEN _CHG2$=_CHG2$+SEP+MSG("POSITION")+" = "+_CUR.TF_POSITION$,_CHG_VAR$(41,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("POSITION")+" = "+_CUR.TF_POSITION$
15440 IF _ORIG.TF_NUMBER$=_CUR.TF_NUMBER$ OR TF_NUMBER$=_CUR.TF_NUMBER$ THEN GOTO *NEXT ELSE IF _ORIG.TF_NUMBER$=TF_NUMBER$ THEN _CHG2$=_CHG2$+SEP+MSG("NUMBER")+" = "+_CUR.TF_NUMBER$,_CHG_VAR$(42,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NUMBER")+" = "+_CUR.TF_NUMBER$
15450 IF _ORIG.DIAMETER$=_CUR.DIAMETER$ OR DIAMETER$=_CUR.DIAMETER$ THEN GOTO *NEXT ELSE IF _ORIG.DIAMETER$=DIAMETER$ THEN _CHG2$=_CHG2$+SEP+MSG("DIAMETER")+" = "+_CUR.DIAMETER$,_CHG_VAR$(43,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DIAMETER")+" = "+_CUR.DIAMETER$
15460 IF _ORIG.CENTER_TO_CENTER$=_CUR.CENTER_TO_CENTER$ OR CENTER_TO_CENTER$=_CUR.CENTER_TO_CENTER$ THEN GOTO *NEXT ELSE IF _ORIG.CENTER_TO_CENTER$=CENTER_TO_CENTER$ THEN _CHG2$=_CHG2$+SEP+MSG("CENT_T_C")+" = "+_CUR.CENTER_TO_CENTER$,_CHG_VAR$(44,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CENT_T_C")+" = "+_CUR.CENTER_TO_CENTER$
15470 IF _ORIG.BOOKS$=_CUR.BOOKS$ OR BOOKS$=_CUR.BOOKS$ THEN GOTO *NEXT ELSE IF _ORIG.BOOKS$=BOOKS$ THEN _CHG2$=_CHG2$+SEP+MSG("BOOKS")+" = "+_CUR.BOOKS$,_CHG_VAR$(45,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BOOKS")+" = "+_CUR.BOOKS$
15480 IF _ORIG.PADS$=_CUR.PADS$ OR PADS$=_CUR.PADS$ THEN GOTO *NEXT ELSE IF _ORIG.PADS$=PADS$ THEN _CHG2$=_CHG2$+SEP+MSG("PADS")+" = "+_CUR.PADS$,_CHG_VAR$(46,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PADS")+" = "+_CUR.PADS$
15490 IF _ORIG.NUM_OF_SETS_PER$=_CUR.NUM_OF_SETS_PER$ OR NUM_OF_SETS_PER$=_CUR.NUM_OF_SETS_PER$ THEN GOTO *NEXT ELSE IF _ORIG.NUM_OF_SETS_PER$=NUM_OF_SETS_PER$ THEN _CHG2$=_CHG2$+SEP+MSG("NUM_O_S_P")+" = "+_CUR.NUM_OF_SETS_PER$,_CHG_VAR$(47,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NUM_O_S_P")+" = "+_CUR.NUM_OF_SETS_PER$
15500 IF _ORIG.WRAP_AROUND$=_CUR.WRAP_AROUND$ OR WRAP_AROUND$=_CUR.WRAP_AROUND$ THEN GOTO *NEXT ELSE IF _ORIG.WRAP_AROUND$=WRAP_AROUND$ THEN _CHG2$=_CHG2$+SEP+MSG("WRAP_A")+" = "+_CUR.WRAP_AROUND$,_CHG_VAR$(48,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WRAP_A")+" = "+_CUR.WRAP_AROUND$
15510 IF _ORIG.TRIAD$=_CUR.TRIAD$ OR TRIAD$=_CUR.TRIAD$ THEN GOTO *NEXT ELSE IF _ORIG.TRIAD$=TRIAD$ THEN _CHG2$=_CHG2$+SEP+MSG("TRIAD")+" = "+_CUR.TRIAD$,_CHG_VAR$(49,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TRIAD")+" = "+_CUR.TRIAD$
15520 IF _ORIG.OPEN_END$=_CUR.OPEN_END$ OR OPEN_END$=_CUR.OPEN_END$ THEN GOTO *NEXT ELSE IF _ORIG.OPEN_END$=OPEN_END$ THEN _CHG2$=_CHG2$+SEP+MSG("OPEN_END")+" = "+_CUR.OPEN_END$,_CHG_VAR$(50,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OPEN_END")+" = "+_CUR.OPEN_END$
15530 IF _ORIG.PARTS_LEFT_IN_BOOK$=_CUR.PARTS_LEFT_IN_BOOK$ OR PARTS_LEFT_IN_BOOK$=_CUR.PARTS_LEFT_IN_BOOK$ THEN GOTO *NEXT ELSE IF _ORIG.PARTS_LEFT_IN_BOOK$=PARTS_LEFT_IN_BOOK$ THEN _CHG2$=_CHG2$+SEP+MSG("PART_L_I_B")+" = "+_CUR.PARTS_LEFT_IN_BOOK$,_CHG_VAR$(51,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PART_L_I_B")+" = "+_CUR.PARTS_LEFT_IN_BOOK$
15540 IF _ORIG.POLYWRAP$=_CUR.POLYWRAP$ OR POLYWRAP$=_CUR.POLYWRAP$ THEN GOTO *NEXT ELSE IF _ORIG.POLYWRAP$=POLYWRAP$ THEN _CHG2$=_CHG2$+SEP+MSG("POLYWRAP")+" = "+_CUR.POLYWRAP$,_CHG_VAR$(52,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("POLYWRAP")+" = "+_CUR.POLYWRAP$
15550 IF _ORIG.PRINTER$=_CUR.PRINTER$ OR PRINTER$=_CUR.PRINTER$ THEN GOTO *NEXT ELSE IF _ORIG.PRINTER$=PRINTER$ THEN _CHG2$=_CHG2$+SEP+MSG("PRINTER")+" = "+_CUR.PRINTER$,_CHG_VAR$(53,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRINTER")+" = "+_CUR.PRINTER$
15560 IF _ORIG.DECOLLATOR_TYPE$=_CUR.DECOLLATOR_TYPE$ OR DECOLLATOR_TYPE$=_CUR.DECOLLATOR_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.DECOLLATOR_TYPE$=DECOLLATOR_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("DECO_T")+" = "+_CUR.DECOLLATOR_TYPE$,_CHG_VAR$(54,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DECO_T")+" = "+_CUR.DECOLLATOR_TYPE$
15570 IF _ORIG.BURSTER_TYPE$=_CUR.BURSTER_TYPE$ OR BURSTER_TYPE$=_CUR.BURSTER_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.BURSTER_TYPE$=BURSTER_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("BURS_T")+" = "+_CUR.BURSTER_TYPE$,_CHG_VAR$(55,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BURS_T")+" = "+_CUR.BURSTER_TYPE$
15580 IF _ORIG.FMS_UNUSED_2$=_CUR.FMS_UNUSED_2$ OR FMS_UNUSED_2$=_CUR.FMS_UNUSED_2$ THEN GOTO *NEXT ELSE IF _ORIG.FMS_UNUSED_2$=FMS_UNUSED_2$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.FMS_UNUSED_2$,_CHG_VAR$(56,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.FMS_UNUSED_2$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16030 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN ITEM_CODE$=_CUR.ITEM_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN PLANT_TO_SET_COPY$=_CUR.PLANT_TO_SET_COPY$
16060 IF _CHG_VAR$(5,1)="Y" THEN CR_COPY$=_CUR.CR_COPY$
16070 IF _CHG_VAR$(6,1)="Y" THEN NEGATIVES_ATTACHED$=_CUR.NEGATIVES_ATTACHED$
16080 IF _CHG_VAR$(7,1)="Y" THEN EXTRA_FIELD$=_CUR.EXTRA_FIELD$
16090 IF _CHG_VAR$(8,1)="Y" THEN ARTWORK$=_CUR.ARTWORK$
16100 IF _CHG_VAR$(9,1)="Y" THEN PLANT_TO_SET_SCRNS$=_CUR.PLANT_TO_SET_SCRNS$
16110 IF _CHG_VAR$(10,1)="Y" THEN PLANT_TO_MAKE_ADJ$=_CUR.PLANT_TO_MAKE_ADJ$
16120 IF _CHG_VAR$(11,1)="Y" THEN RETURN_ART$=_CUR.RETURN_ART$
16130 IF _CHG_VAR$(12,1)="Y" THEN RETURN_NEGS$=_CUR.RETURN_NEGS$
16140 IF _CHG_VAR$(13,1)="Y" THEN RETURN_CR_COPY$=_CUR.RETURN_CR_COPY$
16150 IF _CHG_VAR$(14,1)="Y" THEN DESTROY_OLD_COPY$=_CUR.DESTROY_OLD_COPY$
16160 IF _CHG_VAR$(15,1)="Y" THEN PROOF_REQUIRED$=_CUR.PROOF_REQUIRED$
16170 IF _CHG_VAR$(16,1)="Y" THEN IMPRINT_REQUIRED$=_CUR.IMPRINT_REQUIRED$
16180 IF _CHG_VAR$(17,1)="Y" THEN CARBON_DUMMY$=_CUR.CARBON_DUMMY$
16190 IF _CHG_VAR$(18,1)="Y" THEN SAMPLES$=_CUR.SAMPLES$
16200 IF _CHG_VAR$(19,1)="Y" THEN SUBPACK_UM$=_CUR.SUBPACK_UM$
16210 IF _CHG_VAR$(20,1)="Y" THEN SUBPACK_QTY_PER$=_CUR.SUBPACK_QTY_PER$
16220 IF _CHG_VAR$(21,1)="Y" THEN FMS_UNUSED_1$=_CUR.FMS_UNUSED_1$
16230 IF _CHG_VAR$(22,1)="Y" THEN TF_MOD$=_CUR.TF_MOD$
16240 IF _CHG_VAR$(23,1)="Y" THEN NUM_OF_POS$=_CUR.NUM_OF_POS$
16250 IF _CHG_VAR$(24,1)="Y" THEN COLOR$=_CUR.COLOR$
16260 IF _CHG_VAR$(25,1)="Y" THEN ARABIC$=_CUR.ARABIC$
16270 IF _CHG_VAR$(26,1)="Y" THEN PRESS$=_CUR.PRESS$
16280 IF _CHG_VAR$(27,1)="Y" THEN TF_COLLATE$=_CUR.TF_COLLATE$
16290 IF _CHG_VAR$(28,1)="Y" THEN GUARANTEED_NUM$=_CUR.GUARANTEED_NUM$
16300 IF _CHG_VAR$(29,1)="Y" THEN TF_LIST$=_CUR.TF_LIST$
16310 IF _CHG_VAR$(30,1)="Y" THEN JUMBO$=_CUR.JUMBO$
16320 IF _CHG_VAR$(31,1)="Y" THEN MICR$=_CUR.MICR$
16330 IF _CHG_VAR$(32,1)="Y" THEN TF_STATIC$=_CUR.TF_STATIC$
16340 IF _CHG_VAR$(33,1)="Y" THEN CONSECUTIVE$=_CUR.CONSECUTIVE$
16350 IF _CHG_VAR$(34,1)="Y" THEN OTHERS$=_CUR.OTHERS$
16360 IF _CHG_VAR$(35,1)="Y" THEN GLUE_LEFT$=_CUR.GLUE_LEFT$
16370 IF _CHG_VAR$(36,1)="Y" THEN GLUE_RIGHT$=_CUR.GLUE_RIGHT$
16380 IF _CHG_VAR$(37,1)="Y" THEN CRIMP_LEFT$=_CUR.CRIMP_LEFT$
16390 IF _CHG_VAR$(38,1)="Y" THEN CRIMP_RIGHT$=_CUR.CRIMP_RIGHT$
16400 IF _CHG_VAR$(39,1)="Y" THEN OTHERS_1$=_CUR.OTHERS_1$
16410 IF _CHG_VAR$(40,1)="Y" THEN PLYS$=_CUR.PLYS$
16420 IF _CHG_VAR$(41,1)="Y" THEN TF_POSITION$=_CUR.TF_POSITION$
16430 IF _CHG_VAR$(42,1)="Y" THEN TF_NUMBER$=_CUR.TF_NUMBER$
16440 IF _CHG_VAR$(43,1)="Y" THEN DIAMETER$=_CUR.DIAMETER$
16450 IF _CHG_VAR$(44,1)="Y" THEN CENTER_TO_CENTER$=_CUR.CENTER_TO_CENTER$
16460 IF _CHG_VAR$(45,1)="Y" THEN BOOKS$=_CUR.BOOKS$
16470 IF _CHG_VAR$(46,1)="Y" THEN PADS$=_CUR.PADS$
16480 IF _CHG_VAR$(47,1)="Y" THEN NUM_OF_SETS_PER$=_CUR.NUM_OF_SETS_PER$
16490 IF _CHG_VAR$(48,1)="Y" THEN WRAP_AROUND$=_CUR.WRAP_AROUND$
16500 IF _CHG_VAR$(49,1)="Y" THEN TRIAD$=_CUR.TRIAD$
16510 IF _CHG_VAR$(50,1)="Y" THEN OPEN_END$=_CUR.OPEN_END$
16520 IF _CHG_VAR$(51,1)="Y" THEN PARTS_LEFT_IN_BOOK$=_CUR.PARTS_LEFT_IN_BOOK$
16530 IF _CHG_VAR$(52,1)="Y" THEN POLYWRAP$=_CUR.POLYWRAP$
16540 IF _CHG_VAR$(53,1)="Y" THEN PRINTER$=_CUR.PRINTER$
16550 IF _CHG_VAR$(54,1)="Y" THEN DECOLLATOR_TYPE$=_CUR.DECOLLATOR_TYPE$
16560 IF _CHG_VAR$(55,1)="Y" THEN BURSTER_TYPE$=_CUR.BURSTER_TYPE$
16570 IF _CHG_VAR$(56,1)="Y" THEN FMS_UNUSED_2$=_CUR.FMS_UNUSED_2$
16990 RETURN 
20000 SET_CHECK_BOX_FIELD_VALUES:
20005 RETURN 
20010 IF PLANT_TO_SET_COPY$=" " THEN PLANT_TO_SET_COPY$="N"
20015 IF CR_COPY$=" " THEN CR_COPY$="N"
20020 IF ARTWORK$=" " THEN ARTWORK$="N"
20025 IF PLANT_TO_SET_SCRNS$=" " THEN PLANT_TO_SET_SCRNS$="N"
20030 IF PLANT_TO_MAKE_ADJ$=" " THEN PLANT_TO_MAKE_ADJ$="N"
20035 IF RETURN_ART$=" " THEN RETURN_ART$="N"
20040 IF RETURN_NEGS$=" " THEN RETURN_NEGS$="N"
20045 IF RETURN_CR_COPY$=" " THEN RETURN_CR_COPY$="N"
20050 IF DESTROY_OLD_COPY$=" " THEN DESTROY_OLD_COPY$="N"
20055 IF PROOF_REQUIRED$=" " THEN PROOF_REQUIRED$="N"
20060 IF IMPRINT_REQUIRED$=" " THEN IMPRINT_REQUIRED$="N"
20065 IF CARBON_DUMMY$=" " THEN CARBON_DUMMY$="N"
20070 IF ARABIC$=" " THEN ARABIC$="N"
20075 IF PRESS$=" " THEN PRESS$="N"
20080 IF TF_COLLATE$=" " THEN TF_COLLATE$="N"
20085 IF GUARANTEED_NUM$=" " THEN GUARANTEED_NUM$="N"
20090 IF TF_LIST$=" " THEN TF_LIST$="N"
20095 IF JUMBO$=" " THEN JUMBO$="N"
20100 IF MICR$=" " THEN MICR$="N"
20105 IF TF_STATIC$=" " THEN TF_STATIC$="N"
20110 IF CONSECUTIVE$=" " THEN CONSECUTIVE$="N"
20115 IF OTHERS$=" " THEN OTHERS$="N"
20120 IF GLUE_LEFT$=" " THEN GLUE_LEFT$="N"
20125 IF GLUE_RIGHT$=" " THEN GLUE_RIGHT$="N"
20130 IF CRIMP_LEFT$=" " THEN CRIMP_LEFT$="N"
20135 IF CRIMP_RIGHT$=" " THEN CRIMP_RIGHT$="N"
20140 IF OTHERS_1$=" " THEN OTHERS_1$="N"
20145 IF BOOKS$=" " THEN BOOKS$="N"
20150 IF PADS$=" " THEN PADS$="N"
20155 IF WRAP_AROUND$=" " THEN WRAP_AROUND$="N"
20160 IF TRIAD$=" " THEN TRIAD$="N"
20165 IF OPEN_END$=" " THEN OPEN_END$="N"
20170 IF POLYWRAP$=" " THEN POLYWRAP$="N"
20190 SET_CHECK_BOX_FIELD_VALUES_END:RETURN 
20195 ! 
20200 SAMPLES_VAL:ENTER FIELD$,ERR_MSG$,VAR_TAG$,ERR=*NEXT
20210 SAMPLES_FMT:ENTER FIELD$,VAR_TAG$,ERR=*NEXT
20215 FIELD$=PAD(FIELD$,3)
20220 IF FIELD$=DIM(3) THEN GOTO SAMPLES_END
20225 FIELD$=STR(NUM(FIELD$,ERR=*NEXT):"000"); GOTO SAMPLES_END
20230 ERR_MSG$="Entry must be numeric."
20240 SAMPLES_END:EXIT 
20245 ! 
20250 NUM_OF_POS_VAL:ENTER FIELD$,ERR_MSG$,VAR_TAG$,ERR=*NEXT
20260 NUM_OF_POS_FMT:ENTER FIELD$,VAR_TAG$,ERR=*NEXT
20265 FIELD$=PAD(FIELD$,2)
20270 IF FIELD$=DIM(2) THEN GOTO NUM_OF_POS_END
20275 FIELD$=STR(NUM(FIELD$,ERR=*NEXT):"00"); GOTO NUM_OF_POS_END
20280 ERR_MSG$="Entry must be numeric."
20290 NUM_OF_POS_END:EXIT 
20295 ! 
20300 NUM_OF_SETS_PER_VAL:ENTER FIELD$,ERR_MSG$,VAR_TAG$,ERR=*NEXT
20310 NUM_OF_SETS_PER_FMT:ENTER FIELD$,VAR_TAG$,ERR=*NEXT
20315 FIELD$=PAD(FIELD$,4)
20320 IF FIELD$=DIM(4) THEN GOTO NUM_OF_SETS_PER_END
20325 FIELD$=STR(NUM(FIELD$,ERR=*NEXT):"0000"); GOTO NUM_OF_SETS_PER_END
20330 ERR_MSG$="Entry must be numeric."
20340 NUM_OF_SETS_PER_END:EXIT 
20345 ! 
20350 SUBPACK_QTY_PER_VAL:ENTER FIELD$,ERR_MSG$,VAR_TAG$,ERR=*NEXT
20360 SUBPACK_QTY_PER_FMT:ENTER FIELD$,VAR_TAG$,ERR=*NEXT
20365 FIELD$=PAD(FIELD$,5)
20370 IF FIELD$=DIM(5) THEN GOTO SUBPACK_QTY_PER_END
20375 FIELD$=STR(NUM(FIELD$,ERR=*NEXT):"00000"); GOTO SUBPACK_QTY_PER_END
20380 ERR_MSG$="Entry must be numeric."
20390 SUBPACK_QTY_PER_END:EXIT 
20395 ! 
20400 ARTWORK_ON_SELECT:
20410 IF NEW$="Y" THEN IF ARTWORK$="Y" THEN RETURN_ART$="Y"; REFRESH_FLG=1
20440 ARTWORK_ON_SELECT_END:RETURN 
20445 ! 
20450 NEGATIVES_ATTACHED_ON_SELECT:
20455 ! XX=POS(NEGATIVES_ATTACHED$=" YN123456789"); IF XX=0 THEN NEXT_ID=NEGATIVES_ATTACHED.CTL,NEGATIVES_ATTACHED$=""; RETURN 
20460 IF NEW$="Y" THEN IF NEGATIVES_ATTACHED$="Y" THEN RETURN_NEGS$="Y"; REFRESH_FLG=1
20490 NEGATIVES_ATTACHED_ON_SELECT_END:RETURN 
20495 ! 
20500 CARBON_DUMMY_FOCUS:
20510 IF D1$>"" THEN IF NUM_PLYS>=NUM(D1$) THEN MSGBOX "CARBON DUMMY RECOMMENDED - more than "+D1$+" plys!","INFO",""
20540 CARBON_DUMMY_FOCUS_END:RETURN 
20545 ! 
20550 COLOR_ON_SELECT:
20560 IF NEW$="Y" THEN IF STP(COLOR$,3)<>"" THEN ARABIC$="Y"; REFRESH_FLG=1
20590 COLOR_ON_SELECT_END:RETURN 
20595 ! 
20600 PRESS_ON_SELECT:
20610 IF PRESS$="Y" THEN TF_COLLATE$="N"; CALL "*wingrp;Disable",COLLATE.GRP$ ELSE CALL "*wingrp;Enable",COLLATE.GRP$
20620 REFRESH_FLG=1
20640 PRESS_ON_SELECT_END:RETURN 
20645 ! 
20650 COLLATE_ON_SELECT:
20660 IF TF_COLLATE$="Y" THEN PRESS$="N"; CALL "*wingrp;Disable",PRESS.GRP$ ELSE CALL "*wingrp;Enable",PRESS.GRP$
20670 REFRESH_FLG=1
20690 COLLATE_ON_SELECT_END:RETURN 
20695 ! 
20700 GUARANTEED_NUM_ON_SELECT:
20710 IF NEW$="Y" THEN IF GUARANTEED_NUM$="Y" THEN TF_LIST$="N"; CALL "*wingrp;Disable",LIST.GRP$ ELSE CALL "*wingrp;Enable",LIST.GRP$
20720 REFRESH_FLG=1
20740 GUARANTEED_NUM_ON_SELECT_END:RETURN 
20745 ! 
20750 MICR_ON_SELECT:
20760 IF NEW$="Y" THEN IF MICR$="Y" THEN TF_STATIC$="Y",CONSECUTIVE$="Y",REFRESH_FLG=1
20790 MICR_ON_SELECT_END:RETURN 
20795 ! 
20800 BOOKS_ON_SELECT:
20810 IF BOOKS$="Y" THEN PADS$="N"; CALL "*wingrp;Disable",PADS.GRP$ ELSE CALL "*wingrp;Enable",PADS.GRP$
20820 REFRESH_FLG=1
20840 BOOKS_ON_SELECT_END:RETURN 
20845 ! 
20850 PADS_ON_SELECT:
20860 IF PADS$="Y" THEN BOOKS$="N"; CALL "*wingrp;Disable",BOOKS.GRP$ ELSE CALL "*wingrp;Enable",BOOKS.GRP$
20870 REFRESH_FLG=1
20890 PADS_ON_SELECT_END:RETURN 
20895 ! 
20900 WRAP_AROUND_ON_SELECT:
20910 IF WRAP_AROUND$="Y" THEN TRIAD$="N",OPEN_END$="N"; CALL "*wingrp;Disable",TRIAD.GRP$; CALL "*wingrp;Disable",OPEN_END.GRP$ ELSE CALL "*wingrp;Enable",TRIAD.GRP$; CALL "*wingrp;Enable",OPEN_END.GRP$
20920 REFRESH_FLG=1
20930 WRAP_AROUND_ON_SELECT_END:RETURN 
20935 ! 
20940 TRIAD_ON_SELECT:
20945 IF TRIAD$="Y" THEN WRAP_AROUND$="N",OPEN_END$="N"; CALL "*wingrp;Disable",WRAP_AROUND.GRP$; CALL "*wingrp;Disable",OPEN_END.GRP$ ELSE CALL "*wingrp;Enable",WRAP_AROUND.GRP$; CALL "*wingrp;Enable",OPEN_END.GRP$
20950 REFRESH_FLG=1
20960 TRIAD_ON_SELECT_END:RETURN 
20965 ! 
20970 OPEN_END_ON_SELECT:
20975 IF OPEN_END$="Y" THEN WRAP_AROUND$="N",TRIAD$="N"; CALL "*wingrp;Disable",WRAP_AROUND.GRP$; CALL "*wingrp;Disable",TRIAD.GRP$ ELSE CALL "*wingrp;Enable",WRAP_AROUND.GRP$; CALL "*wingrp;Enable",TRIAD.GRP$
20980 REFRESH_FLG=1
20990 OPEN_END_ON_SELECT_END:RETURN 
20995 ! 
21000 NEW_RECORD_DEFAULTS:
21010 NEW$="Y"
21012 IF STP(RFQ_DIV$)="" AND %RFQ THEN RFQ_DIV$=ARG_1$(1,2) ! SSP206206 jdf 
21014 IF STP(RFQ_NUM$)="" AND %RFQ THEN RFQ_NUM$=ARG_1$(3,6) ! SSP206206 jdf
21015 IF STP(RFQ_LINE_NUM$)="" AND %RFQ THEN RFQ_LINE_NUM$=ARG_1$(9,3) ! SSP206206 jdf            
21016 IF %RFQ THEN CALL "ZZWLKU;parse_cust",CUSTOMER$,CUST_DIV$,CUST_CODE$ ! SSP206206 ! jdf
21020 SAMPLES$=STR(%OPS_PARM[0]:"000"),IMPRINT_REQUIRED$="Y"; IF POS(%C$="055044",3)<>0 THEN IMPRINT_REQUIRED$="N"
21030 GOSUB READ_ITEM_RECORD
21040 FIND (_FMP,KEY="T"+PROD_CODE$,DOM=*NEXT)PC$
21045 IF MID(PC$,20,1)="C" AND NUM_PLYS>1 THEN GLUE_LEFT$="N",GLUE_RIGHT$="N",CRIMP_LEFT$="Y",CRIMP_RIGHT$="Y"
21090 NEW_RECORD_DEFAULTS_END:RETURN 
21095 ! 
21100 CUSTOM_GROUPS:
21110 IF PRESS$="Y" THEN TF_COLLATE$="N"; CALL "*wingrp;Disable",COLLATE.GRP$
21115 IF TF_COLLATE$="Y" THEN PRESS$="N"; CALL "*wingrp;Disable",PRESS.GRP$
21120 IF BOOKS$="Y" THEN PADS$="N"; CALL "*wingrp;Disable",PADS.GRP$
21125 IF PADS$="Y" THEN BOOKS$="N"; CALL "*wingrp;Disable",BOOKS.GRP$
21130 IF WRAP_AROUND$="Y" THEN TRIAD$="N",OPEN_END$="N"; CALL "*wingrp;Disable",TRIAD.GRP$; CALL "*wingrp;Disable",OPEN_END.GRP$
21135 IF TRIAD$="Y" THEN WRAP_AROUND$="N",OPEN_END$="N"; CALL "*wingrp;Disable",WRAP_AROUND.GRP$; CALL "*wingrp;Disable",OPEN_END.GRP$
21140 IF OPEN_END$="Y" THEN WRAP_AROUND$="N",TRIAD$="N"; CALL "*wingrp;Disable",WRAP_AROUND.GRP$; CALL "*wingrp;Disable",TRIAD.GRP$
21190 CUSTOM_GROUPS_END:RETURN 
21195 ! 
21450 READ_ITEM_RECORD:
21455 FMS_PLYS$=PLYS$,PLYS$="" ! Save off plys field from FMS file, FM1 and IC0 also have plys field but it means something different.  Restore to FMS value when leaving this routine
21456 IF %SPEC THEN READ (_QS1,KEY=%SPEC$,ERR=*NEXT); IC0.ITEM_DESC$=QS1.ITEM_DESC$,REFRESH_FLG=1,NUM_PLYS=NUM(QS1.PLYS$),VEND_DIV$=QS1.VEND_DIV$,VEND_CODE$=QS1.VEND_CODE$,PLYS$=QS1.PLYS$; GOTO 21475
21460 READ (_FM1,KEY=CUST_DIV$+CUST_CODE$+ITEM_CODE$,DOM=*NEXT); GOTO 21470
21465 READ (_IC0,KEY=CUST_DIV$+CUST_CODE$+ITEM_CODE$,DOM=*NEXT)
21470 NUM_PLYS=NUM(PLYS$)
21475 D1$=""; FIND (_FMP,KEY="V"+VEND_DIV$+VEND_CODE$,DOM=*NEXT)D1$; D1$=D1$(35,1)
21485 IF %SPEC THEN GOTO 21490
21486 PLYS$=FMS_PLYS$ ! Restore field to FMS value
21487 GOSUB IC0
21490 READ_ITEM_RECORD_END:RETURN 
21495 ! 
22000 IC0:
22005 IF STP(CUSTOMER$)="" THEN CUSTOMER$="          "
22008 CALL "ZZWLKU;parse_cust",CUSTOMER$,CUST_DIV$,CUST_CODE$; CUSTOMER$=CUST_DIV$+CUST_CODE$
22010 READ (_IC0,KEY=CUSTOMER$+ITEM_CODE$,REC=IC0$,DOM=NO_REC_IC0)
22030 %ITEM_DESC$=IC0.ITEM_DESC$,REFRESH_FLG=1
22040 RETURN 
22050 NO_REC_IC0:
22060 IC0.ITEM_DESC$=""
22100 FM1:
22110 IF STP(CUSTOMER$)="" THEN CUSTOMER$="          "
22120 CALL "ZZWLKU;parse_cust",CUSTOMER$,CUST_DIV$,CUST_CODE$; CUSTOMER$=CUST_DIV$+CUST_CODE$
22130 READ (_FM1,KEY=CUSTOMER$+ITEM_CODE$,REC=FM1$,DOM=NO_REC_FM1)
22140 %ITEM_DESC$=FM1.ITEM_DESC$,REFRESH_FLG=1,IC0.ITEM_DESC$=FM1.ITEM_DESC$
22150 RETURN 
22160 NO_REC_FM1:
22170 FM1.ITEM_DESC$=""
22180 RETURN 
22500 SEL_SUBPACK_UM: REFRESH_FLG=1,SUBPACK_UM$=PAD(SUBPACK_UM$,4," ")
22510 READ (_ZZPARM,KEY="U/M"+SUBPACK_UM$,DOM=NO_SUBPACK_UM)UM$,P0,P1
22520 IF UM$(20,1)="Y" THEN SUBPACK_QTY_PER.CTL'LOCK=1 ELSE SUBPACK_QTY_PER.CTL'LOCK=0
22530 IF P0<>0 THEN SUBPACK_QTY_PER$=STR(P0) ELSE SUBPACK_QTY_PER$=STR(P1)
22540 RETURN 
22550 GET_QSS:! SSP206206 jdf
22552 NUM_OF_POS$=NUMBER_OF_POS$,OTHERS_1$=CRIMP_OTHERS$ ! SSP206206 jdf
22554 RETURN ! SSP206206 jdf
22560 GET_FMS:! SSP206206 jdf
22562 NUMBER_OF_POS$=NUM_OF_POS$,CRIMP_OTHERS$=OTHERS_1$ ! SSP206206 jdf
22564 RETURN ! SSP206206 jdf
22600 NO_SUBPACK_UM:
56000 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56002 REM "206206-RFQ. When setting up a new form and you use the copy feature
56004 REM "258265-In GUI - can you make the composition specs be able to blank
