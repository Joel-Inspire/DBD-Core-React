0010 ! FMGIAK - File Maintenance Program for FS6_OrderHis (="FS6"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Feb. 4, 2002 18:27
0030 ! ************************************************************************
0035 REM "5.7 - 06/17/21 - 12.442048 - jvv - SSP# 307357
0037 REM "307357-Update FS6 to allow for more line numbers                   
0040 REM "Copyright 2021 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="FS6"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=3
0430 DIM _KEYS$[1:3]; _KEYS$[1]="CUSTOMER$",_KEYS$[2]="ITEM_CODE$",_KEYS$[3]="HIST_TYPE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0522 GOSUB OPEN_FILES
0523 GOSUB GET_PARAMETERS
0530 GOSUB CLEAR_REC
0531 GOSUB LOAD_SYSTEM_PARAMETERS
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0941 IF _TRACE<>0 THEN CLOSE (_TRACE); _TRACE=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2045 LBIDX++
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2221 LBIDX--
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3521 GOSUB CUSTOM_INITS
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 ! 
3811 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUSTOMER.CTL,_FIRST_FIELD=LIST_BOX_ORDERS.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 SELL_QTY$=STR(SELL_QTY)
10030 UNIT_PRICE$=STR(UNIT_PRICE)
10040 QTY_PER$=STR(QTY_PER)
10050 COMBO_QTY$=STR(COMBO_QTY)
10060 UNIT_COST$=STR(UNIT_COST)
10070 QTY_INV_TO_DATE$=STR(QTY_INV_TO_DATE)
10080 PRIC_EXT_INV_TO_DATE$=STR(PRIC_EXT_INV_TO_DATE)
10090 COST_EXT_INV_TO_DATE$=STR(COST_EXT_INV_TO_DATE)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="SELL_QTY",_X=SELL_QTY.CTL,SELL_QTY=NUM(SELL_QTY$,ERR=NON_NUMERIC)
11030 _X$="UNIT_PRICE",_X=UNIT_PRICE.CTL,UNIT_PRICE=NUM(UNIT_PRICE$,ERR=NON_NUMERIC)
11040 _X$="QTY_PER",_X=QTY_PER.CTL,QTY_PER=NUM(QTY_PER$,ERR=NON_NUMERIC)
11050 _X$="COMBO_QTY",_X=COMBO_QTY.CTL,COMBO_QTY=NUM(COMBO_QTY$,ERR=NON_NUMERIC)
11060 _X$="UNIT_COST",_X=UNIT_COST.CTL,UNIT_COST=NUM(UNIT_COST$,ERR=NON_NUMERIC)
11070 _X$="QTY_INV_TO_DATE",_X=QTY_INV_TO_DATE.CTL,QTY_INV_TO_DATE=NUM(QTY_INV_TO_DATE$,ERR=NON_NUMERIC)
11080 _X$="PRIC_EXT_INV_TO_DATE",_X=PRIC_EXT_INV_TO_DATE.CTL,PRIC_EXT_INV_TO_DATE=NUM(PRIC_EXT_INV_TO_DATE$,ERR=NON_NUMERIC)
11090 _X$="COST_EXT_INV_TO_DATE",_X=COST_EXT_INV_TO_DATE.CTL,COST_EXT_INV_TO_DATE=NUM(COST_EXT_INV_TO_DATE$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN CUST_DIV$=""
13030 IF _CLR_FLG$="R" THEN CUST_CODE$=""
13040 IF _CLR_FLG$="R" THEN HIST_TYPE$=""
13050 IF _CLR_FLG$="R" THEN ITEM_CODE$=""
13060 IF _CLR_FLG$="R" THEN ORDER_DIV$=""
13070 IF _CLR_FLG$="R" THEN ORDER_NUM$=""
13080 IF _CLR_FLG$="R" THEN SEQ_NUM$=""
13090 PROD_CODE$=""
13100 ORDER_DATE$=""
13110 LAST_INV_DIV$=""
13120 LAST_INV_NUM$=""
13130 INV_DATE$=""
13140 CUST_PO$=""
13150 JOB_NUM$=""
13160 EST_REORDER$=""
13170 VEND_DIV$=""
13180 VEND_CODE$=""
13190 PLANT_CODE$=""
13200 SELL_UM$=""
13210 LAST_THREE_BCKT_FLAG$=""
13220 SHIP_FROM_WHSE$=""
13230 ORDER_TYPE$=""
13240 FS6_UNUSED_1$=""
13250 SELL_QTY=0
13260 UNIT_PRICE=0
13270 QTY_PER=0
13280 COMBO_QTY=0
13290 UNIT_COST=0
13300 QTY_INV_TO_DATE=0
13310 PRIC_EXT_INV_TO_DATE=0
13320 COST_EXT_INV_TO_DATE=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=1 THEN CALL "*wingrp;Enable",KEY1.GRP$; NEXT_ID=CUSTOMER.CTL; CALL "*wingrp;Disable",KEY2.GRP$; CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=ITEM_CODE.CTL
14060 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=HIST_TYPE.CTL
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(31,"N")
15030 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15040 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15050 IF _ORIG.HIST_TYPE$=_CUR.HIST_TYPE$ OR HIST_TYPE$=_CUR.HIST_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.HIST_TYPE$=HIST_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("HIST_TYPE")+" = "+_CUR.HIST_TYPE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("HIST_TYPE")+" = "+_CUR.HIST_TYPE$
15060 IF _ORIG.ITEM_CODE$=_CUR.ITEM_CODE$ OR ITEM_CODE$=_CUR.ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CODE$=ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$
15070 IF _ORIG.ORDER_DIV$=_CUR.ORDER_DIV$ OR ORDER_DIV$=_CUR.ORDER_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_DIV$=ORDER_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_DIV")+" = "+_CUR.ORDER_DIV$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_DIV")+" = "+_CUR.ORDER_DIV$
15080 IF _ORIG.ORDER_NUM$=_CUR.ORDER_NUM$ OR ORDER_NUM$=_CUR.ORDER_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_NUM$=ORDER_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_NUM")+" = "+_CUR.ORDER_NUM$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_NUM")+" = "+_CUR.ORDER_NUM$
15090 IF _ORIG.SEQ_NUM$=_CUR.SEQ_NUM$ OR SEQ_NUM$=_CUR.SEQ_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.SEQ_NUM$=SEQ_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("SEQ_NUM")+" = "+_CUR.SEQ_NUM$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEQ_NUM")+" = "+_CUR.SEQ_NUM$
15100 IF _ORIG.PROD_CODE$=_CUR.PROD_CODE$ OR PROD_CODE$=_CUR.PROD_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PROD_CODE$=PROD_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PROD_CODE")+" = "+_CUR.PROD_CODE$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PROD_CODE")+" = "+_CUR.PROD_CODE$
15110 IF _ORIG.ORDER_DATE$=_CUR.ORDER_DATE$ OR ORDER_DATE$=_CUR.ORDER_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_DATE$=ORDER_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_DATE")+" = "+_CUR.ORDER_DATE$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_DATE")+" = "+_CUR.ORDER_DATE$
15120 IF _ORIG.LAST_INV_DIV$=_CUR.LAST_INV_DIV$ OR LAST_INV_DIV$=_CUR.LAST_INV_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.LAST_INV_DIV$=LAST_INV_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("LST_IN_DIV")+" = "+_CUR.LAST_INV_DIV$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LST_IN_DIV")+" = "+_CUR.LAST_INV_DIV$
15130 IF _ORIG.LAST_INV_NUM$=_CUR.LAST_INV_NUM$ OR LAST_INV_NUM$=_CUR.LAST_INV_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.LAST_INV_NUM$=LAST_INV_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("LAST_I_N")+" = "+_CUR.LAST_INV_NUM$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_I_N")+" = "+_CUR.LAST_INV_NUM$
15140 IF _ORIG.INV_DATE$=_CUR.INV_DATE$ OR INV_DATE$=_CUR.INV_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.INV_DATE$=INV_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_DATE")+" = "+_CUR.INV_DATE$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_DATE")+" = "+_CUR.INV_DATE$
15150 IF _ORIG.CUST_PO$=_CUR.CUST_PO$ OR CUST_PO$=_CUR.CUST_PO$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_PO$=CUST_PO$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_PO")+" = "+_CUR.CUST_PO$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_PO")+" = "+_CUR.CUST_PO$
15160 IF _ORIG.JOB_NUM$=_CUR.JOB_NUM$ OR JOB_NUM$=_CUR.JOB_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.JOB_NUM$=JOB_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("JOB_NUM")+" = "+_CUR.JOB_NUM$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("JOB_NUM")+" = "+_CUR.JOB_NUM$
15170 IF _ORIG.EST_REORDER$=_CUR.EST_REORDER$ OR EST_REORDER$=_CUR.EST_REORDER$ THEN GOTO *NEXT ELSE IF _ORIG.EST_REORDER$=EST_REORDER$ THEN _CHG2$=_CHG2$+SEP+MSG("EST_R")+" = "+_CUR.EST_REORDER$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EST_R")+" = "+_CUR.EST_REORDER$
15180 IF _ORIG.VEND_DIV$=_CUR.VEND_DIV$ OR VEND_DIV$=_CUR.VEND_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_DIV$=VEND_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$
15190 IF _ORIG.VEND_CODE$=_CUR.VEND_CODE$ OR VEND_CODE$=_CUR.VEND_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_CODE$=VEND_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$
15200 IF _ORIG.PLANT_CODE$=_CUR.PLANT_CODE$ OR PLANT_CODE$=_CUR.PLANT_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PLANT_CODE$=PLANT_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PLANT_CODE")+" = "+_CUR.PLANT_CODE$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLANT_CODE")+" = "+_CUR.PLANT_CODE$
15210 IF _ORIG.SELL_UM$=_CUR.SELL_UM$ OR SELL_UM$=_CUR.SELL_UM$ THEN GOTO *NEXT ELSE IF _ORIG.SELL_UM$=SELL_UM$ THEN _CHG2$=_CHG2$+SEP+MSG("SELL_UM")+" = "+_CUR.SELL_UM$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SELL_UM")+" = "+_CUR.SELL_UM$
15220 IF _ORIG.LAST_THREE_BCKT_FLAG$=_CUR.LAST_THREE_BCKT_FLAG$ OR LAST_THREE_BCKT_FLAG$=_CUR.LAST_THREE_BCKT_FLAG$ THEN GOTO *NEXT ELSE IF _ORIG.LAST_THREE_BCKT_FLAG$=LAST_THREE_BCKT_FLAG$ THEN _CHG2$=_CHG2$+SEP+MSG("LAST_T_B_F")+" = "+_CUR.LAST_THREE_BCKT_FLAG$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_T_B_F")+" = "+_CUR.LAST_THREE_BCKT_FLAG$
15230 IF _ORIG.SHIP_FROM_WHSE$=_CUR.SHIP_FROM_WHSE$ OR SHIP_FROM_WHSE$=_CUR.SHIP_FROM_WHSE$ THEN GOTO *NEXT ELSE IF _ORIG.SHIP_FROM_WHSE$=SHIP_FROM_WHSE$ THEN _CHG2$=_CHG2$+SEP+MSG("SHIP_F_W")+" = "+_CUR.SHIP_FROM_WHSE$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SHIP_F_W")+" = "+_CUR.SHIP_FROM_WHSE$
15240 IF _ORIG.ORDER_TYPE$=_CUR.ORDER_TYPE$ OR ORDER_TYPE$=_CUR.ORDER_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_TYPE$=ORDER_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_TYPE")+" = "+_CUR.ORDER_TYPE$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_TYPE")+" = "+_CUR.ORDER_TYPE$
15250 IF _ORIG.FS6_UNUSED_1$=_CUR.FS6_UNUSED_1$ OR FS6_UNUSED_1$=_CUR.FS6_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.FS6_UNUSED_1$=FS6_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.FS6_UNUSED_1$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.FS6_UNUSED_1$
15260 IF _ORIG.SELL_QTY=_CUR.SELL_QTY OR SELL_QTY=_CUR.SELL_QTY THEN GOTO *NEXT ELSE IF _ORIG.SELL_QTY=SELL_QTY THEN _CHG2$=_CHG2$+SEP+MSG("SELL_QTY")+" = "+STR(_CUR.SELL_QTY),_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SELL_QTY")+" = "+STR(_CUR.SELL_QTY)
15270 IF _ORIG.UNIT_PRICE=_CUR.UNIT_PRICE OR UNIT_PRICE=_CUR.UNIT_PRICE THEN GOTO *NEXT ELSE IF _ORIG.UNIT_PRICE=UNIT_PRICE THEN _CHG2$=_CHG2$+SEP+MSG("UNIT_PRICE")+" = "+STR(_CUR.UNIT_PRICE),_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNIT_PRICE")+" = "+STR(_CUR.UNIT_PRICE)
15280 IF _ORIG.QTY_PER=_CUR.QTY_PER OR QTY_PER=_CUR.QTY_PER THEN GOTO *NEXT ELSE IF _ORIG.QTY_PER=QTY_PER THEN _CHG2$=_CHG2$+SEP+MSG("QTY_PER")+" = "+STR(_CUR.QTY_PER),_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_PER")+" = "+STR(_CUR.QTY_PER)
15290 IF _ORIG.COMBO_QTY=_CUR.COMBO_QTY OR COMBO_QTY=_CUR.COMBO_QTY THEN GOTO *NEXT ELSE IF _ORIG.COMBO_QTY=COMBO_QTY THEN _CHG2$=_CHG2$+SEP+MSG("COMBO_QTY")+" = "+STR(_CUR.COMBO_QTY),_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMBO_QTY")+" = "+STR(_CUR.COMBO_QTY)
15300 IF _ORIG.UNIT_COST=_CUR.UNIT_COST OR UNIT_COST=_CUR.UNIT_COST THEN GOTO *NEXT ELSE IF _ORIG.UNIT_COST=UNIT_COST THEN _CHG2$=_CHG2$+SEP+MSG("UNIT_COST")+" = "+STR(_CUR.UNIT_COST),_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNIT_COST")+" = "+STR(_CUR.UNIT_COST)
15310 IF _ORIG.QTY_INV_TO_DATE=_CUR.QTY_INV_TO_DATE OR QTY_INV_TO_DATE=_CUR.QTY_INV_TO_DATE THEN GOTO *NEXT ELSE IF _ORIG.QTY_INV_TO_DATE=QTY_INV_TO_DATE THEN _CHG2$=_CHG2$+SEP+MSG("QTY_I_T_D")+" = "+STR(_CUR.QTY_INV_TO_DATE),_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_I_T_D")+" = "+STR(_CUR.QTY_INV_TO_DATE)
15320 IF _ORIG.PRIC_EXT_INV_TO_DATE=_CUR.PRIC_EXT_INV_TO_DATE OR PRIC_EXT_INV_TO_DATE=_CUR.PRIC_EXT_INV_TO_DATE THEN GOTO *NEXT ELSE IF _ORIG.PRIC_EXT_INV_TO_DATE=PRIC_EXT_INV_TO_DATE THEN _CHG2$=_CHG2$+SEP+MSG("P_E_I_T_D")+" = "+STR(_CUR.PRIC_EXT_INV_TO_DATE),_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("P_E_I_T_D")+" = "+STR(_CUR.PRIC_EXT_INV_TO_DATE)
15330 IF _ORIG.COST_EXT_INV_TO_DATE=_CUR.COST_EXT_INV_TO_DATE OR COST_EXT_INV_TO_DATE=_CUR.COST_EXT_INV_TO_DATE THEN GOTO *NEXT ELSE IF _ORIG.COST_EXT_INV_TO_DATE=COST_EXT_INV_TO_DATE THEN _CHG2$=_CHG2$+SEP+MSG("C_E_I_T_D")+" = "+STR(_CUR.COST_EXT_INV_TO_DATE),_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("C_E_I_T_D")+" = "+STR(_CUR.COST_EXT_INV_TO_DATE)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16030 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN HIST_TYPE$=_CUR.HIST_TYPE$
16050 IF _CHG_VAR$(4,1)="Y" THEN ITEM_CODE$=_CUR.ITEM_CODE$
16060 IF _CHG_VAR$(5,1)="Y" THEN ORDER_DIV$=_CUR.ORDER_DIV$
16070 IF _CHG_VAR$(6,1)="Y" THEN ORDER_NUM$=_CUR.ORDER_NUM$
16080 IF _CHG_VAR$(7,1)="Y" THEN SEQ_NUM$=_CUR.SEQ_NUM$
16090 IF _CHG_VAR$(8,1)="Y" THEN PROD_CODE$=_CUR.PROD_CODE$
16100 IF _CHG_VAR$(9,1)="Y" THEN ORDER_DATE$=_CUR.ORDER_DATE$
16110 IF _CHG_VAR$(10,1)="Y" THEN LAST_INV_DIV$=_CUR.LAST_INV_DIV$
16120 IF _CHG_VAR$(11,1)="Y" THEN LAST_INV_NUM$=_CUR.LAST_INV_NUM$
16130 IF _CHG_VAR$(12,1)="Y" THEN INV_DATE$=_CUR.INV_DATE$
16140 IF _CHG_VAR$(13,1)="Y" THEN CUST_PO$=_CUR.CUST_PO$
16150 IF _CHG_VAR$(14,1)="Y" THEN JOB_NUM$=_CUR.JOB_NUM$
16160 IF _CHG_VAR$(15,1)="Y" THEN EST_REORDER$=_CUR.EST_REORDER$
16170 IF _CHG_VAR$(16,1)="Y" THEN VEND_DIV$=_CUR.VEND_DIV$
16180 IF _CHG_VAR$(17,1)="Y" THEN VEND_CODE$=_CUR.VEND_CODE$
16190 IF _CHG_VAR$(18,1)="Y" THEN PLANT_CODE$=_CUR.PLANT_CODE$
16200 IF _CHG_VAR$(19,1)="Y" THEN SELL_UM$=_CUR.SELL_UM$
16210 IF _CHG_VAR$(20,1)="Y" THEN LAST_THREE_BCKT_FLAG$=_CUR.LAST_THREE_BCKT_FLAG$
16220 IF _CHG_VAR$(21,1)="Y" THEN SHIP_FROM_WHSE$=_CUR.SHIP_FROM_WHSE$
16230 IF _CHG_VAR$(22,1)="Y" THEN ORDER_TYPE$=_CUR.ORDER_TYPE$
16240 IF _CHG_VAR$(23,1)="Y" THEN FS6_UNUSED_1$=_CUR.FS6_UNUSED_1$
16250 IF _CHG_VAR$(24,1)="Y" THEN SELL_QTY=_CUR.SELL_QTY
16260 IF _CHG_VAR$(25,1)="Y" THEN UNIT_PRICE=_CUR.UNIT_PRICE
16270 IF _CHG_VAR$(26,1)="Y" THEN QTY_PER=_CUR.QTY_PER
16280 IF _CHG_VAR$(27,1)="Y" THEN COMBO_QTY=_CUR.COMBO_QTY
16290 IF _CHG_VAR$(28,1)="Y" THEN UNIT_COST=_CUR.UNIT_COST
16300 IF _CHG_VAR$(29,1)="Y" THEN QTY_INV_TO_DATE=_CUR.QTY_INV_TO_DATE
16310 IF _CHG_VAR$(30,1)="Y" THEN PRIC_EXT_INV_TO_DATE=_CUR.PRIC_EXT_INV_TO_DATE
16320 IF _CHG_VAR$(31,1)="Y" THEN COST_EXT_INV_TO_DATE=_CUR.COST_EXT_INV_TO_DATE
16990 RETURN 
17000 ! ^17000
17100 ! ^ 100 <plh>
17110 OPEN_FILES:
17120 ! !500,5 - Open files
17130 _ZZPARM=HFN; OPEN (_ZZPARM)"ZZPARM"
17140 _AR1=HFN; OPEN (_AR1,IOL=*)"AR1"+%C$
17150 _FM1=HFN; OPEN (_FM1,IOL=*)"FM1"+%C$
17160 _FS1=HFN; OPEN (_FS1,IOL=*)"FS1"+%C$
17170 _ICO=HFN; OPEN (_ICO,IOL=*)"ICO"+%C$
17180 RETURN 
17190 ! 
17200 ! ^ 100 <plh>
17210 CLOSE_FILES:
17220 IF _ZZPARM<>0 THEN CLOSE (_ZZPARM,ERR=*PROCEED); _ZZPARM=0
17230 IF _AR1<>0 THEN CLOSE (_AR1,ERR=*PROCEED); _AR1=0
17240 IF _FM1<>0 THEN CLOSE (_FM1,ERR=*PROCEED); _FM1=0
17250 IF _FS1<>0 THEN CLOSE (_FS1,ERR=*PROCEED); _FS1=0
17260 IF _ICO<>0 THEN CLOSE (_ICO,ERR=*PROCEED); _ICO=0
17270 RETURN 
17280 ! 
20000 ! 20000  Custom Control procedures <plh>
20010 CUSTOMER_ON_SELECT:
20020 CALL "ZZWLKU;parse_cust",CUSTOMER$,CUST_DIV$,CUST_CODE$
20030 GOSUB FIND_REC; GOSUB UPDATE_BILL_TO_NAME
20040 %ITEM_CODE$=ITEM_CODE$,%LOAD_KEY$=CUST_DIV$+CUST_CODE$+HIST_TYPE$+ITEM_CODE$,%CUSTOMER$=%CUST_DIV$+%CUST_CODE$
20050 NEXT_ID=ITEM_CODE.CTL
20060 REFRESH_FLG=1
20070 RETURN 
20080 ! 
20090 ! !^ 100 <plh> Key Mouse Click Code to retore multikey processing.
20100 CUSTOMER_FOCUS:
20110 CUSTOMER$=%CUST_DIV$+%CUST_CODE$
20120 ID'SELECTOFFSET=0; ID'SELECTLENGTH=LEN(ID'VALUE$)
20130 _KCNT=1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS
20140 NEXT_ID=ID
20150 REFRESH_FLG=1
20160 RETURN 
20170 ! 
20200 ! ^ 100 <plh>
20210 ITEM_CODE_ON_SELECT:
20220 _KEY$=CUST_DIV$+CUST_CODE$+HIST_TYPE$+ITEM_CODE$
20230 %ITEM_CODE$=ITEM_CODE$,%LOAD_KEY$=CUST_DIV$+CUST_CODE$+ITEM_CODE$
20240 GOSUB FIND_REC
20250 NEXT_ID=HIST_TYPE.CTL,REFRESH_FLG=1
20260 RETURN 
20270 ! 
20280 ! !^ 100 <plh>
20290 ITEM_FOCUS:
20300 ID'SELECTOFFSET=0; ID'SELECTLENGTH=LEN(ID'VALUE$)
20310 _KCNT=2; _ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS
20320 RETURN 
20330 ! 
20500 ! ^ 100 <plh>
20510 HIST_TYPE_PRESSED:
20520 _KEY$=CUST_DIV$+CUST_CODE$+HIST_TYPE$+ITEM_CODE$+DIM(9," ")
20530 GOSUB FIND_REC; GOSUB PROCESS_READ; GOSUB DISP_REC
20570 NEXT_ID=LIST_BOX_ORDERS.CTL
20580 REFRESH_FLG=1
20590 RETURN 
20600 ! 
20610 LISTBOX_ON_SELECT:
25000 ! ^25000
25010 CUSTOM_INITS:
25020 CUSTOMER$=CUST_DIV$+CUST_CODE$
25030 %CUST_DIV$=CUST_DIV$,%CUST_CODE$=CUST_CODE$
25040 GOSUB UPDATE_BILL_TO_NAME
25050 %ITEM_CODE$=ITEM_CODE$,%CUSTOMER$=CUST_DIV$+CUST_CODE$
25060 ! 
25070 IF %LOAD_KEY$<>MID(_KEY$,1,21) THEN {
25080 %LOAD_KEY$=MID(_KEY$,1,21)
25090 GOSUB UPDATE_DESCRIPTIVE_FIELDS
25100 GOSUB LISTBOX_LOAD
25110 LBIDX=1
25120  }
25130 IF LIST_BOX_ORDERS.CTL THEN {
25150 GOSUB HILIGHTROW
25160  }
25170 RETURN 
25180 ! 
25190 ! !^ 100 <plh>
25200 CLEAR_CUSTOM:
25210 IF _CLR_FLG$="R" THEN {
25220 CUSTOMER$=""
25230 %ITEM_CODE$=""
25240 %LOAD_KEY$=""
25250 %CUST_DIV$=""
25260 %CUST_CODE$=""
25270 %CUSTOMER$=""
25280 RETURN 
25290 ! 
25300 ! ^ 100 <plh>
25310 UPDATE_BILL_TO_NAME:
25320 BILL_TO_CUST_NAME$=""
25330 BILL_TO_CUST_CODE$=""
25340 READ DATA FROM "",REC=BILLTO$ TO IOL=IOL(_AR1)
25350 READ (_AR1,KEY=CUST_DIV$+CUST_CODE$,REC=BILLTO$,DOM=*NEXT)
25360 IF AR_PARM.ALT_BILL_TO_CST_FLG$="Y" THEN {
25370 BILL_TO_CUST_NAME$=BILLTO.CUST_NAME$
25380 BILL_TO_CUST_CODE$=BILLTO.CUST_DIV$+BILLTO.CUST_CODE$
25390  } ELSE {
25400 BILL_TO_CUST_NAME$=""
25410 BILL_TO_CUST_CODE$=""
25420  }
25430 REFRESH_FLG=1
25440 RETURN 
25450 ! 
25460 LISTBOX_LOAD:! uses legacy code updated with iol for maintenance
25470 LBIDX=0
25480 M0$="##,###,###-",M1$="###,###.00#",M2$="##,##0"
25490 ! CLEAR
25500 LBO=LIST_BOX_ORDERS.CTL
25510 ! LIST_BOX HIDE LBO
25520 LIST_BOX LOAD LBO,""
25530 LB_FM_STR$="["+MSG("FMGODM_8")+"]N3 ["+MSG("ORDER_DATE")+"]C10 ["
25540 LB_FM_STR$+=MSG("QTY_I_S_UM")+"]N12 [Cmb]r3 ["+MSG("UNIT_PUM")+"]L22 ["
25550 LB_FM_STR$+=MSG("UNIT_COST")+"]N12 ["+MSG("ORDER_NUM")+"]l9 ["+MSG("OR")+"]r3 [Mths]N5"
25560 LBO'FMT$=LB_FM_STR$
25570 ! 
25580 REM "Read records"
25590 _LBLKEY$=CUST_DIV$+CUST_CODE$+ITEM_CODE$
25600 ! 
25610 ! call order preread, orders returned in 22 byte chunks, presorted, descending.
25620 CALL "FM2UZD",X3$,X4$,_LBLKEY$,O$,O{ALL},O1$,O2$,O0,O1,O2,"",HIST_TYPE$,""
25630 ! 
25640 WHILE O$<>""
25650 ! "GET DATA FOR NEXT ORDER
25660 NEXT_DATE$="",K1$="",COMBO_FLG$=""
25670 IF O$="" THEN GOTO *CONTINUE ELSE Q=LEN(O$),K1$=O$(Q-22),O$=O$(1,Q-23)
25680 READ (_FIL_NO,KEY=CUST_DIV$+CUST_CODE$+HIST_TYPE$+ITEM_CODE$+MID(K1$,1,8),REC=FS6ORD$,DOM=*NEXT); GOTO 25720
25690 K1$=KEY(_FIL_NO,END=25770); READ (_FIL_NO,REC=FS6ORD$)
25700 ! 
25710 ! Read lines on order
25720 READ (_FIL_NO,REC=FS6LNE$,END=25770)
25730 ORD_KEY$=FS6ORD.CUST_DIV$+FS6ORD.CUST_CODE$+FS6ORD.HIST_TYPE$+FS6ORD.ITEM_CODE$+FS6ORD.ORDER_DIV$+FS6ORD.ORDER_NUM$
25740 LNE_KEY$=FS6LNE.CUST_DIV$+FS6LNE.CUST_CODE$+FS6LNE.HIST_TYPE$+FS6LNE.ITEM_CODE$+FS6LNE.ORDER_DIV$+FS6LNE.ORDER_NUM$
25750 IF ORD_KEY$=LNE_KEY$ THEN FS6ORD.SELL_QTY+=FS6LNE.SELL_QTY,FS6ORD.QTY_INV_TO_DATE+=FS6LNE.QTY_INV_TO_DATE,FS6ORD.PRIC_EXT_INV_TO_DATE+=FS6LNE.PRIC_EXT_INV_TO_DATE,FS6ORD.COST_EXT_INV_TO_DATE+=FS6LNE.COST_EXT_INV_TO_DATE; GOTO 25720
25760 Q=LEN(O$)-22; IF Q>0 THEN NEXT_DATE$=O$(Q+8,6)
25770 Q=LEN(O$)-22; IF Q>0 THEN NEXT_DATE$=O$(Q+8,6)
25780 ! 
25790 ! Format Order No.
25800 ORDER_NO$=STR(FS6ORD.ORDER_DIV$:"00")+"-"+STR(FS6ORD.ORDER_NUM$:"000000")
25810 IF FS6ORD.COMBO_QTY<>0 THEN COMBO_FLG$="*"
25820 ! 
25830 ! calculate proper divisor for unit price and unit cost
25840 IF FS6ORD.SELL_UM$<>MID(UMKEY$,4,4) THEN {
25850 READ DATA FROM "",REC=UM$ TO IOL=ZZPARM_UM_FETCHPARMS
25860 FIND (_ZZPARM,KEY="U/M"+FS6ORD.SELL_UM$,REC=UM$,DOM=*NEXT)IOL=ZZPARM_UM_FETCHPARMS
25870  }
25880 IF UM.FIXED_ITEM_CNT$="Y" THEN M0=UM.UNIT_ITEM_CNT ELSE M0=QTY_PER
25890 IF M0=0 THEN M0=1
25900 ! 
25910 ELAPSED_MOS=0; IF NEXT_DATE$>"" THEN CALL "ZZDATE","","",NEXT_DATE$,FS6ORD.ORDER_DATE$,ELAPSED_MOS,1,0,0,0,0,0,"","",""; ELAPSED_MOS=INT(ABS(ELAPSED_MOS)/30)
25920 FIND (_FS1,KEY=FS6ORD.ORDER_DIV$+FS6ORD.ORDER_NUM$,REC=FS1$,DOM=*NEXT); Q0$=" O"; GOTO 25935
25930 Q0$="  "
25940 ! 
25950 LBO_REC$+=STR(++LBIDX:"#0")+SEP
25960 LBO_REC$+=FND$(FS6ORD.ORDER_DATE$)+SEP
25970 LBO_REC$+=STR(FS6ORD.SELL_QTY/M0:M0$)+SEP
25980 LBO_REC$+=COMBO_FLG$+SEP
25990 LBO_REC$+=STR(FS6ORD.UNIT_PRICE:M1$)+" "+FNS$(FS6ORD.SELL_UM$)+"/"+FNR$(STR(FS6ORD.QTY_PER:M2$))+SEP
26000 LBO_REC$+=STR(FS6ORD.UNIT_COST:M1$)+SEP
26010 LBO_REC$+=ORDER_NO$+SEP
26020 LBO_REC$+=Q0$+SEP
26030 LBO_REC$+=STR(ELAPSED_MOS:"##")+SEP+$0A$
26040 WEND 
26050 ! restore file position
26060 READ (_FIL_NO,ERR=*NEXT,KEY=_KEY$); GOSUB FIND_REC; GOSUB PROCESS_READ; CHANGE_FLG=0
26070 LIST_BOX LOAD LBO,LBO_REC$
26080 LBO_REC$=""
26090 REFRESH_FLG=1
26100 RETURN 
26110 ! 
26120 GET_PARAMETERS:
26130 READ (_ZZPARM,KEY=%C$+"A/R",REC=AR_PARM$,DOM=*NEXT)IOL=ZZPARM_AR_FETCHPARMS
26140 READ (_ZZPARM,KEY=%C$+"F/M",REC=FM_PARM$,DOM=*NEXT)IOL=ZZPARM_FM_FETCHPARMS
26150 RETURN 
26160 ! 
26170 UPDATE_DESCRIPTIVE_FIELDS:
26180 SWITCH HIST_TYPE$
26190 CASE "D"
26200 CASE "F"
26210 DIM _DKEY$(10)
26220 READ DATA FROM "" TO ICO$,IOL=ICO_FETCHDATA
26230 FIND (_ICO,KEY=_DKEY$+ITEM_CODE$,DOM=*NEXT)IOL=ICO_FETCHDATA
26240 BREAK
26250 CASE "B" ! Custom item case
26260 DEFAULT:
26270 _DKEY$=CUST_DIV$+CUST_CODE$
26280 READ DATA FROM "" TO ICO$,IOL=FM1_FETCHDATA
26290 FIND (_FM1,KEY=_DKEY$+ITEM_CODE$,DOM=*NEXT)IOL=FM1_FETCHDATA
26300 END SWITCH 
26310 RETURN 
26320 ! 
26330 ! 
26340 LOAD_SYSTEM_PARAMETERS:
26350 CALL "ZZCOMP",ERR=*NEXT,X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; GOTO 26370
26360 CMD_STR$="E"; MSGBOX MSG("ERROR")+" - "+MSG("LOGON")
26370 IF X1>0 THEN CMD_STR$="E"; EXIT 
26380 RETURN 
26390 ! 
26400 ! 
26410 HILIGHTROW:
26420 LBO=LIST_BOX_ORDERS.CTL ! HIGHLIGHT ITEM ROW IN LISTBOX
26430 LIST_BOX WRITE LBO,LBIDX
26440 NEXT_ID=LBO
26450 REFRESH_FLG=1
26460 RETURN 
26470 ! 
26480 ! !^ 100 <plh> Edit list_box record if double clicked.
26490 LIST_BOX_DOUBLECLICK:
26500 IF _EOM$<>$02$ THEN RETURN 
26510 LBO=LIST_BOX_ORDERS.CTL
26520 ! DIM CURLINE$:IOL=IOL(_FIL_NO)
26530 LBIDX=LBO'CURRENTITEM
26540 LIST_BOX FIND LBO,LBIDX,CURLINE$,ERR=*RETURN
26550 _KEY$=CURLINE.CUST_DIV$+CURLINE.CUST_CODE$+CURLINE.ITEM_CODE$+CURLINE.LINE_NUM$
26560 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOSUB DISP_REC
26570 CALL "FMGIAI"
26580 REFRESH_FLG=1
26590 RETURN 
26600 ! 
30000 ! ^30000
30010 ZZPARM_AR_FETCHPARMS:IOLIST AR_1$:[LEN(14)],ALT_BILL_TO_CST_FLG$:[LEN(1)],AR_3$,AGE_CTG_01_DAYS,AGE_CTG_02_DAYS,AGE_CTG_03__DAYS,AGE_CTG_04_DAYS,AGE_CTG_05_DAYS,INV_AMT_PMT_RNGE_LVL_1,INV_AMT_PMT_RNGE_LVL_2,INV_AMT_PMT_RNGE_LVL_3,NEXT_RENUMBER,UNUSED2
30020 ZZPARM_FM_FETCHPARMS:IOLIST FM_1$:[LEN(194)],ENABLE_HIDDEN_WRHSE_FEATURE_FLG$:[LEN(1)],FM_2$
30030 ZZPARM_UM_FETCHPARMS:IOLIST UMKEY$:[LEN(7)],TF_DESC$:[LEN(12)],FIXED_ITEM_CNT$:[LEN(1)],DISABLE_AMT_PER_UNIT$:[LEN(1)],DIVIDE_EXT,UNIT_ITEM_CNT
30040 ICO_FETCHDATA:IOLIST ICO_1$:[LEN(60)],PROD_CODE$:[LEN(3)],LEFT_RIGHT$:[LEN(8)],TOP_BOTTOM$:[LEN(8)],PLYS$:[LEN(2)],ICO_2$
30050 FM1_FETCHDATA:IOLIST FM1_1$:[LEN(20)],PROD_CODE$:[LEN(3)],LEFT_RIGHT$:[LEN(8)],TOP_BOTTOM$:[LEN(8)],PLYS$:[LEN(2)],FM1_2$
30060 ! 
56000 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
64000 ! ^64000
64010 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
64020 DEF FNR$(Z9$)=Z9$(POS(" "<>Z9$))
64030 DEF FNS$(Z9$)=Z9$(1,POS("    "=Z9$+"    ")-1)
64040 ! 
64050 ! 
64060 START_TRACE:
64070 ENTER _TRACE,PRGNAME$,USERNAME$,ERR=*NEXT
64080 ! IF USERNAME$="" THEN CALL PGN+";GETUSERNAME",USERNAME$
64090 ! IF PRGNAME$="" THEN CALL PGN+";GET_STACK_PRG_NAME",STK-1,PRGNAME$
64100 TRACENAME$="TMP"+PRGNAME$+"_TRACE."+USERNAME$
64110 ERASE TRACENAME$,ERR=*NEXT
64120 SERIAL TRACENAME$
64130 _TRACE=HFN
64140 OPEN LOCK (_TRACE)TRACENAME$
64150 SETTRACE (_TRACE)
64160 EXIT 
64170 ! 
