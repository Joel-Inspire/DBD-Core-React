0010 ! FMGODG - Sales Order Shipping instructions
0035 REM "5.7 - 02/15/23 - 17.277091 - dmm - SSP# 307430
0037 REM "307430-DBD-333;Add 101 to some of 288's company specfic code       
0040 REM "Copyright 2023 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0146 %CUST_NAME$="",%VEND_NAME$="",%SVDR$=""
0147 CALL "ZZ2PRP","OS",RESULT$,TF_DATE$; IF RESULT$="Y" THEN TOPS$="Y"; REM SSP 202876
0150 GOSUB SETUP_KEYS
0152 ZZPARM=HFN; OPEN (ZZPARM)"ZZPARM"
0153 READ (ZZPARM,KEY=%C$+"A/R",DOM=*NEXT)AR$ ! SSP 217332
0154 _FMPS=HFN; OPEN (_FMPS)"FMP"+%C$ ! SSP 223383
0155 READ (ZZPARM,KEY=%C$+"OSP",DOM=*NEXT)OS_PARM$; SPFX$=OS_PARM$(218,1); IF POS(SPFX$="SC")<>0 THEN %SVDR$="S.P.R" ELSE %SVDR$="United"
0156 READ (ZZPARM,KEY=%C$+"F/M",DOM=*NEXT)FM_PARM$; GOTO 0158
0157 MSGBOX "F/M "+MSG("PARM_NOF"); CMD_STR$="END"; EXIT 
0158 GOSUB GET_DEFAULTS
0159 READ (ZZPARM,KEY=%C$+"AR3",DOM=*NEXT)ARPARM3$ ! SSP 235445
0160 _FILE_NAME$="PO3"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0185 _FS1=HFN; OPEN (_FS1,IOL=*,REC=FS1$)"FS1"+%C$; CALL "ZZWIOL",_FS1,"B",FS1_IOL$; DIM FS1$:CPL(FS1_IOL$)
0187 _FS2=HFN; OPEN (_FS2,IOL=*)"FS2"+%C$; CALL "ZZWIOL",_FS2,"B",FS2_IOL$
0188 _FMP=HFN; OPEN (_FMP)"FMP"+%C$; FIND (_FMP,KEY="D"+%CUSTOMER$,DOM=*NEXT)_FMP$
0189 _FSV=HFN; OPEN (_FSV)"FSV"+%C$; FIND (_FSV,KEY=%ORDER_DIV$+%ORDER_NUM$,DOM=*NEXT)_FSV$
0190 _AR5=HFN; OPEN (_AR5)"AR5"+%C$ ! SSP 217332
0192 _AR11=HFN; OPEN (_AR11)"AR1"+%C$ ! SSP 217332
0199 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=3
0430 DIM _KEYS$[1:3]; _KEYS$[1]="ORDER$",_KEYS$[2]="ORDER_LINE_NUM$",_KEYS$[3]="SEQ_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 LINE_SELECTED=0 ! SSP 273697
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0545 ORDER$=MID(ARG_1$,1,8); SEQ_NUM$=""; IF LEN(ARG_1$)>=12 THEN ORDER_LINE_NUM$=ARG_1$(10,3) ELSE ORDER_LINE_NUM$=MID(MSG("GEN_SHIP"),1,3) END_IF ; _ENABLE_FLG=2; REFRESH_FLG=1; GOSUB ENABLE_GROUPS; GOSUB GET_ORDER; GOSUB LOAD_ORDER_LINE; NEXT_ID=ORDER_LINE_NUM.CTL; _EOM$=$0D$; GOTO LINE_NUM_ENTERED
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0700 ! 700 - Set up tabbing between folders
0710 INIT_FOLDER:
0713 EXTRACT (_FS1,KEY=_KEY$(1,8),ERR=*NEXT)* ! SSP248358 jdf
0720 GOSUB ENABLE_GROUPS
0730 IF _ENABLE_FLG<>_KEY1 THEN IF TAB_FLG$="<" THEN NEXT_ID=_LAST_TAB ELSE NEXT_ID=_FIRST_TAB
0740 SWITCH FOLDER_ID$
0750 CASE "FMGODG.1"
0752 IF STP(LOC_TYPE$)="" THEN LOC_TYPE$="C"; REFRESH_FLG=1
0753 IF _ENABLE_FLG<=0 THEN NEXT_ID=LOC_CODE.CTL
0754 IF WIZARD_MODE THEN HIDE CONTROL WZ_FINISH.CTL; HIDE CONTROL WZ_BACK.CTL; IF MID(ORDER_LINE_NUM$,1,3)=MID(MSG("GEN_SHIP"),1,3) THEN SHOW CONTROL WZ_NEXT.CTL; SHOW CONTROL WZ_DONE.CTL; WZ_GEN=1; GOTO *NEXT ELSE IF STP(SEQ_NUM$,2)="" THEN HIDE CONTROL WZ_NEXT.CTL; SHOW CONTROL WZ_DONE.CTL ELSE SHOW CONTROL WZ_NEXT.CTL
0757 IF MID(ORDER_LINE_NUM$,1,3)=MID(MSG("GEN_SHIP"),1,3) OR NUL(ORDER_LINE_NUM$) OR STP(SEQ_NUM$,2)="" THEN CALL "*WINGRP;DISABLE",DEL_1.GRP$ ELSE CALL "*WINGRP;ENABLE",DEL_1.GRP$ ! SSP 273697
0759 BREAK
0760 CASE "FMGODG.2"
0765 GOSUB RESTORE_FOLDER_2; GOSUB LOAD_FOB; GOSUB LOAD_HOW_TO_SHIP; GOSUB LOAD_SHIP_VIA
0766 REFRESH_FLG=1; NEXT_ID=FOB.CTL
0767 IF WIZARD_MODE THEN HIDE CONTROL WZ_DONE.CTL; HIDE CONTROL WZ_FINISH.CTL; SHOW CONTROL WZ_BACK.CTL; SHOW CONTROL WZ_NEXT.CTL
0768 IF MID(ORDER_LINE_NUM$,1,3)=MID(MSG("GEN_SHIP"),1,3) OR NUL(ORDER_LINE_NUM$) OR STP(SEQ_NUM$,2)="" THEN CALL "*WINGRP;DISABLE",DEL_1.GRP$ ELSE CALL "*WINGRP;ENABLE",DEL_1.GRP$ ! SSP 273697
0769 BREAK
0770 CASE "FMGODG.3"
0772 GOSUB INIT_FMGODG.3
0773 NEXT_ID=SHIP_QTY.CTL
0774 IF WIZARD_MODE THEN HIDE CONTROL WZ_DONE.CTL; HIDE CONTROL WZ_NEXT.CTL; SHOW CONTROL WZ_FINISH.CTL
0775 IF MID(ORDER_LINE_NUM$,1,3)=MID(MSG("GEN_SHIP"),1,3) OR NUL(ORDER_LINE_NUM$) OR STP(SEQ_NUM$,2)="" THEN CALL "*WINGRP;DISABLE",DEL_1.GRP$ ELSE CALL "*WINGRP;ENABLE",DEL_1.GRP$ ! SSP 273697
0776 GOSUB FIGURE_LABEL_1
0779 BREAK
0790 END SWITCH 
0895 EXIT 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0965 IF ZZPARM THEN CLOSE (ZZPARM); ZZPARM=0
0966 IF _FS1 THEN CLOSE (_FS1); _FS1=0
0967 IF _FS2 THEN CLOSE (_FS2); _FS2=0
0968 IF _FM0 THEN CLOSE (_FM0); _FM0=0
0969 IF _AR1 THEN CLOSE (_AR1); _AR1=0
0970 IF SP_LOAD THEN CLOSE (SP_LOAD); SP_LOAD=0
0972 IF _FMP<>0 THEN CLOSE (_FMP); _FMP=0
0973 IF _AR11 THEN CLOSE (_AR11); _AR11=0 ! SSP 217332
0974 IF _AR5 THEN CLOSE (_AR5); _AR5=0 ! SSP 217332
0975 IF _FMPS THEN CLOSE (_FMPS); _FMPS=0 ! SSP 223383
0990 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1015 IF LEN(ORDER_LINE_NUM$)>3 THEN ORDER_LINE_NUM$=ORDER_LINE_NUM$(1,3)
1016 IF LEN(PO_NUM$)<7 THEN PO_NUM$=PAD(PO_NUM$,7,1)
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;PARSE_ORD",ORDER$,PO_DIV$,PO_NUM$
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1071 OLD_REC=1
1075 WIZARD_MODE=0; CALL "*wingrp;hide",WIZARD.GRP$; CALL "*wingrp;show",WIZARD_OFF.GRP$
1076 DISABLE CONTROL SEQ_NUM.CTL ! SSP 284131
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1095 IF MID(ORDER_LINE_NUM$,1,3)=MID(MSG("GEN_SHIP"),1,3) OR NUL(ORDER_LINE_NUM$) OR STP(SEQ_NUM$,2)="" THEN CALL "*WINGRP;DISABLE",DEL_1.GRP$ ELSE CALL "*WINGRP;ENABLE",DEL_1.GRP$ ! SSP 273697
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1253 GOSUB SET_DEFAULTS
1254 WIZARD_MODE=1; CALL "*wingrp;hide",WIZARD_OFF.GRP$; CALL "*wingrp;show",WIZARD.GRP$
1255 IF ARG_2$="NEW" THEN _ENABLE_FLG=-1,PO_DIV$=MID(ARG_1$,1,2),PO_NUM$=MID(ARG_1$,3); IF NUL(ORDER_LINE_NUM$) THEN ORDER_LINE_NUM$=MID(MSG("GEN_SHIP"),1,3)
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=LOC_CODE.CTL,_FIRST_FOLDER=FLDR.FMGODG.1.CTL
1280 NEXT_FOLDER=FLDR.FMGODG.1.CTL
1285 HIDE CONTROL WZ_DONE.CTL
1286 HIDE CONTROL WZ_BACK.CTL ! SHOW CONTROL WZ_CANCEL.CTL ! SSP284131      
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1415 IF MID(ORDER_LINE_NUM$,1,3)=MID(MSG("GEN_SHIP"),1,3) THEN ORDER_LINE_NUM$=DIM(3)
1418 GOSUB CHECK_LOCATION; IF LOC_FLG THEN RETURN 
1420 GOSUB STR_TO_NUM
1430 ! GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1442 IF LINE_SELECTED THEN CHECK_ALL_SHIPPED=1; GOSUB CHECK_SHIP_QTY; IF SHIP_QTY_OK THEN LINE_SELECTED=0; GOTO *NEXT ELSE DISABLE CONTROL ORDER_LINE_NUM.CTL; GOSUB LOAD_SHIP_POINT; GOTO 1460 ! SSP273697
1443 ENABLE CONTROL ORDER_LINE_NUM.CTL ! SSP273697
1445 GOSUB LOAD_SHIP_POINT
1448 IF ORDER_LINE_NUM$=DIM(3) THEN DISABLE CONTROL SEQ_NUM.CTL,CMD_STR$="E"; EXIT 
1450 ! IF GOTO_EXIT THEN GOTO EXIT_PRESSED
1460 IF _ENABLE_FLG THEN IF STP(ORDER$)<>"" THEN _KCNT=2,_ENABLE_FLG=2; GOSUB ENABLE_GROUPS ELSE _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1465 ENABLE CONTROL SEQ_NUM.CTL ! SSP 284131
1466 IF ORDER_LINE_NUM$=DIM(3) THEN DISABLE CONTROL SEQ_NUM.CTL,CMD_STR$="E"; EXIT 
1470 CHANGE_FLG=0
1475 NEXT_FOLDER=FLDR.FMGODG.1.CTL,REFRESH_FLG=1
1480 IF STP(ORDER$)<>"" THEN NEXT_ID=ORDER_LINE_NUM.CTL ELSE NEXT_ID=ORDER.CTL
1485 IF LEN(ARG_1$)>12 OR ORDER_LINES_LOADED=0 THEN CMD_STR$="E"
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1635 ! IF FS1.ORDER_TYPE_3$="B" THEN MSGBOX MSG("FMGODB_101")+SEP+SEP+MSG("FMGODB_102",STR(SHIP_QTY:"###,###"),STR(FS2.ORIG_QTY_ORDERED:"###,###"),ORDER_LINE_NUM$),MSG("FYI"),"!"; RETURN
1637 IF MID(_FMP$,24,1)="Y" AND MID(ORDER_LINE_NUM$,1,3)=MID(MSG("GEN_SHIP"),1,3) THEN MSGBOX ""
1640 IF WIZARD_MODE THEN MSGBOX MSG("CANCEL_CHK"),_MSG_JUST_CHECK$,"?,YESNO",_X$ ELSE MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1655 IF CANCEL_MODE THEN CANCEL_MODE=0; REMOVE (_FIL_NO,KEY=_KEY$,ERR=1680); GOTO 1680
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN IF STP(ORDER$)<>"" THEN _KCNT=2,_ENABLE_FLG=2; GOSUB ENABLE_GROUPS ELSE _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1682 ENABLE CONTROL SEQ_NUM.CTL ! SSP 284131
1684 CHANGE_FLG=0,REFRESH_FLG=1
1685 HLD_LINE_NUM$=ORDER_LINE_NUM$; GOSUB CLEAR_REC; ORDER_LINE_NUM$=HLD_LINE_NUM$; GOSUB LOAD_SHIP_POINT ! SSP 273697
1687 IF FS1.ORDER_TYPE_3$<>"B" THEN GOSUB CHECK_SPECIAL_SHIP ! IF OLD_FLG THEN NEXT_ID=SEQ_NUM.CTL; EXIT ! SSP 273697
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; GOTO 1680
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN IF STP(PO_DIV$+PO_NUM$)<>"" THEN _KCNT=2,_ENABLE_FLG=2; GOSUB ENABLE_GROUPS ELSE _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1852 ENABLE CONTROL SEQ_NUM.CTL ! SSP 284131
1855 NO_CANCEL=1
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2175 GOSUB CHECK_CHANGES
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3045 CALL "*wingrp;enable",FIELDS.GRP$
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3052 GOSUB GET_FS1_INFO
3053 IF LEN(%LOC_TYPE_VALUES$)=1 THEN DISABLE CONTROL LOC_TYPE.CTL,ERR=*NEXT ELSE ENABLE CONTROL LOC_TYPE.CTL,ERR=*NEXT
3060 CHANGE_FLG=0,VENDOR$=VENDOR_DIV$+VENDOR_CODE$
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT: SEQ_NUM$=_KEY$(13,1); IF FS1.ORDER_TYPE_3$="B" AND NUL(LOC_CODE$) AND NUL(ORDER_LINE_NUM$) AND NUL(SEQ_NUM$) THEN LOC_TYPE$="C"; END_IF ; IF MID(ORDER_LINE_NUM$,1,3)=MID(MSG("GEN_SHIP"),1,3) THEN ORDER_LINE_NUM$=DIM(3); END_IF ; WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR) ! SSP234515 jdf !SSP#287658!SSP#287568
3330 ! NO_CANCEL=0
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=ORDER_LINE_NUM.CTL,_FIRST_FIELD=SHIP_QTY.CTL,_FIRST_FOLDER=FLDR.FMGODG.1.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 SHIP_QTY$=STR(FN%QTY_IN_UM(SHIP_QTY,SELL_UM$,SELL_UM_QTY))
10025 GOSUB INIT_FMGODG.3
10030 NUM_OF_LABELS$=STR(NUM_OF_LABELS)
10040 RECVD_TO_DATE$=STR(RECVD_TO_DATE)
10050 RECV_NOW_AMT$=STR(RECV_NOW_AMT)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="SHIP_QTY",_X=SHIP_QTY.CTL,SHIP_QTY=FN%QTY_IN_EACHES(NUM(SHIP_QTY$,ERR=NON_NUMERIC),SELL_UM$,NUM(SELL_UM_QTY$,ERR=NON_NUMERIC))
11030 _X$="NUM_OF_LABELS",_X=NUM_OF_LABELS.CTL,NUM_OF_LABELS=NUM(NUM_OF_LABELS$,ERR=NON_NUMERIC)
11040 _X$="RECVD_TO_DATE",_X=RECVD_TO_DATE.CTL,RECVD_TO_DATE=NUM(RECVD_TO_DATE$,ERR=NON_NUMERIC)
11050 _X$="RECV_NOW_AMT",_X=RECV_NOW_AMT.CTL,RECV_NOW_AMT=NUM(RECV_NOW_AMT$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12015 IF NOT(GOTO_EXIT) THEN GOSUB CHECK_SHIP_QTY ! SSP245773 jdf
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 CTN_LABEL_ITEM_CODE$=""
13030 EXPORTED_TO_SHIP$=""
13040 WHSE_CODE$=""
13050 ! IF _CLR_FLG$="R" THEN ORDER_LINE_NUM$=""
13060 IF _CLR_FLG$="R" THEN SEQ_NUM$=""
13070 LOC_TYPE$=""
13080 LOC_CODE$=""
13090 ATTN_NAME$=""
13100 LOC_ADDR_1$=""
13110 LOC_ADDR_2$=""
13120 LOC_CITY$=""
13130 LOC_ST$=""
13140 LOC_ZIP_CODE$=""
13145 LOC_COUNTRY$="" ! SSP307210
13150 FOB$=""
13160 HOW_TO_SHIP_CODE$=""
13170 INSIDE_DELIVERY$=""
13180 SHIP_VIA_CODE$=""
13190 SHIP_WITH$=""
13200 ! IF _CLR_FLG$="R" THEN PO_DIV$=""
13210 ! IF _CLR_FLG$="R" THEN PO_NUM$=""
13220 MARK_FOR$=""
13230 SHIP_VIA_DESC$=""
13240 COMP_NAME_TO_SHIP_TO$=""
13250 COST_CODE$=""
13260 STAX_CODE$=""
13270 TAX$=""
13280 CARTON_LABEL_2$=""
13290 NUMBER_CARTON_2ND_LBL$=""
13300 VENDOR_DIV$=""
13310 VENDOR_CODE$=""
13320 PLANT_CODE$=""
13330 EMAIL_ADDRESS$=""
13331 SHIP_ACCT_NUM$="",WILL_CALL$="",DROP_SHIP$=""; REM SSP 197118
13340 PO3_UNUSED_1$=""
13350 SHIP_QTY=0
13360 NUM_OF_LABELS=0
13370 RECVD_TO_DATE=0
13380 RECV_NOW_AMT=0
13980 GOSUB NUM_TO_STR
13985 CHECK_ALL_SHIPPED=0
13986 SHIP_QTY=0 ! SSP 284131
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14015 IF LEN(ARG_1$)>=12 THEN DISABLE CONTROL ORDER_LINE_NUM.CTL
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14024 IF ARG_1$<>"" AND _ENABLE_FLG=1 THEN _ENABLE_FLG=2
14025 IF _ENABLE_FLG=1 THEN CALL "*wingrp;Enable",KEY1.GRP$; NEXT_ID=ORDER.CTL ELSE CALL "*wingrp;Disable",KEY1.GRP$
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=ORDER_LINE_NUM.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=SEQ_NUM.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$; CALL "*wingrp;disable",LOC_CODE.GRP$
14975 IF TOPS$="Y" THEN CALL "*wingrp;show",TOPS.GRP$ ELSE CALL "*WINGRP;HIDE",TOPS.GRP$; REM ssp 202876
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",LOC_CODE.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14985 IF MID(ORDER_LINE_NUM$,1,3)=MID(MSG("GEN_SHIP"),1,3) OR NUL(ORDER_LINE_NUM$) OR STP(SEQ_NUM$,2)="" THEN CALL "*WINGRP;DISABLE",DEL_1.GRP$ ELSE CALL "*WINGRP;ENABLE",DEL_1.GRP$ ! SSP 273697
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(41,"N") ! SSP 307210
15030 IF _ORIG.CTN_LABEL_ITEM_CODE$=_CUR.CTN_LABEL_ITEM_CODE$ OR CTN_LABEL_ITEM_CODE$=_CUR.CTN_LABEL_ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CTN_LABEL_ITEM_CODE$=CTN_LABEL_ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CTN_L_I_C")+" = "+_CUR.CTN_LABEL_ITEM_CODE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CTN_L_I_C")+" = "+_CUR.CTN_LABEL_ITEM_CODE$
15040 IF _ORIG.EXPORTED_TO_SHIP$=_CUR.EXPORTED_TO_SHIP$ OR EXPORTED_TO_SHIP$=_CUR.EXPORTED_TO_SHIP$ THEN GOTO *NEXT ELSE IF _ORIG.EXPORTED_TO_SHIP$=EXPORTED_TO_SHIP$ THEN _CHG2$=_CHG2$+SEP+MSG("EXPO_T_S")+" = "+_CUR.EXPORTED_TO_SHIP$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EXPO_T_S")+" = "+_CUR.EXPORTED_TO_SHIP$
15050 IF _ORIG.WHSE_CODE$=_CUR.WHSE_CODE$ OR WHSE_CODE$=_CUR.WHSE_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE_CODE$=WHSE_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("WHSE_CODE")+" = "+_CUR.WHSE_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WHSE_CODE")+" = "+_CUR.WHSE_CODE$
15060 ! IF _ORIG.ORDER_LINE_NUM$=_CUR.ORDER_LINE_NUM$ OR ORDER_LINE_NUM$=_CUR.ORDER_LINE_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_LINE_NUM$=ORDER_LINE_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDE_L_N")+" = "+_CUR.ORDER_LINE_NUM$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDE_L_N")+" = "+_CUR.ORDER_LINE_NUM$
15070 IF _ORIG.SEQ_NUM$=_CUR.SEQ_NUM$ OR SEQ_NUM$=_CUR.SEQ_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.SEQ_NUM$=SEQ_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("SEQ_NUM")+" = "+_CUR.SEQ_NUM$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEQ_NUM")+" = "+_CUR.SEQ_NUM$
15080 IF _ORIG.LOC_TYPE$=_CUR.LOC_TYPE$ OR LOC_TYPE$=_CUR.LOC_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_TYPE$=LOC_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_TYPE")+" = "+_CUR.LOC_TYPE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_TYPE")+" = "+_CUR.LOC_TYPE$
15090 IF _ORIG.LOC_CODE$=_CUR.LOC_CODE$ OR LOC_CODE$=_CUR.LOC_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_CODE$=LOC_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_CODE")+" = "+_CUR.LOC_CODE$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_CODE")+" = "+_CUR.LOC_CODE$
15100 IF _ORIG.ATTN_NAME$=_CUR.ATTN_NAME$ OR ATTN_NAME$=_CUR.ATTN_NAME$ THEN GOTO *NEXT ELSE IF _ORIG.ATTN_NAME$=ATTN_NAME$ THEN _CHG2$=_CHG2$+SEP+MSG("ATTN_NAME")+" = "+_CUR.ATTN_NAME$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ATTN_NAME")+" = "+_CUR.ATTN_NAME$
15110 IF _ORIG.LOC_ADDR_1$=_CUR.LOC_ADDR_1$ OR LOC_ADDR_1$=_CUR.LOC_ADDR_1$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_ADDR_1$=LOC_ADDR_1$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_ADDR_1")+" = "+_CUR.LOC_ADDR_1$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_ADDR_1")+" = "+_CUR.LOC_ADDR_1$
15120 IF _ORIG.LOC_ADDR_2$=_CUR.LOC_ADDR_2$ OR LOC_ADDR_2$=_CUR.LOC_ADDR_2$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_ADDR_2$=LOC_ADDR_2$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_ADDR_2")+" = "+_CUR.LOC_ADDR_2$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_ADDR_2")+" = "+_CUR.LOC_ADDR_2$
15130 IF _ORIG.LOC_CITY$=_CUR.LOC_CITY$ OR LOC_CITY$=_CUR.LOC_CITY$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_CITY$=LOC_CITY$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_CITY")+" = "+_CUR.LOC_CITY$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_CITY")+" = "+_CUR.LOC_CITY$
15140 IF _ORIG.LOC_ST$=_CUR.LOC_ST$ OR LOC_ST$=_CUR.LOC_ST$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_ST$=LOC_ST$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_ST")+" = "+_CUR.LOC_ST$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_ST")+" = "+_CUR.LOC_ST$
15150 IF _ORIG.LOC_ZIP_CODE$=_CUR.LOC_ZIP_CODE$ OR LOC_ZIP_CODE$=_CUR.LOC_ZIP_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_ZIP_CODE$=LOC_ZIP_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ZIP_CODE")+" = "+_CUR.LOC_ZIP_CODE$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ZIP_CODE")+" = "+_CUR.LOC_ZIP_CODE$
15160 IF _ORIG.FOB$=_CUR.FOB$ OR FOB$=_CUR.FOB$ THEN GOTO *NEXT ELSE IF _ORIG.FOB$=FOB$ THEN _CHG2$=_CHG2$+SEP+MSG("FOB")+" = "+_CUR.FOB$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FOB")+" = "+_CUR.FOB$
15170 IF _ORIG.HOW_TO_SHIP_CODE$=_CUR.HOW_TO_SHIP_CODE$ OR HOW_TO_SHIP_CODE$=_CUR.HOW_TO_SHIP_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.HOW_TO_SHIP_CODE$=HOW_TO_SHIP_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("HOW_T_S_C")+" = "+_CUR.HOW_TO_SHIP_CODE$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("HOW_T_S_C")+" = "+_CUR.HOW_TO_SHIP_CODE$
15180 IF _ORIG.INSIDE_DELIVERY$=_CUR.INSIDE_DELIVERY$ OR INSIDE_DELIVERY$=_CUR.INSIDE_DELIVERY$ THEN GOTO *NEXT ELSE IF _ORIG.INSIDE_DELIVERY$=INSIDE_DELIVERY$ THEN _CHG2$=_CHG2$+SEP+MSG("INSI_D")+" = "+_CUR.INSIDE_DELIVERY$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INSI_D")+" = "+_CUR.INSIDE_DELIVERY$
15190 IF _ORIG.SHIP_VIA_CODE$=_CUR.SHIP_VIA_CODE$ OR SHIP_VIA_CODE$=_CUR.SHIP_VIA_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.SHIP_VIA_CODE$=SHIP_VIA_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("SHIP_V_C")+" = "+_CUR.SHIP_VIA_CODE$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SHIP_V_C")+" = "+_CUR.SHIP_VIA_CODE$
15200 IF _ORIG.SHIP_WITH$=_CUR.SHIP_WITH$ OR SHIP_WITH$=_CUR.SHIP_WITH$ THEN GOTO *NEXT ELSE IF _ORIG.SHIP_WITH$=SHIP_WITH$ THEN _CHG2$=_CHG2$+SEP+MSG("SHIP_WITH")+" = "+_CUR.SHIP_WITH$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SHIP_WITH")+" = "+_CUR.SHIP_WITH$
15210 IF _ORIG.PO_DIV$=_CUR.PO_DIV$ OR PO_DIV$=_CUR.PO_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.PO_DIV$=PO_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("PO_DIV")+" = "+_CUR.PO_DIV$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PO_DIV")+" = "+_CUR.PO_DIV$
15220 IF _ORIG.PO_NUM$=_CUR.PO_NUM$ OR PO_NUM$=_CUR.PO_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.PO_NUM$=PO_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("PO_NUM")+" = "+_CUR.PO_NUM$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PO_NUM")+" = "+_CUR.PO_NUM$
15230 IF _ORIG.MARK_FOR$=_CUR.MARK_FOR$ OR MARK_FOR$=_CUR.MARK_FOR$ THEN GOTO *NEXT ELSE IF _ORIG.MARK_FOR$=MARK_FOR$ THEN _CHG2$=_CHG2$+SEP+MSG("MARK_FOR")+" = "+_CUR.MARK_FOR$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MARK_FOR")+" = "+_CUR.MARK_FOR$
15240 IF _ORIG.SHIP_VIA_DESC$=_CUR.SHIP_VIA_DESC$ OR SHIP_VIA_DESC$=_CUR.SHIP_VIA_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.SHIP_VIA_DESC$=SHIP_VIA_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("SHIP_V_D")+" = "+_CUR.SHIP_VIA_DESC$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SHIP_V_D")+" = "+_CUR.SHIP_VIA_DESC$
15250 IF _ORIG.COMP_NAME_TO_SHIP_TO$=_CUR.COMP_NAME_TO_SHIP_TO$ OR COMP_NAME_TO_SHIP_TO$=_CUR.COMP_NAME_TO_SHIP_TO$ THEN GOTO *NEXT ELSE IF _ORIG.COMP_NAME_TO_SHIP_TO$=COMP_NAME_TO_SHIP_TO$ THEN _CHG2$=_CHG2$+SEP+MSG("C_N_T_S_T")+" = "+_CUR.COMP_NAME_TO_SHIP_TO$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("C_N_T_S_T")+" = "+_CUR.COMP_NAME_TO_SHIP_TO$
15260 IF _ORIG.COST_CODE$=_CUR.COST_CODE$ OR COST_CODE$=_CUR.COST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.COST_CODE$=COST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("COST_CODE")+" = "+_CUR.COST_CODE$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COST_CODE")+" = "+_CUR.COST_CODE$
15270 IF _ORIG.STAX_CODE$=_CUR.STAX_CODE$ OR STAX_CODE$=_CUR.STAX_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.STAX_CODE$=STAX_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("STAX_CODE")+" = "+_CUR.STAX_CODE$,_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STAX_CODE")+" = "+_CUR.STAX_CODE$
15280 IF _ORIG.TAX$=_CUR.TAX$ OR TAX$=_CUR.TAX$ THEN GOTO *NEXT ELSE IF _ORIG.TAX$=TAX$ THEN _CHG2$=_CHG2$+SEP+MSG("TAX")+" = "+_CUR.TAX$,_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TAX")+" = "+_CUR.TAX$
15290 IF _ORIG.CARTON_LABEL_2$=_CUR.CARTON_LABEL_2$ OR CARTON_LABEL_2$=_CUR.CARTON_LABEL_2$ THEN GOTO *NEXT ELSE IF _ORIG.CARTON_LABEL_2$=CARTON_LABEL_2$ THEN _CHG2$=_CHG2$+SEP+MSG("CTN_L_I_C2")+" = "+_CUR.CARTON_LABEL_2$,_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CTN_L_I_C2")+" = "+_CUR.CARTON_LABEL_2$
15300 IF _ORIG.NUMBER_CARTON_2ND_LBL$=_CUR.NUMBER_CARTON_2ND_LBL$ OR NUMBER_CARTON_2ND_LBL$=_CUR.NUMBER_CARTON_2ND_LBL$ THEN GOTO *NEXT ELSE IF _ORIG.NUMBER_CARTON_2ND_LBL$=NUMBER_CARTON_2ND_LBL$ THEN _CHG2$=_CHG2$+SEP+MSG("NUM_CTN2")+" = "+_CUR.NUMBER_CARTON_2ND_LBL$,_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NUM_CTN2")+" = "+_CUR.NUMBER_CARTON_2ND_LBL$
15310 IF _ORIG.VENDOR_DIV$=_CUR.VENDOR_DIV$ OR VENDOR_DIV$=_CUR.VENDOR_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.VENDOR_DIV$=VENDOR_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_DIV")+" = "+_CUR.VENDOR_DIV$,_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_DIV")+" = "+_CUR.VENDOR_DIV$
15320 IF _ORIG.VENDOR_CODE$=_CUR.VENDOR_CODE$ OR VENDOR_CODE$=_CUR.VENDOR_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.VENDOR_CODE$=VENDOR_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_CODE")+" = "+_CUR.VENDOR_CODE$,_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_CODE")+" = "+_CUR.VENDOR_CODE$
15330 IF _ORIG.PLANT_CODE$=_CUR.PLANT_CODE$ OR PLANT_CODE$=_CUR.PLANT_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PLANT_CODE$=PLANT_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PLANT_CODE")+" = "+_CUR.PLANT_CODE$,_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLANT_CODE")+" = "+_CUR.PLANT_CODE$
15340 IF _ORIG.EMAIL_ADDRESS$=_CUR.EMAIL_ADDRESS$ OR EMAIL_ADDRESS$=_CUR.EMAIL_ADDRESS$ THEN GOTO *NEXT ELSE IF _ORIG.EMAIL_ADDRESS$=EMAIL_ADDRESS$ THEN _CHG2$=_CHG2$+SEP+MSG("EMAIL_A")+" = "+_CUR.EMAIL_ADDRESS$,_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EMAIL_A")+" = "+_CUR.EMAIL_ADDRESS$
15350 IF _ORIG.PO3_UNUSED_1$=_CUR.PO3_UNUSED_1$ OR PO3_UNUSED_1$=_CUR.PO3_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.PO3_UNUSED_1$=PO3_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.PO3_UNUSED_1$,_CHG_VAR$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.PO3_UNUSED_1$
15360 IF _ORIG.SHIP_QTY=_CUR.SHIP_QTY OR SHIP_QTY=_CUR.SHIP_QTY THEN GOTO *NEXT ELSE IF _ORIG.SHIP_QTY=SHIP_QTY THEN _CHG2$=_CHG2$+SEP+MSG("SHIP_QTY")+" = "+STR(_CUR.SHIP_QTY),_CHG_VAR$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SHIP_QTY")+" = "+STR(_CUR.SHIP_QTY)
15370 IF _ORIG.NUM_OF_LABELS=_CUR.NUM_OF_LABELS OR NUM_OF_LABELS=_CUR.NUM_OF_LABELS THEN GOTO *NEXT ELSE IF _ORIG.NUM_OF_LABELS=NUM_OF_LABELS THEN _CHG2$=_CHG2$+SEP+MSG("NUM_O_L")+" = "+STR(_CUR.NUM_OF_LABELS),_CHG_VAR$(35,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NUM_O_L")+" = "+STR(_CUR.NUM_OF_LABELS)
15380 IF _ORIG.RECVD_TO_DATE=_CUR.RECVD_TO_DATE OR RECVD_TO_DATE=_CUR.RECVD_TO_DATE THEN GOTO *NEXT ELSE IF _ORIG.RECVD_TO_DATE=RECVD_TO_DATE THEN _CHG2$=_CHG2$+SEP+MSG("RECV_T_D")+" = "+STR(_CUR.RECVD_TO_DATE),_CHG_VAR$(36,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RECV_T_D")+" = "+STR(_CUR.RECVD_TO_DATE)
15390 IF _ORIG.RECV_NOW_AMT=_CUR.RECV_NOW_AMT OR RECV_NOW_AMT=_CUR.RECV_NOW_AMT THEN GOTO *NEXT ELSE IF _ORIG.RECV_NOW_AMT=RECV_NOW_AMT THEN _CHG2$=_CHG2$+SEP+MSG("RECV_N_A")+" = "+STR(_CUR.RECV_NOW_AMT),_CHG_VAR$(37,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RECV_N_A")+" = "+STR(_CUR.RECV_NOW_AMT)
15391 IF _ORIG.SHIP_ACCT_NUM$=_CUR.SHIP_ACCT_NUM$ OR SHIP_ACCT_NUM$=_CUR.SHIP_ACCT_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.SHIP_ACCT_NUM$=SHIP_ACCT_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("SHIP_ACCT")+" = "+STR(_CUR.SHIP_ACCT_NUM$),_CHG_VAR$(38,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SHIP_ACCT")+" = "+STR(_CUR.SHIP_ACCT_NUM$); REM SSP 197118
15392 IF _ORIG.WILL_CALL$=_CUR.WILL_CALL$ OR WILL_CALL$=_CUR.WILL_CALL$ THEN GOTO *NEXT ELSE IF _ORIG.WILL_CALL$=WILL_CALL$ THEN _CHG2$=_CHG2$+SEP+MSG("WILL_CALL")+" = "+STR(_CUR.WILL_CALL$),_CHG_VAR$(39,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WILL_CALL")+" = "+STR(_CUR.WILL_CALL$); REM SSP 197118
15393 IF _ORIG.DROP_SHIP$=_CUR.DROP_SHIP$ OR DROP_SHIP$=_CUR.DROP_SHIP$ THEN GOTO *NEXT ELSE IF _ORIG.DROP_SHIP$=DROP_SHIP$ THEN _CHG2$=_CHG2$+SEP+MSG("DROP_SHIP")+" = "+STR(_CUR.DROP_SHIP$),_CHG_VAR$(40,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DROP_SHIP")+" = "+STR(_CUR.DROP_SHIP$); REM SSP 197118
15394 IF _ORIG.LOC_COUNTRY$=_CUR.LOC_COUNTRY$ OR LOC_COUNTRY$=_CUR.LOC_COUNTRY$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_COUNTRY$=LOC_COUNTRY$ THEN _CHG2$=_CHG2$+SEP+MSG("COUNTRY")+" = "+_CUR.LOC_COUNTRY$,_CHG_VAR$(41,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COUNTRY")+" = "+_CUR.LOC_COUNTRY$ ! SSP 307210
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CTN_LABEL_ITEM_CODE$=_CUR.CTN_LABEL_ITEM_CODE$
16030 IF _CHG_VAR$(2,1)="Y" THEN EXPORTED_TO_SHIP$=_CUR.EXPORTED_TO_SHIP$
16040 IF _CHG_VAR$(3,1)="Y" THEN WHSE_CODE$=_CUR.WHSE_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN ORDER_LINE_NUM$=_CUR.ORDER_LINE_NUM$
16060 IF _CHG_VAR$(5,1)="Y" THEN SEQ_NUM$=_CUR.SEQ_NUM$
16070 IF _CHG_VAR$(6,1)="Y" THEN LOC_TYPE$=_CUR.LOC_TYPE$
16080 IF _CHG_VAR$(7,1)="Y" THEN LOC_CODE$=_CUR.LOC_CODE$
16090 IF _CHG_VAR$(8,1)="Y" THEN ATTN_NAME$=_CUR.ATTN_NAME$
16100 IF _CHG_VAR$(9,1)="Y" THEN LOC_ADDR_1$=_CUR.LOC_ADDR_1$
16110 IF _CHG_VAR$(10,1)="Y" THEN LOC_ADDR_2$=_CUR.LOC_ADDR_2$
16120 IF _CHG_VAR$(11,1)="Y" THEN LOC_CITY$=_CUR.LOC_CITY$
16130 IF _CHG_VAR$(12,1)="Y" THEN LOC_ST$=_CUR.LOC_ST$
16140 IF _CHG_VAR$(13,1)="Y" THEN LOC_ZIP_CODE$=_CUR.LOC_ZIP_CODE$
16150 IF _CHG_VAR$(14,1)="Y" THEN FOB$=_CUR.FOB$
16160 IF _CHG_VAR$(15,1)="Y" THEN HOW_TO_SHIP_CODE$=_CUR.HOW_TO_SHIP_CODE$
16170 IF _CHG_VAR$(16,1)="Y" THEN INSIDE_DELIVERY$=_CUR.INSIDE_DELIVERY$
16180 IF _CHG_VAR$(17,1)="Y" THEN SHIP_VIA_CODE$=_CUR.SHIP_VIA_CODE$
16190 IF _CHG_VAR$(18,1)="Y" THEN SHIP_WITH$=_CUR.SHIP_WITH$
16200 IF _CHG_VAR$(19,1)="Y" THEN PO_DIV$=_CUR.PO_DIV$
16210 IF _CHG_VAR$(20,1)="Y" THEN PO_NUM$=_CUR.PO_NUM$
16220 IF _CHG_VAR$(21,1)="Y" THEN MARK_FOR$=_CUR.MARK_FOR$
16230 IF _CHG_VAR$(22,1)="Y" THEN SHIP_VIA_DESC$=_CUR.SHIP_VIA_DESC$
16240 IF _CHG_VAR$(23,1)="Y" THEN COMP_NAME_TO_SHIP_TO$=_CUR.COMP_NAME_TO_SHIP_TO$
16250 IF _CHG_VAR$(24,1)="Y" THEN COST_CODE$=_CUR.COST_CODE$
16260 IF _CHG_VAR$(25,1)="Y" THEN STAX_CODE$=_CUR.STAX_CODE$
16270 IF _CHG_VAR$(26,1)="Y" THEN TAX$=_CUR.TAX$
16280 IF _CHG_VAR$(27,1)="Y" THEN CARTON_LABEL_2$=_CUR.CARTON_LABEL_2$
16290 IF _CHG_VAR$(28,1)="Y" THEN NUMBER_CARTON_2ND_LBL$=_CUR.NUMBER_CARTON_2ND_LBL$
16300 IF _CHG_VAR$(29,1)="Y" THEN VENDOR_DIV$=_CUR.VENDOR_DIV$
16310 IF _CHG_VAR$(30,1)="Y" THEN VENDOR_CODE$=_CUR.VENDOR_CODE$
16320 IF _CHG_VAR$(31,1)="Y" THEN PLANT_CODE$=_CUR.PLANT_CODE$
16330 IF _CHG_VAR$(32,1)="Y" THEN EMAIL_ADDRESS$=_CUR.EMAIL_ADDRESS$
16340 IF _CHG_VAR$(33,1)="Y" THEN PO3_UNUSED_1$=_CUR.PO3_UNUSED_1$
16350 IF _CHG_VAR$(34,1)="Y" THEN SHIP_QTY=_CUR.SHIP_QTY
16360 IF _CHG_VAR$(35,1)="Y" THEN NUM_OF_LABELS=_CUR.NUM_OF_LABELS
16370 IF _CHG_VAR$(36,1)="Y" THEN RECVD_TO_DATE=_CUR.RECVD_TO_DATE
16380 IF _CHG_VAR$(37,1)="Y" THEN RECV_NOW_AMT=_CUR.RECV_NOW_AMT
16381 IF _CHG_VAR$(38,1)="Y" THEN SHIP_ACCT_NUM$=_CUR.SHIP_ACCT_NUM$; REM SSP 197118
16382 IF _CHG_VAR$(39,1)="Y" THEN WILL_CALL$=_CUR.WILL_CALL$; REM SSP 197118
16383 IF _CHG_VAR$(40,1)="Y" THEN DROP_CALL$=_CUR.DROP_CALL$; REM SSP 197118
16384 IF _CHG_VAR$(41,1)="Y" THEN LOC_COUNTRY$=_CUR.LOC_COUNTRY$; REM SSP307210
16990 RETURN 
20000 ! 20000 - Load Order Line Box
20010 LOAD_ORDER_LINE:
20011 IF OLD_FLG THEN OLD_FLG=0; RETURN 
20012 ORDER_LINES_LOADED=0,FIRST_LINE_LOADED$=""; DROP_BOX LOAD ORDER_LINE_NUM.CTL,"",ERR=*NEXT
20013 DROP_BOX LOAD SEQ_NUM.CTL,"",ERR=*NEXT ! Clear ship points as well
20014 IF FS1.ORDER_TYPE_3$<>"B" THEN {
20015 DROP_BOX LOAD ORDER_LINE_NUM.CTL,0,MSG("GEN_SHIP"),ERR=*NEXT ! Load space for general instructions
20016 IF MID(ORDER_LINE_NUM$,1,3)=MID(MSG("GEN_SHIP"),1,3) THEN DROP_BOX WRITE ORDER_LINE_NUM.CTL,MSG("GEN_SHIP"),ERR=*NEXT
20017  }
20020 SELECT *,REC=FS2$ FROM "FS2"+%C$ BEGIN PO_DIV$+STP(PO_NUM$)+"000" END PO_DIV$+STP(PO_NUM$)+"999" WHERE FS2.SPECIAL_SHIPPING$="Y"
20023 ORDER_LINES_LOADED+=1; IF ORDER_LINES_LOADED=1 THEN FIRST_LINE_LOADED$=FS2.ORDER_LINE_NUM$
20025 SWITCH FS2.LINE_TYPE$
20030 CASE "M"
20031 LOAD_STR$=FS2.ORDER_LINE_NUM$+" "+FS2.TF_DESC$
20034 BREAK
20070 DEFAULT 
20071 LOAD_STR$=FS2.ORDER_LINE_NUM$+" "+STP(FS2.ITEM_CODE$,1)+"-"+FS2.TF_DESC$
20075 END SWITCH 
20078 DROP_BOX LOAD ORDER_LINE_NUM.CTL,0,LOAD_STR$,ERR=*NEXT
20079 IF FS2.ORDER_LINE_NUM$=ORDER_LINE_NUM$ THEN DROP_BOX WRITE ORDER_LINE_NUM.CTL,LOAD_STR$
20080 NEXT RECORD 
20085 ! IF FS1.ORDER_TYPE_3$="B" THEN IF ORDER_LINES_LOADED=0 THEN MSGBOX MSG("FMGODG_23"),_FYI$,"!"; CMD_STR$="END"; EXIT ELSE ORDER_LINE_NUM$=FIRST_LINE_LOADED$; DROP_BOX WRITE ORDER_LINE_NUM.CTL,1,ERR=*NEXT
20086 IF LEN(ARG_1$)>9 AND LEN(ARG_1$)<12 THEN ORDER_LINE_NUM$=FIRST_LINE_LOADED$; DROP_BOX WRITE ORDER_LINE_NUM.CTL,1,ERR=*NEXT
20095 RETURN 
20099 ! 
20100 ! 20100 - load shipping point
20105 LOAD_SHIP_POINT:
20110 SP$="123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
20112 DROP_BOX LOAD SEQ_NUM.CTL,"",ERR=*NEXT
20115 IF SP_LOAD=0 THEN SP_LOAD=HFN; OPEN (SP_LOAD,IOL=*)"PO3"+%C$
20116 IF LEN(PO_NUM$)<7 THEN PO_NUM$=PAD(PO_NUM$,7,1)
20118 IF FS1.ORDER_TYPE_3$="B" AND MID(FM_PARM$,280,1)="Y" THEN SP$="1" ! SSP 239965
20119 IF LOTTED THEN SP$="1" ! SSP 199527
20120 FOR SP_INDEX=1 TO LEN(SP$)
20125 FIND (SP_LOAD,KEY=PO_DIV$+PO_NUM$+ORDER_LINE_NUM$+SP$(SP_INDEX,1),DOM=*NEXT,REC=SP$); GOSUB SET_QTY_STRING; DROP_BOX LOAD SEQ_NUM.CTL,0,SP$(SP_INDEX,1)+DIM(3)+QTY_STRING$+"["+SP.LOC_TYPE$+TBL(STP(SP.LOC_CODE$)<>"","]","-"+STP(SP.LOC_CODE$)+"]")+DIM(2)+SP.LOC_ADDR_1$,ERR=*PROCEED; CONTINUE
20126 ! +TBL(ABS(SGN(SP.SHIP_QTY)),MSG("NONE")+DIM(2),STP(STR(FN%QTY_IN_UM(SP.SHIP_QTY,FS2.SELL_UM$,FS2.QTY_IN_SELL_UM):"-#,###,###.00"),2)+" ! ->")"["+SP.LOC_TYPE$+TBL(STP(SP.LOC_CODE$)<>"","]","-"+STP(SP.LOC_CODE$)+"]")+dim(2)+SP.LOC_ADDR_1$; CONTINUE
20128 ! F SP$(SP_INDEX,1)=MID(SEQ_NUM$,1,1) THEN SP_TMP$=SP$(SP_INDEX,1)+DIM(3)+"["+LOC_TYPE$+TBL(STP(LOC_CODE$)<>"","]","-"+STP(LOC_CODE$)+"]")+DIM(2)+LOC_ADDR_1$; DROP_BOX LOAD SEQ_NUM.CTL,0,SP_TMP$,ERR=*PROCEED; DROP_BOX WRITE SEQ_NUM.CTL,SP_TMP$,ERR=*PROCEED; CONTINUE
20130 DROP_BOX LOAD SEQ_NUM.CTL,0,SP$(SP_INDEX,1)+DIM(7)+"---"+MSG("AVAILABLE")+"---",ERR=*NEXT
20190 NEXT SP_INDEX
20192 SEQ_NUM$=""
20195 RETURN 
20199 ! 
20200 ! 20200 - They just entered the shipping point
20210 SHIP_POINT_ENTERED:
20220 _KCNT=3,_ENABLE_FLG=3
20240 DISABLE CONTROL ORDER_LINE_NUM.CTL; LINE_SELECTED=1 ! SSP273697
20290 GOTO FIND_REC
20300 ! 20300 - They just entered the order_line_num
20310 LINE_NUM_ENTERED:
20320 _KCNT=2,_ENABLE_FLG=2
20323 IF LINE_SELECTED THEN DISABLE CONTROL ORDER_LINE_NUM.CTL ELSE LINE_SELECTED=1 ! SSP273697
20324 IF MID(ORDER_LINE_NUM$,1,3)=MID(MSG("GEN_SHIP"),1,3) THEN ORDER_LINE_NUM$=DIM(3),SEQ_NUM$=" "; DISABLE CONTROL SEQ_NUM.CTL; _KCNT=3,_ENABLE_FLG=3; GOTO LNE_DONE ELSE ENABLE CONTROL SEQ_NUM.CTL ! Case of General shipping inst
20325 IF LEN(ORDER_LINE_NUM$)>3 THEN ORDER_LINE_NUM$=ORDER_LINE_NUM$(1,3)
20330 IF MID(ORDER_LINE_NUM$,1,3)=MID(MSG("GEN_SHIP"),1,3) OR NUL(ORDER_LINE_NUM$) OR STP(SEQ_NUM$,2)="" THEN CALL "*WINGRP;DISABLE",DEL_1.GRP$ ELSE CALL "*WINGRP;ENABLE",DEL_1.GRP$ ! 273697
20340 DIM FS2$:CPL(FS2_IOL$); FIND (_FS2,KEY=FS1.ORDER_DIV$+FS1.ORDER_NUM$+ORDER_LINE_NUM$,REC=FS2$,DOM=*NEXT)
20390 LNE_DONE:
20391 REFRESH_FLG=1,LOC_TYPE$=LOC_TYPE$; IF FS1.ORDER_TYPE_3$="B" THEN %LOC_TYPE_DISPLAY$=MSG("D_WHSE")+"|",%LOC_TYPE_VALUES$="D" ELSE IF NUL(ORDER_LINE_NUM$) THEN %LOC_TYPE_DISPLAY$=MSG("CUSTOMER")+"|"+MSG("D_WHSE")+"|"+MSG("VENDOR")+"|",%LOC_TYPE_VALUES$="CDP" ELSE %LOC_TYPE_DISPLAY$=MSG("CUSTOMER")+"|",%LOC_TYPE_VALUES$="C"; IF FS2.PO_CODE$<>" " THEN IF POS(FS2.LINE_TYPE$="IC")<>0 OR FS2.CUSTOM$="Y" THEN %LOC_TYPE_DISPLAY$+=MSG("D_WHSE")+"|",%LOC_TYPE_VALUES$+="D"
20392 REFRESH_FLG=1,LOC_TYPE$=LOC_TYPE$; IF FS1.ORDER_TYPE_3$="B" THEN %LOC_TYPE_DISPLAY$=MSG("D_WHSE")+"|",%LOC_TYPE_VALUES$="D" ELSE IF NUL(ORDER_LINE_NUM$) THEN %LOC_TYPE_DISPLAY$=MSG("CUSTOMER")+"|",%LOC_TYPE_VALUES$="C" ELSE %LOC_TYPE_DISPLAY$=MSG("CUSTOMER")+"|",%LOC_TYPE_VALUES$="C"; IF FS2.PO_CODE$<>" " THEN IF POS(FS2.LINE_TYPE$="IC")<>0 OR FS2.CUSTOM$="Y" THEN %LOC_TYPE_DISPLAY$+=MSG("D_WHSE")+"|",%LOC_TYPE_VALUES$+="D"
20393 IF LOC_TYPE.CTL<>0 THEN JJ=LOC_TYPE.CTL; DROP_BOX LOAD JJ,"",ERR=*PROCEED; DROP_BOX LOAD JJ,%LOC_TYPE_DISPLAY$,ERR=*PROCEED; JJ'TBL$=%LOC_TYPE_VALUES$
20394 IF LEN(%LOC_TYPE_VALUES$)=1 THEN DISABLE CONTROL LOC_TYPE.CTL,ERR=*NEXT ! ELSE ENABLE CONTROL LOC_TYPE.CTL,ERR=*NEXT
20395 LOTTED=0; IF MID(%IC_PARM$,44,1)="Y" AND NUL(FS2.PO_CODE$) AND POS(FS2.LINE_TYPE$="IC")<>0 AND FS2.LOT_INV_ORDER_LINE$="Y" THEN LOTTED=1 ! SSP 199527
20398 GOTO FIND_REC ! SSP 199527
20399 ! 
20400 ! 20400 - set %FM0_Prefix for use by query
20410 SET_FM0_PREFIX:
20412 %CUSTOMER$=FS1.CUST_DIV$+FS1.CUST_CODE$
20413 IF MID(_FMP$,24,1)<>"Y" AND LOC_TYPE$<>"D" THEN GOSUB PUT_DFLT
20415 IF STP(LOC_TYPE$)="" THEN LOC_TYPE$="C"
20416 IF LOC_TYPE$<>"D" THEN DCNT=0 ! SSP206986 jdf
20417 LO=LOC_CODE.CTL,LOC_CODE$=LOC_CODE$; LO'TIP$=""; IF LOC_TYPE$="D" AND POS(FS1.ORDER_TYPE_3$="BS")=0 THEN LO'TIP$=MSG("FMGODG_10") ELSE IF POS(FS1.ORDER_TYPE_3$="BS")<>0 THEN LO'TIP$=MSG("FMGODG_11") ELSE LO'TIP$=MSG("FMGODG_12") END_IF END_IF ; LO'MSG$=LO'TIP$ ! LOC_CODE$=LOC_CODE$ is to fool winproc into thinking we need to redisplay LOC_CODE control                  
20418 LO'MSG$=LO'TIP$
20419 REFRESH_FLG=1
20420 SWITCH LOC_TYPE$
20425 CASE "C"
20427 %FM0_PREFIX$="C"+FS1.CUST_DIV$+FS1.CUST_CODE$
20429 BREAK
20430 CASE "D"
20432 %FM0_PREFIX$="D"+DIM(10)
20433 REM IF DCNT=0 THEN LOC_CODE$="",DCNT=1 ! SSP206986 jdf ! SSP234515 jdf
20434 BREAK
20435 CASE "P"
20437 %FM0_PREFIX$="P"+FS2.VEND_DIV$+FS2.VEND_CODE$
20439 BREAK
20450 END SWITCH 
20460 PRIOR_LOC_CODE$=LOC_CODE$
20495 RETURN 
20500 ! 20500 - Set LOC_TYPE$ based on input from list
20510 SET_LOC_TYPE:
20520 IF STP(LOC_TYPE$)="" THEN LOC_TYPE$="C"; REFRESH_FLG=1
20530 IF ORDER_LINE_NUM$=MID(MSG("GEN_SHIP"),1,3) THEN LOC_TYPE$="C"; CALL "*wingrp;Disable",LOC_TYPE.GRP$
20595 RETURN 
20600 ! 20600 - LOC_CODE has been entered, default as needed
20605 LOC_CODE_ENTERED:
20607 ! IF _EOM$=$00$ AND NUL(LOC_CODE$) AND FS2.SPECIAL_SHIPPING$="Y" THEN NEXT_ID=LOC_CODE.CTL; NEXT_FOLDER=FLDR.FMGODG.1.CTL; RETURN
20609 ! MSGBOX "YES TO ESCAPE","ESCAPE","YESNO",_AAAA$; IF _AAAA$="YES" THEN ESCAPE
20610 ! IF _EOM$=$00$ AND NUL(LOC_CODE$) THEN RETURN
20611 IF NUL(LOC_CODE$) AND MID(_FMP$,24,1)="Y" THEN NEXT_ID=LOC_CODE.CTL; MSGBOX MSG("FMGODG_24"),MSG("FYI"),"!"; RETURN 
20612 LOC_CODE_M$=STP(LOC_CODE$) ! SSP208912  jdf
20613 IF LOC_CODE_M$="M" THEN GOTO CHECK_FM ! SSP208912  jdf
20614 LOC_CODE$=LOC_CODE_M$ ! SSP208912  jdf
20615 IF LOC_CODE$=PRIOR_LOC_CODE$ THEN RETURN 
20617 IF FS1.ORDER_TYPE_3$="B" AND MID(LOC_CODE$,1,1)="9" THEN MSGBOX MSG("FMGODG_25")+SEP+MSG("FMGODG_11"),MSG("FYI"),"!"; LOC_CODE$=""; NEXT_ID=LOC_CODE.CTL; RETURN 
20620 IF STP(LOC_CODE$)="M" THEN IF LOC_TYPE$="D" THEN GOTO LOC_CODE_SANITY_CHECK ELSE GOTO LOC_CODE_ENTERED_DONE
20625 IF _FM0=0 THEN _FM0=HFN; OPEN (_FM0,IOL=*)"FM0"+%C$
20626 IF _AR1=0 THEN _AR1=HFN; OPEN (_AR1,IOL=*)"AR1"+%C$; CALL "ZZWIOL",_AR1,"B",AR1_IOL$
20628 LOC_CODE$=STR(NUM(LOC_CODE$,ERR=*NEXT):"0000")
20629 LOC_CODE$=PAD(LOC_CODE$,4),REFRESH_FLG=1; GOSUB LOC_CODE_SANITY_CHECK
20630 FIND (_FM0,KEY=%FM0_PREFIX$+LOC_CODE$,REC=FM0$,DOM=LOC_CODE_MISSING)
20632 DIM AR1$:CPL(AR1_IOL$); FIND (_AR1,KEY=FS1.CUST_DIV$+FS1.CUST_CODE$,DOM=*NEXT,REC=AR1$)
20635 ATTN_NAME$=FM0.LOC_AGENT$; LOC_ADDR_1$=FM0.LOC_ADDR_1$; LOC_ADDR_2$=FM0.LOC_ADDR_2$; LOC_CITY$=FM0.LOC_CITY$; LOC_ST$=FM0.LOC_ST$; LOC_ZIP_CODE$=FM0.LOC_ZIP_CODE$; LOC_COUNTRY$=FM0.LOC_COUNTRY$; IF STP(FM0.LOC_NAME$)<>"" THEN COMP_NAME_TO_SHIP_TO$=FM0.LOC_NAME$ ! SSP 307210
20636 IF NUL(FM0.LOC_NAME$) THEN COMP_NAME_TO_SHIP_TO$=FM0.LOC_DESC$
20637 IF NUL(COMP_NAME_TO_SHIP_TO$) THEN COMP_NAME_TO_SHIP_TO$=AR1.CUST_NAME$ REM END_IF; IF LOC_TYPE$="C" THEN IF NUL(ATTN_NAME$) THEN ATTN_NAME$=AR1.PURCH_AGENT$ ! SSP219508 jdf
20640 IF STP(FM0.DFLT_FOB_CODE$)<>"" THEN FOB$=FM0.DFLT_FOB_CODE$
20642 IF STP(FM0.DFLT_HOW_TO_SHIP$)<>"" THEN HOW_TO_SHIP_CODE$=FM0.DFLT_HOW_TO_SHIP$ ! SSP#237678
20644 IF STP(FM0.DFLT_INSIDE_DLVRY$)<>"" THEN INSIDE_DELIVERY$=FM0.DFLT_INSIDE_DLVRY$
20646 IF STP(FM0.DFLT_SHIP_VIA_CODE$)<>"" THEN SHIP_VIA_CODE$=FM0.DFLT_SHIP_VIA_CODE$
20648 IF STP(FM0.DFLT_SHIP_VIA_TEXT$)<>"" THEN SHIP_VIA_DESC$=FM0.DFLT_SHIP_VIA_TEXT$
20650 IF LOC_TYPE$="C" THEN IF FM0.LOC_TAX_EXEMPT$="Y" THEN TAX$="N" ELSE TAX$="Y" ! SSP248157 jdf
20651 IF AR1$(245,1)="Y" THEN TAX$="N" ELSE TAX$="Y" ! SSP#: 187704 SSP 250671
20652 STAX_CODE$=FM0.STAX_CODE$; EMAIL_ADDRESS$=FM0.EMAIL$
20653 IF LOC_TYPE$="C" THEN IF FM0.LOC_TAX_EXEMPT$="Y" THEN TAX$="N" ELSE TAX$="Y" ! SSP248157 jdf
20654 IF LEN(OS_PARM$)=0 THEN GOTO 20685; REM SSP 197118
20655 IF AR1.UNITED_ACCOUNT$<>DIM(6) THEN SHIP_ACCT_NUM$=AR1.UNITED_ACCOUNT$; REM SSP 197118
20656 IF MID(FM0.UNITED_ACCT$,1,6)<>DIM(6) THEN SHIP_ACCT_NUM$=FM0.UNITED_ACCT$; REM SSP 197118
20657 WILL_CALL$=OS_PARM$(26,1); DROP_SHIP$=OS_PARM$(57,1); REM SSP 197118
20658 IF FM0.WILL_CALL$<>DIM(1) THEN WILL_CALL$=FM0.WILL_CALL$; REM SSP 197118
20659 IF FM0.SHIP_TYPE$<>DIM(1) THEN DROP_SHIP$=FM0.SHIP_TYPE$; REM SSP 197118
20685 CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
20690 IF WIZARD_MODE THEN DISABLE CONTROL SEQ_NUM.CTL ELSE ENABLE CONTROL SEQ_NUM.CTL ! SSP 284131
20775 LOC_CODE_ENTERED_DONE: PRIOR_LOC_CODE$=LOC_CODE$ ! We're done defaulting
20776 ! GOSUB LOAD_SHIP_POINT; SSP 275467
20780 REFRESH_FLG=1
20785 CALL "*wingrp;enable",FIELDS.GRP$ ! SHOW CONTROL WZ_DONE.CTL
20790 NEXT_ID=ATTENTION.CTL
20792 GOSUB VERATAX ! SSP 217332
20795 RETURN 
20800 ! 20800 - couldn't find loc_code$
20810 LOC_CODE_MISSING:
20815 IF NUM(LOC_CODE$,ERR=*NEXT)=0 THEN GOTO 20830
20820 MSGBOX MSG("FMGODG_4")+" "+LOC_CODE$,_FYI$,"!,TIM=4"
20830 NEXT_ID=LOC_CODE.CTL,LOC_CODE$="",LOC_FLG=1 ! SSP 275467
20895 EXIT 
21000 ! 21000 - Get Order Header (FS1) info
21005 GET_FS1_INFO:
21006 ! ORDER$=FN%ZZDISP$(PO_DIV$+PO_NUM$,"O/P")
21009 DIM FS1$:CPL(FS1_IOL$)
21010 FIND (_FS1,KEY=PO_DIV$+PO_NUM$,ERR=*NEXT,DOM=*NEXT)
21012 IF %AR_DIV_LEN=0 THEN FS1_CUSTOMER$=FS1.CUST_CODE$ ELSE FS1_CUSTOMER$=FS1.CUST_DIV$+FS1.CUST_CODE$
21013 %QRY_ORDER$=PO_DIV$+PO_NUM$
21015 CALL "ZZWLKU;AR_CUST_VAL",FS1.CUST_DIV$+FS1.CUST_CODE$,"","_FS1"
21020 IF FS1.ORDER_TYPE_3$="B" THEN IF NUL(LOC_TYPE$) THEN LOC_TYPE$="D"; REFRESH_FLG=1
21030 DIM _FMP$(245); FIND (_FMP,KEY="D"+FS1.CUST_DIV$+FS1.CUST_CODE$,DOM=*NEXT)_FMP$(1)
21040 IF FS1.JOB_COSTING$="Y" THEN FM_PARM$(280,1)="N" ! SSP 239965
21095 RETURN 
21100 LOAD_FMP_DROP_BOX:! Load drop box DB_CTL from FMP assume: 1,1=DB_KEY$,2,1=code,3,15=desc. If code=DB_CODE$ then set as default answer
21101 DB_STR$=" "
21102 DROP_BOX LOAD DB_CTL,0,DB_STR$
21103 READ (_FMPS,KEY=DB_KEY$(1,1),DOM=*NEXT) ! SSP 223383
21105 READ (_FMPS,END=*RETURN)DB$; IF DB$(1,1)<>DB_KEY$ THEN GOTO *RETURN ! SSP 223383
21110 DB_STR$=DB$(2,1)+" - "+DB$(3,15)
21115 DROP_BOX LOAD DB_CTL,0,DB_STR$,ERR=*NEXT ! 0 will load at next index
21120 IF DB$(2,1)=DB_CODE$ THEN DROP_BOX WRITE DB_CTL,DB_STR$,ERR=*NEXT
21125 GOTO 21105 ! SSP 223383
21130 RETURN 
21135 LOAD_HOW_TO_SHIP: DB_CTL=HOW_TO_SHIP_CODE.CTL,DB_KEY$="H",DB_CODE$=HOW_TO_SHIP_CODE$; GOSUB LOAD_FMP_DROP_BOX; RETURN 
21140 LOAD_SHIP_VIA: DB_CTL=SHIP_VIA_CODE.CTL,DB_KEY$="S",DB_CODE$=SHIP_VIA_CODE$; GOSUB LOAD_FMP_DROP_BOX; RETURN 
21145 LOAD_FOB: DB_CTL=FOB.CTL,DB_KEY$="F",DB_CODE$=FOB$; GOSUB LOAD_FMP_DROP_BOX; RETURN 
21500 ! ^100,5 - Initialize settings for folder FMGODG.3
21505 INIT_FMGODG.3:
21510 IF NUL(ORDER_LINE_NUM$) OR ORDER_LINE_NUM$=MID(MSG("GEN_SHIP"),1,3) THEN SPECIAL_SHIP=0 ELSE SPECIAL_SHIP=1
21512 IF SPECIAL_SHIP THEN CALL "*wingrp;show",SPECIAL_SHIP.GRP$
21513 IF SPECIAL_SHIP THEN IF MID(FM_PARM$,169,1)="Y" THEN CALL "*wingrp;show",LABELS.GRP$; IF FM_PARM$(252,1)="Y" THEN CALL "*wingrp;show",LABELS_2.GRP$ END_IF ; GOSUB LOAD_FORMAT_DROP_BOXES
21515 DIM FS2$:CPL(FS2_IOL$); FIND (_FS2,KEY=FS1.ORDER_DIV$+FS1.ORDER_NUM$+ORDER_LINE_NUM$,REC=FS2$,DOM=*NEXT)
21520 SELL_UM$=FS2.SELL_UM$; SELL_UM_QTY$=STR(FS2.QTY_IN_SELL_UM)
21525 DISPLAY_SELL_QTY$=STR(FN%QTY_IN_UM(FS2.OPEN_QTY,SELL_UM$,NUM(SELL_UM_QTY$))); QTY_LEFT=FS2.OPEN_QTY; ORIG_SHIP_QTY=0; DONT_DEFAULT_SHIP_QTY=0
21528 IF LEN(PO_NUM$)<7 THEN PO_NUM$=PAD(PO_NUM$,7,1)
21530 SELECT *,REC=PO3X$ FROM "PO3"+%C$ BEGIN PO_DIV$+PO_NUM$+FS2.ORDER_LINE_NUM$+"1" END PO_DIV$+PO_NUM$+FS2.ORDER_LINE_NUM$+$FE$
21535 QTY_LEFT=QTY_LEFT-PO3X.SHIP_QTY ! ; IF QTY_LEFT<0 THEN QTY_LEFT=0
21536 IF PO3X.SEQ_NUM$=MID(SEQ_NUM$,1,1) THEN ORIG_SHIP_QTY=PO3X.SHIP_QTY; DONT_DEFAULT_SHIP_QTY=1
21540 NEXT RECORD 
21555 IF DONT_DEFAULT_SHIP_QTY THEN DONT_DEFAULT_SHIP_QTY=0 ELSE SHIP_QTY=QTY_LEFT,QTY_LEFT=0,ORIG_SHIP_QTY=SHIP_QTY ! Default to what's left
21557 QTY_LEFT$=STR(FN%QTY_IN_UM(QTY_LEFT,SELL_UM$,NUM(SELL_UM_QTY$)))
21560 SHIP_QTY$=STR(FN%QTY_IN_UM(SHIP_QTY,SELL_UM$,NUM(SELL_UM_QTY$))) ! adjust ship amount shown based on u/m
21570 IF STP(CTN_LABEL_ITEM_CODE$)="" THEN CTN_LABEL_ITEM_CODE$=FS2.CTN_LBL_FORMAT_CD$ END_IF ; IF STP(CARTON_LABEL_2$)="" THEN CARTON_LABEL_2$=FS2.CTN_LBL_CODE_2ND$
21590 REFRESH_FLG=1
21599 RETURN 
21600 ! ^100,5  make sure ship_qty is ok
21605 CHECK_SHIP_QTY:
21606 ! SHIP_QTY_OK=1; RETURN
21607 SHIP_QTY=FN%QTY_IN_EACHES(NUM(SHIP_QTY$),SELL_UM$,NUM(SELL_UM_QTY$))
21608 IF PRE_SHIP_QTY<>0 THEN IF PRE_SHIP_QTY<>SHIP_QTY THEN GOSUB WRITE_PO3_REC ! SSP245773 jdf
21609 GOSUB GET_REAL_QTY_LEFT; IF CREATE_PO3_FLG THEN CREATE_PO3_FLG=0; REMOVE (_FIL_NO,KEY=_KEY$,ERR=*NEXT) ! SSP245773 jdf
21610 IF REAL_QTY_LEFT<0 THEN SHIP_QTY_OK=0; MSGBOX MSG("FMGODG_5"),_FYI$,"BEEP,!"; NEXT_ID=SHIP_QTY.CTL; GOTO END_CHECK_SHIP_QTY ELSE CALL "*wingrp;enable",WAIT_TILL_RIGHT.GRP$; SHIP_QTY_OK=1
21615 IF SHIP_QTY<>ORIG_SHIP_QTY THEN GOSUB FIGURE_LABEL_1; GOSUB FIGURE_LABEL_2
21618 IF FPT(REAL_QTY_LEFT)=0 THEN QTY_MASK$="-##,###,###" ELSE QTY_MASK$="-##,###,###.00"
21620 IF CHECK_ALL_SHIPPED THEN CHECK_ALL_SHIPPED=0; IF NOT(NUL(ORDER_LINE_NUM$)) AND MID(ORDER_LINE_NUM$,1,3)<>MID(MSG("GEN_SHIP"),1,3) THEN IF REAL_QTY_LEFT>0 THEN SHIP_QTY_OK=0; MSGBOX MSG("FMGODG_13",STP(STR(FN%QTY_IN_UM(REAL_QTY_LEFT,SELL_UM$,NUM(SELL_UM_QTY$)):QTY_MASK$),2),DIM(1)+STP(SELL_UM$)+"/"+SELL_UM_QTY$),MSG("MB_ATTN"),"BEEP,!"; GOTO END_CHECK_SHIP_QTY ELSE SHIP_QTY_OK=1
21670 END_CHECK_SHIP_QTY:
21680 QTY_LEFT=REAL_QTY_LEFT,QTY_LEFT$=STR(FN%QTY_IN_UM(REAL_QTY_LEFT,SELL_UM$,NUM(SELL_UM_QTY$)))
21685 REFRESH_FLG=1
21695 RETURN 
21699 ! *************************************
21700 ! ^100,5 - Exit_pressed
21705 EXIT_PRESSED:
21708 IF SSC_FLG THEN SSC_FLG=0; GOTO 30570 ! SSP 273697
21709 CHECK_ALL_SHIPPED=1
21710 GOSUB CHECK_SHIP_QTY; IF SHIP_QTY_OK THEN GOTO *NEXT ELSE GOSUB LOAD_SHIP_POINT; GOTO 1460 ! SSP245773 jdf SSP 273697
21720 GOSUB CHECK_SPECIAL_SHIP_FLG ! SSP 273697
21730 IF STP(SEQ_NUM$,2)="" THEN GOTO 21750 ! SSP 273697
21740 GOSUB CHECK_LOCATION; IF LOC_FLG THEN RETURN ! SSP 275467
21750 IF NOT(GOTO_EXIT) AND MID(ORDER_LINE_NUM$,1,3)=MID(MSG("GEN_SHIP"),1,3) THEN GOSUB REVIEW_WRITE
21780 CMD_STR$="END"
21790 RETURN 
21795 ! 
21800 ! ^100,5 figure # carton label 1 if needed
21805 FIGURE_LABEL_1:
21810 IF FS2.CTN_PACK=0 OR FS2.NUM_OF_CTN_LBL_PRNT=0 THEN NUM_OF_LABELS=0; GOTO END_FIGURE_LABEL_1 ! if no code then zero labels ! SSP193429 jdf
21820 NUM_OF_LABELS=INT(SHIP_QTY/FS2.CTN_PACK*1.1+.9); IF NUM_OF_LABELS<0 THEN NUM_OF_LABELS=0
21825 NUM_OF_LABELS$=STR(NUM_OF_LABELS)
21885 END_FIGURE_LABEL_1:
21890 RETURN 
21899 ! 
21900 ! ^100,5 figure # carton label 2 if needed
21905 FIGURE_LABEL_2:
21910 IF STP(CARTON_LABEL_2$)="" OR FS2.CTN_PACK=0 OR FS2.NUM_OF_CART_LBLS_2=0 THEN NUMBER_CARTON_2ND_LABEL$="0000"; GOTO END_FIGURE_LABEL_2 ! if no code then zero labels
21920 LABEL_2=INT(SHIP_QTY/FS2.CTN_PACK*1.1+.9); IF LABEL_2<0 THEN LABEL_2=0
21925 NUMBER_CARTON_2ND_LABEL$=STR(LABEL_2:"0000")
21985 END_FIGURE_LABEL_2:
21990 RETURN 
21995 ! 
22000 ! ^100,5 - check to see if format 1 changed to or from blank
22005 CHECK_FORMAT_1:
22010 IF %FORMAT_1$<>CTN_LABEL_ITEM_CODE$ AND (%FORMAT_1$=" " OR CTN_LABEL_ITEM_CODE$=" ") THEN GOSUB FIGURE_LABEL_1; REFRESH_FLG=1
22040 RETURN 
22045 ! 
22050 ! ^50,5 - check to see if format 2 changed to or from blank
22055 CHECK_FORMAT_2:
22060 IF %FORMAT_2$<>CARTON_LABEL_2$ AND (FORMAT_2$=" " OR CARTON_LABEL_2$=" ") THEN GOSUB FIGURE_LABEL_2; REFRESH_FLG=1
22090 RETURN 
22095 ! 
22100 ! ^100,5
22105 SET_FORMAT_1: %FORMAT_1$=CTN_LABEL_ITEM_CODE$; RETURN 
22110 SET_FORMAT_2: %FORMAT_2$=CARTON_LABEL_2$; RETURN 
22200 ! ^100,5 - Ship via code entered, set ship_via desc
22205 SHIP_VIA_ENTERED:
22210 IF MID(SHIP_VIA_CODE$,1,1)<>MID(PRIOR_VAL$,1,1) THEN SHIP_VIA_DESC$=MID(SHIP_VIA_CODE$,4),REFRESH_FLG=1
22290 RETURN 
22295 ! 
22300 ! ^100,5 - They hit the back button in wizard mode
22305 WIZARD_BACK:
22310 SWITCH FOLDER_ID$
22315 CASE "FMGODG.1"; GOSUB CLEAR_REC; BREAK
22325 CASE "FMGODG.2"; NEXT_FOLDER=FLDR.FMGODG.1.CTL; BREAK
22335 CASE "FMGODG.3"; NEXT_FOLDER=FLDR.FMGODG.2.CTL; BREAK
22360 END SWITCH 
22390 RETURN 
22395 ! 
22400 ! ^100,5 - they hit the next button in wizard mode
22405 WIZARD_NEXT:
22420 SWITCH FOLDER_ID$
22425 CASE "FMGODG.1"
22430 GOSUB CHECK_LOCATION; IF LOC_FLG THEN BREAK
22438 NEXT_FOLDER=FLDR.FMGODG.2.CTL; BREAK
22440 CASE "FMGODG.2"; NEXT_FOLDER=FLDR.FMGODG.3.CTL; BREAK
22450 CASE "FMGODG.3"; GOSUB WRITE_REC; BREAK
22460 END SWITCH 
22465 REFRESH_FLG=1
22490 RETURN 
22495 ! 
22500 ! ^100, 5 - they hit the cancel button in wizard mode
22505 WIZARD_CANCEL:
22510 IF MID(ORDER_LINE_NUM$,1,3)=MID(MSG("GEN_SHIP"),1,3) THEN CMD_STR$="END"
22520 CANCEL_MODE=1; GOSUB DELETE_REC
22540 RETURN 
22545 ! 
22550 ! They hit the done button
22555 WIZARD_DONE:
22557 ! OSUB CHECK_LOCATION; IF LOC_FLG THEN RETURN 
22558 IF MID(ORDER_LINE_NUM$,1,3)=MID(MSG("GEN_SHIP"),1,3) THEN GOSUB CHECK_LOCATION; IF LOC_FLG THEN RETURN ELSE GOTO_EXIT=0; GOTO EXIT_PRESSED ! SSP
22560 CHECK_ALL_SHIPPED=1
22562 ENABLE CONTROL SEQ_NUM.CTL ! SSP 284131
22565 GOTO_EXIT=1 ! OTO WRITE_REC
22580 GOTO EXIT_PRESSED
22595 RETURN 
22599 ! 
22600 ! ^100,5 - they hit the finish button in wizard mode
22605 WIZARD_FINISH:
22607 GOSUB CHECK_LOCATION; IF LOC_FLG THEN RETURN 
22610 NEXT_FOLDER=FLDR.FMGODG.1.CTL; REFRESH_FLG=1
22615 ENABLE CONTROL SEQ_NUM.CTL ! SSO 284131
22620 GOTO WRITE_REC
22690 RETURN 
22695 ! 
22700 ! ^100,5 - Get operator defaults
22705 GET_DEFAULTS:
22710 OE_DEFAULTS_IOL:IOLIST OPERATOR_CODE$:[LEN(8)],KEY_PART$:[LEN(2)],OE_ORDER_DIV$:[LEN(2)],OE_ORDER_DATE$:[LEN(6)],OE_FOB$:[LEN(1)],OE_HOW_TO_SHIP$:[LEN(1)],OE_SHIP_VIA$:[LEN(1)],OE_CUST_SERV_REP$:[LEN(4)],OE_ORDER_TYPE$:[LEN(1)]
22715 READ DATA FROM "" TO IOL=OE_DEFAULTS_IOL; OPERATOR_CODE$=PAD(%X3_OP_ID$,8),KEY_PART$="FD"
22720 READ (ZZPARM,KEY=OPERATOR_CODE$+KEY_PART$,DOM=*NEXT)IOL=OE_DEFAULTS_IOL
22790 RETURN 
22795 ! 
22800 ! ^100,5 - Set data based on operator defaults
22805 SET_DEFAULTS:
22810 FOB$=OE_FOB$; HOW_TO_SHIP_CODE$=OE_HOW_TO_SHIP$; SHIP_VIA_CODE$=OE_SHIP_VIA$,INSIDE_DELIVERY$=OE_INSIDE_DELIVERY$ ! SSP#237678
22811 IF _FMP$(28,1)<>" " THEN FOB$=_FMP$(28,1) ! SSP#237678
22812 IF _FMP$(29,1)<>" " THEN HOW_TO_SHIP_CODE$=_FMP$(29,1) ! SSP#237678
22814 IF _FMP$(45,1)<>" " THEN SHIP_VIA_CODE$=_FMP$(45,1) ! ssp 202877
22815 DIM SV$(256); READ (_FMPS,KEY="S"+SHIP_VIA_CODE$,DOM=*NEXT)SV$ ! SSP 223383
22817 SHIP_VIA_DESC$=SV$(3,15)
22818 IF _FMP$(30,15)<>DIM(15) THEN INSIDE_DELIVERY$=_FMP$(30,15) ! SSP#237678
22820 ! NEXT RECORD ! SSP 223383
22830 IF FS1.ORDER_TYPE_3$="B" THEN IF NUL(LOC_TYPE$) THEN LOC_TYPE$="D"; REFRESH_FLG=1
22890 RETURN 
22895 ! 
22900 ! ^100,5 - set QTY_STRING$ based on sp.ship_qty
22905 SET_QTY_STRING:
22910 QTY_STRING$=""; QS=FN%QTY_IN_UM(SP.SHIP_QTY,FS2.SELL_UM$,FS2.QTY_IN_SELL_UM)
22920 IF QS=0 THEN QTY_STRING$=MSG("NONE")+" ->"; RETURN 
22930 IF FPT(QS)=0 THEN QTY_STRING$=STR(QS:"-#,###,###") ELSE QTY_STRING$=STR(QS:"-#,###,###.00")
22940 QTY_STRING$=STP(QTY_STRING$,2)+" -> "
22990 RETURN 
22995 ! 
23000 LOOKUP_ZIP:! Lookup zipcode, set city & state if found, set NEW_ZIP for later use
23005 NEW_ZIP=0
23010 CALL "ZYGMBA;CHECK_ZIP",LOC_ZIP_CODE$,ZIP_FOUND,ZIP_CITY$,ZIP_ST$,"",ZIP_AREA_CODE$,""
23015 IF LOC_PHONE$="" THEN LOC_PHONE$=DIM(14)
23020 IF ZIP_FOUND THEN LOC_CITY$=ZIP_CITY$,LOC_ST$=ZIP_ST$,LOC_PHONE$(1,3)=ZIP_AREA_CODE$; REFRESH_FLG=1,NEXT_ID=MARK_FOR.CTL ELSE NEW_ZIP=1
23095 RETURN 
23099 ! 
23100 UPDATE_ZIP:! If new_zip then update the zip code table
23110 IF NEW_ZIP THEN CALL "ZYGMBA;UPDATE_ZIP",LOC_ZIP_CODE$,LOC_CITY$,LOC_ST$,"",LOC_PHONE$(1,3),LOC_CITY$ ! get area code from phone,long city from regular city
23120 NEW_ZIP=0
23195 RETURN 
23199 ! 
23299 ! 
23300 CHECK_FM:! Check location code for "M"  SSP208912 jdf created subroutine
23310 IF _FM0_M=0 THEN _FM0_M=HFN; OPEN (_FM0_M,IOL=*)"FM0"+%C$
23320 LOC_CODE$=STR(NUM(LOC_CODE$,ERR=*NEXT):"0000")
23330 LOC_CODE$=PAD(LOC_CODE$,4),REFRESH_FLG=1; GOSUB LOC_CODE_SANITY_CHECK
23340 FIND (_FM0_M,KEY=%FM0_PREFIX$+LOC_CODE$,REC=FM0_M$,DOM=*NEXT); GOTO 23351
23350 IF (LOC_CODE_M$="M") AND MID(_FMP$,24,1)="Y" THEN LCP_MSG$=MSG("Manual Ship To is not allowed"); GOTO LOC_CODE_PROBLEM ! SSP208912
23360 GOTO 20614 ! SSP208912 jdf
23370 ! 
24000 PRE_FOLDER_2:! Save off values & reload
24010 FOB2$=FOB$,FOB$=""
24020 HOW_TO_SHIP_CODE2$=HOW_TO_SHIP_CODE$,HOW_TO_SHIP_CODE$=""
24030 SHIP_VIA_CODE2$=SHIP_VIA_CODE$,SHIP_VIA_CODE$=""
24045 RETURN 
24049 ! 
24050 RESTORE_FOLDER_2:! Restore values saved off
24055 FOB$=FOB2$
24060 HOW_TO_SHIP_CODE$=HOW_TO_SHIP_CODE2$
24065 SHIP_VIA_CODE$=SHIP_VIA_CODE2$
24095 RETURN 
24099 ! 
25105 GET_ORDER:
25110 CALL "ZZWLKU;PARSE_ORD",ORDER$,PO_DIV$,PO_NUM$
25115 GOSUB GET_FS1_INFO
25120 REFRESH_FLG=1
25195 RETURN 
26000 GET_REAL_QTY_LEFT:! Determine qty left by running through the lines, skip the current one and get it's amount from SHIP_QTY
26010 IF FS2.OPEN_QTY<0 THEN REAL_QTY_LEFT=0; GOTO *RETURN
26020 IF CHECK_ALL_SHIPPED THEN REAL_QTY_LEFT=FS2.OPEN_QTY,CURR_SEQ_NUM$=$00$ ELSE REAL_QTY_LEFT=FS2.OPEN_QTY,CURR_SEQ_NUM$=MID(SEQ_NUM$,1,1)
26025 IF LEN(PO_NUM$)<7 THEN PO_NUM$=PAD(PO_NUM$,7,1)
26030 SELECT *,REC=PO3X$ FROM "PO3"+%C$ BEGIN PO_DIV$+PO_NUM$+FS2.ORDER_LINE_NUM$+"1" END PO_DIV$+PO_NUM$+FS2.ORDER_LINE_NUM$+$FE$
26035 IF PO3X.SEQ_NUM$<>CURR_SEQ_NUM$ THEN REAL_QTY_LEFT-=PO3X.SHIP_QTY
26040 NEXT RECORD 
26095 RETURN 
26099 ! **********************************************************
26500 WRITE_PO3_REC:! SSP245773 jdf
26505 HOLD_SHIP_QTY=SHIP_QTY ! SSP247434  jdf
26510 FIND (_FIL_NO,KEY=_KEY$,DOM=*NEXT); GOTO 26515 ! SSP245773 jdf
26512 CREATE_PO3_FLG=1 ! SSP245773 jdf
26515 SHIP_QTY=HOLD_SHIP_QTY,PRE_SHIP_QTY=SHIP_QTY; CHECK_ALL_SHIPPED=1 ! SSP247434 jdf
26520 SEQ_NUM$=_KEY$(13,1); WRITE (_FIL_NO,KEY=_KEY$) ! SSP245773 jdf !SSP#287568
26530 RETURN ! SSP245773 jdf
28950 LOAD_FORMAT_DROP_BOXES:! Load the format drop boxes
28955 FINDEX=0,F1INDEX=0,F2INDEX=0; DROP_BOX LOAD CTN_LABEL_ITEM_CODE.CTL,"",ERR=*PROCEED; IF FM_PARM$(252,1)="Y" THEN DROP_BOX LOAD CARTON_LABEL_2.CTL,"",ERR=*NEXT
28960 SELECT FORMAT$ FROM "ZZPARM" BEGIN "FORMATCL " END "FORMATCL~"
28965 FCODE$=MID(FORMAT$,9,1),FDESC$=STP(MID(FORMAT$,10,30),2)
28970 DROP_BOX LOAD CTN_LABEL_ITEM_CODE.CTL,++FINDEX,FCODE$+" - "+FDESC$,ERR=*NEXT
28972 IF FCODE$=CTN_LABEL_ITEM_CODE$ THEN F1INDEX=FINDEX
28975 IF FM_PARM$(252,1)="Y" THEN DROP_BOX LOAD CARTON_LABEL_2.CTL,FINDEX,FCODE$+" - "+FDESC$,ERR=*PROCEED; IF FCODE$=CARTON_LABEL_2$ THEN F2INDEX=FINDEX
28980 NEXT RECORD 
28985 IF F1INDEX THEN DROP_BOX WRITE CTN_LABEL_ITEM_CODE.CTL,F1INDEX,ERR=*NEXT
28986 IF F2INDEX THEN DROP_BOX WRITE CARTON_LABEL_2.CTL,F2INDEX,ERR=*NEXT
28995 RETURN 
28999 ! 
29000 LOC_CODE_SANITY_CHECK:! Verify basic things before reading, etc
29010 IF POS(FS1.ORDER_TYPE_3$="BC")>0 AND (LOC_CODE$<"0000" OR LOC_CODE$>"8999") THEN LCP_MSG$=MSG("FMGODG_20"); GOTO LOC_CODE_PROBLEM; REM "110781 Make logic match PO P1
29015 IF LOC_TYPE$="D" AND MID(LOC_CODE$,1,1)="M" THEN LCP_MSG$=MSG("FMGODG_21"); GOTO LOC_CODE_PROBLEM
29020 IF LOC_TYPE$="D" AND LOC_CODE$<"9000" AND POS(FS1.ORDER_TYPE_3$="BC")=0 THEN LCP_MSG$=MSG("FMGODG_22"); GOTO LOC_CODE_PROBLEM; REM " REMARK to allow Distributor Owned Goods
29045 RETURN 
29050 LOC_CODE_PROBLEM:! problem with loc code go back
29060 MSGBOX LCP_MSG$,MSG("MB_ATTN"),"STOP"
29065 LOC_CODE$=""
29070 NEXT_ID=LOC_CODE.CTL
29095 EXIT 
29099 ! 
30000 PUT_DFLT:
30004 IF _AR1=0 THEN _AR1=HFN; OPEN (_AR1,IOL=*)"AR1"+%C$; CALL "ZZWIOL",_AR1,"B",AR1_IOL$
30005 DIM AR1$(618); READ (_AR1,KEY=%CUSTOMER$,DOM=*NEXT)AR1$(1)
30006 _FSV$=PAD(_FSV$,150)
30007 IF OLD_REC THEN GOTO 30075 ! SSP 197207
30010 IF NUL(STAX_CODE$) THEN STAX_CODE$=TBL(NUL(FS1.STAX_CODE$),FS1.STAX_CODE$,AR1$(235,10))
30015 IF NUL(TAX$) AND AR1$(245,1)="Y" THEN TAX$="N" ELSE TAX$="Y"
30020 IF NUL(LOC_ADDR_1$) THEN LOC_ADDR_1$=TBL(NUL(_FSV$(54,30)),_FSV$(54,30),AR1$(56,30))
30030 IF NUL(LOC_ADDR_2$) THEN LOC_ADDR_2$=TBL(NUL(_FSV$(84,30)),_FSV$(84,30),AR1$(86,30))
30040 IF NUL(LOC_CITY$) THEN LOC_CITY$=TBL(NUL(_FSV$(114,16)),_FSV$(114,16),AR1$(116,16))
30050 IF NUL(LOC_ST$) THEN LOC_ST$=TBL(NUL(_FSV$(130,2)),_FSV$(130,2),AR1$(132,2))
30060 IF NUL(LOC_ZIP_CODE$) THEN LOC_ZIP_CODE$=TBL(NUL(_FSV$(132,9)),_FSV$(132,9),AR1$(134,9))
30070 IF NUL(ATTN_NAME$) THEN ATTN_NAME$=TBL(NUL(FS1$(129,20)),FS1$(129,20),AR1$(165,20))
30075 IF NUL(COMP_NAME_TO_SHIP_TO$) THEN COMP_NAME_TO_SHIP_TO$=TBL(NUL(_FSV$(19,35)),_FSV$(19,35),AR1$(11,35))
30095 RETURN 
30099 ! ***********************************************************
30200 LOC_TYPE_ENTERED:! loc type entered so default
30210 IF LOC_TYPE$<>PRIOR_VAL$ THEN {
30250 IF MID(_FMP$,24,1)<>"Y" AND LOC_TYPE$<>"D" THEN GOSUB PUT_DFLT ELSE STAX_CODE$=DIM(10),LOC_ADDR_1$=DIM(30),LOC_ADDR_2$=DIM(30),LOC_CITY$=DIM(16),LOC_ST$=DIM(2),LOC_ZIP_CODE$=DIM(9),ATTN_NAME$=DIM(20),COMP_NAME_TO_SHIP_TO$=DIM(35),NEXT_ID=LOC_CODE.CTL ! SSP206986   jdf
30280  }
30295 RETURN 
30299 ! ****************************************************************
30300 LOC_CODE_QRY:! Change loc code query based on type
30305 QRY_VAL$=""
30310 SWITCH LOC_TYPE$
30320 CASE "C"
30325 PROCESS "QRY_FM0.ORD","../OPG/OP.EN",VAL$; IF NOT(NUL(VAL$)) THEN QRY_VAL$=VAL$
30329 BREAK
30330 CASE "D"
30335 PROCESS "QRY_FM0D","../OPG/OP.EN",VAL$; IF NOT(NUL(VAL$)) THEN QRY_VAL$=VAL$
30339 BREAK
30340 CASE "P"
30345 PROCESS "QRY_FM0P","../OPG/OP.EN",VAL$; IF NOT(NUL(VAL$)) THEN QRY_VAL$=VAL$
30349 BREAK
30350 END SWITCH 
30395 RETURN 
30399 ! *****************************************
30500 CHECK_SPECIAL_SHIP:! Look to see if the there is special Shipping.
30505 SSC_FLG=0 ! SSP 273697
30510 IF FS2.SPECIAL_SHIPPING$<>"Y" THEN RETURN 
30520 KEY_PO3$=_KEY$(1,12)
30530 READ (_FIL_NO,KEY=KEY_PO3$,DOM=*NEXT)
30540 KEY_PO3$=KEY(_FIL_NO,END=*RETURN)
30550 READ (_FIL_NO,KEY=KEY_PO3$)
30560 IF KEY_PO3$(1,12)=_KEY$(1,12) AND KEY_PO3$(13,1)<>" " THEN RETURN 
30570 MSGBOX MSG("FMGODG_6"),MSG("VERIFY"),"?,YesNo",ANS$
30580 IF ANS$="NO" THEN NEXT_ID=SEQ_NUM.CTL; SHIP_QTY_OK=0; GOSUB CLEAR_REC; ORDER_LINE_NUM$=HLD_LINE_NUM$; GOSUB LOAD_SHIP_POINT; CHECK_ALL_SHIPPED=1; OLD_FLG=1; SSC_FLG=1,LINE_SELECTED=1; GOTO LINE_NUM_ENTERED ! SSP 273697 
30585 ORDER_LINE_NUM$=MID(MSG("GEN_SHIP"),1,3); %SSP_DEL=1
30590 DISABLE CONTROL SEQ_NUM.CTL; ENABLE CONTROL ORDER_LINE_NUM.CTL
30595 FS2.SPECIAL_SHIPPING$="N"
30650 WRITE (_FS2,KEY=FS2.ORDER_DIV$+FS2.ORDER_NUM$+FS2.ORDER_LINE_NUM$,REC=FS2$)
30652 %SS_FLG=1 ! SSP 273697
30655 CMD_STR$="END"; EXIT ! should leave if special ship is deleted.
30660 GOSUB LOAD_ORDER_LINE; LOC_TYPE$=""; GOSUB SET_LOC_TYPE ! NEXT_ID=ORDER_LINE_NUM.CTL
30665 GOSUB CLEAR_FIELDS; CALL "*WINGRP;ENABLE",LOC_CODE.GRP$; NEXT_ID=LOC.CODE.CTL
30670 %SS_FLG=1
30675 KEY_PO3$=_KEY$(1,9)+"    "
30680 READ (_FIL_NO,KEY=KEY_PO3$,DOM=30690); GOSUB DISP_REC
30685 CALL "*wingrp;Enable",FIELDS.GRP$
30690 REFRESH_FLG=1
30695 RETURN 
30699 ! ******************************************
30700 CHECK_SPECIAL_SHIP_FLG:! Look to see if FS2 FLAG IS CHECKED BUT NO RECORDS EXIST IN PO3. SSP 273697
30710 ! IF FS2.SPECIAL_SHIPPING$<>"Y" THEN RETURN 
30715 SS_CNT=0
30720 SELECT *,REC=PO3X$ FROM "PO3"+%C$ BEGIN PO_DIV$+PO_NUM$+FS2.ORDER_LINE_NUM$+"1" END PO_DIV$+PO_NUM$+FS2.ORDER_LINE_NUM$+$FE$
30730 SS_CNT=SS_CNT+1
30740 NEXT RECORD 
30750 IF SS_CNT>0 THEN FS2_SS$="Y" ELSE FS2_SS$="N"
30760 FS2.SPECIAL_SHIPPING$=FS2_SS$
30770 WRITE (_FS2,KEY=FS2.ORDER_DIV$+FS2.ORDER_NUM$+FS2.ORDER_LINE_NUM$,REC=FS2$)
30780 RETURN 
30799 ! 
30900 ! Check Location Code Validation
30910 CHECK_LOCATION:
30920 LOC_FLG=0
30925 IF FS1.ORDER_TYPE_3$="B" AND NUL(LOC_CODE$) AND NUL(ORDER_LINE_NUM$) AND NUL(SEQ_NUM$) THEN LOC_FLG=0; RETURN ! SSP234515 jdf
30930 IF FS1.ORDER_TYPE_3$="B" AND NUL(LOC_CODE$) THEN {
30935 NEXT_ID=LOC_CODE.CTL; MSGBOX MSG("FMGODG_25"),MSG("FYI"),"!"; LOC_FLG=1; RETURN 
30937  } ELSE {
30940 IF MID(_FMP$,24,1)="Y" AND NUL(LOC_CODE$) AND LOC_TYPE$<>"D" THEN {
30945 NEXT_ID=LOC_CODE.CTL; MSGBOX MSG("FMGODG_24"),MSG("FYI"),"!"; LOC_FLG=1; RETURN 
30947  } ELSE {
30950 IF FS2.SPECIAL_SHIPPING$="Y" AND NUL(LOC_CODE$) AND LOC_TYPE$<>"C" THEN {
30955 NEXT_ID=LOC_CODE.CTL; MSGBOX MSG("FMGODG_26"),MSG("FYI"),"!"; LOC_FLG=1; RETURN 
30960  }
30970 GOSUB LOC_CODE_SANITY_CHECK ! IF LOC_CODE$="" THEN IF MID(_FMP$,24,1)="Y"THEN MSGBOX MSG("LOC_RQ"),MSG("FYI"),"!"; LOC_FLG=1 ! SSP 275467
30980 ! IF MID(_FMP$,24,1)="Y" THEN IF STP(LOC_CODE$)<>"M" THEN GOSUB SET_FM0_PREFIX; FIND (_FM0,KEY=%FM0_PREFIX$+LOC_CODE$,REC=FM0$,DOM=LOC_CODE_MISSING)
30990 RETURN 
30995 ! **************************************
31000 VERATAX: REFRESH_FLG=1 ! SSP 217332
31002 IF NUL(%CUSTOMER$) THEN %CUSTOMER$=FS1.CUST_DIV$+FS1.CUST_CODE$
31003 READ (_AR11,KEY=%CUSTOMER$,DOM=*RETURN)AR1$ ! SSP 283133 MOVED FROM 31020
31005 IF AR$(128,1)<>"Y" AND SPECIAL_SHIP AND LOC_TYPE$="D" THEN STAX_CODE$=""; GOTO DEFAULT_TAX; REM SSP 217332
31007 IF AR$(128,1)="Y" AND AR$(129,1)<>"Y" AND SPECIAL_SHIP AND LOC_TYPE$="D" AND LOC_ST$=AR1$(132,2) THEN STAX_CODE$=""; GOTO DEFAULT_TAX ! SSP#192911
31010 IF AR$(134,1)<>"Y" THEN READ (_AR11,KEY=%CUSTOMER$,DOM=DEFAULT_TAX)AR1$; GOTO DEFAULT_TAX ! SSP 217332
31015 ! IF AR$(128,1)<>"Y" AND SPECIAL_SHIP AND LOC_TYPE$="D" THEN STAX_CODE$=""; GOTO DEFAULT_TAX; REM SSP 217332
31017 ! IF AR$(128,1)="Y" AND AR$(129,1)<>"Y" AND SPECIAL_SHIP AND LOC_TYPE$="D" AND LOC_ST$<>AR1$(132,2) THEN STAX_CODE$=""; GOTO DEFAULT_TAX ! SSP#192911
31020 READ (_AR11,KEY=%CUSTOMER$,DOM=*RETURN)AR1$ ! SSP 217332
31030 READ (_AR5,KEY=AR1$(235,10),KNO=0,DOM=*NEXT)CUST_TAX$
31040 IF MID(CUST_TAX$,182,1)="Y" THEN GOTO DEFAULT_TAX
31050 READ (_AR5,KEY=STAX_CODE$,KNO=0,ERR=*NEXT)SHIP_TAX$
31060 IF MID(SHIP_TAX$,182,1)="Y" THEN GOTO DEFAULT_TAX
31070 IF (POS(%X3$(9,3)="101118590601",3)<>0 OR MID(ARPARM3$,9,1)="Y") AND MID(STAX_CODE$,1,7)=LOC_ST$+MID(LOC_ZIP_CODE$,1,5) THEN STAX_CODE$=STAX_CODE$; GOTO DEFAULT_TAX ! 230142 SSP 235445  ! SSP252208 jdf
31075 REM "245342-Lookup tax code using city, state and zip using called program - Replaced lines 31080-31110 with line 31115
31080 ! READ (_AR5,KEY=LOC_ST$+LOC_ZIP_CODE$(1,5),KNO=1,DOM=*NEXT); REM ELSE STAX_CODE$=CUST_TAX$(1,10); GOTO DEFAULT_TAX ! SSP 217332
31090 ! TAX_KEY$=KEY(_AR5,KNO=1,END=*NEXT)
31100 ! IF MID(TAX_KEY$,1,7)<>MID(LOC_ST$,1,2)+MID(LOC_ZIP_CODE$,1,5) THEN TAX_KEY$=LOC_ST$+DIM(8); READ (_AR5,KEY=TAX_KEY$,KNO=0,ERR=*NEXT)AR5$; STAX_CODE$=AR5$(1,10); GOTO DEFAULT_TAX
31110 ! READ (_AR5,KEY=TAX_KEY$,KNO=1,ERR=*NEXT)AR5$; STAX_CODE$=AR5$(1,10)
31115 CALL "TW2FUN;LOOKUP_TAX_CODE",ERR=*NEXT,%X3$,%X4$,LOC_ST$,MID(LOC_ZIP_CODE$,1,5),LOC_CITY$,"",T$,T{ALL}; STAX_CODE$=T$(1,10) ! 245342
31120 IF POS(%X3$(9,3)="101",3)<>0 AND FS1.CUST_DIV$="13" AND STAX_CODE$="IL"+DIM(8) THEN STAX_CODE$="ILCH"+DIM(6) ! SSP307430-DBD-306-DBSPT-149880
31130 DEFAULT_TAX:
31140 IF STP(STAX_CODE$)="" THEN STAX_CODE$=AR1$(235,10)
31142 IF NUL(SEQ_NUM$) THEN FS1.TAXABLE$=TAX$ ! SSP#269637
31145 FS1.STAX_CODE$=STAX_CODE$; WRITE (_FS1,KEY=FS1.ORDER_DIV$+FS1.ORDER_NUM$)
31150 READ (_AR5,KNO=0,ERR=*NEXT) ! SSP 223039
31160 RETURN ! SSP 223039
56000 ! "197207-Order Shipping - Using ship-to, if any data lines are blank,
56001 REM "197058-Tax issue - Customer is exempt, line 1 is non-taxable, but
56002 REM "202876-Shipping Panel FM2ODG should not show the Tops fields if
56010 ! "202877-Changing order entry defaults does not refresh in Order
56011 ! "       Entry"
56020 REM "203458-Addition of S.P. Richards to TOPS module
56022 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56024 REM "208912-GUI order entry is allowing entry of an M-Manual shipto     
56026 REM "193429-GUI -  of carton labels when have special shipping          
56028 REM "219508-When you pick a ship-to code with no Attention To, why      
56029 ! "217332-Veratax system needs to be converted to gui                 
56030 ! "223039-On Dev dataset, while testing Veratax download, getting     
56032 ! "223383-Company 589 is getting stuck in the shipping info screen in 
56033 REM "230142-Issue with Sales Tax import: Tax rate for State MO not      
56034 REM "235445-Modify sales tax programs to enabled require logic based on 
56035 REM "237678-Shipping options from the order entry defaults does default properly
56036 REM "239965-Can not do a custom order PO code 2 on a B type order in    
56037 REM "192911-Gui portion of 137035 (066) Taxes on Merchandise shipped to 
56038 REM "245773-Program FMGODG The qty left to shipped field is incorrect   
56040 REM "248358-More than one person can access an order in gui.            
56041 REM "250671-Orders are coming thru without sales tax. They have special 
56042 REM "252208-Sales tax code lookup not working correctly for Suwanee, GA 
56043 REM "269637-Sales Tax Issue - ship to is tax exempt, but tax is getting 
56044 REM "273697-PO's and special shipping - special shipping is checked, but
56045 REM "275467-FMGODG-special shipping - Able to set the shipto code to a  
56046 REM "287568-Ship point quantity not showing up for order                
56047 REM "307210-International shipping address - add country code           
56048 REM "307430-DBD-333;Add 101 to some of 288's company specfic code       
