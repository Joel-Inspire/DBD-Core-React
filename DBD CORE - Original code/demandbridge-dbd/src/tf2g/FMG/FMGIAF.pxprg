0010 ! FMGIAF - Customer Location
0035 REM "5.7 - 07/21/22 - 10.042107 - crg - SSP# 307410
0037 REM "307410-DBD-273 - Long receiving dept field changes using ZYR file  
0040 REM "Copyright 2022 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 _CUSTOMER$=%CUSTOMER$
0060 PROCESS "FMGIAF","../FMG/FM.EN"
0070 %CUSTOMER$=_CUSTOMER$
0080 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=USAGE_START.CTL
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="FM4"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0182 _IC0=HFN,_FILE_NAME$="IC0"+%C$; OPEN (_IC0,ERR=OPEN_ERR,IOL=*,REC=IC0$)_FILE_NAME$
0185 _FM0=HFN,_FILE_NAME$="FM0"+%C$; OPEN (_FM0,ERR=OPEN_ERR)_FILE_NAME$
0186 _FS6=HFN,_FILE_NAME$="FS6"+%C$; OPEN (_FS6,ERR=OPEN_ERR)_FILE_NAME$
0187 _FST=HFN,_FILE_NAME$="FST"+%C$; OPEN (_FST,ERR=OPEN_ERR)_FILE_NAME$
0188 _FMP=HFN,_FILE_NAME$="FMP"+%C$; OPEN (_FMP,ERR=OPEN_ERR)_FILE_NAME$
0189 _FM1=HFN,_FILE_NAME$="FM1"+%C$; OPEN (_FM1,ERR=OPEN_ERR)_FILE_NAME$
0190 RT_PARM$=""; CALL "RT2PRM",ERR=*NEXT,%X3$,%X4$,RT_PARM$
0191 _FILE_NAME$="ZYR"+%C$,_ZYR=HFN; OPEN (_ZYR,ERR=OPEN_ERR)_FILE_NAME$ ! 307410
0199 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=3
0425 CUSTOMER$=%CUSTOMER$; ITEM_CODE$=%ITEM_CODE$
0430 DIM _KEYS$[1:3]; _KEYS$[1]="CUSTOMER$",_KEYS$[2]="ITEM_CODE$",_KEYS$[3]="LOC_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 CUSTOMER$=%CUSTOMER$; ITEM_CODE$=%ITEM_CODE$,ARG_1$=CUSTOMER$+ITEM_CODE$
0537 DISABLE CONTROL CUSTOMER.CTL; DISABLE CONTROL ITEM_CODE.CTL; GOSUB ENABLE_GROUPS
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0700 ! 700 - Set up tabbing between folders
0710 INIT_FOLDER:
0720 GOSUB ENABLE_GROUPS
0730 IF _ENABLE_FLG<>_KEY1 THEN IF TAB_FLG$="<" THEN NEXT_ID=_LAST_TAB ELSE NEXT_ID=_FIRST_TAB
0740 EXIT 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 IF _IC0<>0 THEN CLOSE (_IC0); _IC0=0
0950 IF _FM0<>0 THEN CLOSE (_FM0); _FM0=0
0955 IF _FS6<>0 THEN CLOSE (_FS6); _FS6=0
0960 IF _FST<>0 THEN CLOSE (_FST); _FST=0
0965 IF _FMP<>0 THEN CLOSE (_FMP); _FMP=0
0970 IF _FM1<>0 THEN CLOSE (_FM1); _FM1=0
0971 IF _ZYR<>0 THEN CLOSE (_ZYR); _ZYR=0 ! 307410
0980 MESSAGE_LIB _SV_MSGLIB$
0990 SET_PARAM 'KR'=_SV_KR
0995 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1215 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1217 IF STP(LOC_CODE$,3)="" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT ! SSP#253696
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 GOSUB SET_DEFAULTS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1280 NEXT_FOLDER=_FIRST_FOLDER
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 _CLR_FLG$="FL"; GOSUB CLEAR_FIELDS; REFRESH_FLG=1; NEXT_ID=LOC_CODE.CTL,NEXT_FOLDER=FLDR.FMGIAF.1.CTL ! SSP#257969
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 IF MID(_KEY$,1,20)<>%CUSTOMER$+%ITEM_CODE$ THEN GOTO END_OF_FILE
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE:IF STP(LOC_CODE$,3)<>"" THEN MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT ELSE EXIT ! ssp#253663
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); IF MID(_KEY$,1,20)<>%CUSTOMER$+%ITEM_CODE$ THEN GOTO START_OF_FILE
2235 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2425 READ (_FIL_NO,KEY=%CUSTOMER$+%ITEM_CODE$,DOM=*NEXT)
2430 _KEY$=KEY(_FIL_NO,ERR=NO_FIRST)
2435 IF MID(_KEY$,1,20)<>%CUSTOMER$+%ITEM_CODE$ THEN GOTO NO_FIRST
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2622 READ (_FIL_NO,KEY=%CUSTOMER$+%ITEM_CODE$+"~~~~",DOM=*NEXT)
2623 GOTO PRIOR_REC
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3061 CUSTOMER$=CUST_DIV$+CUST_CODE$
3070 READ (_IC0,KEY=CUSTOMER$+ITEM_CODE$,REC=IC0$,ERR=*NEXT); GOTO 3072
3071 READ (_FM1,KEY=CUSTOMER$+ITEM_CODE$,DOM=*NEXT)FM1$; IC0.PLYS$=FM1$(40,2),IC0.TOP_BOTTOM$=FM1$(32,8),IC0.LEFT_RIGHT$=FM1$(24,8),IC0.PROD_CODE$=FM1$(21,3)
3072 READ (_FM0,KEY="C"+CUSTOMER$+LOC_CODE$,ERR=*NEXT)FM0$
3073 GOSUB GET_LONG_BILL_DEPT
3080 VENDOR$=IC0.VEND_DIV$+IC0.VEND_CODE$ ! ; CALL "ZZWLKU;PARSE",VENDOR$,IC0.VEND_DIV$,IC0.VEND_CODE$
3081 DIM X[20]; Q$="C"+LOC_CODE$; CALL "FM2UZR",ERR=*NEXT,%X3$,CUSTOMER$+ITEM_CODE$,Q$,0,0,0,0,USAGE_TREND,0,X{ALL},CUSTOMER$ ! SSP#242271
3082 GOSUB COMPUTE_EST ! SSP#242271
3085 NEXT_ID=USAGE_START.CTL
3090 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 ! GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3327 GOSUB SET_LONG_BILL_DEPT
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUSTOMER.CTL,_FIRST_FIELD=USAGE_START.CTL,_FIRST_FOLDER=FLDR.FMGIAF.1.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
7600 COMPUTE_EST:! SSP#242271
7601 DEF FND$(Z9$)=Z9$(NUM(%X3$(48,1))*2+1,2)+%X3$(59,1)+Z9$(7-NUM(%X3$(48,1))*2,2)+%X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####") ! SSP#242271
7602 EST_ON_HAND$="",EST_OUT_DATE$="",REFRESH_FLG=1
7604 SETERR 7690; IF FM0$(223,1)="E" AND FM0$(321,2)<>"  " THEN GOTO 7610 ! SSP#242271
7605 IF FM0$(223,1)<>"C" THEN GOTO 7690 ! SSP#242271
7610 E0=LAST_CNT_QTY+DRCT_SHPMT_SINCE_CNT+DIST_SHPMT_SINCE_CNT-EST_USAGE_AFT_CNT,EST_OUT_DATE$=LAST_CNT$; IF EST_OUT_DATE$=DIM(6) THEN EST_OUT_DATE$=%X3$(21,6) ! SSP#242271
7620 Q$=%X3$(21,6); CALL "YDYSBT",%X3$,EST_OUT_DATE$,Q$,D0; IF D0<0 THEN D0=0 ! SSP#242271
7625 E1=AVG_MTHLY_USAGE*D0/30,E2=E0-E1,E3=INT(E2/AVG_MTHLY_USAGE*30); IF E3>3650 THEN E3=3650 ! SSP#242271
7630 CALL "ZZDATE",%X3$,"",Q$,E0$,E3,0,0,0,0,0,0,"","","" ! EST_OUT_DATE$=FND$(EST_OUT_DATE$) ! SSP#242271!Moved to 7690 SSP#253641
7635 Q$=" "; IF E2<RO_PT_MIN_IN_QTY THEN Q$=$1B$+"BB" ! SSP#242271
7640 IF E2<0 THEN EST_ON_HAND$="! OUT ! " ELSE EST_ON_HAND$=STR(E2:M0$) ! SSP#242271
7644 Q$=" "; IF E3<RO_PT_MIN_IN_DAYS THEN Q$=$1B$+"BB" ! SSP#242271
7647 IF E3>=3650 THEN EST_OUT_DATE$="** Unsure **" ! SSP#242271
7690 IF STP(EST_OUT_DATE$)<>"" THEN EST_OUT_DATE$=FND$(EST_OUT_DATE$,ERR=*NEXT) ! SSP#253641!SSP#256387
7695 RETURN ! SSP#242271
8200 SET_DEFAULTS:! SSP#256546                                                
8220 DIM FMS_DEFAULTS$(220),FMS_DEFAULTS[1]; FIND (_FMP,KEY="A"+%CUSTOMER$,DOM=8290)FMS_DEFAULTS$,FMS_DEFAULTS[0],FMS_DEFAULTS[1]
8230 AUTO_RESTOCK_METHOD$=FMS_DEFAULTS$(16,1),STND_WHSE$=FMS_DEFAULTS$(17,4),RO_PT_MIN_IN_QTY$=STR(FMS_DEFAULTS[0]),RO_PT_QTY$=STR(FMS_DEFAULTS[1]),RO_PT_MIN_IN_DAYS$=FMS_DEFAULTS$(21,3); RO_PT_DAYS$=FMS_DEFAULTS$(24,3)
8290 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR"),_MSG_DIRECTORY$=MSG("DIRECTORY"),_MSG_END_OF_FIL$=MSG("END_OF_FIL"),_MSG_FILOPNERR1$=MSG("FILOPNERR1"),_MSG_JUST_CHECK$=MSG("JUST_CHECK"),_MSG_MANDATORY$=MSG("MANDATORY"),_MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER"),_MSG_NOT_FOUND$=MSG("NOT_FOUND"),_MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG"),_MSG_PRECEDING$=MSG("PRECEDING"),_MSG_PREFIX$=MSG("PREFIX"),_MSG_REC_ACCESS$=MSG("REC_ACCESS"),_MSG_REC_ALTERD$=MSG("REC_ALTERD"),_MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED"),_MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1),_MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST"),_MSG_REC_NO_LST$=MSG("REC_NO_LST"),_MSG_REC_REMOVE$=MSG("REC_REMOVE"),_MSG_REC_UPDADD$=MSG("REC_UPDADD"),_MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1),_MSG_REQ_FIELDS$=MSG("REQ_FIELDS"),_MSG_START_FILE$=MSG("START_FILE"),_MSG_UPDATE$=MSG("UPDATE"),_MSG_UPD_OTHER1$=MSG("UPD_OTHER1"),_MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME"),_MSG_WARNING$=MSG("WARNING"),_MSG_CANNOT_WRITE$=MSG("CANT_WRITE"),_MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 FM4_UNUSED_4$=STR(FM4_UNUSED_4),AVG_MTHLY_USAGE$=STR(AVG_MTHLY_USAGE),RO_PT_MIN_IN_DAYS$=STR(RO_PT_MIN_IN_DAYS),RO_PT_MIN_IN_QTY$=STR(RO_PT_MIN_IN_QTY)
10060 LAST_CNT_QTY$=STR(LAST_CNT_QTY),DRCT_SHPMT_SINCE_CNT$=STR(DRCT_SHPMT_SINCE_CNT),DIST_SHPMT_SINCE_CNT$=STR(DIST_SHPMT_SINCE_CNT),DRCT_SHPMT_AFT_FRZN$=STR(DRCT_SHPMT_AFT_FRZN)
10100 DIST_SHPMT_AFT_FRZN$=STR(DIST_SHPMT_AFT_FRZN),ON_ORDER_LAST_FMS$=STR(ON_ORDER_LAST_FMS),USAGE_TREND$=STR(USAGE_TREND),REQ_MAX$=STR(REQ_MAX)
10140 EST_USAGE_AFT_CNT$=STR(EST_USAGE_AFT_CNT),RO_PT_DAYS$=STR(RO_PT_DAYS),RO_PT_QTY$=STR(RO_PT_QTY),CYCLE_OPEN_BAL$=STR(CYCLE_OPEN_BAL),INTERVAL_DAYS_4_RO$=STR(INTERVAL_DAYS_4_RO)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="FM4_UNUSED_4",_X=FM4_UNUSED_4.CTL,FM4_UNUSED_4=NUM(FM4_UNUSED_4$,ERR=NON_NUMERIC)
11030 _X$="AVG_MTHLY_USAGE",_X=AVG_MTHLY_USAGE.CTL,AVG_MTHLY_USAGE=NUM(AVG_MTHLY_USAGE$,ERR=NON_NUMERIC)
11040 _X$="RO_PT_MIN_IN_DAYS",_X=RO_PT_MIN_IN_DAYS.CTL,RO_PT_MIN_IN_DAYS=NUM(RO_PT_MIN_IN_DAYS$,ERR=NON_NUMERIC)
11050 _X$="RO_PT_MIN_IN_QTY",_X=RO_PT_MIN_IN_QTY.CTL,RO_PT_MIN_IN_QTY=NUM(RO_PT_MIN_IN_QTY$,ERR=NON_NUMERIC)
11060 _X$="LAST_CNT_QTY",_X=LAST_CNT_QTY.CTL,LAST_CNT_QTY=NUM(LAST_CNT_QTY$,ERR=NON_NUMERIC)
11070 _X$="DRCT_SHPMT_SINCE_CNT",_X=DRCT_SHPMT_SINCE_CNT.CTL,DRCT_SHPMT_SINCE_CNT=NUM(DRCT_SHPMT_SINCE_CNT$,ERR=NON_NUMERIC)
11080 _X$="DIST_SHPMT_SINCE_CNT",_X=DIST_SHPMT_SINCE_CNT.CTL,DIST_SHPMT_SINCE_CNT=NUM(DIST_SHPMT_SINCE_CNT$,ERR=NON_NUMERIC)
11090 _X$="DRCT_SHPMT_AFT_FRZN",_X=DRCT_SHPMT_AFT_FRZN.CTL,DRCT_SHPMT_AFT_FRZN=NUM(DRCT_SHPMT_AFT_FRZN$,ERR=NON_NUMERIC)
11100 _X$="DIST_SHPMT_AFT_FRZN",_X=DIST_SHPMT_AFT_FRZN.CTL,DIST_SHPMT_AFT_FRZN=NUM(DIST_SHPMT_AFT_FRZN$,ERR=NON_NUMERIC)
11110 _X$="ON_ORDER_LAST_FMS",_X=ON_ORDER_LAST_FMS.CTL,ON_ORDER_LAST_FMS=NUM(ON_ORDER_LAST_FMS$,ERR=NON_NUMERIC)
11120 _X$="USAGE_TREND",_X=USAGE_TREND.CTL,USAGE_TREND=NUM(USAGE_TREND$,ERR=NON_NUMERIC)
11130 _X$="REQ_MAX",_X=REQ_MAX.CTL,REQ_MAX=NUM(REQ_MAX$,ERR=NON_NUMERIC)
11140 _X$="EST_USAGE_AFT_CNT",_X=EST_USAGE_AFT_CNT.CTL,EST_USAGE_AFT_CNT=NUM(EST_USAGE_AFT_CNT$,ERR=NON_NUMERIC)
11150 _X$="RO_PT_DAYS",_X=RO_PT_DAYS.CTL,RO_PT_DAYS=NUM(RO_PT_DAYS$,ERR=NON_NUMERIC)
11160 _X$="RO_PT_QTY",_X=RO_PT_QTY.CTL,RO_PT_QTY=NUM(RO_PT_QTY$,ERR=NON_NUMERIC)
11170 _X$="CYCLE_OPEN_BAL",_X=CYCLE_OPEN_BAL.CTL,CYCLE_OPEN_BAL=NUM(CYCLE_OPEN_BAL$,ERR=NON_NUMERIC)
11180 _X$="INTERVAL_DAYS_4_RO",_X=INTERVAL_DAYS_4_RO.CTL,INTERVAL_DAYS_4_RO=NUM(INTERVAL_DAYS_4_RO$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12015 IF STP(LOC_CODE$,3)="" THEN _W_FLG=0; RETURN ! 253696
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN CUST_DIV$=""
13030 IF _CLR_FLG$="R" THEN CUST_CODE$=""
13040 IF _CLR_FLG$="R" THEN ITEM_CODE$=""
13050 IF _CLR_FLG$="R" OR _CLR_FLG$="FL" THEN LOC_CODE$=""
13060 FM4_UNUSED_1$="",ITEM_CNT_HERE$="",AUTO_RESTOCK_METHOD$="",STND_WHSE$="",MANUAL_REORDER_DATE$=""
13110 LOC_STAT$="",LOC_STAT_DATE$="",REORDER_STAT_MEMO$="",LAST_CNT$="",SEASONAL_MODEL$="",USAGE_START$=""
13170 LAST_SHIPMT$="",LAST_FIXED_REQ$="",SHELF$="",FM4_UNUSED_2$="",TF_MEMO$="",BILLING_DEPT$="",FM4_UNUSED_3$=""
13180 EST_ON_HAND$="",EST_OUT_DATE$="" ! SSP#242271
13240 FM4_UNUSED_4=0,AVG_MTHLY_USAGE=0,RO_PT_MIN_IN_DAYS=0,RO_PT_MIN_IN_QTY=0,LAST_CNT_QTY=0,DRCT_SHPMT_SINCE_CNT=0
13300 DIST_SHPMT_SINCE_CNT=0,DRCT_SHPMT_AFT_FRZN=0,DIST_SHPMT_AFT_FRZN=0,ON_ORDER_LAST_FMS=0,USAGE_TREND=0
13350 REQ_MAX=0,EST_USAGE_AFT_CNT=0,RO_PT_DAYS=0,RO_PT_QTY=0,CYCLE_OPEN_BAL=0,INTERVAL_DAYS_4_RO=0
13351 LONG_BILLING_DEPT$="" ! 307410
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$ ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$ ELSE CALL "*wingrp;Disable",KEY3.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(39,"N")
15030 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15040 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15050 IF _ORIG.ITEM_CODE$=_CUR.ITEM_CODE$ OR ITEM_CODE$=_CUR.ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CODE$=ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$
15060 IF _ORIG.LOC_CODE$=_CUR.LOC_CODE$ OR LOC_CODE$=_CUR.LOC_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_CODE$=LOC_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_CODE")+" = "+_CUR.LOC_CODE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_CODE")+" = "+_CUR.LOC_CODE$
15070 IF _ORIG.FM4_UNUSED_1$=_CUR.FM4_UNUSED_1$ OR FM4_UNUSED_1$=_CUR.FM4_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.FM4_UNUSED_1$=FM4_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.FM4_UNUSED_1$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.FM4_UNUSED_1$
15080 IF _ORIG.ITEM_CNT_HERE$=_CUR.ITEM_CNT_HERE$ OR ITEM_CNT_HERE$=_CUR.ITEM_CNT_HERE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CNT_HERE$=ITEM_CNT_HERE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_C_H")+" = "+_CUR.ITEM_CNT_HERE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_C_H")+" = "+_CUR.ITEM_CNT_HERE$
15090 IF _ORIG.AUTO_RESTOCK_METHOD$=_CUR.AUTO_RESTOCK_METHOD$ OR AUTO_RESTOCK_METHOD$=_CUR.AUTO_RESTOCK_METHOD$ THEN GOTO *NEXT ELSE IF _ORIG.AUTO_RESTOCK_METHOD$=AUTO_RESTOCK_METHOD$ THEN _CHG2$=_CHG2$+SEP+MSG("AUTO_R_M")+" = "+_CUR.AUTO_RESTOCK_METHOD$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("AUTO_R_M")+" = "+_CUR.AUTO_RESTOCK_METHOD$
15100 IF _ORIG.STND_WHSE$=_CUR.STND_WHSE$ OR STND_WHSE$=_CUR.STND_WHSE$ THEN GOTO *NEXT ELSE IF _ORIG.STND_WHSE$=STND_WHSE$ THEN _CHG2$=_CHG2$+SEP+MSG("STND_WHSE")+" = "+_CUR.STND_WHSE$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STND_WHSE")+" = "+_CUR.STND_WHSE$
15110 IF _ORIG.MANUAL_REORDER_DATE$=_CUR.MANUAL_REORDER_DATE$ OR MANUAL_REORDER_DATE$=_CUR.MANUAL_REORDER_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.MANUAL_REORDER_DATE$=MANUAL_REORDER_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("MANU_R_D")+" = "+_CUR.MANUAL_REORDER_DATE$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MANU_R_D")+" = "+_CUR.MANUAL_REORDER_DATE$
15120 IF _ORIG.LOC_STAT$=_CUR.LOC_STAT$ OR LOC_STAT$=_CUR.LOC_STAT$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_STAT$=LOC_STAT$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_STAT")+" = "+_CUR.LOC_STAT$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_STAT")+" = "+_CUR.LOC_STAT$
15130 IF _ORIG.LOC_STAT_DATE$=_CUR.LOC_STAT_DATE$ OR LOC_STAT_DATE$=_CUR.LOC_STAT_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.LOC_STAT_DATE$=LOC_STAT_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("LOC_S_D")+" = "+_CUR.LOC_STAT_DATE$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOC_S_D")+" = "+_CUR.LOC_STAT_DATE$
15140 IF _ORIG.REORDER_STAT_MEMO$=_CUR.REORDER_STAT_MEMO$ OR REORDER_STAT_MEMO$=_CUR.REORDER_STAT_MEMO$ THEN GOTO *NEXT ELSE IF _ORIG.REORDER_STAT_MEMO$=REORDER_STAT_MEMO$ THEN _CHG2$=_CHG2$+SEP+MSG("REOR_S_M")+" = "+_CUR.REORDER_STAT_MEMO$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("REOR_S_M")+" = "+_CUR.REORDER_STAT_MEMO$
15150 IF _ORIG.LAST_CNT$=_CUR.LAST_CNT$ OR LAST_CNT$=_CUR.LAST_CNT$ THEN GOTO *NEXT ELSE IF _ORIG.LAST_CNT$=LAST_CNT$ THEN _CHG2$=_CHG2$+SEP+MSG("LAST_CNT")+" = "+_CUR.LAST_CNT$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_CNT")+" = "+_CUR.LAST_CNT$
15160 IF _ORIG.SEASONAL_MODEL$=_CUR.SEASONAL_MODEL$ OR SEASONAL_MODEL$=_CUR.SEASONAL_MODEL$ THEN GOTO *NEXT ELSE IF _ORIG.SEASONAL_MODEL$=SEASONAL_MODEL$ THEN _CHG2$=_CHG2$+SEP+MSG("SEAS_M")+" = "+_CUR.SEASONAL_MODEL$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEAS_M")+" = "+_CUR.SEASONAL_MODEL$
15170 IF _ORIG.USAGE_START$=_CUR.USAGE_START$ OR USAGE_START$=_CUR.USAGE_START$ THEN GOTO *NEXT ELSE IF _ORIG.USAGE_START$=USAGE_START$ THEN _CHG2$=_CHG2$+SEP+MSG("USAG_S")+" = "+_CUR.USAGE_START$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("USAG_S")+" = "+_CUR.USAGE_START$
15180 IF _ORIG.LAST_SHIPMT$=_CUR.LAST_SHIPMT$ OR LAST_SHIPMT$=_CUR.LAST_SHIPMT$ THEN GOTO *NEXT ELSE IF _ORIG.LAST_SHIPMT$=LAST_SHIPMT$ THEN _CHG2$=_CHG2$+SEP+MSG("LAST_S")+" = "+_CUR.LAST_SHIPMT$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_S")+" = "+_CUR.LAST_SHIPMT$
15190 IF _ORIG.LAST_FIXED_REQ$=_CUR.LAST_FIXED_REQ$ OR LAST_FIXED_REQ$=_CUR.LAST_FIXED_REQ$ THEN GOTO *NEXT ELSE IF _ORIG.LAST_FIXED_REQ$=LAST_FIXED_REQ$ THEN _CHG2$=_CHG2$+SEP+MSG("LAST_F_R")+" = "+_CUR.LAST_FIXED_REQ$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_F_R")+" = "+_CUR.LAST_FIXED_REQ$
15200 IF _ORIG.SHELF$=_CUR.SHELF$ OR SHELF$=_CUR.SHELF$ THEN GOTO *NEXT ELSE IF _ORIG.SHELF$=SHELF$ THEN _CHG2$=_CHG2$+SEP+MSG("SHELF")+" = "+_CUR.SHELF$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SHELF")+" = "+_CUR.SHELF$
15210 IF _ORIG.FM4_UNUSED_2$=_CUR.FM4_UNUSED_2$ OR FM4_UNUSED_2$=_CUR.FM4_UNUSED_2$ THEN GOTO *NEXT ELSE IF _ORIG.FM4_UNUSED_2$=FM4_UNUSED_2$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.FM4_UNUSED_2$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.FM4_UNUSED_2$
15220 IF _ORIG.TF_MEMO$=_CUR.TF_MEMO$ OR TF_MEMO$=_CUR.TF_MEMO$ THEN GOTO *NEXT ELSE IF _ORIG.TF_MEMO$=TF_MEMO$ THEN _CHG2$=_CHG2$+SEP+MSG("MEMO")+" = "+_CUR.TF_MEMO$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MEMO")+" = "+_CUR.TF_MEMO$
15230 IF _ORIG.BILLING_DEPT$=_CUR.BILLING_DEPT$ OR BILLING_DEPT$=_CUR.BILLING_DEPT$ THEN GOTO *NEXT ELSE IF _ORIG.BILLING_DEPT$=BILLING_DEPT$ THEN _CHG2$=_CHG2$+SEP+MSG("BILL_D")+" = "+_CUR.BILLING_DEPT$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BILL_D")+" = "+_CUR.BILLING_DEPT$
15240 IF _ORIG.FM4_UNUSED_3$=_CUR.FM4_UNUSED_3$ OR FM4_UNUSED_3$=_CUR.FM4_UNUSED_3$ THEN GOTO *NEXT ELSE IF _ORIG.FM4_UNUSED_3$=FM4_UNUSED_3$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.FM4_UNUSED_3$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.FM4_UNUSED_3$
15250 IF _ORIG.FM4_UNUSED_4=_CUR.FM4_UNUSED_4 OR FM4_UNUSED_4=_CUR.FM4_UNUSED_4 THEN GOTO *NEXT ELSE IF _ORIG.FM4_UNUSED_4=FM4_UNUSED_4 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FM4_UNUSED_4),_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FM4_UNUSED_4)
15260 IF _ORIG.AVG_MTHLY_USAGE=_CUR.AVG_MTHLY_USAGE OR AVG_MTHLY_USAGE=_CUR.AVG_MTHLY_USAGE THEN GOTO *NEXT ELSE IF _ORIG.AVG_MTHLY_USAGE=AVG_MTHLY_USAGE THEN _CHG2$=_CHG2$+SEP+MSG("AVG_M_U")+" = "+STR(_CUR.AVG_MTHLY_USAGE),_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("AVG_M_U")+" = "+STR(_CUR.AVG_MTHLY_USAGE)
15270 IF _ORIG.RO_PT_MIN_IN_DAYS=_CUR.RO_PT_MIN_IN_DAYS OR RO_PT_MIN_IN_DAYS=_CUR.RO_PT_MIN_IN_DAYS THEN GOTO *NEXT ELSE IF _ORIG.RO_PT_MIN_IN_DAYS=RO_PT_MIN_IN_DAYS THEN _CHG2$=_CHG2$+SEP+MSG("R_P_M_I_D")+" = "+STR(_CUR.RO_PT_MIN_IN_DAYS),_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("R_P_M_I_D")+" = "+STR(_CUR.RO_PT_MIN_IN_DAYS)
15280 IF _ORIG.RO_PT_MIN_IN_QTY=_CUR.RO_PT_MIN_IN_QTY OR RO_PT_MIN_IN_QTY=_CUR.RO_PT_MIN_IN_QTY THEN GOTO *NEXT ELSE IF _ORIG.RO_PT_MIN_IN_QTY=RO_PT_MIN_IN_QTY THEN _CHG2$=_CHG2$+SEP+MSG("R_P_M_I_Q")+" = "+STR(_CUR.RO_PT_MIN_IN_QTY),_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("R_P_M_I_Q")+" = "+STR(_CUR.RO_PT_MIN_IN_QTY)
15290 IF _ORIG.LAST_CNT_QTY=_CUR.LAST_CNT_QTY OR LAST_CNT_QTY=_CUR.LAST_CNT_QTY THEN GOTO *NEXT ELSE IF _ORIG.LAST_CNT_QTY=LAST_CNT_QTY THEN _CHG2$=_CHG2$+SEP+MSG("LAST_C_Q")+" = "+STR(_CUR.LAST_CNT_QTY),_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_C_Q")+" = "+STR(_CUR.LAST_CNT_QTY)
15300 IF _ORIG.DRCT_SHPMT_SINCE_CNT=_CUR.DRCT_SHPMT_SINCE_CNT OR DRCT_SHPMT_SINCE_CNT=_CUR.DRCT_SHPMT_SINCE_CNT THEN GOTO *NEXT ELSE IF _ORIG.DRCT_SHPMT_SINCE_CNT=DRCT_SHPMT_SINCE_CNT THEN _CHG2$=_CHG2$+SEP+MSG("DRCT_S_S_C")+" = "+STR(_CUR.DRCT_SHPMT_SINCE_CNT),_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DRCT_S_S_C")+" = "+STR(_CUR.DRCT_SHPMT_SINCE_CNT)
15310 IF _ORIG.DIST_SHPMT_SINCE_CNT=_CUR.DIST_SHPMT_SINCE_CNT OR DIST_SHPMT_SINCE_CNT=_CUR.DIST_SHPMT_SINCE_CNT THEN GOTO *NEXT ELSE IF _ORIG.DIST_SHPMT_SINCE_CNT=DIST_SHPMT_SINCE_CNT THEN _CHG2$=_CHG2$+SEP+MSG("DIST_S_S_C")+" = "+STR(_CUR.DIST_SHPMT_SINCE_CNT),_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DIST_S_S_C")+" = "+STR(_CUR.DIST_SHPMT_SINCE_CNT)
15320 IF _ORIG.DRCT_SHPMT_AFT_FRZN=_CUR.DRCT_SHPMT_AFT_FRZN OR DRCT_SHPMT_AFT_FRZN=_CUR.DRCT_SHPMT_AFT_FRZN THEN GOTO *NEXT ELSE IF _ORIG.DRCT_SHPMT_AFT_FRZN=DRCT_SHPMT_AFT_FRZN THEN _CHG2$=_CHG2$+SEP+MSG("DRCT_S_A_F")+" = "+STR(_CUR.DRCT_SHPMT_AFT_FRZN),_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DRCT_S_A_F")+" = "+STR(_CUR.DRCT_SHPMT_AFT_FRZN)
15330 IF _ORIG.DIST_SHPMT_AFT_FRZN=_CUR.DIST_SHPMT_AFT_FRZN OR DIST_SHPMT_AFT_FRZN=_CUR.DIST_SHPMT_AFT_FRZN THEN GOTO *NEXT ELSE IF _ORIG.DIST_SHPMT_AFT_FRZN=DIST_SHPMT_AFT_FRZN THEN _CHG2$=_CHG2$+SEP+MSG("DIST_S_A_F")+" = "+STR(_CUR.DIST_SHPMT_AFT_FRZN),_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DIST_S_A_F")+" = "+STR(_CUR.DIST_SHPMT_AFT_FRZN)
15340 IF _ORIG.ON_ORDER_LAST_FMS=_CUR.ON_ORDER_LAST_FMS OR ON_ORDER_LAST_FMS=_CUR.ON_ORDER_LAST_FMS THEN GOTO *NEXT ELSE IF _ORIG.ON_ORDER_LAST_FMS=ON_ORDER_LAST_FMS THEN _CHG2$=_CHG2$+SEP+MSG("O_O_L_F")+" = "+STR(_CUR.ON_ORDER_LAST_FMS),_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("O_O_L_F")+" = "+STR(_CUR.ON_ORDER_LAST_FMS)
15350 IF _ORIG.USAGE_TREND=_CUR.USAGE_TREND OR USAGE_TREND=_CUR.USAGE_TREND THEN GOTO *NEXT ELSE IF _ORIG.USAGE_TREND=USAGE_TREND THEN _CHG2$=_CHG2$+SEP+MSG("USAG_T")+" = "+STR(_CUR.USAGE_TREND),_CHG_VAR$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("USAG_T")+" = "+STR(_CUR.USAGE_TREND)
15360 IF _ORIG.REQ_MAX=_CUR.REQ_MAX OR REQ_MAX=_CUR.REQ_MAX THEN GOTO *NEXT ELSE IF _ORIG.REQ_MAX=REQ_MAX THEN _CHG2$=_CHG2$+SEP+MSG("REQ_MAX")+" = "+STR(_CUR.REQ_MAX),_CHG_VAR$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("REQ_MAX")+" = "+STR(_CUR.REQ_MAX)
15370 IF _ORIG.EST_USAGE_AFT_CNT=_CUR.EST_USAGE_AFT_CNT OR EST_USAGE_AFT_CNT=_CUR.EST_USAGE_AFT_CNT THEN GOTO *NEXT ELSE IF _ORIG.EST_USAGE_AFT_CNT=EST_USAGE_AFT_CNT THEN _CHG2$=_CHG2$+SEP+MSG("EST_U_A_C")+" = "+STR(_CUR.EST_USAGE_AFT_CNT),_CHG_VAR$(35,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EST_U_A_C")+" = "+STR(_CUR.EST_USAGE_AFT_CNT)
15380 IF _ORIG.RO_PT_DAYS=_CUR.RO_PT_DAYS OR RO_PT_DAYS=_CUR.RO_PT_DAYS THEN GOTO *NEXT ELSE IF _ORIG.RO_PT_DAYS=RO_PT_DAYS THEN _CHG2$=_CHG2$+SEP+MSG("RO_PT_DAYS")+" = "+STR(_CUR.RO_PT_DAYS),_CHG_VAR$(36,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RO_PT_DAYS")+" = "+STR(_CUR.RO_PT_DAYS)
15390 IF _ORIG.RO_PT_QTY=_CUR.RO_PT_QTY OR RO_PT_QTY=_CUR.RO_PT_QTY THEN GOTO *NEXT ELSE IF _ORIG.RO_PT_QTY=RO_PT_QTY THEN _CHG2$=_CHG2$+SEP+MSG("RO_PT_QTY")+" = "+STR(_CUR.RO_PT_QTY),_CHG_VAR$(37,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RO_PT_QTY")+" = "+STR(_CUR.RO_PT_QTY)
15400 IF _ORIG.CYCLE_OPEN_BAL=_CUR.CYCLE_OPEN_BAL OR CYCLE_OPEN_BAL=_CUR.CYCLE_OPEN_BAL THEN GOTO *NEXT ELSE IF _ORIG.CYCLE_OPEN_BAL=CYCLE_OPEN_BAL THEN _CHG2$=_CHG2$+SEP+MSG("CYCL_O_B")+" = "+STR(_CUR.CYCLE_OPEN_BAL),_CHG_VAR$(38,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CYCL_O_B")+" = "+STR(_CUR.CYCLE_OPEN_BAL)
15410 IF _ORIG.INTERVAL_DAYS_4_RO=_CUR.INTERVAL_DAYS_4_RO OR INTERVAL_DAYS_4_RO=_CUR.INTERVAL_DAYS_4_RO THEN GOTO *NEXT ELSE IF _ORIG.INTERVAL_DAYS_4_RO=INTERVAL_DAYS_4_RO THEN _CHG2$=_CHG2$+SEP+MSG("INTE_D_4_R")+" = "+STR(_CUR.INTERVAL_DAYS_4_RO),_CHG_VAR$(39,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INTE_D_4_R")+" = "+STR(_CUR.INTERVAL_DAYS_4_RO)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16030 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN ITEM_CODE$=_CUR.ITEM_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN LOC_CODE$=_CUR.LOC_CODE$
16060 IF _CHG_VAR$(5,1)="Y" THEN FM4_UNUSED_1$=_CUR.FM4_UNUSED_1$
16070 IF _CHG_VAR$(6,1)="Y" THEN ITEM_CNT_HERE$=_CUR.ITEM_CNT_HERE$
16080 IF _CHG_VAR$(7,1)="Y" THEN AUTO_RESTOCK_METHOD$=_CUR.AUTO_RESTOCK_METHOD$
16090 IF _CHG_VAR$(8,1)="Y" THEN STND_WHSE$=_CUR.STND_WHSE$
16100 IF _CHG_VAR$(9,1)="Y" THEN MANUAL_REORDER_DATE$=_CUR.MANUAL_REORDER_DATE$
16110 IF _CHG_VAR$(10,1)="Y" THEN LOC_STAT$=_CUR.LOC_STAT$
16120 IF _CHG_VAR$(11,1)="Y" THEN LOC_STAT_DATE$=_CUR.LOC_STAT_DATE$
16130 IF _CHG_VAR$(12,1)="Y" THEN REORDER_STAT_MEMO$=_CUR.REORDER_STAT_MEMO$
16140 IF _CHG_VAR$(13,1)="Y" THEN LAST_CNT$=_CUR.LAST_CNT$
16150 IF _CHG_VAR$(14,1)="Y" THEN SEASONAL_MODEL$=_CUR.SEASONAL_MODEL$
16160 IF _CHG_VAR$(15,1)="Y" THEN USAGE_START$=_CUR.USAGE_START$
16170 IF _CHG_VAR$(16,1)="Y" THEN LAST_SHIPMT$=_CUR.LAST_SHIPMT$
16180 IF _CHG_VAR$(17,1)="Y" THEN LAST_FIXED_REQ$=_CUR.LAST_FIXED_REQ$
16190 IF _CHG_VAR$(18,1)="Y" THEN SHELF$=_CUR.SHELF$
16200 IF _CHG_VAR$(19,1)="Y" THEN FM4_UNUSED_2$=_CUR.FM4_UNUSED_2$
16210 IF _CHG_VAR$(20,1)="Y" THEN TF_MEMO$=_CUR.TF_MEMO$
16220 IF _CHG_VAR$(21,1)="Y" THEN BILLING_DEPT$=_CUR.BILLING_DEPT$
16230 IF _CHG_VAR$(22,1)="Y" THEN FM4_UNUSED_3$=_CUR.FM4_UNUSED_3$
16240 IF _CHG_VAR$(23,1)="Y" THEN FM4_UNUSED_4=_CUR.FM4_UNUSED_4
16250 IF _CHG_VAR$(24,1)="Y" THEN AVG_MTHLY_USAGE=_CUR.AVG_MTHLY_USAGE
16260 IF _CHG_VAR$(25,1)="Y" THEN RO_PT_MIN_IN_DAYS=_CUR.RO_PT_MIN_IN_DAYS
16270 IF _CHG_VAR$(26,1)="Y" THEN RO_PT_MIN_IN_QTY=_CUR.RO_PT_MIN_IN_QTY
16280 IF _CHG_VAR$(27,1)="Y" THEN LAST_CNT_QTY=_CUR.LAST_CNT_QTY
16290 IF _CHG_VAR$(28,1)="Y" THEN DRCT_SHPMT_SINCE_CNT=_CUR.DRCT_SHPMT_SINCE_CNT
16300 IF _CHG_VAR$(29,1)="Y" THEN DIST_SHPMT_SINCE_CNT=_CUR.DIST_SHPMT_SINCE_CNT
16310 IF _CHG_VAR$(30,1)="Y" THEN DRCT_SHPMT_AFT_FRZN=_CUR.DRCT_SHPMT_AFT_FRZN
16320 IF _CHG_VAR$(31,1)="Y" THEN DIST_SHPMT_AFT_FRZN=_CUR.DIST_SHPMT_AFT_FRZN
16330 IF _CHG_VAR$(32,1)="Y" THEN ON_ORDER_LAST_FMS=_CUR.ON_ORDER_LAST_FMS
16340 IF _CHG_VAR$(33,1)="Y" THEN USAGE_TREND=_CUR.USAGE_TREND
16350 IF _CHG_VAR$(34,1)="Y" THEN REQ_MAX=_CUR.REQ_MAX
16360 IF _CHG_VAR$(35,1)="Y" THEN EST_USAGE_AFT_CNT=_CUR.EST_USAGE_AFT_CNT
16370 IF _CHG_VAR$(36,1)="Y" THEN RO_PT_DAYS=_CUR.RO_PT_DAYS
16380 IF _CHG_VAR$(37,1)="Y" THEN RO_PT_QTY=_CUR.RO_PT_QTY
16390 IF _CHG_VAR$(38,1)="Y" THEN CYCLE_OPEN_BAL=_CUR.CYCLE_OPEN_BAL
16400 IF _CHG_VAR$(39,1)="Y" THEN INTERVAL_DAYS_4_RO=_CUR.INTERVAL_DAYS_4_RO
16990 RETURN 
17000 RECALCULATE_AVG_USAGE:
17010 IF RT_PARM$<>"" THEN CUST$=CUSTOMER$; CALL "RT2WOC",ERR=*NEXT,%X3$,%X4$,CUST$,"FM4...","U",_KEY$
17020 U1=NUM(AVG_MTHLY_USAGE$); CALL "FM2UBD",%X3$,_KEY$,U0,P1$
17030 MSGBOX "Calculated Average (Through period "+P1$(5,2)+"/"+P1$(1,4)+") : "+STR(U0:"##,###,###.00-")+SEP+SEP+"Do you wish to update the current average with the calculated value",MSG("CONFIRMING"),"?,YESNO",OPT$
17040 IF OPT$="NO" THEN RETURN 
17050 AVG_MTHLY_USAGE$=STR(U0),REFRESH_FLG=1,AVG_MTHLY_USAGE=U0
17060 RETURN 
17100 INIT_COUNT_STOP:
17110 IF MID(FM0$,245,1)<>"Y" THEN MSGBOX "The location setup record does no indicate multiple count stops.",MSG("WARNING"),"!,TIM=5"; RETURN 
17120 RETURN 
17130 SEL_COUNT_STOP: REFRESH_FLG=1
17135 IF STP(COUNT_STOP$)="" THEN CMD_STR$="E"; EXIT 
17140 COUNT_STOP$=PAD(COUNT_STOP$,3," ")
17150 READ (_FMP,KEY="d"+%CUSTOMER$+LOC_CODE$+COUNT_STOP$,DOM=NO_COUNT_STOP)FMP$
17160 COUNT_STOP_NAME$=FMP$(19,30); CALL "*WINGRP;ENABLE",BUTTONS.GRP$
17165 DIM SC$(50),SC(1); _FST_K$=%CUSTOMER$+ITEM_CODE$+LOC_CODE$+COUNT_STOP$; READ (_FST,KEY=_FST_K$,DOM=NEW_RECORD_STOP)SC$,SC{ALL}; GOSUB ASSIGN_LIB; NEXT_ID=BIN_LOC2.CTL
17170 RETURN 
17180 NO_COUNT_STOP: COUNT_STOP$="",NEXT_ID=COUNT_STOP.CTL,COUNT_STOP_NAME$=""; RETURN 
17200 WRITE_COUNT_STOP:
17220 DIM SC$(50); GOSUB ASSIGN_PRG; WRITE (_FST,KEY=FST_K$)SC$,SC{ALL}; GOSUB CLEAR_STOP; COUNT_STOP$="",COUNT_STOP_NAME$="",REFRESH_FLG=1,NEXT_ID=COUNT_STOP.CTL; RETURN 
17230 ASSIGN_PRG: SC$(1,10)=%CUSTOMER$,SC$(11,10)=ITEM_CODE$,SC$(21,4)=LOC_CODE$,SC$(25,3)=COUNT_STOP$,SC$(28,15)=BIN_LOC2$,SC$(44,6)=LAST_COUNT2$; RETURN 
17240 ASSIGN_LIB:
17250 COUNT_STOP$=SC$(25,3),BIN_LOC2$=SC$(28,15),LAST_COUNT2$=SC$(44,6); RETURN 
17260 NEW_RECORD_STOP:
17270 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
17280 IF _YESNO$="NO" THEN NEXT_ID=COUNT_STOP.CTL,CHANGE_FLG=0; EXIT 
17290 GOSUB CLEAR_STOP
17300 RETURN 
17310 CLEAR_STOP:
17320 BIN_LOC2$="",LAST_COUNT2$=""; RETURN 
17330 SEL_TRANSACTION:
17340 %LOC_CODE$=LOC_CODE$,%ITEM_CODE$=ITEM_CODE$
17350 PROCESS "FMGIAF.4","../FMG/FM.EN"
17360 RETURN 
17500 PROCESS_QRY:
17510 PROCESS "QRY_FM4.1","../FMG/FM.EN",VAL$
17520 IF STP(VAL$)="" THEN RETURN 
17530 LOC_CODE$=VAL$(21,4),ID$="LOC_CODE"; GOTO 1030
18000 SEL_RECORD:
18010 ENTER ACTIVITY_TYP$,ORD_TYP$
18020 %ACTIVITY_TYPE$=MSG("ACTIVITY_"+ACTIVITY_TYP$); IF POS(":"=%ACTIVITY_TYPE$)<>0 THEN %ACTIVITY_TYPE$="** Unknow : "+ACTIVITY_TYP$+" **"
18030 %ORDER_TYPE$=MSG("ORD_TYP_"+STP(ORD_TYP$)); IF POS(":"=%ORDER_TYPE$)<>0 THEN %ORDER_TYPE$="** Unknow : "+ORD_TYP$+" **"
18040 EXIT 
18100 SEL_LINES:
18105 IF _FS6<=0 THEN _FS6=FN%FFN("FS6"+%C$); IF _FS6<=0 THEN _FS6=HFN; OPEN (_FS6)"FS6"+%C$ ! [205471]-changed FFN() to FN%FFN()
18110 XX=POS(SEP=LB_LINE$,-1),LB_LINE$=LB_LINE$(1,XX-1),XX=POS(SEP=LB_LINE$,-1),ORDER$=LB_LINE$(XX+1)
18120 ORDER$=STP(ORDER$,3,"-"),ORDER$=PAD(ORDER$,8,0,"0")
18130 IF STP(ORDER$)="" THEN RETURN 
18140 ORD$=PAD(%CUSTOMER$,10)+"B"+PAD(%ITEM_CODE$,10)+ORDER$+"1",%NO_NXT=1; GOSUB READ_FS6; IF NOFS6=0 THEN GOTO 18150
18141 ORD$=PAD(%CUSTOMER$,10)+"J"+PAD(%ITEM_CODE$,10)+ORDER$+"1",%NO_NXT=1; GOSUB READ_FS6; IF NOFS6=0 THEN GOTO 18150
18145 ORD$=PAD(%CUSTOMER$,10)+"F"+PAD(%ITEM_CODE$,10)+ORDER$+"1",%NO_NXT=1; GOSUB READ_FS6; IF NOFS6=0 THEN GOTO 18150
18146 ORD$=PAD(%CUSTOMER$,10)+"H"+PAD(%ITEM_CODE$,10)+ORDER$+"1",%NO_NXT=1; GOSUB READ_FS6; IF NOFS6=0 THEN GOTO 18150
18147 ORD$=PAD(%CUSTOMER$,10)+"D"+PAD(%ITEM_CODE$,10)+ORDER$+"1",%NO_NXT=1; GOSUB READ_FS6; IF NOFS6=0 THEN GOTO 18150 ELSE GOTO 18170
18150 PROCESS "FMGIAI","../FMG/FM.EN",ORD$
18160 %NO_NXT=0
18170 RETURN 
18200 READ_FS6: NOFS6=0
18210 READ (_FS6,KEY=ORD$,DOM=*NEXT); GOTO 18250
18220 KK$=KEY(_FS6,END=NO_FS6); READ (_FS6)
18230 IF MID(KK$,1,29)<>MID(ORD$,1,29) THEN GOTO NO_FS6
18240 ORD$=KK$
18250 RETURN 
18500 NO_FS6: NOFS6=1; RETURN 
18999 ! 
19000 SEL_REC:ENTER VAL$
19010 EXIT 
19019 ! 
19020 GET_LONG_BILL_DEPT:
19030 CALL "ZZGZYR;GETVALUE",ERR=*NEXT,_ZYR,"FM4","BILLDEPT","",CUST_DIV$+CUST_CODE$+ITEM_CODE$+LOC_CODE$,LONG_BILLING_DEPT$,""
19035 REFRESH_FLG=1
19040 RETURN 
19049 ! 
19050 SET_LONG_BILL_DEPT:
19055 IF NUL(LONG_BILLING_DEPT$) THEN RETURN 
19060 CALL "ZZGZYR;SETVALUE",ERR=*NEXT,_ZYR,"FM4","BILLDEPT","",CUST_DIV$+CUST_CODE$+ITEM_CODE$+LOC_CODE$,LONG_BILLING_DEPT$,"Y"
19065 REFRESH_FLG=1
19090 RETURN 
19099 ! 
56000 REM + Modification History
56002 REM "205471-Oracle - FFN usage in tf2g progs. to be replaced by FN%FFN  
56004 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56005 REM "242271-Issues w/ Display information on FMGIAF panel               
56006 REM "257969-They would like to be able to modify location information   
56007 REM "307410-DBD-273 - Long receiving dept field changes using ZYR file  
