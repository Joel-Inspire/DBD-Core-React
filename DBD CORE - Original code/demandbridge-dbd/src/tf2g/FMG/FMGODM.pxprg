0010 ! FMGODM - Sales Order Entry
0035 REM "5.7 - 11/15/24 - 9.314491 - crg - SSP# 307461
0037 REM "307461-DBD-406 Display Office Supply Item Number in GUI O/E        
0040 REM "Copyright 2024 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "FMGODM","../OPG/OP.EN",ORDER_NUM$
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0112 CALL "ZZWMX3"
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0135 IF NUL(ARG_1$) THEN PROCESS "FMGODX","../OPG/OP.EN",CMD_OPT$; PRINT 'SHOW'(3),; IF CMD_OPT$="EXIT" THEN CMD_STR$="E"; RETURN ! SSP 193332
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0154 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; DIM Z[NUM(X3$(60,3))]
0155 Z$="08O FMN... 04O FSA... 09O POE... 10O PO1... 15O ZY9... 16O FTO... 17O AR1... " ! 176867
0156 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
0157 %AR11=Z[17] ! 176867 set channel for use in CHECK_AR1
0159 %IN_GUI$="Y"
0160 _FILE_NAME$="FS1"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0181 _ZZPARM=HFN; OPEN (_ZZPARM)"ZZPARM"
0182 _AR2=HFN; OPEN (_AR2)"AR2"+%C$
0183 _FS6=HFN; OPEN (_FS6)"FS6"+%C$
0184 __AR1=HFN; OPEN (__AR1,IOL=*)"AR1"+%C$ ! SSP#240854
0185 _FS2=HFN; OPEN (_FS2,IOL=*)"FS2"+%C$; CALL "ZZWIOL",_FS2,"B",FS2_IOL$; DIM FS2$:CPL(FS2_IOL$)
0187 _FSH=HFN; OPEN (_FSH,IOL=*)"FSH"+%C$; CALL "ZZWIOL",_FSH,"B",FSH_IOL$; DIM FSH$:CPL(FSH_IOL$)
0188 PERFORM "ARGSCM;MCOMM_DEFAULTS" ! SSP 304758
0189 CALL "ZZ2PRP","OS",RESULT$,TF_DATE$; IF RESULT$="Y" THEN USING_TOPS=1 ELSE USING_TOPS=0 ! SSP 307461
0190 DIM ORDER_DEFAULT$(26); FIND (_ZZPARM,KEY=PAD(%X3_OP_ID$,8)+"FD",DOM=*NEXT)ORDER_DEFAULT$; IF ORDER_DEFAULT$(26,1)="R" OR ORDER_DEFAULT$(26,1)="W" THEN DROP_BOX_1$=MSG("ODM_DB_R")
0191 GOSUB SET_CURR_DIV
0192 %DET_MOD$="" ! SSP 225300
0193 DIM %OP_SECURITY$(255); READ (Z[13],KEY="osec"+%X3_OP_ID$,DOM=*NEXT)%OP_SECURITY$
0194 NO_FLG=1 ! SSP206987 jdf
0195 DISP_CIC$="N"; IF MID(FM_PARM$,246,1)="Y" THEN DISP_CIC$="Y"; IF _FM1=0 THEN _FM1=HFN; OPEN (_FM1,ERR=*NEXT)"FM1"+%C$ ! CALL "ZZWIOL",_FM1,"B",FM1_IOL$; DIM FM1_CIC$:CPL(FM1_IOL$) ! SSP 307490
0196 RETURN 
0199 ! 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="ORDER$"
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 ! _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC) ! SSP 219122
0555 QRY_VAL$=ARG_1$; PERFORM "FMGODM;FIND_REC" ! SSP 219122
0560 ! _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC  ! SSP 219122
0570 RETURN 
0700 ! 700 - Set up tabbing between folders
0710 INIT_FOLDER:
0720 GOSUB ENABLE_GROUPS
0725 ! IF FOLDER_ID$="FMGODM.3" THEN { GOSUB CHECK_TOTAL }
0730 IF _ENABLE_FLG<>1 THEN IF TAB_FLG$="<" THEN NEXT_ID=_LAST_TAB ELSE NEXT_ID=_FIRST_TAB
0740 EXIT 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0962 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
0965 IF _ZZPARM THEN CLOSE (_ZZPARM); _ZZPARM=0
0966 IF _FS2 THEN CLOSE (_FS2); _FS2=0
0967 IF _FSH THEN CLOSE (_FSH); _FSH=0
0968 IF _PO3 THEN CLOSE (_PO3); _PO3=0
0969 IF _FM0 THEN CLOSE (_FM0); _FM0=0
0970 IF _AP4 THEN CLOSE (_AP4); _AP4=0
0975 IF _FM1 THEN CLOSE (_FM1); _FM1=0 ! SSP 307490
0990 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1015 IF FM_PARM$(8,1)<>"Y" THEN IF LEN(QRY_VAL$)=8 THEN ORDER$=QRY_VAL$ ! SSP 199172
1016 IF QRY_VAL$<>"" THEN ORDER$=SUB(QRY_VAL$,"-",""); IF (FM_PARM$(8,1)="Y" AND LEN(QRY_VAL$)<8) OR (FM_PARM$(8,1)<>"Y" AND LEN(QRY_VAL$)<6) THEN EXIT ELSE _KEY$=ORDER$; GOTO 1030 ! SSP 202877,219069                    
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=1,_ENABLE_FLG=1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1042 IF (UCS(MID(ORDER$,1,1))="A" AND LEN(ORDER$)>2) OR (UCS(MID(ORDER$,3,1))="A" AND LEN(ORDER$)>4) THEN GOTO 1045 ! SSP 222837 jir!ssp#224255
1043 IF UCS(MID(ORDER$,1,1))="A" THEN IF FM_PARM$(8,1)="Y" THEN ORDER$=%CURR_DIV$+ORDER$ ELSE ORDER$="00"+ORDER$ ! SSP218533
1044 IF UCS(MID(ORDER$,3,1))="A" THEN IF NUL(MID(ORDER$,1,2)) THEN ORDER$(1,2)=%CURR_DIV$ END_IF ; DROP_BOX_1$=MSG("ODM_DB_O"); IF POS(UCS(MID(ORDER$,4,1))="OR123456789")<>0 THEN DROP_BOX_1$=MSG("ODM_DB_"+UCS(MID(ORDER$,4,1))) END_IF ; GOTO GET_NEXT_NUM
1045 CALL "ZZWLKU;PARSE_ORD",ORDER$,ORDER_DIV$,ORDER_NUM$; ORDER$=ORDER_DIV$+ORDER_NUM$
1047 GOSUB CHECK_ORDER_NUM; IF ORDER_NUM_INVALID THEN ORDER$=DIM(8),REFRESH_FLG=1; NEXT_ID=ORDER.CTL; EXIT 
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1063 IOLIST __AR1$,AR1[0],AR1[1],AR1[2],AR1[3],AR1[4],AR1[5],AR1[6],AR1[7],AR1[8],AR1[9],AR1[10],AR1[11],AR1[12],AR1[13],AR1[14],AR1[15] ! SSP246794 jdf
1064 IF (__AR1) THEN CLOSE (__AR1) END_IF ; __AR1=HFN; OPEN (__AR1,IOL=*)"AR1"+%C$ ! SSP#240854  ! SSP246794 jdf
1065 %OLD_REC=0; DIM __AR1$(599),AR1[15]; READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT); %OLD_REC=1,HLD_CONTRACT$=CONTRACT_NUM$; FIND (__AR1,KEY=CUST_DIV$+CUST_CODE$,DOM=*NEXT)IOL=1063; GOSUB CHECK_DR_AR1 ! ssp 178059   ! ssp200893 SSP 192978 ! SSP246794 jdf
1066 IF %INV_ENTRY AND (ORDER_TYPE_1$="B" OR ORDER_TYPE_1$=" ") THEN MSGBOX MSG("FMGODM_32"),MSG("MB_ATTN"),"!"; GOTO CLEAR_REC
1068 IF POS(INV_IN_PROGRESS$="YSP")=0 THEN GOTO 1082 ELSE IF %WMS_MGR_IN_OE AND POS(INV_IN_PROGRESS$="SP")<>0 THEN GOTO 1082
1070 IF INV_IN_PROGRESS$="S" THEN MSGBOX MSG("FMGODM_S"),MSG("MB_ATTN"),"!"; GOTO CLEAR_REC ELSE IF INV_IN_PROGRESS$="P" THEN MSGBOX MSG("FMGODM_P"),MSG("MB_ATTN"),"!"; GOTO CLEAR_REC
1071 IF POS(INV_IN_PROGRESS$="Y")<>0 THEN {
1072 DD1$=MSG("FMGODM_31"),DD2$=MSG("MB_ATTN"),DD3$=""; PROCESS "FMGODM.B","../OPG/OP.EN",DD1$,DD2$,DD3$ ! MSGBOX MSG("FMGODM_31"),MSG("MB_ATTN"),"!"
1074 IF DD3$="YES" THEN PROCESS "PASSWORD","../ZZG/ZZ.EN",PASS$; IF PASS$<>"COKE" THEN _SOUND_NAME$="no06.wav"; PERFORM "$CTL-10;SOUND_PLAY"; CHANGE_FLG=0; GOTO CLEAR_REC
1075  } ELSE IF DD3$<>"YES" THEN {
1076 IF DD3$<>"YES" THEN CHANGE_FLG=0,_KEY$=""; GOTO CLEAR_REC ! 211838
1077  }
1078  }
1079 IF DD3$="YES" THEN INV_IN_PROGRESS$="",DD3$=""; WRITE (_FIL_NO,KEY=_KEY$)
1082 FM2ODH_CMD=-1; GOSUB DO_FM2ODH; EXTRACT (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT) ! SSP248358 jdf
1085 NO_FLG=0 ! SSP206987  jdf
1089 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1095 PERFORM "ECGM3F;GET_3P_INFO",ERR=*NEXT ! 307433 DBD-380-SSP307446
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=BUTTON_1.CTL
1110 IF MID(FM_PARM$,276,1)="Y" THEN TMP_ORD$=ORDER_DIV$+ORDER_NUM$; FIND (Z[8],KEY=TMP_ORD$,REC=TO$,DOM=*NEXT); PROCESS "FMGNPA","",TMP_ORD$
1130 GOSUB CHECK_DR_AR1
1190 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1252 FIND (Z[10],KEY=ORDER$+" ",DOM=*NEXT); MSGBOX MSG("PO_STOCK"),MSG("WARNING"),"STOP,TIM=10"; ORDER$="",NEXT_ID=ORDER.CTL; EXIT ! ssp 194831
1253 IF ORDER$<>"" AND GNT<>1 THEN EXTRACT (_FIL_NO,KEY=_KEY$,DOM=24500) ! SSP206987 jdf
1254 GNT=0,NO_FLG=0 ! SSP206987 jdf
1255 MESSAGE$=""; PROCESS "FMGODA","",ORDER_DIV$+ORDER_NUM$,"NEW",MESSAGE$
1256 IF MESSAGE$="DELETE" OR MESSAGE$="CANCEL" THEN CHANGE_FLG=0; GOTO CLEAR_REC
1258 READ (_FIL_NO,KEY=_KEY$,DOM=*NEXT,ERR=CHK_ERR_NXT) ! Read header record entered so we can make decisions on the data in it
1259 IF MESSAGE$<>"REPEAT ORDER" THEN {
1260 GOSUB CHECK_AR2
1261 %GRID_COMM_CODE$=COMM_CODE$; %GRID_BAS=0; IF ORDER_TYPE_3$="B" THEN %GRID_BAS=1 ! SSP208671
1262 REM IF MID(AR2_REC$,57,1)="Y" AND ORDER_TYPE_3$<>"B" THEN PROCESS "ECGMAD","../ECG/EC.EN",ORDER$ ! SSP215084 jdf
1263 IF (TCB(29)>=7100000 AND POS(MID(%OP_SECURITY$,99,1)="SY")<>0) THEN %ORD_DEL$=""; PROCESS "FMGODB.V7","",ORDER_DIV$+ORDER_NUM$; GOTO *NEXT END_IF ! IF (TCB(29)>=7100000 AND MID(%OP_SECURITY$,99,1)="Y") THEN IF POS(ORDER_TYPE_1$="RW")<>0 THEN PROCESS "FMGODR.v7","",ORDER_DIV$,ORDER_NUM$,MESSAGE$,ORDER_TYPE_1$,CUST_DIV$,CUST_CODE$ ELSE PROCESS "FMGODO.v7","",ORDER_DIV$,ORDER_NUM$,MESSAGE$,ORDER_TYPE_1$,CUST_DIV$,CUST_CODE$ ! SSP208671 ! SSP242299 jdf SSP307159
1265 IF (TCB(29)<7100000 OR MID(%OP_SECURITY$,99,1)<>"Y" AND MID(%OP_SECURITY$,99,1)<>"S") THEN PROCESS "FMGODB","",ORDER_DIV$+ORDER_NUM$,"NEW" ! SSP208671! SSP242299 jdf  
1267 %GRID_BAS=0 ! finished with flag! SSP208671
1268 %CUSTOMER$="" ! SSP 228992
1269 IF %ORD_DEL$="Y" THEN %ORD_DEL$=""; GOSUB DELETE_REC ! SSP 242299
1270 IF ORDER_TYPE_3$<>"B" THEN PROCESS "FMGODG","",ORDER_DIV$+ORDER_NUM$+" ","NEW" } ! skip general ship if B type order
1272 FIND (Z[17],KEY=CUST_DIV$+CUST_CODE$,DOM=*NEXT)__AR1$; IF (MID(AR1.__AR1$,473,1)="Y" OR MID(__AR1$,473,1)="Y") THEN PROCESS "FMGOBR","../OPG/OP.EN",ORDER_DIV$+ORDER_NUM$ ! ssp 209012
1278 _FIRST_FIELD=BUTTON_1.CTL; %CURR_DIV$=ORDER_DEFAULT$(11,2)
1279 CUSTOMER$=%CUST_DIV$+%CUST_CODE$
1280 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1285 _KEY$=ORDER_DIV$+ORDER_NUM$,ORDER$=_KEY$; REFRESH_FLG=1; GOTO RETURN_FROM_NEW_RECORD_SETUP
1290 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD,NEXT_FOLDER=_FIRST_FOLDER
1295 RETURN 
1299 ! 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1422 IF %SAVE_TERMS_CODE$<>"" THEN TERMS_CODE$=%SAVE_TERMS_CODE$,%SAVE_TERMS_CODE$=""
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1432 IF (__AR1) THEN CLOSE (__AR1) END_IF ; __AR1=HFN; OPEN (__AR1,IOL=*)"AR1"+%C$ ! SSP#256674
1433 DIM AR1[15]; FIND (__AR1,KEY=CUST_DIV$+CUST_CODE$,DOM=*NEXT)IOL=1063 ! SSP#256674
1435 IF AR1[5]<>0 AND AR1[6]+AR1[13]+TOTAL_AMT>=AR1[5] THEN CALL "ARGCHK",CUST_DIV$+CUST_CODE$,ORDER_DIV$+ORDER_NUM$,TOTAL_AMT,RET_VAL; IF RET_VAL=1 THEN CREDIT_DELETE$="Y"; %CREDIT_CHECK_KEY$=""; GOSUB DELETE_REC; GOTO *SAME ELSE CREDIT_DELETE$="N" ! if denied, but they cancel the delete, then check again, clear global credit check key to insure check will be done again    ! SSP246794 jdf    !SSP#256674
1437 IF %INV_ENTRY THEN %ORDER_NUMBER$=ORDER_DIV$+ORDER_NUM$
1440 GOSUB REVIEW_WRITE
1442 IF %MSLC THEN IF %DET_MOD$="Y" THEN CCKEY$="O"+ORDER$+CUST_DIV$+CUST_CODE$,CMMSG$=""; CALL "ARGSCM;UPDATE_DETAIL_RECS",CCKEY$,CMMSG$; %DET_MOD$=""; IF CMMSG$="Y" THEN MSGBOX "Existing Detail Lines have been modified to Default Commission Codes - Please Review!",MSG("WARNING") ! SSP 225300
1445 GOSUB CLEAR_REC
1460 IF _ENABLE_FLG THEN _KCNT=1,_ENABLE_FLG=1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1615 ORDER_KEY$=PAD(ORDER_DIV$+ORDER_NUM$,8)
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1625 MSGBOX MSG("DELETE_ORD"),MSG("CONFIRM"),"?,YESNO",_X$ ! SSP 242299
1630 IF _X$<>"YES" THEN RETURN 
1640 GOSUB CAN_WE_DELETE; IF CANT_DELETE THEN RETURN 
1655 FM2ODH_CMD=-2; GOSUB DO_FM2ODH
1656 IF %MSLC THEN CCKEY$="O"+ORDER_KEY$+CUST_DIV$+CUST_CODE$; CALL "ARGSCM;DELETE_ALL",CCKEY$ ! SSP 225300
1657 IF MFF_PARM THEN CALL "FMGFV5;DELETE_FINDER_FEE_LINES",ORDER_KEY$ ! SSP 276772
1658 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 LIST_BOX LOAD ORDER_LINES.CTL,""
1675 GOSUB FINISH_DELETE
1680 IF _ENABLE_FLG THEN _KCNT=1,_ENABLE_FLG=1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0,CREDIT_DELETE$="N"
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1832 GOSUB SET_CURR_DIV; IF FM_PARM$(8,1)="Y" THEN ORDER$=%CURR_DIV$ ! Don't preset ORDER$ if not divisional
1835 LIST_BOX LOAD ORDER_LINES.CTL,""
1840 IF _ENABLE_FLG THEN _KCNT=1,_ENABLE_FLG=1; GOSUB ENABLE_GROUPS
1845 NEXT_ID=ORDER.CTL
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=*NEXT); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2440 MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=*NEXT); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2640 MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3055 ORDER$=ORDER_DIV$+ORDER_NUM$ ! FN%ZZDISP$(ORDER_DIV$+ORDER_NUM$,"O/P") SSP 198188
3057 CUSTOMER$=CUST_DIV$+CUST_CODE$ ! FN%ZZDISP$(CUST_DIV$+CUST_CODE$,"A/R") SSP 198188
3058 CALL "ZZWLKU;AR_CUST_VAL",CUST_DIV$+CUST_CODE$,ZTMP$,""
3060 CHANGE_FLG=0
3061 %SAVE_TERMS_CODE$=TERMS_CODE$
3065 IF STP(ORDER$,2)<>"" THEN GOSUB LOAD_DETAILS
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),ERR=*RETURN,DOM=WRT); _KEY$=ORDER_DIV$+ORDER_NUM$ ! SSP211838 ! SSP248358 jdf
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:GOSUB CHECK_FOR_BAD_KEY_OR_DATA; WRITE (_FIL_NO,KEY=_KEY$)
3325 FM2ODH_CMD=1; GOSUB DO_FM2ODH; CHANGE_FLG=0
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 REM MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$ ! SSP248358 jdf
3625 MSGBOX MSG("REC_BUS"),MSG("WARNING") ! SSP248358 jdf
3627 ORDER$=""; NEXT_ID=ORDER.CTL; REFRESH_FLG=1 ! SSP248358 jdf
3630 EXIT ; REM IF _D$="NO" THEN EXIT   ! SSP248358 jdf
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=ORDER.CTL,_FIRST_FIELD=CUST_DIV.CTL,_FIRST_FOLDER=FLDR.FMGODM.1.CTL
3815 IF STP(_KEY$)<>"" THEN GOTO WRITE_REC; REM "210251 WAS IF LEN(STP(ORDER$))>2 THEN GOTO WRITE_REC
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=1,_ENABLE_FLG=1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
4500 CHECK_TOTAL:! ^100,5 - Add commission totals
4505 VAR$=ID$
4510 IF VIN(VAR$)>100 THEN {
4515 MSGBOX MSG("MB_2_M"),MSG("MB_ATTN"),"!"
4520 NEXT_ID=ID,REFRESH_FLG=1
4525 VIA (VAR$)=0
4530 EXIT 
4535  }
4540 TOTAL=0
4545 FOR X=0 TO 4
4550 IF X=0 THEN VAR$="SALESMAN_1_PCT_SALE" ELSE VAR$="ALT_SPER_PRCNT_"+STR(X)
4555 TOTAL+=VIN(VAR$)
4560 NEXT X
4565 IF TOTAL>100 THEN {
4570 MSGBOX MSG("MB_1_M"),MSG("MB_ATTN"),"!"
4575 NEXT_ID=ID
4580 VAR$=ID$
4585 TOTAL-=VIN(VAR$)
4590 VIA (VAR$)=0
4595  }
4600 REFRESH_FLG=1
4605 RETURN 
8200 CHECK_FTO:! For batch processing, a record is written to FTO file when a PO is being recieved, if another user attempts to recieve in another batch they will recieve a message and will not be allowed to access, do not allow any changes to an order that is in PO Receiving
8201 KEY_16$=STP(ORDER$,3,"-")
8202 CALL "UPDFTO;CHECK_PO_LOCK",X3$,X4$,"R",NEW_FTO$,KEY_16$,FTO_REC$,BATCH_EXISTS$,"Y"; IF BATCH_EXISTS$="Y" THEN CHANGE_FLG=0,_KEY$=""; GOSUB CLEAR_REC; END_IF 
8245 RETURN 
8249 ! 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9340 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 DEPOSIT_AMT$=STR(DEPOSIT_AMT)
10030 SALESMAN_1_PCT_SALE$=STR(SALESMAN_1_PCT_SALE)
10040 ALT_SPER_PRCNT_1$=STR(ALT_SPER_PRCNT_1)
10050 ALT_SPER_PRCNT_2$=STR(ALT_SPER_PRCNT_2)
10060 ALT_SPER_PRCNT_3$=STR(ALT_SPER_PRCNT_3)
10070 ALT_SPER_PRCNT_4$=STR(ALT_SPER_PRCNT_4)
10080 ORDER_AMT$=STR(ORDER_AMT)
10090 ORDER_COST$=STR(ORDER_COST)
10100 FRT_AMT$=STR(FRT_AMT)
10110 LINE_ITEM_DISC_PRCNT$=STR(LINE_ITEM_DISC_PRCNT)
10120 FRT_FROM_LOTS$=STR(FRT_FROM_LOTS)
10130 FS1_UNUSED_2$=STR(FS1_UNUSED_2)
10140 FS1_UNUSED_3$=STR(FS1_UNUSED_3)
10150 FS1_UNUSED_4$=STR(FS1_UNUSED_4)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="DEPOSIT_AMT",_X=DEPOSIT_AMT.CTL,DEPOSIT_AMT=NUM(DEPOSIT_AMT$,ERR=NON_NUMERIC)
11030 _X$="SALESMAN_1_PCT_SALE",_X=SALESMAN_1_PCT_SALE.CTL,SALESMAN_1_PCT_SALE=NUM(SALESMAN_1_PCT_SALE$,ERR=NON_NUMERIC)
11040 _X$="ALT_SPER_PRCNT_1",_X=ALT_SPER_PRCNT_1.CTL,ALT_SPER_PRCNT_1=NUM(ALT_SPER_PRCNT_1$,ERR=NON_NUMERIC)
11050 _X$="ALT_SPER_PRCNT_2",_X=ALT_SPER_PRCNT_2.CTL,ALT_SPER_PRCNT_2=NUM(ALT_SPER_PRCNT_2$,ERR=NON_NUMERIC)
11060 _X$="ALT_SPER_PRCNT_3",_X=ALT_SPER_PRCNT_3.CTL,ALT_SPER_PRCNT_3=NUM(ALT_SPER_PRCNT_3$,ERR=NON_NUMERIC)
11070 _X$="ALT_SPER_PRCNT_4",_X=ALT_SPER_PRCNT_4.CTL,ALT_SPER_PRCNT_4=NUM(ALT_SPER_PRCNT_4$,ERR=NON_NUMERIC)
11080 _X$="ORDER_AMT",_X=ORDER_AMT.CTL,ORDER_AMT=NUM(ORDER_AMT$,ERR=NON_NUMERIC)
11090 _X$="ORDER_COST",_X=ORDER_COST.CTL,ORDER_COST=NUM(ORDER_COST$,ERR=NON_NUMERIC)
11100 _X$="FRT_AMT",_X=FRT_AMT.CTL,FRT_AMT=NUM(FRT_AMT$,ERR=NON_NUMERIC)
11110 _X$="LINE_ITEM_DISC_PRCNT",_X=LINE_ITEM_DISC_PRCNT.CTL,LINE_ITEM_DISC_PRCNT=NUM(LINE_ITEM_DISC_PRCNT$,ERR=NON_NUMERIC)
11120 _X$="FRT_FROM_LOTS",_X=FRT_FROM_LOTS.CTL,FRT_FROM_LOTS=NUM(FRT_FROM_LOTS$,ERR=NON_NUMERIC)
11130 _X$="FS1_UNUSED_2",_X=FS1_UNUSED_2.CTL,FS1_UNUSED_2=NUM(FS1_UNUSED_2$,ERR=NON_NUMERIC)
11140 _X$="FS1_UNUSED_3",_X=FS1_UNUSED_3.CTL,FS1_UNUSED_3=NUM(FS1_UNUSED_3$,ERR=NON_NUMERIC)
11150 _X$="FS1_UNUSED_4",_X=FS1_UNUSED_4.CTL,FS1_UNUSED_4=NUM(FS1_UNUSED_4$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 NUM_TIMES_PL_PRINTED$=""
13030 BACKGROUND_PROC$=""
13040 MASTER_QUOTE_PART_2$=""
13050 CUST_DIV$=""
13060 CUST_CODE$=""
13065 CUSTOMER$="",%CUST_NAME$=""
13070 ORDER_DATE$=""
13080 ORDER_TYPE_2$=""
13090 MASTER_QUOTE_PART_1$=""
13100 CUST_PO$=""
13110 WORK_ORDER$=""
13120 WD_TYPE$=""
13130 WORK_ORDER_PRINTED$=""
13140 WORK_ORDER_REV_NUM$=""
13150 ORDER_TYPE_1$=""
13160 BACK_ORDER$=""
13170 PROMOTION_CODE$=""
13180 ORDER_ACKNOW_PRINTED$=""
13190 RFQ_TYPE_QUOTATION$=""
13200 CONSOLIDATED_PL$=""
13210 ORDER_TYPE_3$=""
13220 DATE_REQUESTED$=""
13230 SO_LETTER_TYPE_CODE$=""
13240 PRINT_SHIPPING_ACK$=""
13250 INV_IN_PROGRESS$=""
13260 DEPOSIT_CHECK_NUM$=""
13270 DEPOSIT_CHECK_DATE$=""
13280 STAX_CODE$=""
13290 TAXABLE$=""
13300 TERMS_CODE$=""
13310 CUST_SERV_REP$=""
13320 SPER_CODE$=""
13330 COMM_CODE$=""
13340 OTHER_SPER_1$=""
13350 OTHER_SPER_2$=""
13360 OTHER_SPER_3$=""
13370 OTHER_SPER_4$=""
13380 IF _CLR_FLG$="R" THEN ORDER_DIV$=""
13390 IF _CLR_FLG$="R" THEN ORDER_NUM$=""
13395 IF _CLR_FLG$="R" THEN ORDER$=""
13400 SALES_ORDER_PRINTED$=""
13410 CTN_LBL_PRINTED$=""
13420 PACKING_LIST_PRINTD$=""
13430 ORDERED_BY$=""
13440 ORDER_GREETING$=""
13450 OPER_CODE_1ST$=""
13460 OPER_CODE_LAST_MOD$=""
13470 DATE_LAST_MODIFIED$=""
13480 AUTO_REQ_TYPE$=""
13490 CONSOL_ORDER_TYPE$=""
13500 QUOTE_FROM_LINES$=""
13510 REPEAT_ORDER$=""
13520 REPEAT_FROM_ORD$=""
13530 EXCLUDE_REBATE$=""
13540 ON_HOLD$=""
13550 GB_GOLD_RUSH$=""
13560 GB_SAMPLE_ORD$=""
13570 GB_USE_REBATE$=""
13580 GB_OVERRUNS$=""
13590 GB_PROD_DEPT$=""
13600 GB_PL_COPIES$=""
13610 GB_IMPRINT_COLOR$=""
13620 GB_SAMPLES_DIST$=""
13630 GB_SURE$=""
13640 SCALE_SEQ_NUM$=""
13650 SAMPLE_REBATE_LN$=""
13660 FM2ODH_OPTIONS$=""
13670 INV_COST_SEQ$=""
13680 INV_COST_PARM$=""
13690 NO_DELETE$=""
13700 BO_FILL_REQ_CHG$=""
13701 CIG_FLAG$=""
13702 FREIGHT_MARKUP_TABLE$=""
13703 ORDER_SOURCE$=""
13704 WEBEC_BUYER$=""
13705 WEB_SESSION$=""
13710 FS1_UNUSED_1$=""
13720 DEPOSIT_AMT=0
13730 SALESMAN_1_PCT_SALE=0
13740 ALT_SPER_PRCNT_1=0
13750 ALT_SPER_PRCNT_2=0
13760 ALT_SPER_PRCNT_3=0
13770 ALT_SPER_PRCNT_4=0
13780 ORDER_AMT=0
13790 ORDER_COST=0
13800 FRT_AMT=0
13810 LINE_ITEM_DISC_PRCNT=0
13820 FRT_FROM_LOTS=0
13830 FS1_UNUSED_2=0
13840 FS1_UNUSED_3=0
13850 FS1_UNUSED_4=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$ ELSE CALL "*wingrp;Disable",KEY2.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$; CALL "*wingrp;ENABLE",KEY1.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$; CALL "*wingrp;DISABLE",KEY1.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(89,"N")
15030 IF _ORIG.NUM_TIMES_PL_PRINTED$=_CUR.NUM_TIMES_PL_PRINTED$ OR NUM_TIMES_PL_PRINTED$=_CUR.NUM_TIMES_PL_PRINTED$ THEN GOTO *NEXT ELSE IF _ORIG.NUM_TIMES_PL_PRINTED$=NUM_TIMES_PL_PRINTED$ THEN _CHG2$=_CHG2$+SEP+MSG("NUM_T_P_P")+" = "+_CUR.NUM_TIMES_PL_PRINTED$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NUM_T_P_P")+" = "+_CUR.NUM_TIMES_PL_PRINTED$
15040 IF _ORIG.BACKGROUND_PROC$=_CUR.BACKGROUND_PROC$ OR BACKGROUND_PROC$=_CUR.BACKGROUND_PROC$ THEN GOTO *NEXT ELSE IF _ORIG.BACKGROUND_PROC$=BACKGROUND_PROC$ THEN _CHG2$=_CHG2$+SEP+MSG("BACK_P")+" = "+_CUR.BACKGROUND_PROC$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BACK_P")+" = "+_CUR.BACKGROUND_PROC$
15050 IF _ORIG.MASTER_QUOTE_PART_2$=_CUR.MASTER_QUOTE_PART_2$ OR MASTER_QUOTE_PART_2$=_CUR.MASTER_QUOTE_PART_2$ THEN GOTO *NEXT ELSE IF _ORIG.MASTER_QUOTE_PART_2$=MASTER_QUOTE_PART_2$ THEN _CHG2$=_CHG2$+SEP+MSG("MAST_Q_P_2")+" = "+_CUR.MASTER_QUOTE_PART_2$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MAST_Q_P_2")+" = "+_CUR.MASTER_QUOTE_PART_2$
15060 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15070 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15080 IF _ORIG.ORDER_DATE$=_CUR.ORDER_DATE$ OR ORDER_DATE$=_CUR.ORDER_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_DATE$=ORDER_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_DATE")+" = "+_CUR.ORDER_DATE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_DATE")+" = "+_CUR.ORDER_DATE$
15090 IF _ORIG.ORDER_TYPE_2$=_CUR.ORDER_TYPE_2$ OR ORDER_TYPE_2$=_CUR.ORDER_TYPE_2$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_TYPE_2$=ORDER_TYPE_2$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDE_T_2")+" = "+_CUR.ORDER_TYPE_2$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDE_T_2")+" = "+_CUR.ORDER_TYPE_2$
15100 IF _ORIG.MASTER_QUOTE_PART_1$=_CUR.MASTER_QUOTE_PART_1$ OR MASTER_QUOTE_PART_1$=_CUR.MASTER_QUOTE_PART_1$ THEN GOTO *NEXT ELSE IF _ORIG.MASTER_QUOTE_PART_1$=MASTER_QUOTE_PART_1$ THEN _CHG2$=_CHG2$+SEP+MSG("MAST_Q_P_1")+" = "+_CUR.MASTER_QUOTE_PART_1$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MAST_Q_P_1")+" = "+_CUR.MASTER_QUOTE_PART_1$
15110 IF _ORIG.CUST_PO$=_CUR.CUST_PO$ OR CUST_PO$=_CUR.CUST_PO$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_PO$=CUST_PO$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_PO")+" = "+_CUR.CUST_PO$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_PO")+" = "+_CUR.CUST_PO$
15120 IF _ORIG.WORK_ORDER$=_CUR.WORK_ORDER$ OR WORK_ORDER$=_CUR.WORK_ORDER$ THEN GOTO *NEXT ELSE IF _ORIG.WORK_ORDER$=WORK_ORDER$ THEN _CHG2$=_CHG2$+SEP+MSG("WORK_ORDER")+" = "+_CUR.WORK_ORDER$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WORK_ORDER")+" = "+_CUR.WORK_ORDER$
15130 IF _ORIG.WD_TYPE$=_CUR.WD_TYPE$ OR WD_TYPE$=_CUR.WD_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.WD_TYPE$=WD_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("WD_TYPE")+" = "+_CUR.WD_TYPE$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WD_TYPE")+" = "+_CUR.WD_TYPE$
15140 IF _ORIG.WORK_ORDER_PRINTED$=_CUR.WORK_ORDER_PRINTED$ OR WORK_ORDER_PRINTED$=_CUR.WORK_ORDER_PRINTED$ THEN GOTO *NEXT ELSE IF _ORIG.WORK_ORDER_PRINTED$=WORK_ORDER_PRINTED$ THEN _CHG2$=_CHG2$+SEP+MSG("WORK_O_P")+" = "+_CUR.WORK_ORDER_PRINTED$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WORK_O_P")+" = "+_CUR.WORK_ORDER_PRINTED$
15150 IF _ORIG.WORK_ORDER_REV_NUM$=_CUR.WORK_ORDER_REV_NUM$ OR WORK_ORDER_REV_NUM$=_CUR.WORK_ORDER_REV_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.WORK_ORDER_REV_NUM$=WORK_ORDER_REV_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("WORK_O_R_N")+" = "+_CUR.WORK_ORDER_REV_NUM$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WORK_O_R_N")+" = "+_CUR.WORK_ORDER_REV_NUM$
15160 IF _ORIG.ORDER_TYPE_1$=_CUR.ORDER_TYPE_1$ OR ORDER_TYPE_1$=_CUR.ORDER_TYPE_1$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_TYPE_1$=ORDER_TYPE_1$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDE_T_1")+" = "+_CUR.ORDER_TYPE_1$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDE_T_1")+" = "+_CUR.ORDER_TYPE_1$
15170 IF _ORIG.BACK_ORDER$=_CUR.BACK_ORDER$ OR BACK_ORDER$=_CUR.BACK_ORDER$ THEN GOTO *NEXT ELSE IF _ORIG.BACK_ORDER$=BACK_ORDER$ THEN _CHG2$=_CHG2$+SEP+MSG("BACK_ORDER")+" = "+_CUR.BACK_ORDER$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BACK_ORDER")+" = "+_CUR.BACK_ORDER$
15180 IF _ORIG.PROMOTION_CODE$=_CUR.PROMOTION_CODE$ OR PROMOTION_CODE$=_CUR.PROMOTION_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PROMOTION_CODE$=PROMOTION_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PROM_C")+" = "+_CUR.PROMOTION_CODE$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PROM_C")+" = "+_CUR.PROMOTION_CODE$
15190 IF _ORIG.ORDER_ACKNOW_PRINTED$=_CUR.ORDER_ACKNOW_PRINTED$ OR ORDER_ACKNOW_PRINTED$=_CUR.ORDER_ACKNOW_PRINTED$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_ACKNOW_PRINTED$=ORDER_ACKNOW_PRINTED$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDE_A_P")+" = "+_CUR.ORDER_ACKNOW_PRINTED$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDE_A_P")+" = "+_CUR.ORDER_ACKNOW_PRINTED$
15200 IF _ORIG.RFQ_TYPE_QUOTATION$=_CUR.RFQ_TYPE_QUOTATION$ OR RFQ_TYPE_QUOTATION$=_CUR.RFQ_TYPE_QUOTATION$ THEN GOTO *NEXT ELSE IF _ORIG.RFQ_TYPE_QUOTATION$=RFQ_TYPE_QUOTATION$ THEN _CHG2$=_CHG2$+SEP+MSG("RFQ_T_Q")+" = "+_CUR.RFQ_TYPE_QUOTATION$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RFQ_T_Q")+" = "+_CUR.RFQ_TYPE_QUOTATION$
15210 IF _ORIG.CONSOLIDATED_PL$=_CUR.CONSOLIDATED_PL$ OR CONSOLIDATED_PL$=_CUR.CONSOLIDATED_PL$ THEN GOTO *NEXT ELSE IF _ORIG.CONSOLIDATED_PL$=CONSOLIDATED_PL$ THEN _CHG2$=_CHG2$+SEP+MSG("CONS_P")+" = "+_CUR.CONSOLIDATED_PL$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CONS_P")+" = "+_CUR.CONSOLIDATED_PL$
15220 IF _ORIG.ORDER_TYPE_3$=_CUR.ORDER_TYPE_3$ OR ORDER_TYPE_3$=_CUR.ORDER_TYPE_3$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_TYPE_3$=ORDER_TYPE_3$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDE_T_3")+" = "+_CUR.ORDER_TYPE_3$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDE_T_3")+" = "+_CUR.ORDER_TYPE_3$
15230 IF _ORIG.DATE_REQUESTED$=_CUR.DATE_REQUESTED$ OR DATE_REQUESTED$=_CUR.DATE_REQUESTED$ THEN GOTO *NEXT ELSE IF _ORIG.DATE_REQUESTED$=DATE_REQUESTED$ THEN _CHG2$=_CHG2$+SEP+MSG("DATE_R")+" = "+_CUR.DATE_REQUESTED$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DATE_R")+" = "+_CUR.DATE_REQUESTED$
15240 IF _ORIG.SO_LETTER_TYPE_CODE$=_CUR.SO_LETTER_TYPE_CODE$ OR SO_LETTER_TYPE_CODE$=_CUR.SO_LETTER_TYPE_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.SO_LETTER_TYPE_CODE$=SO_LETTER_TYPE_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("S_L_T_C")+" = "+_CUR.SO_LETTER_TYPE_CODE$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("S_L_T_C")+" = "+_CUR.SO_LETTER_TYPE_CODE$
15250 IF _ORIG.PRINT_SHIPPING_ACK$=_CUR.PRINT_SHIPPING_ACK$ OR PRINT_SHIPPING_ACK$=_CUR.PRINT_SHIPPING_ACK$ THEN GOTO *NEXT ELSE IF _ORIG.PRINT_SHIPPING_ACK$=PRINT_SHIPPING_ACK$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIN_S_A")+" = "+_CUR.PRINT_SHIPPING_ACK$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIN_S_A")+" = "+_CUR.PRINT_SHIPPING_ACK$
15260 IF _ORIG.INV_IN_PROGRESS$=_CUR.INV_IN_PROGRESS$ OR INV_IN_PROGRESS$=_CUR.INV_IN_PROGRESS$ THEN GOTO *NEXT ELSE IF _ORIG.INV_IN_PROGRESS$=INV_IN_PROGRESS$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_I_P")+" = "+_CUR.INV_IN_PROGRESS$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_I_P")+" = "+_CUR.INV_IN_PROGRESS$
15270 IF _ORIG.DEPOSIT_CHECK_NUM$=_CUR.DEPOSIT_CHECK_NUM$ OR DEPOSIT_CHECK_NUM$=_CUR.DEPOSIT_CHECK_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.DEPOSIT_CHECK_NUM$=DEPOSIT_CHECK_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("DEPO_C_N")+" = "+_CUR.DEPOSIT_CHECK_NUM$,_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DEPO_C_N")+" = "+_CUR.DEPOSIT_CHECK_NUM$
15280 IF _ORIG.DEPOSIT_CHECK_DATE$=_CUR.DEPOSIT_CHECK_DATE$ OR DEPOSIT_CHECK_DATE$=_CUR.DEPOSIT_CHECK_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.DEPOSIT_CHECK_DATE$=DEPOSIT_CHECK_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("DEPO_C_D")+" = "+_CUR.DEPOSIT_CHECK_DATE$,_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DEPO_C_D")+" = "+_CUR.DEPOSIT_CHECK_DATE$
15290 ! IF _ORIG.STAX_CODE$=_CUR.STAX_CODE$ OR STAX_CODE$=_CUR.STAX_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.STAX_CODE$=STAX_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("STAX_CODE")+" = "+_CUR.STAX_CODE$,_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STAX_CODE")+" = "+_CUR.STAX_CODE$
15300 IF _ORIG.TAXABLE$=_CUR.TAXABLE$ OR TAXABLE$=_CUR.TAXABLE$ THEN GOTO *NEXT ELSE IF _ORIG.TAXABLE$=TAXABLE$ THEN _CHG2$=_CHG2$+SEP+MSG("TAXABLE")+" = "+_CUR.TAXABLE$,_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TAXABLE")+" = "+_CUR.TAXABLE$
15310 IF _ORIG.TERMS_CODE$=_CUR.TERMS_CODE$ OR TERMS_CODE$=_CUR.TERMS_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.TERMS_CODE$=TERMS_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("TERMS_CODE")+" = "+_CUR.TERMS_CODE$,_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TERMS_CODE")+" = "+_CUR.TERMS_CODE$
15320 IF _ORIG.CUST_SERV_REP$=_CUR.CUST_SERV_REP$ OR CUST_SERV_REP$=_CUR.CUST_SERV_REP$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_SERV_REP$=CUST_SERV_REP$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_S_R")+" = "+_CUR.CUST_SERV_REP$,_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_S_R")+" = "+_CUR.CUST_SERV_REP$
15330 IF _ORIG.SPER_CODE$=_CUR.SPER_CODE$ OR SPER_CODE$=_CUR.SPER_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.SPER_CODE$=SPER_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("SPER_CODE")+" = "+_CUR.SPER_CODE$,_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPER_CODE")+" = "+_CUR.SPER_CODE$
15340 IF _ORIG.COMM_CODE$=_CUR.COMM_CODE$ OR COMM_CODE$=_CUR.COMM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.COMM_CODE$=COMM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("COMM_CODE")+" = "+_CUR.COMM_CODE$,_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMM_CODE")+" = "+_CUR.COMM_CODE$
15350 IF _ORIG.OTHER_SPER_1$=_CUR.OTHER_SPER_1$ OR OTHER_SPER_1$=_CUR.OTHER_SPER_1$ THEN GOTO *NEXT ELSE IF _ORIG.OTHER_SPER_1$=OTHER_SPER_1$ THEN _CHG2$=_CHG2$+SEP+MSG("OTHE_S_1")+" = "+_CUR.OTHER_SPER_1$,_CHG_VAR$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OTHE_S_1")+" = "+_CUR.OTHER_SPER_1$
15360 IF _ORIG.OTHER_SPER_2$=_CUR.OTHER_SPER_2$ OR OTHER_SPER_2$=_CUR.OTHER_SPER_2$ THEN GOTO *NEXT ELSE IF _ORIG.OTHER_SPER_2$=OTHER_SPER_2$ THEN _CHG2$=_CHG2$+SEP+MSG("OTHE_S_2")+" = "+_CUR.OTHER_SPER_2$,_CHG_VAR$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OTHE_S_2")+" = "+_CUR.OTHER_SPER_2$
15370 IF _ORIG.OTHER_SPER_3$=_CUR.OTHER_SPER_3$ OR OTHER_SPER_3$=_CUR.OTHER_SPER_3$ THEN GOTO *NEXT ELSE IF _ORIG.OTHER_SPER_3$=OTHER_SPER_3$ THEN _CHG2$=_CHG2$+SEP+MSG("OTHE_S_3")+" = "+_CUR.OTHER_SPER_3$,_CHG_VAR$(35,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OTHE_S_3")+" = "+_CUR.OTHER_SPER_3$
15380 IF _ORIG.OTHER_SPER_4$=_CUR.OTHER_SPER_4$ OR OTHER_SPER_4$=_CUR.OTHER_SPER_4$ THEN GOTO *NEXT ELSE IF _ORIG.OTHER_SPER_4$=OTHER_SPER_4$ THEN _CHG2$=_CHG2$+SEP+MSG("OTHE_S_4")+" = "+_CUR.OTHER_SPER_4$,_CHG_VAR$(36,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OTHE_S_4")+" = "+_CUR.OTHER_SPER_4$
15390 IF _ORIG.ORDER_DIV$=_CUR.ORDER_DIV$ OR ORDER_DIV$=_CUR.ORDER_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_DIV$=ORDER_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_DIV")+" = "+_CUR.ORDER_DIV$,_CHG_VAR$(37,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_DIV")+" = "+_CUR.ORDER_DIV$
15400 IF _ORIG.ORDER_NUM$=_CUR.ORDER_NUM$ OR ORDER_NUM$=_CUR.ORDER_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_NUM$=ORDER_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_NUM")+" = "+_CUR.ORDER_NUM$,_CHG_VAR$(38,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_NUM")+" = "+_CUR.ORDER_NUM$
15410 IF _ORIG.SALES_ORDER_PRINTED$=_CUR.SALES_ORDER_PRINTED$ OR SALES_ORDER_PRINTED$=_CUR.SALES_ORDER_PRINTED$ THEN GOTO *NEXT ELSE IF _ORIG.SALES_ORDER_PRINTED$=SALES_ORDER_PRINTED$ THEN _CHG2$=_CHG2$+SEP+MSG("SALE_O_P")+" = "+_CUR.SALES_ORDER_PRINTED$,_CHG_VAR$(39,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SALE_O_P")+" = "+_CUR.SALES_ORDER_PRINTED$
15420 IF _ORIG.CTN_LBL_PRINTED$=_CUR.CTN_LBL_PRINTED$ OR CTN_LBL_PRINTED$=_CUR.CTN_LBL_PRINTED$ THEN GOTO *NEXT ELSE IF _ORIG.CTN_LBL_PRINTED$=CTN_LBL_PRINTED$ THEN _CHG2$=_CHG2$+SEP+MSG("CTN_L_P")+" = "+_CUR.CTN_LBL_PRINTED$,_CHG_VAR$(40,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CTN_L_P")+" = "+_CUR.CTN_LBL_PRINTED$
15430 IF _ORIG.PACKING_LIST_PRINTD$=_CUR.PACKING_LIST_PRINTD$ OR PACKING_LIST_PRINTD$=_CUR.PACKING_LIST_PRINTD$ THEN GOTO *NEXT ELSE IF _ORIG.PACKING_LIST_PRINTD$=PACKING_LIST_PRINTD$ THEN _CHG2$=_CHG2$+SEP+MSG("PACK_L_P")+" = "+_CUR.PACKING_LIST_PRINTD$,_CHG_VAR$(41,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PACK_L_P")+" = "+_CUR.PACKING_LIST_PRINTD$
15440 IF _ORIG.ORDERED_BY$=_CUR.ORDERED_BY$ OR ORDERED_BY$=_CUR.ORDERED_BY$ THEN GOTO *NEXT ELSE IF _ORIG.ORDERED_BY$=ORDERED_BY$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDERED_BY")+" = "+_CUR.ORDERED_BY$,_CHG_VAR$(42,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDERED_BY")+" = "+_CUR.ORDERED_BY$
15450 IF _ORIG.ORDER_GREETING$=_CUR.ORDER_GREETING$ OR ORDER_GREETING$=_CUR.ORDER_GREETING$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_GREETING$=ORDER_GREETING$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDE_G")+" = "+_CUR.ORDER_GREETING$,_CHG_VAR$(43,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDE_G")+" = "+_CUR.ORDER_GREETING$
15460 IF _ORIG.OPER_CODE_1ST$=_CUR.OPER_CODE_1ST$ OR OPER_CODE_1ST$=_CUR.OPER_CODE_1ST$ THEN GOTO *NEXT ELSE IF _ORIG.OPER_CODE_1ST$=OPER_CODE_1ST$ THEN _CHG2$=_CHG2$+SEP+MSG("OPER_C_1")+" = "+_CUR.OPER_CODE_1ST$,_CHG_VAR$(44,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OPER_C_1")+" = "+_CUR.OPER_CODE_1ST$
15470 IF _ORIG.OPER_CODE_LAST_MOD$=_CUR.OPER_CODE_LAST_MOD$ OR OPER_CODE_LAST_MOD$=_CUR.OPER_CODE_LAST_MOD$ THEN GOTO *NEXT ELSE IF _ORIG.OPER_CODE_LAST_MOD$=OPER_CODE_LAST_MOD$ THEN _CHG2$=_CHG2$+SEP+MSG("OPER_C_L_M")+" = "+_CUR.OPER_CODE_LAST_MOD$,_CHG_VAR$(45,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OPER_C_L_M")+" = "+_CUR.OPER_CODE_LAST_MOD$
15480 IF _ORIG.DATE_LAST_MODIFIED$=_CUR.DATE_LAST_MODIFIED$ OR DATE_LAST_MODIFIED$=_CUR.DATE_LAST_MODIFIED$ THEN GOTO *NEXT ELSE IF _ORIG.DATE_LAST_MODIFIED$=DATE_LAST_MODIFIED$ THEN _CHG2$=_CHG2$+SEP+MSG("DATE_L_M")+" = "+_CUR.DATE_LAST_MODIFIED$,_CHG_VAR$(46,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DATE_L_M")+" = "+_CUR.DATE_LAST_MODIFIED$
15490 IF _ORIG.AUTO_REQ_TYPE$=_CUR.AUTO_REQ_TYPE$ OR AUTO_REQ_TYPE$=_CUR.AUTO_REQ_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.AUTO_REQ_TYPE$=AUTO_REQ_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("AUTO_R_T")+" = "+_CUR.AUTO_REQ_TYPE$,_CHG_VAR$(47,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("AUTO_R_T")+" = "+_CUR.AUTO_REQ_TYPE$
15500 IF _ORIG.CONSOL_ORDER_TYPE$=_CUR.CONSOL_ORDER_TYPE$ OR CONSOL_ORDER_TYPE$=_CUR.CONSOL_ORDER_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.CONSOL_ORDER_TYPE$=CONSOL_ORDER_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("CONS_O_T")+" = "+_CUR.CONSOL_ORDER_TYPE$,_CHG_VAR$(48,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CONS_O_T")+" = "+_CUR.CONSOL_ORDER_TYPE$
15510 IF _ORIG.QUOTE_FROM_LINES$=_CUR.QUOTE_FROM_LINES$ OR QUOTE_FROM_LINES$=_CUR.QUOTE_FROM_LINES$ THEN GOTO *NEXT ELSE IF _ORIG.QUOTE_FROM_LINES$=QUOTE_FROM_LINES$ THEN _CHG2$=_CHG2$+SEP+MSG("QUOT_F_L")+" = "+_CUR.QUOTE_FROM_LINES$,_CHG_VAR$(49,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QUOT_F_L")+" = "+_CUR.QUOTE_FROM_LINES$
15520 IF _ORIG.REPEAT_ORDER$=_CUR.REPEAT_ORDER$ OR REPEAT_ORDER$=_CUR.REPEAT_ORDER$ THEN GOTO *NEXT ELSE IF _ORIG.REPEAT_ORDER$=REPEAT_ORDER$ THEN _CHG2$=_CHG2$+SEP+MSG("REPE_O")+" = "+_CUR.REPEAT_ORDER$,_CHG_VAR$(50,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("REPE_O")+" = "+_CUR.REPEAT_ORDER$
15530 IF _ORIG.REPEAT_FROM_ORD$=_CUR.REPEAT_FROM_ORD$ OR REPEAT_FROM_ORD$=_CUR.REPEAT_FROM_ORD$ THEN GOTO *NEXT ELSE IF _ORIG.REPEAT_FROM_ORD$=REPEAT_FROM_ORD$ THEN _CHG2$=_CHG2$+SEP+MSG("REPE_F_O")+" = "+_CUR.REPEAT_FROM_ORD$,_CHG_VAR$(51,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("REPE_F_O")+" = "+_CUR.REPEAT_FROM_ORD$
15540 IF _ORIG.EXCLUDE_REBATE$=_CUR.EXCLUDE_REBATE$ OR EXCLUDE_REBATE$=_CUR.EXCLUDE_REBATE$ THEN GOTO *NEXT ELSE IF _ORIG.EXCLUDE_REBATE$=EXCLUDE_REBATE$ THEN _CHG2$=_CHG2$+SEP+MSG("EXCL_R")+" = "+_CUR.EXCLUDE_REBATE$,_CHG_VAR$(52,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EXCL_R")+" = "+_CUR.EXCLUDE_REBATE$
15550 IF _ORIG.ON_HOLD$=_CUR.ON_HOLD$ OR ON_HOLD$=_CUR.ON_HOLD$ THEN GOTO *NEXT ELSE IF _ORIG.ON_HOLD$=ON_HOLD$ THEN _CHG2$=_CHG2$+SEP+MSG("ON_HOLD")+" = "+_CUR.ON_HOLD$,_CHG_VAR$(53,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ON_HOLD")+" = "+_CUR.ON_HOLD$
15560 IF _ORIG.GB_GOLD_RUSH$=_CUR.GB_GOLD_RUSH$ OR GB_GOLD_RUSH$=_CUR.GB_GOLD_RUSH$ THEN GOTO *NEXT ELSE IF _ORIG.GB_GOLD_RUSH$=GB_GOLD_RUSH$ THEN _CHG2$=_CHG2$+SEP+MSG("G_G_R")+" = "+_CUR.GB_GOLD_RUSH$,_CHG_VAR$(54,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("G_G_R")+" = "+_CUR.GB_GOLD_RUSH$
15570 IF _ORIG.GB_SAMPLE_ORD$=_CUR.GB_SAMPLE_ORD$ OR GB_SAMPLE_ORD$=_CUR.GB_SAMPLE_ORD$ THEN GOTO *NEXT ELSE IF _ORIG.GB_SAMPLE_ORD$=GB_SAMPLE_ORD$ THEN _CHG2$=_CHG2$+SEP+MSG("G_S_O")+" = "+_CUR.GB_SAMPLE_ORD$,_CHG_VAR$(55,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("G_S_O")+" = "+_CUR.GB_SAMPLE_ORD$
15580 IF _ORIG.GB_USE_REBATE$=_CUR.GB_USE_REBATE$ OR GB_USE_REBATE$=_CUR.GB_USE_REBATE$ THEN GOTO *NEXT ELSE IF _ORIG.GB_USE_REBATE$=GB_USE_REBATE$ THEN _CHG2$=_CHG2$+SEP+MSG("G_U_R")+" = "+_CUR.GB_USE_REBATE$,_CHG_VAR$(56,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("G_U_R")+" = "+_CUR.GB_USE_REBATE$
15590 IF _ORIG.GB_OVERRUNS$=_CUR.GB_OVERRUNS$ OR GB_OVERRUNS$=_CUR.GB_OVERRUNS$ THEN GOTO *NEXT ELSE IF _ORIG.GB_OVERRUNS$=GB_OVERRUNS$ THEN _CHG2$=_CHG2$+SEP+MSG("G_O")+" = "+_CUR.GB_OVERRUNS$,_CHG_VAR$(57,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("G_O")+" = "+_CUR.GB_OVERRUNS$
15600 IF _ORIG.GB_PROD_DEPT$=_CUR.GB_PROD_DEPT$ OR GB_PROD_DEPT$=_CUR.GB_PROD_DEPT$ THEN GOTO *NEXT ELSE IF _ORIG.GB_PROD_DEPT$=GB_PROD_DEPT$ THEN _CHG2$=_CHG2$+SEP+MSG("G_P_D")+" = "+_CUR.GB_PROD_DEPT$,_CHG_VAR$(58,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("G_P_D")+" = "+_CUR.GB_PROD_DEPT$
15610 IF _ORIG.GB_PL_COPIES$=_CUR.GB_PL_COPIES$ OR GB_PL_COPIES$=_CUR.GB_PL_COPIES$ THEN GOTO *NEXT ELSE IF _ORIG.GB_PL_COPIES$=GB_PL_COPIES$ THEN _CHG2$=_CHG2$+SEP+MSG("G_P_C")+" = "+_CUR.GB_PL_COPIES$,_CHG_VAR$(59,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("G_P_C")+" = "+_CUR.GB_PL_COPIES$
15620 IF _ORIG.GB_IMPRINT_COLOR$=_CUR.GB_IMPRINT_COLOR$ OR GB_IMPRINT_COLOR$=_CUR.GB_IMPRINT_COLOR$ THEN GOTO *NEXT ELSE IF _ORIG.GB_IMPRINT_COLOR$=GB_IMPRINT_COLOR$ THEN _CHG2$=_CHG2$+SEP+MSG("G_I_C")+" = "+_CUR.GB_IMPRINT_COLOR$,_CHG_VAR$(60,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("G_I_C")+" = "+_CUR.GB_IMPRINT_COLOR$
15630 IF _ORIG.GB_SAMPLES_DIST$=_CUR.GB_SAMPLES_DIST$ OR GB_SAMPLES_DIST$=_CUR.GB_SAMPLES_DIST$ THEN GOTO *NEXT ELSE IF _ORIG.GB_SAMPLES_DIST$=GB_SAMPLES_DIST$ THEN _CHG2$=_CHG2$+SEP+MSG("G_S_D")+" = "+_CUR.GB_SAMPLES_DIST$,_CHG_VAR$(61,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("G_S_D")+" = "+_CUR.GB_SAMPLES_DIST$
15640 IF _ORIG.GB_SURE$=_CUR.GB_SURE$ OR GB_SURE$=_CUR.GB_SURE$ THEN GOTO *NEXT ELSE IF _ORIG.GB_SURE$=GB_SURE$ THEN _CHG2$=_CHG2$+SEP+MSG("GB_SURE")+" = "+_CUR.GB_SURE$,_CHG_VAR$(62,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GB_SURE")+" = "+_CUR.GB_SURE$
15650 IF _ORIG.SCALE_SEQ_NUM$=_CUR.SCALE_SEQ_NUM$ OR SCALE_SEQ_NUM$=_CUR.SCALE_SEQ_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.SCALE_SEQ_NUM$=SCALE_SEQ_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("SCAL_S_N")+" = "+_CUR.SCALE_SEQ_NUM$,_CHG_VAR$(63,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SCAL_S_N")+" = "+_CUR.SCALE_SEQ_NUM$
15660 IF _ORIG.SAMPLE_REBATE_LN$=_CUR.SAMPLE_REBATE_LN$ OR SAMPLE_REBATE_LN$=_CUR.SAMPLE_REBATE_LN$ THEN GOTO *NEXT ELSE IF _ORIG.SAMPLE_REBATE_LN$=SAMPLE_REBATE_LN$ THEN _CHG2$=_CHG2$+SEP+MSG("SAMP_R_L")+" = "+_CUR.SAMPLE_REBATE_LN$,_CHG_VAR$(64,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SAMP_R_L")+" = "+_CUR.SAMPLE_REBATE_LN$
15670 IF _ORIG.FM2ODH_OPTIONS$=_CUR.FM2ODH_OPTIONS$ OR FM2ODH_OPTIONS$=_CUR.FM2ODH_OPTIONS$ THEN GOTO *NEXT ELSE IF _ORIG.FM2ODH_OPTIONS$=FM2ODH_OPTIONS$ THEN _CHG2$=_CHG2$+SEP+MSG("FM2O_O")+" = "+_CUR.FM2ODH_OPTIONS$,_CHG_VAR$(65,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FM2O_O")+" = "+_CUR.FM2ODH_OPTIONS$
15680 IF _ORIG.INV_COST_SEQ$=_CUR.INV_COST_SEQ$ OR INV_COST_SEQ$=_CUR.INV_COST_SEQ$ THEN GOTO *NEXT ELSE IF _ORIG.INV_COST_SEQ$=INV_COST_SEQ$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_C_S")+" = "+_CUR.INV_COST_SEQ$,_CHG_VAR$(66,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_C_S")+" = "+_CUR.INV_COST_SEQ$
15690 IF _ORIG.INV_COST_PARM$=_CUR.INV_COST_PARM$ OR INV_COST_PARM$=_CUR.INV_COST_PARM$ THEN GOTO *NEXT ELSE IF _ORIG.INV_COST_PARM$=INV_COST_PARM$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_C_P")+" = "+_CUR.INV_COST_PARM$,_CHG_VAR$(67,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_C_P")+" = "+_CUR.INV_COST_PARM$
15700 IF _ORIG.NO_DELETE$=_CUR.NO_DELETE$ OR NO_DELETE$=_CUR.NO_DELETE$ THEN GOTO *NEXT ELSE IF _ORIG.NO_DELETE$=NO_DELETE$ THEN _CHG2$=_CHG2$+SEP+MSG("NO_DELETE")+" = "+_CUR.NO_DELETE$,_CHG_VAR$(68,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NO_DELETE")+" = "+_CUR.NO_DELETE$
15710 IF _ORIG.BO_FILL_REQ_CHG$=_CUR.BO_FILL_REQ_CHG$ OR BO_FILL_REQ_CHG$=_CUR.BO_FILL_REQ_CHG$ THEN GOTO *NEXT ELSE IF _ORIG.BO_FILL_REQ_CHG$=BO_FILL_REQ_CHG$ THEN _CHG2$=_CHG2$+SEP+MSG("BO_FILL")+" = "+_CUR.BO_FILL_REQ_CHG$,_CHG_VAR$(69,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BO_FILL")+" = "+_CUR.BO_FILL_REQ_CHG$
15711 IF _ORIG.CIG_FLAG$=_CUR.CIG_FLAG$ OR CIG_FLAG$=_CUR.CIG_FLAG$ THEN GOTO *NEXT ELSE IF _ORIG.CIG_FLAG$=CIG_FLAG$ THEN _CHG2$=_CHG2$+SEP+MSG("CIG_FLAG")+" = "+_CUR.CIG_FLAG$,_CHG_VAR$(70,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CIG_FLAG")+" = "+_CUR.CIG_FLAG$
15712 IF _ORIG.FREIGHT_MARKUP_TABLE$=_CUR.FREIGHT_MARKUP_TABLE$ OR FREIGHT_MARKUP_TABLE$=_CUR.FREIGHT_MARKUP_TABLE$ THEN GOTO *NEXT ELSE IF _ORIG.FREIGHT_MARKUP_TABLE$=FREIGHT_MARKUP_TABLE$ THEN _CHG2$=_CHG2$+SEP+MSG("FRT_MU_TBL")+" = "+_CUR.FREIGHT_MARKUP_TABLE$,_CHG_VAR$(71,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FRT_MU_TBL")+" = "+_CUR.FREIGHT_MARKUP_TABLE$
15713 IF _ORIG.ORDER_SOURCE$=_CUR.ORDER_SOURCE$ OR ORDER_SOURCE$=_CUR.ORDER_SOURCE$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_SOURCE$=ORDER_SOURCE$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_SRC")+" = "+_CUR.ORDER_SOURCE$,_CHG_VAR$(72,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_SRC")+" = "+_CUR.ORDER_SOURCE$
15714 IF _ORIG.WEBEC_BUYER$=_CUR.WEBEC_BUYER$ OR WEBEC_BUYER$=_CUR.WEBEC_BUYER$ THEN GOTO *NEXT ELSE IF _ORIG.WEBEC_BUYER$=WEBEC_BUYER$ THEN _CHG2$=_CHG2$+SEP+MSG("WEB_BUYER")+" = "+_CUR.WEBEC_BUYER$,_CHG_VAR$(73,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WEB_BUYER")+" = "+_CUR.WEBEC_BUYER$
15715 IF _ORIG.WEB_SESSION$=_CUR.WEB_SESSION$ OR WEB_SESSION$=_CUR.WEB_SESSION$ THEN GOTO *NEXT ELSE IF _ORIG.WEB_SESSION$=WEB_SESSION$ THEN _CHG2$=_CHG2$+SEP+MSG("WEB_SESS")+" = "+_CUR.WEB_SESSION$,_CHG_VAR$(74,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WEB_SESS")+" = "+_CUR.WEB_SESSION$
15720 IF _ORIG.FS1_UNUSED_1$=_CUR.FS1_UNUSED_1$ OR FS1_UNUSED_1$=_CUR.FS1_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.FS1_UNUSED_1$=FS1_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.FS1_UNUSED_1$,_CHG_VAR$(75,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.FS1_UNUSED_1$
15730 IF _ORIG.DEPOSIT_AMT=_CUR.DEPOSIT_AMT OR DEPOSIT_AMT=_CUR.DEPOSIT_AMT THEN GOTO *NEXT ELSE IF _ORIG.DEPOSIT_AMT=DEPOSIT_AMT THEN _CHG2$=_CHG2$+SEP+MSG("DEPO_A")+" = "+STR(_CUR.DEPOSIT_AMT),_CHG_VAR$(76,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DEPO_A")+" = "+STR(_CUR.DEPOSIT_AMT)
15740 IF _ORIG.SALESMAN_1_PCT_SALE=_CUR.SALESMAN_1_PCT_SALE OR SALESMAN_1_PCT_SALE=_CUR.SALESMAN_1_PCT_SALE THEN GOTO *NEXT ELSE IF _ORIG.SALESMAN_1_PCT_SALE=SALESMAN_1_PCT_SALE THEN _CHG2$=_CHG2$+SEP+MSG("SALE_1_P_S")+" = "+STR(_CUR.SALESMAN_1_PCT_SALE),_CHG_VAR$(77,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SALE_1_P_S")+" = "+STR(_CUR.SALESMAN_1_PCT_SALE)
15750 IF _ORIG.ALT_SPER_PRCNT_1=_CUR.ALT_SPER_PRCNT_1 OR ALT_SPER_PRCNT_1=_CUR.ALT_SPER_PRCNT_1 THEN GOTO *NEXT ELSE IF _ORIG.ALT_SPER_PRCNT_1=ALT_SPER_PRCNT_1 THEN _CHG2$=_CHG2$+SEP+MSG("ALT_S_P_1")+" = "+STR(_CUR.ALT_SPER_PRCNT_1),_CHG_VAR$(78,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_S_P_1")+" = "+STR(_CUR.ALT_SPER_PRCNT_1)
15760 IF _ORIG.ALT_SPER_PRCNT_2=_CUR.ALT_SPER_PRCNT_2 OR ALT_SPER_PRCNT_2=_CUR.ALT_SPER_PRCNT_2 THEN GOTO *NEXT ELSE IF _ORIG.ALT_SPER_PRCNT_2=ALT_SPER_PRCNT_2 THEN _CHG2$=_CHG2$+SEP+MSG("ALT_S_P_2")+" = "+STR(_CUR.ALT_SPER_PRCNT_2),_CHG_VAR$(79,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_S_P_2")+" = "+STR(_CUR.ALT_SPER_PRCNT_2)
15770 IF _ORIG.ALT_SPER_PRCNT_3=_CUR.ALT_SPER_PRCNT_3 OR ALT_SPER_PRCNT_3=_CUR.ALT_SPER_PRCNT_3 THEN GOTO *NEXT ELSE IF _ORIG.ALT_SPER_PRCNT_3=ALT_SPER_PRCNT_3 THEN _CHG2$=_CHG2$+SEP+MSG("ALT_S_P_3")+" = "+STR(_CUR.ALT_SPER_PRCNT_3),_CHG_VAR$(80,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_S_P_3")+" = "+STR(_CUR.ALT_SPER_PRCNT_3)
15780 IF _ORIG.ALT_SPER_PRCNT_4=_CUR.ALT_SPER_PRCNT_4 OR ALT_SPER_PRCNT_4=_CUR.ALT_SPER_PRCNT_4 THEN GOTO *NEXT ELSE IF _ORIG.ALT_SPER_PRCNT_4=ALT_SPER_PRCNT_4 THEN _CHG2$=_CHG2$+SEP+MSG("ALT_S_P_4")+" = "+STR(_CUR.ALT_SPER_PRCNT_4),_CHG_VAR$(81,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_S_P_4")+" = "+STR(_CUR.ALT_SPER_PRCNT_4)
15790 IF _ORIG.ORDER_AMT=_CUR.ORDER_AMT OR ORDER_AMT=_CUR.ORDER_AMT THEN GOTO *NEXT ELSE IF _ORIG.ORDER_AMT=ORDER_AMT THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_AMT")+" = "+STR(_CUR.ORDER_AMT),_CHG_VAR$(82,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_AMT")+" = "+STR(_CUR.ORDER_AMT)
15800 IF _ORIG.ORDER_COST=_CUR.ORDER_COST OR ORDER_COST=_CUR.ORDER_COST THEN GOTO *NEXT ELSE IF _ORIG.ORDER_COST=ORDER_COST THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_COST")+" = "+STR(_CUR.ORDER_COST),_CHG_VAR$(83,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_COST")+" = "+STR(_CUR.ORDER_COST)
15810 IF _ORIG.FRT_AMT=_CUR.FRT_AMT OR FRT_AMT=_CUR.FRT_AMT THEN GOTO *NEXT ELSE IF _ORIG.FRT_AMT=FRT_AMT THEN _CHG2$=_CHG2$+SEP+MSG("FRT_AMT")+" = "+STR(_CUR.FRT_AMT),_CHG_VAR$(84,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FRT_AMT")+" = "+STR(_CUR.FRT_AMT)
15820 IF _ORIG.LINE_ITEM_DISC_PRCNT=_CUR.LINE_ITEM_DISC_PRCNT OR LINE_ITEM_DISC_PRCNT=_CUR.LINE_ITEM_DISC_PRCNT THEN GOTO *NEXT ELSE IF _ORIG.LINE_ITEM_DISC_PRCNT=LINE_ITEM_DISC_PRCNT THEN _CHG2$=_CHG2$+SEP+MSG("LINE_I_D_P")+" = "+STR(_CUR.LINE_ITEM_DISC_PRCNT),_CHG_VAR$(85,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_I_D_P")+" = "+STR(_CUR.LINE_ITEM_DISC_PRCNT)
15830 IF _ORIG.FRT_FROM_LOTS=_CUR.FRT_FROM_LOTS OR FRT_FROM_LOTS=_CUR.FRT_FROM_LOTS THEN GOTO *NEXT ELSE IF _ORIG.FRT_FROM_LOTS=FRT_FROM_LOTS THEN _CHG2$=_CHG2$+SEP+MSG("FRT_F_L")+" = "+STR(_CUR.FRT_FROM_LOTS),_CHG_VAR$(86,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FRT_F_L")+" = "+STR(_CUR.FRT_FROM_LOTS)
15840 IF _ORIG.FS1_UNUSED_2=_CUR.FS1_UNUSED_2 OR FS1_UNUSED_2=_CUR.FS1_UNUSED_2 THEN GOTO *NEXT ELSE IF _ORIG.FS1_UNUSED_2=FS1_UNUSED_2 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FS1_UNUSED_2),_CHG_VAR$(87,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FS1_UNUSED_2)
15850 IF _ORIG.FS1_UNUSED_3=_CUR.FS1_UNUSED_3 OR FS1_UNUSED_3=_CUR.FS1_UNUSED_3 THEN GOTO *NEXT ELSE IF _ORIG.FS1_UNUSED_3=FS1_UNUSED_3 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FS1_UNUSED_3),_CHG_VAR$(88,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FS1_UNUSED_3)
15860 IF _ORIG.FS1_UNUSED_4=_CUR.FS1_UNUSED_4 OR FS1_UNUSED_4=_CUR.FS1_UNUSED_4 THEN GOTO *NEXT ELSE IF _ORIG.FS1_UNUSED_4=FS1_UNUSED_4 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FS1_UNUSED_4),_CHG_VAR$(89,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.FS1_UNUSED_4)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN NUM_TIMES_PL_PRINTED$=_CUR.NUM_TIMES_PL_PRINTED$
16030 IF _CHG_VAR$(2,1)="Y" THEN BACKGROUND_PROC$=_CUR.BACKGROUND_PROC$
16040 IF _CHG_VAR$(3,1)="Y" THEN MASTER_QUOTE_PART_2$=_CUR.MASTER_QUOTE_PART_2$
16050 IF _CHG_VAR$(4,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16060 IF _CHG_VAR$(5,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16070 IF _CHG_VAR$(6,1)="Y" THEN ORDER_DATE$=_CUR.ORDER_DATE$
16080 IF _CHG_VAR$(7,1)="Y" THEN ORDER_TYPE_2$=_CUR.ORDER_TYPE_2$
16090 IF _CHG_VAR$(8,1)="Y" THEN MASTER_QUOTE_PART_1$=_CUR.MASTER_QUOTE_PART_1$
16100 IF _CHG_VAR$(9,1)="Y" THEN CUST_PO$=_CUR.CUST_PO$
16110 IF _CHG_VAR$(10,1)="Y" THEN WORK_ORDER$=_CUR.WORK_ORDER$
16120 IF _CHG_VAR$(11,1)="Y" THEN WD_TYPE$=_CUR.WD_TYPE$
16130 IF _CHG_VAR$(12,1)="Y" THEN WORK_ORDER_PRINTED$=_CUR.WORK_ORDER_PRINTED$
16140 IF _CHG_VAR$(13,1)="Y" THEN WORK_ORDER_REV_NUM$=_CUR.WORK_ORDER_REV_NUM$
16150 IF _CHG_VAR$(14,1)="Y" THEN ORDER_TYPE_1$=_CUR.ORDER_TYPE_1$
16160 IF _CHG_VAR$(15,1)="Y" THEN BACK_ORDER$=_CUR.BACK_ORDER$
16170 IF _CHG_VAR$(16,1)="Y" THEN PROMOTION_CODE$=_CUR.PROMOTION_CODE$
16180 IF _CHG_VAR$(17,1)="Y" THEN ORDER_ACKNOW_PRINTED$=_CUR.ORDER_ACKNOW_PRINTED$
16190 IF _CHG_VAR$(18,1)="Y" THEN RFQ_TYPE_QUOTATION$=_CUR.RFQ_TYPE_QUOTATION$
16200 IF _CHG_VAR$(19,1)="Y" THEN CONSOLIDATED_PL$=_CUR.CONSOLIDATED_PL$
16210 IF _CHG_VAR$(20,1)="Y" THEN ORDER_TYPE_3$=_CUR.ORDER_TYPE_3$
16220 IF _CHG_VAR$(21,1)="Y" THEN DATE_REQUESTED$=_CUR.DATE_REQUESTED$
16230 IF _CHG_VAR$(22,1)="Y" THEN SO_LETTER_TYPE_CODE$=_CUR.SO_LETTER_TYPE_CODE$
16240 IF _CHG_VAR$(23,1)="Y" THEN PRINT_SHIPPING_ACK$=_CUR.PRINT_SHIPPING_ACK$
16250 IF _CHG_VAR$(24,1)="Y" THEN INV_IN_PROGRESS$=_CUR.INV_IN_PROGRESS$
16260 IF _CHG_VAR$(25,1)="Y" THEN DEPOSIT_CHECK_NUM$=_CUR.DEPOSIT_CHECK_NUM$
16270 IF _CHG_VAR$(26,1)="Y" THEN DEPOSIT_CHECK_DATE$=_CUR.DEPOSIT_CHECK_DATE$
16280 IF _CHG_VAR$(27,1)="Y" THEN STAX_CODE$=_CUR.STAX_CODE$
16290 IF _CHG_VAR$(28,1)="Y" THEN TAXABLE$=_CUR.TAXABLE$
16300 IF _CHG_VAR$(29,1)="Y" THEN TERMS_CODE$=_CUR.TERMS_CODE$
16310 IF _CHG_VAR$(30,1)="Y" THEN CUST_SERV_REP$=_CUR.CUST_SERV_REP$
16320 IF _CHG_VAR$(31,1)="Y" THEN SPER_CODE$=_CUR.SPER_CODE$
16330 IF _CHG_VAR$(32,1)="Y" THEN COMM_CODE$=_CUR.COMM_CODE$
16340 IF _CHG_VAR$(33,1)="Y" THEN OTHER_SPER_1$=_CUR.OTHER_SPER_1$
16350 IF _CHG_VAR$(34,1)="Y" THEN OTHER_SPER_2$=_CUR.OTHER_SPER_2$
16360 IF _CHG_VAR$(35,1)="Y" THEN OTHER_SPER_3$=_CUR.OTHER_SPER_3$
16370 IF _CHG_VAR$(36,1)="Y" THEN OTHER_SPER_4$=_CUR.OTHER_SPER_4$
16380 IF _CHG_VAR$(37,1)="Y" THEN ORDER_DIV$=_CUR.ORDER_DIV$
16390 IF _CHG_VAR$(38,1)="Y" THEN ORDER_NUM$=_CUR.ORDER_NUM$
16400 IF _CHG_VAR$(39,1)="Y" THEN SALES_ORDER_PRINTED$=_CUR.SALES_ORDER_PRINTED$
16410 IF _CHG_VAR$(40,1)="Y" THEN CTN_LBL_PRINTED$=_CUR.CTN_LBL_PRINTED$
16420 IF _CHG_VAR$(41,1)="Y" THEN PACKING_LIST_PRINTD$=_CUR.PACKING_LIST_PRINTD$
16430 IF _CHG_VAR$(42,1)="Y" THEN ORDERED_BY$=_CUR.ORDERED_BY$
16440 IF _CHG_VAR$(43,1)="Y" THEN ORDER_GREETING$=_CUR.ORDER_GREETING$
16450 IF _CHG_VAR$(44,1)="Y" THEN OPER_CODE_1ST$=_CUR.OPER_CODE_1ST$
16460 IF _CHG_VAR$(45,1)="Y" THEN OPER_CODE_LAST_MOD$=_CUR.OPER_CODE_LAST_MOD$
16470 IF _CHG_VAR$(46,1)="Y" THEN DATE_LAST_MODIFIED$=_CUR.DATE_LAST_MODIFIED$
16480 IF _CHG_VAR$(47,1)="Y" THEN AUTO_REQ_TYPE$=_CUR.AUTO_REQ_TYPE$
16490 IF _CHG_VAR$(48,1)="Y" THEN CONSOL_ORDER_TYPE$=_CUR.CONSOL_ORDER_TYPE$
16500 IF _CHG_VAR$(49,1)="Y" THEN QUOTE_FROM_LINES$=_CUR.QUOTE_FROM_LINES$
16510 IF _CHG_VAR$(50,1)="Y" THEN REPEAT_ORDER$=_CUR.REPEAT_ORDER$
16520 IF _CHG_VAR$(51,1)="Y" THEN REPEAT_FROM_ORD$=_CUR.REPEAT_FROM_ORD$
16530 IF _CHG_VAR$(52,1)="Y" THEN EXCLUDE_REBATE$=_CUR.EXCLUDE_REBATE$
16540 IF _CHG_VAR$(53,1)="Y" THEN ON_HOLD$=_CUR.ON_HOLD$
16550 IF _CHG_VAR$(54,1)="Y" THEN GB_GOLD_RUSH$=_CUR.GB_GOLD_RUSH$
16560 IF _CHG_VAR$(55,1)="Y" THEN GB_SAMPLE_ORD$=_CUR.GB_SAMPLE_ORD$
16570 IF _CHG_VAR$(56,1)="Y" THEN GB_USE_REBATE$=_CUR.GB_USE_REBATE$
16580 IF _CHG_VAR$(57,1)="Y" THEN GB_OVERRUNS$=_CUR.GB_OVERRUNS$
16590 IF _CHG_VAR$(58,1)="Y" THEN GB_PROD_DEPT$=_CUR.GB_PROD_DEPT$
16600 IF _CHG_VAR$(59,1)="Y" THEN GB_PL_COPIES$=_CUR.GB_PL_COPIES$
16610 IF _CHG_VAR$(60,1)="Y" THEN GB_IMPRINT_COLOR$=_CUR.GB_IMPRINT_COLOR$
16620 IF _CHG_VAR$(61,1)="Y" THEN GB_SAMPLES_DIST$=_CUR.GB_SAMPLES_DIST$
16630 IF _CHG_VAR$(62,1)="Y" THEN GB_SURE$=_CUR.GB_SURE$
16640 IF _CHG_VAR$(63,1)="Y" THEN SCALE_SEQ_NUM$=_CUR.SCALE_SEQ_NUM$
16650 IF _CHG_VAR$(64,1)="Y" THEN SAMPLE_REBATE_LN$=_CUR.SAMPLE_REBATE_LN$
16660 IF _CHG_VAR$(65,1)="Y" THEN FM2ODH_OPTIONS$=_CUR.FM2ODH_OPTIONS$
16670 IF _CHG_VAR$(66,1)="Y" THEN INV_COST_SEQ$=_CUR.INV_COST_SEQ$
16680 IF _CHG_VAR$(67,1)="Y" THEN INV_COST_PARM$=_CUR.INV_COST_PARM$
16690 IF _CHG_VAR$(68,1)="Y" THEN NO_DELETE$=_CUR.NO_DELETE$
16700 IF _CHG_VAR$(69,1)="Y" THEN BO_FILL_REQ_CHG$=_CUR.BO_FILL_REQ_CHG$
16701 IF _CHG_VAR$(70,1)="Y" THEN CIG_FLAG$=_CUR.CIG_FLAG$
16702 IF _CHG_VAR$(71,1)="Y" THEN FREIGHT_MARKUP_TABLE$=_CUR.FREIGHT_MARKUP_TABLE$
16703 IF _CHG_VAR$(72,1)="Y" THEN ORDER_SOURCE$=_CUR.ORDER_SOURCE$
16704 IF _CHG_VAR$(73,1)="Y" THEN WEBEC_BUYER$=_CUR.WEBEC_BUYER$
16705 IF _CHG_VAR$(74,1)="Y" THEN WEB_SESSION$=_CUR.WEB_SESSION$
16710 IF _CHG_VAR$(75,1)="Y" THEN FS1_UNUSED_1$=_CUR.FS1_UNUSED_1$
16720 IF _CHG_VAR$(76,1)="Y" THEN DEPOSIT_AMT=_CUR.DEPOSIT_AMT
16730 IF _CHG_VAR$(77,1)="Y" THEN SALESMAN_1_PCT_SALE=_CUR.SALESMAN_1_PCT_SALE
16740 IF _CHG_VAR$(78,1)="Y" THEN ALT_SPER_PRCNT_1=_CUR.ALT_SPER_PRCNT_1
16750 IF _CHG_VAR$(79,1)="Y" THEN ALT_SPER_PRCNT_2=_CUR.ALT_SPER_PRCNT_2
16760 IF _CHG_VAR$(80,1)="Y" THEN ALT_SPER_PRCNT_3=_CUR.ALT_SPER_PRCNT_3
16770 IF _CHG_VAR$(81,1)="Y" THEN ALT_SPER_PRCNT_4=_CUR.ALT_SPER_PRCNT_4
16780 IF _CHG_VAR$(82,1)="Y" THEN ORDER_AMT=_CUR.ORDER_AMT
16790 IF _CHG_VAR$(83,1)="Y" THEN ORDER_COST=_CUR.ORDER_COST
16800 IF _CHG_VAR$(84,1)="Y" THEN FRT_AMT=_CUR.FRT_AMT
16810 IF _CHG_VAR$(85,1)="Y" THEN LINE_ITEM_DISC_PRCNT=_CUR.LINE_ITEM_DISC_PRCNT
16820 IF _CHG_VAR$(86,1)="Y" THEN FRT_FROM_LOTS=_CUR.FRT_FROM_LOTS
16830 IF _CHG_VAR$(87,1)="Y" THEN FS1_UNUSED_2=_CUR.FS1_UNUSED_2
16840 IF _CHG_VAR$(88,1)="Y" THEN FS1_UNUSED_3=_CUR.FS1_UNUSED_3
16850 IF _CHG_VAR$(89,1)="Y" THEN FS1_UNUSED_4=_CUR.FS1_UNUSED_4
16990 RETURN 
18000 CLEAR_KEY:! SSP210521
18010 _KEY$=""
18020 %JOB_COSTING$="" ! SSP275196, bypass job costing flag clear upon save, delete, exit FMGODM
18021 %QRY_ORDER$="" ! SSP#297235 carrying the global into other progs that use %QRY_ORDER$
18090 RETURN 
21000 ! 21000 Read and load order line details
21010 LOAD_DETAILS:
21012 TOTAL_AMT=0,TOTAL_GP=0,TOTAL_COST_EXT=0,LINE_COUNT=0 ! SSP 212984
21015 ORDER_LINES_IOL:IOLIST COL1$,COL2$,COL3$,COL3I$,COL4$,COL4I$,COL5$,GP$,COL6$,COL7$ ! ssp 197895,ssp 212984
21020 LIST_BOX LOAD ORDER_LINES.CTL,""
21025 READ (_FS2,KEY=ORDER_DIV$+ORDER_NUM$,DOM=*NEXT)
21030 NEXT_FS2_REC:READ (_FS2,END=DONE_LOADING,REC=FS2$)
21035 IF FS2.ORDER_DIV$<>ORDER_DIV$ OR FS2.ORDER_NUM$<>ORDER_NUM$ THEN GOTO DONE_LOADING
21040 LINE1: COL1$=FS2.ORDER_LINE_NUM$,COL2$=FS2.TF_DESC$
21042 GOSUB SHIP_FROM_IN_COL6
21045 GOSUB LOAD_LIST
21046 CIC_CODE$=""; IF DISP_CIC$="Y" THEN FIND (_FM1,KEY=CUST_DIV$+CUST_CODE$+FS2.ITEM_CODE$,DOM=*NEXT)FM1_CIC$; CIC_CODE$=STP(MID(FM1_CIC$,350,20),2) ! SSP 307490
21048 LINE2:IF FS2.LINE_TYPE$="M" THEN GOTO NEXT_FS2_REC ! SSP 307461
21050 TOPS_DISP$=""; IF USING_TOPS THEN GOSUB LINE_2_TOPS; IF STP(TOPS_DISP$,2)="" THEN IF STP(CIC_CODE$,2)<>"" THEN TOPS_DISP$="["+CIC_CODE$+"]" END_IF ; END_IF ELSE IF STP(CIC_CODE$,2)<>"" THEN TOPS_DISP$="["+CIC_CODE$+"]" ! SSP 307461
21051 IF NUL(FS2.CUST_DIV$+FS2.CUST_CODE$) THEN COL2$=FS2.ITEM_CODE$+" "+TOPS_DISP$ ELSE COL2$="["+FN%ZZDISP$(FS2.CUST_DIV$+FS2.CUST_CODE$,"A/R")+"] "+FS2.ITEM_CODE$+" "+TOPS_DISP$ ! SSP 307461
21052 COL3I$=STP(FS2.SELL_UM$,2)+"/"+STP(STR(FS2.QTY_IN_SELL_UM:"-##,###"),2)
21054 LINE_COUNT+=1,TOTAL_AMT+=FS2.SELL_PRICE_EXT,TOTAL_GP+=FS2.SELL_PRICE_EXT-FS2.COST_EXT,TOTAL_COST_EXT+=FS2.COST_EXT,PRINT_QTY=FN%QTY_IN_UM(FS2.OPEN_QTY,FS2.SELL_UM$,FS2.QTY_IN_SELL_UM); COL3$=STR(PRINT_QTY:TBL(ABS(SGN(FPT(PRINT_QTY))),"-#,###,###","-#,###,###.##")),COL4$=STR(FS2.SELL_PRICE_EXT:"##,###,###.00-"),COL4I$=STR(FS2.COST_EXT:"##,###,###.00-"),COL5$=STR(FS2.SELL_PRICE_EXT-FS2.COST_EXT:"##,###,###.00-") ! SSP 212984
21055 PRECISION 4; GP$="0.00",GP$=STR((FS2.SELL_PRICE_EXT-FS2.COST_EXT)/FS2.SELL_PRICE_EXT*100:"###.00-",ERR=*NEXT) ! ssp 197895
21056 PRECISION 2 ! ssp 197895
21060 DO_SHIPTOS:
21065 IF _PO3=0 THEN _PO3=HFN; OPEN (_PO3,IOL=*,ERR=NEXT_FS2_REC)"PO3"+%C$; CALL "ZZWIOL",_PO3,"B",PO3_IOL$; DIM GENERAL$:CPL(PO3_IOL$),SPECIAL$:CPL(PO3_IOL$)
21066 IF _FM0=0 THEN _FM0=HFN; OPEN (_FM0,IOL=*,ERR=NEXT_FS2_REC)"FM0"+%C$; CALL "ZZWIOL",_FM0,"B",FM0_IOL$; DIM FM0$:CPL(FM0_IOL$)
21067 IF FS2.SPECIAL_SHIPPING$="Y" THEN GOTO DO_SPECIAL_SHIPPING
21069 ! General shipping only, print the one line & we're done
21070 READ DATA FROM "" TO GENERAL$; FIND (_PO3,KEY=ORDER_DIV$+ORDER_NUM$+DIM(5),DOM=*NEXT,REC=GENERAL$)
21072 COL6$="To:"+GENERAL.LOC_TYPE$+" "+GENERAL.LOC_CODE$+" "+GENERAL.COMP_NAME_TO_SHIP_TO$
21075 GOSUB LOAD_LIST
21080 GOTO NEXT_FS2_REC
21090 DO_SPECIAL_SHIPPING:! loop through records for line and make multiple lines
21095 GOSUB LOAD_LIST ! Go ahead and put out line, then add special shipping lines
21096 CALL "ZZWLKU;PARSE_ORD",ORDER$,ORDER_DIV$,ORDER_NUM$; ORDER$=ORDER_DIV$+ORDER_NUM$
21097 READ (_PO3,KEY=ORDER_DIV$+ORDER_NUM$+" "+FS2.ORDER_LINE_NUM$,DOM=*NEXT)
21099 NEXT_SPECIAL_REC: READ DATA FROM "" TO SPECIAL$; READ (_PO3,END=END_SPECIAL_SHIPPING,REC=SPECIAL$); IF SPECIAL.PO_DIV$<>ORDER_DIV$ OR SPECIAL.PO_NUM$(1,LEN(ORDER_NUM$))<>ORDER_NUM$ OR SPECIAL.ORDER_LINE_NUM$<>FS2.ORDER_LINE_NUM$ THEN GOTO END_SPECIAL_SHIPPING
21100 PRINT_QTY=FN%QTY_IN_UM(SPECIAL.SHIP_QTY,FS2.SELL_UM$,FS2.QTY_IN_SELL_UM)
21101 COL6$=STR(PRINT_QTY:TBL(ABS(SGN(FPT(PRINT_QTY))),"-#,###,###","-#,###,###.##"))+" To: "+SPECIAL.LOC_TYPE$+" "+SPECIAL.LOC_CODE$+" "+SPECIAL.COMP_NAME_TO_SHIP_TO$
21105 GOSUB LOAD_LIST
21110 GOTO NEXT_SPECIAL_REC
21115 END_SPECIAL_SHIPPING:
21120 DONE_WITH_FS2:GOTO NEXT_FS2_REC
21195 DONE_LOADING: GP$="0.00"; PRECISION 4; GP$=STR(TOTAL_GP/TOTAL_AMT*100:"###.00-",ERR=*NEXT) ! ssp 197895
21196 PRECISION 2 ! Print totals, freight, deposit ! ssp 197895
21197 IF LINE_COUNT>0 THEN COL3I$='BR'+MSG("FMGODM_15"),COL4$='BR'+STR(TOTAL_AMT:"##,###,###.00-"),COL4I$='BR'+STR(TOTAL_COST_EXT:"##,###,###.00-"),COL5$='BR'+STR(TOTAL_GP:"##,###,###.00-"); GOSUB LOAD_LIST ! ssp 212984
21198 IF FRT_AMT+FRT_FROM_LOTS<>0 THEN COL3I$='_BLUE'+'WHITE'+MSG("FMGODM_16"),COL4$='_BLUE'+'WHITE'+STR(FRT_AMT+FRT_FROM_LOTS:"##,###,###.00-"); GOSUB LOAD_LIST ! SSP 192718
21199 IF DEPOSIT_AMT<>0 THEN COL3I$='_GREEN'+'WHITE'+MSG("FMGODM_17"),COL4$='_GREEN'+'WHITE'+STR(DEPOSIT_AMT:"##,###,###.00-"); GOSUB LOAD_DEPOSIT_INFO; GOSUB LOAD_LIST
21201 EXTRACT (_FIL_NO,KEY=_KEY$,ERR=*NEXT)* ! SSP248358 jdf
21203 IF _OPS THEN CLOSE (_OPS) ! SSP 307461
21205 RETURN 
23000 ! 23000 - Load list box & clear line
23005 LOAD_LIST: LIST_BOX LOAD ORDER_LINES.CTL,0,REC(IOL=ORDER_LINES_IOL)
23010 READ DATA FROM "" TO IOL=ORDER_LINES_IOL
23020 RETURN 
23100 LINE_2_TOPS:! SSP 307461 (23000-23125)
23105 TOPS_DISP$=""
23110 IF NOT(FN%ISOPENFILE(_OPS,"OS2"+%C$)) THEN _OPS=HFN; OPEN (_OPS,ERR=*NEXT)"OS2"+%C$ ! 307461
23120 FIND (_OPS,KEY=FS2.ITEM_CODE$,DOM=*NEXT)TOS2$; TOPS_DISP$="("+STP(MID(TOS2$,11,15),2)+")"
23125 RETURN 
24000 ! ^1000 - Load col6 with ship from whse & desc or P/O & vendor
24005 SHIP_FROM_IN_COL6:
24010 ! Open file and load iolist if not open
24013 IF STP(FS2.PO_CODE$,2)<>"" THEN GOTO DO_PO
24015 IF _FM0=0 THEN _FM0=HFN; OPEN (_FM0,IOL=*,ERR=*RETURN)"FM0"+%C$; CALL "ZZWIOL",_FM0,"B",FM0_IOL$; DIM FM0$:CPL(FM0_IOL$)
24019 READ DATA FROM "" TO FM0$
24020 FIND (_FM0,KEY="D"+DIM(10)+FS2.WHSE$,DOM=*NEXT,REC=FM0$)
24030 COL6$="From: "+FS2.WHSE$+"-"+FM0.LOC_DESC$
24045 GOTO *RETURN
24050 DO_PO:! there is a p/O code
24055 IF _AP4=0 THEN _AP4=HFN; OPEN (_AP4,IOL=*,ERR=*RETURN)"AP4"+%C$; CALL "ZZWIOL",_AP4,"B",AP4_IOL$; DIM AP4$:CPL(AP4_IOL$)
24060 READ DATA FROM "" TO AP4$; FIND (_AP4,KEY=FS2.VEND_DIV$+FS2.VEND_CODE$,DOM=*RETURN,REC=AP4$)
24061 %CLOSE_PO1=0; FIND (Z(10),KEY=_KEY$+FS2.PO_CODE$,DOM=*NEXT); GOTO 24065 ! ssp 192843   , SSP198828
24062 %CLOSE_PO1=1; COL6$='RED'+FN%ZZDISP$(ORDER$+FS2.PO_CODE$,"P/O")+"-> ** P/O Closed for Vendor :"+AP4.VEND_NAME$; GOTO *RETURN ! ssp 192843, ssp198828!SSP#290905
24065 COL6$=FN%ZZDISP$(ORDER$+FS2.PO_CODE$,"P/O")+"->"+AP4.VEND_NAME$ ! ORDER$+"-"+FS2.PO_CODE$+"->"+AP4.VEND_NAME$!SSP#290905
24090 RETURN 
24500 ! Could not find this record  !  SSP206987 jdf  added subroutine
24510 MSGBOX MSG("Add this Record"),MSG("CONFIRM"),"?,YESNO",_A$ ! SSP206987 jdf
24520 IF _A$="YES" THEN {! SSP206987 jdf
24530 DIM FSA$(50),FSA[8]; WRITE (Z[4],KEY=FID(0)+ORDER_DIV$+ORDER_NUM$)FSA$,FSA[0],FSA[1],FSA[2],FSA[3],FSA[4],FSA[5],FSA[6],FSA[7],FSA[8] ! SSP206987 jdf !SSP#267346
24540 GOTO 1254 } ! SSP206987 jdf
24550 ORDER$="",NO_FLG=1,NEXT_ID=ORDER.CTL; EXIT ! SSP206987 jdf
24560 ! end of subroutine  SSP206987 jdf
25000 ! ^1000 - Show line details
25005 SHOW_LINES:
25006 GOSUB CHECK_FTO; IF NEW_FTO$="Y" THEN RETURN 
25008 SET_FOCUS READ CURR_FOCUS; IF CURR_FOCUS<>ORDER_LINES.CTL THEN RETURN ! If the current focus is not on order lines then dont do anything
25010 IF ORDER_LINES$="" THEN RETURN 
25015 READ DATA FROM ORDER_LINES$ TO ORDER_LINE_NUM$,_Y1$,_Y2$,_Y3$,_Y4$,_Y5$,_Y6$
25017 ! IF (TCB(29)>=7100000 AND MID(%OP_SECURITY$,99,1)="Y") AND ORDER_LINE_NUM$<>"" THEN OEGRID_CUSTOMER$=CUST_DIV$+CUST_CODE$,OEGRID_CUST_NAME$=%CUST_NAME$; PROCESS "FMGODS.V7","../OPG/OP.EN",ORDER_DIV$,ORDER_NUM$,ORDER_LINE_NUM$,OEGRID_CUSTOMER$,OEGRID_CUST_NAME$; ORDER_LINE_NUM$="" ! SSP208671
25020 IF NOT(NUL(ORDER_LINE_NUM$)) THEN %NEW=0; PROCESS "FMGODB","../OPG/OP.EN",ORDER_DIV$+ORDER_NUM$+ORDER_LINE_NUM$ ! SSP 193332 SSP 230084
25022 %CUSTOMER$="" ! SSP 228922
25023 GOSUB LOAD_DETAILS
25025 RETURN 
26000 GET_NEXT_NUM:IF POS("A"=ORDER$)<>0 THEN TYPE_SEQ=NUM(ORDER$(LEN(ORDER$)),ERR=*NEXT); HH=POS(STR(TYPE_SEQ)+"|"=%ODM_DROP_BOX$); IF HH<>0 THEN HH$=%ODM_DROP_BOX$(1,HH); DROP_BOX_1$=HH$(POS("|"=HH$,-1)+1); DROP_BOX WRITE DROP_BOX_1.CTL,DROP_BOX_1$ ! ssp#218533
26001 DROP_BOX READ DROP_BOX_1.CTL,DROP_BOX_1$,ERR=*NEXT ! SSP 218533
26002 GNT=1 ! SSP206987 jdf
26004 IF (UCS(MID(ORDER$,1,1))="A" AND LEN(ORDER$)>2) OR (UCS(MID(ORDER$,3,1))="A" AND LEN(ORDER$)>4) THEN GOTO 26007 ! SSP#237044               
26005 IF UCS(MID(ORDER$,1,1))="A" THEN IF FM_PARM$(8,1)="Y" THEN ORDER$=%CURR_DIV$+ORDER$ ELSE ORDER$="00"+ORDER$ ! SSP#237044
26007 IF NOT(NUL(ORDER$)) THEN %CURR_DIV$=MID(ORDER$,1,2) ELSE ORDER$=%CURR_DIV$ ! SSP#237044 moved line from 26004
26008 ! DIM FSH$:CPL(FSH_IOL$); EXTRACT (_FSH,KEY=%CURR_DIV$,DOM=INVALID_DIV,REC=FSH$) ! SSP#237044 moved line from 26005 SSP 239845
26010 SWITCH DROP_BOX_1$
26012 CASE MSG("ODM_DB_O"); SEQ_TYPE$=""; BREAK ! NEXT_ORDER$=FNGET_NEXT_ORDER_NUM$("FSH.NEXT_ORDER_DIV$","FSH.NEXT_ORDER_NUM$"); BREAK
26014 CASE MSG("ODM_DB_R"); SEQ_TYPE$="R"; BREAK ! IF STP(FSH.NEXT_REQ_NUM$,3)<>"" THEN NEXT_ORDER$=FNGET_NEXT_ORDER_NUM$("FSH.NEXT_REQ_DIV$","FSH.NEXT_REQ_NUM$") ELSE NEXT_ORDER$=FNGET_NEXT_ORDER_NUM$("FSH.NEXT_ORDER_DIV$","FSH.NEXT_ORDER_NUM$") END_IF ; BREAK ! SSP#257614
26016 CASE MSG("ODM_DB_1"); SEQ_TYPE$="1"; BREAK ! NEXT_ORDER$=FNGET_NEXT_ORDER_NUM$("FSH.DIV_NUM$","FSH.ALT_ORD_SEQ_1$"); BREAK
26018 CASE MSG("ODM_DB_2"); SEQ_TYPE$="2"; BREAK ! NEXT_ORDER$=FNGET_NEXT_ORDER_NUM$("FSH.DIV_NUM$","FSH.ALT_ORD_SEQ_2$"); BREAK
26020 CASE MSG("ODM_DB_3"); SEQ_TYPE$="3"; BREAK ! NEXT_ORDER$=FNGET_NEXT_ORDER_NUM$("FSH.DIV_NUM$","FSH.ALT_ORD_SEQ_3$"); BREAK
26022 CASE MSG("ODM_DB_4"); SEQ_TYPE$="4"; BREAK ! NEXT_ORDER$=FNGET_NEXT_ORDER_NUM$("FSH.DIV_NUM$","FSH.ALT_ORD_SEQ_4$"); BREAK
26024 CASE MSG("ODM_DB_5"); SEQ_TYPE$="5"; BREAK ! NEXT_ORDER$=FNGET_NEXT_ORDER_NUM$("FSH.DIV_NUM$","FSH.ALT_ORD_SEQ_5$"); BREAK
26026 CASE MSG("ODM_DB_6"); SEQ_TYPE$="6"; BREAK ! NEXT_ORDER$=FNGET_NEXT_ORDER_NUM$("FSH.DIV_NUM$","FSH.ALT_ORD_SEQ_6$"); BREAK
26028 CASE MSG("ODM_DB_7"); SEQ_TYPE$="7"; BREAK ! NEXT_ORDER$=FNGET_NEXT_ORDER_NUM$("FSH.DIV_NUM$","FSH.ALT_ORD_SEQ_7$"); BREAK
26030 CASE MSG("ODM_DB_8"); SEQ_TYPE$="8"; BREAK ! NEXT_ORDER$=FNGET_NEXT_ORDER_NUM$("FSH.DIV_NUM$","FSH.ALT_ORD_SEQ_8$"); BREAK
26032 CASE MSG("ODM_DB_9"); SEQ_TYPE$="9"; BREAK ! NEXT_ORDER$=FNGET_NEXT_ORDER_NUM$("FSH.DIV_NUM$","FSH.ALT_ORD_SEQ_9$"); BREAK
26034 END SWITCH 
26035 ! WRITE (_FSH,KEY=%CURR_DIV$,REC=FSH$)
26036 ! FSH$(116,2)=%CURR_DIV$
26040 ERRMSG$=""; CALL "FMGMPB;GET_NEXT_ORDERNUM",_FSH,%CURR_DIV$,SEQ_TYPE$,"",NEXT_ORDER$,ERRMSG$
26060 ORDER$=NEXT_ORDER$
26064 AUTO_NUMBER_DONE:
26065 _KCNT=2,_EOM$=$0D$,REFRESH_FLG=1
26066 GOTO FIND_REC
26068 INVALID_DIV: MSGBOX MSG("FMGODM_21",%CURR_DIV$),MSG("FMGODM_20"),"OK"; NEXT_ID=ORDER.CTL ! SSP 239845 
26070 RETURN 
26900 ! DEF FNGET_NEXT_ORDER_NUM$(DIV$,TF_NUMBER$) ! 277659 - Replaced by called program FMGMPB;GET_NEXT_ORDERNUM; Support for Alphanumeric sequences 
26905 ! evs(div$) and evs(number$) should be the "names" of the variables, they will be EVS'ed
26910 ! GNON$=EVS(DIV$,ERR=*RETURN)+EVS(TF_NUMBER$,ERR=*RETURN) ! Set the number
26920 ! NUMBER=0,NUMBER=TBL(EVS(TF_NUMBER$)=DIM(LEN(EVS(TF_NUMBER$)),"9"),NUM(EVS(TF_NUMBER$),ERR=*NEXT),0) ! if number is all 9s set to 0 (we'll add 1 to it in a minute) else set to current number, any errors will leave number at 0
26930 ! VIA (TF_NUMBER$)=STR(NUMBER+1:DIM(LEN(EVS(TF_NUMBER$)),"0"))
26980 ! RETURN GNON$
26990 ! END DEF
28000 SET_CURR_DIV:
28005 IF LEN(FM_PARM$)=0 THEN DIM FM_PARM$(200); READ (_ZZPARM,KEY=%X3_COMP$+"F/M",DOM=*NEXT)FM_PARM$
28006 DIM ORDER_DEFAULT$(20); FIND (_ZZPARM,KEY=PAD(%X3_OP_ID$,8)+"FD",DOM=*NEXT)ORDER_DEFAULT$
28010 IF FM_PARM$(8,1)="Y" THEN %CURR_DIV$=TBL(SGN(LEN(STP(MID(ORDER_DEFAULT$,11,2)))),"00",MID(ORDER_DEFAULT$,11,2)) ELSE %CURR_DIV$="00" ! if divisional, set to order defaults, 00 if blank, else 00
28015 DIM FSH$:CPL(FSH_IOL$); READ (_FSH,KEY=%CURR_DIV$,DOM=*NEXT,REC=FSH$)
28030 %ODM_DROP_BOX$=""
28032 IF STP(FSH.NEXT_ORDER_NUM$)<>"" THEN %ODM_DROP_BOX$=MSG("ODM_DB_O")+"|"
28034 IF STP(FSH.NEXT_REQ_NUM$)<>"" THEN %ODM_DROP_BOX$=%ODM_DROP_BOX$+MSG("ODM_DB_R")+"|"
28036 IF STP(FSH.ALT_ORD_SEQ_1$)<>"" THEN %ODM_DROP_BOX$=%ODM_DROP_BOX$+MSG("ODM_DB_1")+"|"
28038 IF STP(FSH.ALT_ORD_SEQ_2$)<>"" THEN %ODM_DROP_BOX$=%ODM_DROP_BOX$+MSG("ODM_DB_2")+"|"
28040 IF STP(FSH.ALT_ORD_SEQ_3$)<>"" THEN %ODM_DROP_BOX$=%ODM_DROP_BOX$+MSG("ODM_DB_3")+"|"
28042 IF STP(FSH.ALT_ORD_SEQ_4$)<>"" THEN %ODM_DROP_BOX$=%ODM_DROP_BOX$+MSG("ODM_DB_4")+"|"
28044 IF STP(FSH.ALT_ORD_SEQ_5$)<>"" THEN %ODM_DROP_BOX$=%ODM_DROP_BOX$+MSG("ODM_DB_5")+"|"
28046 IF STP(FSH.ALT_ORD_SEQ_6$)<>"" THEN %ODM_DROP_BOX$=%ODM_DROP_BOX$+MSG("ODM_DB_6")+"|"
28048 IF STP(FSH.ALT_ORD_SEQ_7$)<>"" THEN %ODM_DROP_BOX$=%ODM_DROP_BOX$+MSG("ODM_DB_7")+"|"
28050 IF STP(FSH.ALT_ORD_SEQ_8$)<>"" THEN %ODM_DROP_BOX$=%ODM_DROP_BOX$+MSG("ODM_DB_8")+"|"
28052 IF STP(FSH.ALT_ORD_SEQ_9$)<>"" THEN %ODM_DROP_BOX$=%ODM_DROP_BOX$+MSG("ODM_DB_9")+"|"
28060 BPOS=POS("|"=%ODM_DROP_BOX$); IF BPOS<>0 THEN %ODM_DROP_BOX_DEF$=%ODM_DROP_BOX$(1,BPOS-1)
28065 IF ORDER_DEFAULT$(26,1)="R" OR ORDER_DEFAULT$(26,1)="W" THEN %ODM_DROP_BOX_DEF$=MSG("ODM_DB_R") ! SSP 202877
28070 IF STP(FSH.NEXT_REQ_NUM$)="" AND DROP_BOX_1$=MSG("ODM_DB_R") THEN %ODM_DROP_BOX_DEF$=MSG("ODM_DB_O"),DROP_BOX_1$=MSG("ODM_DB_O") ! SSP#282112
28080 DROP_BOX LOAD DROP_BOX_1.CTL,%ODM_DROP_BOX$,ERR=*NEXT
28081 IF NUL(DROP_BOX_1$) THEN DROP_BOX WRITE DROP_BOX_1.CTL,%ODM_DROP_BOX_DEF$,ERR=*NEXT ELSE DROP_BOX WRITE DROP_BOX_1.CTL,DROP_BOX_1$,ERR=*NEXT
28099 RETURN 
29000 ! ^100,5 - call FM2ODH
29005 DO_FM2ODH:
29010 DIM A[13]
29015 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2
29020 READ (_FIL_NO,KEY=ORDER_DIV$+ORDER_NUM$,DOM=29090)IOL=29091
29030 CALL "FM2ODH",X3$,FM2ODH_CMD,A$,A{ALL}
29040 WRITE (_FIL_NO,KEY=ORDER_DIV$+ORDER_NUM$)IOL=29091
29045 IF FM2ODH_CMD=1 THEN CALL "FM2OC5",X3$,A$,0,"YES" ! SSP#181527
29050 IF %WMS_MGR_IN_OE THEN %WMS_LAST_OE_ORD$=ORDER_DIV$+ORDER_NUM$ ! ssp197945
29090 RETURN 
29091 IOLIST A$,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13]
29095 ! 
29100 CHECK_ORDER_NUM:! verify division, not restricted division, etc
29105 ORDER_NUM_INVALID=1
29110 IF MID(%X3$,333,2)<>"  " AND ORDER_DIV$<>MID(%X3$,333,2) THEN ORDER_NUM_INVALID=1; MSGBOX MSG("FMGODM_19",%X3_OP_DIV$),MSG("FMGODM_20"),"OK"; RETURN 
29113 MSG_TITLE$="Invalid Entry" ! [206279]
29114 MSG_TEXT$="Order Number "+ORDER$+" is invalid." ! [206279]
29115 IF ORDER_NUM$="000000" THEN {! [206279]
29117 MSGBOX MSG_TEXT$,MSG_TITLE$,"INFO,OK",MSG_RESP$ ! [206279]
29119 RETURN ! [206279]
29120  }
29125 DIM FSH$:CPL(FSH_IOL$); FIND (_FSH,REC=FSH$,KEY=ORDER_DIV$,DOM=*NEXT); GOTO FSH_OK
29130 ORDER_NUM_INVALID=1; MSGBOX MSG("FMGODM_21",ORDER_DIV$),MSG("FMGODM_20"),"OK"; RETURN 
29132 FSH_OK:
29135 GOSUB CHECK_FTO; IF NEW_FTO$="Y" THEN RETURN 
29180 CON_OK: ORDER_NUM_INVALID=0
29195 RETURN 
29199 ! 
29200 LOAD_DEPOSIT_INFO:! load up check number and date if available, else leave blank
29205 DEPOSIT_INFO$=""
29210 IF NOT(NUL(DEPOSIT_CHECK_NUM$)) THEN DEPOSIT_INFO$=MSG("FMGODA_14")+" "+STP(DEPOSIT_CHECK_NUM$,1)
29215 IF NOT(NUL(DEPOSIT_CHECK_DATE$)) THEN DEPOSIT_INFO$+="   "+MSG("FMGODA_15")+" "+FN%FMT_TFDATE$(DEPOSIT_CHECK_DATE$,MSG("STD_MDY1"))
29220 IF NOT(NUL(DEPOSIT_INFO$)) THEN {
29225 COL5$='_GREEN'+'WHITE'+" " ! color column 5 green for continuity, but no data
29230 COL6$='_GREEN'+'WHITE'+DEPOSIT_INFO$
29275  }
29295 RETURN 
29299 ! 
29300 DO_LINES:
29315 GOSUB CHECK_FTO; IF NEW_FTO$="Y" THEN RETURN 
29316 %GRID_BAS=0; IF ORDER_TYPE_3$="B" THEN %GRID_BAS=1 ! SSP208671
29317 IF (TCB(29)>=7100000 AND POS(MID(%OP_SECURITY$,99,1)="SY")<>0) THEN %ORD_DEL$=""; PROCESS "FMGODB.V7","",ORDER_DIV$+ORDER_NUM$; GOTO *NEXT END_IF ! F (TCB(29)>=7100000 AND MID(%OP_SECURITY$,99,1)="Y") THEN IF POS(ORDER_TYPE_1$="RW")<>0 THEN PROCESS "FMGODR.v7","",ORDER_DIV$,ORDER_NUM$,MESSAGE$,ORDER_TYPE_1$,CUST_DIV$,CUST_CODE$ ELSE PROCESS "FMGODO.v7","",ORDER_DIV$,ORDER_NUM$,MESSAGE$,ORDER_TYPE_1$,CUST_DIV$,CUST_CODE$ ! SSP208671 ! SSP242299 jdf SSP307159
29320 IF (TCB(29)<7100000 OR MID(%OP_SECURITY$,99,1)<>"Y" AND MID(%OP_SECURITY$,99,1)<>"S") THEN PROCESS "FMGODB","../OPG/OP.EN",ORDER_DIV$+ORDER_NUM$ ! SSP208671 ! SSP242299 jdf   
29325 %GRID_BAS=0 ! SSP208671
29326 %CUSTOMER$="" ! SSP 228992
29328 IF %ORD_DEL$="Y" THEN %ORD_DEL$=""; GOSUB DELETE_REC ! SSP 242299
29330 GOSUB LOAD_DETAILS
29340 EXTRACT (_FIL_NO,KEY=_KEY$,ERR=*NEXT)* ! SSP248358 jdf
29395 RETURN 
29399 ! 
29400 RETURN_FROM_NEW_RECORD_SETUP:! have setup up new record & we're coming back
29410 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
29420 GOSUB PROCESS_READ
29430 GOSUB NUM_TO_STR
29435 IF MID(FM_PARM$,340,1)="Y" THEN PROCESS "FMGNPA","",ORDER_DIV$+ORDER_NUM$ ! SSP 283261
29440 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=BUTTON_1.CTL
29495 EXIT 
29499 ! 
29500 FINISH_DELETE:! Deleting order, finish up
29510 ! Remove POE comments
29515 READ (Z[9],KEY=ORDER_KEY$,DOM=*NEXT)
29520 KEY_9$=KEY(Z[9],END=*NEXT); IF MID(KEY_9$,1,8)=ORDER_KEY$ THEN REMOVE (Z[9],KEY=KEY_9$,DOM=*SAME); GOTO *SAME
29525 ! Remove order lines (FS2)
29530 FS2_REMOVE:READ (_FS2,KEY=ORDER_KEY$,DOM=*NEXT) ! Keep coming back here to reposition because FS2 gets moved around alot
29535 FS2_KEY$=KEY(_FS2,END=FS2_DONE); IF MID(FS2_KEY$,1,8)<>ORDER_KEY$ THEN GOTO FS2_DONE
29540 DIM FS2$(160); FIND (_FS2,KEY=FS2_KEY$,DOM=FS2_REMOVE)FS2$
29543 REMOVE (_FS2,KEY=FS2_KEY$,DOM=*NEXT)
29548 IF FS2$(9,1)<>" " THEN %IN_FMGODM=1; CALL "FM2ODP",ERR=*PROCEED,(X3$),FS2$; %IN_FMGODM=0
29549 GOTO FS2_REMOVE
29550 FS2_DONE:
29580 REMOVE (Z[4],KEY=FID(0)+ORDER_KEY$,DOM=*NEXT) ! FSA
29585 REMOVE (Z[8],KEY=ORDER_KEY$,DOM=*NEXT) ! FMN
29595 RETURN 
29599 ! *********************************
29600 CAN_WE_DELETE:! Check to see if any conditions exist that would prevent delete
29605 CANT_DELETE=0
29610 IF NO_DELETE$="Y" THEN MSGBOX MSG("FMGODM_24"),MSG("MB_ATTN"),"!"; CANT_DELETE=1; GOTO DELETE_CHECKS_DONE ! WO111482, SSP 138623
29615 IF %OP_SECURITY$(67,1)="Y" THEN GOSUB IS_PO_PRINTED; IF POCF$(189,1)="P" THEN MSGBOX MSG("FMGODM_25"),MSG("MB_ATTN"),"!"; CANT_DELETE=1; GOTO DELETE_CHECKS_DONE
29625 IF NUM_TIMES_PL_PRINTED$<>" " AND %OP_SECURITY$(54,1)="Y" THEN MSGBOX MSG("FMGODM_26"),MSG("MB_ATTN"),"!"; CANT_DELETE=1; GOTO DELETE_CHECKS_DONE ! SSP138623
29635 IF ORDER_TYPE_3$="B" AND INV_COST_PARM$="Y" THEN DATA$="",TF_TYPE$="D"+INV_COST_SEQ$; CALL "FM2ICB",X3$,X4$,"FM2ODM",A1$,TF_TYPE$,DATA$; IF DATA$="PENDING" THEN MSGBOX MSG("FMGODM_27"),MSG("MB_ATTN"),"!"; CANT_DELETE=1; GOTO DELETE_CHECKS_DONE END_IF ELSE IF DATA$="INVOICED" THEN MSGBOX MSG("FMGODM_28"),MSG("CONFIRM"),"?,YESNO",_X$; IF _X$="NO" THEN CANT_DELETE=1; GOTO DELETE_CHECKS_DONE ! SSP138623
29640 X$=""; GOSUB CHECK_UNBILLED_COSTS ! SSP138623
29643 IF X$="Y" THEN {
29645 MSGBOX MSG("FMGODM_29"),MSG("MB_ATTN"),"!"
29646 IF POS(X3$(9,3)="491321020288500828887101",3)<>0 THEN P_PASS$="DONN" ELSE IF POS(X3$(9,3)="080568589",3)<>0 THEN P_PASS$="4MONKEY" ! SSP 195920 !SSP#245964!SSP#250788
29648 IF POS(X3$(9,3)="500491080321020288887101",3)<>0 THEN {
29650 PROCESS "PASSWORD","../ZZG/ZZ.EN",PASS$; IF PASS$<>P_PASS$ THEN CANT_DELETE=1; GOTO DELETE_CHECKS_DONE ! SSP# 146941 195920
29652  } ELSE {
29653 CANT_DELETE=1; GOTO DELETE_CHECKS_DONE
29654  }
29655  }
29680 DELETE_CHECKS_DONE:! As soon as we fail on one,just come here to leave
29690 IF CANT_DELETE THEN CREDIT_DELETE$="N" ! if can't delete because of some reason here, that is more important than being overlimit or past due
29695 RETURN 
29699 ! *****************************************************
29700 IS_PO_PRINTED:! Check to see if PO is printed - W/O 105690 WARNING this only checks the first po, works this way in CHUI today
29710 DIM POCF$(512)
29715 ORDER$=STP(ORDER$,3,"-")
29720 READ (Z[10],KEY=ORDER$+" ",DOM=*NEXT)POCF$; GOTO IPP_DONE
29730 KKPO$=KEY(Z[10],END=IPP_DONE); IF MID(KKPO$,1,8)=ORDER$ THEN READ (Z[10],KEY=KKPO$)POCF$
29740 IPP_DONE:
29745 RETURN 
29749 ! ********************************************************
29750 DELETE_B_ORDER_WITH_COSTS:! User is deleting a B type order with invoiced costs, need to create transaction(s) to move cost to unallocated
29760 DATA$="",TF_TYPE$="T"+A$(237,3); CALL "FM2ICB",X3$,X4$,"FM2ODM",A1$,TF_TYPE$,DATA$
29770 GOTO 6508
29799 ! *********************************************************
29800 CHECK_UNBILLED_COSTS:! Check for unbilled costs
29805 DIM D$(200),D[29]
29807 ORD_KEY$=ORDER_DIV$+ORDER_NUM$
29810 READ (_FS2,KEY=ORD_KEY$,DOM=*NEXT)
29815 NEXT_FS2:READ (_FS2,END=CHECK_DONE)IOL=29846
29820 IF D$(147,8)<>ORD_KEY$ THEN GOTO CHECK_DONE
29825 IF D[19]<>0 THEN X$="Y"; GOTO CHECK_DONE
29830 GOTO NEXT_FS2
29840 CHECK_DONE:
29845 RETURN 
29846 IOLIST D$,D[0],D[1],D[2],D[3],D[4],D[5],D[6],D[7],D[8],D[9],D[10],D[11],D[12],D[13],D[14],D[15],D[16],D[17],D[18],D[19],D[20],D[21],D[22],D[23],D[24],D[25],D[26],D[27],D[28],D[29]
29849 ! **************************************************
29900 UPDATE_HEADER_REC:! After returning from FMGODA, where we changed FS1 we need to update our ORIG copy of FS1 so we don't erroneously report someone has changed the record
29920 EXTRACT (_FIL_NO,KEY=_KEY$,ERR=*NEXT) ! SSP248358 jdf
29945 RETURN 
29949 ! *********************************************************
30000 CHECK_AR1:
30010 ENTER CUST$
30018 IF %AR11=0 THEN %AR11=HFN; OPEN (%AR11,IOL=*)"AR1"+%C$ ! 176867
30030 AR1=%AR11,%LN_NAME$=""
30050 %LN_NAME$=""
30060 FIND (AR1,KEY=CUST$,DOM=NO_CUST)AR1$
30070 %LN_NAME$=MID(AR1$,11,30)
30100 NO_CUST:EXIT 
30199 ! *********************************************************
30300 CHECK_AR2:
30310 KEY_AR2$=TERMS_CODE$
30320 DIM _AR2_REC$(70)
30330 READ (_AR2,KEY=KEY_AR2$,DOM=*RETURN)AR2_REC$
30395 RETURN 
30399 ! ********************************************************
31000 ! Check Order History for Exsistig Order Number
31010 CHECK_ORD_HIST:
31020 KEY_FS6$=CUSTOMER$+ORDER$
31030 READ (_FS6,KEY=KEY_FS6$,DOM=*NEXT)
31040 KSY_FS6$=KEY(_FS6,END=*RETURN); READ (_FS6,KEY=KEY_FS6$)
31050 IF KEY_FS6$(1,18)<>CUSTOMER$+ORDER$ THEN RETURN 
31060 MSGBOX MSG("FMGODM_33")+SEP+MSG("FMGODM_34")+"?",MSG("WRANING"),"STOP,YesNo",ANS$
31070 IF ANS$="YES" THEN RETURN 
31080 ORDER$=""; ORDER_NUM_INVALID=1
31090 REFRESH_FLG=1
31095 RETURN 
35000 CHECK_FOR_BAD_KEY_OR_DATA:! SSP207044, routine to check for null keys and/or mostly blank data in FS1, escape if this is true and pop a window so we can try to determine what went wrong, if FS1 is ok on disk, then go get it and allow user to continue if that makes sense.
35005 IF STP(_KEY$)="" THEN _KEY$=ORDER$ ! SSP#211838
35010 IF LEN(_KEY$)=0 OR _KEY$<>ORDER_DIV$+ORDER_NUM$ THEN GOTO 35020 ELSE GOTO *RETURN
35015 IF STP(ORDER_DIV$+ORDER_NUM$)<>"" THEN GOTO *RETURN
35020 PRINT 'WINDOW'(0,0,80,24,OPT="*"),'CS','LF',PGN; ESCAPE 
35025 PRINT 'POP'
35090 RETURN 
36000 CHECK_DR_AR1:
36002 IF LEN(__AR1$)=0 THEN __AR1$=AR1.__AR1$
36020 SEG1$=MID(__AR1$,278,4),SEG2$=MID(__AR1$,282,4),SEG3$=MID(__AR1$,286,4),SEG4$=MID(__AR1$,290,4),SEG5$=MID(__AR1$,294,4) ! SSP242299 jdf
36025 FOR AA=1 TO 5
36027 OK=0
36030 EXECUTE "IF SEG"+STR(AA)+"$<>DIM(4) CALL"+QUO+"UPDSYO;VAL_REP"+QUO+",%X3$,SEG"+STR(AA)+"$,OK"
36032 IF OK THEN EXITTO DONE
36035 NEXT 
36037 GOTO 36050
36038 DONE:RETURN 
36040 RETURN 
36050 NO_ALLOW: MSGBOX "Access Denied, you may not access this Order",MSG("WARNING"),"!,TIM=5"; NEXT_ID=ORDER.CTL,ORDER$="",REFRESH_FLG=0; EXIT 
36999 RETURN 
56000 ! "178059-If customer is on credit hold - when they call up an order  
56001 ! "       that was in the system before the credit hold it is."
56010 ! "192843-Sales Order Summary screen in GUI does not show the "P/O    
56011 ! "192718-FMGODM - Sales Order Summary will show Frt on FS1 file. But 
56012 ! "                this is only showing part of the freight amt in FS1."
56013 ! "193299-Vendor terms code moving from a/p invoice entry into a/r    
56014 ! "194831-In order entry it will allow you to enter an order number   
56015 ! "       that is a stock PO number and proceed."
56016 ! "193332-GUI programs and panels are hardwired to look in tf2g       
56017 ! "197895-GUI-Order summary does not show the GP% like chui
56018 ! "198188-Unable to enter an order on the new server in GUI.          
56020 REM "197945-WMS picking.  if zero pick or qty<ord                       
56030 ! "199172-When data is none divisionalized in Order Entry cannot      
56032 ! "202877-Changing order entry defaults does not refresh in Order     
56040 ! "195920-They are able to delete an order with unbilled costs in GUI.
56042 REM "206279-They would like to know if anything can be done to prevent  
56045 ! "207044-Blank FS1 record, restored from FT3, how happening?
56047 ! "209012-GUI portion of 191992,OLD3854 Generate welcome email during 
56050 REM "228992-Web.ec Order 00-553080                                      
56051 REM "240854-Getting a program exception in the order entry gui grid     
56052 REM "239845-Invalid order processing divisions being created.           
56053 REM "242299-Issue with GRID in remote locations - focus is slow to catch
56054 REM "245964-Need to change the password on the override key for deleting
56055 REM "181527-Gui portion of 161760 - mark up percent for order lines     
56056 REM "257614-When they enter a Billable release click add new order      
56057 REM "267346-Error message on Order booking Report                       
56058 REM "262321-WMS:  While in WMS PO receiving - able to delete po  - stock
56060 REM "275196-B-Type bypass Job Costing flag not cleared for next order.  
56061 REM "276772-Multiple Finder's Fees per Customer/Item/Order Line.        
56062 REM "282112-Trying to get an order number for a billable release and    
56063 REM "283237-Needs to know how to delete a Purchase Order with unbilled  
56064 REM "283261-O/P System Parameter; for new graphical order trigger       
56065 REM "290905-Masking of order number in Sales Order Summary is not       
56066 REM "297235-Issue with Qry_FS2.2 (Sales Order Lookup) button in PO      
56067 REM "304758-Their Multi commission does not appear to be calculating    
56068 REM "304758-Their Multi commission does not appear to be calculating    
56069 REM "307159-Disable legacy Grid Order Entry, replace with Summary OE    
56070 REM "307433-DBD-332: Display Third-party order ID in O/P Entry, History 
56072 REM "307446-DBD-380; Error 12 when EC module not present                
56073 REM "307461-DBD-406 Display Office Supply Item Number in GUI O/E        
56074 REM "307490-Add CIC Code to order summary list box view                 
