0010 ! TKGTSA - File Maintenance Program for TK2 (TK2)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on May. 2, 2005 9:38
0030 ! ************************************************************************
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="TK2"
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0182 _ZW7=HFN; OPEN (_ZW7,IOL=*)"ZW7"
0185 _TK1=HFN; OPEN (_TK1,IOL=*)"TK1"
0187 _ZW2=HFN; OPEN (_ZW2,IOL=*)"ZW2"
0190 _SS1=HFN; OPEN (_SS1,IOL=*)"SS1"
0192 _TK3=HFN; OPEN (_TK3,IOL=*)"TK3"
0195 _TK4=HFN; OPEN (_TK4,IOL=*)"TK4"
0197 _ZZP=HFN; OPEN (_ZZP)"ZZPARM"
0199 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=2
0430 DIM _KEYS$[1:6]; _KEYS$[1]="EMPLOYEE_CODE$",_KEYS$[2]="LOG_DATE$",_KEYS$[3]="SERVICE_CODE$",_KEYS$[4]="PROJECT_CODE$",_KEYS$[5]="CLIENT_CODE$",_KEYS$[6]="SEQUENCE_COUNTER$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 DIM EMPLO$(4); CALL "ZSTRTU",%X3$,EMPLO$,"",""; EMPLOYEE_CODE$=UCS(EMPLO$)+"    ",REFRESH_FLG=1
0537 FIND (_ZW7,KEY=MID(EMPLOYEE_CODE$,1,3),DOM=NO_EMPLOYEE)R$; OPER_NAME$=R$(4,25),REFRESH_FLG=1
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0942 IF _ZW7 THEN CLOSE (_ZW7)
0943 IF _TK1 THEN CLOSE (_TK1)
0944 IF _ZW2 THEN CLOSE (_ZW2)
0945 IF _SS1 THEN CLOSE (_SS1)
0946 IF _TK3 THEN CLOSE (_TK3)
0947 IF _TK4 THEN CLOSE (_TK4)
0948 IF _ZZP THEN CLOSE (_ZZP)
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1012 IF ID$="EMPLOYEE_CODE" THEN FIND (_ZW7,KEY=MID(EMPLOYEE_CODE$,1,3),DOM=NO_EMPLOYEE)R$; OPER_NAME$=R$(4,25),REFRESH_FLG=1
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 _KEY$=PAD(EMPLOYEE_CODE$,4,$20$)+PAD(LOG_DATE$,6,$20$)+PAD(SERVICE_CODE$,3,$20$)+PAD(PROJECT_CODE$,6,$20$)+PAD(CLIENT_CODE$,10,$20$)+PAD(SEQUENCE_COUNTER$,2,$20$)
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1065 _BKEY$=_KEY$
1070 READ (_FIL_NO,KEY=_KEY$,DOM=LOAD_GRID,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 _KEY$=PAD(EMPLOYEE_CODE$,4,$20$)+PAD(LOG_DATE$,6,$20$)+PAD(SERVICE_CODE$,3,$20$)+PAD(PROJECT_CODE$,6,$20$)+PAD(CLIENT_CODE$,10,$20$)+PAD(SEQUENCE_COUNTER$,2,$20$)
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=EMPLOYEE_CODE.CTL,_FIRST_FIELD=DESCRIPTION.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 HOURS$=STR(HOURS)
10030 AMOUNT$=STR(AMOUNT)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="HOURS",_X=HOURS.CTL,HOURS=NUM(HOURS$,ERR=NON_NUMERIC)
11030 _X$="AMOUNT",_X=AMOUNT.CTL,AMOUNT=NUM(AMOUNT$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN EMPLOYEE_CODE$=""
13030 IF _CLR_FLG$="R" THEN LOG_DATE$=""
13040 IF _CLR_FLG$="R" THEN SERVICE_CODE$=""
13050 IF _CLR_FLG$="R" THEN PROJECT_CODE$=""
13060 IF _CLR_FLG$="R" THEN CLIENT_CODE$=""
13070 IF _CLR_FLG$="R" THEN SEQUENCE_COUNTER$=""
13080 DESCRIPTION$=""
13090 UNUSED$=""
13100 HOURS=0
13110 AMOUNT=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=LOG_DATE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=SERVICE_CODE.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=PROJECT_CODE.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14060 IF _ENABLE_FLG=5 THEN CALL "*wingrp;Enable",KEY5.GRP$; NEXT_ID=CLIENT_CODE.CTL ELSE CALL "*wingrp;Disable",KEY5.GRP$
14070 IF _ENABLE_FLG=6 THEN CALL "*wingrp;Enable",KEY6.GRP$; NEXT_ID=SEQUENCE_COUNTER.CTL ELSE CALL "*wingrp;Disable",KEY6.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(10,"N")
15030 IF _ORIG.EMPLOYEE_CODE$=_CUR.EMPLOYEE_CODE$ OR EMPLOYEE_CODE$=_CUR.EMPLOYEE_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.EMPLOYEE_CODE$=EMPLOYEE_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("EMPLOYEE_CODE")+" = "+_CUR.EMPLOYEE_CODE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EMPLOYEE_CODE")+" = "+_CUR.EMPLOYEE_CODE$
15040 IF _ORIG.LOG_DATE$=_CUR.LOG_DATE$ OR LOG_DATE$=_CUR.LOG_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.LOG_DATE$=LOG_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("LOG_DATE")+" = "+_CUR.LOG_DATE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LOG_DATE")+" = "+_CUR.LOG_DATE$
15050 IF _ORIG.SERVICE_CODE$=_CUR.SERVICE_CODE$ OR SERVICE_CODE$=_CUR.SERVICE_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.SERVICE_CODE$=SERVICE_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("SERVICE_CODE")+" = "+_CUR.SERVICE_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SERVICE_CODE")+" = "+_CUR.SERVICE_CODE$
15060 IF _ORIG.PROJECT_CODE$=_CUR.PROJECT_CODE$ OR PROJECT_CODE$=_CUR.PROJECT_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PROJECT_CODE$=PROJECT_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PROJECT_CODE")+" = "+_CUR.PROJECT_CODE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PROJECT_CODE")+" = "+_CUR.PROJECT_CODE$
15070 IF _ORIG.CLIENT_CODE$=_CUR.CLIENT_CODE$ OR CLIENT_CODE$=_CUR.CLIENT_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CLIENT_CODE$=CLIENT_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CLIENT_CODE")+" = "+_CUR.CLIENT_CODE$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CLIENT_CODE")+" = "+_CUR.CLIENT_CODE$
15080 IF _ORIG.SEQUENCE_COUNTER$=_CUR.SEQUENCE_COUNTER$ OR SEQUENCE_COUNTER$=_CUR.SEQUENCE_COUNTER$ THEN GOTO *NEXT ELSE IF _ORIG.SEQUENCE_COUNTER$=SEQUENCE_COUNTER$ THEN _CHG2$=_CHG2$+SEP+MSG("SEQUENCE_COUNTER")+" = "+_CUR.SEQUENCE_COUNTER$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEQUENCE_COUNTER")+" = "+_CUR.SEQUENCE_COUNTER$
15090 IF _ORIG.DESCRIPTION$=_CUR.DESCRIPTION$ OR DESCRIPTION$=_CUR.DESCRIPTION$ THEN GOTO *NEXT ELSE IF _ORIG.DESCRIPTION$=DESCRIPTION$ THEN _CHG2$=_CHG2$+SEP+MSG("DESCRIPTION")+" = "+_CUR.DESCRIPTION$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESCRIPTION")+" = "+_CUR.DESCRIPTION$
15100 IF _ORIG.UNUSED$=_CUR.UNUSED$ OR UNUSED$=_CUR.UNUSED$ THEN GOTO *NEXT ELSE IF _ORIG.UNUSED$=UNUSED$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.UNUSED$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.UNUSED$
15110 IF _ORIG.HOURS=_CUR.HOURS OR HOURS=_CUR.HOURS THEN GOTO *NEXT ELSE IF _ORIG.HOURS=HOURS THEN _CHG2$=_CHG2$+SEP+MSG("HOURS")+" = "+STR(_CUR.HOURS),_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("HOURS")+" = "+STR(_CUR.HOURS)
15120 IF _ORIG.AMOUNT=_CUR.AMOUNT OR AMOUNT=_CUR.AMOUNT THEN GOTO *NEXT ELSE IF _ORIG.AMOUNT=AMOUNT THEN _CHG2$=_CHG2$+SEP+MSG("AMOUNT")+" = "+STR(_CUR.AMOUNT),_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("AMOUNT")+" = "+STR(_CUR.AMOUNT)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN EMPLOYEE_CODE$=_CUR.EMPLOYEE_CODE$
16030 IF _CHG_VAR$(2,1)="Y" THEN LOG_DATE$=_CUR.LOG_DATE$
16040 IF _CHG_VAR$(3,1)="Y" THEN SERVICE_CODE$=_CUR.SERVICE_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN PROJECT_CODE$=_CUR.PROJECT_CODE$
16060 IF _CHG_VAR$(5,1)="Y" THEN CLIENT_CODE$=_CUR.CLIENT_CODE$
16070 IF _CHG_VAR$(6,1)="Y" THEN SEQUENCE_COUNTER$=_CUR.SEQUENCE_COUNTER$
16080 IF _CHG_VAR$(7,1)="Y" THEN DESCRIPTION$=_CUR.DESCRIPTION$
16090 IF _CHG_VAR$(8,1)="Y" THEN UNUSED$=_CUR.UNUSED$
16100 IF _CHG_VAR$(9,1)="Y" THEN HOURS=_CUR.HOURS
16110 IF _CHG_VAR$(10,1)="Y" THEN AMOUNT=_CUR.AMOUNT
16990 RETURN 
17000 NO_EMPLOYEE:
17010 MSGBOX "Employee: "+EMPLOYEE_CODE$+" is not on file",MSG("WARNING"),"!,TIM=3)"
17020 EMPLOYEE_CODE$="",NEXT_ID=EMPLOYEE_CODE.CTL,REFRESH_FLG=1
17030 RETURN 
23000 LOAD_GRID:
23001 ESCAPE 
23002 GRID HIDE GRID_FIELDS.CTL
23005 LINES=0,_BKEY$=_KEY$,BCUSTOMER$=CUSTOMER$,BITEM_CODE$=ITEM_CODE$,GRIDD$="",OPR$=""
23010 READS: _KEY$=KEY(_FIL_NO,END=*RETURN); READ (_FIL_NO,KEY=_KEY$)
23020 IF BKEY$<>MID(_KEY$,1,LEN(BKEY$)) THEN GOTO *RETURN
23030 AA+=1
23045 IF AA>1 AND SETGRID=0 THEN GRIDD$=GRIDD$+"A"; GRID LOAD GRID_FIELDS.CTL,1,0,"A"
23050 LINES=LINES+1,GRID_FIELDS.CTL'ROW=LINES,GRID_FIELDS.CTL'COLUMN=-1,GRID_FIELDS.CTL'VALUE$=STR(AA:"000")
23055 ! GRID WRITE GRID_FIELDS.CTL,0,0,GRIDD$
23060 GRID WRITE GRID_FIELDS.CTL,1,LINES,DESC$[AA]; GRID_FIELDS.CTL'COLUMN=1,GRID_FIELDS.CTL'ROW=LINES,GRID_FIELDS.CTL'LOCK=1
23065 GRID WRITE GRID_FIELDS.CTL,2,LINES,STR(X9(AA)); GRID_FIELDS.CTL'COLUMN=2,GRID_FIELDS.CTL'ROW=LINES,GRID_FIELDS.CTL'LEN=3
23070 GRID WRITE GRID_FIELDS.CTL,3,LINES,STR(Y9(AA)); GRID_FIELDS.CTL'COLUMN=3,GRID_FIELDS.CTL'ROW=LINES,GRID_FIELDS.CTL'LEN=3
23071 GRID WRITE GRID_FIELDS.CTL,4,LINES,X9$(AA,1); GRID_FIELDS.CTL'COLUMN=4,GRID_FIELDS.CTL'ROW=LINES,GRID_FIELDS.CTL'LEN=1
23072 ! GRID_FIELDS.CTL'COLUMN=2,GRID_FIELDS.CTL'ROW=LINES,GRID_FIELDS.CTL'LEN=60
23090 NEXT AA
23095 GRID SHOW GRID_FIELDS.CTL; SETGRID=1; RETURN 
23100 END_LOAD_GRID:
23110 GRID_TR$=MSG("GRID_TR"),GRID_T$=MSG("GRID_T")
23120 IF LINES=0 THEN GOTO PROC_RE
24501 FOR AA=LINES TO 1 STEP -1
24504 X=GRID_FIELDS.CTL,X'COLUMN=1,X'ROW=AA,X'CELLTYPE$="DropBox",X'TEXT$=GRID_T$
24505 XX=POS(OPR$(AA,1)=GRID_T$),XXX=POS("/"=GRID_T$(XX))-1,TEXT$=GRID_T$(XX,XXX); GRID WRITE GRID_FIELDS.CTL,1,AA,TEXT$
24508 NEXT AA
24509 ! X=GRID_FIELDS.CTL,X'COLUMM=2,X'ROW=-1,X'CELLTYPE$="DropBox",X'TEXT$=GRID_T$
24510 PROC_RE: _KEY$=_BKEY$
24515 GRID SHOW GRID_FIELDS.CTL
24520 GOSUB PROCESS_READ; FLAG=0; RETURN 
24530 GRID_FOCUS:
24535 IF ID$<>"GRID_FIELDS" THEN GOTO *RETURN
24540 GRID SELECT READ GRID_FIELDS.CTL,COL,ROW
24545 GRID FIND GRID_FIELDS.CTL,COL,ROW,_X$; IF COL<>4 AND NUM(_X$,ERR=NON_NUMERIC) THEN ! 
24550 IF COL=1 THEN GRID GOTO GRID_FIELDS.CTL,2,ROW; NEXT_ID=GRID_FIELDS.CTL
24560 IF COL=2 THEN GRID GOTO GRID_FIELDS.CTL,3,ROW; NEXT_ID=GRID_FIELDS.CTL
24570 IF COL=3 THEN GRID GOTO GRID_FIELDS.CTL,4,ROW; NEXT_ID=GRID_FIELDS.CTL
24590 IF COL=4 AND ROW+1<=166 THEN GRID GOTO GRID_FIELDS.CTL,2,ROW+1; NEXT_ID=GRID_FIELDS.CTL ELSE %GRID=0
24599 RETURN 
24600 ADD_LINES:
24610 LINES=LINES+1
24620 GRID ADD GRID_FIELDS.CTL,0,LINES
24630 GRID_FIELDS.CTL'ROW=LINES,GRID_FIELDS.CTL'COLUMN=-1,GRID_FIELDS.CTL'VALUE$=STR(LINES:"000")
24635 X=GRID_FIELDS.CTL,X'COLUMN=1,X'ROW=LINES,X'CELLTYPE$="DropBox",X'TEXT$=GRID_T$
24640 PRINT$=GRID_T$(1,POS("/"=GRID_T$)-1); GRID WRITE GRID_FIELDS.CTL,1,LINES,PRINT$; OPR$=OPR$+PRINT$
24645 GRID GOTO X,1,LINES
24650 RETURN 
25700 SEL_GRID:
25705 GOSUB DEL_RECORDS
25710 FOR AA=1 TO LINES
25720 X=GRID_FIELDS.CTL
25730 GRID FIND X,1,AA,PRINT$,ERR=*BREAK
25735 PRINT$=MID(PRINT$,1,1)
25740 GRID FIND X,2,AA,COMMENT$
25750 LINE_NUM$=STR(AA:"000"),_KEY$=%CUSTOMER$+%ITEM_CODE$+LINE_NUM$,ITEM_CODE$=%ITEM_CODE$
25755 CALL "ZZWLKU;PARSE_CUST",%CUSTOMER$,CUST_DIV$,CUST_CODE$
25760 WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
25770 NEXT AA
25771 CHANGE_FLG=0; GOSUB CLEAR_REC
25772 DEL_GRID:IF LINES=0 THEN GOTO *RETURN
25773 FOR AA=2 TO LINES; GRID DELETE GRID_FIELDS.CTL,0,2; NEXT AA
25775 CHANGE_FLG=0,REFRESH_FLG=1,CHANGE_FLG=0
25780 GRID WRITE GRID_FIELDS.CTL,1,1,""
25790 GRID WRITE GRID_FIELDS.CTL,2,1,""
25795 IF ARG_1$+ARG_2$<>"" THEN CMD_STR$="END"
25800 RETURN 
30000 SEL_LB_LINE:
30005 PROCESS "XMGIAW.1","../FMG/FM.EN",STR(_FIL_NO),VAL$
30008 RETURN 
30009 INIT_QRY: _FIL_NO=NUM(ARG_1$)
30010 READ (_FIL_NO,KEY="",DOM=*NEXT)
30020 READ (_FIL_NO,REC=FMV$,END=END_REC)
30025 IDX=IDX+1,LN$=FMV.CUST_DIV$+"-"+FMV.CUST_CODE$+SEP+FMV.ITEM_CODE$+SEP+FMV.LINE_NUM$+SEP+FMV.PRINT$+SEP+FMV.COMMENT$
30026 LN1$=SEP+SEP+FMV.LINE_NUM$+SEP+FMV.PRINT$+SEP+FMV.COMMENT$
30028 IF BKEY$<>FMV.CUST_DIV$+FMV.CUST_CODE$+FMV.ITEM_CODE$ THEN LIST_BOX LOAD LB_LINE.CTL,IDX,LN$; BKEY$=FMV.CUST_DIV$+FMV.CUST_CODE$+FMV.ITEM_CODE$; GOTO 30020
30030 LIST_BOX LOAD LB_LINE.CTL,IDX,LN1$
30040 GOTO 30020
30050 END_REC:
30060 RETURN 
31000 DEL_RECORDS:
31010 READ (_FIL_NO,KEY=%CUSTOMER$+%ITEM_CODE$,DOM=*NEXT)
31020 _KEY$=KEY(_FIL_NO,END=END_DEL_REC); READ (_FIL_NO)
31030 IF MID(_KEY$,1,20)<>%CUSTOMER$+%ITEM_CODE$ THEN GOTO END_DEL_REC
31035 REMOVE (_FIL_NO,KEY=_KEY$)
31040 GOTO 31020
31050 END_DEL_REC:
31060 RETURN 
32000 ASSIGN_PRG:
32010 FOR AA=1 TO 166
32020 GRID FIND GRID_FIELDS.CTL,1,AA,F1$
32030 GRID FIND GRID_FIELDS.CTL,2,AA,F2$
32040 GRID FIND GRID_FIELDS.CTL,3,AA,F3$
32050 GRID FIND GRID_FIELDS.CTL,4,AA,F4$
32060 X9(AA)=NUM(F2$),Y9(AA)=NUM(F3$),X9$(AA,1)=F4$,A$(10,30)=ML_DESC$
32070 A(0)=NUM_OF_LINE,A(1)=WIDTH,A(2)=FIRST_LINE,A(3)=NUM_LN_SECTION
32075 NEXT 
32080 RETURN 
