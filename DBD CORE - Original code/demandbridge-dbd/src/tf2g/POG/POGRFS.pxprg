0010 ! POGRFS - Backorder Fill Report
0035 REM "5.5 - 09/07/07 - 16.581666 - jdf - SSP# 211380
0037 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
0040 REM "Copyright 2007 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0060 PROCESS "POGRFS","../POG/PO.EN"
0070 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZZS"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="PRG_NAME$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 ARG_1$="PO2RFA"+"            ",%K9$="PO2RFA"
0545 DIM RNG(4)
0555 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0565 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT)A$,R0$,W$,RNG{ALL}; GOTO 0585
0575 DIM A$(106),R0$(128),W$(71),RNG(4)
0577 NXT_OPTION:
0585 GOSUB ASSIGN_LIB
0595 EXECUTE "nxt_folder=FLDR."+_F_OBJ$[NUM(RPT_SEQ$)]+".CTL,REFRESH_FLG=1"
0640 NEXT_ID=RPT_VEIW.CTL,REFRESH_FLG=1,RPT_SEQ=NUM(RPT_SEQ$),REFRESH_FLG=1
0650 IF RPT_REPTYPE$="Y" THEN CALL "*WINGRP;SHOW",CUST.GRP$ ELSE CALL "*WINGRP;HIDE",CUST.GRP$
0660 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 _KEY$=PRG_NAME$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1230 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1240 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1450 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1460 CHANGE_FLG=0
1470 NEXT_ID=_FIRST_KEY
1480 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 _KEY$=PRG_NAME$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1680 CHANGE_FLG=0
1690 NEXT_ID=_FIRST_KEY
1700 EXIT 
1710 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1840 CHANGE_FLG=0
1850 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2060 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2070 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2080 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2090 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2440 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2450 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2640 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2650 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3040 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3050 CHANGE_FLG=0
3060 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3250 IF _CHG1$="" THEN GOTO CHK2
3260 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3270 IF _YESNO$="NO" THEN GOTO *RETURN
3280 IF _CHG2$="" THEN GOTO WRT
3290 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3292 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=*NEXT)A$,R0$,W$,RNG{ALL}; GOTO 3330
3295 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3320 GOSUB NUM_TO_STR
3330 REFRESH_FLG=1,CHANGE_FLG=0
3340 RETURN 
3350 WRITE_ERROR:
3360 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3370 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3801 GOSUB ASSIGN_PRG
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=PRG_NAME.CTL,_FIRST_FIELD=RPT_SELEC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRT ELSE CHANGE_FLG=0
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR"),_MSG_DIRECTORY$=MSG("DIRECTORY"),_MSG_END_OF_FIL$=MSG("END_OF_FIL"),_MSG_FILOPNERR1$=MSG("FILOPNERR1"),_MSG_JUST_CHECK$=MSG("JUST_CHECK"),_MSG_MANDATORY$=MSG("MANDATORY"),_MSG_NEXT$=MSG("NEXT"),_MSG_NON_NUMER$=MSG("NON_NUMER"),_MSG_NOT_FOUND$=MSG("NOT_FOUND"),_MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG"),_MSG_PRECEDING$=MSG("PRECEDING"),_MSG_PREFIX$=MSG("PREFIX"),_MSG_REC_ACCESS$=MSG("REC_ACCESS"),_MSG_REC_ALTERD$=MSG("REC_ALTERD"),_MSG_REC_CR_NEW$=MSG("REC_CR_NEW"),_MSG_REC_LOCKED$=MSG("REC_LOCKED"),_MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1),_MSG_REC_NOTFND$=MSG("REC_NOTFND"),_MSG_REC_NO_1ST$=MSG("REC_NO_1ST"),_MSG_REC_NO_LST$=MSG("REC_NO_LST"),_MSG_REC_REMOVE$=MSG("REC_REMOVE"),_MSG_REC_UPDADD$=MSG("REC_UPDADD"),_MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1),_MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1),_MSG_REQ_FIELDS$=MSG("REQ_FIELDS"),_MSG_START_FILE$=MSG("START_FILE"),_MSG_UPDATE$=MSG("UPDATE"),_MSG_UPD_OTHER1$=MSG("UPD_OTHER1"),_MSG_UPD_OTHER2$=MSG("UPD_OTHER2"),_MSG_UPD_SAME$=MSG("UPD_SAME"),_MSG_WARNING$=MSG("WARNING"),_MSG_CANNOT_WRITE$=MSG("CANT_WRITE"),_MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9030 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 RPT_NUM1$=STR(RPT_NUM1)
10030 RPT_NUM2$=STR(RPT_NUM2)
10040 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="RPT_NUM1",_X=RPT_NUM1.CTL,RPT_NUM1=NUM(RPT_NUM1$,ERR=NON_NUMERIC)
11030 _X$="RPT_NUM2",_X=RPT_NUM2.CTL,RPT_NUM2=NUM(RPT_NUM2$,ERR=NON_NUMERIC)
11040 RETURN 
11050 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11060 NEXT_ID=_X
11070 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12030 RETURN 
14000 ENABLE_GROUPS:RETURN 
20000 VIEW_REPORT:
20001 PRINT_REPORT:
20010 ! View Report Routine.
20020 IOLIST A$
20030 IOLIST R0$,W$
20040 ZZPARM=HFN; OPEN (ZZPARM)"ZZPARM"; READ (ZZPARM,KEY=FID(0)+"      ")X3$,*,X4$; READ (ZZPARM,KEY="STATI/C")T1$,F0
20050 ZZP=HFN; OPEN (ZZP)"ZZP"
20060 ! 
20070 IF CHANGE_FLG THEN GOSUB CHECK_CHANGES ELSE GOSUB ASSIGN_PRG; GOSUB SEL_DATE
20090 IF ID$="RPT_VEIW" THEN R0$(2,6)="P_    "
20260 K$=X3$(1,8),%GUI=1
20267 %B_WINDATE_FMT$=%WINDATE_FMT$,%WINDATE_FMT$="YYYYMMDD",JJ$=DTE(0:"%Yl%Mz%Dz"); CALL "ZZWDTE;VALIDATE",JJ$,JJJ$,JJJJ$; X3$(21,6)=JJ$
20270 WRITE (ZZP,KEY=K$)X3$,X4$,T1$,R0$,W$,A$
20280 PRINT 'DIALOGUE'(5,10,80,20,MSG("POGRFS")),'CS'; CALL "PO2RFA"; PRINT 'POP',
20310 CMD_STR$="END"
20999 EXIT 
25000 ! 25000,10
25010 ASSIGN_LIB:
25011 IF LEN(A$)<>106 THEN A$=PAD(A$,106," ")
25020 ! Output Option
25030 IF NUM(A$(71,1))=0 THEN A$(71,1)="1"
25035 PRT_MODE$=R0$(1,1),RPT_OUTDEV$=R0$(2,2),RPT_VERT$=R0$(9,1),RPT_HORIZ$=R0$(10,1),RPT_AUX1$=R0$(11,1),RPT_AUX2$=R0$(12,1),RPT_LINES$=R0$(15,2),RPT_FORMCODE$=R0$(17,1),RPT_JOBCARD$=MID(R0$,65,60),RPT_JOBCARD_FLG$=MID(R0$,125,1),RPT_AUX3$=R0$(13,1),RPT_AUX4$=R0$(14,1)
25100 ! Selection Options
25110 RPT_SELEC$=A$(7,12),RPT_DESC$=A$(19,40),RPT_OPT$=A$(59,12),RPT_SEQ$=A$(71,1)
25120 CB_VARIANCE$=A$(72,1),CB_ITEM_NO$=A$(73,1),CB_ONLY_ITEM$=A$(74,1),CB_VAL_VAR$=A$(75,1),RPT_ZEROBAL$=A$(76,1),RPT_REPTYPE$=A$(77,1),ML_BIN_START$=STP(A$(78,10)),ML_BIN_END$=STP(A$(88,10)),CB_SRT_CODE$=A$(98,1),CB_MARK$=A$(99,1)
25130 ! 
25140 IF STP(RPT_OPT$)="" THEN RPT_OPT$=""
25150 IF STP(RPT_SELEC$)="" THEN RPT_SELEC$=""
25160 REFRESH_FLG=1; DIM S$(10,"~")
25170 SWITCH RPT_SEQ$
25180 CASE "1"
25190 ML_LOC_START$=STP(W$(41,4)); IF W$(45,4)<>S$(1,4) THEN ML_LOC_END$=W$(45,4)
25200 ML_CUST_START$=STP(W$(1,10)); IF W$(21,10)<>S$ THEN ML_CUST_END$=W$(21,10)
25210 ML_ITEM_START$=STP(W$(11,10)); IF W$(31,10)<>S$ THEN ML_ITEM_END$=W$(31,10)
25220 T1$="POG   "
25230 BREAK
25290 END SWITCH 
25300 RETURN 
25310 ASSIGN_PRG:
25320 A$(1,6)=ARG_1$,A$(7,12)=RPT_SELEC$,A$(19,40)=RPT_DESC$,A$(59,12)=RPT_OPT$,A$(71,1)=RPT_SEQ$,A$(59,12)=RPT_OPT$; A$(71,1)=RPT_SEQ$
25330 ! 
25340 R0$(1,1)=PRT_MODE$,R0$(2,6)=MID(RPT_OUTDEV$,1,2)+"    ",R0$(9,1)=RPT_VERT$,R0$(10,1)=RPT_HORIZ$,R0$(11,1)=RPT_AUX1$,R0$(12,1)=RPT_AUX2$,R0$(13,1)=RPT_AUX3$,R0$(14,1)=RPT_AUX4$,R0$(15,2)=RPT_LINES$,R0$(17,1)=RPT_FORMCODE$,R0$(65,60)=RPT_JOBCARD$,R0$(125,1)=RPT_JOBCARD_FLG$,A$(98,1)=CB_SRT_CODE$,A$(99,1)=CB_MARK$; DIM W$(71,"~")
25350 A$(72,6)=CB_VARIANCE$+CB_ITEM_NO$+CB_ONLY_ITEM$+CB_VAL_VAR$+RPT_ZEROBAL$+RPT_REPTYPE$; IF RPT_REPTYPE$="Y" THEN A$(78,20)=ML_BIN_START$+ML_BIN_END$
25360 ! 
25370 SWITCH RPT_SEQ$
25380 CASE "1"
25390 DIM W$(49,"~")
25400 W$(41,4)=ML_LOC_START$; IF ML_LOC_END$<>"" THEN W$(45,4)=ML_LOC_END$
25410 W$(1,10)=ML_CUST_START$; IF ML_CUST_END$<>"" THEN W$(21,10)=ML_CUST_END$
25420 W$(11,10)=ML_ITEM_START$; IF ML_ITEM_END$<>"" THEN W$(31,10)=ML_ITEM_END$
25430 T1$="POG   "
25431 BREAK
25440 END SWITCH 
25450 RETURN 
25460 SEL_DATE:
25465 RETURN 
25470 IF LEN(START_FISCAL$)>4 THEN TF_YEAR$=%CR_YEAR$ ELSE TF_YEAR$=START_FISCAL$
25480 IF LEN(START_ACCTPD$)>2 THEN PER$=CR_PD$ ELSE PER$=START_ACCTPD$
25490 FIND (_ZZPARM,KEY=%C$+"G/LYE"+TF_YEAR$)REC_DAT$; REC_DAT$=REC_DAT$(21)
25500 DIM CUR_DATE$[12]
25510 FOR XX=1 TO 12; CUR_DATE$[XX]=FND$(REC_DAT$(XX*6-5,6)); NEXT XX
25520 ML_ENDING_PERIOD$=CUR_DATE$[NUM(PER$)]
25530 REFRESH_FLG=1
25540 RETURN 
56000 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
60000 SELECT_SELECTION:
60010 _KEY$="PO2RFA"+RPT_SELEC$,_KEY$=PAD(_KEY$,18," ")
60020 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD1)A$,R0$,W$,RNG{ALL}
60030 GOTO NXT_OPTION
60500 NEW_RECORD1:
60510 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
60520 IF _YESNO$="NO" THEN GOSUB MAIN_POST_DISPLAY; EXIT 
60530 DIM A$(106),R0$(128),W$(71),RNG(4)
60540 A$(71,1)="1",A$(1,6)="PO2RFA",A$(7,LEN(RPT_SELEC$))=RPT_SELEC$
60550 WRITE (_FIL_NO,KEY=_KEY$)A$,R0$,W$,RNG{ALL}
60560 GOTO NXT_OPTION
