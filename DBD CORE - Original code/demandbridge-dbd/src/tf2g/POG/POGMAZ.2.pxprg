0010 ! POGMAZ.2 - File Maintenance Program for PO2_POLns (="PO2"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Feb. 24, 2003 8:25
0030 ! ************************************************************************
0035 REM "5.6 - 01/15/08 - 15.182222 - crg - SSP# 211380
0037 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
0040 REM "Copyright 2008 DemandBridge, Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="PO2"+%C$
0165 _PO2=HFN; OPEN (_PO2,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0170 _FMP=HFN; OPEN (_FMP,ERR=OPEN_ERR)"FMP"+%C$
0172 _AR4=HFN; OPEN (_AR4,ERR=OPEN_ERR)"AR4"+%C$
0175 _ZZP=HFN; OPEN (_ZZP,ERR=OPEN_ERR)"ZZPARM"
0177 _IC0=HFN; OPEN (_IC0,ERR=OPEN_ERR)"IC0"+%C$
0178 _AR1=HFN; OPEN (_AR1,ERR=OPEN_ERR)"AR1"+%C$
0180 _CUR_PO2=HFN; OPEN (_CUR_PO2,IOL=*,REC=_CUR$)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:2]; _KEYS$[1]="LINE_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 ARG_1$=PO_NUMBER$+"001"
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_PO2,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_PO2,ERR=*NEXT)
0930 IF _PO2<>0 THEN CLOSE (_PO2); _PO2=0
0940 IF _CUR_PO2<>0 THEN CLOSE (_CUR_PO2); _CUR_PO2=0
0945 CLOSE (_FMP),(_AR4),(_ZZP),(_IC0),(_AR1)
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1012 IF ID$="LINE_NUM" THEN LINE_NUM$=PAD(LINE_NUM$,3,0,"0")
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 _KEY$=%PO_NUMBER$+_KEY$,PO_NUMBER$=%PO_NUMBER$
1050 READ DATA FROM REC(IOL(_PO2:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_PO2,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1485 GOSUB CLEAR_FIELDS
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_PO2:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_PO2,KEY=_KEY$,ERR=NO_SUCH)
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=LINE_NUM.CTL
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_PO2,END=END_OF_FILE)
2045 IF PO_NUMBER$<>_KEY$(1,LEN(PO_NUMBER$)) THEN READ (_PO2); GOTO 2040
2060 READ (_PO2,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_PO2,KEY=_KEY$,END=END_OF_FILE); READ (_PO2,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2225 _KEY$=KEP(_PO2,END=START_OF_FILE); READ (_PO2,KEY=_KEY$,ERR=*NEXT); ; IF PO_NUMBER$<>_KEY$(1,LEN(PO_NUMBER$)) THEN GOTO 2225
2230 READ (_PO2,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_PO2,KEY=_KEY$,END=START_OF_FILE); READ (_PO2,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2425 READ (_PO2,KEY=PO_NUMBER$,DOM=*NEXT)
2430 _KEY$=KEY(_PO2,ERR=NO_FIRST)
2440 IF PO_NUMBER$<>_KEY$(1,LEN(PO_NUMBER$)) THEN GOTO NO_FIRST
2450 READ (_PO2,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2625 READ (_PO2,KEY=POB_NUMBER$+"999",DOM=*NEXT)
2628 _KEY$=KEP(_PO2,END=NO_LAST); READ (_PO2,KEY=_KEY$,ERR=*NEXT); ; IF PO_NUMBER$<>_KEY$(1,LEN(PO_NUMBER$)) THEN GOTO 2628
2630 ! _KEY$=KEL(_PO2,ERR=NO_LAST)
2650 READ (_PO2,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_PO2:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_PO2,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_PO2) ! Save record for review
3052 FLAG=1; GOSUB SEL_PROD_CODE_OVER; GOSUB SEL_COMM_CODE; UM_CODE$=STND_COST_UOM$; GOSUB UM; ML_UM_DESC$=UM_DESC$,UM_CODE$=UM$; GOSUB UM; ML_UM_DESC1$=UM_DESC$
3060 CHANGE_FLG=0,%CUSTOMER$=CUST_DIV$+CUST_CODE$,CUSTOMER$=%CUSTOMER$; GOSUB SEL_CUSTOMER
3062 IF LINE_TYPE$="S" THEN CALL "*WINGRP;HIDE",OVER.GRP$; CALL "*WINGRP;UNLOCK",SPL.GRP$ ELSE CALL "*WINGRP;LOCK",SPL.GRP$; CALL "*WINGRP;SHOW",OVER.GRP$
3065 IF LINE_TYPE$="I" AND LINE_NUM$<>"001" THEN CHECK_BOX DISABLE SPECIAL_SHIPPING.CTL ELSE CHECK_BOX ENABLE SPECIAL_SHIPPING.CTL
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_PO2,KEY=KEC(_PO2),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_PO2,KEY=_KEY$,ERR=WRITE_ERROR)
3330 _R_KEY$=KEC(_PO2); TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_PO2,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_PO2) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=LINE_NUM.CTL,_FIRST_FIELD=LINE_TYPE.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 TF_COST$=STR(TF_COST)
10030 OPEN_QTY$=STR(OPEN_QTY)
10040 UM_AMT$=STR(UM_AMT)
10050 LABEL_NUM$=STR(LABEL_NUM)
10060 EXT$=STR(EXT)
10070 CTN_PACK$=STR(CTN_PACK)
10080 QTY_RECIEVED_P$=STR(QTY_RECIEVED_P)
10090 QTY_RECV_NOW$=STR(QTY_RECV_NOW)
10100 RECV_NOW_COST$=STR(RECV_NOW_COST)
10110 PREV_INVOICED$=STR(PREV_INVOICED)
10120 INVOICE_NOW$=STR(INVOICE_NOW)
10130 REAL_QTY_ORDERED$=STR(REAL_QTY_ORDERED)
10140 QTY_BO$=STR(QTY_BO)
10150 RECVD_PREV_EXT$=STR(RECVD_PREV_EXT)
10160 RECV_NOW_EXT$=STR(RECV_NOW_EXT)
10170 INV_PREV_EXT$=STR(INV_PREV_EXT)
10180 INV_NOW_EXT$=STR(INV_NOW_EXT)
10190 INV_NOW_COST$=STR(INV_NOW_COST)
10200 CTN_WT$=STR(CTN_WT)
10210 COMBO_QTY$=STR(COMBO_QTY)
10220 SELL_QTY_PER$=STR(SELL_QTY_PER)
10230 SELL_PRICE$=STR(SELL_PRICE)
10240 STND_UNIT_COST$=STR(STND_UNIT_COST)
10250 STND_COST_QTY_PER$=STR(STND_COST_QTY_PER)
10260 PO2_UNUSED_3$=STR(PO2_UNUSED_3)
10270 PO2_UNUSED_4$=STR(PO2_UNUSED_4)
10280 PO2_UNUSED_5$=STR(PO2_UNUSED_5)
10290 PO2_UNUSED_6$=STR(PO2_UNUSED_6)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="COST",_X=TF_COST.CTL,TF_COST=NUM(TF_COST$,ERR=NON_NUMERIC)
11030 _X$="OPEN_QTY",_X=OPEN_QTY.CTL,OPEN_QTY=NUM(OPEN_QTY$,ERR=NON_NUMERIC)
11040 _X$="UM_AMT",_X=UM_AMT.CTL,UM_AMT=NUM(UM_AMT$,ERR=NON_NUMERIC)
11050 _X$="LABEL_NUM",_X=LABEL_NUM.CTL,LABEL_NUM=NUM(LABEL_NUM$,ERR=NON_NUMERIC)
11060 _X$="EXT",_X=EXT.CTL,EXT=NUM(EXT$,ERR=NON_NUMERIC)
11070 _X$="CTN_PACK",_X=CTN_PACK.CTL,CTN_PACK=NUM(CTN_PACK$,ERR=NON_NUMERIC)
11080 _X$="QTY_RECIEVED_P",_X=QTY_RECIEVED_P.CTL,QTY_RECIEVED_P=NUM(QTY_RECIEVED_P$,ERR=NON_NUMERIC)
11090 _X$="QTY_RECV_NOW",_X=QTY_RECV_NOW.CTL,QTY_RECV_NOW=NUM(QTY_RECV_NOW$,ERR=NON_NUMERIC)
11100 _X$="RECV_NOW_COST",_X=RECV_NOW_COST.CTL,RECV_NOW_COST=NUM(RECV_NOW_COST$,ERR=NON_NUMERIC)
11110 _X$="PREV_INVOICED",_X=PREV_INVOICED.CTL,PREV_INVOICED=NUM(PREV_INVOICED$,ERR=NON_NUMERIC)
11120 _X$="INVOICE_NOW",_X=INVOICE_NOW.CTL,INVOICE_NOW=NUM(INVOICE_NOW$,ERR=NON_NUMERIC)
11130 _X$="REAL_QTY_ORDERED",_X=REAL_QTY_ORDERED.CTL,REAL_QTY_ORDERED=NUM(REAL_QTY_ORDERED$,ERR=NON_NUMERIC)
11140 _X$="QTY_BO",_X=QTY_BO.CTL,QTY_BO=NUM(QTY_BO$,ERR=NON_NUMERIC)
11150 _X$="RECVD_PREV_EXT",_X=RECVD_PREV_EXT.CTL,RECVD_PREV_EXT=NUM(RECVD_PREV_EXT$,ERR=NON_NUMERIC)
11160 _X$="RECV_NOW_EXT",_X=RECV_NOW_EXT.CTL,RECV_NOW_EXT=NUM(RECV_NOW_EXT$,ERR=NON_NUMERIC)
11170 _X$="INV_PREV_EXT",_X=INV_PREV_EXT.CTL,INV_PREV_EXT=NUM(INV_PREV_EXT$,ERR=NON_NUMERIC)
11180 _X$="INV_NOW_EXT",_X=INV_NOW_EXT.CTL,INV_NOW_EXT=NUM(INV_NOW_EXT$,ERR=NON_NUMERIC)
11190 _X$="INV_NOW_COST",_X=INV_NOW_COST.CTL,INV_NOW_COST=NUM(INV_NOW_COST$,ERR=NON_NUMERIC)
11200 _X$="CTN_WT",_X=CTN_WT.CTL,CTN_WT=NUM(CTN_WT$,ERR=NON_NUMERIC)
11210 _X$="COMBO_QTY",_X=COMBO_QTY.CTL,COMBO_QTY=NUM(COMBO_QTY$,ERR=NON_NUMERIC)
11220 _X$="SELL_QTY_PER",_X=SELL_QTY_PER.CTL,SELL_QTY_PER=NUM(SELL_QTY_PER$,ERR=NON_NUMERIC)
11230 _X$="SELL_PRICE",_X=SELL_PRICE.CTL,SELL_PRICE=NUM(SELL_PRICE$,ERR=NON_NUMERIC)
11240 _X$="STND_UNIT_COST",_X=STND_UNIT_COST.CTL,STND_UNIT_COST=NUM(STND_UNIT_COST$,ERR=NON_NUMERIC)
11250 _X$="STND_COST_QTY_PER",_X=STND_COST_QTY_PER.CTL,STND_COST_QTY_PER=NUM(STND_COST_QTY_PER$,ERR=NON_NUMERIC)
11260 _X$="PO2_UNUSED_3",_X=PO2_UNUSED_3.CTL,PO2_UNUSED_3=NUM(PO2_UNUSED_3$,ERR=NON_NUMERIC)
11270 _X$="PO2_UNUSED_4",_X=PO2_UNUSED_4.CTL,PO2_UNUSED_4=NUM(PO2_UNUSED_4$,ERR=NON_NUMERIC)
11280 _X$="PO2_UNUSED_5",_X=PO2_UNUSED_5.CTL,PO2_UNUSED_5=NUM(PO2_UNUSED_5$,ERR=NON_NUMERIC)
11290 _X$="PO2_UNUSED_6",_X=PO2_UNUSED_6.CTL,PO2_UNUSED_6=NUM(PO2_UNUSED_6$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 CTN_LABEL_ITEM_CODE$="",ML_UM_DESC$="",ML_UM_DESC1$=""
13030 UPDATE_COSTS$=""
13040 PO2_UNUSED_1$=""
13050 LINE_COMPLETE$=""
13060 IF _CLR_FLG$="R" THEN LINE_NUM$=""
13070 LINE_TYPE$=""
13080 SALES_ORDER_LINE_NUM$=""
13090 SPECIAL_SHIPPING$=""
13100 PLYS$=""
13110 LEFT_RIGHT$=""
13120 PROD_CODE$=""
13130 TF_DESC$=""
13140 STARTING_NUM$=""
13150 UM$=""
13160 SPECS_REQ$=""
13170 IF _CLR_FLG$="R" THEN PO_DIV$=""
13180 IF _CLR_FLG$="R" THEN PO_NUM$=""
13190 CUST_DIV$=""
13200 CUST_CODE$=""
13210 ITEM_CODE$=""
13220 TOP_BOTTOM$=""
13230 JOB_NUM$=""
13240 JOB_DATE$=""
13250 ENDING_NUM$=""
13260 SELL_UM$=""
13270 STORAGE_EXP_DATE$=""
13280 PROD_CODE_OVERRIDE$="",PROD_CODE_DESC$=""
13290 COMM_CODE$=""
13300 STND_COST_UOM$=""
13310 PO2_UNUSED_2$=""
13320 TF_COST=0
13330 OPEN_QTY=0
13340 UM_AMT=0
13350 LABEL_NUM=0
13360 EXT=0
13370 CTN_PACK=0
13380 QTY_RECIEVED_P=0
13390 QTY_RECV_NOW=0
13400 RECV_NOW_COST=0
13410 PREV_INVOICED=0
13420 INVOICE_NOW=0
13430 REAL_QTY_ORDERED=0
13440 QTY_BO=0
13450 RECVD_PREV_EXT=0
13460 RECV_NOW_EXT=0
13470 INV_PREV_EXT=0
13480 INV_NOW_EXT=0
13490 INV_NOW_COST=0
13500 CTN_WT=0
13510 COMBO_QTY=0
13520 SELL_QTY_PER=0
13530 SELL_PRICE=0
13540 STND_UNIT_COST=0
13550 STND_COST_QTY_PER=0
13560 PO2_UNUSED_3=0
13570 PO2_UNUSED_4=0
13580 PO2_UNUSED_5=0
13590 PO2_UNUSED_6=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=ln_but and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=PO_DIV.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=PO_NUM.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",LN_BUT.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",LN_BUT.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR_PO2$(58,"N")
15030 IF _ORIG.CTN_LABEL_ITEM_CODE$=_CUR.CTN_LABEL_ITEM_CODE$ OR CTN_LABEL_ITEM_CODE$=_CUR.CTN_LABEL_ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CTN_LABEL_ITEM_CODE$=CTN_LABEL_ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CTN_L_I_C")+" = "+_CUR.CTN_LABEL_ITEM_CODE$,_CHG_VAR_PO2$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CTN_L_I_C")+" = "+_CUR.CTN_LABEL_ITEM_CODE$
15040 IF _ORIG.UPDATE_COSTS$=_CUR.UPDATE_COSTS$ OR UPDATE_COSTS$=_CUR.UPDATE_COSTS$ THEN GOTO *NEXT ELSE IF _ORIG.UPDATE_COSTS$=UPDATE_COSTS$ THEN _CHG2$=_CHG2$+SEP+MSG("UPDT_COST")+" = "+_CUR.UPDATE_COSTS$,_CHG_VAR_PO2$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UPDT_COST")+" = "+_CUR.UPDATE_COSTS$
15050 IF _ORIG.PO2_UNUSED_1$=_CUR.PO2_UNUSED_1$ OR PO2_UNUSED_1$=_CUR.PO2_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.PO2_UNUSED_1$=PO2_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.PO2_UNUSED_1$,_CHG_VAR_PO2$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.PO2_UNUSED_1$
15060 IF _ORIG.LINE_COMPLETE$=_CUR.LINE_COMPLETE$ OR LINE_COMPLETE$=_CUR.LINE_COMPLETE$ THEN GOTO *NEXT ELSE IF _ORIG.LINE_COMPLETE$=LINE_COMPLETE$ THEN _CHG2$=_CHG2$+SEP+MSG("LINE_C")+" = "+_CUR.LINE_COMPLETE$,_CHG_VAR_PO2$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_C")+" = "+_CUR.LINE_COMPLETE$
15070 IF _ORIG.LINE_NUM$=_CUR.LINE_NUM$ OR LINE_NUM$=_CUR.LINE_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.LINE_NUM$=LINE_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("LINE_NUM")+" = "+_CUR.LINE_NUM$,_CHG_VAR_PO2$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_NUM")+" = "+_CUR.LINE_NUM$
15080 IF _ORIG.LINE_TYPE$=_CUR.LINE_TYPE$ OR LINE_TYPE$=_CUR.LINE_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.LINE_TYPE$=LINE_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("LINE_TYPE")+" = "+_CUR.LINE_TYPE$,_CHG_VAR_PO2$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_TYPE")+" = "+_CUR.LINE_TYPE$
15090 IF _ORIG.SALES_ORDER_LINE_NUM$=_CUR.SALES_ORDER_LINE_NUM$ OR SALES_ORDER_LINE_NUM$=_CUR.SALES_ORDER_LINE_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.SALES_ORDER_LINE_NUM$=SALES_ORDER_LINE_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("SALE_O_L_N")+" = "+_CUR.SALES_ORDER_LINE_NUM$,_CHG_VAR_PO2$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SALE_O_L_N")+" = "+_CUR.SALES_ORDER_LINE_NUM$
15100 IF _ORIG.SPECIAL_SHIPPING$=_CUR.SPECIAL_SHIPPING$ OR SPECIAL_SHIPPING$=_CUR.SPECIAL_SHIPPING$ THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_SHIPPING$=SPECIAL_SHIPPING$ THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_S")+" = "+_CUR.SPECIAL_SHIPPING$,_CHG_VAR_PO2$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_S")+" = "+_CUR.SPECIAL_SHIPPING$
15110 IF _ORIG.PLYS$=_CUR.PLYS$ OR PLYS$=_CUR.PLYS$ THEN GOTO *NEXT ELSE IF _ORIG.PLYS$=PLYS$ THEN _CHG2$=_CHG2$+SEP+MSG("PLYS")+" = "+_CUR.PLYS$,_CHG_VAR_PO2$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PLYS")+" = "+_CUR.PLYS$
15120 IF _ORIG.LEFT_RIGHT$=_CUR.LEFT_RIGHT$ OR LEFT_RIGHT$=_CUR.LEFT_RIGHT$ THEN GOTO *NEXT ELSE IF _ORIG.LEFT_RIGHT$=LEFT_RIGHT$ THEN _CHG2$=_CHG2$+SEP+MSG("LEFT_RIGHT")+" = "+_CUR.LEFT_RIGHT$,_CHG_VAR_PO2$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LEFT_RIGHT")+" = "+_CUR.LEFT_RIGHT$
15130 IF _ORIG.PROD_CODE$=_CUR.PROD_CODE$ OR PROD_CODE$=_CUR.PROD_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PROD_CODE$=PROD_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PROD_CODE")+" = "+_CUR.PROD_CODE$,_CHG_VAR_PO2$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PROD_CODE")+" = "+_CUR.PROD_CODE$
15140 IF _ORIG.TF_DESC$=_CUR.TF_DESC$ OR TF_DESC$=_CUR.TF_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.TF_DESC$=TF_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC")+" = "+_CUR.TF_DESC$,_CHG_VAR_PO2$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC")+" = "+_CUR.TF_DESC$
15150 IF _ORIG.STARTING_NUM$=_CUR.STARTING_NUM$ OR STARTING_NUM$=_CUR.STARTING_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.STARTING_NUM$=STARTING_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("STAR_N")+" = "+_CUR.STARTING_NUM$,_CHG_VAR_PO2$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STAR_N")+" = "+_CUR.STARTING_NUM$
15160 IF _ORIG.UM$=_CUR.UM$ OR UM$=_CUR.UM$ THEN GOTO *NEXT ELSE IF _ORIG.UM$=UM$ THEN _CHG2$=_CHG2$+SEP+MSG("UM")+" = "+_CUR.UM$,_CHG_VAR_PO2$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UM")+" = "+_CUR.UM$
15170 IF _ORIG.SPECS_REQ$=_CUR.SPECS_REQ$ OR SPECS_REQ$=_CUR.SPECS_REQ$ THEN GOTO *NEXT ELSE IF _ORIG.SPECS_REQ$=SPECS_REQ$ THEN _CHG2$=_CHG2$+SEP+MSG("SPECS_REQ")+" = "+_CUR.SPECS_REQ$,_CHG_VAR_PO2$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPECS_REQ")+" = "+_CUR.SPECS_REQ$
15180 IF _ORIG.PO_DIV$=_CUR.PO_DIV$ OR PO_DIV$=_CUR.PO_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.PO_DIV$=PO_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("PO_DIV")+" = "+_CUR.PO_DIV$,_CHG_VAR_PO2$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PO_DIV")+" = "+_CUR.PO_DIV$
15190 IF _ORIG.PO_NUM$=_CUR.PO_NUM$ OR PO_NUM$=_CUR.PO_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.PO_NUM$=PO_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("PO_NUM")+" = "+_CUR.PO_NUM$,_CHG_VAR_PO2$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PO_NUM")+" = "+_CUR.PO_NUM$
15200 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR_PO2$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15210 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR_PO2$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15220 IF _ORIG.ITEM_CODE$=_CUR.ITEM_CODE$ OR ITEM_CODE$=_CUR.ITEM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_CODE$=ITEM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$,_CHG_VAR_PO2$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_CODE")+" = "+_CUR.ITEM_CODE$
15230 IF _ORIG.TOP_BOTTOM$=_CUR.TOP_BOTTOM$ OR TOP_BOTTOM$=_CUR.TOP_BOTTOM$ THEN GOTO *NEXT ELSE IF _ORIG.TOP_BOTTOM$=TOP_BOTTOM$ THEN _CHG2$=_CHG2$+SEP+MSG("TOP_BOTTOM")+" = "+_CUR.TOP_BOTTOM$,_CHG_VAR_PO2$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TOP_BOTTOM")+" = "+_CUR.TOP_BOTTOM$
15240 IF _ORIG.JOB_NUM$=_CUR.JOB_NUM$ OR JOB_NUM$=_CUR.JOB_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.JOB_NUM$=JOB_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("JOB_NUM")+" = "+_CUR.JOB_NUM$,_CHG_VAR_PO2$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("JOB_NUM")+" = "+_CUR.JOB_NUM$
15250 IF _ORIG.JOB_DATE$=_CUR.JOB_DATE$ OR JOB_DATE$=_CUR.JOB_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.JOB_DATE$=JOB_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("JOB_DATE")+" = "+_CUR.JOB_DATE$,_CHG_VAR_PO2$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("JOB_DATE")+" = "+_CUR.JOB_DATE$
15260 IF _ORIG.ENDING_NUM$=_CUR.ENDING_NUM$ OR ENDING_NUM$=_CUR.ENDING_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.ENDING_NUM$=ENDING_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("ENDING_NUM")+" = "+_CUR.ENDING_NUM$,_CHG_VAR_PO2$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ENDING_NUM")+" = "+_CUR.ENDING_NUM$
15270 IF _ORIG.SELL_UM$=_CUR.SELL_UM$ OR SELL_UM$=_CUR.SELL_UM$ THEN GOTO *NEXT ELSE IF _ORIG.SELL_UM$=SELL_UM$ THEN _CHG2$=_CHG2$+SEP+MSG("SELL_UM")+" = "+_CUR.SELL_UM$,_CHG_VAR_PO2$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SELL_UM")+" = "+_CUR.SELL_UM$
15280 IF _ORIG.STORAGE_EXP_DATE$=_CUR.STORAGE_EXP_DATE$ OR STORAGE_EXP_DATE$=_CUR.STORAGE_EXP_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.STORAGE_EXP_DATE$=STORAGE_EXP_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("STOR_E_D")+" = "+_CUR.STORAGE_EXP_DATE$,_CHG_VAR_PO2$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STOR_E_D")+" = "+_CUR.STORAGE_EXP_DATE$
15290 IF _ORIG.PROD_CODE_OVERRIDE$=_CUR.PROD_CODE_OVERRIDE$ OR PROD_CODE_OVERRIDE$=_CUR.PROD_CODE_OVERRIDE$ THEN GOTO *NEXT ELSE IF _ORIG.PROD_CODE_OVERRIDE$=PROD_CODE_OVERRIDE$ THEN _CHG2$=_CHG2$+SEP+MSG("PROD_C_O")+" = "+_CUR.PROD_CODE_OVERRIDE$,_CHG_VAR_PO2$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PROD_C_O")+" = "+_CUR.PROD_CODE_OVERRIDE$
15300 IF _ORIG.COMM_CODE$=_CUR.COMM_CODE$ OR COMM_CODE$=_CUR.COMM_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.COMM_CODE$=COMM_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("COMM_CODE")+" = "+_CUR.COMM_CODE$,_CHG_VAR_PO2$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMM_CODE")+" = "+_CUR.COMM_CODE$
15310 IF _ORIG.STND_COST_UOM$=_CUR.STND_COST_UOM$ OR STND_COST_UOM$=_CUR.STND_COST_UOM$ THEN GOTO *NEXT ELSE IF _ORIG.STND_COST_UOM$=STND_COST_UOM$ THEN _CHG2$=_CHG2$+SEP+MSG("STND_C_U")+" = "+_CUR.STND_COST_UOM$,_CHG_VAR_PO2$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STND_C_U")+" = "+_CUR.STND_COST_UOM$
15320 IF _ORIG.PO2_UNUSED_2$=_CUR.PO2_UNUSED_2$ OR PO2_UNUSED_2$=_CUR.PO2_UNUSED_2$ THEN GOTO *NEXT ELSE IF _ORIG.PO2_UNUSED_2$=PO2_UNUSED_2$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.PO2_UNUSED_2$,_CHG_VAR_PO2$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.PO2_UNUSED_2$
15330 IF _ORIG.TF_COST=_CUR.TF_COST OR TF_COST=_CUR.TF_COST THEN GOTO *NEXT ELSE IF _ORIG.TF_COST=TF_COST THEN _CHG2$=_CHG2$+SEP+MSG("COST")+" = "+STR(_CUR.TF_COST),_CHG_VAR_PO2$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COST")+" = "+STR(_CUR.TF_COST)
15340 IF _ORIG.OPEN_QTY=_CUR.OPEN_QTY OR OPEN_QTY=_CUR.OPEN_QTY THEN GOTO *NEXT ELSE IF _ORIG.OPEN_QTY=OPEN_QTY THEN _CHG2$=_CHG2$+SEP+MSG("OPEN_QTY")+" = "+STR(_CUR.OPEN_QTY),_CHG_VAR_PO2$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OPEN_QTY")+" = "+STR(_CUR.OPEN_QTY)
15350 IF _ORIG.UM_AMT=_CUR.UM_AMT OR UM_AMT=_CUR.UM_AMT THEN GOTO *NEXT ELSE IF _ORIG.UM_AMT=UM_AMT THEN _CHG2$=_CHG2$+SEP+MSG("UM_AMT")+" = "+STR(_CUR.UM_AMT),_CHG_VAR_PO2$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UM_AMT")+" = "+STR(_CUR.UM_AMT)
15360 IF _ORIG.LABEL_NUM=_CUR.LABEL_NUM OR LABEL_NUM=_CUR.LABEL_NUM THEN GOTO *NEXT ELSE IF _ORIG.LABEL_NUM=LABEL_NUM THEN _CHG2$=_CHG2$+SEP+MSG("LABEL_NUM")+" = "+STR(_CUR.LABEL_NUM),_CHG_VAR_PO2$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LABEL_NUM")+" = "+STR(_CUR.LABEL_NUM)
15370 IF _ORIG.EXT=_CUR.EXT OR EXT=_CUR.EXT THEN GOTO *NEXT ELSE IF _ORIG.EXT=EXT THEN _CHG2$=_CHG2$+SEP+MSG("EXT")+" = "+STR(_CUR.EXT),_CHG_VAR_PO2$(35,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EXT")+" = "+STR(_CUR.EXT)
15380 IF _ORIG.CTN_PACK=_CUR.CTN_PACK OR CTN_PACK=_CUR.CTN_PACK THEN GOTO *NEXT ELSE IF _ORIG.CTN_PACK=CTN_PACK THEN _CHG2$=_CHG2$+SEP+MSG("CTN_PACK")+" = "+STR(_CUR.CTN_PACK),_CHG_VAR_PO2$(36,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CTN_PACK")+" = "+STR(_CUR.CTN_PACK)
15390 IF _ORIG.QTY_RECIEVED_P=_CUR.QTY_RECIEVED_P OR QTY_RECIEVED_P=_CUR.QTY_RECIEVED_P THEN GOTO *NEXT ELSE IF _ORIG.QTY_RECIEVED_P=QTY_RECIEVED_P THEN _CHG2$=_CHG2$+SEP+MSG("QTY_R_P")+" = "+STR(_CUR.QTY_RECIEVED_P),_CHG_VAR_PO2$(37,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_R_P")+" = "+STR(_CUR.QTY_RECIEVED_P)
15400 IF _ORIG.QTY_RECV_NOW=_CUR.QTY_RECV_NOW OR QTY_RECV_NOW=_CUR.QTY_RECV_NOW THEN GOTO *NEXT ELSE IF _ORIG.QTY_RECV_NOW=QTY_RECV_NOW THEN _CHG2$=_CHG2$+SEP+MSG("QTY_R_N")+" = "+STR(_CUR.QTY_RECV_NOW),_CHG_VAR_PO2$(38,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_R_N")+" = "+STR(_CUR.QTY_RECV_NOW)
15410 IF _ORIG.RECV_NOW_COST=_CUR.RECV_NOW_COST OR RECV_NOW_COST=_CUR.RECV_NOW_COST THEN GOTO *NEXT ELSE IF _ORIG.RECV_NOW_COST=RECV_NOW_COST THEN _CHG2$=_CHG2$+SEP+MSG("RECV_N_C")+" = "+STR(_CUR.RECV_NOW_COST),_CHG_VAR_PO2$(39,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RECV_N_C")+" = "+STR(_CUR.RECV_NOW_COST)
15420 IF _ORIG.PREV_INVOICED=_CUR.PREV_INVOICED OR PREV_INVOICED=_CUR.PREV_INVOICED THEN GOTO *NEXT ELSE IF _ORIG.PREV_INVOICED=PREV_INVOICED THEN _CHG2$=_CHG2$+SEP+MSG("PREV_I")+" = "+STR(_CUR.PREV_INVOICED),_CHG_VAR_PO2$(40,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PREV_I")+" = "+STR(_CUR.PREV_INVOICED)
15430 IF _ORIG.INVOICE_NOW=_CUR.INVOICE_NOW OR INVOICE_NOW=_CUR.INVOICE_NOW THEN GOTO *NEXT ELSE IF _ORIG.INVOICE_NOW=INVOICE_NOW THEN _CHG2$=_CHG2$+SEP+MSG("INVO_N")+" = "+STR(_CUR.INVOICE_NOW),_CHG_VAR_PO2$(41,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INVO_N")+" = "+STR(_CUR.INVOICE_NOW)
15440 IF _ORIG.REAL_QTY_ORDERED=_CUR.REAL_QTY_ORDERED OR REAL_QTY_ORDERED=_CUR.REAL_QTY_ORDERED THEN GOTO *NEXT ELSE IF _ORIG.REAL_QTY_ORDERED=REAL_QTY_ORDERED THEN _CHG2$=_CHG2$+SEP+MSG("REAL_Q_O")+" = "+STR(_CUR.REAL_QTY_ORDERED),_CHG_VAR_PO2$(42,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("REAL_Q_O")+" = "+STR(_CUR.REAL_QTY_ORDERED)
15450 IF _ORIG.QTY_BO=_CUR.QTY_BO OR QTY_BO=_CUR.QTY_BO THEN GOTO *NEXT ELSE IF _ORIG.QTY_BO=QTY_BO THEN _CHG2$=_CHG2$+SEP+MSG("QTY_BO")+" = "+STR(_CUR.QTY_BO),_CHG_VAR_PO2$(43,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("QTY_BO")+" = "+STR(_CUR.QTY_BO)
15460 IF _ORIG.RECVD_PREV_EXT=_CUR.RECVD_PREV_EXT OR RECVD_PREV_EXT=_CUR.RECVD_PREV_EXT THEN GOTO *NEXT ELSE IF _ORIG.RECVD_PREV_EXT=RECVD_PREV_EXT THEN _CHG2$=_CHG2$+SEP+MSG("RECV_P_E")+" = "+STR(_CUR.RECVD_PREV_EXT),_CHG_VAR_PO2$(44,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RECV_P_E")+" = "+STR(_CUR.RECVD_PREV_EXT)
15470 IF _ORIG.RECV_NOW_EXT=_CUR.RECV_NOW_EXT OR RECV_NOW_EXT=_CUR.RECV_NOW_EXT THEN GOTO *NEXT ELSE IF _ORIG.RECV_NOW_EXT=RECV_NOW_EXT THEN _CHG2$=_CHG2$+SEP+MSG("RECV_N_E")+" = "+STR(_CUR.RECV_NOW_EXT),_CHG_VAR_PO2$(45,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RECV_N_E")+" = "+STR(_CUR.RECV_NOW_EXT)
15480 IF _ORIG.INV_PREV_EXT=_CUR.INV_PREV_EXT OR INV_PREV_EXT=_CUR.INV_PREV_EXT THEN GOTO *NEXT ELSE IF _ORIG.INV_PREV_EXT=INV_PREV_EXT THEN _CHG2$=_CHG2$+SEP+MSG("INV_P_E")+" = "+STR(_CUR.INV_PREV_EXT),_CHG_VAR_PO2$(46,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_P_E")+" = "+STR(_CUR.INV_PREV_EXT)
15490 IF _ORIG.INV_NOW_EXT=_CUR.INV_NOW_EXT OR INV_NOW_EXT=_CUR.INV_NOW_EXT THEN GOTO *NEXT ELSE IF _ORIG.INV_NOW_EXT=INV_NOW_EXT THEN _CHG2$=_CHG2$+SEP+MSG("INV_N_E")+" = "+STR(_CUR.INV_NOW_EXT),_CHG_VAR_PO2$(47,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_N_E")+" = "+STR(_CUR.INV_NOW_EXT)
15500 IF _ORIG.INV_NOW_COST=_CUR.INV_NOW_COST OR INV_NOW_COST=_CUR.INV_NOW_COST THEN GOTO *NEXT ELSE IF _ORIG.INV_NOW_COST=INV_NOW_COST THEN _CHG2$=_CHG2$+SEP+MSG("INV_N_C")+" = "+STR(_CUR.INV_NOW_COST),_CHG_VAR_PO2$(48,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_N_C")+" = "+STR(_CUR.INV_NOW_COST)
15510 IF _ORIG.CTN_WT=_CUR.CTN_WT OR CTN_WT=_CUR.CTN_WT THEN GOTO *NEXT ELSE IF _ORIG.CTN_WT=CTN_WT THEN _CHG2$=_CHG2$+SEP+MSG("CTN_WT")+" = "+STR(_CUR.CTN_WT),_CHG_VAR_PO2$(49,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CTN_WT")+" = "+STR(_CUR.CTN_WT)
15520 IF _ORIG.COMBO_QTY=_CUR.COMBO_QTY OR COMBO_QTY=_CUR.COMBO_QTY THEN GOTO *NEXT ELSE IF _ORIG.COMBO_QTY=COMBO_QTY THEN _CHG2$=_CHG2$+SEP+MSG("COMBO_QTY")+" = "+STR(_CUR.COMBO_QTY),_CHG_VAR_PO2$(50,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COMBO_QTY")+" = "+STR(_CUR.COMBO_QTY)
15530 IF _ORIG.SELL_QTY_PER=_CUR.SELL_QTY_PER OR SELL_QTY_PER=_CUR.SELL_QTY_PER THEN GOTO *NEXT ELSE IF _ORIG.SELL_QTY_PER=SELL_QTY_PER THEN _CHG2$=_CHG2$+SEP+MSG("SELL_Q_P")+" = "+STR(_CUR.SELL_QTY_PER),_CHG_VAR_PO2$(51,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SELL_Q_P")+" = "+STR(_CUR.SELL_QTY_PER)
15540 IF _ORIG.SELL_PRICE=_CUR.SELL_PRICE OR SELL_PRICE=_CUR.SELL_PRICE THEN GOTO *NEXT ELSE IF _ORIG.SELL_PRICE=SELL_PRICE THEN _CHG2$=_CHG2$+SEP+MSG("SELL_PRICE")+" = "+STR(_CUR.SELL_PRICE),_CHG_VAR_PO2$(52,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SELL_PRICE")+" = "+STR(_CUR.SELL_PRICE)
15550 IF _ORIG.STND_UNIT_COST=_CUR.STND_UNIT_COST OR STND_UNIT_COST=_CUR.STND_UNIT_COST THEN GOTO *NEXT ELSE IF _ORIG.STND_UNIT_COST=STND_UNIT_COST THEN _CHG2$=_CHG2$+SEP+MSG("STND_U_C")+" = "+STR(_CUR.STND_UNIT_COST),_CHG_VAR_PO2$(53,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STND_U_C")+" = "+STR(_CUR.STND_UNIT_COST)
15560 IF _ORIG.STND_COST_QTY_PER=_CUR.STND_COST_QTY_PER OR STND_COST_QTY_PER=_CUR.STND_COST_QTY_PER THEN GOTO *NEXT ELSE IF _ORIG.STND_COST_QTY_PER=STND_COST_QTY_PER THEN _CHG2$=_CHG2$+SEP+MSG("STND_C_Q_P")+" = "+STR(_CUR.STND_COST_QTY_PER),_CHG_VAR_PO2$(54,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STND_C_Q_P")+" = "+STR(_CUR.STND_COST_QTY_PER)
15570 IF _ORIG.PO2_UNUSED_3=_CUR.PO2_UNUSED_3 OR PO2_UNUSED_3=_CUR.PO2_UNUSED_3 THEN GOTO *NEXT ELSE IF _ORIG.PO2_UNUSED_3=PO2_UNUSED_3 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.PO2_UNUSED_3),_CHG_VAR_PO2$(55,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.PO2_UNUSED_3)
15580 IF _ORIG.PO2_UNUSED_4=_CUR.PO2_UNUSED_4 OR PO2_UNUSED_4=_CUR.PO2_UNUSED_4 THEN GOTO *NEXT ELSE IF _ORIG.PO2_UNUSED_4=PO2_UNUSED_4 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.PO2_UNUSED_4),_CHG_VAR_PO2$(56,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.PO2_UNUSED_4)
15590 IF _ORIG.PO2_UNUSED_5=_CUR.PO2_UNUSED_5 OR PO2_UNUSED_5=_CUR.PO2_UNUSED_5 THEN GOTO *NEXT ELSE IF _ORIG.PO2_UNUSED_5=PO2_UNUSED_5 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.PO2_UNUSED_5),_CHG_VAR_PO2$(57,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.PO2_UNUSED_5)
15600 IF _ORIG.PO2_UNUSED_6=_CUR.PO2_UNUSED_6 OR PO2_UNUSED_6=_CUR.PO2_UNUSED_6 THEN GOTO *NEXT ELSE IF _ORIG.PO2_UNUSED_6=PO2_UNUSED_6 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.PO2_UNUSED_6),_CHG_VAR_PO2$(58,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.PO2_UNUSED_6)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR_PO2$(1,1)="Y" THEN CTN_LABEL_ITEM_CODE$=_CUR.CTN_LABEL_ITEM_CODE$
16030 IF _CHG_VAR_PO2$(2,1)="Y" THEN UPDATE_COSTS$=_CUR.UPDATE_COSTS$
16040 IF _CHG_VAR_PO2$(3,1)="Y" THEN PO2_UNUSED_1$=_CUR.PO2_UNUSED_1$
16050 IF _CHG_VAR_PO2$(4,1)="Y" THEN LINE_COMPLETE$=_CUR.LINE_COMPLETE$
16060 IF _CHG_VAR_PO2$(5,1)="Y" THEN LINE_NUM$=_CUR.LINE_NUM$
16070 IF _CHG_VAR_PO2$(6,1)="Y" THEN LINE_TYPE$=_CUR.LINE_TYPE$
16080 IF _CHG_VAR_PO2$(7,1)="Y" THEN SALES_ORDER_LINE_NUM$=_CUR.SALES_ORDER_LINE_NUM$
16090 IF _CHG_VAR_PO2$(8,1)="Y" THEN SPECIAL_SHIPPING$=_CUR.SPECIAL_SHIPPING$
16100 IF _CHG_VAR_PO2$(9,1)="Y" THEN PLYS$=_CUR.PLYS$
16110 IF _CHG_VAR_PO2$(10,1)="Y" THEN LEFT_RIGHT$=_CUR.LEFT_RIGHT$
16120 IF _CHG_VAR_PO2$(11,1)="Y" THEN PROD_CODE$=_CUR.PROD_CODE$
16130 IF _CHG_VAR_PO2$(12,1)="Y" THEN TF_DESC$=_CUR.TF_DESC$
16140 IF _CHG_VAR_PO2$(13,1)="Y" THEN STARTING_NUM$=_CUR.STARTING_NUM$
16150 IF _CHG_VAR_PO2$(14,1)="Y" THEN UM$=_CUR.UM$
16160 IF _CHG_VAR_PO2$(15,1)="Y" THEN SPECS_REQ$=_CUR.SPECS_REQ$
16170 IF _CHG_VAR_PO2$(16,1)="Y" THEN PO_DIV$=_CUR.PO_DIV$
16180 IF _CHG_VAR_PO2$(17,1)="Y" THEN PO_NUM$=_CUR.PO_NUM$
16190 IF _CHG_VAR_PO2$(18,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16200 IF _CHG_VAR_PO2$(19,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16210 IF _CHG_VAR_PO2$(20,1)="Y" THEN ITEM_CODE$=_CUR.ITEM_CODE$
16220 IF _CHG_VAR_PO2$(21,1)="Y" THEN TOP_BOTTOM$=_CUR.TOP_BOTTOM$
16230 IF _CHG_VAR_PO2$(22,1)="Y" THEN JOB_NUM$=_CUR.JOB_NUM$
16240 IF _CHG_VAR_PO2$(23,1)="Y" THEN JOB_DATE$=_CUR.JOB_DATE$
16250 IF _CHG_VAR_PO2$(24,1)="Y" THEN ENDING_NUM$=_CUR.ENDING_NUM$
16260 IF _CHG_VAR_PO2$(25,1)="Y" THEN SELL_UM$=_CUR.SELL_UM$
16270 IF _CHG_VAR_PO2$(26,1)="Y" THEN STORAGE_EXP_DATE$=_CUR.STORAGE_EXP_DATE$
16280 IF _CHG_VAR_PO2$(27,1)="Y" THEN PROD_CODE_OVERRIDE$=_CUR.PROD_CODE_OVERRIDE$
16290 IF _CHG_VAR_PO2$(28,1)="Y" THEN COMM_CODE$=_CUR.COMM_CODE$
16300 IF _CHG_VAR_PO2$(29,1)="Y" THEN STND_COST_UOM$=_CUR.STND_COST_UOM$
16310 IF _CHG_VAR_PO2$(30,1)="Y" THEN PO2_UNUSED_2$=_CUR.PO2_UNUSED_2$
16320 IF _CHG_VAR_PO2$(31,1)="Y" THEN TF_COST=_CUR.TF_COST
16330 IF _CHG_VAR_PO2$(32,1)="Y" THEN OPEN_QTY=_CUR.OPEN_QTY
16340 IF _CHG_VAR_PO2$(33,1)="Y" THEN UM_AMT=_CUR.UM_AMT
16350 IF _CHG_VAR_PO2$(34,1)="Y" THEN LABEL_NUM=_CUR.LABEL_NUM
16360 IF _CHG_VAR_PO2$(35,1)="Y" THEN EXT=_CUR.EXT
16370 IF _CHG_VAR_PO2$(36,1)="Y" THEN CTN_PACK=_CUR.CTN_PACK
16380 IF _CHG_VAR_PO2$(37,1)="Y" THEN QTY_RECIEVED_P=_CUR.QTY_RECIEVED_P
16390 IF _CHG_VAR_PO2$(38,1)="Y" THEN QTY_RECV_NOW=_CUR.QTY_RECV_NOW
16400 IF _CHG_VAR_PO2$(39,1)="Y" THEN RECV_NOW_COST=_CUR.RECV_NOW_COST
16410 IF _CHG_VAR_PO2$(40,1)="Y" THEN PREV_INVOICED=_CUR.PREV_INVOICED
16420 IF _CHG_VAR_PO2$(41,1)="Y" THEN INVOICE_NOW=_CUR.INVOICE_NOW
16430 IF _CHG_VAR_PO2$(42,1)="Y" THEN REAL_QTY_ORDERED=_CUR.REAL_QTY_ORDERED
16440 IF _CHG_VAR_PO2$(43,1)="Y" THEN QTY_BO=_CUR.QTY_BO
16450 IF _CHG_VAR_PO2$(44,1)="Y" THEN RECVD_PREV_EXT=_CUR.RECVD_PREV_EXT
16460 IF _CHG_VAR_PO2$(45,1)="Y" THEN RECV_NOW_EXT=_CUR.RECV_NOW_EXT
16470 IF _CHG_VAR_PO2$(46,1)="Y" THEN INV_PREV_EXT=_CUR.INV_PREV_EXT
16480 IF _CHG_VAR_PO2$(47,1)="Y" THEN INV_NOW_EXT=_CUR.INV_NOW_EXT
16490 IF _CHG_VAR_PO2$(48,1)="Y" THEN INV_NOW_COST=_CUR.INV_NOW_COST
16500 IF _CHG_VAR_PO2$(49,1)="Y" THEN CTN_WT=_CUR.CTN_WT
16510 IF _CHG_VAR_PO2$(50,1)="Y" THEN COMBO_QTY=_CUR.COMBO_QTY
16520 IF _CHG_VAR_PO2$(51,1)="Y" THEN SELL_QTY_PER=_CUR.SELL_QTY_PER
16530 IF _CHG_VAR_PO2$(52,1)="Y" THEN SELL_PRICE=_CUR.SELL_PRICE
16540 IF _CHG_VAR_PO2$(53,1)="Y" THEN STND_UNIT_COST=_CUR.STND_UNIT_COST
16550 IF _CHG_VAR_PO2$(54,1)="Y" THEN STND_COST_QTY_PER=_CUR.STND_COST_QTY_PER
16560 IF _CHG_VAR_PO2$(55,1)="Y" THEN PO2_UNUSED_3=_CUR.PO2_UNUSED_3
16570 IF _CHG_VAR_PO2$(56,1)="Y" THEN PO2_UNUSED_4=_CUR.PO2_UNUSED_4
16580 IF _CHG_VAR_PO2$(57,1)="Y" THEN PO2_UNUSED_5=_CUR.PO2_UNUSED_5
16590 IF _CHG_VAR_PO2$(58,1)="Y" THEN PO2_UNUSED_6=_CUR.PO2_UNUSED_6
16990 RETURN 
17000 SEL_PROD_CODE_OVER: ML_PROD_CODE_DESC$=""
17010 PROD_CODE_OVERRIDE$=PAD(PROD_CODE_OVERRIDE$,3,0,"0")
17020 FIND (_FMP,KEY="T"+PROD_CODE_OVERRIDE$,DOM=NO_FMP)FMP$
17030 PROD_CODE_DESC$=FMP$(5,12),REFRESH_FLG=1
17040 RETURN 
17050 NO_FMP:
17055 PROD_CODE_DESC$=""
17058 IF FLAG THEN RETURN 
17060 PROD_CODE_DESC$="** "+MSG("NOF")+" **"
17070 NEXT_ID=PROD_CODE_OVERRIDE.CTL,PROD_CODE_OVERRIDE$="",REFRESH_FLG=1
17080 RETURN 
17100 SEL_COMM_CODE: ML_COMM_DESC$=""
17110 COMM_CODE$=PAD(COMM_CODE$,5,0,"0")
17120 FIND (_AR4,KEY=COMM_CODE$,DOM=NO_AR4)AR4$
17130 ML_COMM_DESC$=STP(AR4$(6,25)),REFRESH_FLG=1
17140 RETURN 
17170 NO_AR4:
17180 IF FLAG THEN ML_COMM_DESC$=""; RETURN 
17190 ",COMM_CODE$="",REFRESH_FLG=1"
17200 RETURN 
17300 UM:
17310 FIND (_ZZP,KEY="U/M"+UM_CODE$,DOM=NO_UM)UM_DESC$,UM_AMT1
17320 UM_DESC$=UM_DESC$(8,12),REFRESH_FLG=1
17330 RETURN 
17350 NO_UM:
17355 IF FLAG=1 THEN UM_DESC$=""; RETURN 
17360 UM_DESC$="*** "+MSG("NOF")+" ***",REFRESH_FLG=1
17370 UM_CODE$=""
17380 RETURN 
17400 SEL_UM:
17405 UM$=PAD(UM$,4," ")
17410 FLAG=0,REFRESH_FLG=1,UM_CODE$=UM$; GOSUB UM
17420 ML_UM_DESC1$=UM_DESC$,UM_AMT=UM_AMT1,UM_AMT$=STR(UM_AMT)
17430 RETURN 
17450 SEL_STND_UM:
17460 STND_COST_UOM$=PAD(STND_COST_UOM$,4," ")
17470 FLAG=0,REFRESH_FLG=1,UM_CODE$=STND_COST_UOM$; GOSUB UM
17480 ML_UM_DESC$=UM_DESC$
17490 RETURN 
17500 SEL_ITEM_CODE: REFRESH_FLG=1
17510 ITEM_CODE$=PAD(ITEM_CODE$,10," ")
17520 FIND (_IC0,KEY=CUSTOMER$+ITEM_CODE$,DOM=NO_ITEM)IC0$
17530 PROD_CODE$=IC0$(61,3),LEFT_RIGHT$=IC0$(64,8),TOP_BUTTON$=IC0$(72,8),PLYS$=IC0$(80,2),TF_DESC$=IC0$(21,40)
17540 RETURN 
17550 NO_ITEM:
17560 ITEM_CODE$=""
17570 RETURN 
17800 SEL_CUSTOMER: REFRESH_FLG=1,CUST_NAME$=""
17810 CUSTOMER$=PAD(STP(CUSTOMER$),10,"0")
17815 IF STP(CUSTOMER$)="" THEN GOTO NXT
17820 FIND (_AR1,KEY=CUSTOMER$,DOM=NO_AR1)AR1$
17822 CUST_NAME$=AR1$(11,30)
17825 NXT:
17830 %CUSTOMER$=CUSTOMER$,CUST_DIV$=CUSTOMER$(1,%AR_DIV_LEN),CUST_CODE$=CUSTOMER$(%AR_DIV_LEN+1)
17840 RETURN 
17850 NO_AR1:
17860 CUSTOMER$="          ",CUST_NAME$=""; RETURN 
17900 SEL_QRY:
17910 SWITCH LINE_TYPE$
17920 CASE "I"
17930 PROCESS "QRY_IC0.1.2","../ICG/IC.EN",VAL$
17940 IF VAL$<>"" THEN ITEM_CODE$=VAL$; GOSUB SEL_ITEM_CODE
17945 REFRESH_FLG=1
17950 BREAK
17960 CASE "S"
17970 PROCESS "QRY_FMPX","../FMG/FM.EN",VAL$
17975 IF VAL$<>"" THEN ITEM_CODE$=VAL$; GOSUB SEL_SPECIAL
17990 END SWITCH 
17995 RETURN 
18000 SEL_SPECIAL: REFRESH_FLG=1
18010 ITEM_CODE$=PAD(ITEM_CODE$,10," ")
18020 FIND (_FMP,KEY="X"+ITEM_CODE$,DOM=NO_SPECIAL)FMP$,UM_AMT
18030 UM_AMT$=STR(UM_AMT),PROD_CODE$=FMP$(52,3),TF_DESC$=FMP$(12,40),UM$=FMP$(55,4),PLYS$=""; GOSUB SEL_UM
18050 RETURN 
18060 NO_SPECIAL:
18100 SEL_LINE_TYPE:
18110 IF LINE_TYPE$="S" THEN CALL "*WINGRP;HIDE",OVER.GRP$; CALL "*WINGRP;UNLOCK",SPL.GRP$ ELSE CALL "*WINGRP;LOCK",SPL.GRP$; CALL "*WINGRP;SHOW",OVER.GRP$
18150 RETURN 
18200 SEL_PROD_CODE: REFRESH_FLG=1
18210 PROD_CODE$=PAD(PROD_CODE$,3,0,"0")
18220 READ (_FMP,KEY="T"+PROD_CODE$,DOM=NO_PROD)PC$
18230 RETURN 
18260 NO_PROD:
18270 PROD_CODE$=""; RETURN 
56000 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
