0010 ! ECGFAA - Extended Warehouse Groups Setup
0035 REM "5.7 - 02/19/20 - 9.402222 - tma - SSP# 307252
0037 REM "307252-Warehouse groups bug (DBSPT-80632)                          
0040 REM "Copyright 2020 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "ECGFAA","../ECG/EC.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="EDC"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0181 _FM1=HFN; _FILE_NAME$="FM1"+%C$; OPEN (_FM1,ERR=OPEN_ERR)_FILE_NAME$
0182 _IC0=HFN; _FILE_NAME$="IC0"+%C$; OPEN (_IC0,ERR=OPEN_ERR)_FILE_NAME$
0185 _ECA=HFN; _FILE_NAME$="ECA"+%C$; OPEN (_ECA,ERR=OPEN_ERR)_FILE_NAME$
0186 _ECR=HFN; _FILE_NAME$="ECR"+%C$; OPEN (_ECR,ERR=OPEN_ERR)_FILE_NAME$
0187 _ECS=HFN; _FILE_NAME$="ECS"+%C$; OPEN (_ECS,ERR=OPEN_ERR)_FILE_NAME$
0188 _ZZP=HFN; _FILE_NAME$="ZZPARM"; OPEN (_ZZP,ERR=OPEN_ERR)_FILE_NAME$; DIM ECPARM$(1000); READ (_ZZP,KEY=%X3$(9,3)+"E/C",DOM=*NEXT)ECPARM$; IF ECPARM$(708,1)<>"Y" THEN MSGBOX "Feature not licenced",MSG("WARNING"),"STOP,TIM=5"; CMD_STR$="E"
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=2
0430 DIM _KEYS$[1:2]; _KEYS$[1]="TF_TYPE$",_KEYS$[2]="SET_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 CLOSE (_ECA),(_ECR),(_ECS),(_ZZP),(_FM1),(_IC0)
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1105 ! IF POS(TF_TYPE$="CI")<>0 THEN NEXT_ID=CUSTOMER.CTL
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 IF NUL(SET_CODE$) THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1280 NEW$="YES"
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YesNo",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 ACTION$="Delete"; IF TF_TYPE$="B" THEN GOSUB 17150 ELSE GOSUB UPDATE
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0,_CLR_FLG$="R"; GOSUB CLEAR_REC
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3062 IF TF_TYPE$="C" THEN CUSTOMER$=MID(SET_CODE$,1,10)
3065 IF TF_TYPE$="I" THEN CUSTOMER$=MID(SET_CODE$,1,10),ITEM_CODE$=MID(SET_CODE$,11,10); GOSUB SEL_ITEM_CODE
3066 NEXT_ID=TF_DESCRIPTION.CTL
3067 IF TF_TYPE$="B" AND LEN(SET_CODE$)>15 THEN SET_CODE$=SET_CODE$(1,15),SET_CODE.CTL'VALUE$=SET_CODE$; READ (_ECA,KEY=SET_CODE$,DOM=*NEXT)ECA$; %EC_BUYER_NAME$=ECA$(16,35),%EC_BUYER_NAME.CTL'VALUE$=ECA$(16,35)
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3330 ACTION$="Write"; IF TF_TYPE$="B" THEN GOSUB UPDATE_TYPE_B ELSE GOSUB UPDATE
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1; _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=TF_TYPE.CTL,_FIRST_FIELD=TF_DESCRIPTION.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13015 IF _CLR_FLG$="R" AND TF_TYPE$="B" THEN SET_CODE.CTL'VALUE$=""
13020 IF _CLR_FLG$="R" THEN TF_TYPE$=""
13030 IF _CLR_FLG$="R" THEN SET_CODE$=""; CUSTOMER$="",%CUSTOMER$="",ITEM_CODE$="",%EC_BUYER_NAME$="",%ITEM_DESC$="" ! SSP238088 jdf
13040 TF_DESCRIPTION$="",NEW$=""
13050 EDC_UNUSED_1$=""
13060 WHSE_01$=""
13070 WHSE_02$=""
13080 WHSE_03$=""
13090 WHSE_04$=""
13100 WHSE_05$=""
13110 WHSE_06$=""
13120 WHSE_07$=""
13130 WHSE_08$=""
13140 WHSE_09$=""
13150 WHSE_10$=""
13160 WHSE_11$=""
13170 WHSE_12$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=SET_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(16,"N")
15030 IF _ORIG.TF_TYPE$=_CUR.TF_TYPE$ OR TF_TYPE$=_CUR.TF_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.TF_TYPE$=TF_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("TYPE")+" = "+_CUR.TF_TYPE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TYPE")+" = "+_CUR.TF_TYPE$
15040 IF _ORIG.SET_CODE$=_CUR.SET_CODE$ OR SET_CODE$=_CUR.SET_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.SET_CODE$=SET_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("SET_CODE")+" = "+_CUR.SET_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SET_CODE")+" = "+_CUR.SET_CODE$
15050 IF _ORIG.TF_DESCRIPTION$=_CUR.TF_DESCRIPTION$ OR TF_DESCRIPTION$=_CUR.TF_DESCRIPTION$ THEN GOTO *NEXT ELSE IF _ORIG.TF_DESCRIPTION$=TF_DESCRIPTION$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC")+" = "+_CUR.TF_DESCRIPTION$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC")+" = "+_CUR.TF_DESCRIPTION$
15060 IF _ORIG.EDC_UNUSED_1$=_CUR.EDC_UNUSED_1$ OR EDC_UNUSED_1$=_CUR.EDC_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.EDC_UNUSED_1$=EDC_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.EDC_UNUSED_1$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.EDC_UNUSED_1$
15070 IF _ORIG.WHSE_01$=_CUR.WHSE_01$ OR WHSE_01$=_CUR.WHSE_01$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE_01$=WHSE_01$ THEN _CHG2$=_CHG2$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_01$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_01$
15080 IF _ORIG.WHSE_02$=_CUR.WHSE_02$ OR WHSE_02$=_CUR.WHSE_02$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE_02$=WHSE_02$ THEN _CHG2$=_CHG2$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_02$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_02$
15090 IF _ORIG.WHSE_03$=_CUR.WHSE_03$ OR WHSE_03$=_CUR.WHSE_03$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE_03$=WHSE_03$ THEN _CHG2$=_CHG2$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_03$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_03$
15100 IF _ORIG.WHSE_04$=_CUR.WHSE_04$ OR WHSE_04$=_CUR.WHSE_04$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE_04$=WHSE_04$ THEN _CHG2$=_CHG2$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_04$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_04$
15110 IF _ORIG.WHSE_05$=_CUR.WHSE_05$ OR WHSE_05$=_CUR.WHSE_05$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE_05$=WHSE_05$ THEN _CHG2$=_CHG2$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_05$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_05$
15120 IF _ORIG.WHSE_06$=_CUR.WHSE_06$ OR WHSE_06$=_CUR.WHSE_06$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE_06$=WHSE_06$ THEN _CHG2$=_CHG2$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_06$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_06$
15130 IF _ORIG.WHSE_07$=_CUR.WHSE_07$ OR WHSE_07$=_CUR.WHSE_07$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE_07$=WHSE_07$ THEN _CHG2$=_CHG2$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_07$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_07$
15140 IF _ORIG.WHSE_08$=_CUR.WHSE_08$ OR WHSE_08$=_CUR.WHSE_08$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE_08$=WHSE_08$ THEN _CHG2$=_CHG2$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_08$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_08$
15150 IF _ORIG.WHSE_09$=_CUR.WHSE_09$ OR WHSE_09$=_CUR.WHSE_09$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE_09$=WHSE_09$ THEN _CHG2$=_CHG2$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_09$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_09$
15160 IF _ORIG.WHSE_10$=_CUR.WHSE_10$ OR WHSE_10$=_CUR.WHSE_10$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE_10$=WHSE_10$ THEN _CHG2$=_CHG2$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_10$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_10$
15170 IF _ORIG.WHSE_11$=_CUR.WHSE_11$ OR WHSE_11$=_CUR.WHSE_11$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE_11$=WHSE_11$ THEN _CHG2$=_CHG2$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_11$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_11$
15180 IF _ORIG.WHSE_12$=_CUR.WHSE_12$ OR WHSE_12$=_CUR.WHSE_12$ THEN GOTO *NEXT ELSE IF _ORIG.WHSE_12$=WHSE_12$ THEN _CHG2$=_CHG2$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_12$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WHSE")+" = "+_CUR.WHSE_12$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN TF_TYPE$=_CUR.TF_TYPE$
16030 IF _CHG_VAR$(2,1)="Y" THEN SET_CODE$=_CUR.SET_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN TF_DESCRIPTION$=_CUR.TF_DESCRIPTION$
16050 IF _CHG_VAR$(4,1)="Y" THEN EDC_UNUSED_1$=_CUR.EDC_UNUSED_1$
16060 IF _CHG_VAR$(5,1)="Y" THEN WHSE_01$=_CUR.WHSE_01$
16070 IF _CHG_VAR$(6,1)="Y" THEN WHSE_02$=_CUR.WHSE_02$
16080 IF _CHG_VAR$(7,1)="Y" THEN WHSE_03$=_CUR.WHSE_03$
16090 IF _CHG_VAR$(8,1)="Y" THEN WHSE_04$=_CUR.WHSE_04$
16100 IF _CHG_VAR$(9,1)="Y" THEN WHSE_05$=_CUR.WHSE_05$
16110 IF _CHG_VAR$(10,1)="Y" THEN WHSE_06$=_CUR.WHSE_06$
16120 IF _CHG_VAR$(11,1)="Y" THEN WHSE_07$=_CUR.WHSE_07$
16130 IF _CHG_VAR$(12,1)="Y" THEN WHSE_08$=_CUR.WHSE_08$
16140 IF _CHG_VAR$(13,1)="Y" THEN WHSE_09$=_CUR.WHSE_09$
16150 IF _CHG_VAR$(14,1)="Y" THEN WHSE_10$=_CUR.WHSE_10$
16160 IF _CHG_VAR$(15,1)="Y" THEN WHSE_11$=_CUR.WHSE_11$
16170 IF _CHG_VAR$(16,1)="Y" THEN WHSE_12$=_CUR.WHSE_12$
16990 RETURN 
17000 SEL_QRY: VAL$=""
17010 PROCESS "QRY_EDC","../ECG/EC.EN",VAL$; IF STP(VAL$)="" THEN RETURN 
17020 TF_TYPE$=VAL$(1,1),SET_CODE$=VAL$(2),_KEY$=VAL$
17030 GOTO 1070
17100 ! 
17110 UPDATE_TYPE_B:
17120 ! Update B type to buyer record if prompted to do so, WO182124
17130 ! 
17140 MSGBOX "Update "+STP(SET_CODE$(1,15))+" "+%EC_BUYER_NAME$+SEP+" buyer parameters with this warehouse group",MSG("CONFIRMING"),"?,YESNO",OPT$
17145 IF OPT$="NO" THEN RETURN 
17150 EXTRACT RECORD (_ECA,KEY=SET_CODE$(1,15))ECA$
17160 IF ACTION$="Write" THEN ECA$(1008,21)=TF_TYPE$+SET_CODE$ ELSE ECA$(1008,21)=DIM(21)
17170 WRITE RECORD (_ECA,KEY=SET_CODE$(1,15))ECA$
17180 RETURN 
18000 SEL_RECORD:
18010 ENTER TF_TYPE$,CODE$
18020 IF TF_TYPE$="C" THEN %TYPE$="Customer",%CODE$=FN%ZZDISP$(CODE$,"A/R"); EXIT 
18030 IF TF_TYPE$="I" THEN %TYPE$="Item",%CODE$=FN%ZZDISP$(MID(CODE$,1,10),"A/R")+" / "+MID(CODE$,11,10); EXIT 
18040 IF TF_TYPE$="G" THEN %TYPE$="Generic",%CODE$=CODE$; EXIT 
18050 IF TF_TYPE$="B" THEN %TYPE$="Buyer",%CODE$=CODE$; EXIT 
18060 EXIT 123
19000 ! 
19005 UPDATE:
19010 ! Updating WebEC item parameters
19020 PRINT 'SIZE'(80,1),
19025 %ACTION$=ACTION$
19030 PRINT 'MESSAGE'('_RED'+'WHITE'+MSG("ECGFAA_M01"),0),
19040 CALL "EC3UTA",%X3$,%X4$,_KEY$,""
19050 IF TF_TYPE$<>"I" THEN GOTO UPDATE_CUSTOMER
19055 IF ACTION$="Delete" THEN GOTO END_UPDATE ! SSP#307252,DBSPT-80632
19060 MSGBOX "Update "+SET_CODE$(11)+" "+%ITEM_DESC$+SEP+"Item parameters with this warehouse group",MSG("CONFIRMING"),"?,YESNO",OPT$
19070 IF OPT$="NO" THEN GOTO UPDATE_CUSTOMER
19080 DIM ECR$(1000); EXTRACT (_ECR,KEY=MID(SET_CODE$,1,20),DOM=*NEXT)ECR$; GOTO 19120 ! SSP238088 jdf
19085 IF ACTION$="Delete" THEN GOTO UPDATE_CUSTOMER
19090 MSGBOX "Item parameters record not on file"+SEP+SEP+"Do you wish to create",MSG("CONFIRMING"),"?,YESNO",OPT$
19100 IF OPT$="NO" THEN GOTO UPDATE_CUSTOMER
19110 ECR$(1,20)=SET_CODE$
19120 ECR$(304,21)=TF_TYPE$+SET_CODE$,ECR$(256,28)=WHSE_01$+WHSE_02$+WHSE_03$+WHSE_04$+WHSE_05$+WHSE_06$+WHSE_07$+WHSE_08$+WHSE_09$+WHSE_10$+WHSE_11$+WHSE_12$
19130 WRITE (_ECR,KEY=ECR$(1,20))ECR$
19200 UPDATE_CUSTOMER:
19210 ! 
19220 IF TF_TYPE$<>"C" THEN GOTO END_UPDATE
19225 IF ACTION$="Delete" THEN GOTO 19250
19230 MSGBOX "Update Customer : "+FN%ZZDISP$(CUSTOMER$,"A/R")+" "+%CUST_NAME$+SEP+"parameters record with this warehouse group",MSG("CONFIRMING"),"?,YESNO",OPT$
19240 IF OPT$="NO" THEN GOTO END_UPDATE
19250 EXTRACT RECORD (_ECS,KEY=SET_CODE$(1,10),DOM=*NEXT)ECS$; GOTO 19310
19255 IF ACTION$="Delete" THEN GOTO 19330
19260 MSGBOX "Customer : "+FN%ZZDISP$(CUSTOMER$,"A/R")+" "+%CUST_NAME$+SEP+"parameters do no exist"+SEP+SEP+"Do you wish to create now",MSG("CONFIRMING"),"?,YESNO",OPT$
19270 IF OPT$="NO" THEN GOTO END_UPDATE
19280 _C$=CUSTOMER$; PROCESS "ECGAR1","../ECG/EC.EN",_C$
19300 GOTO 19250
19310 IF ACTION$="Delete" THEN ECS$(515,21)=DIM(21) ELSE ECS$(515,21)=TF_TYPE$+SET_CODE$
19320 WRITE RECORD (_ECS,KEY=ECS$(1,10))ECS$
19330 IF ACTION$="Delete" THEN MSGBOX "Deleted warehouse group have been cleared from customer parameters",MSG("CONFIRMING"),"!,TIM=5"
19440 END_UPDATE:PRINT 'MESSAGE'("End Update..",0),'MESSAGE'('F8'+'BLACK'+" ",0),'SIZE'(80,23),; RETURN 
20000 SEL_ITEM_CODE: REFRESH_FLG=1
20005 %ITEM_DESC$="" ! SSP238088 jdf
20010 READ (_FM1,KEY=CUSTOMER$+ITEM_CODE$,DOM=READ_IC0)FM1$
20020 %ITEM_DESC$=FM1$(42,40),%ITEM_DESC.CTL'VALUE$=%ITEM_DESC$
20030 RETURN 
20100 READ_IC0:
20110 READ (_IC0,KEY=CUSTOMER$+ITEM_CODE$,DOM=NO_INVE)IC0$
20120 %ITEM_DESC$=IC0$(21,40),%ITEM_DESC.CTL'VALUE$=%ITEM_DESC$
20130 RETURN 
20200 NO_INVE:RETURN 
56000 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56001 REM "221551-Oracle related changes broke some GUI maintanance pgms.     
56002 REM "238088-Warehouse group sets, cannot setup a group by item          
56003 REM "307252-Warehouse groups bug (DBSPT-80632)                          
