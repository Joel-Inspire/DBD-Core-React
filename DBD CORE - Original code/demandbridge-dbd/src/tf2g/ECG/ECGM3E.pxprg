0010 ! ECGM3E - EC Order RC Number
0035 REM "5.7 - 05/30/14 - 17.576388 - dmm - SSP# 267865
0037 REM "267865-New fields and tags for EC Order Status Detail so user can  
0040 REM "Copyright 2014 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "ECGM3E","../ECG/EC.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="EDW"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0182 _FT3=HFN,_FILE_NAME$="FT3"+%C$; OPEN (_FT3,IOL=*,REC=FT3$)_FILE_NAME$
0185 _FT4=HFN,_FILE_NAME$="FT4"+%C$; OPEN (_FT4,IOL=*,REC=FT4$)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=2
0430 DIM _KEYS$[1:2]; _KEYS$[1]="ORDER$",_KEYS$[2]="ORDER_LINE_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC; GOSUB BUTTONS_UP
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 CLOSE (_FT3),(_FT4)
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1012 CALL "ZZWLKU;PARSE_ORD",ORDER$,ORDER_DIV$,ORDER_NUM$; ORDER$=ORDER_DIV$+ORDER_NUM$
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1021 IF ID$="ORDER" THEN GOSUB GET_ORDER_HEADER ELSE GOSUB GET_ORDER_LINE
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=RC_NUM.CTL
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",ANSWER$
1230 IF ANSWER$="NO" THEN GOTO CLEAR_REC
1250 ! _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=RC_NUM.CTL
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0,_CLR_FLG$="R"; GOSUB CLEAR_REC
1480 NEXT_ID=ORDER.CTL
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0,_CLR_FLG$="R"; GOSUB CLEAR_REC
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3061 ORDER$=ORDER_DIV$+ORDER_NUM$
3065 GOSUB GET_ORDER_HEADER; GOSUB GET_ORDER_LINE
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=ORDER.CTL,_FIRST_FIELD=RC_NUM.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 EDW_UNUSED_1$=STR(EDW_UNUSED_1)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="EDW_UNUSED_1",_X=EDW_UNUSED_1.CTL,EDW_UNUSED_1=NUM(EDW_UNUSED_1$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN ORDER_DIV$=""
13030 IF _CLR_FLG$="R" THEN ORDER_NUM$="",ORDER$=""
13040 IF _CLR_FLG$="R" THEN ORDER_LINE_NUM$=""
13050 RC_NUM$=""
13055 EXT_LINE_NUM$="" ! SSP221299
13057 EXT_FIELD_1$="",EXT_FIELD_2$="" ! WO257735
13058 STATUS$="",STATUS_ID$="",STATUS_DATE$="",STATUS_TIME$="" ! WO267865
13060 EDW_UNUSED$=""
13070 EDW_UNUSED_1=0
13080 DAT$="",CUST$="",CUST_PO$=""; CALL "*WINGRP;HIDE",ORD_HEADER.GRP$
13090 UM$="",FT4.OPE_QTY=0,FT4.SELL_PRICE_EXT=0,FT4.ITEM_CODE$="",FT4.TF_DESC$=""
13980 GOSUB NUM_TO_STR; GOSUB BUTTONS_UP
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; ELSE CALL "*wingrp;Disable",KEY2.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(13,"N") ! SSP221299, WO257735, WO267865
15030 IF _ORIG.ORDER_DIV$=_CUR.ORDER_DIV$ OR ORDER_DIV$=_CUR.ORDER_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_DIV$=ORDER_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_DIV")+" = "+_CUR.ORDER_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_DIV")+" = "+_CUR.ORDER_DIV$
15040 IF _ORIG.ORDER_NUM$=_CUR.ORDER_NUM$ OR ORDER_NUM$=_CUR.ORDER_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_NUM$=ORDER_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDER_NUM")+" = "+_CUR.ORDER_NUM$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDER_NUM")+" = "+_CUR.ORDER_NUM$
15050 IF _ORIG.ORDER_LINE_NUM$=_CUR.ORDER_LINE_NUM$ OR ORDER_LINE_NUM$=_CUR.ORDER_LINE_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.ORDER_LINE_NUM$=ORDER_LINE_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("ORDE_L_N")+" = "+_CUR.ORDER_LINE_NUM$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ORDE_L_N")+" = "+_CUR.ORDER_LINE_NUM$
15060 IF _ORIG.RC_NUM$=_CUR.RC_NUM$ OR RC_NUM$=_CUR.RC_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.RC_NUM$=RC_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("RC_NUM")+" = "+_CUR.RC_NUM$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RC_NUM")+" = "+_CUR.RC_NUM$
15065 IF _ORIG.EXT_LINE_NUM$=_CUR.EXT_LINE_NUM$ OR EXT_LINE_NUM$=_CUR.EXT_LINE_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.EXT_LINE_NUM$=EXT_LINE_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("EXT_LINE")+" = "+_CUR.EXT_LINE_NUM$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EXT_LINE")+" = "+_CUR.EXT_LINE_NUM$ ! SSP221299
15066 IF _ORIG.EXT_FIELD_1$=_CUR.EXT_FIELD_1$ OR EXT_FIELD_1$=_CUR.EXT_FIELD_1$ THEN GOTO *NEXT ELSE IF _ORIG.EXT_FIELD_1$=EXT_FIELD_1$ THEN _CHG2$=_CHG2$+SEP+MSG("EXT_FLD_1")+" = "+_CUR.EXT_FIELD_1$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EXT_FLD_1")+" = "+_CUR.EXT_FIELD_1$ ! WO257735
15067 IF _ORIG.EXT_FIELD_2$=_CUR.EXT_FIELD_2$ OR EXT_FIELD_2$=_CUR.EXT_FIELD_2$ THEN GOTO *NEXT ELSE IF _ORIG.EXT_FIELD_2$=EXT_FIELD_2$ THEN _CHG2$=_CHG2$+SEP+MSG("EXT_FLD_2")+" = "+_CUR.EXT_FIELD_2$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EXT_FLD_2")+" = "+_CUR.EXT_FIELD_2$ ! WO257735
15070 IF _ORIG.EDW_UNUSED$=_CUR.EDW_UNUSED$ OR EDW_UNUSED$=_CUR.EDW_UNUSED$ THEN GOTO *NEXT ELSE IF _ORIG.EDW_UNUSED$=EDW_UNUSED$ THEN _CHG2$=_CHG2$+SEP+MSG("EDW_UNUSED")+" = "+_CUR.EDW_UNUSED$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EDW_UNUSED")+" = "+_CUR.EDW_UNUSED$
15071 IF _ORIG.STATUS$=_CUR.STATUS$ OR STATUS$=_CUR.STATUS$ THEN GOTO *NEXT ELSE IF _ORIG.STATUS$=STATUS$ THEN _CHG2$=_CHG2$+SEP+MSG("STATUS")+" = "+_CUR.STATUS$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STATUS")+" = "+_CUR.STATUS$ ! WO267865
15072 IF _ORIG.STATUS_ID$=_CUR.STATUS_ID$ OR STATUS_ID$=_CUR.STATUS_ID$ THEN GOTO *NEXT ELSE IF _ORIG.STATUS_ID$=STATUS_ID$ THEN _CHG2$=_CHG2$+SEP+MSG("STATUS_ID")+" = "+_CUR.STATUS_ID$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STATUS_ID")+" = "+_CUR.STATUS_ID$ ! WO267865
15073 IF _ORIG.STATUS_DATE$=_CUR.STATUS_DATE$ OR STATUS_DATE$=_CUR.STATUS_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.STATUS_DATE$=STATUS_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("STAT_DATE")+" = "+_CUR.STATUS_DATE$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STAT_DATE")+" = "+_CUR.STATUS_DATE$ ! WO267865
15074 IF _ORIG.STATUS_TIME$=_CUR.STATUS_TIME$ OR STATUS_TIME$=_CUR.STATUS_TIME$ THEN GOTO *NEXT ELSE IF _ORIG.STATUS_TIME$=STATUS_TIME$ THEN _CHG2$=_CHG2$+SEP+MSG("STAT_T")+" = "+_CUR.STATUS_TIME$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STAT_T")+" = "+_CUR.STATUS_TIME$ ! WO267865
15080 IF _ORIG.EDW_UNUSED_1=_CUR.EDW_UNUSED_1 OR EDW_UNUSED_1=_CUR.EDW_UNUSED_1 THEN GOTO *NEXT ELSE IF _ORIG.EDW_UNUSED_1=EDW_UNUSED_1 THEN _CHG2$=_CHG2$+SEP+MSG("EDW_UN_1")+" = "+STR(_CUR.EDW_UNUSED_1),_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EDW_UN_1")+" = "+STR(_CUR.EDW_UNUSED_1)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN ORDER_DIV$=_CUR.ORDER_DIV$
16030 IF _CHG_VAR$(2,1)="Y" THEN ORDER_NUM$=_CUR.ORDER_NUM$
16040 IF _CHG_VAR$(3,1)="Y" THEN ORDER_LINE_NUM$=_CUR.ORDER_LINE_NUM$
16050 IF _CHG_VAR$(4,1)="Y" THEN RC_NUM$=_CUR.RC_NUM$
16055 IF _CHG_VAR$(7,1)="Y" THEN EXT_LINE_NUM$=_CUR.EXT_LINE_NUM$ ! SSP221299
16056 IF _CHG_VAR$(8,1)="Y" THEN EXT_FIELD_1$=_CUR.EXT_FIELD_1$ ! WO257735
16057 IF _CHG_VAR$(9,1)="Y" THEN EXT_FIELD_2$=_CUR.EXT_FIELD_2$ ! WO257735
16060 IF _CHG_VAR$(5,1)="Y" THEN EDW_UNUSED$=_CUR.EDW_UNUSED$
16061 IF _CHG_VAR$(10,1)="Y" THEN STATUS$=_CUR.STATUS$ ! WO267865
16062 IF _CHG_VAR$(11,1)="Y" THEN STATUS_ID$=_CUR.STATUS_ID$ ! WO267865
16063 IF _CHG_VAR$(12,1)="Y" THEN STATUS_DATE$=_CUR.STATUS_DATE$ ! WO267865
16064 IF _CHG_VAR$(13,1)="Y" THEN STATUS_TIME$=_CUR.STATUS_TIME$ ! WO267865
16070 IF _CHG_VAR$(6,1)="Y" THEN EDW_UNUSED_1=_CUR.EDW_UNUSED_1
16990 RETURN 
17000 GET_ORDER_HEADER:
17010 FIND (_FT3,KEY=ORDER$,DOM=NO_ORDER,REC=FT3$)
17015 GOSUB BUTTONS_DOWN
17020 DAT$=FT3.ORDER_DATE$; CALL "ZZWDTE;DISPLAY",DAT$,OO$
17030 CUST$=FT3.CUST_DIV$+FT3.CUST_CODE$ ! FN%ZZDISP$(FT3.CUST_DIV$+FT3.CUST_CODE$,"A/R")
17040 CUST_PO$=FT3.CUST_PO$
17050 REFRESH_FLG=1; CALL "*WINGRP;SHOW",ORD_HEADER.GRP$
17060 RETURN 
17100 NO_ORDER: MSGBOX MSG("ORDER_NUM")+": "+FN%ZZDISP$(ORDER$,"O/P")+SEP+SEP+MSG("NOT_FOUND"),MSG("WARNING"),"!,TIM=5"; CALL "*WINGRP;HIDE",ORD_HEADER.GRP$; GOSUB BUTTONS_UP; NEXT_ID=ORDER_LINE_NUM.CTL,REFRESH_FLG=1; RETURN ! WO255400, no longer validate order number in FT3 since we now have stock PO type orders in here also. ORDER$="",REFRESH_FLG=1,NEXT_ID=ORDER.CTL; _CLR_FLG$="R"; GOSUB CLEAR_REC; GOSUB BUTTONS_UP; EXIT 
17200 GET_ORDER_LINE:
17210 XX=NUM(ORDER_LINE_NUM$,ERR=*NEXT),ORDER_LINE_NUM$=STR(XX:"000"); GOTO 17230
17220 ORDER_LINE_NUM$="",NEXT_ID=ORDER_LINE_NUM.CTL; EXIT 
17230 ORDER_LINE_NUM.CTL'VALUE$=ORDER_LINE_NUM$
17240 FIND (_FT4,KEY=ORDER$+ORDER_LINE_NUM$,DOM=NO_ORDER_LINE,REC=FT4$) ! WO255400
17250 REFRESH_FLG=1
17255 UM$=STP(FT4.SELL_UM$)+"/"+STP(STR(FT4.QTY_IN_SELL_UM:"###,###"))
17260 RETURN 
17300 NO_ORDER_LINE:! WO255400, now allow stock POs so order numbers and lines do not have to validate in FT3/FT4
17310 REFRESH_FLG=1
17320 RETURN 
17349 ! 
18000 SEL_QUERY:
18010 PROCESS "QRY_EDW","../ECG/EC.EN",VAL$
18020 IF STP(VAL$)="" THEN RETURN 
18030 ORDER$=VAL$(1,8),ORDER_LINE_NUM$=VAL$(9),_KEY$=VAL$
18040 CALL "ZZWLKU;PARSE_ORD",ORDER$,ORDER_DIV$,ORDER_NUM$; ORDER$=ORDER_DIV$+ORDER_NUM$
18050 GOTO 1070
19000 BUTTONS_UP:
19010 FOR AA=1 TO 8
19020 EXECUTE "button_"+STR(AA)+".ctl'line=19.50" ! WO257735, was 7.50. WO267865, was 13.50.
19030 NEXT 
19040 PRINT 'SIZE'(57,22) ! WO257735, was height of 10. WO267865, was height of 16.
19045 PRINT 'CI',
19050 RETURN 
19100 BUTTONS_DOWN:
19110 FOR AA=1 TO 8
19120 EXECUTE "button_"+STR(AA)+".ctl'line=30.05" ! WO257735, was 18.05. WO267865, was 24.05.
19130 NEXT 
19140 PRINT 'SIZE'(57,32), ! WO 257735, was height of 20. WO267865, was height of 26.
19150 RETURN 
56000 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56002 REM "221299-DBE: line_number tag from DBE clobbers companions 221089/487
56004 REM "255400-Inbound EDI943, Outbound EDI997. Custom program to translate
56006 REM "257735-EDI940; Trigger alternate packing list format for one end   
56008 REM "267865-New fields and tags for EC Order Status Detail so user can  
