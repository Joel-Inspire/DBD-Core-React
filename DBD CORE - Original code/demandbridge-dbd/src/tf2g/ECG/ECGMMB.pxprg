0010 ! ECGMMB - File Maintenance Program for ECO_CustSpecMsg (="ECO"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Apr. 19, 2002 11:32
0030 ! ************************************************************************
0035 REM "5.7 - 06/28/11 - 0.261111 - crg - SSP# 242686
0037 REM "242686-Custom project using the EC Budget module.                  
0040 REM "Copyright 2011 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "ECGMMB","../ECG/EC.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0112 GOSUB LOAD_MSG
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ECO"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=3
0430 DIM _KEYS$[1:3]; _KEYS$[1]="CUSTOMER$",_KEYS$[2]="EC_PROGRAM$",_KEYS$[3]="MESSAGE_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1025 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$; CUSTOMER$=CUST_DIV$+CUST_CODE$; %CUSTOMER$=CUSTOMER$; IF STP(CUSTOMER$)="" THEN %CUST_NAME1$="<global system message>",%CUST_NAME.CTL'VALUE$=%CUST_NAME1$; CALL "*WINGRP;SHOW",CUST1.GRP$; CALL "*WINGRP;HIDE",CUST.GRP$ ELSE CALL "*WINGRP;HIDE",CUST1.GRP$; CALL "*WINGRP;SHOW",CUST.GRP$
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=MESSAGE_DESC.CTL
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",ANSWER$
1230 IF ANSWER$="NO" THEN GOTO CLEAR_REC
1250 ! _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=MESSAGE_DESC.CTL
1280 MESSAGE_DESC$=MSG$[NUM(MESSAGE_NUM$,ERR=*NEXT)]
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=CUSTOMER.CTL
1485 GOSUB CLEAR_REC
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=CUSTOMER.CTL
1705 GOSUB CLEAR_REC
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 ! IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES!SSP#233325
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3061 CUSTOMER$=CUST_DIV$+CUST_CODE$,%CUSTOMER$=CUSTOMER$,%EC_PROGRAM_CODE$=EC_PROGRAM$
3065 GOSUB GET_PRG_DESC
3068 IF STP(CUSTOMER$)="" THEN %CUST_NAME1$="<global system message>",%CUST_NAME.CTL'VALUE$=%CUST_NAME1$; CALL "*WINGRP;SHOW",CUST1.GRP$; CALL "*WINGRP;HIDE",CUST.GRP$ ELSE CALL "*WINGRP;HIDE",CUST1.GRP$; CALL "*WINGRP;SHOW",CUST.GRP$
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUSTOMER.CTL,_FIRST_FIELD=MESSAGE_DESC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN CUST_DIV$=""
13030 IF _CLR_FLG$="R" THEN CUST_CODE$="",CUSTOMER$=""
13040 IF _CLR_FLG$="R" THEN EC_PROGRAM$=""
13050 IF _CLR_FLG$="R" THEN MESSAGE_NUM$=""
13060 DONT_DISP$=""
13070 ADD_LINE_0$=""
13080 REMOVE_LINE$=""
13090 APPLY_OH$=""
13100 LINE_1$=""
13110 LINE_2$=""
13120 LINE_3$=""
13130 LINE_4$=""
13140 MESSAGE_DESC$=""
13150 PREVENT_LINE_ORDER$="",PRG_DESC$=""
13160 ADD_TO_LOG$=""
13170 ADD_LINE$=""
13180 ECO_UNUSED_2$="",%CUST_NAME1$="",%CUST_NAME$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUST_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=EC_PROGRAM.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=MESSAGE_NUM.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(17,"N")
15030 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15040 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15050 IF _ORIG.EC_PROGRAM$=_CUR.EC_PROGRAM$ OR EC_PROGRAM$=_CUR.EC_PROGRAM$ THEN GOTO *NEXT ELSE IF _ORIG.EC_PROGRAM$=EC_PROGRAM$ THEN _CHG2$=_CHG2$+SEP+MSG("EC_PROG")+" = "+_CUR.EC_PROGRAM$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EC_PROG")+" = "+_CUR.EC_PROGRAM$
15060 IF _ORIG.MESSAGE_NUM$=_CUR.MESSAGE_NUM$ OR MESSAGE_NUM$=_CUR.MESSAGE_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.MESSAGE_NUM$=MESSAGE_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("MSG_NUM")+" = "+_CUR.MESSAGE_NUM$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MSG_NUM")+" = "+_CUR.MESSAGE_NUM$
15070 IF _ORIG.DONT_DISP$=_CUR.DONT_DISP$ OR DONT_DISP$=_CUR.DONT_DISP$ THEN GOTO *NEXT ELSE IF _ORIG.DONT_DISP$=DONT_DISP$ THEN _CHG2$=_CHG2$+SEP+MSG("DONT_DISP")+" = "+_CUR.DONT_DISP$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DONT_DISP")+" = "+_CUR.DONT_DISP$
15080 IF _ORIG.ADD_LINE_0$=_CUR.ADD_LINE_0$ OR ADD_LINE_0$=_CUR.ADD_LINE_0$ THEN GOTO *NEXT ELSE IF _ORIG.ADD_LINE_0$=ADD_LINE_0$ THEN _CHG2$=_CHG2$+SEP+MSG("ADD_LINE")+" = "+_CUR.ADD_LINE_0$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ADD_LINE")+" = "+_CUR.ADD_LINE_0$
15090 IF _ORIG.REMOVE_LINE$=_CUR.REMOVE_LINE$ OR REMOVE_LINE$=_CUR.REMOVE_LINE$ THEN GOTO *NEXT ELSE IF _ORIG.REMOVE_LINE$=REMOVE_LINE$ THEN _CHG2$=_CHG2$+SEP+MSG("REMV_LINE")+" = "+_CUR.REMOVE_LINE$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("REMV_LINE")+" = "+_CUR.REMOVE_LINE$
15100 IF _ORIG.APPLY_OH$=_CUR.APPLY_OH$ OR APPLY_OH$=_CUR.APPLY_OH$ THEN GOTO *NEXT ELSE IF _ORIG.APPLY_OH$=APPLY_OH$ THEN _CHG2$=_CHG2$+SEP+MSG("APPLY_OH")+" = "+_CUR.APPLY_OH$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("APPLY_OH")+" = "+_CUR.APPLY_OH$
15110 IF _ORIG.LINE_1$=_CUR.LINE_1$ OR LINE_1$=_CUR.LINE_1$ THEN GOTO *NEXT ELSE IF _ORIG.LINE_1$=LINE_1$ THEN _CHG2$=_CHG2$+SEP+MSG("LINE_1")+" = "+_CUR.LINE_1$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_1")+" = "+_CUR.LINE_1$
15120 IF _ORIG.LINE_2$=_CUR.LINE_2$ OR LINE_2$=_CUR.LINE_2$ THEN GOTO *NEXT ELSE IF _ORIG.LINE_2$=LINE_2$ THEN _CHG2$=_CHG2$+SEP+MSG("LINE_2")+" = "+_CUR.LINE_2$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_2")+" = "+_CUR.LINE_2$
15130 IF _ORIG.LINE_3$=_CUR.LINE_3$ OR LINE_3$=_CUR.LINE_3$ THEN GOTO *NEXT ELSE IF _ORIG.LINE_3$=LINE_3$ THEN _CHG2$=_CHG2$+SEP+MSG("LINE_3")+" = "+_CUR.LINE_3$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_3")+" = "+_CUR.LINE_3$
15140 IF _ORIG.LINE_4$=_CUR.LINE_4$ OR LINE_4$=_CUR.LINE_4$ THEN GOTO *NEXT ELSE IF _ORIG.LINE_4$=LINE_4$ THEN _CHG2$=_CHG2$+SEP+MSG("LINE_4")+" = "+_CUR.LINE_4$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_4")+" = "+_CUR.LINE_4$
15150 IF _ORIG.MESSAGE_DESC$=_CUR.MESSAGE_DESC$ OR MESSAGE_DESC$=_CUR.MESSAGE_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.MESSAGE_DESC$=MESSAGE_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("MSG_DESC")+" = "+_CUR.MESSAGE_DESC$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MSG_DESC")+" = "+_CUR.MESSAGE_DESC$
15160 IF _ORIG.PREVENT_LINE_ORDER$=_CUR.PREVENT_LINE_ORDER$ OR PREVENT_LINE_ORDER$=_CUR.PREVENT_LINE_ORDER$ THEN GOTO *NEXT ELSE IF _ORIG.PREVENT_LINE_ORDER$=PREVENT_LINE_ORDER$ THEN _CHG2$=_CHG2$+SEP+MSG("PREVENT_LN")+" = "+_CUR.PREVENT_LINE_ORDER$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PREVENT_LN")+" = "+_CUR.PREVENT_LINE_ORDER$
15170 IF _ORIG.ADD_TO_LOG$=_CUR.ADD_TO_LOG$ OR ADD_TO_LOG$=_CUR.ADD_TO_LOG$ THEN GOTO *NEXT ELSE IF _ORIG.ADD_TO_LOG$=ADD_TO_LOG$ THEN _CHG2$=_CHG2$+SEP+MSG("ADD_TO_LOG")+" = "+_CUR.ADD_TO_LOG$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ADD_TO_LOG")+" = "+_CUR.ADD_TO_LOG$
15180 IF _ORIG.ADD_LINE$=_CUR.ADD_LINE$ OR ADD_LINE$=_CUR.ADD_LINE$ THEN GOTO *NEXT ELSE IF _ORIG.ADD_LINE$=ADD_LINE$ THEN _CHG2$=_CHG2$+SEP+MSG("ADD_L_RM")+" = "+_CUR.ADD_LINE$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ADD_L_RM")+" = "+_CUR.ADD_LINE$
15190 IF _ORIG.ECO_UNUSED_2$=_CUR.ECO_UNUSED_2$ OR ECO_UNUSED_2$=_CUR.ECO_UNUSED_2$ THEN GOTO *NEXT ELSE IF _ORIG.ECO_UNUSED_2$=ECO_UNUSED_2$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.ECO_UNUSED_2$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.ECO_UNUSED_2$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16030 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN EC_PROGRAM$=_CUR.EC_PROGRAM$
16050 IF _CHG_VAR$(4,1)="Y" THEN MESSAGE_NUM$=_CUR.MESSAGE_NUM$
16060 IF _CHG_VAR$(5,1)="Y" THEN DONT_DISP$=_CUR.DONT_DISP$
16070 IF _CHG_VAR$(6,1)="Y" THEN ADD_LINE_0$=_CUR.ADD_LINE_0$
16080 IF _CHG_VAR$(7,1)="Y" THEN REMOVE_LINE$=_CUR.REMOVE_LINE$
16090 IF _CHG_VAR$(8,1)="Y" THEN APPLY_OH$=_CUR.APPLY_OH$
16100 IF _CHG_VAR$(9,1)="Y" THEN LINE_1$=_CUR.LINE_1$
16110 IF _CHG_VAR$(10,1)="Y" THEN LINE_2$=_CUR.LINE_2$
16120 IF _CHG_VAR$(11,1)="Y" THEN LINE_3$=_CUR.LINE_3$
16130 IF _CHG_VAR$(12,1)="Y" THEN LINE_4$=_CUR.LINE_4$
16140 IF _CHG_VAR$(13,1)="Y" THEN MESSAGE_DESC$=_CUR.MESSAGE_DESC$
16150 IF _CHG_VAR$(14,1)="Y" THEN PREVENT_LINE_ORDER$=_CUR.PREVENT_LINE_ORDER$
16160 IF _CHG_VAR$(15,1)="Y" THEN ADD_TO_LOG$=_CUR.ADD_TO_LOG$
16170 IF _CHG_VAR$(16,1)="Y" THEN ADD_LINE$=_CUR.ADD_LINE$
16180 IF _CHG_VAR$(17,1)="Y" THEN ECO_UNUSED_2$=_CUR.ECO_UNUSED_2$
16990 RETURN 
17000 QUERY: VAL$=""
17010 PROCESS "QRY_ECO","../ECG/EC.EN",VAL$; IF STP(VAL$)="" THEN RETURN 
17020 CUSTOMER$=VAL$(1,10); CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$; CUSTOMER$=CUST_DIV$+CUST_CODE$
17030 EC_PROGRAM$=VAL$(11,10)
17040 MESSAGE_NUM$=VAL$(21),_KEY$=VAL$
17050 GOTO 1050
20000 GET_PRG_DESC:
20010 EC_PROGRAM$=STP(EC_PROGRAM$,2),PRG_DESC$="10"
20015 CALL "ZZ2FNC;GET_PRG_REMARK",EC_PROGRAM$,PRG_DESC$
20020 IF PRG_DESC$="10" THEN PRG_DESC$=""
20040 GET_PRG_DESC_END:RETURN 
31000 LOAD_MSG:
31010 DIM MSG$[63]
31020 MSG$[1]="Invalid item"
31030 MSG$[2]="Item not in Catalog"
31040 MSG$[3]="Out of Stock"
31050 MSG$[4]="Not enough Stock"
31060 MSG$[5]="Over Order Maximum (Quantity)"
31070 MSG$[6]="Reorder Notice Required"
31071 MSG$[7]="Item set to create a PO"
31072 MSG$[8]="Invalid Quantity Ordered"
31081 MSG$[20]="Budget: Over the limit warning" ! 215368
31082 MSG$[21]="Budget: Over the limit error" ! 215368
31090 MSG$[60]="Order Approval: ALL Orders"
31100 MSG$[61]="Order Approval: Variable Print"
31110 MSG$[62]="Order Approval: Over Qty Max"
31111 MSG$[63]="Order Approval: Over Budget" ! 242686
31120 FOR AA=1 TO 62
31130 IF MSG$[AA]<>"" THEN ALL_MSG$=ALL_MSG$+STR(AA:"00")+" - "+MSG$[AA]+"/"
31140 NEXT 
31150 RETURN 
31199 ! 
31200 SETUP_MESSAGE_08:
31205 OPEN (HFN,ERR=*RETURN)"ECO"+%C$; _ECO=LFO
31210 DIM ECO$(500); ECO$="          EC3WS1    00008NYN Invalid or negative quantity was entered. Please delete this line and re-enter a valid quantity.                                                                                                                                                Invalid Quantity Ordered      NYN                                                                                                                                                                                                      "
31215 WRITE (_ECO,KEY=ECO$(1,25),DOM=*NEXT)ECO$
31240 CLOSE (_ECO,ERR=*PROCEED); _ECO=0
31245 RETURN 
31249 ! 
31250 SETUP_MESSAGE_63:
31255 OPEN (HFN,ERR=*RETURN)"ECO"+%C$; _ECO=LFO
31260 DIM ECO$(500); ECO$="          EC3WS1    00063    Item ?tf?1? requires approval because it has exceeded budget limits for this location.                                                                                                                                                          Order Approval: Over Budget    N                                                                                                                                                                                                       "
31265 WRITE (_ECO,KEY=ECO$(1,25),DOM=*NEXT)ECO$
31280 CLOSE (_ECO,ERR=*PROCEED); _ECO=0
31295 RETURN 
31299 ! 
56001 REM "215368-Create Monthly Budget feature by customer location
56002 REM "238095-Can enter a eCommerce order with a neg. qty. Javascript vali
56003 REM "242686-Custom project using the EC Budget module.                  
