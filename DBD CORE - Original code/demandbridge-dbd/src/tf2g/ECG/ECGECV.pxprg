0010 ! ECGECV - File Maintenance Program for ECV-Webec Sort Detail Elements (="ECV"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Dec. 5, 2001 16:45
0030 ! ************************************************************************
0090 ! 
0091 ! WAS EC3SRB
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ECV"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0181 GOSUB OPEN_FILES
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=3
0430 DIM _KEYS$[1:3]; _KEYS$[1]="CUSTOMER$",_KEYS$[2]="SORT_CODE$",_KEYS$[3]="ELEMENT_NUMB$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0941 GOSUB CLOSE_FILES
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1041 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST_CODE$
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1071 READ (_ECU,KEY=_KEY$+SORT_CODE$,ERR=*NEXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0,NEXT_ID=CUSTOMER.CTL,REFRESH_FLG=1
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3051 RADIO_DATA_TYPE$=DATA_TYPE_DATAORTEXT$; REFRESH_FLG=1
3052 IF CUSTOMER$<>"" THEN RADIO_GLOBAL.VAL=2 ELSE RADIO_GLOBAL.VAL=2
3055 GOSUB PROCESS_CUST_CODE
3056 GOSUB PROCESS_SORT_CODE
3057 GOSUB PROCESS_RADIO_DATA_TYPE
3058 GOSUB LOAD_CONTROLS
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUSTOMER.CTL,_FIRST_FIELD=DATA_TYPE_DATAORTEXT.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 ! 
13021 IF _CLR_FLG$="R" THEN {
13022 CUST_DIV$=""
13023 CUST_CODE$=""
13024 CUSTOMER$=""
13025  }
13030 ! 
13040 IF _CLR_FLG$="R" THEN SORT_CODE$=""
13050 IF _CLR_FLG$="R" THEN ELEMENT_NUMB$=""
13060 DATA_TYPE_DATAORTEXT$=""
13070 ECV_UNUSED_1$=""
13080 STRING_POS$=""
13090 DESC_OR_TEXT$=""
13100 LENGTH$=""
13110 DATA_TYPE$=""
13120 ACCOUNT_TYPE$=""
13130 SOURCE_FILE$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUST_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=SORT_CODE.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=ELEMENT_NUMB.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(12,"N")
15030 IF _ORIG.CUST_DIV$=_CUR.CUST_DIV$ OR CUST_DIV$=_CUR.CUST_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_DIV$=CUST_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_DIV")+" = "+_CUR.CUST_DIV$
15040 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15050 IF _ORIG.SORT_CODE$=_CUR.SORT_CODE$ OR SORT_CODE$=_CUR.SORT_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.SORT_CODE$=SORT_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("SORT_CODE")+" = "+_CUR.SORT_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SORT_CODE")+" = "+_CUR.SORT_CODE$
15060 IF _ORIG.ELEMENT_NUMB$=_CUR.ELEMENT_NUMB$ OR ELEMENT_NUMB$=_CUR.ELEMENT_NUMB$ THEN GOTO *NEXT ELSE IF _ORIG.ELEMENT_NUMB$=ELEMENT_NUMB$ THEN _CHG2$=_CHG2$+SEP+MSG("ELEM_N")+" = "+_CUR.ELEMENT_NUMB$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ELEM_N")+" = "+_CUR.ELEMENT_NUMB$
15070 IF _ORIG.DATA_TYPE_DATAORTEXT$=_CUR.DATA_TYPE_DATAORTEXT$ OR DATA_TYPE_DATAORTEXT$=_CUR.DATA_TYPE_DATAORTEXT$ THEN GOTO *NEXT ELSE IF _ORIG.DATA_TYPE_DATAORTEXT$=DATA_TYPE_DATAORTEXT$ THEN _CHG2$=_CHG2$+SEP+MSG("DATA_T_D")+" = "+_CUR.DATA_TYPE_DATAORTEXT$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DATA_T_D")+" = "+_CUR.DATA_TYPE_DATAORTEXT$
15080 IF _ORIG.ECV_UNUSED_1$=_CUR.ECV_UNUSED_1$ OR ECV_UNUSED_1$=_CUR.ECV_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.ECV_UNUSED_1$=ECV_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.ECV_UNUSED_1$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.ECV_UNUSED_1$
15090 IF _ORIG.STRING_POS$=_CUR.STRING_POS$ OR STRING_POS$=_CUR.STRING_POS$ THEN GOTO *NEXT ELSE IF _ORIG.STRING_POS$=STRING_POS$ THEN _CHG2$=_CHG2$+SEP+MSG("STRING_POS")+" = "+_CUR.STRING_POS$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STRING_POS")+" = "+_CUR.STRING_POS$
15100 IF _ORIG.DESC_OR_TEXT$=_CUR.DESC_OR_TEXT$ OR DESC_OR_TEXT$=_CUR.DESC_OR_TEXT$ THEN GOTO *NEXT ELSE IF _ORIG.DESC_OR_TEXT$=DESC_OR_TEXT$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC_O_T")+" = "+_CUR.DESC_OR_TEXT$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC_O_T")+" = "+_CUR.DESC_OR_TEXT$
15110 IF _ORIG.LENGTH$=_CUR.LENGTH$ OR LENGTH$=_CUR.LENGTH$ THEN GOTO *NEXT ELSE IF _ORIG.LENGTH$=LENGTH$ THEN _CHG2$=_CHG2$+SEP+MSG("LENGTH")+" = "+_CUR.LENGTH$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LENGTH")+" = "+_CUR.LENGTH$
15120 IF _ORIG.DATA_TYPE$=_CUR.DATA_TYPE$ OR DATA_TYPE$=_CUR.DATA_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.DATA_TYPE$=DATA_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("DATA_TYPE")+" = "+_CUR.DATA_TYPE$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DATA_TYPE")+" = "+_CUR.DATA_TYPE$
15130 IF _ORIG.ACCOUNT_TYPE$=_CUR.ACCOUNT_TYPE$ OR ACCOUNT_TYPE$=_CUR.ACCOUNT_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.ACCOUNT_TYPE$=ACCOUNT_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("ACCT_TYPE")+" = "+_CUR.ACCOUNT_TYPE$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ACCT_TYPE")+" = "+_CUR.ACCOUNT_TYPE$
15140 IF _ORIG.SOURCE_FILE$=_CUR.SOURCE_FILE$ OR SOURCE_FILE$=_CUR.SOURCE_FILE$ THEN GOTO *NEXT ELSE IF _ORIG.SOURCE_FILE$=SOURCE_FILE$ THEN _CHG2$=_CHG2$+SEP+MSG("SRC_FILE")+" = "+_CUR.SOURCE_FILE$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SRC_FILE")+" = "+_CUR.SOURCE_FILE$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CUST_DIV$=_CUR.CUST_DIV$
16030 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN SORT_CODE$=_CUR.SORT_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN ELEMENT_NUMB$=_CUR.ELEMENT_NUMB$
16060 IF _CHG_VAR$(5,1)="Y" THEN DATA_TYPE_DATAORTEXT$=_CUR.DATA_TYPE_DATAORTEXT$
16070 IF _CHG_VAR$(6,1)="Y" THEN ECV_UNUSED_1$=_CUR.ECV_UNUSED_1$
16080 IF _CHG_VAR$(7,1)="Y" THEN STRING_POS$=_CUR.STRING_POS$
16090 IF _CHG_VAR$(8,1)="Y" THEN DESC_OR_TEXT$=_CUR.DESC_OR_TEXT$
16100 IF _CHG_VAR$(9,1)="Y" THEN LENGTH$=_CUR.LENGTH$
16110 IF _CHG_VAR$(10,1)="Y" THEN DATA_TYPE$=_CUR.DATA_TYPE$
16120 IF _CHG_VAR$(11,1)="Y" THEN ACCOUNT_TYPE$=_CUR.ACCOUNT_TYPE$
16130 IF _CHG_VAR$(12,1)="Y" THEN SOURCE_FILE$=_CUR.SOURCE_FILE$
16990 RETURN 
17000 ! 
17010 GLOBAL_ELEMENT:
17020 CC=CUSTOMER.CTL
17030 CD=%CUST_NAME.CTL
17040 IF RADIO_GLOBAL.VAL=1 THEN {
17050 CCOLD$=CC'TEXT$
17060 CC'TEXT$=DIM(8)
17070 CC'ENABLED=0
17080 CD'TEXT$=""
17100  } ELSE {
17110 CC'TEXT$=CCCOLD$
17120 CC'ENABLED=1
17130 CD'TEXT$=""
17150  }
17151 _ENABLE_FLG=2; GOSUB ENABLE_GROUPS
17152 NEXT_ID=CUSTOMER.CTL; REFRESH_FLG=1
17160 RETURN 
17170 ! 
17180 INITIALIZE_DESC_OR_TEXT:
17181 DT=DESC_OR_TEXT.CTL
17190 DT'COLS=40
17200 RETURN 
17210 ! 
17220 OPEN_FILES:
17230 _FILE_NAME$="ECU"
17240 OPEN (HFN,IOL=*,ERR=*NEXT)_FILE_NAME$+%C$; _ECU=LFO; GOTO 17250
17241 OPEN (HFN,IOL=*,ERR=OPEN_ERR)_FILE_NAME$; _ECU=LFO
17250 _FILE_NAME$="FMP"
17260 OPEN (HFN,ERR=*NEXT)_FILE_NAME$+%C$; _FMP=LFO; GOTO 17270
17261 OPEN (HFN,ERR=OPEN_ERR)_FILE_NAME$; _FMP=LFO
17270 _FILE_NAME$="ZZF"
17280 OPEN (HFN,ERR=*NEXT)_FILE_NAME$+%C$; _ZZF=LFO; GOTO 17290
17281 OPEN (HFN,ERR=OPEN_ERR)_FILE_NAME$; _ZZF=LFO
17290 RETURN 
17300 ! 
17310 PROCESS_CUST_CODE:! !^100,5 - Get _FMP record for this customer
17320 CALL "ZZWLKU;parse_cust",CUSTOMER$,CUST_DIV$,CUST_CODE$
17330 ! CUSTOMER$=CUST_DIV$+CUST_CODE$
17340 ! CUSTOMER$=SUB(CUSTOMER$," ","0")
17350 CALL "ZZWLKU;AR_CUST_FMT",CUSTOMER$,""
17360 %CUST_DIV$=CUST_DIV$,%CUST_CODE$=CUST_CODE$
17370 _ENABLE_FLG=3; GOSUB ENABLE_GROUPS
17371 REFRESH_FLG=1
17380 RETURN 
17390 ! 
17400 PROCESS_DROP_BOX_1:
17410 DROP_BOX READ DROP_BOX_1.CTL,SOURCE_FILE$,ERR=*NEXT
17420 RETURN 
17430 ! 
17440 LOAD_DROP_BOX_1:
17450 DROP_BOX LOAD DROP_BOX_1.CTL,1,SOURCE_FILE_1$
17460 DROP_BOX LOAD DROP_BOX_1.CTL,2,SOURCE_FILE_2$
17470 DROP_BOX LOAD DROP_BOX_1.CTL,3,SOURCE_FILE_3$
17480 DROP_BOX LOAD DROP_BOX_1.CTL,4,SOURCE_FILE_4$
17490 DROP_BOX LOAD DROP_BOX_1.CTL,5,SOURCE_FILE_5$
17500 DROP_BOX_1.CTL'VAL$=SOURCE_FILE$
17510 RETURN 
17520 ! 
17530 PROCESS_SORTDIRECTION_AKA_DATATYPE:
17540 IF SORTDIRECTION_AKA_DATATYPE=1 THEN {
17550 IF POS("R"=DATA_TYPE$)=0 THEN DATA_TYPE$(2)=SUB(DATA_TYPE$(2)," ","R") ! ELSE No Change
17560  } ELSE {
17570 IF POS("R"=DATA_TYPE$)>0 THEN DATA_TYPE$(2)=SUB(DATA_TYPE$(2),"R"," ") ! ELSE No Change
17580  } ! end if uppercase
17590 RETURN 
17600 ! 
17610 LOAD_ATTRIBUTES:
17620 IF POS("R"=DATA_TYPE$)>0 THEN SORTDIRECTION_AKA_DATATYPE.VAL=0 ELSE SORTDIRECTION_AKA_DATATYPE.VAL=1
17630 IF POS("U"=DATA_TYPE$)>1 THEN CASE_AKA_DATATYPE.VAL=1 ELSE CASE_AKA_DATATYPE.VAL=0
17640 RETURN 
17650 ! 
17660 LOAD_CONTROLS:
17670 GOSUB LOAD_DROP_BOX_1
17680 GOSUB LOAD_ATTRIBUTES
17690 ! 
17700 RETURN 
17710 ! 
17720 PROCESS_SORT_CODE:
17730 GOSUB FIND_REC
17740 IF UCS(TYPE_D_O$)="C" AND STP(CUSTOMER$,3)="" THEN {
17750 MSGBOX "Global customer setting not available for this code type"
17760 EXIT ERR
17770  }
17780 CALL "ZZWLKU;EC_SORT",SORT_CODE$,""
17790 %SORT_CODE$=SORT_CODE$
17800 IF UCS(TYPE_D_O$)<>"O" THEN SORTDIRECTION_AKA_DATATYPE.CTL'ENABLED=0 ELSE SORTDIRECTION_AKA_DATATYPE.CTL'ENABLED=1
17810 IF UCS(TYPE_D_O$)="C" AND UCS(CODE_TYPE$)="V" THEN {
17820 %QRY_PRG$="QRY_FMP"
17830 ELEMENT_CAPTION.CTL'VALUE$="Ship via code:"
17831 ELEMENT_NUMB.CTL'LEN=1
17850  } ELSE {
17860 ELEMENT_CAPTION.CTL'VALUE$=MSG("ELEM_N")
17861 ELEMENT_NUMB.CTL'LEN=3
17870 %QRY_PRG$="QRY_ECV_ELEM"
17890  }
17900 _ENABLE_FLG=4; GOSUB ENABLE_GROUPS
17901 GOSUB LOAD_ATTRIBUTES
17910 REFRESH_FLG=1
17920 RETURN 
17930 ! 
17940 PROCESS_CASE_AKA_DATATYPE:
17950 IF CASE_AKA_DATATYPE.VAL=1 THEN {
17960 IF POS("U"=DATA_TYPE$)=0 THEN DATA_TYPE$(2)=SUB(DATA_TYPE$(2)," ","U") ! ELSE No Change
17970  } ELSE {
17980 IF POS("U"=DATA_TYPE$)>0 THEN DATA_TYPE$(2)=SUB(DATA_TYPE$(2),"U"," ") ! ELSE No Change
17990  } ! end if uppercase
18000 RETURN 
18010 ! 
18020 ! 
18030 PROCESS_ELEMENT_NUMB:
18040 GOSUB FIND_REC
18050 IF UCS(TYPE_D_O$)="C" AND UCS(CODE_TYPE$)="V" THEN {
18060 FIND (_FMP,KEY="S"+ELEMENT_NUMB$)FMPS$
18070 %SHIPVIA_DESC$=MID(FMPS$,3,15)
18080 IF MID(FMPS$,18,1)="Y" THEN {
18090 MSGBOX "This ship via code is set to not show on the web (change using OPS-R3)"
18100 EXIT ERR
18110  } }
18120 RETURN 
18130 ! 
18140 PROCESS_RADIO_DATA_TYPE:
18150 SWITCH RADIO_DATA_TYPE.VAL$
18160 CASE "T"
18170 STRING_POS$=DIM(3)
18180 PREINPUT 0
18190 BREAK
18200 CASE "1"
18210 DIM ZZF$(300)
18220 ZZF$(13,40)="**user defined data reference**"
18230 TMPKEY$=PAD(SOURCE_FILE$,6,1)+DATA_TYPE_DATAORTEXT$+PAD(ECV_UNSUED_1$,2,1)+PAD(STRING_POS$,2,1)
18240 FIND (_ZZF,KEY=TMPKEY$,DOM=*NEXT)ZZF$
18250 DESC_OR_TEXT$=MID(ZZF$,13,40)
18260 LENGTH$=MID(ZZF$,56,3)
18270 DATA_TYPE$="S"+DIM(4) ! MID(ZZF$,73,5)
18280 ACCOUNT_TYPE$(1,4)=DIM(4)+MID(ZZF$,63,5) ! MID(ZZF$,59,9)
18290 END SWITCH 
18300 RETURN 
18310 ! 
18320 CLOSE_FILES:
18330 IF _ECU<>0 THEN CLOSE (_ECU); _ECU=0
18340 IF _FMP<>0 THEN CLOSE (_FMP); _FMP=0
18350 IF _ZZF<>0 THEN CLOSE (_ZZF); _ZZF=0
18360 RETURN 
