0010 ! ECGEE9 - File Maintenance Program for EE9_ApproverGroupDet (="EE9"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Apr. 25, 2007 14:24
0030 ! ************************************************************************
0035 REM "5.5 - 04/25/07 - 16.282222 - crg - SSP# 205923
0037 REM "205923-Would like quote on two tiered purchase approval.
0040 REM "Copyright 2007 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 ! 
0092 IF TCB(88)=0 THEN MSGBOX "You must be using Windx to access this program" ELSE PROCESS "ECGEE9","../ECG/EC.EN"
0095 IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="EE9"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0181 MAX_ENTRIES=50
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=4
0430 DIM _KEYS$[1:4]; _KEYS$[1]="GROUP_TYPE$",_KEYS$[2]="CUST_CODE$",_KEYS$[3]="SEQ_NO$",_KEYS$[4]="APP_BUYER_ID$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$+ARG_2$; IF NOT(NUL(ARG_2$)) THEN READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC); KEY_EE8=2,EDIT_MODE=1 ELSE KEY_EE8=1,ADD_MODE=1
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ! ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1012 IF ID$<>"SEQ_NO" THEN GOTO 1020
1015 SEQ_NO$=STR(NUM(SEQ_NO$):"000",ERR=*NEXT); GOTO 1020
1017 SEQ_NO$=PAD(SEQ_NO$,3," ")
1020 %EE9_GROUP$=STP(GROUP_TYPE$+CUST_CODE$+SEQ_NO$)
1021 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1275 %EE9_GROUP$=STP(GROUP_TYPE$+CUST_CODE$+SEQ_NO$)
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3221 IF ADD_MODE THEN GOSUB DO_ADD_MODE; GOTO WRT
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3535 %EE9_GROUP$=STP(GROUP_TYPE$+CUST_CODE$+SEQ_NO$)
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3801 IF NOT_VALID THEN GOTO *RETURN
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=GROUP_TYPE.CTL,_FIRST_FIELD=T_MIN_AMOUNT.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:! MSGBOX "Converting NUmber to String"
10020 T_MIN_AMOUNT$=STR(T_MIN_AMOUNT)
10030 T_MAX_AMOUNT$=STR(T_MAX_AMOUNT)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:! MSGBOX "Converting String to Number"
11020 _X$="T_MIN_AMOUNT",_X=T_MIN_AMOUNT.CTL,T_MIN_AMOUNT=NUM(T_MIN_AMOUNT$,ERR=NON_NUMERIC)
11030 _X$="T_MAX_AMOUNT",_X=T_MAX_AMOUNT.CTL,T_MAX_AMOUNT=NUM(T_MAX_AMOUNT$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN GROUP_TYPE$=""
13030 IF _CLR_FLG$="R" THEN CUST_CODE$=""
13040 IF _CLR_FLG$="R" THEN SEQ_NO$=""
13050 IF _CLR_FLG$="R" THEN APP_BUYER_ID$=""
13060 UNUSED_1$=""
13070 T_MIN_AMOUNT=0
13080 T_MAX_AMOUNT=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13995 %EE9_GROUP$=STP(GROUP_TYPE$+CUST_CODE$+SEQ_NO$)
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14015 ! MSGBOX "Enable flag : "+STR(_ENABLE_FLG)
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=CUST_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=SEQ_NO.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=APP_BUYER_ID.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14981 IF KEY_EE8 THEN CALL "*wingrp;Disable",KEY_EE8.GRP$; IF KEY_EE8=1 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=APP_BUYER_ID.CTL; END_IF ; KEY_EE8=0
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(7,"N")
15030 IF _ORIG.GROUP_TYPE$=_CUR.GROUP_TYPE$ OR GROUP_TYPE$=_CUR.GROUP_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.GROUP_TYPE$=GROUP_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("GRP_TYPE")+" = "+_CUR.GROUP_TYPE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GRP_TYPE")+" = "+_CUR.GROUP_TYPE$
15040 IF _ORIG.CUST_CODE$=_CUR.CUST_CODE$ OR CUST_CODE$=_CUR.CUST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.CUST_CODE$=CUST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUST_CODE$
15050 IF _ORIG.SEQ_NO$=_CUR.SEQ_NO$ OR SEQ_NO$=_CUR.SEQ_NO$ THEN GOTO *NEXT ELSE IF _ORIG.SEQ_NO$=SEQ_NO$ THEN _CHG2$=_CHG2$+SEP+MSG("SEQ_NO")+" = "+_CUR.SEQ_NO$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEQ_NO")+" = "+_CUR.SEQ_NO$
15060 IF _ORIG.APP_BUYER_ID$=_CUR.APP_BUYER_ID$ OR APP_BUYER_ID$=_CUR.APP_BUYER_ID$ THEN GOTO *NEXT ELSE IF _ORIG.APP_BUYER_ID$=APP_BUYER_ID$ THEN _CHG2$=_CHG2$+SEP+MSG("APP_BUY_ID")+" = "+_CUR.APP_BUYER_ID$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("APP_BUY_ID")+" = "+_CUR.APP_BUYER_ID$
15070 IF _ORIG.UNUSED_1$=_CUR.UNUSED_1$ OR UNUSED_1$=_CUR.UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.UNUSED_1$=UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.UNUSED_1$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.UNUSED_1$
15080 IF _ORIG.T_MIN_AMOUNT=_CUR.T_MIN_AMOUNT OR T_MIN_AMOUNT=_CUR.T_MIN_AMOUNT THEN GOTO *NEXT ELSE IF _ORIG.T_MIN_AMOUNT=T_MIN_AMOUNT THEN _CHG2$=_CHG2$+SEP+MSG("MIN_AMT")+" = "+STR(_CUR.T_MIN_AMOUNT),_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MIN_AMT")+" = "+STR(_CUR.T_MIN_AMOUNT)
15090 IF _ORIG.T_MAX_AMOUNT=_CUR.T_MAX_AMOUNT OR T_MAX_AMOUNT=_CUR.T_MAX_AMOUNT THEN GOTO *NEXT ELSE IF _ORIG.T_MAX_AMOUNT=T_MAX_AMOUNT THEN _CHG2$=_CHG2$+SEP+MSG("MAX_AMT")+" = "+STR(_CUR.T_MAX_AMOUNT),_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MAX_AMT")+" = "+STR(_CUR.T_MAX_AMOUNT)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN GROUP_TYPE$=_CUR.GROUP_TYPE$
16030 IF _CHG_VAR$(2,1)="Y" THEN CUST_CODE$=_CUR.CUST_CODE$
16040 IF _CHG_VAR$(3,1)="Y" THEN SEQ_NO$=_CUR.SEQ_NO$
16050 IF _CHG_VAR$(4,1)="Y" THEN APP_BUYER_ID$=_CUR.APP_BUYER_ID$
16060 IF _CHG_VAR$(5,1)="Y" THEN UNUSED_1$=_CUR.UNUSED_1$
16070 IF _CHG_VAR$(6,1)="Y" THEN T_MIN_AMOUNT=_CUR.T_MIN_AMOUNT
16080 IF _CHG_VAR$(7,1)="Y" THEN T_MAX_AMOUNT=_CUR.T_MAX_AMOUNT
16990 RETURN 
17000 SEL_QUERY: VAL$=""
17010 PROCESS "QRY_EE9","../ECG/EC.EN",VAL$; IF STP(VAL$)="" THEN RETURN 
17020 GROUP_TYPE$=VAL$(1,1),CUST_CODE$=VAL$(2,10),SEQ_NO$=VAL$(12,3),APP_BUYER_ID$=VAL$(15,15),_KEY$=VAL$
17030 GOTO 1050
17040 ! 
17100 SEL_EE8_QUERY: VAL$=""
17110 PROCESS "QRY_EE8","../ECG/EC.EN",VAL$; IF STP(VAL$)="" THEN RETURN 
17120 GROUP_TYPE$=VAL$(1,1),CUST_CODE$=VAL$(2,10),SEQ_NO$=VAL$(12,3)
17130 %EE9_GROUP$=VAL$
17140 _ENABLE_FLG=4,REFRESH_FLG=1; GOSUB ENABLE_GROUPS
17150 RETURN 
17160 ! 
17161 DO_ADD_MODE:
17162 _KEY$=GROUP_TYPE$+CUST_CODE$+SEQ_NO$+PAD(APP_BUYER_ID$,15)
17163 RETURN 
17164 ! 
17170 CHECK_MIN_AMT:
17172 ! IF ERR_MAX_AMT THEN GOTO *RETURN
17173 ERR_MIN_AMT=0
17180 IF NUM(T_MIN_AMOUNT$)<0 THEN {
17190 ERR_MIN_AMT=1; VAL_MSG$=MSG("ECGEE9_E01") ! "Minimum amount is less than 0"
17200  } ELSE IF NUM(T_MAX_AMOUNT$)>0 AND NUM(T_MIN_AMOUNT$)>NUM(T_MAX_AMOUNT$) THEN {
17210 ERR_MIN_AMT=1; VAL_MSG$=MSG("ECGEE9_E02") ! "Minimum amount is greater than maximum amount"
17220  }
17230 GOTO DONE_CHECK_MIN_AMT
17240 ERR_INVALID_MIN:
17250 ERR_MIN_AMT=1; VAL_MSG$=MSG("ECGEE9_E03") ! "Input for minimum amount is invalid"
17260 DONE_CHECK_MIN_AMT:
17270 IF ERR_MIN_AMT THEN MSGBOX VAL_MSG$,MSG("MB_ATTN"),"!"; NEXT_ID=T_MIN_AMT.CTL
17280 RETURN 
17281 ! 
17291 CHECK_MAX_AMT:
17301 ! IF ERR_MIN_AMT THEN GOTO *RETURN
17302 ERR_MAX_AMT=0
17311 IF NUM(T_MAX_AMOUNT$)<0 THEN {
17321 ERR_MAX_AMT=1; VAL_MSG$=MSG("ECGEE9_E04") ! "Maximum amount is less than 0"
17331  } ELSE IF NUM(T_MAX_AMOUNT$)<NUM(T_MIN_AMOUNT$) THEN {
17341 ERR_MAX_AMT=1; VAL_MSG$=MSG("ECGEE9_E05") ! "Maximum amount is less than minimum amount"
17351  }
17361 GOTO DONE_CHECK_MAX_AMT
17371 ERR_INVALID_MAX:
17381 ERR_MAX_AMT=1; VAL_MSG$=MSG("ECGEE9_E06") ! "Input for Maximum amount is invalid"
17391 DONE_CHECK_MAX_AMT:
17401 IF ERR_MAX_AMT THEN MSGBOX VAL_MSG$,MSG("MB_ATTN"),"!"; NEXT_ID=T_MAX_AMT.CTL
17411 RETURN 
17412 ! 
17422 CHECK_BUYER:
17432 ERR_APP_BUYER=0
17442 ECA_CHAN=HFN; OPEN (ECA_CHAN)"ECA"+%C$
17452 FIND (ECA_CHAN,KEY=APP_BUYER_ID$,DOM=*NEXT)BUYERS$; CLOSE (ECA_CHAN); GOTO 17472
17453 CLOSE (ECA_CHAN)
17462 ERR_APP_BUYER=1; MSGBOX MSG("ECGEE9_E07",STP(APP_BUYER_ID$,2)),MSG("WARNING"),"!"; NEXT_ID=APP_BUYER_ID.CTL; APP_BUYER_ID$=""; RETURN 
17472 IF POS("@"=BUYERS$(109,60))=0 THEN ERR_APP_BUYER=1; MSGBOX MSG("ECGEE9_E08",STP(BUYERS_ID$)),MSG("WARNING"),"!"; NEXT_ID=APP_BUYER_ID.CTL; RETURN 
17482 RETURN 
17483 ! 
17484 CHECK_UNIQUENESS:
17485 ERR_UNIQ_APP=0
17486 FOR GROUP_IDX=1 TO NUM_ENTRIES
17487 APP_REC$=MSG("ECGEE9_E09",STP(APP_BUYER_ID$[GROUP_IDX],2),STR(MIN_AMT[GROUP_IDX]),STR(MAX_AMT[GROUP_IDX]))
17500 IF STP(APP_BUYER_ID$,2)=STP(APP_BUYER_ID$[GROUP_IDX],2) THEN {
17510 IF EDIT_MODE THEN GOTO *CONTINUE
17520 IF ADD_MODE THEN ERR_UNIQ_APP=1; VAL_MSG$=MSG("ECGEE9_E10",STP(APP_BUYER_ID$,2)); GOTO *BREAK
17530  }
17540 IF NUM(T_MIN_AMOUNT$)>=MIN_AMT[GROUP_IDX] AND NUM(T_MIN_AMOUNT$)<=MAX_AMT[GROUP_IDX] THEN {
17550 ERR_UNIQ_APP=1; VAL_MSG$=MSG("ECGEE9_E11"); GOTO *BREAK
17560  }
17570 IF NUM(T_MAX_AMOUNT$)>=MIN_AMT[GROUP_IDX] AND NUM(T_MAX_AMOUNT$)<=MAX_AMT[GROUP_IDX] THEN {
17580 ERR_UNIQ_APP=1; VAL_MSG$=MSG("ECGEE9_E12"); GOTO *BREAK
17590  }
17600 NEXT GROUP_IDX
17610 IF ERR_UNIQ_APP THEN MSGBOX VAL_MSG$+SEP+SEP+APP_REC$,MSG("MB_ATTN"),"!"; NEXT_ID=APP_BUYER_ID.CTL
17620 RETURN 
17630 ! 
17640 VALIDATE_ALL:
17650 NOT_VALID=0
17660 GOSUB GET_GROUP_ENTRIES
17670 GOSUB CHECK_BUYER; IF ERR_APP_BUYER THEN NOT_VALID=1; GOTO *RETURN
17680 GOSUB CHECK_MIN_AMT; IF ERR_MIN_AMT THEN NOT_VALID=1; GOTO *RETURN
17690 GOSUB CHECK_MAX_AMT; IF ERR_MAX_AMT THEN NOT_VALID=1; GOTO *RETURN
17700 GOSUB CHECK_UNIQUENESS; IF ERR_UNIQ_APP THEN NOT_VALID=1; GOTO *RETURN
17710 RETURN 
17720 ! 
17730 GET_GROUP_ENTRIES:
17740 DIM APP_BUYER_ID$[MAX_ENTRIES],MIN_AMT[MAX_ENTRIES],MAX_AMT[MAX_ENTRIES]
17750 MIN_FN=HFN; OPEN (MIN_FN,ERR=DONE_GET_GROUP)"EE9"+%C$
17760 NUM_ENTRIES=0
17770 SEARCH_KEY$=GROUP_TYPE$+PAD(CUST_CODE$,10)+PAD(SEQ_NO$,3)
17780 READ (MIN_FN,KEY=GROUP_TYPE$+PAD(CUST_CODE$,10)+PAD(SEQ_NO$,3),DOM=*NEXT)
17790 NEXT_ENTRY_KEY$=KEY(MIN_FN,END=DONE_GET_GROUP); READ (MIN_FN)A$,MIN,MAX; IF MID(NEXT_ENTRY_KEY$,1,14)<>SEARCH_KEY$ THEN GOTO DONE_GET_GROUP
17800 ++NUM_ENTRIES
17810 APP_BUYER_ID$[NUM_ENTRIES]=A$(15,15)
17820 MIN_AMT[NUM_ENTRIES]=MIN
17830 MAX_AMT[NUM_ENTRIES]=MAX
17840 GOTO 17790
17850 DONE_GET_GROUP:
17860 CLOSE (MIN_FN)
17870 RETURN 
17880 ! 
56002 REM "205923-Tiered purchase approval - by dollar amount ranges.
