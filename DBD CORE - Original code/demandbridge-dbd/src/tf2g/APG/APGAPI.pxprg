0010 ! APGAPI - A/P Open Invoice Detail Inquiry
0035 REM "5.6 - 04/10/08 - 10.673611 - jir - SSP# 180482
0037 REM "180482-GUI - where is the SAP, M1-M3 options?                      
0040 REM "Copyright 2008 DemandBridge, Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "APGAPI","../APG/AP.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 IF ARG_1$="H" THEN _FILE_NAME$="APQ"+%C$,ARG_1$="",HIST=1 ELSE _FILE_NAME$="API"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=2,_CUR_KEY$=""
0430 DIM _KEYS$[1:3]; _KEYS$[1]="VENDOR$",_KEYS$[2]="INV_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 IF HIST THEN PRINT 'CAPTION'(MSG("APGAPQ")+" - APGAPI")
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1015 IF ID$="VENDOR" THEN CALL "ZZWLKU;PARSE_VEND",VENDOR$,%VEND_DIV$,%VEND_CODE$
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;PARSE_VEND",VENDOR$,VEND_DIV$,VEND_CODE$; VENDOR$=VEND_DIV$+VEND_CODE$
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=INV_DATE.CTL
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=INV_DATE.CTL,INV_ON_HOLD$="N"
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1415 ORIG_UPDT_IN_FYAP$=TF_YEAR$+ACCT$
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 WRITE (_FIL_NO,KEY=_KEY$)
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0; _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1480 NEXT_ID=VENDOR.CTL
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0; _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 IF _KEY$=_CUR_KEY$ THEN _KEY$=KEN(_FIL_NO,END=END_OF_FILE) ! Get past extracted record
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 EXTRACT (_FIL_NO,KEY=_KEY$)
3060 _CUR_KEY$=_KEY$,VENDOR$=VEND_DIV$+VEND_CODE$
3065 TF_YEAR$=MID(ORIG_UPDT_IN_FYAP$,1,4),ACCT$=MID(ORIG_UPDT_IN_FYAP$,5,2)
3070 RETURN 
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=VEND_DIV.CTL,_FIRST_FIELD=INV_DATE.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 TRANS_DETAIL_LINK$=STR(TRANS_DETAIL_LINK)
10030 GL_DETAIL_LINK$=STR(GL_DETAIL_LINK)
10040 TOTAL_BOOKED_TO_AP$=STR(TOTAL_BOOKED_TO_AP)
10050 SPECIAL_INV_AMT_1$=STR(SPECIAL_INV_AMT_1)
10060 SPECIAL_INV_AMT_2$=STR(SPECIAL_INV_AMT_2)
10070 SPECIAL_INV_AMT_3$=STR(SPECIAL_INV_AMT_3)
10080 SPECIAL_INV_AMT_4$=STR(SPECIAL_INV_AMT_4)
10090 ORIG_DISC_AVAIL$=STR(ORIG_DISC_AVAIL)
10100 WC_INS_WH$=STR(WC_INS_WH)
10110 EXTEND_DUE_DT$=STR(EXTEND_DUE_DT)
10120 ORIG_INV_AMT$=STR(ORIG_INV_AMT)
10130 DISC_TAKEN_TO_DT$=STR(DISC_TAKEN_TO_DT)
10140 PYMNTS_APPLIED_TO_DT$=STR(PYMNTS_APPLIED_TO_DT)
10150 BAL_DUE_ON_INVOICE$=STR(BAL_DUE_ON_INVOICE)
10160 POSTED_TO_DT_SPEC_1$=STR(POSTED_TO_DT_SPEC_1)
10170 POSTED_TO_DT_SPEC_2$=STR(POSTED_TO_DT_SPEC_2)
10180 POSTED_TO_DT_SPEC_3$=STR(POSTED_TO_DT_SPEC_3)
10190 POSTED_TO_DT_SPEC_4$=STR(POSTED_TO_DT_SPEC_4)
10200 GROSS_AMT_ALT_CURR$=STR(GROSS_AMT_ALT_CURR)
10210 DISC_AMT_ALT_CURR$=STR(DISC_AMT_ALT_CURR)
10220 ALT_GROSS_AMT_ALT_C$=STR(ALT_GROSS_AMT_ALT_C)
10230 ALT_DISC_AMT_PTD$=STR(ALT_DISC_AMT_PTD)
10240 DISC_AVAIL_2ND$=STR(DISC_AVAIL_2ND)
10250 API_UNUSED_2$=STR(API_UNUSED_2)
10260 API_UNUSED_3$=STR(API_UNUSED_3)
10270 API_UNUSED_4$=STR(API_UNUSED_4)
10280 API_UNUSED_5$=STR(API_UNUSED_5)
10290 API_UNUSED_6$=STR(API_UNUSED_6)
10300 API_UNUSED_7$=STR(API_UNUSED_7)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="TRANS_DETAIL_LINK",_X=TRANS_DETAIL_LINK.CTL,TRANS_DETAIL_LINK=NUM(TRANS_DETAIL_LINK$,ERR=NON_NUMERIC)
11030 _X$="GL_DETAIL_LINK",_X=GL_DETAIL_LINK.CTL,GL_DETAIL_LINK=NUM(GL_DETAIL_LINK$,ERR=NON_NUMERIC)
11040 _X$="TOTAL_BOOKED_TO_AP",_X=TOTAL_BOOKED_TO_AP.CTL,TOTAL_BOOKED_TO_AP=NUM(TOTAL_BOOKED_TO_AP$,ERR=NON_NUMERIC)
11050 _X$="SPECIAL_INV_AMT_1",_X=SPECIAL_INV_AMT_1.CTL,SPECIAL_INV_AMT_1=NUM(SPECIAL_INV_AMT_1$,ERR=NON_NUMERIC)
11060 _X$="SPECIAL_INV_AMT_2",_X=SPECIAL_INV_AMT_2.CTL,SPECIAL_INV_AMT_2=NUM(SPECIAL_INV_AMT_2$,ERR=NON_NUMERIC)
11070 _X$="SPECIAL_INV_AMT_3",_X=SPECIAL_INV_AMT_3.CTL,SPECIAL_INV_AMT_3=NUM(SPECIAL_INV_AMT_3$,ERR=NON_NUMERIC)
11080 _X$="SPECIAL_INV_AMT_4",_X=SPECIAL_INV_AMT_4.CTL,SPECIAL_INV_AMT_4=NUM(SPECIAL_INV_AMT_4$,ERR=NON_NUMERIC)
11090 _X$="ORIG_DISC_AVAIL",_X=ORIG_DISC_AVAIL.CTL,ORIG_DISC_AVAIL=NUM(ORIG_DISC_AVAIL$,ERR=NON_NUMERIC)
11100 _X$="WC_INS_WH",_X=WC_INS_WH.CTL,WC_INS_WH=NUM(WC_INS_WH$,ERR=NON_NUMERIC)
11110 _X$="EXTEND_DUE_DT",_X=EXTEND_DUE_DT.CTL,EXTEND_DUE_DT=NUM(EXTEND_DUE_DT$,ERR=NON_NUMERIC)
11120 _X$="ORIG_INV_AMT",_X=ORIG_INV_AMT.CTL,ORIG_INV_AMT=NUM(ORIG_INV_AMT$,ERR=NON_NUMERIC)
11130 _X$="DISC_TAKEN_TO_DT",_X=DISC_TAKEN_TO_DT.CTL,DISC_TAKEN_TO_DT=NUM(DISC_TAKEN_TO_DT$,ERR=NON_NUMERIC)
11140 _X$="PYMNTS_APPLIED_TO_DT",_X=PYMNTS_APPLIED_TO_DT.CTL,PYMNTS_APPLIED_TO_DT=NUM(PYMNTS_APPLIED_TO_DT$,ERR=NON_NUMERIC)
11150 _X$="BAL_DUE_ON_INVOICE",_X=BAL_DUE_ON_INVOICE.CTL,BAL_DUE_ON_INVOICE=NUM(BAL_DUE_ON_INVOICE$,ERR=NON_NUMERIC)
11160 _X$="POSTED_TO_DT_SPEC_1",_X=POSTED_TO_DT_SPEC_1.CTL,POSTED_TO_DT_SPEC_1=NUM(POSTED_TO_DT_SPEC_1$,ERR=NON_NUMERIC)
11170 _X$="POSTED_TO_DT_SPEC_2",_X=POSTED_TO_DT_SPEC_2.CTL,POSTED_TO_DT_SPEC_2=NUM(POSTED_TO_DT_SPEC_2$,ERR=NON_NUMERIC)
11180 _X$="POSTED_TO_DT_SPEC_3",_X=POSTED_TO_DT_SPEC_3.CTL,POSTED_TO_DT_SPEC_3=NUM(POSTED_TO_DT_SPEC_3$,ERR=NON_NUMERIC)
11190 _X$="POSTED_TO_DT_SPEC_4",_X=POSTED_TO_DT_SPEC_4.CTL,POSTED_TO_DT_SPEC_4=NUM(POSTED_TO_DT_SPEC_4$,ERR=NON_NUMERIC)
11200 _X$="GROSS_AMT_ALT_CURR",_X=GROSS_AMT_ALT_CURR.CTL,GROSS_AMT_ALT_CURR=NUM(GROSS_AMT_ALT_CURR$,ERR=NON_NUMERIC)
11210 _X$="DISC_AMT_ALT_CURR",_X=DISC_AMT_ALT_CURR.CTL,DISC_AMT_ALT_CURR=NUM(DISC_AMT_ALT_CURR$,ERR=NON_NUMERIC)
11220 _X$="ALT_GROSS_AMT_ALT_C",_X=ALT_GROSS_AMT_ALT_C.CTL,ALT_GROSS_AMT_ALT_C=NUM(ALT_GROSS_AMT_ALT_C$,ERR=NON_NUMERIC)
11230 _X$="ALT_DISC_AMT_PTD",_X=ALT_DISC_AMT_PTD.CTL,ALT_DISC_AMT_PTD=NUM(ALT_DISC_AMT_PTD$,ERR=NON_NUMERIC)
11240 _X$="DISC_AVAIL_2ND",_X=DISC_AVAIL_2ND.CTL,DISC_AVAIL_2ND=NUM(DISC_AVAIL_2ND$,ERR=NON_NUMERIC)
11250 _X$="API_UNUSED_2",_X=API_UNUSED_2.CTL,API_UNUSED_2=NUM(API_UNUSED_2$,ERR=NON_NUMERIC)
11260 _X$="API_UNUSED_3",_X=API_UNUSED_3.CTL,API_UNUSED_3=NUM(API_UNUSED_3$,ERR=NON_NUMERIC)
11270 _X$="API_UNUSED_4",_X=API_UNUSED_4.CTL,API_UNUSED_4=NUM(API_UNUSED_4$,ERR=NON_NUMERIC)
11280 _X$="API_UNUSED_5",_X=API_UNUSED_5.CTL,API_UNUSED_5=NUM(API_UNUSED_5$,ERR=NON_NUMERIC)
11290 _X$="API_UNUSED_6",_X=API_UNUSED_6.CTL,API_UNUSED_6=NUM(API_UNUSED_6$,ERR=NON_NUMERIC)
11300 _X$="API_UNUSED_7",_X=API_UNUSED_7.CTL,API_UNUSED_7=NUM(API_UNUSED_7$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN VEND_DIV$="",VENDOR$=""
13030 IF _CLR_FLG$="R" THEN VEND_CODE$=""
13040 IF _CLR_FLG$="R" THEN INV_NUM$=""
13050 INV_DATE$=""
13060 TERMS_CODE$="",TF_YEAR$="",ACCT$=""
13070 INV_DUE_DATE$=""
13080 DISC_EXPIRE_DATE$=""
13090 INV_COMMENT$=""
13100 OUR_REF_NUM$=""
13110 PRINT_ON_BANK_CODE$=""
13120 CATEGORY$=""
13130 PYMNT_SELECTION$=""
13140 PYMNT_PRIORITY_CODE$=""
13150 INV_ON_HOLD$=""
13160 INV_SPECIAL_CODE$=""
13170 INV_TYPE$=""
13180 APPLY_TO_INV_NUM$=""
13190 ORIG_UPDT_IN_FYAP$=""
13200 GREATEST_FY$=""
13210 GREATEST_ACCTPD$=""
13220 AUDIT_NUM$=""
13230 API_UNUSED_1$=""
13240 SPER_CODE$=""
13250 ORIG_COMP_CODE$=""
13260 SRC_LOC_TYPE$=""
13270 ALT_CURR_CODE$=""
13280 DISC_EXPIRES_2ND$=""
13290 API_UNUSED_8$=""
13300 TRANS_DETAIL_LINK=0
13310 GL_DETAIL_LINK=0
13320 TOTAL_BOOKED_TO_AP=0
13330 SPECIAL_INV_AMT_1=0
13340 SPECIAL_INV_AMT_2=0
13350 SPECIAL_INV_AMT_3=0
13360 SPECIAL_INV_AMT_4=0
13370 ORIG_DISC_AVAIL=0
13380 WC_INS_WH=0
13390 EXTEND_DUE_DT=0
13400 ORIG_INV_AMT=0
13410 DISC_TAKEN_TO_DT=0
13420 PYMNTS_APPLIED_TO_DT=0
13430 BAL_DUE_ON_INVOICE=0
13440 POSTED_TO_DT_SPEC_1=0
13450 POSTED_TO_DT_SPEC_2=0
13460 POSTED_TO_DT_SPEC_3=0
13470 POSTED_TO_DT_SPEC_4=0
13480 GROSS_AMT_ALT_CURR=0
13490 DISC_AMT_ALT_CURR=0
13500 ALT_GROSS_AMT_ALT_C=0
13510 ALT_DISC_AMT_PTD=0
13520 DISC_AVAIL_2ND=0
13530 API_UNUSED_2=0
13540 API_UNUSED_3=0
13550 API_UNUSED_4=0
13560 API_UNUSED_5=0
13570 API_UNUSED_6=0
13580 API_UNUSED_7=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=VEND_CODE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=INV_NUM.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 QUERY: VAL$=""
15005 IF HIST THEN QRY$="QRY_APQ" ELSE QRY$="QRY_API"
15010 PROCESS QRY$,"../APG/AP.EN",VAL$
15020 IF STP(VAL$)="" THEN NEXT_ID=VENDOR.CTL; EXIT 
15030 VENDOR$=VAL$(1,10),INV_NUM$=VAL$(11),_KEY$=VAL$
15040 GOSUB 1045
15050 NEXT_ID=INV_DATE.CTL
15060 RETURN 
56000 ! "180482-GUI - where is the SAP, M1-M3 options?                      
