0010 ! APGCMA - File Maintenance Program for APR_ManChkHdr (="APR"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Jun. 12, 2003 17:01
0030 ! ************************************************************************
0035 REM "5.7 - 10/28/16 - 16.315833 - tma - SSP# 266012
0037 REM "266012-Manual AP check entry.  found way to create a blank invoice 
0040 REM "Copyright 2016 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "APGCMA","../APG/AP.EN"
0080 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 X0$="AP2CMA",X1$="Manual Check Entry"
0130 X0=-1; X2=-1
0140 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,X2
0150 ! 
0155 %NO_NEW_BATCH=0
0160 CALL "ZGBATC",X3$,X4$,X0$,X9; IF X9=1 THEN CMD_STR$="END"; EXIT 
0170 %APGCMA$=MSG("APGCMA"); IF STP(X3$(174,4))<>"" THEN %APGCMA$+=" - Batch No: "+X3$(174,4)
0180 ! 
0190 DIM Z[NUM(X3$(60,3))],APR[2],AP4[2],APT[4],API[14],APN[7],T[4]
0200 ! Open Files
0210 Z$="01O APR...  02O ZYB...  03O AP4...  04O APT...  05O API...  07O APQ...  08O APU...  09O GL1...  10O APY...  11O APM...  12O APN...  06O ZZPARM  "
0220 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
0230 ! 
0300 ! IO List Section
0310 IOLIST APR$,APR{ALL}
0320 IOLIST ZYB$
0330 IOLIST AP4$,AP4{ALL}
0340 IOLIST APT$,APT{ALL}
0350 IOLIST APM$,APM0,APM1,APM2
0360 IOLIST APN$,APN{ALL}
0370 IOLIST API$,API{ALL}
0400 ! 
0410 GOSUB GET_PARAM
0470 %APR$=FIN(Z[1],"FILENAME")
0475 ACTION_CODE$="H" ! SSP 224588
0480 DEL_FLG=0; EXT_FLG=0
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 GOSUB CHECK_AUDIT
0530 GOSUB LOAD_FY
0540 GOSUB LOAD_BANK_CODE
0550 CHECK_NUM$=""
0560 REFRESH_FLG=1
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
0930 %FY$=""; %ACCTPD$=""; %BANK_CODE$=""; %ACTION_CODE$=""
0970 EXIT 
1000 ! find Header information
1010 FIND_REC:
1013 CHECK_NUM$=PAD(CHECK_NUM$,6,0,"0"); REFRESH_FLG=1 ! SSP 224588
1015 DIM APR[2]
1020 DIM KEY_1$(20); IF ACTION_CODE$="P" THEN KEY_1$(1,4)=CR_FY$,KEY_1$(5,2)=CR_ACCTPD$,KEY_1$(7,3)=BANK_CODE$,KEY_1$(10,1)=ACTION_CODE$,KEY_1$(11)=VENDOR$ ELSE KEY_1$(1,4)=CR_FY$,KEY_1$(5,2)=CR_ACCTPD$,KEY_1$(7,3)=BANK_CODE$,KEY_1$(10,1)=ACTION_CODE$,KEY_1$(11)=CHECK_NUM$+"    "
1030 FIND (Z[1],KEY=KEY_1$,DOM=NEW_HEADER)IOL=0310
1040 CHECK_DATE$=APR$(31,6); VENDOR$=APR$(21,10)
1050 NET_AMT=APR[0]; BALANCE=APR[1]
1060 CALL "*wingrp;disable",HEAD.GRP$; CALL "*WINGRP;ENABLE",VEND.GRP$ ! SSP21900 jdf
1065 CALL "*wingrp;Enable",INV_2.GRP$
1070 DEL_FLG=1; BUTTON ENABLE DELETE_1.CTL; NEXT_ID=INV_NUM.CTL
1080 EXT_FLG=1
1085 BUTTON ENABLE EXIT_2.CTL
1090 RETURN 
1200 ! Check to see if Check exit
1210 CHECK_STAT:
1230 IF ACTION_CODE$="R" THEN REV_FLG=0; GOSUB CHECK_REVERSE; CALL "*wingrp;Enable",HEAD.GRP$; CALL "*wingrp;Disable",INV_2.GRP$; BUTTON DISABLE DELETE_1.CTL; ACTION_CODE$="H"; NEXT_ID=CHECK_NUM.CTL; REFRESH_FLG=1; RETURN 
1240 READ (Z[10],KEY=KEY_1$(7,3)+KEY_1$(11,6),DOM=*NEXT)
1250 KEY_10$=KEY(Z[10],END=*RETURN)
1260 IF KEY_10$(1,9)<>KEY_1$(7,3)+KEY_1$(11,6) THEN RETURN 
1270 MSGBOX MSG("APGCMA_1")+SEP+MSG("APGCMA_2")+"?",MSG("CONFIRM"),"?,YESNO",ANS$
1275 IF ANS$="NO" THEN RETURN ! SSP 255299
1280 ACTION_CODE$="R"; REV_FLG=0; KEY_1$(10,1)="R"; REFRESH_FLG=1 ! SSP 255299
1290 EXTRACT (Z[1],KEY=KEY_1$,DOM=*NEXT)IOL=0310; EXITTO FIND_REC ! SSP 255299
1310 GOSUB CHECK_REVERSE; CALL "*wingrp;Enable",HEAD.GRP$; CALL "*wingrp;Disable",INV_2.GRP$; BUTTON DISABLE DELETE_1.CTL; ACTION_CODE$="H"; NEXT_ID=CHECK_NUM.CTL; REFRESH_FLG=1; RETURN ! SSP 255299
1390 RETURN 
2000 ! new header
2010 NEW_HEADER:
2015 IF STP(CHECK_NUM$,2)="" AND ACTION_CODE$<>"P" THEN RETURN ! SSP 224588
2017 GOSUB CHECK_STAT; IF REV_FLG THEN RETURN 
2020 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YesNo",ANS$
2030 IF ANS$="NO" THEN ACTION_CODE$="H"; NEXT_ID=CHECK_NUM.CTL; REFRESH_FLG=1; RETURN 
2040 IF ACTION_CODE$="V" THEN GOSUB VOID_CHECK; ACTION_CODE$="H"; NEXT_ID=CHECK_NUM.CTL; REFRESH_FLG=1; RETURN 
2170 CALL "*WINGRP;ENABLE",VEND.GRP$
2180 REFRESH_FLG=1
2190 RETURN 
2200 ! Add the header Record
2210 ADD_HEAD:
2220 DIM APR$(38)
2230 APR$(1,4)=CR_FY$; APR$(5,2)=CR_ACCTPD$
2240 APR$(7,3)=BANK_CODE$; APR$(10,1)=ACTION_CODE$
2245 IF ACTION_CODE$="P" THEN APR$(11,10)=VENDOR$ ELSE APR$(11,6)=CHECK_NUM$
2250 APR$(21,10)=VENDOR$
2260 APR$(31,6)=CHECK_DATE$
2270 APR[0]=NET_AMT; APR[1]=BALANCE
2300 WRITE (Z[1],KEY=KEY_1$)IOL=0310
2310 MSGBOX "Check Information Updated","FYI","INFO,OK"
2320 DEL_FLG=1; BUTTON ENABLE DELETE_1.CTL; NEXT_ID=INV_NUM.CTL
2330 EXT_FLG=1
2340 BUTTON ENABLE EXIT_2.CTL
2390 RETURN 
2500 ! Void a Check
2510 VOID_CHECK:
2520 DIM APR$(38)
2530 APR$(1,20)=KEY_1$
2540 WRITE (Z[1],KEY=KEY_1$)IOL=0310
2590 RETURN 
3000 ! Get Invoice Information.
3010 GET_INVOICE:
3020 KEY_5$=VENDOR$+INV_NUM$
3030 FIND (Z[5],KEY=KEY_5$,DOM=*NEXT)IOL=0370; GOTO 3037
3035 FIND (Z[7],KEY=KEY_5$,DOM=NO_INV)IOL=0370
3037 IF API$(66,3)<>APR$(7,3) THEN MSGBOX MSG("APGCMA_6")+": "+API$(66,2),MSG("WARNING"),"!"
3039 GOSUB INV_MSG; IF ANS$="NO" THEN INV_NUM$=""; NEXT_ID=INV_NUM.CTL; RETURN 
3040 INV_DATE$=API$(21,6); INV_AMT=API[10]
3050 TERM_CODE$=API$(27,2); VEND_CAT$=API$(69,9)
3060 TF_COMMENT$=API$(41,15); TF_REF$=API$(56,10)
3070 SPER$=API$(114,4)
3080 GROSS_APP=API[13]; DISC_TAKEN=API[7]-API[11]
3090 IF API$(35,6)<CHECK_DATE$ THEN DISC_TAKEN=0
3100 NET_AMT_PAID=GROSS_APP-DISC_TAKEN
3110 INV_AMT=API[13]
3170 CALL "*wingrp;Enable",INV_1.GRP$
3175 IF F0$(70,1)="Y" THEN CALL "*WINGRP;ENABLE",SALE.GRP$
3180 CALL "*wingrp;Enable",UPD.GRP$; REFRESH_FLG=1
3185 NEXT_ID=INV_DATE.CTL
3190 RETURN 
3200 ! get Manual Check Detail
3210 GET_CHECK_DETAIL:
3215 DIM APT[4]
3218 PREV_AMT=0,GL_FLG=0 ! ~SSP 224588
3220 KEY_4$=KEY_1$+INV_NUM$
3230 FIND (Z[4],KEY=KEY_4$,DOM=GET_INVOICE)IOL=0340
3240 INV_DATE$=APT$(31,6); TERM_CODE$=APT$(37,2)
3250 VEND_CAT$=APT$(39,9); TF_COMMENT$=APT$(48,15)
3260 TF_REF$=APT$(63,10); SPER$=APT$(73,4)
3270 INV_AMT=APT[4]; GROSS_APP=APT[1]
3280 DISC_TAKEN=APT[2]; NET_AMT_PAID=APT[3]
3290 INV_BAL=APT[4]-APT[1]
3310 PREV_AMT=APT[1]-APT[2] ! SSP 224588
3370 IF APT[0]>=0 THEN A0=APT[0]; CALL "*WINGRP;ENABLE",GL_1.GRP$ ELSE CALL "*WINGRP;ENABLE",UPD.GRP$ ! SSP 224588 
3380 DEL_FLG=2; BUTTON ENABLE DELETE_1.CTL; REFRESH_FLG=1
3385 EXT_FLG=2; CALL "*wingrp;Enable",INV_1.GRP$; IF F0$(70,1)="Y" THEN CALL "*WINGRP;ENABLE",SALE.GRP$
3390 RETURN 
3500 ! Invoice is not Found
3510 NO_INV:
3515 IF NUL(INV_NUM$) THEN NEXT_ID=INV_NUM.CTL; RETURN ! SSP#232468
3520 MSG_1$=MSG("INV_NOF")+"."+SEP+MSG("WOULD_ADD")+"?"
3530 MSGBOX MSG_1$,MSG("CONFIRM"),"?,YesNo",ANS$
3540 IF ANS$="NO" THEN {
3550 INV_NUM$=""
3560 NEXT_ID=INV_NUM.CTL
3570 RETURN  }
3575 CALL "*wingrp;Enable",INV_FIELDS.GRP$; CALL "*wingrp;Enable",INV_1.GRP$
3580 IF STP(MID(INV_NUM$,1,2))="PP" THEN GL_FLG=0; CALL "*wingrp;Disable",GL_1.GRP$; CALL "*wingrp;Enable",UPD.GRP$ ELSE GL_FLG=1; CALL "*wingrp;Enable",GL_1.GRP$; CALL "*wingrp;Disable",UPD.GRP$
3585 TERM_CODE$=AP4$(286,2); VEND_CAT$=AP4$(247,9); TF_COMMENT$=AP4$(256,15)
3590 RETURN 
3600 ! Call General Ledger
3610 GET_GL:
3615 DIM T[4]
3620 L0=1,F=Z[8],A0=APT[0],V3=Z[9],V4=-1,V5=-1,A9$="",D9$=""; NO_GL=1
3630 T[0]-=(INV_AMT-DISC_TAKEN*POS("L"=F0$(15,1))) ! SSP#228191
3640 IF APT[0]=0 AND AP4$(271,1)<>" " THEN T9$=AP4$(271,12),T[1]=-T[0] ELSE T9$="" ! SSP#279245
3642 T[0]=-T[0] ! T[0]=ABS(T[0]) !SSP#279245
3645 IF A0=0 THEN D9$="" ! SSP224588
3650 CALL "ZZDISP","AX","000000000000","G/L",X3$,W2$,"",0,0,X4$
3655 M2=0; FOR X=1 TO LEN(W2$); M2=M2+POS("0"=W2$(X,1)); NEXT X
3660 PERFORM "GLGXAA"
3680 CALL "*wingrp;Disable",GL_1.GRP$; CALL "*wingrp;Enable",UPD.GRP$
3690 RETURN 
3700 ! load G/L Indel
3710 LOAD_GL_IDX:
3720 GL_IDX=DEC(MID(Y$,1,2))
3730 IF STP(INV_NUM$)<>"" THEN GOSUB WRITE_REC ! SSP#266012
3740 NEXT_ID=INV_NUM.CTL
3750 GL_IDX=0 ! SP 224588
3755 GOSUB CLEAR_INV_INFO
3760 CALL "*wingrp;Disable",INV_FIELDS.GRP$
3770 NEXT_ID=INV_NUM.CTL
3780 REFRESH_FLG=1 ! SSP 224588
3790 RETURN 
3900 ! Pay Invoice
3910 INV_MSG:
3920 MSG_1$=MSG("INV_OF")+"."+SEP+MSG("APGCMA_5")+"?"
3930 MSGBOX MSG_1$,MSG("CONFIRM"),"?,YesNo",ANS$
3940 RETURN 
4000 ! Update the invoice Information
4010 WRITE_REC:
4040 GOSUB LOAD_INV_INFO
4100 WRITE (Z[4],KEY=KEY_4$)IOL=0340
4110 MSGBOX MSG("INV_UPD"),MSG("FYI"),"INFO,OK"
4120 BALANCE=BALANCE+PREV_AMT-NET_AMT_PAID; NEXT_ID=INV_NUM.CTL ! SSP 224588
4190 CALL "*wingrp;Disable",UPD.GRP$; CALL "*wingrp;Disable",GL_1.GRP$; REFRESH_FLG=1 ! SSP 224588
4195 READ (Z[1],KEY=KEY_1$)IOL=0310
4200 APR[1]=BALANCE
4210 WRITE (Z[1],KEY=KEY_1$)IOL=0310
4290 RETURN 
4500 ! load Invoice Information
4510 LOAD_INV_INFO:
4520 DIM APT$(76),APT[4]
4530 APT$(1,4)=CR_FY$; APT$(5,2)=CR_ACCTPD$
4540 APT$(7,3)=BANK_CODE$; APT$(10,1)=ACTION_CODE$
4545 IF ACTION_CODE$="P" THEN APT$(11,10)=VENDOR$ ELSE APT$(11,6)=CHECK_NUM$
4550 APT$(21,10)=INV_NUM$
4560 APT$(31,6)=INV_DATE$; APT$(37,2)=TERM_CODE$
4570 APT$(39,9)=VEND_CAT$; APT$(48,15)=TF_COMMENT$
4580 APT$(63,10)=TF_REF$; APT$(73,4)=SPER$
4585 IF GL_IDX=0 THEN APT[0]=-1 ELSE APT[0]=GL_IDX
4590 APT[1]=GROSS_APP; APT[2]=DISC_TAKEN
4600 APT[3]=NET_AMT_PAID; APT[4]=INV_AMT
4690 RETURN 
5000 ! Delete the Record
5010 DEL_REC:
5020 SWITCH DEL_FLG
5030 CASE 1
5040 MSGBOX MSG("DEL_CHECK"),MSG("VERIFY"),"?,YesNo",ANS$
5050 IF ANS$="NO" THEN NEXT_ID=INV_NUM.CTL; RETURN 
5060 FIND (Z[1],KEY=KEY_1$,DOM=5310)
5070 REMOVE (Z[1],KEY=KEY_1$)
5075 GOSUB DELETE_INV_INFO
5080 MSGBOX MSG("CHECK_DEL"),MSG("FYI"),"INFO,OK"
5090 BUTTON DISABLE DELETE_1.CTL; NEXT_ID=CHECK_NUM.CTL
5095 CALL "*wingrp;Enable",HEAD.GRP$; CALL "*WINGRP;DISABLE",VEND.GRP$; CALL "*wingrp;Disable",INV_1.GRP$; CALL "*wingrp;Disable",INV_2.GRP$; CALL "*wingrp;Disable",INV_FIELDS.GRP$; CALL "*WINGRP;DISABLE",DISC.GRP$; IF F0$(70,1)="Y" THEN CALL "*WINGRP;DISABLE",SALE.GRP$
5097 GOSUB CLEAR_INV_INFO
5098 BUTTON DISABLE EXIT_2.CTL
5100 RETURN 
5110 CASE 2
5120 MSGBOX MSG("DEL_INV"),MSG("VERIFY"),"?,YesNo",ANS$
5130 IF ANS$="NO" THEN NEXT_ID=EXIT_1.CTL; RETURN 
5140 FIND (Z[4],KEY=KEY_4$,DOM=5300)
5150 REMOVE (Z[4],KEY=KEY_4$)
5160 MSGBOX MSG("INV_DEL"),MSG("FYI"),"INFO,OK"
5170 BALANCE+=NET_AMT_PAID; NEXT_ID=INV_NUM.CTL
5175 APR[1]=BALANCE; WRITE (Z[1],KEY=KEY_1$)IOL=0310
5177 CALL "*wingrp;Disable",INV_FIELDS.GRP$
5179 GOSUB CLEAR_INV_INFO
5180 RETURN 
5280 END SWITCH 
5290 RETURN 
5300 NEXT_ID=INV_NUM.CTL; REFRESH_FLG=1; RETURN 
5310 NEXT_ID=CHECK_NUM.CTL; ACTION_CODE$="H"; REFRESH_FLG=1; RETURN 
5500 ! Delete invoice
5510 DELETE_INV_INFO:
5520 READ (Z[4],KEY=KEY_1$,DOM=*NEXT)
5530 KEY_4$=KEY(Z[4],END=*RETURN); READ (Z[4],KEY=KEY_4$)
5540 IF KEY_4$(1,20)<>KEY_1$ THEN RETURN 
5550 REMOVE (Z[4],KEY=KEY_4$)
5560 GOTO 5530
5590 RETURN 
5800 ! CHECK TO MAKE SURE AMT PAID IS NOT GREATER THAN CHECK AMT.
5810 CHECK_INV_AMT:
5820 IF NET_AMT_PAID<=NET_AMT OR NET_AMT_PAID<=BALANCE THEN RETURN ! SSP 224588 !ssp#241077
5830 MSGBOX MSG("GR_BAL"),MSG("WARNING"),"STOP"
5840 GROSS_APP=0; DISC_TAKEN=0; INV_BAL=INV_AMT; NET_AMT_PAID=0
5850 NEXT_ID=GROSS_APP.CTL
5890 RETURN 
6000 ! Reverse Check Amount
6010 CHECK_REVERSE:
6020 READ (Z[10],KEY=KEY_1$(7,3)+KEY_1$(11,6),DOM=*NEXT)
6030 KEY_10$=KEY(Z[10],END=6050) ! Send to the no check message
6040 IF KEY_10$(1,9)=KEY_1$(7,3)+KEY_1$(11,6) THEN GOTO 6100
6050 MSGBOX MSG("APGCMA_3"),MSG("NOT_FOUND"),"!"; RETURN 
6100 ! Processing Check Number
6110 MSGBOX MSG("APGCMA_4")+": "+KEY_1$(11,6),MSG("FYI"),"INFO"
6120 DIM APM$(76); F3$=""
6130 READ (Z[11],KEY=KEY_10$(10,6)+KEY_10$(1,3)+KEY_1$(11,6),DOM=*NEXT)
6140 READ (Z[11],END=6180)IOL=0350 ! Add when it goes if it ends...
6150 IF APM$(7,9)<>KEY_1$(7,3)+KEY_1$(11,6) THEN GOTO 6180
6160 F3$+=APM$(16,2); VENDOR$=APM$(25,10); CHECK_DATE$=APM$(19,6); NET_AMT-=APM2; APM_CHECK_DATE$=APM$(19,6); CALL "ZZWDTE;DISPLAY",APM_CHECK_DATE$; CHECK_DATE.CTL'VALUE$=APM_CHECK_DATE$; REFRESH_FLG=1 ! SSP219000 jdf
6165 MSGBOX MSG("APGCMA_7"),MSG("CONFIRM"),"YESNO,1,!",ANSWER$ ! SSP219000 jdf
6167 IF ANSWER$="YES" THEN GOSUB CHECK_DATE_CHG ! SSP219000 jdf
6170 GOTO 6140
6180 REFRESH_FLG=1; REV_FLG=1
6190 GOSUB LOAD_CHECK_HEADER
6200 WRITE (Z[1],KEY=KEY_1$)IOL=0310
6210 ! 
6220 IF F3$="" THEN RETURN 
6230 F4$=KEY_10$(10,6)+KEY_10$(1,3)+KEY_1$(11,6)
6340 FOR I9=1 TO LEN(F3$) STEP 2
6350 READ (Z[12],KEY=F4$+F3$(I9,2),DOM=*NEXT)
6360 DIM APN$(43),APN[7]
6370 READ (Z[12],END=6510)IOL=0360 ! Put the end when I know what number
6380 IF APN$(1,17)<>F4$+F3$(I9,2) THEN GOTO 6510
6390 DIM APT$(76),APT[4]; APT$(1)=KEY_1$+APN$(18,10)
6400 READ (Z[4],KEY=APT$(1,30),DOM=*NEXT)IOL=0340
6410 GOSUB GET_INVOICE_INFO
6420 APT[1]-=APN[1],APT[2]-=APN[2],APT[3]-=APN[7],APN[4]=API[13]
6430 WRITE (Z[4],KEY=APT$(1,30))IOL=0340
6500 GOTO 6360
6510 NEXT I9
6590 RETURN 
6700 ! Get the Invoice Information for Reverse Invoice
6710 GET_INVOICE_INFO:
6720 DIM API$(260),API[14]
6730 FIND (Z[5],KEY=VENDOR$+APT$(21,10),DOM=*NEXT)IOL=0370; GOTO 6760
6740 FIND (Z[7],KEY=VENDOR$+APT$(21,10),DOM=*NEXT)IOL=0370; GOTO 6760
6750 APT$(31,6)=APR$(31,6); APT$(37,2)=AP4$(286,2); APT$(39,9)=AP4$(247,9); APT$(48,15)=AP4$(256,15); RETURN 
6760 APT$(31,6)=API$(21,6)
6770 APT$(37,2)=API$(27,2); APT$(39,9)=API$(69,9)
6780 APT$(48,25)=API$(41,25)
6785 ! IF API$(66,3)<>APR$(7,3) THEN MSGBOX MSG("APGCMA")+": "+API$(66,2),MSG("WARNING"),"!"
6790 RETURN 
7000 ! Load Check Header Info...
7010 LOAD_CHECK_HEADER:
7020 DIM APR$(38)
7030 APR$(1,4)=CR_FY$; APR$(5,2)=CR_ACCTPD$
7040 APR$(7,3)=BANK_CODE$
7050 APR$(10,1)=ACTION_CODE$
7060 APR$(11,6)=CHECK_NUM$
7070 APR$(21,10)=VENDOR$
7080 APR$(31,6)=CHECK_DATE$
7090 APR[0]=NET_AMT; APR[1]=BALANCE
7190 RETURN 
7300 ! Change Check Date   SSP219000 jdf
7310 CHECK_DATE_CHG:! SSP219000 jdf
7320 PROCESS "CALENDAR","./tf2g/ZZW/ZZ.EN",CHECK_DTE$
7330 %B_WINDATE_FMT$=%WINDATE_FMT$,%WINDATE_FMT$="YYYYMMDD" ! SSP219000 jdf
7340 CALL "ZZWDTE;VALIDATE",CHECK_DTE$ ! SSP219000 jdf       
7350 CHECK_DATE$=CHECK_DTE$ ! SSP219000 jdf
7360 %WINDATE_FMT$=%B_WINDATE_FMT$ ! SSP219000 jdf
7370 RETURN ! SSP219000 jdf
8000 ! clear fields
8010 CLEAR_CHECK_INFO:
8020 CHECK_NUM$=""; CHECK_DATE$=""
8030 VENDOR$=""; %VEND_NAME$=""
8040 NET_AMT=0; BALANCE=0
8080 REFRESH_FLG=1; DEL_FLG=0
8090 RETURN 
8100 ! clear invoice info
8110 CLEAR_INV_INFO:
8120 INV_NUM$=""; INV_DATE$=""
8130 DISC_TAKEN$=""; TERM_CODE$=""; %TERMS_DESC_AP$=""
8140 VEND_CAT$=""; %CATEGORY_DESC_VEND$=""
8150 TF_COMMENT$=""; TF_REF$=""
8160 SPER$=""; %SALES_NAME$=""
8170 INV_AMT=0; GROSS_APP=0; DISC_TAKEN=0
8180 NET_AMT_PAID=0; INV_BAL=0
8185 DIM APT(78),APT[4]
8190 REFRESH_FLG=1; DEL_FLG=1
8200 RETURN 
9000 ! Get Parameters
9010 GET_PARAM:
9020 READ (Z[6],KEY=X3$(9,3)+"A/P",DOM=WRAPUP)F0$
9030 DIM F1$(110); READ (Z[6],KEY=X3$(9,3)+"AP2A",DOM=*NEXT)F1$
9040 FIND (Z[6],KEY=X3$(9,3)+"G/LYE"+F0$(7,4),DOM=*NEXT)P1$
9050 DIM SEC$(255); FIND (Z[6],KEY="osec"+X3$(40,3),DOM=*NEXT)SEC$
9060 ! 
9070 GOSUB CHECK_STATUS
9090 RETURN 
9200 ! Check the Check Printing Status.
9210 CHECK_STATUS:
9220 FIND (Z[6],KEY=X3$(9,3)+"APC"+X3$(174,4),DOM=*RETURN)
9230 MSGBOX MSG("CHECK_P_S"),MSG("FYI"),"INFO,OK"
9240 CMD_STR$="END"; EXIT 
9290 RETURN 
9400 ! Check to see if update started or Audit report printed.
9410 CHECK_AUDIT:
9420 FIND (Z[1],KEY="",DOM=*RETURN)V0$,K0$
9430 IF K0$>"" THEN {
9440 MSGBOX MSG("UPDATE_ST"),MSG("FYI"),"INFO,OK"
9450 GOSUB WRAPUP }
9460 EXTRACT (Z[1],KEY="",ERR=WRAPUP)
9470 MSG1$=MSG("AUDIT_RPT")+" "+V0$(22,4)+"."+V0$(26,2)+" "+MSG("HAS_PRT")+SEP+MSG("WOULD_MOD")
9480 MSGBOX MSG1$,MSG("FYI"),"INFO,YesNo",ANS$
9490 IF ANS$="NO" THEN CMD_STR$="END"; EXIT 
9500 REMOVE (Z[1],KEY="")
9510 RETURN 
9700 ! Fiscal Year Status.
9710 FISCAL_YEAR_STAT:
9720 READ (Z[6],KEY=X3$(9,3)+"G/LYE"+CR_FY$,DOM=*RETURN)P1$
9730 IF POS(P1$(99,1)="CR")<>0 THEN {
9740 MSGBOX MSG("CLOSE_YEAR"),MSG("FYI"),"INFO,OK"
9750 CMD_STR$="END"
9760 GOSUB WRAPUP }
9770 RETURN 
9800 ! check Exit Status
9810 EXIT_STATUS:
9820 IF BALANCE<>0 THEN {
9830 MSGBOX MSG("CHECK_NIB"),MSG("FYI"),"!,OK"
9840 NEXT_ID=INV_NUM.CTL
9850 RETURN  }
9900 CMD_STR$="END"
9990 RETURN 
9999 END 
11000 ! Load the default Bank Code
11010 LOAD_BANK_CODE:
11020 DIM PARAM$(200)
11030 READ (Z[6],KEY=%C$+"A/P",DOM=*NEXT)PARAM$
11040 IF PARAM$(16,1)<>"Y" THEN {
11050 READ (Z[2],KEY=PARAM$(17,3),DOM=*RETURN)ZYB$
11060 BANK_CODE_LIST$=ZYB$(1,3)+"-"+ZYB$(4,30)
11070 DROP_BOX LOAD BANK_CODE_LIST.CTL,1,BANK_CODE_LIST$
11080 DROP_BOX WRITE BANK_CODE_LIST.CTL,BANK_CODE_LIST$
11090 BANK_CODE$=BANK_CODE_LIST$(1,3)
11110 NEXT_ID=ACTION_CODE.CTL
11120 RETURN  }
11130 READ (Z[2],KEY="",DOM=*NEXT)
11140 KEY_2$=KEY(Z[2],END=11180); READ (Z[2])ZYB$
11150 BANK_CODE_LIST$+=ZYB$(1,3)+"-"+ZYB$(4,30)+"/"
11160 IF ZYB$(1,3)=PARAM$(17,3) THEN DFLT_BANK_CODE$=ZYB$(1,3)+"-"+ZYB$(4,30)
11170 GOTO 11140
11180 DROP_BOX LOAD BANK_CODE_LIST.CTL,BANK_CODE_LIST$
11190 DROP_BOX WRITE BANK_CODE_LIST.CTL,DFLT_BANK_CODE$
11200 BANK_CODE_LIST$=DFLT_BANK_CODE$; BANK_CODE$=DFLT_BANK_CODE$(1,3)
11205 CALL "*wingrp;Enable",ACCT.GRP$; REFRESH_FLG=1
11210 RETURN 
11300 ! Select the Bank Code
11310 SELECT_BANK_CODE:
11320 BANK_CODE$=BANK_CODE_LIST$(1,3)
11330 REFRESH_FLG=1
11340 NEXT_ID=ACTION_CODE.CTL
11390 RETURN 
12000 ! get vendor information
12010 GET_VEND_INFO:
12020 FIND (Z[3],KEY=VENDOR$,DOM=*RETURN)IOL=0330
12030 ! 
12035 IF NOT(NUL(AP4$(209,12))) THEN MSGBOX MSG("VEND_GL_MS"),MSG("WARNING"),"STOP"; VENDOR$=""; NEXT_ID=VENDOR.CTL; REFRESH_FLG=1; EXIT 
12038 CALL "*WINGRP;ENABLE",CHECK_ADD.GRP$ ! SSP 224588
12040 IF ACTION_CODE$="P" THEN GOSUB FIND_REC
12080 REFRESH_FLG=1
12090 RETURN 
13000 ! CHECK FOR BLANK CHECK NUMBER; !SSP 224588 (13000-13050)
13010 VALID_CHECK:
13020 IF STP(CHECK_NUM$,2)="" AND ACTION_CODE$<>"P" THEN MSGBOX MSG("ENTER_CHK"),MSG("FYI"),"INFO,OK"; NEXT_ID=CHECK_NUM.CTL ! SSP 224588
13050 RETURN 
39000 LOAD_FY:
39010 ! ONLY_OPEN$="Y" means only load open FY's, TF_MODULE$ can be set to second part of key for that system parameter record, ie A/P, A/R, I/C
39020 CR_FY$=""; ONLY_OPEN$="Y"
39040 CUR_FY$="",CUR_ACCTPD$=""; READ (Z[6],KEY=%C$+"A/P",DOM=*NEXT)SYS_PARMS$; CUR_FY$=SYS_PARMS$(7,4),CUR_ACCTPD$=SYS_PARMS$(11,2)
39050 DIM GL$(300); READ (Z[6],KEY=%C$+"G/L")GL$(1)
39060 DIM OSEC$(255); READ (Z[6],KEY="osec"+%X3_OP_ID$,DOM=*NEXT)OSEC$
39070 READ (Z[6],KEY=%C$+"G/LYE",DOM=*NEXT)
39080 K$=KEY(Z[6],END=LOAD_FY_DROP_BOX); READ (Z[6],KEY=K$)GLYE$
39090 IF LEN(K$)<8 OR K$(1,8)<>%C$+"G/LYE" THEN GOTO LOAD_FY_DROP_BOX
39100 IF ONLY_OPEN$="Y" AND POS(GLYE$(99,1)="CR")>0 THEN GOTO 39080
39110 IF GL$(256,1)="Y" AND OSEC$(58,1)<>"Y" AND K$(9,4)<GL$(34,4) THEN GOTO 39080
39120 CR_FY$=CR_FY$+K$(9,4)+"/"
39130 GOTO 39080
39140 LOAD_FY_DROP_BOX:
39150 DROP_BOX LOAD CR_FY.CTL,CR_FY$
39160 IF CUR_FY$<>"" THEN IF GL$(256,1)="Y" AND OSEC$(58,1)<>"Y" AND CUR_FY$<GL$(34,4) THEN CUR_FY$=GL$(34,4),CUR_ACCTPD$=GL$(38,2)
39170 IF CUR_ACCTPD$<>"" THEN IF GL$(256,1)="Y" AND OSEC$(58,1)<>"Y" AND CUR_FY$+CUR_ACCTPD$<GL$(34,6) THEN CUR_ACCTPD$=GL$(38,2) ! SSP#235717
39180 IF CUR_FY$<>"" THEN DROP_BOX WRITE FY.CTL,CUR_FY$
39185 CR_FY$=CUR_FY$
39190 IF CUR_FY$<>"" THEN FROM_FY$="Y",CR_FY$=CUR_FY$; GOSUB LOAD_ACCTPD
39210 LOAD_FY_END:RETURN 
39220 ! 
39230 LOAD_ACCTPD:
39240 ! FY$ should be set to a valid fiscal year
39250 CR_ACCTPD$=""; FROM_FY$="Y"
39260 IF FROM_FY$="Y" THEN GOTO 39280
39280 READ (Z[6],KEY=%C$+"G/LYE"+CR_FY$,DOM=LOAD_ACCTPD_END)GLYE$
39290 PDS=12; PDS=NUM(GLYE$(13,2),ERR=*NEXT) ! Number of periods in this FY
39300 FOR X=1 TO PDS
39310 X$=STR(X:"00"),FLAG$="NO"; CALL "ARGDTE",%X3$,%X4$,CR_FY$+X$,FLAG$; IF FLAG$<>"*" THEN CR_ACCTPD$=CR_ACCTPD$+X$+"/" ! Checks osec, only load valid periods
39320 NEXT X
39330 DROP_BOX LOAD CR_ACCTPD.CTL,CR_ACCTPD$
39340 IF FROM_FY$="Y" AND CUR_ACCTPD$<>"" THEN DROP_BOX WRITE CR_ACCTPD.CTL,CUR_ACCTPD$
39350 CR_ACCTPD$=CUR_ACCTPD$
39355 GOSUB LOAD_ENDING_DATE
39360 LOAD_ACCTPD_END:RETURN 
39370 ! 
39380 LOAD_ENDING_DATE:
39390 KE$=%C$+"G/LYE"
39400 IF LEN(CR_FY$)>4 THEN VAL$=CR_YEAR$ ELSE VAL$=CR_FY$
39410 FIND (Z[6],KEY=KE$+VAL$)Z9$; CC$=Z9$(21)
39420 IF LEN(CR_ACCTPD$)>2 THEN VAL=NUM(CR_PD$) ELSE VAL=NUM(CR_ACCTPD$)
39430 CC$=CC$(VAL*6-5,6),END_DATE$=CC$,REFRESH_FLG=1
39440 RETURN 
56000 ! "192531-GUI-Manual check entry.  If she enters a invoice w/ check,  
56002 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
56004 REM "219000-Item date in Bank rec file shows original date of check when
56006 REM "224588-Blank check in manual check entry, which she can't remove   
56007 REM "232468-Manual check entry allowed them not to enter invoice        
56008 REM "235717-In manual check entry, users are seeing the incorrect Accounting period
56009 REM "241077-Issue when apply credits in manual check entry (vendor      
56010 REM "255299-have another batch with multiple reversals                  
56011 REM "279245-When entering a Negative Manual Purchase - the GL posting   
56012 REM "266012-Manual AP check entry.  found way to create a blank invoice 
