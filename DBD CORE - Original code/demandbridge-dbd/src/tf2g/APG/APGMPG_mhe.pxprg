0010 ! /usr/lib/pvx/tf2g/APG/APGMPG - File Maintenance Program for AQ1_VendPlantDiv (="AQ1"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Jun. 6, 2007 10:30
0030 ! ************************************************************************
0035 REM "5.5 - 06/06/07 - 15.069166 - mhe - SSP# 193783
0040 REM "Copyright 2007 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0060 PROCESS "APGMPG","../APG/AP.EN"
0070 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _AQ1_NO=HFN; _FILE_NAME$="AQ1"+%C$; OPEN (_AQ1_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0162 _AP4_NO=HFN; _FILE_NAME$="AP4"+%C$; OPEN (_AP4_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0164 _FM0_NO=HFN; _FILE_NAME$="FM0"+%C$; OPEN (_FM0_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0166 _ARH_NO=HFN; _FILE_NAME$="ARH"+%C$; OPEN (_ARH_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=4,_CUR_KEY$=""
0430 DIM _KEYS$[1:4]; _KEYS$[1]="VENDOR$",_KEYS$[2]="",_KEYS$[3]="PLANT$",_KEYS$[4]="DIV_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_AQ1_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_AQ1_NO,ERR=*NEXT)
0930 IF _AQ1_NO<>0 THEN CLOSE (_AQ1_NO); _AQ1_NO=0
0932 IF _AP4_NO<>0 THEN CLOSE (_AP4_NO); _AP4_NO=0
0934 IF _FM0_NO<>0 THEN CLOSE (_FM0_NO); _FM0_NO=0
0936 IF _ARH_NO<>0 THEN CLOSE (_ARH_NO); _ARH_NO=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 REM *** CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1035 IF _CURKEY=1 THEN _CURKEY+=1
1040 REM *** IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_AQ1_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_AQ1_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 WRITE (_AQ1_NO,KEY=_KEY$)
1450 _R_KEY$=KEC(_AQ1_NO); TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1465 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1470 CHANGE_FLG=0
1475 _FIRST_KEY=VENDOR.CTL
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_AQ1_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_AQ1_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1695 GOSUB CLEAR_REC
1698 _FIRST_KEY=VENDOR.CTL
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1835 _ENABLE_FLG=1
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1855 NEXT_ID=VENDOR.CTL
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_AQ1_NO,END=END_OF_FILE)
2050 IF _KEY$=_CUR_KEY$ THEN _KEY$=KEN(_AQ1_NO,END=END_OF_FILE) ! Get past extracted record
2060 READ (_AQ1_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_AQ1_NO,KEY=_KEY$,END=END_OF_FILE); READ (_AQ1_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_AQ1_NO,END=START_OF_FILE); READ (_AQ1_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_AQ1_NO,KEY=_KEY$,END=START_OF_FILE); READ (_AQ1_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_AQ1_NO,ERR=NO_FIRST)
2450 READ (_AQ1_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_AQ1_NO,ERR=NO_LAST)
2650 READ (_AQ1_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3025 READ DATA FROM _KEY$ TO IOL=IOL(_AQ1_NO:KEY,ERR=*NEXT) ! load fields from external key
3030 REM *** READ DATA FROM REC(IOL(_AQ1_NO)) TO _ORIG$
3032 READ DATA FROM REC(IOL(_AQ1_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_AQ1_NO)
3035 ESCAPE 
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review                                                 
3060 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3065 EXTRACT (_AQ1_NO,KEY=_KEY$)
3070 _CUR_KEY$=_KEY$
3075 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=VENDOR.CTL,_FIRST_FIELD=ACCT_NUM.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN {
13022 VENDOR$=""
13024 VEND_DIV$=""
13026 VEND_CODE$=""
13028 PLANT$=""
13030 DIV_NUM$=""
13032 VEND_NAME$=""
13034 PLANT_NAME$=""
13036 DIV_NAME$=""
13038 %VENDOR$=""
13050  }
13060 ACCT_NUM$=""
13070 AQ1_UNUSED_1$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 REM *** IF _ENABLE_FLG=3 THEN NEXT_ID=PLANT.CTL
14700 IF _ENABLE_FLG>0 THEN {
14710 CALL "*wingrp;Enable",CRITERIA.GRP$
14720 CALL "*wingrp;Disable",FIELDS.GRP$
14730 CALL "*wingrp;Disable",BUTTONS.GRP$
14740  }
14800 IF _ENABLE_FLG<0 THEN {
14810 CALL "*wingrp;Disable",CRITERIA.GRP$
14820 CALL "*wingrp;Enable",FIELDS.GRP$
14830 CALL "*wingrp;Enable",BUTTONS.GRP$
14840  }
14990 RETURN 
15000 REM "Process Vendor
15010 PROCESS_VENDOR:
15050 GOSUB BUILD_VENDOR
15060 GOSUB VALIDATE_VENDOR
15070 %VENDOR$=VENDOR$
15075 NEXT_ID=VENDOR.CTL
15080 _ENABLE_FLG=1
15090 REFRESH_FLG=1
15095 RETURN 
15100 REM "Build Vendor
15110 BUILD_VENDOR:
15150 CALL "ZZWLKU;parse_vend",VENDOR$,VEND_DIV$,VEND_CODE$
15160 VENDOR$=VEND_DIV$+VEND_CODE$
15175 NEXT_ID=PLANT.CTL
15195 RETURN 
15200 REM "Process Plant
15210 PROCESS_PLANT:
15220 IF STP(PLANT$)="" THEN GOTO 15290
15230 PLANT$=PAD(PLANT$,4,0,"0")
15250 GOSUB VALIDATE_PLANT
15275 NEXT_ID=DIV_NUM.CTL
15290 REFRESH_FLG=1
15295 RETURN 
15400 REM "Process Division
15410 PROCESS_DIVISION:
15430 DIV_NUM$=PAD(DIV_NUM$,2,0,"0")
15450 GOSUB VALIDATE_DIVISION
15475 NEXT_ID=ACCT_NUM.CTL
15480 _ENABLE_FLG=-1
15490 REFRESH_FLG=1
15495 RETURN 
16000 REM "Validate the Vendor
16010 VALIDATE_VENDOR:
16020 FLD_TYPE$="Vendor"
16030 FLD_VALUE$=VENDOR$
16035 FLD_CTL=VENDOR.CTL
16040 DIM AP4[2]
16050 IOLIST_AP4:IOLIST AP4$,AP4{ALL}
16055 AP4_KEY$=VENDOR$
16060 READ (_AP4_NO,KEY=AP4_KEY$,DOM=INVALID_ENTRY)IOL=IOLIST_AP4
16070 VEND_NAME$=AP4$(11,35)
16195 RETURN 
16200 REM "Validate the Plant
16210 VALIDATE_PLANT:
16215 IF STP(PLANT$)="" THEN GOTO *RETURN
16220 FLD_TYPE$="Plant"
16230 FLD_VALUE$=PLANT$
16235 FLD_CTL=PLANT.CTL
16240 IOLIST_FM0:IOLIST FM0$
16245 FM0_KEY$="P"+VENDOR$+PLANT$
16250 READ (_FM0_NO,KEY=FM0_KEY$,DOM=INVALID_ENTRY)IOL=IOLIST_FM0
16260 PLANT_NAME$=FM0$(16,35)
16395 RETURN 
16400 REM "Validate the Division
16410 VALIDATE_DIVISION:
16420 FLD_TYPE$="Division"
16430 FLD_VALUE$=DIV_NUM$
16435 FLD_CTL=DIV_NUM.CTL
16440 DIM ARH[1]
16450 IOLIST_ARH:IOLIST ARH$,ARH{ALL}
16455 ARH_KEY$=DIV_NUM$
16460 READ (_ARH_NO,KEY=ARH_KEY$,DOM=INVALID_ENTRY)IOL=IOLIST_ARH
16470 DIV_NAME$=ARH$(3,30)
16594 GOTO FIND_REC
16595 RETURN 
16800 REM "Invalid Entry Made
16810 INVALID_ENTRY:
16820 MSG_TITLE$="Invalid Entry"
16830 MSG_TEXT$=FLD_TYPE$+" "+FLD_VALUE$+" is not on file."
16900 MSGBOX MSG_TEXT$,MSG_TITLE$
16940 NEXT_ID=FLD_CTL
16995 EXIT 
56000 REM + Modification History
56002 REM "06/06/2007 : MHE : Program Created.
56004 REM "193783-189102;Added new field, options, to Vendor Setup, AP4 file  
