0010 ! APGUT3 - A/P Open Invoice
0035 REM "5.4 - 03/28/06 - 8.893055 - jir - SSP# 192329
0040 REM "Copyright 2006 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "APGUT3","../APG/AP.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0115 %FLMAINT_MSG$="./lib/_tfmsglib.en"
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0155 IF ARG_2$="BATCH_SET" THEN DONT_SET_BATCH=1,X3$=%X3$,X4$=%X4$ ELSE CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2
0156 PERFORM "APGUT3.1;OPEN_FILES"; IF X9=1 THEN CMD_STR$="END"; EXIT 
0158 PERFORM "APGUT3.1;READ_PARMS"
0160 _FILE_NAME$=FIN(Z[1],"FILENAME") ! Get filename of APD file, could be batch file
0165 NEW_FLG=1
0170 _FIL_NO=Z[1]
0180 _CUR_FN=Z[14]
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=4
0430 DIM _KEYS$[1:4]; _KEYS$[1]="FY$",_KEYS$[2]="ACCTPD$",_KEYS$[3]="VENDOR$",_KEYS$[4]="INV_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0525 CALL "*WINGRP;DISABLE",INVOICE.GRP$
0530 GOSUB CLEAR_REC
0532 PERFORM "APGUT3.1;AUDIT"
0535 PERFORM "APGUT3.1;PRE_DISPLAY"; IF ACCTPD$>"" THEN GOSUB DISPLAY_PE_DATE ! NEXT_ID=FY.CTL
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0545 READ DATA FROM ARG_1$ TO FY$,ACCTPD$,VENDOR$,INV_NUM$
0546 ARG_1$=FY$+ACCTPD$+VENDOR$+INV_NUM$
0547 IF ARG_3$="POGMAG" THEN FROM_POGMAG=1,DID_SOMETHING=0,Q3$=ARG_4$,_ENABLE_FLG=4,NEXT_ID=INV_NUM.CTL; CALL "*wingrp;enable",INVOICE.GRP$; RETURN ELSE FROM_POGMAG=0 ! ; GOTO NEW_RECORD
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC,DOM=NEW_RECORD)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0561 %YES=1
0570 RETURN 
0700 ! 700 - Set up tabbing between folders
0710 INIT_FOLDER:
0720 GOSUB ENABLE_GROUPS
0730 IF FROM_POGMAG THEN NEXT_ID=INV_NUM.CTL ELSE IF _ENABLE_FLG<>_KEY1 THEN IF TAB_FLG$="<" THEN NEXT_ID=_LAST_TAB ELSE NEXT_ID=_FIRST_TAB
0790 EXIT 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0925 READ DATA FROM "" TO IOL=GLOBAL_IOL; %G8=0
0930 _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 PERFORM "APGUT3.1;CLOSE_FILES"
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1011 IF ARG_3$="POGMAG" AND _EOM$=$00$ THEN MSGBOX MSG("DO_BYPASS"),MSG("WARNING"),"?,YESNO",OPT$; IF OPT$="YES" THEN RETURN ! ssp 193387
1012 ! IF POS(_EOM$=$09$)=0 AND QRY_VAL$="" THEN RETURN
1015 IF NUL(INV_NUM$) THEN NEXT_ID=INV_NUM.CTL; REFRESH_FLG=1; RETURN 
1020 CHANGE_FLG=0 ! IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN
1025 IF _KCNT=2 THEN GOSUB DISPLAY_PE_DATE
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 _ENABLE_FLG=-1 ! IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;parse_vend",VENDOR$,VEND_DIV$,VEND_CODE$
1047 _KEY$=VENDOR$+INV_NUM$
1050 ! READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1085 ! PERFORM "APGUT3.1;EXISTING_RECORD"
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD; NEW_FLG=0
1105 CALL "*wingrp;Disable",EXT_1.GRP$; CALL "*wingrp;ENABLE",BUTTON_1.GRP$
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1215 IF ARG_3$="POGMAG" THEN REFRESH_FLG=1; PERFORM "*winproc;REFRESH_SCRN"
1220 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",ANSWER$
1230 IF ANSWER$="NO" THEN GOTO CLEAR_REC
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1; IF ARG_3$="POGMAG" THEN %YES=1; NEXT_ID=NEXT.CTL ELSE NEXT_ID=INV_DATE.CTL
1275 D9$=""
1277 DISABLE CONTROL BUTTON_3.CTL; ENABLE CONTROL BUTTON_2.CTL
1280 NEW_FLG=0 ! NEXT_FOLDER=_FIRST_FOLDER
1285 PERFORM "APGUT3.1;NEW_RECORD"
1286 GOSUB NUM_TO_STR
1290 EXIT 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1415 A0=DEC(MID(Y$,1,2)),APE_LINK$=STR(A0)
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY,NEXT_FOLDER=_FIRST_FOLDER
1485 CALL "*wingrp;Disable",FIN.GRP$
1490 RETURN 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1665 DID_SOMETHING=1
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1685 VENDOR$=""; INV_NUM$=""; _CLR_FLG$=""; GOSUB CLEAR_FIELDS
1690 CHANGE_FLG=0
1695 D9$=""; GROSS_INV_AMT=0; NET_SALE=0; A0=0; T[0]=0; T[1]=0; APE_LINK$=""; INTERNAL_USE=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH:EXIT ! mSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1825 SAVE_FY$=FY$,SAVE_ACCTPD$=ACCTPD$
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1835 FY$=SAVE_FY$,ACCTPD$=SAVE_ACCTPD$
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1855 NEXT_FOLDER=_FIRST_FOLDER
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3025 DIM APD[14]
3030 IOLIST APD$,APD{ALL}
3040 READ (_FIL_NO,KEY=_KEY$,ERR=*RETURN)IOL=3030
3050 GOSUB LOAD_INFO
3052 ! IF APD[0]<>0 THEN D9$="*" ELSE D9$=""
3055 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3057 CALL "*wingrp;Hide",TAB_H.GRP$
3060 CHANGE_FLG=0
3061 VENDOR$=VEND_DIV$+VEND_CODE$
3065 GOSUB DISPLAY_PE_DATE
3067 PERFORM "APGUT3.1;EXISTING_RECORD"
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO,ERR=WRT),DOM=WRT,REC=_CUR$)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 ! MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:! IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 ! GOSUB INCORPORATE_CHGS
3320 WRT:GOSUB ASSIGN_INFO; WRITE (_FIL_NO,KEY=APD$(1,26),ERR=WRITE_ERROR)IOL=3030
3325 DID_SOMETHING=1
3340 ! READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3805 IF EXIT_PRESSED AND FROM_POGMAG AND NOT(DID_SOMETHING) THEN MSGBOX MSG("BYPASS_AP"),MSG("VERIFY"),"?,YESNO",ANS$; IF ANS$="NO" THEN CMD_STR$=""; RETURN ELSE DID_SOMETHING=1
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=FY.CTL,_FIRST_FIELD=INV_DATE.CTL,_FIRST_FOLDER=FLDR.APGUT3.1.CTL
3815 CHANGE_FLG=0 ! Temp fix per denise
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
5000 ! VENDOR MESSAGE
5010 VENDOR_MSG:
5020 READ (_AP8,KEY=VENDOR$,DOM=*RETURN)AP8$
5030 IF NUL(AP8$(11,120)) THEN NEXT_ID=INV_NUM.CTL; RETURN 
5040 MSG_1$=AP8$(11,60)+SEP+AP8$(71,60)
5050 MSGBOX MSG_1$,MSG("VEND_NOTE"),"INFO"
5090 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 ! DISC_DATE_2ND$=STR(DISC_DATE_2ND)
10030 APD_UNUSED_1$=STR(APD_UNUSED_1)
10040 APE_LINK$=STR(APE_LINK)
10050 GROSS_INV_AMT$=STR(GROSS_INV_AMT)
10060 SPECIAL_AMT_1$=STR(SPECIAL_AMT_1)
10070 SPECIAL_AMT_2$=STR(SPECIAL_AMT_2)
10080 SPECIAL_AMT_3$=STR(SPECIAL_AMT_3)
10090 SPECIAL_AMT_4$=STR(SPECIAL_AMT_4)
10100 DISC_APPLIES_TO$=STR(DISC_APPLIES_TO)
10110 DISC_AMT$=STR(DISC_AMT)
10120 WORKMAN_COMP_WH$=STR(WORKMAN_COMP_WH)
10130 NET_SALE$=STR(NET_SALE)
10140 DAYS_TO_EXTEND_DUE$=STR(DAYS_TO_EXTEND_DUE)
10150 INTERAL_USE$=STR(INTERAL_USE)
10160 ALT_CURR_GROSS_AMT$=STR(ALT_CURR_GROSS_AMT)
10170 ALT_CURR_DISC_AMT$=STR(ALT_CURR_DISC_AMT)
10180 DISC_AMT_2ND$=STR(DISC_AMT_2ND)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 ! _X$="DISC_DATE_2ND",_X=DISC_DATE_2ND.CTL,DISC_DATE_2ND=NUM(DISC_DATE_2ND$,ERR=NON_NUMERIC)
11030 _X$="APD_UNUSED_1",_X=APD_UNUSED_1.CTL,APD_UNUSED_1=NUM(APD_UNUSED_1$,ERR=NON_NUMERIC)
11040 _X$="APE_LINK",_X=APE_LINK.CTL,APE_LINK=NUM(APE_LINK$,ERR=NON_NUMERIC)
11050 _X$="GROSS_INV_AMT",_X=GROSS_INV_AMT.CTL,GROSS_INV_AMT=NUM(GROSS_INV_AMT$,ERR=NON_NUMERIC)
11060 _X$="SPECIAL_AMT_1",_X=SPECIAL_AMT_1.CTL,SPECIAL_AMT_1=NUM(SPECIAL_AMT_1$,ERR=NON_NUMERIC)
11070 _X$="SPECIAL_AMT_2",_X=SPECIAL_AMT_2.CTL,SPECIAL_AMT_2=NUM(SPECIAL_AMT_2$,ERR=NON_NUMERIC)
11080 _X$="SPECIAL_AMT_3",_X=SPECIAL_AMT_3.CTL,SPECIAL_AMT_3=NUM(SPECIAL_AMT_3$,ERR=NON_NUMERIC)
11090 _X$="SPECIAL_AMT_4",_X=SPECIAL_AMT_4.CTL,SPECIAL_AMT_4=NUM(SPECIAL_AMT_4$,ERR=NON_NUMERIC)
11100 _X$="DISC_APPLIES_TO",_X=DISC_APPLIES_TO.CTL,DISC_APPLIES_TO=NUM(DISC_APPLIES_TO$,ERR=NON_NUMERIC)
11110 _X$="DISC_AMT",_X=DISC_AMT.CTL,DISC_AMT=NUM(DISC_AMT$,ERR=NON_NUMERIC)
11120 _X$="WORKMAN_COMP_WH",_X=WORKMAN_COMP_WH.CTL,WORKMAN_COMP_WH=NUM(WORKMAN_COMP_WH$,ERR=NON_NUMERIC)
11130 _X$="NET_SALE",_X=NET_SALE.CTL,NET_SALE=NUM(NET_SALE$,ERR=NON_NUMERIC)
11140 _X$="DAYS_TO_EXTEND_DUE",_X=DAYS_TO_EXTEND_DUE.CTL,DAYS_TO_EXTEND_DUE=NUM(DAYS_TO_EXTEND_DUE$,ERR=NON_NUMERIC)
11150 _X$="INTERAL_USE",_X=INTERAL_USE.CTL,INTERAL_USE=NUM(INTERAL_USE$,ERR=NON_NUMERIC)
11160 _X$="ALT_CURR_GROSS_AMT",_X=ALT_CURR_GROSS_AMT.CTL,ALT_CURR_GROSS_AMT=NUM(ALT_CURR_GROSS_AMT$,ERR=NON_NUMERIC)
11170 _X$="ALT_CURR_DISC_AMT",_X=ALT_CURR_DISC_AMT.CTL,ALT_CURR_DISC_AMT=NUM(ALT_CURR_DISC_AMT$,ERR=NON_NUMERIC)
11180 _X$="DISC_AMT_2ND",_X=DISC_AMT_2ND.CTL,DISC_AMT_2ND=NUM(DISC_AMT_2ND$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1; REQ_FLG=0
12030 IF FOLDER_ID$="APGUT3.1" THEN {
12040 IF NUL(TERMS_CODE$) THEN { MSGBOX "No Terms Code","FYI","!"
12050 NEXT_ID=TERMS_CODE.CTL
12055 REQ_FLG=1 }
12060  }
12999 RETURN 
13000 ! 13000 - Clear the record fields
13005 GLOBAL_IOL:IOLIST %P1$,%F1$,%F0$,%G0$,%SEC$,%PE_DATE$,%FY$,%ACCTPD$,%VENDOR$
13010 CLEAR_FIELDS:
13020 ! IF _CLR_FLG$="R" THEN FY$=""
13030 ! IF _CLR_FLG$="R" THEN ACCTPD$="",PE_DATE$=""
13040 IF _CLR_FLG$="R" THEN VEND_DIV$=""
13050 IF _CLR_FLG$="R" THEN VEND_CODE$="",VENDOR$=""
13060 IF _CLR_FLG$="R" THEN INV_NUM$=""
13070 INV_DATE$=""
13080 TERMS_CODE$=""
13090 INV_DUE_DATE$=""
13100 DISC_EXPIRE_DATE$=""
13110 INV_COMMENT$=""
13120 OUR_REF_NUM$=""
13130 PRNT_CHK_ON_BANK$=""
13140 CATEGORY$="",CATEGORY_ON_MAIN$=""
13150 PYMNT_SELECTION_CODE$=""
13160 PYMNT_PRIORITY_CODE$=""
13170 INV_ON_HOLD$=""
13180 SPECIAL_INV_TYPE$=""
13190 INV_TYPE$=""
13200 APPLY_TO_INV_NUM$=""
13210 SPER_CODE$=""
13220 SRC_COMP_CODE$=""
13230 SRC_COMP_LOC_TYPE$=""
13240 ALT_CURR_CODE$=""
13250 DISC_DATE_2ND$=""
13260 APD_UNUSED_1=0
13270 APE_LINK=0
13280 GROSS_INV_AMT=0
13290 SPECIAL_AMT_1=0
13300 SPECIAL_AMT_2=0
13310 SPECIAL_AMT_3=0
13320 SPECIAL_AMT_4=0
13330 DISC_APPLIES_TO=0
13340 DISC_AMT=0
13350 WORKMAN_COMP_WH=0
13360 NET_SALE=0
13370 DAYS_TO_EXTEND_DUE=0
13380 INTERAL_USE=0
13390 ALT_CURR_GROSS_AMT=0
13400 ALT_CURR_DISC_AMT=0
13410 DISC_AMT_2ND=0
13500 ! 
13510 CALL "*wingrp;Disable",FIN.GRP$; CALL "*wingrp;Enable",EXT_1.GRP$
13520 CALL "*wingrp;Disable",INVOICE.GRP$
13900 NEW_REC$="",APL_KEY$="",APL_CREATED$="",APL$="",F9$="",TOTAL=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=1 THEN CALL "*wingrp;Enable",KEY1.GRP$; NEXT_ID=FY.CTL ELSE CALL "*wingrp;Disable",KEY1.GRP$
14040 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=ACCTPD.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14050 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=VENDOR.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14060 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=INV_NUM.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$; GOSUB HIDE_SPECIAL_AMTS; GOSUB HIDE_ALT_CUR; GOSUB HIDE_SLS; GOSUB HIDE_DISC2
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$; GOSUB HIDE_SPECIAL_AMTS; GOSUB HIDE_ALT_CUR; GOSUB HIDE_SLS; GOSUB HIDE_DISC2
14985 IF ARG_1$<>"" THEN CALL "*wingrp;Hide",SCROLL.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(40,"N")
15030 IF _ORIG.FY$=_CUR.FY$ OR FY$=_CUR.FY$ THEN GOTO *NEXT ELSE IF _ORIG.FY$=FY$ THEN _CHG2$=_CHG2$+SEP+MSG("FY")+" = "+_CUR.FY$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FY")+" = "+_CUR.FY$
15040 IF _ORIG.ACCTPD$=_CUR.ACCTPD$ OR ACCTPD$=_CUR.ACCTPD$ THEN GOTO *NEXT ELSE IF _ORIG.ACCTPD$=ACCTPD$ THEN _CHG2$=_CHG2$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCTPD$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCTPD$
15050 IF _ORIG.VEND_DIV$=_CUR.VEND_DIV$ OR VEND_DIV$=_CUR.VEND_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_DIV$=VEND_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$
15060 IF _ORIG.VEND_CODE$=_CUR.VEND_CODE$ OR VEND_CODE$=_CUR.VEND_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_CODE$=VEND_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$
15070 IF _ORIG.INV_NUM$=_CUR.INV_NUM$ OR INV_NUM$=_CUR.INV_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.INV_NUM$=INV_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$
15080 IF _ORIG.INV_DATE$=_CUR.INV_DATE$ OR INV_DATE$=_CUR.INV_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.INV_DATE$=INV_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_DATE")+" = "+_CUR.INV_DATE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_DATE")+" = "+_CUR.INV_DATE$
15090 IF _ORIG.TERMS_CODE$=_CUR.TERMS_CODE$ OR TERMS_CODE$=_CUR.TERMS_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.TERMS_CODE$=TERMS_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("TERMS_CODE")+" = "+_CUR.TERMS_CODE$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TERMS_CODE")+" = "+_CUR.TERMS_CODE$
15100 IF _ORIG.INV_DUE_DATE$=_CUR.INV_DUE_DATE$ OR INV_DUE_DATE$=_CUR.INV_DUE_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.INV_DUE_DATE$=INV_DUE_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_D_D")+" = "+_CUR.INV_DUE_DATE$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_D_D")+" = "+_CUR.INV_DUE_DATE$
15110 IF _ORIG.DISC_EXPIRE_DATE$=_CUR.DISC_EXPIRE_DATE$ OR DISC_EXPIRE_DATE$=_CUR.DISC_EXPIRE_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.DISC_EXPIRE_DATE$=DISC_EXPIRE_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("DISC_E_D")+" = "+_CUR.DISC_EXPIRE_DATE$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DISC_E_D")+" = "+_CUR.DISC_EXPIRE_DATE$
15120 IF _ORIG.INV_COMMENT$=_CUR.INV_COMMENT$ OR INV_COMMENT$=_CUR.INV_COMMENT$ THEN GOTO *NEXT ELSE IF _ORIG.INV_COMMENT$=INV_COMMENT$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_C")+" = "+_CUR.INV_COMMENT$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_C")+" = "+_CUR.INV_COMMENT$
15130 IF _ORIG.OUR_REF_NUM$=_CUR.OUR_REF_NUM$ OR OUR_REF_NUM$=_CUR.OUR_REF_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.OUR_REF_NUM$=OUR_REF_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("OUR_R_N")+" = "+_CUR.OUR_REF_NUM$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OUR_R_N")+" = "+_CUR.OUR_REF_NUM$
15140 IF _ORIG.PRNT_CHK_ON_BANK$=_CUR.PRNT_CHK_ON_BANK$ OR PRNT_CHK_ON_BANK$=_CUR.PRNT_CHK_ON_BANK$ THEN GOTO *NEXT ELSE IF _ORIG.PRNT_CHK_ON_BANK$=PRNT_CHK_ON_BANK$ THEN _CHG2$=_CHG2$+SEP+MSG("PRNT_C_O_B")+" = "+_CUR.PRNT_CHK_ON_BANK$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRNT_C_O_B")+" = "+_CUR.PRNT_CHK_ON_BANK$
15150 IF _ORIG.CATEGORY$=_CUR.CATEGORY$ OR CATEGORY$=_CUR.CATEGORY$ THEN GOTO *NEXT ELSE IF _ORIG.CATEGORY$=CATEGORY$ THEN _CHG2$=_CHG2$+SEP+MSG("CATEGORY")+" = "+_CUR.CATEGORY$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CATEGORY")+" = "+_CUR.CATEGORY$
15160 IF _ORIG.PYMNT_SELECTION_CODE$=_CUR.PYMNT_SELECTION_CODE$ OR PYMNT_SELECTION_CODE$=_CUR.PYMNT_SELECTION_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PYMNT_SELECTION_CODE$=PYMNT_SELECTION_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PYMN_S_C")+" = "+_CUR.PYMNT_SELECTION_CODE$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PYMN_S_C")+" = "+_CUR.PYMNT_SELECTION_CODE$
15170 IF _ORIG.PYMNT_PRIORITY_CODE$=_CUR.PYMNT_PRIORITY_CODE$ OR PYMNT_PRIORITY_CODE$=_CUR.PYMNT_PRIORITY_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.PYMNT_PRIORITY_CODE$=PYMNT_PRIORITY_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PYMN_P_C")+" = "+_CUR.PYMNT_PRIORITY_CODE$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PYMN_P_C")+" = "+_CUR.PYMNT_PRIORITY_CODE$
15180 IF _ORIG.INV_ON_HOLD$=_CUR.INV_ON_HOLD$ OR INV_ON_HOLD$=_CUR.INV_ON_HOLD$ THEN GOTO *NEXT ELSE IF _ORIG.INV_ON_HOLD$=INV_ON_HOLD$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_O_H")+" = "+_CUR.INV_ON_HOLD$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_O_H")+" = "+_CUR.INV_ON_HOLD$
15190 IF _ORIG.SPECIAL_INV_TYPE$=_CUR.SPECIAL_INV_TYPE$ OR SPECIAL_INV_TYPE$=_CUR.SPECIAL_INV_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_INV_TYPE$=SPECIAL_INV_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_I_T")+" = "+_CUR.SPECIAL_INV_TYPE$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_I_T")+" = "+_CUR.SPECIAL_INV_TYPE$
15200 IF _ORIG.INV_TYPE$=_CUR.INV_TYPE$ OR INV_TYPE$=_CUR.INV_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.INV_TYPE$=INV_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_TYPE")+" = "+_CUR.INV_TYPE$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_TYPE")+" = "+_CUR.INV_TYPE$
15210 IF _ORIG.APPLY_TO_INV_NUM$=_CUR.APPLY_TO_INV_NUM$ OR APPLY_TO_INV_NUM$=_CUR.APPLY_TO_INV_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.APPLY_TO_INV_NUM$=APPLY_TO_INV_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("APPL_T_I_N")+" = "+_CUR.APPLY_TO_INV_NUM$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("APPL_T_I_N")+" = "+_CUR.APPLY_TO_INV_NUM$
15220 IF _ORIG.SPER_CODE$=_CUR.SPER_CODE$ OR SPER_CODE$=_CUR.SPER_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.SPER_CODE$=SPER_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("SPER_CODE")+" = "+_CUR.SPER_CODE$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPER_CODE")+" = "+_CUR.SPER_CODE$
15230 IF _ORIG.SRC_COMP_CODE$=_CUR.SRC_COMP_CODE$ OR SRC_COMP_CODE$=_CUR.SRC_COMP_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.SRC_COMP_CODE$=SRC_COMP_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("SRC_C_C")+" = "+_CUR.SRC_COMP_CODE$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SRC_C_C")+" = "+_CUR.SRC_COMP_CODE$
15240 IF _ORIG.SRC_COMP_LOC_TYPE$=_CUR.SRC_COMP_LOC_TYPE$ OR SRC_COMP_LOC_TYPE$=_CUR.SRC_COMP_LOC_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.SRC_COMP_LOC_TYPE$=SRC_COMP_LOC_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("SRC_C_L_T")+" = "+_CUR.SRC_COMP_LOC_TYPE$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SRC_C_L_T")+" = "+_CUR.SRC_COMP_LOC_TYPE$
15250 IF _ORIG.ALT_CURR_CODE$=_CUR.ALT_CURR_CODE$ OR ALT_CURR_CODE$=_CUR.ALT_CURR_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ALT_CURR_CODE$=ALT_CURR_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ALT_C_C")+" = "+_CUR.ALT_CURR_CODE$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_C_C")+" = "+_CUR.ALT_CURR_CODE$
15260 IF _ORIG.DISC_DATE_2ND$=_CUR.DISC_DATE_2ND$ OR DISC_DATE_2ND$=_CUR.DISC_DATE_2ND$ THEN GOTO *NEXT ELSE IF _ORIG.DISC_DATE_2ND$=DISC_DATE_2ND$ THEN _CHG2$=_CHG2$+SEP+MSG("DISC_D_2")+" = "+_CUR.DISC_DATE_2ND$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DISC_D_2")+" = "+_CUR.DISC_DATE_2ND$
15270 IF _ORIG.APD_UNUSED_1=_CUR.APD_UNUSED_1 OR APD_UNUSED_1=_CUR.APD_UNUSED_1 THEN GOTO *NEXT ELSE IF _ORIG.APD_UNUSED_1=APD_UNUSED_1 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.APD_UNUSED_1),_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.APD_UNUSED_1)
15280 IF _ORIG.APE_LINK=_CUR.APE_LINK OR APE_LINK=_CUR.APE_LINK THEN GOTO *NEXT ELSE IF _ORIG.APE_LINK=APE_LINK THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.APE_LINK),_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.APE_LINK)
15290 IF _ORIG.GROSS_INV_AMT=_CUR.GROSS_INV_AMT OR GROSS_INV_AMT=_CUR.GROSS_INV_AMT THEN GOTO *NEXT ELSE IF _ORIG.GROSS_INV_AMT=GROSS_INV_AMT THEN _CHG2$=_CHG2$+SEP+MSG("GROS_I_A")+" = "+STR(_CUR.GROSS_INV_AMT),_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GROS_I_A")+" = "+STR(_CUR.GROSS_INV_AMT)
15300 IF _ORIG.SPECIAL_AMT_1=_CUR.SPECIAL_AMT_1 OR SPECIAL_AMT_1=_CUR.SPECIAL_AMT_1 THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_AMT_1=SPECIAL_AMT_1 THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_AMT_1")+" = "+STR(_CUR.SPECIAL_AMT_1),_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_AMT_1")+" = "+STR(_CUR.SPECIAL_AMT_1)
15310 IF _ORIG.SPECIAL_AMT_2=_CUR.SPECIAL_AMT_2 OR SPECIAL_AMT_2=_CUR.SPECIAL_AMT_2 THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_AMT_2=SPECIAL_AMT_2 THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_AMT_2")+" = "+STR(_CUR.SPECIAL_AMT_2),_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_AMT_2")+" = "+STR(_CUR.SPECIAL_AMT_2)
15320 IF _ORIG.SPECIAL_AMT_3=_CUR.SPECIAL_AMT_3 OR SPECIAL_AMT_3=_CUR.SPECIAL_AMT_3 THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_AMT_3=SPECIAL_AMT_3 THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_AMT_3")+" = "+STR(_CUR.SPECIAL_AMT_3),_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_AMT_3")+" = "+STR(_CUR.SPECIAL_AMT_3)
15330 IF _ORIG.SPECIAL_AMT_4=_CUR.SPECIAL_AMT_4 OR SPECIAL_AMT_4=_CUR.SPECIAL_AMT_4 THEN GOTO *NEXT ELSE IF _ORIG.SPECIAL_AMT_4=SPECIAL_AMT_4 THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_AMT_4")+" = "+STR(_CUR.SPECIAL_AMT_4),_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_AMT_4")+" = "+STR(_CUR.SPECIAL_AMT_4)
15340 IF _ORIG.DISC_APPLIES_TO=_CUR.DISC_APPLIES_TO OR DISC_APPLIES_TO=_CUR.DISC_APPLIES_TO THEN GOTO *NEXT ELSE IF _ORIG.DISC_APPLIES_TO=DISC_APPLIES_TO THEN _CHG2$=_CHG2$+SEP+MSG("DISC_A_T")+" = "+STR(_CUR.DISC_APPLIES_TO),_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DISC_A_T")+" = "+STR(_CUR.DISC_APPLIES_TO)
15350 IF _ORIG.DISC_AMT=_CUR.DISC_AMT OR DISC_AMT=_CUR.DISC_AMT THEN GOTO *NEXT ELSE IF _ORIG.DISC_AMT=DISC_AMT THEN _CHG2$=_CHG2$+SEP+MSG("DISC_AMT")+" = "+STR(_CUR.DISC_AMT),_CHG_VAR$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DISC_AMT")+" = "+STR(_CUR.DISC_AMT)
15360 IF _ORIG.WORKMAN_COMP_WH=_CUR.WORKMAN_COMP_WH OR WORKMAN_COMP_WH=_CUR.WORKMAN_COMP_WH THEN GOTO *NEXT ELSE IF _ORIG.WORKMAN_COMP_WH=WORKMAN_COMP_WH THEN _CHG2$=_CHG2$+SEP+MSG("WORK_C_W")+" = "+STR(_CUR.WORKMAN_COMP_WH),_CHG_VAR$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WORK_C_W")+" = "+STR(_CUR.WORKMAN_COMP_WH)
15370 IF _ORIG.NET_SALE=_CUR.NET_SALE OR NET_SALE=_CUR.NET_SALE THEN GOTO *NEXT ELSE IF _ORIG.NET_SALE=NET_SALE THEN _CHG2$=_CHG2$+SEP+MSG("NET_SALE")+" = "+STR(_CUR.NET_SALE),_CHG_VAR$(35,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NET_SALE")+" = "+STR(_CUR.NET_SALE)
15380 IF _ORIG.DAYS_TO_EXTEND_DUE=_CUR.DAYS_TO_EXTEND_DUE OR DAYS_TO_EXTEND_DUE=_CUR.DAYS_TO_EXTEND_DUE THEN GOTO *NEXT ELSE IF _ORIG.DAYS_TO_EXTEND_DUE=DAYS_TO_EXTEND_DUE THEN _CHG2$=_CHG2$+SEP+MSG("DAYS_T_E_D")+" = "+STR(_CUR.DAYS_TO_EXTEND_DUE),_CHG_VAR$(36,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DAYS_T_E_D")+" = "+STR(_CUR.DAYS_TO_EXTEND_DUE)
15390 IF _ORIG.INTERAL_USE=_CUR.INTERAL_USE OR INTERAL_USE=_CUR.INTERAL_USE THEN GOTO *NEXT ELSE IF _ORIG.INTERAL_USE=INTERAL_USE THEN _CHG2$=_CHG2$+SEP+MSG("INTE_U")+" = "+STR(_CUR.INTERAL_USE),_CHG_VAR$(37,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INTE_U")+" = "+STR(_CUR.INTERAL_USE)
15400 IF _ORIG.ALT_CURR_GROSS_AMT=_CUR.ALT_CURR_GROSS_AMT OR ALT_CURR_GROSS_AMT=_CUR.ALT_CURR_GROSS_AMT THEN GOTO *NEXT ELSE IF _ORIG.ALT_CURR_GROSS_AMT=ALT_CURR_GROSS_AMT THEN _CHG2$=_CHG2$+SEP+MSG("ALT_C_G_A")+" = "+STR(_CUR.ALT_CURR_GROSS_AMT),_CHG_VAR$(38,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_C_G_A")+" = "+STR(_CUR.ALT_CURR_GROSS_AMT)
15410 IF _ORIG.ALT_CURR_DISC_AMT=_CUR.ALT_CURR_DISC_AMT OR ALT_CURR_DISC_AMT=_CUR.ALT_CURR_DISC_AMT THEN GOTO *NEXT ELSE IF _ORIG.ALT_CURR_DISC_AMT=ALT_CURR_DISC_AMT THEN _CHG2$=_CHG2$+SEP+MSG("ALT_C_D_A")+" = "+STR(_CUR.ALT_CURR_DISC_AMT),_CHG_VAR$(39,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_C_D_A")+" = "+STR(_CUR.ALT_CURR_DISC_AMT)
15420 IF _ORIG.DISC_AMT_2ND=_CUR.DISC_AMT_2ND OR DISC_AMT_2ND=_CUR.DISC_AMT_2ND THEN GOTO *NEXT ELSE IF _ORIG.DISC_AMT_2ND=DISC_AMT_2ND THEN _CHG2$=_CHG2$+SEP+MSG("DISC_A_2")+" = "+STR(_CUR.DISC_AMT_2ND),_CHG_VAR$(40,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DISC_A_2")+" = "+STR(_CUR.DISC_AMT_2ND)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN FY$=_CUR.FY$
16030 IF _CHG_VAR$(2,1)="Y" THEN ACCTPD$=_CUR.ACCTPD$
16040 IF _CHG_VAR$(3,1)="Y" THEN VEND_DIV$=_CUR.VEND_DIV$
16050 IF _CHG_VAR$(4,1)="Y" THEN VEND_CODE$=_CUR.VEND_CODE$
16060 IF _CHG_VAR$(5,1)="Y" THEN INV_NUM$=_CUR.INV_NUM$
16070 IF _CHG_VAR$(6,1)="Y" THEN INV_DATE$=_CUR.INV_DATE$
16080 IF _CHG_VAR$(7,1)="Y" THEN TERMS_CODE$=_CUR.TERMS_CODE$
16090 IF _CHG_VAR$(8,1)="Y" THEN INV_DUE_DATE$=_CUR.INV_DUE_DATE$
16100 IF _CHG_VAR$(9,1)="Y" THEN DISC_EXPIRE_DATE$=_CUR.DISC_EXPIRE_DATE$
16110 IF _CHG_VAR$(10,1)="Y" THEN INV_COMMENT$=_CUR.INV_COMMENT$
16120 IF _CHG_VAR$(11,1)="Y" THEN OUR_REF_NUM$=_CUR.OUR_REF_NUM$
16130 IF _CHG_VAR$(12,1)="Y" THEN PRNT_CHK_ON_BANK$=_CUR.PRNT_CHK_ON_BANK$
16140 IF _CHG_VAR$(13,1)="Y" THEN CATEGORY$=_CUR.CATEGORY$
16150 IF _CHG_VAR$(14,1)="Y" THEN PYMNT_SELECTION_CODE$=_CUR.PYMNT_SELECTION_CODE$
16160 IF _CHG_VAR$(15,1)="Y" THEN PYMNT_PRIORITY_CODE$=_CUR.PYMNT_PRIORITY_CODE$
16170 IF _CHG_VAR$(16,1)="Y" THEN INV_ON_HOLD$=_CUR.INV_ON_HOLD$
16180 IF _CHG_VAR$(17,1)="Y" THEN SPECIAL_INV_TYPE$=_CUR.SPECIAL_INV_TYPE$
16190 IF _CHG_VAR$(18,1)="Y" THEN INV_TYPE$=_CUR.INV_TYPE$
16200 IF _CHG_VAR$(19,1)="Y" THEN APPLY_TO_INV_NUM$=_CUR.APPLY_TO_INV_NUM$
16210 IF _CHG_VAR$(20,1)="Y" THEN SPER_CODE$=_CUR.SPER_CODE$
16220 IF _CHG_VAR$(21,1)="Y" THEN SRC_COMP_CODE$=_CUR.SRC_COMP_CODE$
16230 IF _CHG_VAR$(22,1)="Y" THEN SRC_COMP_LOC_TYPE$=_CUR.SRC_COMP_LOC_TYPE$
16240 IF _CHG_VAR$(23,1)="Y" THEN ALT_CURR_CODE$=_CUR.ALT_CURR_CODE$
16250 IF _CHG_VAR$(24,1)="Y" THEN DISC_DATE_2ND=_CUR.DISC_DATE_2ND
16260 IF _CHG_VAR$(25,1)="Y" THEN APD_UNUSED_1=_CUR.APD_UNUSED_1
16270 IF _CHG_VAR$(26,1)="Y" THEN APE_LINK=_CUR.APE_LINK
16280 IF _CHG_VAR$(27,1)="Y" THEN GROSS_INV_AMT=_CUR.GROSS_INV_AMT
16290 IF _CHG_VAR$(28,1)="Y" THEN SPECIAL_AMT_1=_CUR.SPECIAL_AMT_1
16300 IF _CHG_VAR$(29,1)="Y" THEN SPECIAL_AMT_2=_CUR.SPECIAL_AMT_2
16310 IF _CHG_VAR$(30,1)="Y" THEN SPECIAL_AMT_3=_CUR.SPECIAL_AMT_3
16320 IF _CHG_VAR$(31,1)="Y" THEN SPECIAL_AMT_4=_CUR.SPECIAL_AMT_4
16330 IF _CHG_VAR$(32,1)="Y" THEN DISC_APPLIES_TO=_CUR.DISC_APPLIES_TO
16340 IF _CHG_VAR$(33,1)="Y" THEN DISC_AMT=_CUR.DISC_AMT
16350 IF _CHG_VAR$(34,1)="Y" THEN WORKMAN_COMP_WH=_CUR.WORKMAN_COMP_WH
16360 IF _CHG_VAR$(35,1)="Y" THEN NET_SALE=_CUR.NET_SALE
16370 IF _CHG_VAR$(36,1)="Y" THEN DAYS_TO_EXTEND_DUE=_CUR.DAYS_TO_EXTEND_DUE
16380 IF _CHG_VAR$(37,1)="Y" THEN INTERAL_USE=_CUR.INTERAL_USE
16390 IF _CHG_VAR$(38,1)="Y" THEN ALT_CURR_GROSS_AMT=_CUR.ALT_CURR_GROSS_AMT
16400 IF _CHG_VAR$(39,1)="Y" THEN ALT_CURR_DISC_AMT=_CUR.ALT_CURR_DISC_AMT
16410 IF _CHG_VAR$(40,1)="Y" THEN DISC_AMT_2ND=_CUR.DISC_AMT_2ND
16990 RETURN 
20000 ! Custom Routines
20010 DISPLAY_PE_DATE:
20015 IF ARG_3$="POGMAG" AND ID$<>"ACCTPD" THEN ACCTPD$=MID(STP(ARG_1$,3,$8A$),5,2),FY$=MID(ARG_1$,1,4),%P1$=""; PERFORM "APGUT3.1;FY_ENTRY"; GOTO 20025
20020 IF %P1$>"" AND LEN(ACCTPD$)=2 THEN TF_DATE$=%P1$(NUM(ACCTPD$)*6+15,6); CALL "ZZWDTE;DISPLAY",TF_DATE$; PE_DATE$="Ending: "+TF_DATE$
20030 REFRESH_FLG=1
20040 RETURN 
20045 ! 
20050 HIDE_SPECIAL_AMTS:
20055 IF STP(SPECIAL_DESC_1$,3)="" THEN HIDE CONTROL SPECIAL_AMT_1.CTL
20060 IF STP(SPECIAL_DESC_2$,3)="" THEN HIDE CONTROL SPECIAL_AMT_2.CTL
20065 IF STP(SPECIAL_DESC_3$,3)="" THEN HIDE CONTROL SPECIAL_AMT_3.CTL
20070 IF STP(SPECIAL_DESC_4$,3)="" THEN HIDE CONTROL SPECIAL_AMT_4.CTL
20090 HIDE_SPECIAL_AMTS_END:RETURN 
20095 ! 
20100 HIDE_ALT_CUR:
20110 IF LEN(E$)<107 THEN CALL "*wingrp;Hide",ALT_CUR.GRP$; GOTO HIDE_ALT_CUR_END
20120 IF STP(E$(105,3),3)="" THEN CALL "*wingrp;Hide",ALT_CUR.GRP$
20140 HIDE_ALT_CUR_END:RETURN 
20145 ! 
20150 HIDE_SLS:
20160 IF %F0$(70,1)<>"Y" THEN CALL "*wingrp;Hide",SLS.GRP$
20190 HIDE_SLS_END:RETURN 
20195 ! 
20200 HIDE_DISC2:
20210 IF %F0$(80,1)<>"Y" THEN CALL "*wingrp;Hide",DISC2.GRP$
20240 HIDE_DISC2_END:RETURN 
20245 ! 
23000 ! Enable Groups
23010 ENABLE_GROUP:
23015 IF NEW_FLG AND FROM_POGMAG THEN GOTO 23030
23020 IF NOT(NUL(VENDOR$)) THEN CALL "*wingrp;disable",FIN.GRP$; RETURN 
23030 ENABLE CONTROL BUTTON_3.CTL
23040 DISABLE CONTROL BUTTON_1.GRP$
23090 REFRESH_FLG=1
23095 RETURN 
24000 ! This is the Finish Button Process
24010 FINISH_PROCESS:
24015 IF NUL(VENDOR$) THEN RETURN 
24016 IF NEW_FLG THEN RETURN 
24020 PERFORM "GLGXAA;CHECK_BALANCE"
24030 IF ML_DEBIT<>ML_CREDIT THEN MSGBOX ML_BAL$,MSG("WARNING"),"INFO,TIM=5"; IGNORE_EXIT=1; RETURN 
24050 PERFORM "APGUT3;CHECK_WRITE"; CALL "*WINGRP;DISABLE",FIELDS.GRP$; REFRESH_FLG=1
24070 CALL "*WINGRP;ENABLE",AP_INV.GRP$; NEXT_FOLDER=FLDR.APGUT3.1.CTL; NEXT_ID=VENDOR.CTL
24080 IGNORE_EXIT=0
24085 REFRESH_FLG=1
24090 RETURN 
25000 CHECK_WRITE:
25005 IF NUL(INV_NUM$) THEN NEXT_ID=INV_NUM.CTL; RETURN 
25010 ! MSGBOX MSG("WRITE_REC"),MSG("CONFIRM"),"?,YESNO",ANSWER$
25020 GOSUB WRITE_REC ! IF ANSWER$="YES" THEN GOTO WRITE_REC
25030 _CLR_FLG$=""; GOSUB CLEAR_FIELDS
25035 VENDOR$=""; INV_NUM$=""; NEXT_ID=VENDOR.CTL; REFRESH_FLG=1
25036 IF ARG_3$="POGMAG" THEN CMD_STR$="END"
25040 CHECK_WRITE_END:RETURN 
25045 ! 
25160 DISC_APPLIES_TO=APD[6]; DISC_AMT=APD[7]
25170 WORKMAN_COMP_WH=APD[8]; NET_SALE=APD[9]
25180 DAYS_TO_EXTEND_DUE=APD[10]; INTERNAL_USE=APD[11]
25190 ALT_CURR_GROSS_AMT=APD[12]; ALT_CURR_DISC_AMT=APD[13]
25200 DISC_AMT_2ND=APD[14]
25280 REFRESH_FLG=1
25290 RETURN 
26000 ! Load Screens with info
26010 LOAD_INFO:
26020 ! 
26030 INV_DATE$=APD$(21,6); INV_DUE_DATE$=APD$(29,6); DISC_EXPIRE_DATE$=APD$(35,6)
26040 TERMS_CODE$=APD$(27,2); INV_COMMENT$=APD$(41,15)
26050 OUR_REF_NUM$=STP(APD$(56,10)); PRNT_CHK_ON_BANK$=APD$(66,3)
26060 CATEGORY$=APD$(69,9); PYMNT_SELECTION_CODE$=APD$(78,2)
26070 PYMNT_PRIORITY_CODE$=APD$(80,1); INV_ON_HOLD$=APD$(81,1)
26080 SPECIAL_INV_TYPE$=APD$(82,1); INV_TYPE$=APD$(83,1)
26090 APPLY_TO_INV_NUM$=APD$(84,10); SPER_CODE$=APD$(100,4)
26100 SRC_COMP_CODE$=APD$(104,3); SRC_COMP_LOC_TYPE$=APD$(107,1)
26110 ALT_CURR_CODE$=APD$(108,3); DISC_DATE_2ND$=APD$(111,6)
26120 APD_UNUSED_1$=APD$(117,30)
26130 APE_LINK=APD[1]; GROSS_INV_AMT=APD[2]
26140 SPECIAL_AMT_1=APD[2]; SPECIAL_AMT_2=APD[3]
26150 SPECIAL_AMT_3=APD[4]; SPECIAL_AMT_4=APD[5]
26160 DISC_APPLIES_TO=APD[6]; DISC_AMT=APD[7]
26170 WORKMAN_COMP_WH=APD[8]; NET_SALE=APD[9]
26180 DAYS_TO_EXTEND_DUE=APD[10]; INTERNAL_USE=APD[11]
26190 ALT_CURR_GROSS_AMT=APD[12]; ALT_CURR_DISC_AMT=APD[13]
26200 DISC_AMT_2ND=APD[14]
26270 _ENABLE_FLG=-1
26280 REFRESH_FLG=1
26290 RETURN 
27000 ! Assign Variables
27010 ASSIGN_INFO:
27015 DIM APD$(148),APD[14]
27020 APD$(1,4)=FY$; APD$(5,2)=ACCTPD$; APD$(7,10)=VENDOR$; APD$(17,10)=INV_NUM$
27030 APD$(27,6)=INV_DATE$; APD$(35,6)=INV_DUE_DATE$; APD$(41,6)=DISC_EXPIRE_DATE$
27040 APD$(33,2)=TERMS_CODE$; APD$(47,15)=INV_COMMENT$
27045 CALL "ZZWLKU;PARSE_PORDER",OUR_REF_NUM$,O_D$,O_N$; OUR_REF_NUM$=O_D$+O_N$ ! SSP 189350
27050 APD$(62,10)=OUR_REF_NUM$; APD$(72,3)=PRNT_CHK_ON_BANK$
27060 APD$(75,9)=CATEGORY$; APD$(84,2)=PYMNT_SELECTION_CODE$
27070 APD$(86,1)=PYMNT_PRIORITY_CODE$; APD$(87,1)=INV_ON_HOLD$
27080 APD$(88,1)=SPECIAL_INV_TYPE$; APD$(89,1)=INV_TYPE$
27090 APD$(90,10)=APPLY_TO_INV_NUM$; APD$(100,4)=SPER_CODE$
27100 APD$(104,3)=SRC_COMP_CODE$; APD$(107,1)=SRC_COMP_LOC_TYPE$
27110 APD$(108,3)=ALT_CURR_CODE$; APD$(111,6)=DISC_DATE_2ND$
27120 APD$(117,30)=APD_UNUSED_1$
27130 APD[0]=APE_LINK; APD[1]=GROSS_INV_AMT
27140 APD[2]=SPECIAL_AMT_1; APD[3]=SPECIAL_AMT_2
27150 APD[4]=SPECIAL_AMT_3; APD[5]=SPECIAL_AMT_4
27160 APD[6]=DISC_APPLIES_TO; APD[7]=DISC_AMT
27170 APD[8]=WORKMAN_COMP_WH; APD[9]=NET_SALE
27180 APD[10]=DAYS_TO_EXTEND_DUE; APD[11]=INTERNAL_USE
27190 APD[12]=ALT_CURR_GROSS_AMT; APD[13]=ALT_CURR_DISC_AMT
27200 APD[14]=DISC_AMT_2ND
27280 REFRESH_FLG=1
27290 RETURN 
28000 CATEGORY_ON_MAIN_SELECT:! Load new value into the real category
28010 CATEGORY$=CATEGORY_ON_MAIN$
28040 REFRESH_FLG=1
28045 RETURN 
28049 ! ***********************************************************
28050 CATEGORY_SELECT:! Load new value into CATEGORY_ON_MAIN for consistancy
28060 CATEGORY_ON_MAIN$=CATEGORY$
28090 REFRESH_FLG=1
28095 RETURN 
28099 ! ***********************************************************
30000 ! 
30010 FOLDER_ASSIGN:
30020 IF FOLDER_ID$<>"APGUT3.1" THEN CALL "*wingrp;Enable",BTN_BACK.GRP$ ELSE CALL "*wingrp;Disable",BTN_BACK.GRP$
30030 IF FOLDER_ID$="APGUT3.3" THEN CALL "*WINGRP;DISABLE",BTN_NEXT.GRP$; CALL "*WINGRP;ENABLE",EXT_1.GRP$; CALL "*WINGRP;DISABLE",AP_INV.GRP$ ELSE CALL "*WINGRP;ENABLE",BTN_NEXT.GRP$; CALL "*WINGRP;ENABLE",AP_INV.GRP$
30190 RETURN 
31000 ! 
31010 NEXT_ROUTINE:
31015 IF REQ_FLG=1 THEN REQ_FLG=0; RETURN 
31020 IF FOLDER_ID$="APGUT3.1" THEN NEXT_FOLDER=FLDR.APGUT3.3.CTL
31030 IF FOLDER_ID$="APGUT3.2" THEN NEXT_FOLDER=FLDR.APGUT3.3.CTL
31189 REFRESH_FLG=1
31190 RETURN 
32000 ! 
32010 BACK_ROUTINE:
32020 IF FOLDER_ID$="APGUT3.2" THEN NEXT_FOLDER=FLDR.APGUT3.1.CTL
32030 IF FOLDER_ID$="APGUT3.3" THEN APE_LINK=DEC($00$+MID(Y$,1,2)),APE_LINK$=STR(APE_LINK); NEXT_FOLDER=FLDR.APGUT3.2.CTL
32080 REFRESH_FLG=1
32090 RETURN 
33000 POST_EXPIRE:! After expire date
33010 IF %F0$(80,1)<>"Y" THEN PERFORM "APGUT3;CHECK_REQD_FLDS"; PERFORM "APGUT3;NEXT_ROUTINE"
33095 RETURN 
33099 ! ***********************************************
56000 REM "189350-On A/P Invoice Entry display incorrect field our_ref_no
56010 ! "191719-AP Invoice entry will allow you to setup invoice for blank
56011 ! "       vendor"
56020 ! "191433-If paramters for AP say 2005 12 AR Parms 2006 01 doing
56021 ! "192329-When PO Receiving an order and you are NOT divisionalized
56022 ! "       the Our Ref No in the AP invoice does not display correctly
56023 ! "193387-Pgm APGUT3, Going thru PO Rec to AP interface. If you click
56024 ! "       Exit to bypass the wrong message pops up"
