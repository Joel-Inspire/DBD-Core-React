0010 ! NOT USED AT THIS TIME, WENT BACK TO INDEX FILE APE ***** APGDAA.4 - File Maintenance Program for APL-Invoice Entry Lines File (="APL"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Oct. 4, 2001 18:34
0030 ! ************************************************************************
0035 REM "5.5 - 09/10/07 - 16.032777 - jdf - SSP# 211380
0037 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
0040 REM "Copyright 2007 TopForm Software Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="APL"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0185 GOSUB CUSTOM_INIT
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=5
0430 DIM _KEYS$[1:6]; _KEYS$[1]="FY$",_KEYS$[2]="ACCTPD$",_KEYS$[3]="VENDOR$",_KEYS$[4]="INV_NUM$",_KEYS$[5]="LINE_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 READ DATA FROM ARG_1$ TO FY$,ACCTPD$,VENDOR$,INV_NUM$,LINE_NUM$,NET_SALE$
0536 ARG_1$=FY$+ACCTPD$+VENDOR$+INV_NUM$+LINE_NUM$
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 CLOSE (_APL); CLOSE (_GL1)
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;PARSE_VEND",VENDOR$,VEND_DIV$,VEND_CODE$
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1855 LIST_BOX LOAD LINES.CTL,""
1856 TOTAL=0,TOTAL$=""
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2035 IF ARG_1$>"" THEN GOSUB PROCESS_READ; GOTO DISP_REC
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3061 VENDOR$=VEND_DIV$+VEND_CODE$
3065 GOSUB READ_RECORDS
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=FY.CTL,_FIRST_FIELD=TRANS_DATE.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 HOURS$=STR(HOURS)
10030 UNITS$=STR(UNITS)
10040 RATE$=STR(RATE)
10050 AMT$=STR(AMT)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="HOURS",_X=HOURS.CTL,HOURS=NUM(HOURS$,ERR=NON_NUMERIC)
11030 _X$="UNITS",_X=UNITS.CTL,UNITS=NUM(UNITS$,ERR=NON_NUMERIC)
11040 _X$="RATE",_X=RATE.CTL,RATE=NUM(RATE$,ERR=NON_NUMERIC)
11050 _X$="AMT",_X=AMT.CTL,AMT=NUM(AMT$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN FY$=""
13030 IF _CLR_FLG$="R" THEN ACCTPD$=""
13040 IF _CLR_FLG$="R" THEN VEND_DIV$=""
13050 IF _CLR_FLG$="R" THEN VEND_CODE$="",VENDOR$=""
13060 IF _CLR_FLG$="R" THEN INV_NUM$=""
13070 IF _CLR_FLG$="R" THEN LINE_NUM$=""
13080 TRANS_DATE$=""
13090 GL_ACCT$=""
13100 JOB_NUM$=""
13110 JC_COST_CODE$=""
13120 COST_CODE_TYPE$=""
13130 TF_MEMO$=""
13140 APL_UNUSED_1$=""
13150 HOURS=0
13160 UNITS=0
13170 RATE=0
13180 AMT=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=ACCTPD.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=VENDOR.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=INV_NUM.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14060 IF _ENABLE_FLG=5 THEN CALL "*wingrp;Enable",KEY5.GRP$; NEXT_ID=LINE_NUM.CTL ELSE CALL "*wingrp;Disable",KEY5.GRP$
14070 ! IF _ENABLE_FLG=6 THEN CALL "*wingrp;Enable",KEY6.GRP$; NEXT_ID=LINE_NUM.CTL ELSE CALL "*wingrp;Disable",KEY6.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(17,"N")
15030 IF _ORIG.FY$=_CUR.FY$ OR FY$=_CUR.FY$ THEN GOTO *NEXT ELSE IF _ORIG.FY$=FY$ THEN _CHG2$=_CHG2$+SEP+MSG("FY")+" = "+_CUR.FY$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FY")+" = "+_CUR.FY$
15040 IF _ORIG.ACCTPD$=_CUR.ACCTPD$ OR ACCTPD$=_CUR.ACCTPD$ THEN GOTO *NEXT ELSE IF _ORIG.ACCTPD$=ACCTPD$ THEN _CHG2$=_CHG2$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCTPD$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCTPD$
15050 IF _ORIG.VEND_DIV$=_CUR.VEND_DIV$ OR VEND_DIV$=_CUR.VEND_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_DIV$=VEND_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$
15060 IF _ORIG.VEND_CODE$=_CUR.VEND_CODE$ OR VEND_CODE$=_CUR.VEND_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_CODE$=VEND_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$
15070 IF _ORIG.INV_NUM$=_CUR.INV_NUM$ OR INV_NUM$=_CUR.INV_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.INV_NUM$=INV_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$
15080 IF _ORIG.LINE_NUM$=_CUR.LINE_NUM$ OR LINE_NUM$=_CUR.LINE_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.LINE_NUM$=LINE_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("LINE_NUM")+" = "+_CUR.LINE_NUM$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_NUM")+" = "+_CUR.LINE_NUM$
15090 IF _ORIG.TRANS_DATE$=_CUR.TRANS_DATE$ OR TRANS_DATE$=_CUR.TRANS_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.TRANS_DATE$=TRANS_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("TRANS_DATE")+" = "+_CUR.TRANS_DATE$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TRANS_DATE")+" = "+_CUR.TRANS_DATE$
15100 IF _ORIG.GL_ACCT$=_CUR.GL_ACCT$ OR GL_ACCT$=_CUR.GL_ACCT$ THEN GOTO *NEXT ELSE IF _ORIG.GL_ACCT$=GL_ACCT$ THEN _CHG2$=_CHG2$+SEP+MSG("GL_ACCT")+" = "+_CUR.GL_ACCT$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GL_ACCT")+" = "+_CUR.GL_ACCT$
15110 IF _ORIG.JOB_NUM$=_CUR.JOB_NUM$ OR JOB_NUM$=_CUR.JOB_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.JOB_NUM$=JOB_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("JOB_NUM")+" = "+_CUR.JOB_NUM$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("JOB_NUM")+" = "+_CUR.JOB_NUM$
15120 IF _ORIG.JC_COST_CODE$=_CUR.JC_COST_CODE$ OR JC_COST_CODE$=_CUR.JC_COST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.JC_COST_CODE$=JC_COST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("JC_COST_CODE")+" = "+_CUR.JC_COST_CODE$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("JC_COST_CODE")+" = "+_CUR.JC_COST_CODE$
15130 IF _ORIG.COST_CODE_TYPE$=_CUR.COST_CODE_TYPE$ OR COST_CODE_TYPE$=_CUR.COST_CODE_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.COST_CODE_TYPE$=COST_CODE_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("COST_CODE_TYPE")+" = "+_CUR.COST_CODE_TYPE$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COST_CODE_TYPE")+" = "+_CUR.COST_CODE_TYPE$
15140 IF _ORIG.TF_MEMO$=_CUR.TF_MEMO$ OR TF_MEMO$=_CUR.TF_MEMO$ THEN GOTO *NEXT ELSE IF _ORIG.TF_MEMO$=TF_MEMO$ THEN _CHG2$=_CHG2$+SEP+MSG("MEMO")+" = "+_CUR.TF_MEMO$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MEMO")+" = "+_CUR.TF_MEMO$
15150 IF _ORIG.APL_UNUSED_1$=_CUR.APL_UNUSED_1$ OR APL_UNUSED_1$=_CUR.APL_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.APL_UNUSED_1$=APL_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("APL_UNUSED_1")+" = "+_CUR.APL_UNUSED_1$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("APL_UNUSED_1")+" = "+_CUR.APL_UNUSED_1$
15160 IF _ORIG.HOURS=_CUR.HOURS OR HOURS=_CUR.HOURS THEN GOTO *NEXT ELSE IF _ORIG.HOURS=HOURS THEN _CHG2$=_CHG2$+SEP+MSG("HOURS")+" = "+STR(_CUR.HOURS),_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("HOURS")+" = "+STR(_CUR.HOURS)
15170 IF _ORIG.UNITS=_CUR.UNITS OR UNITS=_CUR.UNITS THEN GOTO *NEXT ELSE IF _ORIG.UNITS=UNITS THEN _CHG2$=_CHG2$+SEP+MSG("UNITS")+" = "+STR(_CUR.UNITS),_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNITS")+" = "+STR(_CUR.UNITS)
15180 IF _ORIG.RATE=_CUR.RATE OR RATE=_CUR.RATE THEN GOTO *NEXT ELSE IF _ORIG.RATE=RATE THEN _CHG2$=_CHG2$+SEP+MSG("RATE")+" = "+STR(_CUR.RATE),_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RATE")+" = "+STR(_CUR.RATE)
15190 IF _ORIG.AMT=_CUR.AMT OR AMT=_CUR.AMT THEN GOTO *NEXT ELSE IF _ORIG.AMT=AMT THEN _CHG2$=_CHG2$+SEP+MSG("AMT")+" = "+STR(_CUR.AMT),_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("AMT")+" = "+STR(_CUR.AMT)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN FY$=_CUR.FY$
16030 IF _CHG_VAR$(2,1)="Y" THEN ACCTPD$=_CUR.ACCTPD$
16040 IF _CHG_VAR$(3,1)="Y" THEN VEND_DIV$=_CUR.VEND_DIV$
16050 IF _CHG_VAR$(4,1)="Y" THEN VEND_CODE$=_CUR.VEND_CODE$
16060 IF _CHG_VAR$(5,1)="Y" THEN INV_NUM$=_CUR.INV_NUM$
16070 IF _CHG_VAR$(6,1)="Y" THEN LINE_NUM$=_CUR.LINE_NUM$
16080 IF _CHG_VAR$(7,1)="Y" THEN TRANS_DATE$=_CUR.TRANS_DATE$
16090 IF _CHG_VAR$(8,1)="Y" THEN GL_ACCT$=_CUR.GL_ACCT$
16100 IF _CHG_VAR$(9,1)="Y" THEN JOB_NUM$=_CUR.JOB_NUM$
16110 IF _CHG_VAR$(10,1)="Y" THEN JC_COST_CODE$=_CUR.JC_COST_CODE$
16120 IF _CHG_VAR$(11,1)="Y" THEN COST_CODE_TYPE$=_CUR.COST_CODE_TYPE$
16130 IF _CHG_VAR$(12,1)="Y" THEN TF_MEMO$=_CUR.TF_MEMO$
16140 IF _CHG_VAR$(13,1)="Y" THEN APL_UNUSED_1$=_CUR.APL_UNUSED_1$
16150 IF _CHG_VAR$(14,1)="Y" THEN HOURS=_CUR.HOURS
16160 IF _CHG_VAR$(15,1)="Y" THEN UNITS=_CUR.UNITS
16170 IF _CHG_VAR$(16,1)="Y" THEN RATE=_CUR.RATE
16180 IF _CHG_VAR$(17,1)="Y" THEN AMT=_CUR.AMT
16990 RETURN 
20000 ! Custom routines
20010 CUSTOM_INIT:
20020 LINES_IOLIST:IOLIST LINE$,ACCT$,ACCT_DESC$,AMOUNT$
20025 APL_IOLIST:IOLIST APL$,APL[0],APL[1],APL[2],APL[3]
20030 _APL=HFN; OPEN (_APL)"APL"+%C$
20040 _GL1=HFN; OPEN (_GL1)"GL1"+%C$
20070 W1$="###,###,###.00-"
20080 DIM APL$(150),APL[3]
20090 CUSTOM_INIT_END:RETURN 
20095 ! 
20100 READ_RECORDS:
20110 LIST_BOX LOAD LINES.CTL,""
20120 K1$=ARG_1$(1,26)
20130 READ (_APL,KEY=K1$,DOM=*NEXT)
20140 READ_NEXT_REC: K0$=KEY(_APL,END=END_OF_DISPLAY)
20150 READ (_APL,KEY=K0$)IOL=APL_IOLIST
20160 IF K0$(1,LEN(K1$))<>K1$ THEN GOTO END_OF_DISPLAY
20170 LINE$=APL$(27,3),UF_ACCT$=APL$(36,12),AMOUNT$=STP(STR(APL[3]:W1$),2); IF APL[3]<0 THEN AMOUNT$='RED'+AMOUNT$
20175 GOSUB FORMAT_GL_ACCT
20180 DIM GL1$(51); READ (_GL1,KEY=APL$(36,12),DOM=*NEXT)GL1$
20190 ACCT_DESC$=GL1$(13,35)
20200 GOSUB LOAD_LIST_BOX
20210 TOTAL+=APL[3]
20220 GOTO READ_NEXT_REC
20295 ! 
20300 END_OF_DISPLAY:
20310 DETAIL_LINES=LINES.CTL'ITEMCOUNT
20320 IF NOT(DETAIL_LINES) THEN ACCT_DESC$='BLUE'+"No records to display"; GOSUB LOAD_LIST_BOX
20360 TOTAL=NUM(NET_SALE$)-TOTAL
20370 TOTAL$=STP(STR(TOTAL:W1$),2); IF TOTAL<0 THEN TOTAL$='RED'+TOTAL$
20450 NEXT_ID=GL_ACCT.CTL; REFRESH_FLG=1
20490 READ_RECORDS_END:RETURN 
20495 ! 
20500 LOAD_LIST_BOX:
20510 LIST_BOX LOAD LINES.CTL,0,REC(IOL=LINES_IOLIST)
20520 READ DATA FROM "" TO IOL=LINES_IOLIST
20540 LOAD_LIST_BOX_END:RETURN 
20595 ! 
20600 SHOW_LINES:
20610 IF LINES$="" THEN RETURN 
20620 READ DATA FROM LINES$ TO _Y1$,_Y2$,_Y3$,_Y4$
20630 _KEY$=_KEY$(1,26)+_Y1$; READ (_FIL_NO,KEY=_KEY$,DOM=SHOW_LINES_END)
20635 TOTAL$="",TOTAL=0
20640 GOSUB PROCESS_READ
20650 GOSUB DISP_REC
20660 NEXT_ID=GL_ACCT.CTL,REFRESH_FLG=1
20690 SHOW_LINES_END:RETURN 
20695 ! 
20700 FORMAT_GL_ACCT:
20710 ACCT$=UF_ACCT$(1,%GL_ACCT_LEN)
20720 IF %GL_SUBACCT_LEN>0 THEN ACCT$+="-"+UF_ACCT$(%GL_ACCT_LEN+1,%GL_SUBACCT_LEN)
20730 IF %GL_DEPT_LEN>0 THEN ACCT$+="-"+UF_ACCT$(%GL_ACCT_LEN+%GL_SUBACCT_LEN+1,%GL_DEPT_LEN)
20740 FORMAT_GL_ACCT_END:RETURN 
20750 ! 
56000 REM "211380-TopForm file feldnames which are SQL keywords break Oracle. 
