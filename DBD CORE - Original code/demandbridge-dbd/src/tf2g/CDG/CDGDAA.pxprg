0010 REM "Maintain CD3_CashDisbGW File <CDGDAA>
0035 REM "5.7 - 02/07/14 - 9.789444 - tma - SSP# 268353
0037 REM "268353-CDGDAA-Cash Disbursements GW Maintenace.  If a record is    
0040 REM "Copyright 2014 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 IF TCB(88)=0 THEN MSGBOX "You must be using Windx to access this program" ELSE PROCESS "CDGDAA","../CDG/CD.EN"
0055 IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT 
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="CD3"+%C$
0163 X0=-1
0166 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO WRAPUP
0169 IF X3$(66,1)>"2" THEN PRECISION NUM(X3$(66,1),ERR=*NEXT)
0172 DIM Z[NUM(X3$(60,3))]
0175 Z$="02O CD3... 03O AP4... 04O API... 05O ZYB... 13O ZZPARM "
0178 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; ON Z0 GOTO *NEXT,WRAPUP
0181 _FIL_NO=Z[2]
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=4
0430 DIM _KEYS$[1:4]; _KEYS$[1]="FY$",_KEYS$[2]="ACCTPD$",_KEYS$[3]="BANK_CODE$",_KEYS$[4]="SEQ_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1011 IF ID$<>"SEQ_NUM" THEN GOTO 1015
1012 SEQ_NUM$=STR(NUM(SEQ_NUM$):"0000",ERR=*NEXT)
1013 SEQ_NUM$=PAD(SEQ_NUM$,4," ")
1014 SEQ_NUM.CTL'VALUE$=SEQ_NUM$
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE; IF _ABORT_WRITE THEN _ABORT_WRITE=0; RETURN 
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0,REFRESH_FLG=1,_CLR_FLG$="R"; GOSUB CLEAR_FIELDS ! SSP#268353
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3055 VENDOR$=VEND_DIV$+VEND_CODE$,%VEND_DIV$=VEND_DIV$,%VEND_CODE$=VEND_CODE$
3057 GOSUB GET_ONHOLD_DESC
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$="",_ABORT_WRITE=0
3230 EXTRACT (_FIL_NO,KEY=KEC(_FIL_NO),REC=_CUR$,DOM=WRT,ERR=REC_BUSY)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3410 REC_BUSY:
3420 IF ERR=0 THEN MSGBOX _MSG_REC_LOCKED$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG_CANNOT_WRITE$+SEP+MSG(ERR),_ERROR$
3430 _ABORT_WRITE=1
3440 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=FY.CTL,_FIRST_FIELD=VENDOR.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF UCS(_KEYS$[_CURKEY])=UCS(ID$)+"$" OR UCS(_KEYS$[_CURKEY])=UCS(ID$) THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 GROSS_AMOUNT$=STR(GROSS_AMOUNT)
10030 DISC_TAKEN$=STR(DISC_TAKEN)
10040 NET_AMOUNT$=STR(NET_AMOUNT)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="GROSS_AMOUNT",_X=GROSS_AMOUNT.CTL,GROSS_AMOUNT=NUM(GROSS_AMOUNT$,ERR=NON_NUMERIC)
11030 _X$="DISC_TAKEN",_X=DISC_TAKEN.CTL,DISC_TAKEN=NUM(DISC_TAKEN$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12030 GOSUB VALIDATE_REC
12040 IF NOT(NUL(ON_HOLD_REASON$)) THEN MSGBOX MSG("CDGDAA_01",ON_HOLD_DESC$); _W_FLG=0
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN FY$=""
13030 IF _CLR_FLG$="R" THEN ACCTPD$=""
13040 IF _CLR_FLG$="R" THEN BANK_CODE$=""
13050 IF _CLR_FLG$="R" THEN SEQ_NUM$=""
13060 VEND_DIV$=""
13070 VEND_CODE$=""
13075 VENDOR$="",%VEND_DIV$="",%VEND_CODE$=""
13080 INV_NUM$=""
13090 CHECK_REF$=""
13100 CHECK_DATE$=""
13110 REF_NUM$=""
13120 VEND_NAME$="",%VEND_NAME$=""
13130 ON_HOLD_REASON$=""
13140 CD3_UNUSED_1$=""
13150 GROSS_AMOUNT=0
13160 DISC_TAKEN=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=ACCTPD.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=BANK_CODE.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=SEQ_NUM.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(18,"N")
15030 IF _ORIG.FY$=_CUR.FY$ OR FY$=_CUR.FY$ THEN GOTO *NEXT ELSE IF _ORIG.FY$=FY$ THEN _CHG2$=_CHG2$+SEP+MSG("FY")+" = "+_CUR.FY$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FY")+" = "+_CUR.FY$
15040 IF _ORIG.ACCTPD$=_CUR.ACCTPD$ OR ACCTPD$=_CUR.ACCTPD$ THEN GOTO *NEXT ELSE IF _ORIG.ACCTPD$=ACCTPD$ THEN _CHG2$=_CHG2$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCTPD$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ACCTPD")+" = "+_CUR.ACCTPD$
15050 IF _ORIG.BANK_CODE$=_CUR.BANK_CODE$ OR BANK_CODE$=_CUR.BANK_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.BANK_CODE$=BANK_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("BANK_CODE")+" = "+_CUR.BANK_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BANK_CODE")+" = "+_CUR.BANK_CODE$
15060 IF _ORIG.SEQ_NUM$=_CUR.SEQ_NUM$ OR SEQ_NUM$=_CUR.SEQ_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.SEQ_NUM$=SEQ_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("SEQ_NUM")+" = "+_CUR.SEQ_NUM$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEQ_NUM")+" = "+_CUR.SEQ_NUM$
15070 IF _ORIG.VEND_DIV$=_CUR.VEND_DIV$ OR VEND_DIV$=_CUR.VEND_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_DIV$=VEND_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$
15080 IF _ORIG.VEND_CODE$=_CUR.VEND_CODE$ OR VEND_CODE$=_CUR.VEND_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_CODE$=VEND_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$
15090 IF _ORIG.INV_NUM$=_CUR.INV_NUM$ OR INV_NUM$=_CUR.INV_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.INV_NUM$=INV_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INV_NUM")+" = "+_CUR.INV_NUM$
15100 IF _ORIG.CHECK_REF$=_CUR.CHECK_REF$ OR CHECK_REF$=_CUR.CHECK_REF$ THEN GOTO *NEXT ELSE IF _ORIG.CHECK_REF$=CHECK_REF$ THEN _CHG2$=_CHG2$+SEP+MSG("CHECK_REF")+" = "+_CUR.CHECK_REF$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CHECK_REF")+" = "+_CUR.CHECK_REF$
15110 IF _ORIG.CHECK_DATE$=_CUR.CHECK_DATE$ OR CHECK_DATE$=_CUR.CHECK_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.CHECK_DATE$=CHECK_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("CHECK_DATE")+" = "+_CUR.CHECK_DATE$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CHECK_DATE")+" = "+_CUR.CHECK_DATE$
15120 IF _ORIG.REF_NUM$=_CUR.REF_NUM$ OR REF_NUM$=_CUR.REF_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.REF_NUM$=REF_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("REF_NUM")+" = "+_CUR.REF_NUM$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("REF_NUM")+" = "+_CUR.REF_NUM$
15130 IF _ORIG.VEND_NAME$=_CUR.VEND_NAME$ OR VEND_NAME$=_CUR.VEND_NAME$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_NAME$=VEND_NAME$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_NAME")+" = "+_CUR.VEND_NAME$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_NAME")+" = "+_CUR.VEND_NAME$
15140 IF _ORIG.ON_HOLD_REASON$=_CUR.ON_HOLD_REASON$ OR ON_HOLD_REASON$=_CUR.ON_HOLD_REASON$ THEN GOTO *NEXT ELSE IF _ORIG.ON_HOLD_REASON$=ON_HOLD_REASON$ THEN _CHG2$=_CHG2$+SEP+MSG("O_H_R")+" = "+_CUR.ON_HOLD_REASON$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("O_H_R")+" = "+_CUR.ON_HOLD_REASON$
15150 IF _ORIG.CD3_UNUSED_1$=_CUR.CD3_UNUSED_1$ OR CD3_UNUSED_1$=_CUR.CD3_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.CD3_UNUSED_1$=CD3_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.CD3_UNUSED_1$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.CD3_UNUSED_1$
15160 IF _ORIG.GROSS_AMOUNT=_CUR.GROSS_AMOUNT OR GROSS_AMOUNT=_CUR.GROSS_AMOUNT THEN GOTO *NEXT ELSE IF _ORIG.GROSS_AMOUNT=GROSS_AMOUNT THEN _CHG2$=_CHG2$+SEP+MSG("GROSS_AMT")+" = "+STR(_CUR.GROSS_AMOUNT),_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GROSS_AMT")+" = "+STR(_CUR.GROSS_AMOUNT)
15170 IF _ORIG.DISC_TAKEN=_CUR.DISC_TAKEN OR DISC_TAKEN=_CUR.DISC_TAKEN THEN GOTO *NEXT ELSE IF _ORIG.DISC_TAKEN=DISC_TAKEN THEN _CHG2$=_CHG2$+SEP+MSG("DISC_T")+" = "+STR(_CUR.DISC_TAKEN),_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DISC_T")+" = "+STR(_CUR.DISC_TAKEN)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN FY$=_CUR.FY$
16030 IF _CHG_VAR$(2,1)="Y" THEN ACCTPD$=_CUR.ACCTPD$
16040 IF _CHG_VAR$(3,1)="Y" THEN BANK_CODE$=_CUR.BANK_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN SEQ_NUM$=_CUR.SEQ_NUM$
16060 IF _CHG_VAR$(5,1)="Y" THEN VEND_DIV$=_CUR.VEND_DIV$
16070 IF _CHG_VAR$(6,1)="Y" THEN VEND_CODE$=_CUR.VEND_CODE$
16080 IF _CHG_VAR$(7,1)="Y" THEN INV_NUM$=_CUR.INV_NUM$
16090 IF _CHG_VAR$(8,1)="Y" THEN CHECK_REF$=_CUR.CHECK_REF$
16100 IF _CHG_VAR$(9,1)="Y" THEN CHECK_DATE$=_CUR.CHECK_DATE$
16110 IF _CHG_VAR$(10,1)="Y" THEN REF_NUM$=_CUR.REF_NUM$
16120 IF _CHG_VAR$(11,1)="Y" THEN VEND_NAME$=_CUR.VEND_NAME$
16130 IF _CHG_VAR$(12,1)="Y" THEN ON_HOLD_REASON$=_CUR.ON_HOLD_REASON$
16140 IF _CHG_VAR$(13,1)="Y" THEN CD3_UNUSED_1$=_CUR.CD3_UNUSED_1$
16150 IF _CHG_VAR$(14,1)="Y" THEN GROSS_AMOUNT=_CUR.GROSS_AMOUNT
16160 IF _CHG_VAR$(15,1)="Y" THEN DISC_TAKEN=_CUR.DISC_TAKEN
16990 RETURN 
16999 ! 
17000 ! On Hold Code - Get description
17005 GET_ONHOLD_DESC:
17010 ON_HOLD_DESC$=""; IF NOT(NUL(ON_HOLD_REASON$)) THEN ON_HOLD_DESC$=MSG("CD3ERR_"+PAD(ON_HOLD_REASON$,2))
17020 REFRESH_FLG=1
17025 RETURN 
17029 ! 
18000 REM " Validate the current CD3 record
18010 VALIDATE_REC:
18015 ON_HOLD_REASON$="" ! Assume the record is OK now to begin with, check fields and set error codes as we go
18020 DIM YEAR$(105); FIND (Z[13],KEY=X3$(9,3)+"G/LYE"+FY$,DOM=*NEXT)YEAR$; IF POS(YEAR$(99,1)="CR")<>0 THEN ON_HOLD_REASON$="08"; GOTO VALIDATE_ERR ELSE GOTO AFTER_FY; REM "Closed fiscal year
18030 ON_HOLD_REASON$="01"; GOTO VALIDATE_ERR; REM "Invalid fiscal year
18040 AFTER_FY:
18050 IF ACCTPD$<"01" OR ACCTPD$>YEAR$(13,2) THEN IF NUL(ON_HOLD_REASON$) THEN ON_HOLD_REASON$="02"; GOTO VALIDATE_ERR; REM "Invalid accounting period
18060 FIND (Z[5],KEY=PAD(BANK_CODE$,3),DOM=*NEXT); GOTO AFTER_BANK_CODE
18070 IF NUL(ON_HOLD_REASON$) THEN ON_HOLD_REASON$="03"; GOTO VALIDATE_ERR; REM "Invalid bank code
18080 AFTER_BANK_CODE:
18090 DIM AP4$(430); FIND (Z[3],KEY=VENDOR$,DOM=*NEXT)AP4$; GOTO AFTER_VENDOR
18100 IF NUL(ON_HOLD_REASON$) THEN ON_HOLD_REASON$="04"; GOTO VALIDATE_ERR; REM "Invalid Vendor code
18110 AFTER_VENDOR:
18120 FIND (Z[4],KEY=VENDOR$+PAD(INV_NUM$,10),DOM=*NEXT); GOTO AFTER_INV_NUM
18130 IF NUL(ON_HOLD_REASON$) THEN ON_HOLD_REASON$="05"; GOTO VALIDATE_ERR; REM "Invalid invoice number
18140 AFTER_INV_NUM:
18145 IF NUL(CHECK_REF$) THEN IF NUL(ON_HOLD_REASON$) THEN ON_HOLD_REASON$="09"; GOTO VALIDATE_ERR; REM "Invalid Check number
18150 ! 
18160 VALIDATE_OK:! If here then record was validated
18170 RETURN 
18180 VALIDATE_ERR:! If here then record is invalid
18190 ON_HOLD_DESC$=MSG("CD3ERR_"+ON_HOLD_REASON$)
18200 REFRESH_FLG=1
18210 RETURN 
18499 ! 
18500 REM "Right query to view all records in CD3
18510 SEL_QRY:
18520 QRY_VAL$=""; PROCESS "QRY_CD3","../CDG/CD.EN",QRY_VAL$
18525 IF NUL(QRY_VAL$) THEN EXIT 
18530 _KEY$=QRY_VAL$; GOTO 1070
18539 ! 
56000 REM "268353-CDGDAA-Cash Disbursements GW Maintenace.  If a record is deleted not clearing fields
