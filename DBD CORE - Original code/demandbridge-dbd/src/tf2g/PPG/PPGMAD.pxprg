0010 ! PPGMAD - New EC Promo Product Setup
0035 REM "5.7 - 08/27/12 - 12.484166 - tma - SSP# 257562
0037 REM "257562-EC Promo in GUI.  If you are setting up a new item in ECP   
0040 REM "Copyright 2012 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0045 %EC_PROMO=1
0050 PROCESS "PPGMAD","../PPG/PP.EN"
0055 %EC_PROMO=0
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0156 DIM C(31)
0160 _FILE_NAME$="PP0"+%C$
0170 _PP0=HFN; OPEN (_PP0,IOL=*,REC=PP0$,ERR=OPEN_ERR)_FILE_NAME$
0171 _FILE_NAME$="AR1"+%C$,_AR1=HFN; OPEN (_AR1,IOL=*,REC=AR1$,ERR=OPEN_ERR)_FILE_NAME$
0172 _FILE_NAME$="FMP"+%C$,_FMP=HFN; OPEN (_FMP,ERR=OPEN_ERR)_FILE_NAME$
0173 _FILE_NAME$="FM1"+%C$,_FM1=HFN; OPEN (_FM1,ERR=OPEN_ERR)_FILE_NAME$
0174 _FILE_NAME$="IC0"+%C$,_IC0=HFN; OPEN (_IC0,ERR=OPEN_ERR)_FILE_NAME$
0175 _FILE_NAME$="ZZPARM",_ZZP=HFN; OPEN (_ZZP,ERR=OPEN_ERR)_FILE_NAME$
0176 _FILE_NAME$="PP0"+%C$,_PP0=HFN; OPEN (_PP0,IOL=*,REC=PP0$,ERR=OPEN_ERR)_FILE_NAME$
0177 _FILE_NAME$="PP1"+%C$,_PP1=HFN; OPEN (_PP1,IOL=*,REC=PP1$,ERR=OPEN_ERR)_FILE_NAME$
0178 _FILE_NAME$="PP2"+%C$,_PP2=HFN; OPEN (_PP2,IOL=*,REC=PP2$,ERR=OPEN_ERR)_FILE_NAME$
0179 _FILE_NAME$="PP3"+%C$,_PP3=HFN; OPEN (_PP3,IOL=*,REC=PP3$,ERR=OPEN_ERR)_FILE_NAME$
0180 _FILE_NAME$="ED0"+%C$,_ED0=HFN; OPEN (_ED0,IOL=*,REC=ED0$,ERR=OPEN_ERR)_FILE_NAME$
0181 _FILE_NAME$="ECR"+%C$,_ECR=HFN; OPEN (_ECR,ERR=OPEN_ERR)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="CUSTOMER$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 CLOSE (_AR1),(_FMP),(_FM1),(_IC0),(_ZZP),(_PP0),(_PP1),(_PP2),(_PP3)
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1011 IF _EOM$=$00$ THEN RETURN 
1015 IF ID$="CUSTOMER" AND STP(CUSTOMER$)="" THEN CUSTOMER$=DIM(10),%PANEL$="QRY_IC0",%STOCK$="Y" ELSE %STOCK$="N",%PANEL$="QRY_FM1"
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,CUST_DIV$,CUST$; CUSTOMER$=CUST_DIV$+CUST$
1047 FM1_ITEM$="N",IC0_ITEM$="N"; FIND (_FMP,KEY="D"+CUSTOMER$,DOM=*NEXT)FMP$; IF MID(FMP$,24,1)="Y" THEN FM1_ITEM$="Y"; GOTO 1050
1048 IC0_ITEM$="Y"; CALL "FS2DAK",%X3$,%X4$,0,CUSTOMER$,CIC$,"",""
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_PP3,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO,ERR=*RETURN),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CUSTOMER.CTL,_FIRST_FIELD=ITEM_CODE.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN CUSTOMER$="",%CUST_NAME$=""
13030 TF_ITEM$="",ED0.DESC$=""
13040 TF_SIZE$="",PP0.SIZE_DESC$=""
13050 COLOR$="",PP1.COLOR_DESC$=""
13060 OTHER$="",PP2.OTHER_DESC$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(3,"N")
15030 IF _ORIG.TF_SIZE$=_CUR.CUSTOMER$ OR CUSTOMER$=_CUR.CUSTOMER$ THEN GOTO *NEXT ELSE IF _ORIG.CUSTOMER$=CUSTOMER$ THEN _CHG2$=_CHG2$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUSTOMER$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CUST_CODE")+" = "+_CUR.CUSTOMER$
15040 IF _ORIG.TF_ITEM$=_CUR.TF_ITEM$ OR TF_ITEM$=_CUR.TF_ITEM$ THEN GOTO *NEXT ELSE IF _ORIG.TF_ITEM$=TF_ITEM$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM")+" = "+_CUR.TF_ITEM$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM")+" = "+_CUR.TF_ITEM$
15050 IF _ORIG.TF_SIZE$=_CUR.TF_SIZE$ OR TF_SIZE$=_CUR.TF_SIZE$ THEN GOTO *NEXT ELSE IF _ORIG.TF_SIZE$=TF_SIZE$ THEN _CHG2$=_CHG2$+SEP+MSG("SIZE")+" = "+_CUR.TF_SIZE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SIZE")+" = "+_CUR.TF_SIZE$
15060 IF _ORIG.COLOR$=_CUR.COLOR$ OR COLOR$=_CUR.COLOR$ THEN GOTO *NEXT ELSE IF _ORIG.COLOR$=COLOR$ THEN _CHG2$=_CHG2$+SEP+MSG("COLOR")+" = "+_CUR.COLOR$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("COLOR")+" = "+_CUR.COLOR$
15070 IF _ORIG.OTHER$=_CUR.OTHER$ OR OTHER$=_CUR.OTHER$ THEN GOTO *NEXT ELSE IF _ORIG.OTHER$=OTHER$ THEN _CHG2$=_CHG2$+SEP+MSG("OTHER")+" = "+_CUR.OTHER$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OTHER")+" = "+_CUR.OTHER$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN CUSTOMER$=_CUR.CUSTOMER$
16030 IF _CHG_VAR$(2,1)="Y" THEN TF_ITEM$=_CUR.TF_ITEM$
16040 IF _CHG_VAR$(3,1)="Y" THEN TF_SIZE$=_CUR.TF_SIZE$
16050 IF _CHG_VAR$(4,1)="Y" THEN COLOR$=_CUR.COLOR$
16060 IF _CHG_VAR$(5,1)="Y" THEN OTHER$=_CUR.OTHER$
16990 RETURN 
17000 COLOR: REFRESH_FLG=1
17005 IF QRY_VAL$="" AND _EOM$=$00$ THEN RETURN 
17006 IF STP(COLOR$)="" THEN COLOR$="  "; RETURN 
17007 TF_SIZE$=PAD(TF_SIZE$,2) ! SSP#257562
17010 XX=NUM(COLOR$,ERR=*NEXT),COLOR$=STR(NUM(COLOR$):"00"); GOTO 17030
17020 COLOR$=PAD(COLOR$,2," ")
17030 FIND (_PP1,KEY=COLOR$,DOM=NO_COLOR)
17040 COLOR.CTL'VALUE$=COLOR$,PP1.COLOR_DESC.CTL'VALUE$=PP1.COLOR_DESC$
17050 RETURN 
17060 NO_COLOR: NEXT_ID=COLOR.CTL,COLOR$=""; EXIT 
17070 SIZE: REFRESH_FLG=1
17072 IF QRY_VAL$="" AND _EOM$=$00$ THEN RETURN 
17075 IF STP(TF_SIZE$)="" THEN TF_SIZE$="  "; RETURN 
17080 XX=NUM(TF_SIZE$,ERR=*NEXT),TF_SIZE$=STR(NUM(TF_SIZE$):"00"); GOTO 17100
17090 TF_SIZE$=PAD(TF_SIZE$,2," ")
17100 FIND (_PP0,KEY=TF_SIZE$,DOM=NO_SIZE)
17110 TF_SIZE.CTL'VALUE$=TF_SIZE$,PP0.SIZE_DESC.CTL'VALUE$=PP0.SIZE_DESC$
17120 RETURN 
17130 NO_SIZE: NEXT_ID=TF_SIZE.CTL,TF_SIZE$=""; RETURN 
17140 OTHER: REFRESH_FLG=1
17142 TF_SIZE$=PAD(TF_SIZE$,2),COLOR$=PAD(COLOR$,2) ! SSP#257562
17145 IF QRY_VAL$="" AND _EOM$=$00$ THEN RETURN 
17146 IF STP(OTHER$)="" THEN OTHER$="  "; GOTO 17185
17150 XX=NUM(OTHER$,ERR=*NEXT),OTHER$=STR(NUM(OTHER$):"00"); GOTO 17170
17160 OTHER$=PAD(OTHER$,2," ")
17165 IF OTHER$="  " THEN RETURN 
17170 FIND (_PP2,KEY=OTHER$,DOM=NO_OTHER)
17180 OTHER.CTL'VALUE$=OTHER$,PP2.OTHER_DESC.CTL'VALUE$=PP2.OTHER_DESC$
17185 CALL "*WINGRP;ENABLE",BUTTONS.GRP$
17190 RETURN 
17200 NO_OTHER: NEXT_ID=OTHER.CTL,OTHER$=""; EXIT 
17210 QUERY: VAL$=""
17220 PROCESS "QRY_PP3","../PPG/PP.EN",VAL$
17230 IF STP(VAL$)="" THEN RETURN 
17240 _KEY$=VAL$,CUSTOMER$=VAL$(1,10),TF_ITEM$=VAL$(11,10)
17250 GOSUB 1045
17260 NEXT_ID=ITEM.CTL
17270 RETURN 
17273 ITEM: REFRESH_FLG=1
17276 IF QRY_VAL$="" AND _EOM$=$0000$ THEN GOSUB NO_ITEM ! RETURN
17279 IF STP(TF_ITEM$)="" THEN TF_ITEM$="    "; GOSUB NO_ITEM ! RETURN
17282 XX=NUM(TF_ITEM$,ERR=*NEXT),TF_ITEM$=STR(NUM(TF_ITEM$):"0000"); GOTO 17288
17285 TF_ITEM$=PAD(TF_ITEM$,4," ")
17288 FIND (_ED0,KEY=TF_ITEM$,DOM=NO_ITEM)
17291 TF_ITEM.CTL'VALUE$=TF_ITEM$,ED0.DESC.CTL'VALUE$=ED0.TF_DESC$
17294 RETURN 
17297 NO_ITEM: NEXT_ID=TF_ITEM.CTL,TF_ITEM$=""; EXIT 
17300 CHECK_ITEM:
17310 IF %STOCK$="N" THEN FILE_NUM=_FM1 ELSE FILE_NUM=_IC0
17320 FIND (FILE_NUM,KEY=CUSTOMER$+TF_ITEM$+TF_SIZE$+COLOR$+OTHER$,DOM=*RETURN)
17325 IF %STOCK$="N" THEN DES$=FM1.ITEM_DESC$ ELSE DES$=IC0.ITEM_DESC$
17330 PRINT 'MOVE'(_ORIG_OBJ_C-15,0); MSGBOX "Customer : "+FN%ZZDISP$(CUSTOMER$,"A/R")+" "+%CUST_NAME$+SEP+"        Item : "+TF_ITEM$+TF_SIZE$+COLOR$+OTHER$+" "+STP(DES$)+SEP+SEP+"Already exists, Please try again",MSG("WARNING"),"STOP"; PRINT 'MOVE'(_ORIG_OBJ_C,_ORIG_OBJ_L),; CHANGE_FLG=0
17340 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
17350 NEXT_ID=CUSTOMER.CTL
17360 RETURN 
18000 PROCEED:
18010 DIM C$(448),C(31)
18015 A$=CUSTOMER$+ITEM_CODE$,%STOCK$=%BCK_STOCK$
18020 IOLIST C$,C[0],C[1],C[2],C[3],C[4],C[5],C[6],C[7],C[8],C[9],C[10],C[11],C[12],C[13],C[14],C[15],C[16],C[17],C[18],C[19],C[20],C[21],C[22],C[23],C[24],C[25],C[26],C[27],C[28],C[29],C[30],C[31]
18030 CALL "ZZWLKU;PARSE_CUST",FROM_CUSTOMER$,CUST_DIV$,CUST_CODE$; FROM_CUSTOMER$=CUST_DIV$+CUST_CODE$
18035 _FILE_NAME$="FM1"+%C$,_FM1=HFN; OPEN (_FM1,ERR=OPEN_ERR)_FILE_NAME$
18036 _FILE_NAME$="PP3"+%C$,_PP3=HFN; OPEN (_PP3,IOL=*,REC=PP3$,ERR=OPEN_ERR)_FILE_NAME$
18040 FIND (_FM1,KEY=FROM_CUSTOMER$+FROM_ITEM_CODE$,DOM=*NEXT)IOL=18020
18050 Q$=C$
18060 C$(1,20)=CUSTOMER$+ITEM_CODE$,C$(109)="",C[6]=0,C[7]=0,C[8]=0,C[9]=0,C[10]=0,C[11]=0,C[12]=0,C[13]=0,C[14]=0,C[15]=0,C[16]=0,C[17]=0,C$(254,1)="0",C$(255,6)=%X3$(15,6)
18070 C$(238,16)=Q$(238,16),C$(212,3)=Q$(212,3),C[24]=0
18080 WRITE (_FM1,KEY=C$(1,20))IOL=18020
18090 N$=FROM_CUSTOMER$+FROM_ITEM_CODE$
18100 GOSUB PP3_FILE
18110 IF ID$<>"BT_SKIP" THEN GOSUB COPY_RECORDS
18115 READ RECORD (_ECR,KEY=FROM_CUSTOMER$+FROM_ITEM_CODE$,DOM=*NEXT)ECR$; ECR$(1,20)=A$,ECR$(31,150)=DIM(150); WRITE RECORD (_ECR,KEY=ECR$(1,20),DOM=*NEXT)ECR$
18120 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
18125 %CUSTOMER$=C$(1,10),%ITEM_CODE$=C$(11,10); IF %STOCK$="N" THEN CALL "FMGIAB" ELSE CALL "ICGMAZ"
18130 REPLACEMENT_SCRN$="PPGMAD"
18140 RETURN 
19000 COPY_RECORDS:! Copy records for item copy
19005 DIM Z(NUM(%X3$(60,3)))
19010 Z$="01O AR1...  02C FMP...  03C FM1...  04C IC0...  02O FMS...  03O FMU...  04O FMV...  05O FM2...  06O FSF...  "
19020 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
19030 REM "Write out to FM2 file
19040 WRITE (Z[5],KEY=C$(21,3)+C$(24,16)+C$(40,2)+C$(11,10)+C$(1,10))
19050 FOR I=2 TO 4
19055 PRINT 'MESSAGE'('_RED'+'WHITE'+"Copy records from : "+PTH(I),0)
19060 GOSUB 19110
19070 NEXT I
19080 I=6; GOSUB 19110
19090 RETURN 
19100 ! 
19110 REM "Transfer records with key N$ in file Z(I) to key A$(1,10)+A$(11,10)
19120 EXTRACT (Z[I],KEY=N$,DOM=19125)
19130 K$=KEY(Z[I],END=19195)
19140 IF MID(K$,1,LEN(N$))<>N$ THEN GOTO 19195
19150 READ RECORD (Z[I],END=19195)A8$
19160 A8$(1,20)=A$(1,10)+A$(11,10)
19170 WRITE RECORD (Z[I],KEY=A8$(1,LEN(K$)))A8$
19180 READ (Z[I],KEY=K$,END=19195)
19190 GOTO 19130
19200 RETURN 
19300 PP3_FILE:
19310 CALL "ZZWLKU;PARSE_CUST",CUSTOMER$,PP3.CUST_DIV$,PP3.CUST_CODE$; CUSTOMER$=PP3.CUST_DIV$+PP3.CUST_CODE$,%CUSTOMER$=CUSTOMER$,PROMO_CODE$=ITEM_CODE$
19320 PP3.ITEM_CODE$=ITEM_CODE$,PP3.PROMO_CODE$=ITEM_CODE$
19330 WRITE (_PP3,KEY=CUSTOMER$+ITEM_CODE$)
19340 RETURN 
19400 QUERY_PP3:
19410 VAL$=""
19420 PROCESS "QRY_PP3.1","../PPG/PP.EN",VAL$
19430 IF STP(VAL$)="" THEN RETURN 
19440 CUSTOMER$=VAL$(1,10),TF_ITEM$=VAL$(11,4),TF_SIZE$=VAL$(15,2),COLOR$=VAL$(17,2),OTHER$=VAL$(19,2),REFRESH_FLG=1
19450 NEXT_ID=TF_ITEM.CTL,CUSTOMER.CTL'VALUE$=CUSTOMER$,TF_ITEM.CTL'VALUE$=TF_ITEM$,TF_SIZE.CTL'VALUE$=TF_SIZE$,COLOR.CTL'VALUE$=COLOR$,OTHER.CTL'VALUE$=OTHER$; GOSUB ITEM; GOSUB SIZE; GOSUB COLOR; GOSUB OTHER
19455 IF STP(CUSTOMER$)="" THEN CUSTOMER$=DIM(10),%PANEL$="QRY_IC0",%STOCK$="Y" ELSE %STOCK$="N",%PANEL$="QRY_FM1"
19460 GOTO CHECK_ITEM
19600 SEL_RECORDS:
19610 ENTER TF_ITEM$,PROMO$
19620 IF STP(TF_ITEM$)<>STP(PROMO$) THEN EXIT 123
19630 EXIT 
20000 SEL_ITEM: REFRESH_FLG=1
20010 IF _EOM$=$00$ THEN %STOCK$="N"; RETURN 
20020 IF STP(FROM_ITEM_CODE$)="" THEN NEXT_ID=FROM_ITEM_CODE.CTL ELSE CALL "*WINGRP;ENABLE",BUTTONS.GRP$
20030 RETURN 
56000 ! "194331-Program PPGMAD needs to be completed.
56010 REM "211380-TopForm file feldnames which are SQL keywords break Oracle.
56020 REM "214128-EC Promo-GUI P0, P1, P2, P3
