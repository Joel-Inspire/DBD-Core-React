0010 ! SSGMAZ - Client Profile Setup
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Nov. 24, 2003 17:26
0035 ! "6.0 - 11/26/03 - 11.832777 - jir
0040 ! "Copyright 2003 Computer Software Inc.; Norcross, Georgia
0041 ! "        Licensed Software - All Rights Reserved.
0050 PROCESS "SSGMAZ","../SSG/SS.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="SS1"
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 IF %_LOG_HISTORY THEN _LOG=FFN("LOG"+%C$); IF _LOG<=0 THEN _LOG=HFN; OPEN (_LOG,ERR=*NEXT)"LOG"+%C$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1,_CUR_KEY$=""
0430 DIM _KEYS$[1:1]; _KEYS$[1]="CLIENT_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC; GOSUB CREATE_GRID
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ! ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0965 %GRID=0
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1012 CLIENT_CODE$=PAD(CLIENT_CODE$,8,0,"0"),CLIENT_CODE$=PAD(CLIENT_CODE$,10,"0")
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 WRITE (_FIL_NO,KEY=_KEY$)
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1485 IF ARG_1$<>"" THEN CMD_STR$="E"
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2050 IF _KEY$=_CUR_KEY$ THEN _KEY$=KEN(_FIL_NO,END=END_OF_FILE) ! Get past extracted record
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 EXTRACT (_FIL_NO,KEY=_KEY$)
3060 _CUR_KEY$=_KEY$
3065 IF ARG_1$<>"" THEN CALL "*WINGRP;DISABLE",BT_ARROW.GRP$
3070 RETURN 
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=CLIENT_CODE.CTL,_FIRST_FIELD=CLIENT_NAME.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR"),_MSG_DIRECTORY$=MSG("DIRECTORY"),_MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1"),_MSG_JUST_CHECK$=MSG("JUST_CHECK"),_MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT"),_MSG_NON_NUMER$=MSG("NON_NUMER"),_MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG"),_MSG_PRECEDING$=MSG("PRECEDING"),_MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS"),_MSG_REC_ALTERD$=MSG("REC_ALTERD"),_MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED"),_MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND"),_MSG_REC_NO_1ST$=MSG("REC_NO_1ST"),_MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE"),_MSG_REC_UPDADD$=MSG("REC_UPDADD"),_MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1),_MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE"),_MSG_UPDATE$=MSG("UPDATE"),_MSG_UPD_OTHER1$=MSG("UPD_OTHER1"),_MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME"),_MSG_WARNING$=MSG("WARNING"),_MSG_CANNOT_WRITE$=MSG("CANT_WRITE"),_MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN CLIENT_CODE$=""
13030 CLIENT_NAME$="",NAME_ADDRESS$="",AFTER_HOURS_NUM$="",CREDIT_HOLD$="",TIME_ZONE$="",SALESPERSON$=""
13090 SYSTEM_ADMIN$="",CONT_NAME_1$="",CONT_NAME_2$="",CONT_NAME_3$="",CONT_NAME_4$="",CONT_NAME_5$="",CONT_NAME_6$=""
13160 CONTACT_DUTY_1$="",CONTACT_DUTY_2$="",CONTACT_DUTY_3$="",CONTACT_DUTY_4$="",CONTACT_DUTY_5$="",CONTACT_DUTY_6$=""
13220 INT_ACC_PASSW$="",EMAIL_ADDR$="",SS1_UNUSED_1$="",SS1_UNUSED_2$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
40000 ! 40000,10
40010 SEL_GRID:
40020 ! 
40030 REFRESH_FLG=1
40040 GRID SELECT READ X,COL,ROW
40050 GRID FIND X,COL,ROW,VAL$
40060 IF STP(VAL$)="" THEN RETURN 
40070 IF AROW+ACOL<>0 THEN X'COLUMN=ACOL,X'ROW=AROW,X'TEXTCOLOR$="Black"
40080 X'COLUMN=COL,X'ROW=ROW,X'TEXTCOLOR$="Light Blue"
40090 AROW=ROW,ACOL=COL
40100 OPT=INT(POS(STP(VAL$)=ALL_MESS$)/40)+1; %GRID=0; GOSUB PROCESS_OPT; GRID GOTO X,COL,ROW; %GRID=1; RETURN 
40110 CREATE_GRID:
40120 GOSUB CREATE_OPT
40130 X=X.CTL,BOPT$=OPT$,ROW=1,COLUMN=0; GRID DELETE X,-1,-1
40140 HIDE CONTROL X
40150 HI=OPT_LN/3; IF FPT(HI)<>0 THEN HI=INT(HI)+1
40160 ! GRID REMOVE X; GRID X,@(2,9.6,75,HI)
40170 XX=POS(SEP=OPT$); IF XX=0 THEN GOTO END_LOAD
40180 COLUMN=COLUMN+1; IF COLUMN>3 THEN COLUMN=1,ROW=ROW+1; GRID ADD X,0,ROW; GRID LOCK X,0,ROW
40190 TX$=OPT$(1,XX-1),OPT$=OPT$(XX+1),X'ROW=ROW,X'COLUMN=COLUMN,X'COLUMNWIDTH=25,X'VALUE$=TX$,X'BACKCOLOR$="Gray",X'CELLTYPE$="Button",X'ALIGN$="Left",X'LOCK=1,X'ROWHEIGHT=1.75
40200 ! GRID LOAD X,ROW,COLUMN,TX$
40210 GOTO 40170
40220 END_LOAD: HIG=HI*X'HEIGHT/5,X'HEIGHT=HIG; SHOW CONTROL X; RETURN 
40230 CREATE_OPT:
40240 SE$="123456789ABCDEFG"
40250 FOR A=1 TO 12
40260 MESS$=MSG("SSGMAZ_"+STR(A:"00"))
40270 ALL_MESS$=ALL_MESS$+PAD(MESS$,40," ")
40280 ! IF MID(P4$,188,1)<>"Y" AND A>=12 AND A<=14 THEN GOTO NXT_OPT ! MESS$=PAD("",40," ")
40290 ! IF MID(IC$,51,1)<>"Y" AND A=10 THEN GOTO NXT_OPT ! MESS$=PAD("",40," ")
40300 OPT$=OPT$+MESS$+SEP,OPT_LN=OPT_LN+1
40310 NXT_OPT:
40320 NEXT A
40330 RETURN 
40340 PROCESS_OPT:
40345 ! GOSUB WRT
40350 CHANGE_FLG=0,%CUSTOMER$=CUSTOMER$,%ITEM_CODE$=ITEM_CODE$,%ITEM_DESC$=ITEM_DESC$
40360 SWITCH OPT
40370 CASE 1
40380 ! 
40390 ! Item Pricing Constant Setup
40400 ! 
40410 ! WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
40415 SUBNAME$="SSGMAA"; GOSUB START_LOG
40420 ARG$=CLIENT_CODE$; PROCESS "SSGMAA","../SSG/SS.EN",ARG$
40430 READ (_FIL_NO,KEY=_KEY$); _ENABLE_FLG=-1,NO_ZZO=1; GOSUB PROCESS_READ; NO_ZZO=0; GOSUB DISP_REC
40440 BREAK
40450 CASE 2
40460 ! 
40470 ! Supplier Purchasing Setup
40480 ! 
40485 SUBNAME$="SSGMAB"; GOSUB START_LOG
40490 PROCESS "SSGMAB","../SSG/SS.EN",CLIENT_CODE$,CLIENT_NAME$
40500 BREAK
40510 CASE 3
40520 ! 
40530 ! Supplier Cost Comparison
40540 ! 
40545 SUBNAME$="SSGMAC"; GOSUB START_LOG
40550 PROCESS "SSGMAC","../SSG/SS.EN",CLIENT_CODE$,CLIENT_NAME$
40560 BREAK
40570 CASE 4
40580 ! 
40590 ! Inventory Availability
40600 ! 
40605 SUBNAME$="SSGMAD"; GOSUB START_LOG
40610 PROCESS "SSGMAD","../SSG/SS.EN",CLIENT_CODE$,CLIENT_NAME$
40620 BREAK
40630 CASE 5
40640 ! 
40650 ! Inventory Across Location Inquire
40660 ! 
40665 SUBNAME$="SSGMAE"; GOSUB START_LOG
40670 PROCESS "SSGMAE","../SSG/SS.EN",CLIENT_CODE$,CLIENT_NAME$
40680 BREAK
40690 CASE 6
40700 ! 
40710 ! Detail Transaction Inquiry
40720 ! 
40725 SUBNAME$="SSGMAH"; GOSUB START_LOG
40730 PROCESS "SSGMAH","../SSG/SS.EN",CLIENT_CODE$,CLIENT_NAME$
40740 BREAK
40750 CASE 7
40760 ! 
40770 ! Statistical Data Inquiry
40780 ! 
40785 SUBNAME$="SSGMAI"; GOSUB START_LOG
40790 PROCESS "SSGMAI","../SSG/SS.EN",CLIENT_CODE$,CLIENT_NAME$
40800 BREAK
40810 CASE 8
40820 ! 
40830 ! Open Sales Order Inquiry
40840 ! 
40845 SUBNAME$="SSGMAG"; GOSUB START_LOG
40850 PROCESS "SSGMAG","../SSG/SS.EN",CLIENT_CODE$,CLIENT_NAME$
40860 BREAK
40870 CASE 9
40880 ! 
40890 ! Open Purchase order Inquiry
40900 ! 
40905 SUBNAME$="SSGMAJ"; GOSUB START_LOG
40910 PROCESS "SSGMAJ","../SSG/SS.EN",CLIENT_CODE$,CLIENT_NAME$
40920 BREAK
40930 CASE 10
40940 ! 
40950 ! Quantity Break Pricing Setup
40960 ! 
40965 SUBNAME$="SSGMAF"; GOSUB START_LOG
40970 PROCESS "SSGMAF","../SSG/SS.EN",CLIENT_CODE$,CLIENT_NAME$
40980 BREAK
40990 CASE 11
41000 ! 
41010 ! Order History Display
41020 ! 
41025 SUBNAME$="TKGMAA"; GOSUB START_LOG
41030 PROCESS "TKGMAA","../SSG/SS.EN",CLIENT_CODE$,CLIENT_NAME$
41040 BREAK
41050 CASE 12
41060 ! 
41070 ! Item Spec - Ply Section
41080 ! 
41085 SUBNAME$="SSGMAW"; GOSUB START_LOG
41090 PROCESS "SSGMAW","../SSG/SS.EN",CLIENT_CODE$,CLIENT_NAME$
41100 BREAK
41110 CASE 13
41120 ! 
41130 ! Item Spec - Composition
41140 ! 
41145 SUBNAME$="FMGIAU"; GOSUB START_LOG
41150 PROCESS "SSGMAW","../SSG/SS.EN",CLIENT_CODE$,CLIENT_NAME$
41160 BREAK
41170 CASE 14
41180 ! 
41190 ! Item Spec - Comments
41200 ! 
41205 SUBNAME$="FMGIAW"; GOSUB START_LOG
41210 CALL "FMGIAW",CUST_DIV$+CUST_CODE$,ITEM_CODE$
41220 BREAK
41230 END SWITCH ; GOSUB END_LOG; RETURN 
41240 QUERY:
41250 IF ID$="BT_ITEM" THEN QRY$="QRY_IC0.1" ELSE QRY$="QRY_IC2.1"
41260 VAL$=""
41270 PROCESS QRY$,"../ICG/IC.EN",VAL$; IF VAL$="" THEN RETURN 
41280 CUST_DIV$=VAL$(1,%AR_DIV_LEN),CUST_CODE$=VAL$(1+%AR_DIV_LEN,10),CUSTOMER$=VAL$(1,10),ITEM_CODE$=VAL$(11),REFRESH_FLG=1,_KEY$=CUSTOMER$+ITEM_CODE$
41290 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT)
41300 ! GOTO NXT_READ
42000 CHECK_ZZO:
42030 READ (_ZZO,KEY="003"+%CUSTOMER$+%ITEM_CODE$,DOM=*NEXT)
42035 KKK$=KEY(_ZZO,END=END_CHECK_ZZO)
42040 IF KKK$(1,23)<>"003"+%CUSTOMER$+%ITEM_CODE$ THEN GOTO END_CHECK_ZZO
42050 PROCESS "GGNOTE.5","../ZZG/ZZ.EN"
42060 END_CHECK_ZZO:RETURN 
50000 TAB_GRID:
50010 GRID SELECT READ X,COL,ROW
50020 IF AROW+ACOL<>0 THEN X'COLUMN=ACOL,X'ROW=AROW,X'TEXTCOLOR$="Black"
50025 COL+=1; IF COL>3 THEN COL=1,ROW+=1
50027 IF ROW>HI THEN %GRID=0,ROW=HI,NEXT_ID=BT_WRITE.CTL; GOTO *RETURN
50030 X'COLUMN=COL,X'ROW=ROW,X'TEXTCOLOR$="Light Blue"
50040 AROW=ROW,ACOL=COL
50050 NEXT_ID=X.CTL; GRID GOTO X,COL,ROW
50060 RETURN 
50500 START_LOG: APP$="SS"
50510 B_DATE$=BIN(NUM(DTE(0:"%Yl%Mz%Dz")),4),B_TIME$=BIN(NUM(DTE(0:"%Hz%mz")),2)
50520 IF %_LOG_HISTORY THEN WRITE (_LOG,KEY="x"+WHO+B_DATE$+B_TIME$+SUBNAME$,ERR=*NEXT)WHO,B_DATE$,B_TIME$,SUBNAME$,APP$,%X3_COMP$,"Run"
50530 RETURN 
50550 END_LOG:
50560 IF %_LOG_HISTORY THEN WRITE (_LOG,KEY="x"+WHO+B_DATE$+B_TIME$+SUBNAME$,ERR=*NEXT)WHO,B_DATE$,B_TIME$,SUBNAME$,APP$,%X3_COMP$,"Finish",DTE(0:"%Hz%mz")
50570 RETURN 
