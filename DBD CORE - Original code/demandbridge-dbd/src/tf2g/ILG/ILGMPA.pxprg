0010 ! ILGMPA - Image Library and Image Parameters
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Jul. 21, 2004 16:58
0030 ! ************************************************************************
0035 REM "5.7 - 12/20/11 - 12.0775 - crg - SSP# 251100
0037 REM "251100-PE(014, ILGFUN-2510) when trying to view an order in order  
0040 REM "Copyright 2011 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 IF TCB(13)=1 THEN BEGIN 
0052 IF NUL(%WDX$) THEN MSGBOX "You must be using Windx to access TopForm to maintain the parameters for the image library"; GOTO 0075
0055 IF NOT(%GUI) THEN CHUI_MODE=1; %GUI=1; PRINT 'SHOW'(0)
0060 PROCESS "ILGMPA","../ILG/IL.EN"
0065 IF CHUI_MODE THEN %GUI=0; PRINT 'SHOW'(1); RUN "ZMENU"
0075 IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0154 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; DIM Z[NUM(X3$(60,3))]
0155 Z$="01O IL0... 13O ZZPARM "
0156 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
0175 DIM IL_PARM$(511)
0180 CLOSE (%IL_CODES,ERR=*NEXT); %IL_CODES=0 ! Clear to force re-read
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+"ZZPARM"+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0550 _KEY$=%C$+"I/L"; READ (Z[13],KEY=_KEY$,ERR=NEXT_REC)IL_PARM$
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 PERFORM "ILGFUN;BUILD_DOC_LIST" ! Update global file with possible changes
0925 CALL "ILGFUN;BUILD_TEMP_DIR" ! Update temp directory info, etc
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0962 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
0965 %GRID=0
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 ! READ DATA FROM REC(IOL(Z[13]:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (Z[13],KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)IL_PARM$
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1415 IL_PARM$(1,6)=%C$+"I/L",IL_PARM$(7,128)=TEMP_DIR$,IL_PARM$(135,80)=SCAN_COMMAND$
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 ! GOSUB REVIEW_WRITE
1450 GOSUB WRT
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 ! READ DATA FROM REC(IOL(Z[13]:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (Z[13],KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1855 DIM IL_PARM$(511)
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2025 RETURN 
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(Z[13],END=END_OF_FILE)
2060 READ (Z[13],KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(Z[13],KEY=_KEY$,END=END_OF_FILE); READ (Z[13],KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 ! READ DATA FROM _KEY$ TO IOL=IOL(Z[13]:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 ! READ DATA FROM REC(IOL(Z[13],ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(Z[13]) ! Save record for review
3055 TEMP_DIR$=IL_PARM$(7,128),SCAN_COMMAND$=IL_PARM$(135,80); REFRESH_FLG=1
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (Z[13],KEY=_KEY$,ERR=WRITE_ERROR)IL_PARM$
3340 ! READ DATA FROM REC(IOL(Z[13],ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(Z[13]) ! Save record for review
3345 GOSUB UPDATE_IL0_FROM_GRID
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3525 CALL "ILGFUN;DROP_BOX_WRITE",DOC_TYPE_DB.CTL,DOC_TYPE$
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=DOC_TYPE.CTL,_FIRST_FIELD=CURRENT_DIRECTORY.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16990 RETURN 
20000 LOAD_GRID:! Load the DIR_GRID
20005 IF NOT(FN%ISOPEN(%IL_CODES)) THEN PERFORM "ILGFUN;BUILD_DOC_LIST" ! 251100
20006 GRID_ROW=0
20010 GRID CLEAR DIR_GRID.CTL,0,0,ERR=*NEXT
20011 DIR_GRID.CTL'COLUMN=-1,DIR_GRID.CTL'COLUMNWIDTH=.1; DIR_GRID.CTL'ROW=-1,DIR_GRID.CTL'COLUMN=0,DIR_GRID.CTL'FONT$="MS Sans Serif,-9,B"
20012 DIR_GRID.CTL'ROW=-1; DIR_GRID.CTL'ROWHEIGHT=2.8; DIR_GRID.CTL'COLUMN=5,DIR_GRID.CTL'CELLTYPE$="Multi_line",DIR_GRID.CTL'VALUE$=SUB(MSG("SV_LST_DSP"),$8A$,$0D0A$),DIR_GRID.CTL'COLUMN=4,DIR_GRID.CTL'CELLTYPE$="Multi_line",DIR_GRID.CTL'ALIGN$="BC",DIR_GRID.CTL'VALUE$=SUB(MSG("ACC_LV_DSP"),$8A$,$0D0A$),DIR_GRID.CTL'COLUMN=6,DIR_GRID.CTL'CELLTYPE$="Multi_line",DIR_GRID.CTL'VALUE$=SUB(MSG("ADD_FORMAT"),$8A$,$0D0A$),DIR_GRID.CTL'FONT$="MS Sans Serif,-9,B" ! [200047]
20015 EXTRACT (%IL_CODES,IND=0,END=*NEXT)
20020 REPEAT 
20025 READ (%IL_CODES,END=*BREAK)IMG_CODE$,IMG_DESC$,IMG_DIR$,IMG_FORMAT$,IMG_SCAN_OPTS$,IMG_SAVE_LAST$,IMG_ACCESS_LEVEL$,IMG_ADD_FORMAT$
20030 DIM IL0$(511); FIND (Z[1],KEY=IMG_CODE$,DOM=*NEXT)IL0$(1)
20035 IF IL0$(195,1)=" " THEN IL0$(195,1)="0" END_IF ; IF IL0$(199,1)=" " THEN IL0$(199,1)="0"
20050 GRID LOAD DIR_GRID.CTL,1,++GRID_ROW,IMG_DESC$+SEP+IL0$(131,4)+SEP+IL0$(3,128)+SEP+IL0$(196,3)+SEP+IL0$(195,1)+SEP+IL0$(199,1)+SEP+IL0$(135,60)+SEP+IL0$(200,20)+SEP+IL0$(220,20)+SEP+IL0$(240,20)+SEP+IMG_CODE$+ESC,ERR=*NEXT ! 211234
20055 DIR_GRID.CTL'COLUMN=2,DIR_GRID.CTL'ROW=GRID_ROW,DIR_GRID.CTL'TEXT$=MSG("IMG_FMT_L") ! [200047]
20060 DIR_GRID.CTL'COLUMN=3,DIR_GRID.CTL'ROW=GRID_ROW,DIR_GRID.CTL'FONT$="MS Sans Serif,-11",DIR_GRID.CTL'COLUMN=2,DIR_GRID.CTL'FONT$="MS Sans Serif,-11"
20062 DIR_GRID.CTL'COLUMN=1,DIR_GRID.CTL'ROW=GRID_ROW,DIR_GRID.CTL'LOCK=1 ! 211234
20075 UNTIL 0 ! from 20020, will break out of loop
20080 MAX_GRID_ROW=GRID_ROW
20095 RETURN 
20099 ! *******************************************************
20100 UPDATE_IL0_FROM_GRID:! update IL0 table from Grid contents
20105 IF MAX_GRID_ROW>0 THEN {
20110 FOR ROW_VAL=MAX_GRID_ROW TO 1 STEP -1
20115 IF MOD(ROW_VAL,2)=1 THEN PRINT 'MESSAGE'('_RED'+'WHITE'+MSG("ILGMPA_07"),0), ELSE PRINT 'MESSAGE'('_WHITE'+'RED'+MSG("ILGMPA_07"),0),
20120 IMG_CODE$=""; GRID FIND DIR_GRID.CTL,11,ROW_VAL,IMG_CODE$,ERR=*NEXT ! 211234
20125 IF NOT(NUL(IMG_CODE$)) THEN {
20130 DIM IL0$(511); IL0$(1)=IMG_CODE$; READ (Z[1],KEY=IMG_CODE$,ERR=*NEXT)IL0$(1)
20135 IMAGE_FORMAT$=""; GRID FIND DIR_GRID.CTL,2,ROW_VAL,IMAGE_FORMAT$,ERR=*PROCEED; IL0$(131,4)=IMAGE_FORMAT$
20140 IMG_DIR$=""; GRID FIND DIR_GRID.CTL,3,ROW_VAL,IMG_DIR$,ERR=*PROCEED; IL0$(3,128)=IMG_DIR$
20143 SAVE_LAST$=""; GRID FIND DIR_GRID.CTL,5,ROW_VAL,SAVE_LAST$,ERR=*PROCEED; IL0$(195,1)=SAVE_LAST$
20144 ACCESS_LEVEL$=""; GRID FIND DIR_GRID.CTL,4,ROW_VAL,ACCESS_LEVEL$,ERR=*PROCEED; IL0$(196,3)=ACCESS_LEVEL$
20145 ADD_FORMAT$=""; GRID FIND DIR_GRID.CTL,6,ROW_VAL,ADD_FORMAT$,ERR=*PROCEED; IL0$(199,1)=ADD_FORMAT$
20146 SCAN_OPTIONS$=""; GRID FIND DIR_GRID.CTL,7,ROW_VAL,SCAN_OPTIONS$,ERR=*PROCEED; IL0$(135,60)=SCAN_OPTIONS$
20147 VERSION_LABEL_1$=""; GRID FIND DIR_GRID.CTL,8,ROW_VAL,VERSION_LABEL_1$,ERR=*PROCEED; IL0$(200,20)=VERSION_LABEL_1$ ! 211234
20148 VERSION_LABEL_2$=""; GRID FIND DIR_GRID.CTL,9,ROW_VAL,VERSION_LABEL_2$,ERR=*PROCEED; IL0$(220,20)=VERSION_LABEL_2$ ! 211234
20149 VERSION_LABEL_3$=""; GRID FIND DIR_GRID.CTL,10,ROW_VAL,VERSION_LABEL_3$,ERR=*PROCEED; IL0$(240,20)=VERSION_LABEL_3$ ! 211234
20155 WRITE (Z[1],KEY=IMG_CODE$)IL0$
20160  } ! if 20125
20175 NEXT ROW_VAL
20178 PRINT 'MESSAGE'("",0)
20180  } ! if 20105
20195 RETURN 
20199 ! ***********************************************************
21000 DEFAULT_IL0:! Get base directory and default IL0 records
21010 MSGBOX MSG("ILGMPA_02"),MSG("MB_ATTN"),"?,CANCEL",_ANS$; IF _ANS$="CANCEL" THEN GOTO DEFAULT_IL0_END
21020 BASE_DIR$=""; CALL "*getdir",BASE_DIR$,MSG("ILGMPA_05"); IF BASE_DIR$="" THEN GOTO DEFAULT_IL0_END ELSE IF MID(BASE_DIR$,-1)<>DLM THEN BASE_DIR$+=DLM
21030 MSGBOX MSG("ILGMPA_06",BASE_DIR$),MSG("MB_ATTN"),"?,CANCEL",_ANS$; IF _ANS$="CANCEL" THEN GOTO DEFAULT_IL0_END
21045 EXTRACT (%IL_CODES,IND=0,END=*NEXT)
21050 SELECT IMG_CODE$ FROM %IL_CODES
21055 DIM IL0$(511); IL0$(1,2)=IMG_CODE$; FIND (Z[1],KEY=IMG_CODE$,DOM=*NEXT)IL0$(1)
21056 IF NUL(IL0$(131,4)) THEN IL0$(131,4)="PDF" ! If format is not set, set ot PDF
21060 IF NUL(IL0$(3,128)) THEN IL0$(3,128)=BASE_DIR$+MSG("IL_DIR_"+IMG_CODE$) ELSE IF LCS(MID(IL0$,3,4))<>"http" THEN IMAGE_PATH$=STP(IL0$(3,128)),FILE_NAME$=MID(IMAGE_PATH$,MSK(IMAGE_PATH$,"[^/\\]*$")),IL0$(3,128)=BASE_DIR$+FILE_NAME$
21075 WRITE (Z[1],KEY=IMG_CODE$)IL0$
21080 NEXT RECORD 
21085 GOSUB LOAD_GRID
21090 DEFAULT_IL0_END:
21095 RETURN 
21099 ! ************************************************************
50000 TAB_GRID:
50001 ! PREINPUT "TFW"; ESCAPE
50010 GRID SELECT READ DIR_GRID.CTL,COL,ROW
50025 COL+=1; IF COL>10 THEN COL=1,ROW+=1 ! 211234
50027 IF ROW>MAX_GRID_ROW THEN %GRID=0,ROW=MAX_GRID_ROW,NEXT_ID=BUTTON_1.CTL; GOTO *RETURN
50028 AROW=ROW,ACOL=COL
50030 DIR_GRID.CTL'COLUMN=COL,DIR_GRID.CTL'ROW=ROW
50050 NEXT_ID=DIR_GRID.CTL
50060 GRID GOTO DIR_GRID.CTL,COL,ROW
56005 REM "186095-Changes to how Image Library can keep an image of each
56010 REM "200047-Need to add CIG journal to Image Library.
56012 REM "211234-Designate labels for up to 3 versions of Image Type
56014 REM "251100-PE(014, ILGFUN-2510) when trying to view an order in order  
