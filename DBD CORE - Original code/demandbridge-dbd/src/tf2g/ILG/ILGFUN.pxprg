0010 ! ILGFUN - Image Library Functions
0035 REM "5.7 - 03/09/22 - 21.251971 - crg - SSP# 307395
0037 REM "307395-DBD-252: Image Lib file transfer speed improvement          
0040 REM "Copyright 2022 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 ! %IL_CODES will be global channel to memory file, key will be code, record will be code in 1st string, description in second string, index will correspond to order loaded in drop boxes, etc. Codes are hardcoded here, descriptions loaded from message library (IL_DOC_+code), %IL_CODES = 0 means need to load file, use ILGFUN;BUILD_DOC_LIST to build
0051 ! In general images regularly scanned are in the range 00-99 and images generated automatically by TopForm are in A0 and above
0500 BUILD_DOC_LIST:! 500  build %IL_DOC_CODE$ as tab delimited list of valid codes, %IL_DOC_DESC$ as corresponding descriptions read from image library, ALSO: CALL BUILD_TEMP_DIR to set %IL_TEMP_DIR and %IL_PARM$
0505 LOCAL X,X3$,X4$,Y1$,Y0$,Z$,Z0,Z1
0507 CALL "ZZCOMP","","","",X3$,X4$,"",-1,0,0; DIM BDL_Z[NUM(X3$(60,3))]
0508 Z$="01O IL0... "; CALL "ZZFLES",X3$,Y1$,Y0$,Z$,BDL_Z{ALL},Z0,Z1
0510 IF %IL_CODES THEN CLOSE (%IL_CODES,ERR=*PROCEED); %IL_CODES=0
0515 %IL_CODES=GFN; OPEN (%IL_CODES)"*memory*"
0520 X=FN_ADD_TO_LIST("00") ! Vendor Quote            > RFQ (8), Vend#+Quote# (20)
0522 X=FN_ADD_TO_LIST("01") ! Vendor Invoice          > [opt TF P/O (9)], Vend#+Inv# (20)
0524 X=FN_ADD_TO_LIST("02") ! Vendor Acknowledgement  > TF P/O (9)
0526 X=FN_ADD_TO_LIST("03") ! Receiving Document      > TF P/O (9)
0528 X=FN_ADD_TO_LIST("04") ! Customer Signed Delivery Ticket  > Order # (8)
0530 X=FN_ADD_TO_LIST("05") ! Customer Check  > cust#, Cust# + Check# (18)
0532 X=FN_ADD_TO_LIST("06") ! Customer Logo   > Cust# (10)
0534 X=FN_ADD_TO_LIST("07") ! Form Proof Copy > TF P/O (9), [opt Item Code (20)]
0536 X=FN_ADD_TO_LIST("08") ! Form Sample     > TF P/O (9), [opt Item Code (20)]
0538 X=FN_ADD_TO_LIST("09") ! Item Image      > None, Item Code (20)
0540 X=FN_ADD_TO_LIST("10") ! Customer Note   > Cust# (10)
0542 X=FN_ADD_TO_LIST("11") ! Vendor Note     > Vend# (10)
0544 X=FN_ADD_TO_LIST("12") ! Job Note     > order# (8)
0546 X=FN_ADD_TO_LIST("13") ! customer Purchase order > None, Customer P/O number (15)
0548 X=FN_ADD_TO_LIST("14") ! Customer Tax Form > Cust# (10) ! 230830
0550 X=FN_ADD_TO_LIST("15") ! Completed Whse Receiving Report  > TF P/O (9), Whse Recv Report # (5) ! WO 239078
0600 ! ^100 Generated images
0610 X=FN_ADD_TO_LIST("A0") ! Customer Invoice          > Cust# + Inv# (18)
0612 X=FN_ADD_TO_LIST("A1") ! Packing List to Warehouse > Order# (8), [opt whse (4)]
0614 X=FN_ADD_TO_LIST("A2") ! Purchase Order to Vendor  > TF P/O# (9), Vend#(10)
0616 X=FN_ADD_TO_LIST("A3") ! Reorder Notice            > Cust# (10), Form code (10)
0618 X=FN_ADD_TO_LIST("A4") ! RFQ to Vendor             > RFQ# (8), Vend# (10)
0619 X=FN_ADD_TO_LIST("A5") ! Customer Quote            > RFQ# (8), Cust# (10) or T/M List code (4) + T/M contact code (6) [if rfq$(391,1)="T"]
0620 X=FN_ADD_TO_LIST("A6") ! Customer Statement        > Cust# (10)
0622 X=FN_ADD_TO_LIST("A7") ! Order Ack to Customer     > Order# (8)
0624 X=FN_ADD_TO_LIST("A8") ! Check to Vendor           > TF check# (6), Vend#+Check# (16)
0625 X=FN_ADD_TO_LIST("RD") ! Thank you Letter   > Order(8) 190384
0630 X=FN_ADD_TO_LIST("A9") ! Variable Print Proofs     > Order#+line# (11)
0632 X=FN_ADD_TO_LIST("AA") ! Whse Receiving Report      > TF P/O# (9), Whse Recv Report # (5) ! WO 239078
0634 X=FN_ADD_TO_LIST("AB") ! SB Shipment Detail by LocF P/O# (9), Whse Recv Report # (5) ! WO 239078
0635 X=FN_ADD_TO_LIST("AC") ! Summary Bill Reportby LocF P/O# (9), Whse Recv Report # (5) ! ssp 213924
0650 ! ^50 Reports
0652 X=FN_ADD_TO_LIST("R0") ! Sales Journal             > Audit Control# (6), TopForm Date (6)
0654 X=FN_ADD_TO_LIST("R1") ! Detailed Sales Journal    > Audit Control# (6), TopForm Date (6)
0656 X=FN_ADD_TO_LIST("R2") ! Cash Receipts Journal    > Audit Control# (6), TopForm Date (6)
0658 X=FN_ADD_TO_LIST("R3") ! Purchases Journal    > Audit Control# (6), TopForm Date (6)
0660 X=FN_ADD_TO_LIST("R4") ! Cash Disbursments Journal    > Audit Control# (6), TopForm Date (6)
0662 X=FN_ADD_TO_LIST("R5") ! Manual Check Journal    > Audit Control# (6), TopForm Date (6)
0664 X=FN_ADD_TO_LIST("R6") ! G/L Journal Entry    > Audit Control# (6), TopForm Date (6)
0666 X=FN_ADD_TO_LIST("R7") ! G/L Recurring Journal Entry    > Audit Control# (6), TopForm Date (6)
0668 X=FN_ADD_TO_LIST("R8") ! P/O Receiving    > Audit Control# (6), TopForm Date (6)
0670 X=FN_ADD_TO_LIST("R9") ! I/C  Transaction Entry > Audit Control# (6), TopForm Date (6)
0671 X=FN_ADD_TO_LIST("RA") ! Physical Count Variance Journal > Audit Control# (6), TopForm Date (6)
0672 X=FN_ADD_TO_LIST("RB") ! Finance Charge Journal > Audit Control# (6), TopForm Date (6)
0674 X=FN_ADD_TO_LIST("RC") ! G/L Detail Transaction Register    > Audit Control# (6), TopForm Date (6) 192639
0676 X=FN_ADD_TO_LIST("RE") ! Credit Card Plus Journal > Audit Control# (6), TopForm Date (6) ssp 197202
0678 X=FN_ADD_TO_LIST("RF") ! CIG Journal   > Batch# (4), Topform Date (6) [SSP-200047]
0680 X=FN_ADD_TO_LIST("RG") ! CIG+ Journal  > Batch# (4), Topform Date (6) [SSP-200047]
0682 X=FN_ADD_TO_LIST("RH") ! Kit Production Posting Journall  > Audit Contro # (6), Topform Date (6) [SSP-216198]
0684 X=FN_ADD_TO_LIST("RI") ! CIG Inbound Freight Journal  > Batch# (4), Topform Date (6) !WO 244750
0685 X=FN_ADD_TO_LIST("RJ") ! Cash Receipts Gateway Journal    > Audit Control# (6), TopForm Date (6) ! 245558
0686 X=FN_ADD_TO_LIST("RK") ! Cash Disbursements Gateway Journal    > Audit Control# (6), TopForm Date (6) ! SSP268302
0690 CALL "ZZFLES",X3$,Y1$,Y0$,"END",BDL_Z{ALL},0,0 ! [SSP-200047]-renumbered line
0695 RETURN 
0699 ! ***************************************************************
0700 DEF FN_ADD_TO_LIST(LOCAL CODE$) ! assumes %IL_CODES is open and BDL_Z[1] is open on IL0
0705 LOCAL SV_MSGLIB$
0710 SV_MSGLIB$=MSG(*)
0715 MESSAGE_LIB %FLMAINT_MSG$ ! 194087
0720 DIM IL0$(511); FIND (BDL_Z[1],KEY=CODE$,DOM=*NEXT)IL0$(1)
0721 IL0$(1,2)=CODE$; REM SSP190384
0725 IF NUL(%IL_BASE_DIR$) THEN IF NOT(NUL(STP(IL0$(3,128)))) THEN TMP$=STP(IL0$(3,128)),%IL_BASE_DIR$=TMP$(MSK(TMP$,"^.*"+DLM,ERR=*NEXT),MSL)
0730 IF NUL(IL0$(3,128)) THEN IL0$(3,128)=%IL_BASE_DIR$+MSG("IL_DIR_"+CODE$); WRITE (BDL_Z[1],KEY=CODE$)IL0$
0770 WRITE (%IL_CODES,KEY=CODE$)CODE$,STP(MSG("IL_DOC_"+CODE$)),STP(IL0$(3,128)),IL0$(131,4),STP(IL0$(135,60)),IL0$(195,1),IL0$(196,3),IL0$(199,1),IL0$(200,20),IL0$(220,20),IL0$(240,20) ! layout is code, description, default directory, format, scanner_options, Only save last, Minimum user access level to see document,add_format_code; 211234 - version labels 1, 2, 3
0785 MESSAGE_LIB SV_MSGLIB$
0790 RETURN 0
0795 END DEF
0799 ! *******************************************************************
0900 BUILD_TEMP_DIR:! 900 Setup %IL_TEMP_DIR$ as temp directory to use on PC, get from parameters, but if not there then use Windows Temp directory, also set %IL_COMSPEC$ to use in commands, and %IL_PARM$
0905 %IL_TEMP_DIR$=""
0910 CALL "[WDX]*Windx.utl;Get_Val","ENV("+QUO+"TEMP"+QUO+")",ENV_TEMP$; CALL "[WDX]*Windx.utl;Get_Val","ENV("+QUO+"COMSPEC"+QUO+")",ENV_COMSPEC$ ! Get env values we need
0915 %IL_COMSPEC$=ENV_COMSPEC$
0930 TMP=HFN; OPEN (TMP)"ZZPARM"; DIM %IL_PARM$(511); FIND (TMP,KEY=%C$+"I/L",DOM=*PROCEED)%IL_PARM$(1); TEMP_PATH$=STP(%IL_PARM$(7,128)); CLOSE (TMP)
0935 IF NUL(TEMP_PATH$) THEN TEMP_PATH$=ENV_TEMP$ ELSE TEMP_PATH$=SUB(TEMP_PATH$,"%TEMP",ENV_TEMP$) ! replace %TEMP
0940 TMP=HFN; OPEN (TMP,ERR=*NEXT)%WDX$+TEMP_PATH$; CLOSE (TMP); GOTO ITD_SET
0945 EXECUTE "[wdx]invoke hide wait "+QUO+ENV_COMSPEC$+" /C mkdir "+TEMP_PATH$+QUO
0970 ITD_SET:
0975 IF MID(TEMP_PATH$,-1)="\" THEN TEMP_PATH$=MID(TEMP_PATH$,1,LEN(TEMP_PATH$)-1)
0980 %IL_TEMP_DIR$=TEMP_PATH$
0995 EXIT 
0999 ! *********************************************************************
1000 DROP_BOX_LOAD:! ^1000 CALL: Given Drop Box Control, clear and load with list of values, optional: start$ and end$ (inclusive), other$ to include values outside the range or provide a custom list. list is in %IL_DB_LIST_{STR(LIST_CONTROL)}$ so we can handle ranges and turned off image types
1010 ENTER LIST_CONTROL,START$,END$,OTHER$,ERR=*NEXT
1015 IF NUL(START$) AND NUL(END$) THEN START$="00",END$="zz"
1030 INDEX=0,DB_INDEX=0,DB_LIST$="%IL_DB_LIST_"+STR(LIST_CONTROL); VIA DB_LIST$=""
1035 DROP_BOX LOAD LIST_CONTROL,"",ERR=*NEXT
1040 IF NOT(FN%ISOPEN(%IL_CODES)) THEN PERFORM "ILGFUN;BUILD_DOC_LIST" ! 251100
1050 DBL_NEXT_CODE:READ (%IL_CODES,IND=INDEX++,END=DBL_LOAD_DONE)CODE$,CODE_DESC$
1060 IF (CODE$<START$ OR CODE$>END$) AND (POS(CODE$=OTHER$,2)=0) THEN GOTO DBL_NEXT_CODE ! not in range and not on the list
1065 DROP_BOX LOAD LIST_CONTROL,++DB_INDEX,CODE_DESC$,ERR=*NEXT; VIA DB_LIST$=VIS(DB_LIST$)+CODE$ ! Add to drop box and our list
1085 GOTO DBL_NEXT_CODE
1090 DBL_LOAD_DONE:
1095 EXIT 
1099 ! *******************************************************************
1100 DROP_BOX_READ:! ^100 CALL: given LIST_CONTROL, return CODE$ and DESC$
1105 ENTER LIST_CONTROL,CODE$,DESC$
1110 IF NOT(FN%ISOPEN(%IL_CODES)) THEN PERFORM "ILGFUN;BUILD_DOC_LIST" ! 251100
1130 DIM CODE$(2); DB_LIST$="%IL_DB_LIST_"+STR(LIST_CONTROL),DB_LIST_VAL$=VIS(DB_LIST$)
1135 DROP_BOX READ LIST_CONTROL,DB_INDEX,ERR=*NEXT
1139 ! Remember drop box is 1 based, lookup in %IL_DB_LIST_control$, then read in file for desc$
1140 IF DB_INDEX<>0 THEN DB_INDEX=(DB_INDEX*2)-1; CODE$=MID(DB_LIST_VAL$,DB_INDEX,2); READ (%IL_CODES,KEY=CODE$,ERR=*NEXT)CODE$,DESC$
1195 EXIT 
1199 ! *****************************************************
1200 DROP_BOX_WRITE:! ^100 CALL: given LIST_CONTROL and CODE$, set drop box to correct index
1205 ENTER LIST_CONTROL,CODE$
1210 IF NOT(FN%ISOPEN(%IL_CODES)) THEN PERFORM "ILGFUN;BUILD_DOC_LIST" ! 251100
1215 DROP_BOX WRITE LIST_CONTROL,"",ERR=*NEXT
1220 DB_LIST$="%IL_DB_LIST_"+STR(LIST_CONTROL)
1230 INDEX=0,INDEX=POS(CODE$=VIS(DB_LIST$),2); IF INDEX<>0 THEN INDEX=(INDEX+1)/2
1235 IF INDEX<>0 THEN {
1240 DROP_BOX WRITE LIST_CONTROL,INDEX,ERR=*NEXT
1260  }
1295 EXIT 
1299 ! ********************************************************
1300 ADD_IMAGE:! ^100 CALL: given file channel of IL1, Optional IMAGE_TYPE,TOPFORM_REF_1,TOPFORM_REF_2, and IMAGE_PATH, create new IL1 record (returning IMAGE_KEY$) with CREATED_BY set to operator from %X3$, CREATED_ON, and CREATED_AT set to current date and time -- If IMAGE_PATH = ~SCAN~ + desired_file_name  then scan in image, if ~CANCEL~ is returned path then don't write out; 211234 - VERSION_LABEL, description of image if multiple versions are present
1304 LOCAL IL1$
1305 ENTER IL1_CHANNEL,IMAGE_KEY$,IMAGE_TYPE$,TOPFORM_REF_1$,TOPFORM_REF_2$,IMAGE_PATH$,VERSION_LABEL$,ERR=*NEXT
1310 DIM IL1$:IOL(IL1_CHANNEL); IF NOT(FN%ISOPEN(%IL_CODES)) THEN PERFORM "ILGFUN;BUILD_DOC_LIST" ! 251100
1315 IL1.IMAGE_TYPE$=PAD(IMAGE_TYPE$,2); FIND (%IL_CODES,KEY=PAD(IMAGE_TYPE$,2),DOM=*PROCEED)IL0_CODE$,IL0_DESC$,IL0_DIR$,IL0_FMT$,IL0_SCAN$,IL0_ONLY_SAVE_LAST$,IL0_ACCESS$,IL0_ADD_FMT_CODE$
1316 IL1.TOPFORM_REF_1$=PAD(TOPFORM_REF_1$,10),IL1.TOPFORM_REF_2$=PAD(TOPFORM_REF_2$,30)
1317 IL1.CREATED_ON$=DTE(JUL(0,0,0):"YYYYMMDD"),IL1.CREATED_ON$=CHR(NUM(IL1.CREATED_ON$(1,3))-125)+IL1.CREATED_ON$(4)
1318 IL1.CREATED_AT$=DTE(0:"%Hz%mz%sz")
1319 IL1.CREATED_BY$=PAD(MID(%X3$,40,3),3); IF NUL(IL1.CREATED_BY$) THEN IL1.CREATED_BY$=PAD(WHO,3) ! Use TopForm operator if known, else use o/s login info
1320 IF MID(IMAGE_PATH$,1,1)="~" THEN GOSUB PROCESS_IMAGE_PATH; IF IMAGE_PATH$="~CANCEL~" THEN GOTO ADD_IMAGE_EXIT
1330 IL1.IMAGE_PATH$=PAD(IMAGE_PATH$,160)
1331 IL1.VERSION_LABEL$=VERSION_LABEL$ ! 211234
1335 IL1.IL1_UNUSED$=DIM(56) ! 211234
1350 GOSUB WRITE_IL1_RECORD
1390 ADD_IMAGE_EXIT:
1395 EXIT 
1399 ! *******************************************************
1400 IMAGE_TYPE_DESC:! Given image_type, return desc - use in Queries, etc
1405 LOCAL DESC$
1410 ENTER IO$
1415 IF NOT(FN%ISOPEN(%IL_CODES)) THEN PERFORM "ILGFUN;BUILD_DOC_LIST" ! 251100
1420 DIM DESC$(20); DESC$(1)=IO$
1430 FIND (%IL_CODES,KEY=IO$,DOM=*NEXT)*,DESC$
1485 IO$=IO$+" - "+DESC$ ! SSP#207596
1495 EXIT 
1499 ! *****************************************************
1500 VIEW_IMAGE:! Given IMAGE_PATH$, TEMP_PATH$ then copy to TEMP_PATH$ and view it - if TEMP_PATH$ is null then read parameters to get
1510 ENTER IMAGE_PATH$,TEMP_PATH$,ERR=*NEXT
1525 IF MID(IMAGE_PATH$,1,1)=">" THEN MSGBOX MSG("ILGFUN_09",STP(MID(IMAGE_PATH$,2))),MSG("MB_ATTN"),"INFO"; GOTO VIEW_IMAGE_END ! If IMAGE_PATH starts with ">" it is not a file name but a comment
1530 IF POS("://"=IMAGE_PATH$)>0 THEN TEMP_FILE$=IMAGE_PATH$; GOTO 1585 ! 265894 - If IMAGE_PATH contains "://" then it is a standard protocol, allow it to be handled through Windows
1535 IF NUL(%IL_TEMP_DIR$) THEN CALL "ILGFUN;BUILD_TEMP_DIR"
1540 IF NUL(TEMP_PATH$) THEN TEMP_PATH$=%IL_TEMP_DIR$
1545 FILE_NAME$=MID(IMAGE_PATH$,MSK(IMAGE_PATH$,"[^/\\]*$")),TEMP_FILE$=%WDX$+TEMP_PATH$+"\"+FILE_NAME$
1580 CALL "ILGFUN;TRANSFER_FILE",ERR=*NEXT,IMAGE_PATH$,TEMP_FILE$
1585 SYSTEM_HELP SUB(TEMP_FILE$,%WDX$,""),ERR=*NEXT
1590 VIEW_IMAGE_END:
1595 EXIT 
1599 ! ********************************************************
1600 TRANSFER_FILE:! Transfer IMAGE_SRC$ to IMAGE_DEST$
1605 ENTER IMAGE_SRC$,IMAGE_DEST$
1606 SV_MSGLIB$=MSG(*); MESSAGE_LIB %FLMAINT_MSG$ ! 194087
1607 ! SERIAL "ILGFUN."+WHO+".log",ERR=*PROCEED; OPEN LOCK (HFN)"ILGFUN."+WHO+".log"; ILGLOGFL=LFO; PRINT (ILGLOGFL)DTE(JUL(DAY)+((TIM+(TCB(44)/3600))/24),*:"%Y-%Mz-%Dz %Hz:%mz:%sz"),"|",IMAGE_SRC$,"|",IMAGE_DEST$; CLOSE (ILGLOGFL)
1609 IF UCS(MID(IMAGE_SRC$,1,5))="[WDX]" THEN ATTEMPTS=30,SECS=3,MSGSIZE=2048 ELSE ATTEMPTS=2,SECS=5,MSGSIZE=8000 END_IF ; MSGSIZE=1 ! Try ATTEMPTS times, SECS apart until we give error on open to handle case ; set MSGSIZE to 1 - DBD-252
1610 OPEN_IMAGE:IF NUL(IMAGE_SRC$) THEN MSGBOX MSG("ILGFUN_00"),MSG("MB_ATTN"),"!"; GOTO TRANSFER_FILE_END ELSE IMG_SRC=HFN; OPEN INPUT (IMG_SRC,ISZ=MSGSIZE,ERR=IMAGE_FILE_ERR)IMAGE_SRC$ ! DBD-252
1615 ! Determine if BIG_FILE, in which case we will give a progress bar or not, we will not determine the exact file size, only if it is bigger or smaller than about 100K bytes (+/- 10000 bytes)
1620 BIG_FILE=0 ! READ (IMG_SRC,IND=5,ERR=*NEXT); BIG_FILE=1
1621 ! IF %C$="603" THEN BIG_FILE=0 ! 246719
1625 ! Get name of the actual file with preceding directories
1630 IF BIG_FILE THEN PRINT 'DIALOGUE'(30,10,35,5,MSG("ILGFUN_02",IMAGE_SRC$),'CS'+'_WHITE'+'BLACK'),'SF',@(1,0),'CS',MSG("ILGFUN_03"); CALL "$CTL-10;PB_CREATE"; WAIT 1
1635 ERASE IMAGE_DEST$,ERR=*PROCEED; SERIAL IMAGE_DEST$,ERR=*NEXT; GOTO OPEN_DEST
1636 IF ERR=12 AND UCS(MID(IMAGE_DEST$,1,5))<>"[WDX]" THEN DEST_DIR$=MID(IMAGE_DEST$,1,POS(DLM=IMAGE_DEST$,1,POS(DLM=IMAGE_DEST$,1,0))); IF POS("MS"=SYS) THEN GOSUB 7500 ELSE INVOKE "mkdir -p "+DEST_DIR$+" >/dev/null" END_IF ; SERIAL IMAGE_DEST$,ERR=*NEXT ! try to create needed directories
1638 OPEN_DEST:
1639 IF UCS(MID(IMAGE_SRC$,1,5))<>"[WDX]" AND UCS(MID(IMAGE_DEST$,1,5))<>"[WDX]" THEN CLOSE (IMG_SRC); GOSUB UNIX_COPY; GOTO TRANSFER_FILE_END
1640 IMG_DEST=HFN; OPEN PURGE (IMG_DEST,ISZ=1,ERR=*NEXT)IMAGE_DEST$; GOTO 1642
1641 OPEN (IMG_DEST,ISZ=1,ERR=FINISH_TRANSFER)IMAGE_DEST$
1645 COPY_DONE=0,VALUE=0,COPY_INDEX=0
1650 IF BIG_FILE THEN REPEAT ; READ RECORD (IMG_SRC,SIZ=1024*1024,END=*BREAK)IMG$; VALUE+=5; CALL "$CTL-10;PB_VALUE",VALUE; WRITE RECORD (IMG_DEST,SIZ=LEN(IMG$))IMG$; UNTIL COPY_DONE ELSE REPEAT ; READ RECORD (IMG_SRC,SIZ=1024*1024,END=*BREAK)IMG$; WRITE RECORD (IMG_DEST,SIZ=LEN(IMG$))IMG$; UNTIL COPY_DONE ! DBD-252
1655 FINISH_TRANSFER:CLOSE (IMG_DEST); CLOSE (IMG_SRC)
1685 TRANSFER_FILE_END:
1686 IF BIG_FILE THEN CALL "$CTL-10;PB_DEL",ERR=*PROCEED; PRINT (0,ERR=*PROCEED)'POP',
1687 MESSAGE_LIB SV_MSGLIB$
1690 EXIT 
1697 IMAGE_FILE_ERR:IF --ATTEMPTS>0 THEN WAIT SECS; GOTO OPEN_IMAGE ELSE MSGBOX MSG("ILGFUN_01",STR(ERR),IMAGE_SRC$,"source"),MSG("MB_ATTN"),"!"; GOTO TRANSFER_FILE_END
1698 TEMP_FILE_ERR: MSGBOX MSG("ILGFUN_01",STR(ERR),IMAGE_DEST$,"destination"),MSG("MB_ATTN"),"!"; GOTO TRANSFER_FILE_END
1699 ! ************************************************************
1700 VIEW_IMAGE_KEY:! Given image_key, get the image record and use VIEW_IMAGE to display
1710 ENTER IMAGE_KEY$,ERR=*NEXT
1715 CALL "ZZCOMP","","","",X3$,X4$,"",-1,0,0; DIM Z[NUM(X3$(60,3))]
1720 Z$="01O IL1... "; CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
1730 FIND (Z[1],KEY=IMAGE_KEY$,DOM=MISSING_IMAGE_KEY,REC=IL1$)
1750 CALL "ILGFUN;VIEW_IMAGE",IL1.IMAGE_PATH$,""
1790 VIEW_IMAGE_KEY_END:CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
1795 EXIT 
1797 MISSING_IMAGE_KEY: MSGBOX MSG("ILGFUN_04",IMAGE_KEY$),MSG("MB_ATTN"),"!"; GOTO VIEW_IMAGE_KEY_END
1799 ! ****************************************************
1800 FIND_IMAGE:! Given IMAGE_TYPE$ or blank, find image files, return a path in image_path$
1805 IF NOT(FN%ISOPEN(%IL_CODES)) THEN PERFORM "ILGFUN;BUILD_DOC_LIST" ! 251100
1810 ENTER IMAGE_TYPE$,IMAGE_PATH$,ERR=*NEXT
1815 IMAGE_PATH$=""
1820 FIND (%IL_CODES,KEY=IMAGE_TYPE$,DOM=*NEXT,ERR=*NEXT)*,DESC$,DFLT_PATH$
1825 IF NUL(IMAGE_TYPE$) THEN GFB_TITLE$=MSG("ILGFUN_07") ELSE DESC$=STP(DESC$),DFLT_PATH$=STP(DFLT_PATH$),GFB_TITLE$=MSG("ILGFUN_08",DESC$)
1830 IF NUL(DFLT_PATH$) THEN DFLT_PATH$=LWD
1835 SV_MSGLIB$=MSG(*); MESSAGE_LIB %FLMAINT_MSG$ ! 194087
1837 ! build file types list, stored in Message Library, with format of 'IL_FTYPE'+ message # ('00'-'99'). '99' is reserved for the All files options, if there,all files option will be available, if not, then no all files option
1838 MSG_INDEX=-1,MSG_KEY$="IL_FTYPE"+STR(++MSG_INDEX:"00"),FILE_TYPES$=""
1840 WHILE POS(MSG_KEY$=MSG(MSG_KEY$))<>1
1845 FILE_TYPES$+=MSG(MSG_KEY$)+"~",MSG_KEY$="IL_FTYPE"+STR(++MSG_INDEX:"00")
1850 WEND 
1855 IF POS("IL_FTYPE99"=MSG("IL_FTYPE99"))<>1 THEN FILE_TYPES$+=MSG("IL_FTYPE99")+"~" ! Add all files option if allowed
1870 MESSAGE_LIB SV_MSGLIB$
1880 GET_FILE_BOX READ IMAGE_PATH$,DFLT_PATH$,GFB_TITLE$,FILE_TYPES$
1890 FIND_IMAGE_END:
1895 EXIT 
1899 ! ***************************************************
2000 GET_RELATED_IMAGES:! Given: SEARCH_TYPE, and REF, return RESULT as an open in memory file of related images. key is SEQ + "H" for header or "D" for detail. HEADER is IMAGE_TYPE$,IMAGE_DESC$. Detail is IL1$ record
2005 ! OPTION$ S=silent mode - don't show progress
2010 ENTER SEARCH_TYPE$,SEARCH_REF$,OPTION$,RESULT
2011 ! testcode SEARCH_TYPE$="AR_INVOICE",SEARCH_REF$="00001000000000002 ",OPTION$="S"
2015 CALL "ZZCOMP","","","",X3$,X4$,"",-1,0,0; DIM Z[NUM(X3$(60,3))]
2020 IF RESULT=0 THEN RESULT=HFN; OPEN (RESULT)"*memory*" ! Calling program is responsible to close, 208586-Preserve RESULT chan across multiple calls
2025 IF POS("S"=OPTION$) THEN SILENT_MODE=1 ELSE SILENT_MODE=0
2050 IF NOT(SILENT_MODE) THEN PRINT (0,ERR=*NEXT)'DIALOGUE'(30,10,35,5,MSG("ILGFUN_10"),'CS'+'_WHITE'+'BLACK'),'SF',@(1,0),'CS',MSG("ILGFUN_11"),; POP_WINDOW=1
2100 PERFORM PGN+";GRI_"+SEARCH_TYPE$,ERR=*NEXT ! call the custom routines to get the images
2150 FINISH_GET_RELATED_IMAGES:
2155 IF POP_WINDOW THEN PRINT (0,ERR=*PROCEED)'POP',
2160 IF CLOSE_FILES THEN CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
2185 EXIT ! GET_RELATED_IMAGES
2189 ! ******************************************************
2195 OPEN_GRI_FILES: Z$=Z$+"99O IL1... "; CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1; IL1_CHAN=Z[99]; CLOSE_FILES=1; RETURN 
2199 ! ******************************************************
2200 GET_REF:! Given IL1$ record return REF$ with human readable Reference string
2210 ENTER IL1$,REF$
2215 REF$=""
2220 IMAGE_TYPE$=MID(IL1$,6,2)
2225 TIME_MASK$="00:00:00"; IF MID(%X3$,56,3)="DMY" THEN DATE_FORMAT$="%Dz-%Mz-%Y" ELSE DATE_FORMAT$="%Mz-%Dz-%Y" ! SSP#228527!SSP#207596
2250 SWITCH IMAGE_TYPE$
2252 CASE "00"; REF$=MSG("GR_RFQ")+FN%ZZDISP$(MID(IL1$,8,8),"O/P")+DIM(5)+MSG("GR_VEND")+FN%ZZDISP$(MID(IL1$,213,10),"A/P")+DIM(5)+MSG("GR_QUOTE")+MID(IL1$,223,10); BREAK
2254 CASE "01"; IF NOT(NUL(MID(IL1$,8,9))) THEN REF$=MSG("GR_PO")+FN%ZZDISP$(MID(IL1$,8,9),"P/O")+DIM(5) ELSE REF$="" END_IF ; REF$+=MSG("GR_VEND")+FN%ZZDISP$(MID(IL1$,213,10),"A/P")+DIM(5)+MSG("GR_INV")+MID(IL1$,223,10); BREAK
2256 CASE "02"; REF$=MSG("GR_PO")+FN%ZZDISP$(MID(IL1$,8,9),"P/O"); BREAK
2258 CASE "03"; REF$=MSG("GR_PO")+FN%ZZDISP$(MID(IL1$,8,9),"P/O"); BREAK
2260 CASE "04"; REF$=MSG("GR_ORDER")+FN%ZZDISP$(MID(IL1$,8,8),"O/P"); BREAK
2262 CASE "05"; REF$=MSG("GR_CUST")+FN%ZZDISP$(MID(IL1$,213,10),"A/R")+DIM(5)+MSG("GR_CHECK")+MID(IL1$,223,8); BREAK
2264 CASE "06"; REF$=MSG("GR_CUST")+FN%ZZDISP$(MID(IL1$,8,10),"A/R"); BREAK
2266 CASE "07"; REF$=MSG("GR_PO")+FN%ZZDISP$(MID(IL1$,8,9),"P/O"); IF NOT(NUL(MID(IL1$,213,20))) THEN TMP$=STP(MID(IL1$,213,20),0); IF LEN(TMP$)<=10 THEN REF$=REF$+DIM(5)+MSG("GR_ITEM")+TMP$ ELSE REF$=REF$+DIM(5)+MSG("GR_CUST")+FN%ZZDISP$(TMP$(1,10),"A/R")+DIM(5)+MSG("GR_ITEM")+TMP$(11); END_IF ; END_IF ; BREAK
2268 CASE "08"; REF$=MSG("GR_PO")+FN%ZZDISP$(MID(IL1$,8,9),"P/O"); IF NOT(NUL(MID(IL1$,213,20))) THEN TMP$=STP(MID(IL1$,213,20),0); IF LEN(TMP$)<=10 THEN REF$=REF$+DIM(5)+MSG("GR_ITEM")+TMP$ ELSE REF$=REF$+DIM(5)+MSG("GR_CUST")+FN%ZZDISP$(TMP$(1,10),"A/R")+DIM(5)+MSG("GR_ITEM")+TMP$(11); END_IF ; END_IF ; BREAK
2270 CASE "09"; REF$=""; IF NOT(NUL(MID(IL1$,213,20))) THEN TMP$=STP(MID(IL1$,213,20),0); IF LEN(TMP$)<=10 THEN REF$=REF$+DIM(5)+MSG("GR_ITEM")+TMP$ ELSE REF$=REF$+DIM(5)+MSG("GR_CUST")+FN%ZZDISP$(TMP$(1,10),"A/R")+DIM(5)+MSG("GR_ITEM")+TMP$(11); END_IF ; END_IF ; BREAK
2272 CASE "10"; REF$=MSG("GR_CUST")+FN%ZZDISP$(MID(IL1$,8,10),"A/R"); BREAK
2274 CASE "11"; REF$=MSG("GR_VEND")+FN%ZZDISP$(MID(IL1$,8,10),"A/P"); BREAK
2276 CASE "12"; REF$=MSG("GR_ORDER")+FN%ZZDISP$(MID(IL1$,8,8),"O/P"); BREAK
2278 CASE "13"; REF$=MSG("GR_CUSTPO")+STP(FN%ZZDISP$(MID(IL1$,213,10),"A/R"))+"-"+STP(MID(IL1$,223,15)); BREAK
2280 CASE "14"; REF$=MSG("GR_CUST")+FN%ZZDISP$(MID(IL1$,8,10),"A/R"); BREAK ! 230830
2282 CASE "15"; REF$=MSG("GR_PO")+FN%ZZDISP$(MID(IL1$,8,9),"P/O")+DIM(5)+MSG("GR_RCVRPT")+STP(MID(IL1$,213,30),2); BREAK ! WO 239078
2325 ! TopForm Generated images
2330 CASE "A0"; REF$=MSG("GR_CUST")+FN%ZZDISP$(MID(IL1$,213,10),"A/R")+DIM(5)+MSG("GR_ARINV")+FN%ZZDISP$(MID(IL1$,223,8),"AR6")+DIM(2)+MID(IL1$,232,9); BREAK ! SSP 221478  ssp 223717
2332 CASE "A1"; REF$=MSG("GR_ORDER")+FN%ZZDISP$(MID(IL1$,8,8),"O/P")+DIM(1)+MID(IL1$,226,2); BREAK ! SSP 217991
2334 CASE "A2"; REF$=MSG("GR_PO")+FN%ZZDISP$(MID(IL1$,8,9),"P/O")+DIM(5)+MSG("GR_VEND")+FN%ZZDISP$(MID(IL1$,213,10),"A/P")+DIM(2)+MID(IL1$,232,9); BREAK ! SSP 211966 SSP 223717
2335 ! CASE "A2"; REF$=MSG("GR_PO")+FN%ZZDISP$(MID(IL1$,8,9),"P/O")+DIM(5)+MSG("GR_VEND")+FN%ZZDISP$(MID(IL1$,213,10),"A/P"); BREAK
2336 CASE "A3"; REF$=""; IF NOT(NUL(MID(IL1$,213,20))) THEN TMP$=STP(MID(IL1$,213,20),0); IF LEN(TMP$)<=10 THEN REF$=REF$+DIM(5)+MSG("GR_ITEM")+TMP$ ELSE REF$=REF$+DIM(5)+MSG("GR_CUST")+FN%ZZDISP$(TMP$(1,10),"A/R")+DIM(5)+MSG("GR_ITEM")+TMP$(11); END_IF ; END_IF ; BREAK ! SSP 207896
2338 CASE "A4"; REF$=MSG("GR_RFQ")+FN%ZZDISP$(MID(IL1$,8,8),"O/P")+DIM(5)+MSG("GR_VEND")+FN%ZZDISP$(MID(IL1$,213,10),"A/P"); BREAK
2340 CASE "A5"; REF$=MSG("GR_RFQ")+FN%ZZDISP$(MID(IL1$,8,8),"O/P")+DIM(5)+MSG("GR_CUST")+FN%ZZDISP$(MID(IL1$,213,10),"A/R"); BREAK
2342 CASE "A6"; REF$=MSG("GR_CUST")+FN%ZZDISP$(MID(IL1$,8,10),"A/R"); BREAK
2344 CASE "A7"; REF$=MSG("GR_ORDER")+FN%ZZDISP$(MID(IL1$,8,8),"O/P"); BREAK
2346 CASE "A8"; REF$=MSG("GR_CHECK")+MID(IL1$,8,6)+DIM(5)+MSG("GR_VEND")+FN%ZZDISP$(MID(IL1$,213,10),"A/P"); BREAK; REM SSP 217026
2348 CASE "A9"; REF$=MSG("GR_ORDER")+FN%ZZDISP$(MID(IL1$,213,8),"O/P")+DIM(5)+MSG("GR_LINE")+MID(IL1$,26,3); BREAK
2349 CASE "RD"; REF$=MSG("GR_ORDER")+FN%ZZDISP$(MID(IL1$,8,8),"O/P"); BREAK
2350 CASE "AA"; REF$=MSG("GR_PO")+FN%ZZDISP$(MID(IL1$,8,9),"P/O")+DIM(5)+MSG("GR_RCVRPT")+STP(MID(IL1$,213,30),2); BREAK ! WO 239078
2352 CASE "AB"; REF$=MSG("GR_CUST")+FN%ZZDISP$(MID(IL1$,213,10),"A/R")+DIM(5)+MSG("SUMM_B")+": "+STP(MID(IL1$,223,8),2); BREAK ! SSP 231924
2353 CASE "AC"; REF$=MSG("GR_CUST")+FN%ZZDISP$(MID(IL1$,213,10),"A/R")+DIM(5)+MSG("SUMM_B")+": "+STP(MID(IL1$,223,8),2); BREAK ! SSP 231924
2400 ! Reports
2402 CASE "R0","R1","R2","R3","R4","R5","R6","R7","R8","R9","RA","RB","RC","RE","RH","RJ","RK"; REF$=MSG("GR_AUDIT")+MID(IL1$,8,4)+"."+MID(IL1$,12,2); BREAK ! 192639 SSP 190384 197202 216198 245558 268302
2406 CASE "RF","RI"; REF$=MSG("GR_BATCH")+MID(IL1$,8,10); BREAK ! [SSP-200047]-CIG, WO 244750 - CIG Inbound Freight Journal
2408 CASE "RG"; REF$=MSG("GR_BATCH")+MID(IL1$,8,10); BREAK ! [SSP-200047]-CIG+
2440 DEFAULT ; REF$=STP(MID(IL1$,8,10))+" "+STP(MID(IL1$,213,20))
2445 END SWITCH ! IMAGE_TYPE$@2250
2495 EXIT ! GET_REF
2499 ! **********************************************
2500 ADD_TO_RESULT:! CALL with IMAGE_TYPE$,ADD_HEADER$,TF_REF_1$,TF_REF_2$,IL1_CHAN,RESULT will add header record and then any images found matching TF_REF_1$ followed by those matching TF_REF_2$. ADD_HEADER$ is Y to add header record, any other value means no - needed to allow multiple calls for same type record, use Y on first one, N afterwards
2501 ! if $00$ in either TF_REF_1$ or TF_REF_2$ then it is assumed to split into a start and end (inclusive) range, otherwise on the same value will be used for both
2505 ENTER IMAGE_TYPE$,ADD_HEADER$,TF_REF_1$,TF_REF_2$,IL1_CHAN,RESULT,ERR=ADD_TO_RESULT_END
2506 LOCAL ACCESS_LEVEL$,DESC$; IF NOT(FN%ISOPEN(%IL_CODES)) THEN PERFORM "ILGFUN;BUILD_DOC_LIST" ! 251100
2507 TMP=POS($00$=TF_REF_1$); IF TMP THEN TF_REF_1_START$=MID(TF_REF_1$,1,TMP-1),TF_REF_1_END$=MID(TF_REF_1$,TMP+1) ELSE TF_REF_1_START$=TF_REF_1$,TF_REF_1_END$=TF_REF_1$
2509 TMP=POS($00$=TF_REF_2$); IF TMP THEN TF_REF_2_START$=MID(TF_REF_2$,1,TMP-1),TF_REF_2_END$=MID(TF_REF_2$,TMP+1) ELSE TF_REF_2_START$=TF_REF_2$,TF_REF_2_END$=TF_REF_2$
2510 DESC$="No Description"; FIND (%IL_CODES,KEY=IMAGE_TYPE$,DOM=*NEXT)*,DESC$,*,*,*,*,ACCESS_LEVEL$
2512 IF LEN(X3$)<300 THEN IF LEN(%X3$)>45 THEN X3$=%X3$ ELSE CALL "ZZCOMP","","","",X3$,X4$,"",-1,0,0
2513 IF X3$(43,2)<>"SU" AND NUM(X3$(43,2))<NUM(ACCESS_LEVEL$) THEN GOTO ADD_TO_RESULT_END ! 245779
2518 SEQ=0,SEQ$="000",SEQ$=KEL(RESULT,ERR=*NEXT),SEQ$=MID(SEQ$,1,LEN(SEQ$)-1),SEQ$=FN%NEXT_SEQ$(SEQ$,5) ! SEQ=NUM(SEQ$,ERR=*NEXT)+1 ! set seq based on last key currently in file; 273041 - Use alphanumeric seq
2519 IF ADD_HEADER$="Y" THEN {
2525 SEQ$=FN%NEXT_SEQ$(SEQ$,5); WRITE (RESULT,KEY=SEQ$+"H",DOM=*SAME)IMAGE_TYPE$,DESC$ ! write header record whether we find any or not; 273041 - alphanumeric seq
2529  }
2530 IF NOT(NUL(TF_REF_1_START$)) OR NOT(NUL(TF_REF_1_END$)) THEN {
2535 DONE=0; READ (IL1_CHAN,KNO=2,KEY=IMAGE_TYPE$+TF_REF_1_START$,DOM=*NEXT)
2540 REPEAT 
2545 IL1_KEY$=KEY(IL1_CHAN,KNO=2,END=*BREAK); READ (IL1_CHAN,KNO=2,KEY=IL1_KEY$,DOM=*SAME)IL1$; IF MID(IL1_KEY$,1,2)=IMAGE_TYPE$ AND MID(IL1_KEY$,3,LEN(TF_REF_1_START$))>=TF_REF_1_START$ AND MID(IL1_KEY$,3,LEN(TF_REF_1_END$))<=TF_REF_1_END$ THEN SEQ$=FN%NEXT_SEQ$(SEQ$,5); WRITE (RESULT,KEY=SEQ$+"D")IL1$ ELSE DONE=1 ! 273041 - Use alphanumeric seq
2550 UNTIL DONE
2555  }
2560 IF NOT(NUL(TF_REF_2_START$)) OR NOT(NUL(TF_REF_2_END$)) THEN {
2565 DONE=0; READ (IL1_CHAN,KNO=3,KEY=IMAGE_TYPE$+TF_REF_2_START$,DOM=*NEXT)
2570 REPEAT 
2575 IL1_KEY$=KEY(IL1_CHAN,KNO=3,END=*BREAK); READ (IL1_CHAN,KNO=3,KEY=IL1_KEY$,DOM=*SAME)IL1$; IF MID(IL1_KEY$,1,2)=IMAGE_TYPE$ AND MID(IL1_KEY$,3,LEN(TF_REF_2_START$))>=TF_REF_2_START$ AND MID(IL1_KEY$,3,LEN(TF_REF_2_END$))<=TF_REF_2_END$ THEN SEQ$=FN%NEXT_SEQ$(SEQ$,5); WRITE (RESULT,KEY=SEQ$+"D")IL1$ ELSE DONE=1 ! 273041 - Use alphanumeric seq
2580 UNTIL DONE
2585  }
2590 ADD_TO_RESULT_END:
2595 EXIT 
2599 ! ***************************************************
2600 ADD_MULTIPLE_ITEMS:! Call given IMAGE_TYPE$,ADD_HEADER$,LIST$,LIST_SIZE,TF_REF_NUM,IL1_CHAN and RESULT, call ADD_TO_RESULT for each item on the list, TF_REF_NUM determines ref# 1 or 2.ADD_HEADER$=Y means a header if no items on list, else nothing is added
2610 ENTER IMAGE_TYPE$,ADD_HEADER$,LIST$,LIST_SIZE,TF_REF_NUM,IL1_CHAN,RESULT,ERR=ADD_MULTIPLE_ITEMS_END
2615 LIST_COUNT=INT(LEN(LIST$)/LIST_SIZE,ERR=ADD_MULTIPLE_ITEMS_END)
2620 IF LIST_COUNT=0 THEN {
2625 IF ADD_HEADER$="Y" THEN CALL "ILGFUN;ADD_TO_RESULT",IMAGE_TYPE$,"Y","","",IL1_CHAN,RESULT; ADD_HEADER$="N"
2630 GOTO ADD_MULTIPLE_ITEMS_END
2635  }
2640 FOR LIST_INDEX=1 TO LIST_COUNT
2645 LIST_VAL$=MID(LIST$,(LIST_INDEX-1)*LIST_SIZE+1,LIST_SIZE)
2650 IF TF_REF_NUM=1 THEN CALL "ILGFUN;ADD_TO_RESULT",IMAGE_TYPE$,ADD_HEADER$,LIST_VAL$,"",IL1_CHAN,RESULT ELSE CALL "ILGFUN;ADD_TO_RESULT",IMAGE_TYPE$,ADD_HEADER$,"",LIST_VAL$,IL1_CHAN,RESULT
2655 ADD_HEADER$="N"
2660 NEXT LIST_INDEX
2690 ADD_MULTIPLE_ITEMS_END:
2695 EXIT 
2699 ! ***************************************************
2700 SCAN_IMAGE:! Given IMAGE_TYPE$ and IMAGE_PATH$, scan in image to TEMP_DIR, copy correct dir based on IMAGE_TYPE$. IMAGE_PATH$ will be ~SCAN~ + desired file name. If file name is blank make up standard name to go into data directory
2710 ENTER IMAGE_TYPE$,IMAGE_PATH$
2725 IF NUL(IMAGE_PATH$) THEN IMAGE_PATH$="SCAN_TEMP_"+FID(0)
2730 IMAGE_FILE$=SUB(SUB(IMAGE_PATH$,"~SCAN~","")," ","")
2745 IMAGE_PATH$=IMAGE_FILE$; CALL "ILGFUN;BUILD_IMAGE_PATH",ERR=*NEXT,IMAGE_TYPE$,IMAGE_PATH$,IMAGE_FILE_NAME$,IMAGE_DESC$,IMAGE_DIR$,IMAGE_FORMAT$,SCANNER_OPTIONS$
2750 IF NUL(%IL_TEMP_DIR$) THEN CALL "ILGFUN;BUILD_TEMP_DIR"
2795 IF NUL(%IL_SCAN_LOCATION$) THEN CALL "ILGFUN;GET_SOFTWARE_LOCATION",CANCEL_IT; IF CANCEL_IT THEN GOTO 2895
2800 SCAN_FILE$="[wdx]"+%IL_TEMP_DIR$+"\"+IMAGE_FILE_NAME$
2805 ERASE SCAN_FILE$,ERR=*NEXT
2809 SCAN_CMD$=SUB(STP(%IL_PARM$(135,80)),"[TFSTD]",QUO+QUO+%IL_SCAN_LOCATION$+QUO+QUO)
2810 CMD$="[wdx]invoke hide wait"+QUO+%IL_COMSPEC$+" /C """""+SCAN_CMD$+"  /app=""""TopForm Software"""" /key=-1174193304 "+SCANNER_OPTIONS$+" "+SUB(SCAN_FILE$,"[wdx]","")+QUO+QUO+" "+QUO
2811 %MSG_STYLE=1; CALL "ZZGMSG",ERR=*NEXT,"C",MSG("ILGFUN_19"),"Y+05"; %MSG_STYLE=0
2815 EXECUTE CMD$,ERR=*NEXT
2820 CALL "ILGFUN;TRANSFER_FILE",SCAN_FILE$,IMAGE_PATH$
2821 CALL "ZZGMSG",ERR=*NEXT,"D","",""
2825 ERASE SCAN_FILE$,ERR=*NEXT
2895 EXIT 
2899 ! *************************************************************
3000 GET_SOFTWARE_LOCATION:! determine path to scanner software component (currently ACQUIRE), including standard options and key info. Verify that software is loaded on their PC, if not offer to transfer over, if CANCEL then cancel the scan
3005 ENTER CANCEL
3006 CANCEL=0
3007 SV_MSGLIB$=MSG(*); MESSAGE_LIB %FLMAINT_MSG$ ! 194087
3010 IF NUL(%IL_TEMP_DIR$) THEN CALL "ILGFUN;BUILD_TEMP_DIR"
3015 CALL %WDX$+"*windx.utl;get_lwd",LOCATION$; LOGO_LOCATION$=LOCATION$+"\topform\"; LOCATION$=MID(LOCATION$,1,POS("\"=LOCATION$,-1)) ! get location of base windx dir by getting lwd and removing the windx from the end
3017 OCX_LOCATION$=LOCATION$+"lib\"
3020 LOCATION$+="lib\acquire\",FROM_LOCATION$="lib"+DLM+"acquire"+DLM
3029 ! Check to see if directory is there
3030 CK=HFN; OPEN (CK,ERR=MAKE_DIR)%WDX$+LOCATION$; CLOSE (CK); GOTO DIR_OK
3035 MAKE_DIR:EXECUTE %WDX$+"invoke hide wait "+QUO+%IL_COMSPEC$+" /C mkdir "+QUO+"+QUO+"+QUO+MID(LOCATION$,1,LEN(LOCATION$)-1)+QUO+"+quo"
3036 DIR_OK:
3037 %IL_SCAN_LOCATION$=LOCATION$+"ACQUIRE.EXE"
3040 CK=HFN; OPEN (CK,ERR=SEND_SCANNER_FILES)%WDX$+%IL_SCAN_LOCATION$; CLOSE (CK); GOTO GET_SOFTWARE_DONE ! if exe program there, we're done
3045 SEND_SCANNER_FILES: MSGBOX MSG("ILGFUN_12"),MSG("ILGFUN_13"),"CANCEL",_ANS$; IF _ANS$<>"OK" THEN CANCEL=1; GOTO GET_SOFTWARE_DONE
3049 ! Tranfer all files in the from_location to location
3050 SELECT NAME$ FROM FROM_LOCATION$ WHERE MID(NAME$,1,1)<>"."
3060 CALL "ILGFUN;TRANSFER_FILE",FROM_LOCATION$+NAME$,%WDX$+LOCATION$+NAME$
3070 NEXT RECORD 
3075 ! transfer OCX and il_logo.htm to ensure they are there
3080 CALL "ILGFUN;TRANSFER_FILE","lib/_bmp/_OCX",%WDX$+OCX_LOCATION$+"_OCX"
3082 CALL "ILGFUN;TRANSFER_FILE","lib/_bmp/il_logo.jpg",%WDX$+LOGO_LOCATION$+"il_logo.jpg"
3084 CALL "ILGFUN;TRANSFER_FILE","lib/_bmp/il_logo.htm",%WDX$+LOGO_LOCATION$+"il_logo.htm"
3090 GET_SOFTWARE_DONE:
3092 MESSAGE_LIB SV_MSGLIB$
3095 EXIT 
3099 ! ********************************************************
3100 VIEW_IMAGE_IN_WINDOW:! Given IMAGE_PATH$, TEMP_PATH$ then copy to TEMP_PATH$ and view it - if TEMP_PATH$ is null then read parameters to get
3110 ENTER IMAGE_PATH$,TEMP_PATH$,OPTION$,COLUMN,LINE,WIDTH,HEIGHT,OCX_HANDLE,ERR=*NEXT
3125 IF MID(IMAGE_PATH$,1,1)=">" THEN MSGBOX MSG("ILGFUN_09",STP(MID(IMAGE_PATH$,2))),MSG("MB_ATTN"),"INFO"; GOTO VIEW_IMAGE_IN_WINDOW_END ! If IMAGE_PATH starts with ">" it is not a file name but a comment
3135 IF NUL(%IL_TEMP_DIR$) THEN CALL "ILGFUN;BUILD_TEMP_DIR"
3140 IF NUL(TEMP_PATH$) THEN TEMP_PATH$=%IL_TEMP_DIR$
3145 FILE_NAME$=MID(IMAGE_PATH$,MSK(IMAGE_PATH$,"[^/\\]*$")),TEMP_FILE$=%WDX$+TEMP_PATH$+"\"+FILE_NAME$
3160 ALREADY_EXISTS=0; IF POS("A"=OPTION$) THEN AE=HFN; OPEN (AE,ERR=*NEXT)TEMP_FILE$; ALREADY_EXISTS=1; CLOSE (AE)
3180 IF NOT(ALREADY_EXISTS) THEN CALL "ILGFUN;TRANSFER_FILE",ERR=*NEXT,IMAGE_PATH$,TEMP_FILE$
3184 ! SYSTEM_HELP SUB(TEMP_FILE$,%WDX$,""),ERR=*NEXT
3185 CALL "[wdx]*OCX;URL_IN_IE",ERR=*NEXT,COLUMN,LINE,WIDTH,HEIGHT,"file://"+SUB(TEMP_FILE$,%WDX$,""),OCX_HANDLE,RETURN_CODE
3190 VIEW_IMAGE_IN_WINDOW_END:
3195 EXIT 
3199 ! ********************************************************
3200 PROCESS_IMAGE_PATH:! If IMAGE_PATH$ starts with a "~" then we have a command to process
3210 IP$=IMAGE_PATH$
3220 IF MID(IMAGE_PATH$,1,6)="~SCAN~" THEN {! Scan in image, if ~CANCEL~ return then don't write out
3225 CALL "ILGFUN;SCAN_IMAGE",ERR=PIP_ERROR,IMAGE_TYPE$,IMAGE_PATH$
3228  }
3229 IF MID(IMAGE_PATH$,1,6)="~COPY~" THEN {
3230 IMAGE_PATH$=MID(IMAGE_PATH$,7); TILDE=POS("~"=IMAGE_PATH$); IF TILDE=0 THEN GOTO PIP_ERROR ELSE IMG_SRC$=MID(IMAGE_PATH$,1,TILDE-1),IMAGE_PATH$=MID(IMAGE_PATH$,TILDE+1)
3232 IF POS("."=LCS(IMG_SRC$),-1) THEN IMAGE_FORMAT$=MID(IMG_SRC$,POS("."=LCS(IMG_SRC$),-1)+1) ! Override normal image_format processing based on incoming file extension SSP307223
3233 CALL "ILGFUN;BUILD_IMAGE_PATH",ERR=*NEXT,IMAGE_TYPE$,IMAGE_PATH$,IMAGE_FILE_NAME$,IMAGE_DESC$,IMAGE_DIR$,IMAGE_FORMAT$,SCANNER_OPTIONS$
3237 CALL "ILGFUN;TRANSFER_FILE",ERR=PIP_ERROR,IMG_SRC$,IMAGE_PATH$
3239  }
3240 IF MID(IMAGE_PATH$,1,6)="~FILE~" THEN {
3245 IMAGE_PATH$=SUB(IMAGE_PATH$,"~FILE~","")
3250 CALL "[WDX]*OCX;GET_FILE_BOX","READ",IMG_SRC$,MSG("ILGFUN_15"),MSG("ILGFUN_16"),MSG("ILGFUN_17"),MSG("ILGFUN_18")
3253 CALL "ILGFUN;BUILD_IMAGE_PATH",ERR=*NEXT,IMAGE_TYPE$,IMAGE_PATH$,IMAGE_FILE_NAME$,IMAGE_DESC$,IMAGE_DIR$,IMAGE_FORMAT$,SCANNER_OPTIONS$
3255 CALL "ILGFUN;TRANSFER_FILE",ERR=PIP_ERROR,IMG_SRC$,IMAGE_PATH$
3259  }
3270 RETURN 
3280 UNIX_COPY:
3287 INVOKE "cp "+QUO+IMAGE_SRC$+QUO+" "+QUO+IMAGE_DEST$+QUO,ERR=IMAGE_FILE_ERR
3290 RETURN 
3292 PIP_ERROR: IMAGE_PATH$="~CANCEL~"; RETURN 
3295 ! ****************************************************
3300 BUILD_IMAGE_PATH:! Given IMAGE_PATH$, image_TYPE$, set IMAGE_PATH$, set IMAGE_FILE_NAME$ to name of the file only, return IMAGE_DESC$,IMAGE_DIR$,IMAGE_FORMAT$,SCANNER_OPTIONS$ for use by other programs, if IMAGE_FORMAT$ sent in, it will override the normal IMAGE_FORMAT used
3305 ENTER IMAGE_TYPE$,IMAGE_PATH$,IMAGE_FILE_NAME$,IMAGE_DESC$,IMAGE_DIR$,IMAGE_FORMAT$,SCANNER_OPTIONS$
3308 IF NOT(NUL(IMAGE_FORMAT$)) THEN OVERRIDE_IMAGE_FORMAT$=IMAGE_FORMAT$
3310 IMAGE_FILE_NAME$=IMAGE_PATH$,IMAGE_DESC$="",IMAGE_DIR$="",IMAGE_FORMAT$="",SCANNER_OPTIONS$=""
3315 IF NOT(FN%ISOPEN(%IL_CODES)) THEN PERFORM "ILGFUN;BUILD_DOC_LIST" ! 251100
3330 IF NUL(IMAGE_TYPE$) THEN IMAGE_DIR$=%DATAPATH$ ELSE FIND (%IL_CODES,KEY=PAD(IMAGE_TYPE$,2),DOM=*NEXT)*,IMAGE_DESC$,IMAGE_DIR$,IMAGE_FORMAT$,SCANNER_OPTIONS$,IL0_ONLY_SAVE_LAST$,IL0_ACCESS$,IL0_ADD_FMT_CODE$
3333 IF NOT(NUL(OVERRIDE_IMAGE_FORMAT$)) THEN IMAGE_FORMAT$=OVERRIDE_IMAGE_FORMAT$ ! Normal Format overridden
3334 EXTPOS=POS("."=IMAGE_PATH$,-1); IF EXTPOS=0 THEN {! SSP 307224
3335 IF NUL(IMAGE_FORMAT$) THEN IMAGE_FORMAT$="PDF"
3340 IMAGE_PATH$+="."+LCS(STP(IMAGE_FORMAT$))
3342  }
3345 IF MID(IMAGE_PATH$,2,2)=":\" THEN IMAGE_PATH$=MID(IMAGE_PATH$,4) ELSE IF MID(IMAGE_PATH$,2,1)=":" THEN IMAGE_PATH$=MID(IMAGE_PATH$,3) ! remove dos drive 'eg C:\" from front of the name
3360 IMAGE_PATH$=SUB(SUB(SUB(IMAGE_PATH$,"/","_"),"\","_")," ","_")
3365 IMAGE_FILE_NAME$=IMAGE_PATH$,IMAGE_PATH$=IMAGE_DIR$+DLM+IMAGE_PATH$
3370 IF IL0_ONLY_SAVE_LAST$<>"1" THEN GOSUB MAKE_FILE_UNIQUE
3395 EXIT 
3399 ! *****************************************************
3400 MAKE_FILE_UNIQUE:! Verify that IMAGE_PATH$ is unique, if not add _+counter before extension
3410 U$=""
3415 EXTPOS=POS("."=IMAGE_PATH$,-1); IF EXTPOS<>0 THEN TEST_IMAGE_PATH$=MID(IMAGE_PATH$,1,EXTPOS-1)+U$+MID(IMAGE_PATH$,EXTPOS) ELSE TEST_IMAGE_PATH$+=U$ ! SSP 307224
3450 MFU_CHECK_FILE: MFU=HFN; OPEN (MFU,ERR=MFU_END)TEST_IMAGE_PATH$; CLOSE (MFU)
3455 ! If here, we need to uniqize the file name, insert counter prior to extension 
3460 U$="_"+STR(++U)
3465 EXTPOS=POS("."=IMAGE_PATH$,-1); IF EXTPOS<>0 THEN TEST_IMAGE_PATH$=MID(IMAGE_PATH$,1,EXTPOS-1)+U$+MID(IMAGE_PATH$,EXTPOS) ELSE TEST_IMAGE_PATH$+=U$ ! SSP 307224
3470 GOTO MFU_CHECK_FILE
3480 MFU_END:
3485 IMAGE_PATH$=TEST_IMAGE_PATH$
3495 RETURN 
3499 ! ***********************************************************
3500 WRITE_IL1_RECORD:! Set IL1.IMAGE_KEY$ and write out record and set IMAGE_KEY$, needs IL0_ONLY_SAVE_LAST$ set, IL1_CHANNEL open on IL1 and IL1.TOPFORM_REF_1$ and IL1.TOPFORM_REF_2$ set
3502 ! !!!LINES 3505-3525 CHANGED FOR SSP 216030
3505 IF IL0_ONLY_SAVE_LAST$="1" THEN {! check if already there 
3506 ! Check for ref1 and ref2 already existing, if either found, use them
3508 MATCHING_INDEX$=""
3510 IF NOT(NUL(IL1.TOPFORM_REF_1$)) THEN {
3512 READ (IL1_CHANNEL,KNO=2,KEY=IL1.IMAGE_TYPE$+IL1.TOPFORM_REF_1$,DOM=*NEXT)
3515 IK$=KEY(IL1_CHANNEL,KNO=2,END=3550); IF MID(IK$,1,12)=IL1.IMAGE_TYPE$+IL1.TOPFORM_REF_1$ THEN MATCHING_INDEX$=MID(IK$,13); GOTO CHECK_REF2 ELSE MATCHING_INDEX$=""; GOTO 3550 ! SSP 216030
3516 ! IF POS(IL1.IMAGE_TYPE$="A2")<>0 THEN GOTO 3529 ! SSP 211966
3518 CHECK_REF2:! SSP 216030
3520 IF POS(IL1.IMAGE_TYPE$="A1A2A3A5A8")=0 THEN GOTO SAVE_LAST_DONE ! SSP 216030
3522 READ (IL1_CHANNEL,KNO=2,KEY=IK$)IL_CHKREF2$
3524 IF MID(IL_CHKREF2$,213,30)=IL1.TOPFORM_REF_2$ THEN GOTO SAVE_LAST_DONE ELSE MATCHING_INDEX$=""; GOTO 3515 ! SSP 216030, DBSPT-94670
3526  }
3529 IF NOT(NUL(IL1.TOPFORM_REF_2$)) THEN {
3530 READ (IL1_CHANNEL,KNO=3,KEY=IL1.IMAGE_TYPE$+IL1.TOPFORM_REF_2$,DOM=*NEXT)
3535 IK$=KEY(IL1_CHANNEL,KNO=3,END=*NEXT); IF MID(IK$,1,32)=IL1.IMAGE_TYPE$+IL1.TOPFORM_REF_2$ THEN MATCHING_INDEX$=MID(IK$,33); GOTO SAVE_LAST_DONE
3536  }
3540 SAVE_LAST_DONE:
3545 IF MATCHING_INDEX$<>"" THEN IL1.IMAGE_KEY$=MATCHING_INDEX$; WRITE (IL1_CHANNEL,KEY=IL1.IMAGE_KEY$,REC=IL1$); GOTO WIR_END ! if match, write out and we'redone, if not match then fall thru to get new key
3549  }
3550 ! If here, we need new unique key
3560 PREV_ADDR$=KEL(IL1_CHANNEL,KNO=0,END=*PROCEED); IF PREV_ADDR$="" THEN IL1.IMAGE_KEY$=DIM(5,$00$) ELSE IL1.IMAGE_KEY$=PREV_ADDR$
3565 NEW_KEY: IL1.IMAGE_KEY$=FN%NEXT_SEQ$(IL1.IMAGE_KEY$,5)
3575 WRITE (IL1_CHANNEL,KEY=IL1.IMAGE_KEY$,DOM=NEW_KEY,REC=IL1$)
3580 WIR_END:
3590 IMAGE_KEY$=IL1.IMAGE_KEY$
3595 RETURN 
3599 ! ******************************************************************
7500 REM "Run COMMAND$                                  
7515 SERVER_COMSPEC$=ENV("COMSPEC")
7525 INVOKE HIDE WAIT SERVER_COMSPEC$+" /E:ON /C mkdir "+QUO+DEST_DIR$+QUO
7545 RETURN 
7549 ! ***********************************************************
9999 END 
10000 GRI_AR_INVOICE:! Get related images for AR_INVOICE
10002 ! Gather Invoice info from AR6 or AR8, line info in AR7_INFO$ (each 46 char long)
10003 INV_KEY$=SEARCH_REF$,SAVE_INV_KEY$=INV_KEY$ ! SSP 208586
10005 Z$="01O AR6...  02O AR8... 03O AR7... 04O FS1... 05O FS2... 06O FT3... 07O FT4... "; GOSUB OPEN_GRI_FILES
10008 AR2XAB_OPT$="R" ! 225538
10010 FIND (Z[1],KEY=SEARCH_REF$,DOM=*NEXT)AR6$,GL_LINK,TRANSACTION_LINK; INV_KEY$=AR6$(1,18),SAVE_INV_KEY$=INV_KEY$,ORDER$=AR6$(66,8),AUDIT_NO$=AR6$(102,6),CUST_PO$=AR6$(36,15),SUMM_BILL$=AR6$(160,8); IF NOT(NUL(AR6$(26,10))) THEN INV_KEY$(1,10)=AR6$(26,10) END_IF ; GOTO GOT_INVOICE ! SSP#192703 SSP213924
10012 FIND (Z[2],KEY=SEARCH_REF$,DOM=*NEXT)AR8$,TRANSACTION_LINK; INV_KEY$=AR8$(1,18),SAVE_INV_KEY$=INV_KEY$; ORDER$=AR8$(53,8),AUDIT_NO$=AR8$(112,6),CUST_PO$=AR8$(36,15),SUMM_BILL$=AR8$(124,8); AR2XAB_OPT$+="H"; IF NOT(NUL(AR8$(26,10))) THEN INV_KEY$(1,10)=AR8$(26,10) ! 200864, check for billed from customer code, 225538!SSP#192703!SSP#255066
10015 GOT_INVOICE: CHECK$="",CASH_REC$="",INVOICE$=MID(INV_KEY$,1,17)+" " ! use only the first 7 of invoice number
10019 DIM AR7[2]; CALL "AR2XAB",X3$,X4$,Z[3],SAVE_INV_KEY$,TRANSACTION_LINK,AR7$,AR7{ALL},FLAG$,SEQ$,AR2XAB_OPT$ ! 225538!SSP#192703
10020 WHILE FLAG$<>"NONE"
10022 CHECK$+=SAVE_INV_KEY$(1,10)+AR7$(26,8),CASH_REC$+=AR7$(34,6) ! SSP#192703
10023 CALL "AR2XAB",X3$,X4$,Z[3],INV_KEY$,TRANSACTION_LINK,AR7$,AR7{ALL},FLAG$,SEQ$,AR2XAB_OPT$ ! 225538
10024 WEND 
10030 ! Get order information
10032 DIM FS1$(350); FS1$(6,10)=INV_KEY$(1,10),FS1$(118,8)=ORDER$; IF NUL(CUST_PO$) THEN CUST_PO$=STP(ORDER$,0,"0")
10035 ORD_LINE_CHAN=Z[5]; FIND (Z[4],KEY=ORDER$,DOM=*NEXT)FS1$; GOTO GOT_ORDER
10037 ORD_LINE_CHAN=Z[7]; FIND (Z[6],KEY=ORDER$,DOM=DONE_WITH_ORDER)FS1$ ! Really FT3 info
10040 GOT_ORDER:
10045 ORD_LINE$="",FORM$="",RFQ$=MID(FS1$,23,5)+MID(FS1$,3,3) ! SSP#277609
10049 READ (ORD_LINE_CHAN,KEY=ORDER$,DOM=*NEXT)
10050 NEXT_ORD_LINE:READ (ORD_LINE_CHAN,END=DONE_WITH_ORDER)FS2$; IF FS2$(147,8)<>ORDER$ THEN GOTO DONE_WITH_ORDER
10055 ORD_LINE$+=ORDER$+FS2$(6,3),RFQ$+=STP(FS2$(221,8))
10060 FORM$+=FS2$(161,10)+FS2$(19,10)
10065 GOTO NEXT_ORD_LINE
10070 DONE_WITH_ORDER:
10100 ! Process images now
10102 ! Set IMAGE_ORDER$ and go through so we can easily change the order of the images, perhaps even allow for customization
10104 IMAGE_ORDER$="A00513A7A104A2021203A400A501A9070809R0RBR1R2RDABAC"; REM SSP 190384 SSP207896 SSP 213924
10106 WHILE NOT(NUL(IMAGE_ORDER$))
10108 IMAGE_INDEX$=MID(IMAGE_ORDER$,1,2),IMAGE_ORDER$=MID(IMAGE_ORDER$,3)
10110 SWITCH IMAGE_INDEX$
10112 CASE "A0"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","A0","Y",INVOICE$,17,2,IL1_CHAN,RESULT; BREAK ! Customer Check 186745 !SSP#232203
10114 CASE "05"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","05","Y",CHECK$,18,2,IL1_CHAN,RESULT; BREAK ! Customer Check !SSP#232203
10116 CASE "A7"; CALL "ILGFUN;ADD_TO_RESULT","A7","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Order Acknowledgement to Customer
10118 CASE "A1"; CALL "ILGFUN;ADD_TO_RESULT","A1","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Packing List to Whse
10120 CASE "04"; CALL "ILGFUN;ADD_TO_RESULT","04","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Customer Signed Delivery Ticket
10122 ! CASE "R0"; CALL "ILGFUN;ADD_TO_RESULT","R0","Y",AUDIT_NO$,"",IL1_CHAN,RESULT; BREAK ! Sales journal
10123 CASE "R0"; AUDIT_REF$=AUDIT_NO$; GOSUB IL2_AUDIT; BREAK ! Sales journal
10124 ! CASE "R1"; CALL "ILGFUN;ADD_TO_RESULT","R1","Y",AUDIT_NO$,"",IL1_CHAN,RESULT; BREAK ! Detail Sales journal
10125 CASE "R1"; AUDIT_REF$=AUDIT_NO$; GOSUB IL2_AUDIT; BREAK ! Detail Sales journal
10126 ! CASE "R2"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","R2","Y",CASH_REC$,6,1,IL1_CHAN,RESULT; BREAK ! Cash Receipts Journal
10127 CASE "R2"; AUDIT_REF$=CASH_REC$; GOSUB IL2_AUDIT; BREAK ! Cash Receipts journal 
10128 CASE "A2"; CALL "ILGFUN;ADD_TO_RESULT","A2","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! P/O to Vendor
10130 CASE "02"; CALL "ILGFUN;ADD_TO_RESULT","02","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Vendor Acknowledgement
10132 CASE "03"; CALL "ILGFUN;ADD_TO_RESULT","03","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Receiving Document
10134 CASE "A4"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","A4","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! RFQ to Vendor
10136 CASE "00"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","00","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! Vendor Quote
10138 CASE "A5"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","A5","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! Customer quote
10140 CASE "01"; CALL "ILGFUN;ADD_TO_RESULT","01","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Vendor Invoice
10142 CASE "A9"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","A9","Y",ORD_LINE$,11,2,IL1_CHAN,RESULT; BREAK ! Variable Print Proofs
10144 CASE "07"; CALL "ILGFUN;ADD_TO_RESULT","07","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Form Proof Copy
10146 CASE "08"; CALL "ILGFUN;ADD_TO_RESULT","08","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Form Sample Copy
10148 CASE "09"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","09","Y",FORM$,20,2,IL1_CHAN,RESULT; BREAK ! Item Image
10150 CASE "12"; CALL "ILGFUN;ADD_TO_RESULT","12","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Job Notes
10152 CASE "13"; IF NOT(NUL(ORDER$+CUST_PO$)) THEN CALL "ILGFUN;ADD_TO_RESULT","13","Y","",MID(FS1$,6,10)+CUST_PO$,IL1_CHAN,RESULT; CALL "ILGFUN;ADD_TO_RESULT","13","N","",MID(FS1$,6,10)+MID(FS1$,118,8),IL1_CHAN,RESULT; CALL "ILGFUN;ADD_TO_RESULT","13","N","",MID(FS1$,6,10)+MID(FS1$,120,6),IL1_CHAN,RESULT; BREAK ! Customer P/O, try with custpo from order and with the order number with and without the division as some people use the order number if no customer po,SSP#257101-only if order and cust po available, if invoice is not open or in history, order and cust po will be blank and all entries matching the customer will be returned
10154 CASE "RB"; CALL "ILGFUN;ADD_TO_RESULT","RB","Y",AUDIT_NO$,"",IL1_CHAN,RESULT; BREAK ! Finance Charge journal
10155 CASE "RC"; CALL "ILGFUN;ADD_TO_RESULT","RC","Y",AUDIT_NO$,"",IL1_CHAN,RESULT; BREAK ! Gl Detail Transaction Register
10156 CASE "RD"; CALL "ILGFUN;ADD_TO_RESULT","RD","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Thank you letters              
10158 CASE "AB"; CALL "ILGFUN;ADD_TO_RESULT","AB","Y","",MID(SAVE_INV_KEY$,1,10)+SUMM_BILL$,IL1_CHAN,RESULT; BREAK ! Summ Bill Detail Shipment ssp 213924,259420
10160 CASE "AC"; CALL "ILGFUN;ADD_TO_RESULT","AC","Y","",MID(SAVE_INV_KEY$,1,10)+SUMM_BILL$,IL1_CHAN,RESULT; BREAK ! Summ Bill Detail Shipment ssp 213924,259420
10175 END SWITCH 
10180 WEND 
10195 RETURN 
10199 ! ***************************************************
10200 GRI_AP_INVOICE:! Get related images for AP_INVOICE
10203 INV_KEY$=SEARCH_REF$,SAVE_INV_KEY$=INV_KEY$ ! SSP#288341
10205 ! Gather Invoice info from API or APQ, line info in APJ
10210 Z$="01O API...  02O APQ... 03O APJ... 04O FS1... 05O FS2... 06O FT3... 07O FT4... "; GOSUB OPEN_GRI_FILES
10212 AR2XAB_OPT$="R" ! 225538
10215 FIND (Z[1],KEY=SEARCH_REF$,DOM=*NEXT)API$,TRANSACTION_LINK; INV_KEY$=MID(API$,1,20),AUDIT_NO$=MID(API$,106,6),PO_NUM$=MID(API$,56,9),ORDER$=MID(API$,56,8); GOTO GOT_AP_INVOICE ! SSP#288341
10220 FIND (Z[2],KEY=SEARCH_REF$,DOM=*NEXT)API$,TRANSACTION_LINK; INV_KEY$=MID(API$,1,20),AUDIT_NO$=MID(API$,106,6),PO_NUM$=MID(API$,56,9),ORDER$=MID(API$,56,8); AR2XAB_OPT$+="H" ! 225538  !SSP#288341
10225 GOT_AP_INVOICE:! INV_KEY$=MID(API$,1,20),AUDIT_NO$=MID(API$,106,6),PO_NUM$=MID(API$,56,9),ORDER$=MID(API$,56,8) ! 237258
10227 CHECK$="",DISB$="",MAN_CHECK$=""
10229 DIM APJ[2]; CALL "AR2XAB",X3$,X4$,Z[3],INV_KEY$,TRANSACTION_LINK,APJ$,APJ{ALL},FLAG$,SEQ$,AR2XAB_OPT$ ! 225538
10230 WHILE FLAG$<>"NONE"
10231 TMP$=APJ$(21,15); TMP=POS(":"=TMP$); IF TMP<>0 THEN TMP$=MID(TMP$,TMP+1) END_IF ; IF STP(TMP$,3)<>"" THEN CHECK$+=INV_KEY$(1,10)+STP(TMP$,3) ! SSP#229124
10232 IF APJ$(36,1)="D" THEN DISB$+=APJ$(43,6) ELSE MAN_CHECK$+=APJ$(43,6)
10233 CALL "AR2XAB",X3$,X4$,Z[3],INV_KEY$,TRANSACTION_LINK,APJ$,APJ{ALL},FLAG$,SEQ$,AR2XAB_OPT$ ! 225538
10234 WEND 
10235 ! Get order information - only pick lines w/matching P/O code
10240 ORD_LINE_CHAN=Z[5]; FIND (Z[4],KEY=ORDER$,DOM=*NEXT)FS1$; GOTO GOT_AP_ORDER
10245 ORD_LINE_CHAN=Z[7]; FIND (Z[6],KEY=ORDER$,DOM=DONE_WITH_AP_ORDER)FS1$ ! Really FT3 info
10250 GOT_AP_ORDER:
10255 ORD_LINE$="",FORM$="",RFQ$=MID(FS1$,23,5)+MID(FS1$,3,3) ! SSP#277609
10260 READ (ORD_LINE_CHAN,KEY=ORDER$,DOM=*NEXT)
10265 NEXT_AP_ORD_LINE:READ (ORD_LINE_CHAN,END=DONE_WITH_AP_ORDER)FS2$; IF FS2$(147,8)<>ORDER$ THEN GOTO DONE_WITH_AP_ORDER
10266 IF FS2$(9,1)<>PO_NUM$(9,1) THEN GOTO NEXT_AP_ORD_LINE ! Only get lines for this P/O
10270 ORD_LINE$+=ORDER$+FS2$(6,3),RFQ$+=STP(FS2$(221,8))
10275 ! F NOT(NUL(FS2$(9,1))) THEN PO_NUM$+=ORDER$+FS2$(9,1);!SSP 212190 208706
10280 FORM$+=FS2$(161,10)+FS2$(19,10)
10285 GOTO NEXT_AP_ORD_LINE
10290 DONE_WITH_AP_ORDER:
10295 ! Process images now
10300 ! Set IMAGE_ORDER$ and go through so we can easily change the order of the images, perhaps even allow for customization
10302 IMAGE_ORDER$="01A2A4000203A8A9070809R3R4R5"
10304 WHILE NOT(NUL(IMAGE_ORDER$))
10306 IMAGE_INDEX$=MID(IMAGE_ORDER$,1,2),IMAGE_ORDER$=MID(IMAGE_ORDER$,3)
10308 SWITCH IMAGE_INDEX$
10310 CASE "01"; CALL "ILGFUN;ADD_TO_RESULT","01","Y","",INV_KEY$,IL1_CHAN,RESULT; BREAK ! Vendor Invoices VEND#+inv#
10312 CASE "A2"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","A2","Y",PO_NUM$,9,1,IL1_CHAN,RESULT; BREAK ! SSP#232203
10314 CASE "A8"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","A8","Y",CHECK$,16,2,IL1_CHAN,RESULT; BREAK ! SSP#232203
10320 CASE "R3"; AUDIT_REF$=AUDIT_NO$; GOSUB IL2_AUDIT; BREAK ! Purchases journal SSP 222879
10322 CASE "R4"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","R4","Y",DISB$,6,1,IL1_CHAN,RESULT; BREAK ! Cash Disbursements Journal
10324 CASE "R5"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","R5","Y",MAN_CHECK$,6,1,IL1_CHAN,RESULT; BREAK ! Manual Check Register
10326 CASE "A2"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","A2","Y",PO_NUM$,9,1,IL1_CHAN,RESULT; BREAK ! P/O to Vendor
10328 CASE "02"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","02","Y",PO_NUM$,9,1,IL1_CHAN,RESULT; BREAK ! Vendor Acknowledgement
10330 CASE "03"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","03","Y",PO_NUM$,9,1,IL1_CHAN,RESULT; BREAK ! Receiving Document
10332 CASE "A4"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","A4","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! RFQ to Vendor
10334 CASE "00"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","00","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! Vendor Quote
10338 CASE "01"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","01","Y",PO_NUM$,9,1,IL1_CHAN,RESULT; BREAK ! Vendor Invoice
10340 CASE "A9"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","A9","Y",ORD_LINE$,11,2,IL1_CHAN,RESULT; BREAK ! Variable Print Proofs
10342 CASE "07"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","07","Y",PO_NUM$,9,1,IL1_CHAN,RESULT; BREAK ! Form Proof Copy
10344 CASE "08"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","08","Y",PO_NUM$,9,1,IL1_CHAN,RESULT; BREAK ! Form Sample Copy
10346 CASE "09"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","09","Y",FORM_CODE$,20,2,IL1_CHAN,RESULT; BREAK ! Item Image
10375 END SWITCH 
10380 WEND 
10395 RETURN 
10399 ! ***************************************************
10400 GRI_RFQ:! Get images for VENDOR_RFQ
10404 Z$="01O QSA... 02O QSB... "; GOSUB OPEN_GRI_FILES
10405 IMAGE_ORDER$="A40013A509"; RFQ$=SEARCH_REF$
10406 FORM_CODE$="",CUST_PO$=""; FIND (Z[1],KEY=RFQ$,DOM=GOT_RFQ)QSA$; CUST_PO$=MID(QSA$,440,15); READ (Z[2],KEY=RFQ$,DOM=*NEXT)
10407 READ (Z[2],END=GOT_RFQ)QSB$; IF MID(QSB$,150,8)=RFQ$ THEN FORM_CODE$+=QSA$(10,10)+QSB$(10,10); GOTO *SAME
10410 GOT_RFQ:WHILE NOT(NUL(IMAGE_ORDER$))
10415 IMAGE_INDEX$=MID(IMAGE_ORDER$,1,2),IMAGE_ORDER$=MID(IMAGE_ORDER$,3)
10420 SWITCH IMAGE_INDEX$
10425 CASE "00"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","00","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! Vendor Quote
10430 CASE "A4"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","A4","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! RFQ to Vendor
10435 CASE "A5"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","A5","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! Customer quote
10448 CASE "09"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","09","Y",FORM_CODE$,20,2,IL1_CHAN,RESULT; BREAK ! Item Image
10450 CASE "13"; CALL "ILGFUN;ADD_TO_RESULT","13","Y","",CUST_PO$,IL1_CHAN,RESULT; BREAK ! Customer P/O
10475 END SWITCH 
10480 WEND 
10495 RETURN 
10499 ! *******************************************************
10500 GRI_ORDER: PO_SEARCH=0,ITEM_SEARCH=0; GOTO GRI_O_START ! Get related images for  ORDER
10501 GRI_PO: PO_SEARCH=1,ITEM_SEARCH=0; GOTO GRI_O_START ! Get related images for Purchase order
10504 GRI_O_START:IF PO_SEARCH THEN ORDER$=MID(SEARCH_REF$,1,8) ELSE ORDER$=SEARCH_REF$
10505 Z$="04O FS1... 05O FS2... 06O FT3... 07O FT4... "; GOSUB OPEN_GRI_FILES
10510 GRI_O_FIND:! Get order information
10515 ORD_LINE_CHAN=Z[5]; SET_PARAM 'XI'; FIND (Z[4],KEY=ORDER$,KNO=0,DOM=*NEXT)FS1$; SET_PARAM 'XI'=0; GOTO GOT_ORDER_REC ! SSP250171 jdf
10516 SET_PARAM 'XI'=0 ! SSP250171 jdf
10517 ORD_LINE_CHAN=Z[7]; FIND (Z[6],KEY=ORDER$,KNO=0,DOM=ORDER_DONE)FS1$ ! Really FT3 info
10520 GOT_ORDER_REC:
10524 IF NOT(ITEM_SEARCH) THEN FORM$="" ! if ITEM_SEARCH then FORM$ is already set
10525 ORD_LINE$="",CUST_PO$=MID(FS1$,28,15),RFQ$=MID(FS1$,23,5)+MID(FS1$,3,3) ! SSP#277609
10529 READ (ORD_LINE_CHAN,KEY=ORDER$,DOM=*NEXT)
10530 NEXT_ORD_REC:READ (ORD_LINE_CHAN,END=ORDER_DONE)FS2$; IF FS2$(147,8)<>ORDER$ THEN GOTO ORDER_DONE
10535 ORD_LINE$+=ORDER$+FS2$(6,3),RFQ$+=STP(FS2$(221,8))
10540 IF NOT(ITEM_SEARCH) THEN FORM$+=FS2$(161,10)+FS2$(19,10) ! if ITEM_SEARCH we have already set the form code
10545 GOTO NEXT_ORD_REC
10550 ORDER_DONE:
10560 IF NUL(CUST_PO$) THEN CUST_PO$=STP(ORDER$,0,"0") ! 257101
10600 ! Process images now
10602 ! Set IMAGE_ORDER$ and go through so we can easily change the order of the images, perhaps even allow for customization
10604 IF PO_SEARCH THEN IMAGE_ORDER$="A2AA150002131203A104A4A501A9070809" ELSE IF ITEM_SEARCH THEN IMAGE_ORDER$="090708A7A104A202131203A400A501A9A3" ELSE IMAGE_ORDER$="A7A104A2AA1502131203A400A501A9070809RDA3"; REM SSP 190384 SSP207896 WO 239078
10606 WHILE NOT(NUL(IMAGE_ORDER$))
10608 IMAGE_INDEX$=MID(IMAGE_ORDER$,1,2),IMAGE_ORDER$=MID(IMAGE_ORDER$,3)
10610 SWITCH IMAGE_INDEX$
10616 CASE "A7"; CALL "ILGFUN;ADD_TO_RESULT","A7","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Order Acknowledgement to Customer
10618 CASE "A1"; CALL "ILGFUN;ADD_TO_RESULT","A1","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Packing List to Whse
10620 CASE "04"; CALL "ILGFUN;ADD_TO_RESULT","04","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Customer Signed Delivery Ticket
10628 CASE "A2"; CALL "ILGFUN;ADD_TO_RESULT","A2","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! P/O to Vendor
10630 CASE "02"; CALL "ILGFUN;ADD_TO_RESULT","02","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Vendor Acknowledgement
10632 CASE "03"; CALL "ILGFUN;ADD_TO_RESULT","03","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Receiving Document
10634 CASE "A4"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","A4","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! RFQ to Vendor
10636 CASE "00"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","00","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! Vendor Quote
10638 CASE "A5"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","A5","Y",RFQ$,8,1,IL1_CHAN,RESULT; BREAK ! Customer quote
10640 CASE "01"; CALL "ILGFUN;ADD_TO_RESULT","01","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Vendor Invoice
10642 CASE "A9"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","A9","Y",ORD_LINE$,11,2,IL1_CHAN,RESULT; BREAK ! Variable Print Proofs
10644 CASE "07"; CALL "ILGFUN;ADD_TO_RESULT","07","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Form Proof Copy
10646 CASE "08"; CALL "ILGFUN;ADD_TO_RESULT","08","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Form Sample Copy
10648 CASE "09"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","09","Y",FORM$,20,2,IL1_CHAN,RESULT; BREAK ! Item Image
10650 CASE "12"; CALL "ILGFUN;ADD_TO_RESULT","12","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Job Note
10651 CASE "RD"; CALL "ILGFUN;ADD_TO_RESULT","RD","Y",ORDER$,"",IL1_CHAN,RESULT; BREAK ! Thank you letters SSP 190384
10652 CASE "13"; CALL "ILGFUN;ADD_TO_RESULT","13","Y","",MID(FS1$,6,10)+CUST_PO$,IL1_CHAN,RESULT; CALL "ILGFUN;ADD_TO_RESULT","13","N","",MID(FS1$,6,10)+MID(FS1$,118,8),IL1_CHAN,RESULT; CALL "ILGFUN;ADD_TO_RESULT","13","N","",MID(FS1$,6,10)+MID(FS1$,120,6),IL1_CHAN,RESULT; BREAK ! Customer P/O, try with custpo from order and with the order number with and without the division as some people use the order number if no customer po
10654 CASE "A3"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","A3","Y",FORM$,20,2,IL1_CHAN,RESULT; BREAK ! Reorder Notice  SSP 207896
10655 CASE "AA"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","AA","Y",ORDER$,MAX(LEN(ORDER$),8),1,IL1_CHAN,RESULT; BREAK ! Receiving Report # ! WO 239078
10656 CASE "15"; CALL "ILGFUN;ADD_MULTIPLE_ITEMS","15","Y",ORDER$,MAX(LEN(ORDER$),8),1,IL1_CHAN,RESULT; BREAK ! Completed Receiving Report # ! WO 239078
10675 END SWITCH 
10680 WEND 
10695 RETURN 
10699 ! ******************************************************
10700 GRI_AUDIT_REPORT:! Get images for audit report SEARCH_REF$ should be IMAGE_TYPE$+$00$+start audit #+$00$+end audit #+$00$+start_date+$00$+end_date$+$00$
10705 Z$=""; GOSUB OPEN_GRI_FILES
10715 SEARCH$=SEARCH_REF$
10718 IMAGE_TYPE$=FN%NEXT_FROM_LIST$(SEARCH$,$00$); SEARCH$=MID(SEARCH$,LEN(IMAGE_TYPE$)+2)
10720 AUDIT_START$=FN%NEXT_FROM_LIST$(SEARCH$,$00$); SEARCH$=MID(SEARCH$,LEN(AUDIT_START$)+2)
10725 AUDIT_END$=FN%NEXT_FROM_LIST$(SEARCH$,$00$); SEARCH$=MID(SEARCH$,LEN(AUDIT_END$)+2)
10730 DATE_START$=FN%NEXT_FROM_LIST$(SEARCH$,$00$); SEARCH$=MID(SEARCH$,LEN(DATE_START$)+2)
10735 DATE_END$=FN%NEXT_FROM_LIST$(SEARCH$,$00$); SEARCH$=MID(SEARCH$,LEN(DATE_END$)+2)
10750 CALL "ILGFUN;ADD_TO_RESULT",IMAGE_TYPE$,"Y",AUDIT_START$+$00$+AUDIT_END$,DATE_START$+$00$+DATE_END$,IL1_CHAN,RESULT
10795 RETURN 
10799 ! **********************************************************
10800 GRI_CUSTOMER_NOTE:! Get images for a customer note
10805 Z$=""; GOSUB OPEN_GRI_FILES
10850 CALL "ILGFUN;ADD_TO_RESULT","10","Y",SEARCH_REF$,"",IL1_CHAN,RESULT
10855 CALL "ILGFUN;ADD_TO_RESULT","06","Y",SEARCH_REF$,"",IL1_CHAN,RESULT; REM SSP 213604
10856 CALL "ILGFUN;ADD_TO_RESULT","14","Y",SEARCH_REF$,"",IL1_CHAN,RESULT ! 230830
10895 RETURN 
10899 ! ***********************************************************
10900 GRI_VENDOR_NOTE:! Get images for a vendor note
10905 Z$=""; GOSUB OPEN_GRI_FILES
10950 CALL "ILGFUN;ADD_TO_RESULT","11","Y",SEARCH_REF$,"",IL1_CHAN,RESULT
10995 RETURN 
10999 ! ***********************************************************
11000 GRI_ITEM:! Get images for items
11001 ! will setup FORM$ and get ORDER$ if FM1 entry found and set from last order, then goto order processing, set ITEM_SEARCH to 1 to control order and flag what we are doing
11005 Z$="01O FM1... 04O FS1... 05O FS2... 06O FT3... 07O FT4... "; GOSUB OPEN_GRI_FILES
11010 FORM$=SEARCH_REF$,ITEM_SEARCH=1
11015 ORDER$=""; FIND (Z[1],KEY=FORM$,DOM=*NEXT)FM1$; IF NOT(NUL(MID(FM1$,132,8))) THEN ORDER$=MID(FM1$,132,8) ! Get last order number
11080 GOTO GRI_O_FIND ! go off to GRI_ORDER to get rest of order info, we won't be coming back here
11095 RETURN 
11099 ! **********************************************
11100 GRI_RECV_REPORT:! Get images for a receiving report - WO 239078
11105 Z$=""; GOSUB OPEN_GRI_FILES
11140 CALL "ILGFUN;ADD_TO_RESULT","AA","Y","",SEARCH_REF$,IL1_CHAN,RESULT
11150 CALL "ILGFUN;ADD_TO_RESULT","15","Y","",SEARCH_REF$,IL1_CHAN,RESULT
11195 RETURN 
11199 ! ***********************************************************
11200 GRI_SUMMARY_BILL:! Get images for a summary bill and/or detail shipment SSP 213924
11205 Z$=""; GOSUB OPEN_GRI_FILES
11240 CALL "ILGFUN;ADD_TO_RESULT","AB","Y","",SEARCH_REF$,IL1_CHAN,RESULT
11250 CALL "ILGFUN;ADD_TO_RESULT","AC","Y","",SEARCH_REF$,IL1_CHAN,RESULT
11295 RETURN 
11299 ! ***********************************************************
12000 MULTIPLE_PAGE_CHK:! This routine will create new IL1 record for each page of a multiple page vendor cheque but will use the last valid cheque number as REF2. This will allow for future IL lookups to display all pages associated with that cheque.
12005 ENTER CONT_IMG$,VNDR$
12010 IF NUL(CONT_IMG$) THEN EXIT 
12012 CREATE_DTE$=DTE(JUL(0,0,0):"YYYYMMDD"),CREATE_DTE$=CHR(NUM(CREATE_DTE$(1,3))-125)+CREATE_DTE$(4)
12015 IF IL1_CHANNEL=0 THEN IL1_CHANNEL=HFN; OPEN (IL1_CHANNEL,IOL=*)"IL1"+%C$
12018 DIM IL1$:IOL(IL1_CHANNEL)
12020 FOR XX=1 TO LEN(CONT_IMG$) STEP 6
12025 IF CONT_IMG$(XX,6)=%IL_ADD_TF1$ THEN EXITTO 12098
12030 IL_REF1$=PAD(CONT_IMG$(XX,6),10)
12040 IL_CCHK$=%IL_ADD_DOC_TYPE$+IL_REF1$
12050 READ (IL1_CHANNEL,KNO=2,KEY=IL_CCHK$,DOM=*NEXT)
12060 ILC$=KEY(IL1_CHANNEL,KNO=2,END=*NEXT); READ (IL1_CHANNEL,KNO=2,KEY=ILC$,REC=IL1$)
12070 IF IL1.IMAGE_TYPE$=%IL_ADD_DOC_TYPE$ AND IL1.TOPFORM_REF_1$=IL_REF1$ THEN GOTO *NEXT ELSE NEXT XX ! SSP 244541
12075 IF (IL1.CREATED_ON$=CREATE_DTE$) AND (IL1.TOPFORM_REF_2$(1,10)=VNDR$) THEN GOTO *NEXT ELSE GOTO 12060 ! SSP 244541
12080 IL1.TOPFORM_REF_2$(11,10)=PAD(%IL_ADD_TF1$,10)
12085 ! L1.CREATED_AT$=DTE(0:"%Hz%mz%sz") ! SSP 244541
12090 GOSUB 3550
12095 NEXT XX
12098 CLOSE (IL1_CHANNEL,ERR=*NEXT)
12999 EXIT 
13000 IL2_AUDIT:! SSP 208706 This routine will check each audit number to see if exists in new IL2 file. 
13002 AUDIT_SIZE=6,IL2_CHAN=0
13010 AUDIT_COUNT=INT(LEN(AUDIT_REF$)/AUDIT_SIZE,ERR=IL2_AUDIT_END)
13015 IF AUDIT_COUNT=0 THEN GOTO IL2_AUDIT_END
13017 DESC$="No Description"; FIND (%IL_CODES,KEY=IMAGE_INDEX$,DOM=*NEXT)*,DESC$,*,*,*,*,ACCESS_LEVEL$ ! 245779
13018 IF LEN(X3$)<300 THEN IF LEN(%X3$)>45 THEN X3$=%X3$ ELSE CALL "ZZCOMP","","","",X3$,X4$,"",-1,0,0 ! 245779
13019 IF X3$(43,2)<>"SU" AND NUM(X3$(43,2))<NUM(ACCESS_LEVEL$) THEN GOTO IL2_AUDIT_END ! 245779
13020 FOR AUDIT_IDX=1 TO AUDIT_COUNT
13040 AUDIT_VAL$=MID(AUDIT_REF$,(AUDIT_IDX-1)*AUDIT_SIZE+1,AUDIT_SIZE)
13050 AUDIT_KEY$=IMAGE_INDEX$+AUDIT_VAL$+PAD(INV_KEY$,30)
13052 AUDIT_OK=0
13060 CALL "ILGAUD; FIND_AUDIT",AUDIT_KEY$,IL1_REF_KEY$,IL2_CHAN,AUDIT_OK
13070 IF NOT(AUDIT_OK) THEN CALL "ILGFUN;ADD_TO_RESULT",IMAGE_INDEX$,"Y",AUDIT_VAL$,"",IL1_CHAN,RESULT; GOTO NEXT_AUDIT
13080 AUDIT_OK=0
13090 CALL "ILGFUN;ADD_TO_RESULT",IMAGE_INDEX$,"Y","","",IL1_CHAN,RESULT
13100 FIND (IL1_CHAN,KNO=0,KEY=IL1_REF_KEY$,DOM=13070)IL1$
13110 SEQ=0,SEQ$="000",SEQ$=KEL(RESULT,ERR=*NEXT),SEQ$=MID(SEQ$,1,LEN(SEQ$)-1),SEQ$=FN%NEXT_SEQ$(SEQ$,5) ! SEQ=NUM(SEQ$,ERR=*NEXT)+1 ! set seq based on last key currently in file; 273041 - Use alphanumeric seq
13120 WRITE (RESULT,KEY=SEQ$+"D")IL1$
13200 NEXT_AUDIT:
13210 NEXT AUDIT_IDX
13990 IL2_AUDIT_END:
13992 CLOSE (IL2_CHAN,ERR=*NEXT)
13999 RETURN 
15000 COMBINE_PDF_SETUP:! SSP 307332
15005 ! This common routine will receive a batch number, the opened memory file of all pdf's printed,the DOC_type to find the base directory to store the combined pdf
15010 ENTER BATCH_NO$,MEM_FL,DOC_TYPE$,KYLEN
15020 IL_CHL=HFN; OPEN (IL_CHL,ERR=PDF_ERROR)"IL0"+%C$
15030 FIND (IL_CHL,KEY=DOC_TYPE$,DOM=PDF_ERROR)IL_REC$; CLOSE (IL_CHL)
15040 BASE_DIR$=STP(MID(IL_REC$,3,128),2),PDF_DIR$=BASE_DIR$+"/COMBINED/"
15050 TEST_CHAN=HFN; OPEN (TEST_CHAN,ERR=*NEXT)PDF_DIR$; CLOSE (TEST_CHAN); GOTO SETUP_PDF
15060 IF POS("MS"=SYS) THEN DIRECTORY "[WDX]"+PDF_DIR$ ELSE INVOKE "mkdir -p "+PDF_DIR$+" >/dev/null"
15100 SETUP_PDF:
15110 ! Open the new "I1" device and get the file name
15115 DEVICE$="*pdfbatch*" ! ZZX-C4 Printer Device and Driver that will batch the PDF files (see*dev/tf_pdfbatch)
15120 DIM PKY$(KYLEN)
15130 READ (MEM_FL,KEY="",DOM=*NEXT)
15150 READ_PDF_LIST:
15160 KM$=KEY(MEM_FL,END=CLOSE_PDF); IF KM$(1,KYLEN)<>PKY$ THEN GOSUB SETUP_PDF_BATCH; PKY$=KM$(1,KYLEN)
15170 READ (MEM_FL,KEY=KM$)REC$
15180 PRINT (I1CHAN)REC$+" ",
15190 GOTO READ_PDF_LIST
15200 CLOSE_PDF:
15210 CLOSE (I1CHAN)
15220 CLOSE (MEM_FL,ERR=*NEXT)
15230 EXIT 
15250 PDF_ERROR:
15260 CLOSE (IL_CHL,ERR=*NEXT)
15270 EXIT 
15299 ! 
15300 SETUP_PDF_BATCH:
15310 CLOSE (I1CHAN,ERR=*NEXT)
15320 BTCH_NO$=BATCH_NO$; IF KYLEN>0 THEN BTCH_NO$=STP(KM$(1,KYLEN),2)+"_"+BATCH_NO$
15330 FL_NAME$=BTCH_NO$+"_"+DTE(0:"%Yz%Mz%Dz%Hz%mz%s")+".pdf"
15340 BATCH$=PDF_DIR$+FL_NAME$ ! The name of the combined batch file
15350 OPEN (HFN,OPT=BATCH$)DEVICE$; I1CHAN=LFO
15360 RETURN 
15399 ! 
56000 REM "190384-Make thank you letters email - they fax either Cust or   
56002 REM "197202-Does the Credit Card Processing Report get saved to the     
56005 REM "200864-No option to view invoices in A/R, S1, #4. Cust# 02-88000
56010 REM "217412-When running checks Image Library only saves the last       
56012 REM "207896-Is I/L ready to save reorder notice images?                 
56014 REM "208706-Audit control numbers are duplicating from last year        
56016 REM "221478-Multiple page invoices are not being saved properly in      
56018 REM "222879-An audit journal with the same number and 2                 
56019 REM "225538-Cash Receipts Journals not attached to invoice history
56020 REM "208586-Support for displaying multiple related Image types
56021 REM "230830-Create a new Image Library type, Customer Tax Form.
56022 REM "232203-Check 1002 is a rent check and its attaching to everything  
56023 REM "211234-Designate labels for up to 3 versions of Image Type
56024 REM "216198-Need to add Kit Production report to Image Library          
56025 REM "237258-Image Library : Add ability to search for images in GUI.    
56026 REM "239078-Receiving Report form, flexible format/printing programs,   
56028 REM "244750-Inbound Freight processing in the Customer Invoicing Gateway
56030 REM "245779-Access level security issue, grid display of images broken
56032 REM "244541-Still not getting an image of all the pages on the checks.  
56034 REM "246719-Performance issue in file transfer caused by progress bar
56036 REM "250171-Issue trying to look at images for an extracted order       
56038 REM "213924-Summary bill in Image Library - isn't automatic archive     
56039 REM "255066-Summary bill in invoice history lists all summ bill 
56040 REM "257872-Add the Physical Count Variance Report and Update to        
56041 REM "257101-Getting locked up in DB/d when viewing images in            
56042 REM "245558-Add cash receipts gateway journal to Image Library  
56043 REM "265894-Support for indexing and viewing resources using http(s)
56044 REM "268302-Add Cash Disbursements GW Journal to Image Library.         
56045 REM "273041-View images for order 01-530240 for customer 01-96200 - get 
56046 REM "277609-When you use the Vendor Quote Image Type and attach it to an
56047 REM "288341-Comp 603: Get a program exception in View Image for Image   
56048 REM "307190-Improve performance in Image Library                        
56049 REM "307224-Error when saving certain document types in Image Library   
56050 REM "DBSPT-94670 - ERR 47 during lookup                              
56051 REM "307332-Create combined pdf of checks in a batch                    
56052 REM "307395-DBD-252: Image Lib file transfer speed improvement          
