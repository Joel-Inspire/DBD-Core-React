0010 ! BRGUT0 - Bank Detail Inquiry Utility
0035 REM "5.6 - 02/27/08 - 12.128888 - tma - SSP# 210955
0037 REM "210955-In Bank Rec GUI after you select your bank code, item type, 
0040 REM "Copyright 2008 DemandBridge, Inc.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "BRGUT0","../BRG/BR.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0155 MSGBOX "Maintain History Detail (N=Active File)","Confirmation Please","?,YESNO",RESULT$
0156 IF RESULT$="YES" THEN _FILE_NAME$="BR2"+%C$ ELSE _FILE_NAME$="BR0"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0182 _ZYB=HFN; OPEN (_ZYB,IOL=*,REC=_ZYB$)"ZYB"+%C$
0183 _GL1=HFN; OPEN (_GL1,IOL=*,REC=_GL1$)"GL1"+%C$
0184 _AP4=HFN; OPEN (_AP4,IOL=*,REC=_AP4$)"AP4"+%C$
0185 _ZZP=HFN; OPEN (_ZZP)"ZZPARM"; READ RECORD (_ZZP,KEY=FID(0)+"      ")X3$
0186 IF X3$(43,2)<="99" THEN PROCESS "BRGUT0.3","../BRG/BR.EN"
0187 _ZYBB=HFN; OPEN (_ZYBB)"ZYB"+%C$
0199 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=4
0430 DIM _KEYS$[1:4]; _KEYS$[1]="BANK_CODE$",_KEYS$[2]="ITEM_TYPE$",_KEYS$[3]="CHECK_NUM$",_KEYS$[4]="SEQ_NUM$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0535 GOSUB LOAD_BANK_CODE
0537 IF X3$(43,2)="SU" AND _ENABLE_FLG<0 THEN CALL "*wingrp;UNLOCK",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0700 ! 700 - Set up tabbing between folders
0710 INIT_FOLDER:
0720 GOSUB ENABLE_GROUPS
0730 IF _ENABLE_FLG<>_KEY1 THEN IF TAB_FLG$="<" THEN NEXT_ID=_LAST_TAB ELSE NEXT_ID=_FIRST_TAB
0740 EXIT 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1011 IF SEQ_NUM$="" THEN SEQ_NUM$="  "
1012 IF ID$="BANK_CODE" THEN BANK_CODE$=MID(BANK_CODE$,1,3),BANK_CODE$=PAD(BANK_CODE$,3," "),BANK_CODE$=BANK_CODE$(1,3)
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1045 IF ID$<>"SEQ_NUM" THEN RETURN 
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1075 IF MID(X3$,43,2)="SU" THEN CALL "*WINGRP;UNLOCK",FIELDS.GRP$
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1215 IF MID(X3$,43,2)<>"SU" THEN GOTO 1250
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1280 NEXT_FOLDER=_FIRST_FOLDER,NEXT_ID=BANK_CODE.CTL
1282 IF MID(X3$,43,2)="SU" THEN NEXT_ID=PAYEE_MEMO.CTL; GOTO *RETURN
1285 PROCESS "BRGUT0.2","../BRG/BR.EN"
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3025 IF MID(X3$,43,2)="SU" THEN CALL "*WINGRP;UNLOCK",FIELDS.GRP$; CALL "*WINGRP;ENABLE",BUTTONS.GRP$; CALL "*WINGRP;ENABLE",FIELDS.GRP$
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3065 GOSUB PROCESS_LINK_FILES; GOSUB READ_ZYB
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR; _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
3360 REFRESH_FLG=1
3365 IF MID(X3$,43,2)="SU" THEN CALL "*WINGRP;LOCK",FIELDS.GRP$; CALL "*WINGRP;DISABLE",BUTTONS.GRP$; CALL "*WINGRP;DISABLE",FIELDS.GRP$
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=BANK_CODE.CTL,_FIRST_FIELD=PAYEE_MEMO.CTL,_FIRST_FOLDER=FLDR.BRGUT0.1.CTL
3820 IF CHANGE_FLG=0 THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3845 IF MID(X3$,43,2)="SU" THEN CALL "*WINGRP;LOCK",FIELDS.GRP$; CALL "*WINGRP;DISABLE",BUTTONS.GRP$; CALL "*WINGRP;DISABLE",FIELDS.GRP$
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 ITEM_AMT$=STR(ITEM_AMT)
10030 CLEARED_FOR$=STR(CLEARED_FOR)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="ITEM_AMT",_X=ITEM_AMT.CTL,ITEM_AMT=NUM(ITEM_AMT$,ERR=NON_NUMERIC)
11030 _X$="CLEARED_FOR",_X=CLEARED_FOR.CTL,CLEARED_FOR=NUM(CLEARED_FOR$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN ! BANK_CODE$=""
13030 IF _CLR_FLG$="R" THEN ITEM_TYPE$=""
13040 IF _CLR_FLG$="R" THEN CHECK_NUM$=""
13050 PAYEE_MEMO$=""
13060 ITEM_DATE$=""
13070 RELEASE_DATE$=""
13080 FY_ACCTPD_CLEARED$=""
13090 GL_ACCT$="",ML_GL_DESC$=""
13100 CLEARED$=""
13110 MEMO_FIELD$=""
13120 FYEAR_ACCTPD_BOOKED$=""
13130 MANUAL_CHECK$=""
13140 BANK_ERROR$=""
13150 VEND_DIV$=""
13160 VEND_CODE$="",VENDOR$="",VEND_NAME$=""
13170 ACTION_FLD$=""
13180 IF _CLR_FLG$="R" THEN SEQ_NUM$=""
13190 CHECK_TYPE$=""
13200 FY_ACCTPD_DISCREP$=""
13210 ITEM_AMT=0
13220 CLEARED_FOR=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14030 IF _ENABLE_FLG=2 THEN CALL "*wingrp;Enable",KEY2.GRP$; NEXT_ID=ITEM_TYPE.CTL ELSE CALL "*wingrp;Disable",KEY2.GRP$
14040 IF _ENABLE_FLG=3 THEN CALL "*wingrp;Enable",KEY3.GRP$; NEXT_ID=CHECK_NUM.CTL ELSE CALL "*wingrp;Disable",KEY3.GRP$
14050 IF _ENABLE_FLG=4 THEN CALL "*wingrp;Enable",KEY4.GRP$; NEXT_ID=SEQ_NUM.CTL ELSE CALL "*wingrp;Disable",KEY4.GRP$
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;LOCK",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF X3$(43,2)="SU" AND _ENABLE_FLG<0 THEN CALL "*wingrp;UNLOCK",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$; CALL "*WINGRP;ENABLE",FIELDS.GRP$ ! SSP#210955
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(21,"N")
15030 IF _ORIG.BANK_CODE$=_CUR.BANK_CODE$ OR BANK_CODE$=_CUR.BANK_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.BANK_CODE$=BANK_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("BANK_CODE")+" = "+_CUR.BANK_CODE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BANK_CODE")+" = "+_CUR.BANK_CODE$
15040 IF _ORIG.ITEM_TYPE$=_CUR.ITEM_TYPE$ OR ITEM_TYPE$=_CUR.ITEM_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_TYPE$=ITEM_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_TYPE")+" = "+_CUR.ITEM_TYPE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_TYPE")+" = "+_CUR.ITEM_TYPE$
15050 IF _ORIG.CHECK_NUM$=_CUR.CHECK_NUM$ OR CHECK_NUM$=_CUR.CHECK_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.CHECK_NUM$=CHECK_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("CHECK_NUM")+" = "+_CUR.CHECK_NUM$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CHECK_NUM")+" = "+_CUR.CHECK_NUM$
15060 IF _ORIG.PAYEE_MEMO$=_CUR.PAYEE_MEMO$ OR PAYEE_MEMO$=_CUR.PAYEE_MEMO$ THEN GOTO *NEXT ELSE IF _ORIG.PAYEE_MEMO$=PAYEE_MEMO$ THEN _CHG2$=_CHG2$+SEP+MSG("PAYEE_MEMO")+" = "+_CUR.PAYEE_MEMO$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PAYEE_MEMO")+" = "+_CUR.PAYEE_MEMO$
15070 IF _ORIG.ITEM_DATE$=_CUR.ITEM_DATE$ OR ITEM_DATE$=_CUR.ITEM_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.ITEM_DATE$=ITEM_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_DATE")+" = "+_CUR.ITEM_DATE$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_DATE")+" = "+_CUR.ITEM_DATE$
15080 IF _ORIG.RELEASE_DATE$=_CUR.RELEASE_DATE$ OR RELEASE_DATE$=_CUR.RELEASE_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.RELEASE_DATE$=RELEASE_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("RELE_D")+" = "+_CUR.RELEASE_DATE$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RELE_D")+" = "+_CUR.RELEASE_DATE$
15090 IF _ORIG.FY_ACCTPD_CLEARED$=_CUR.FY_ACCTPD_CLEARED$ OR FY_ACCTPD_CLEARED$=_CUR.FY_ACCTPD_CLEARED$ THEN GOTO *NEXT ELSE IF _ORIG.FY_ACCTPD_CLEARED$=FY_ACCTPD_CLEARED$ THEN _CHG2$=_CHG2$+SEP+MSG("FYEA_A_C")+" = "+_CUR.FY_ACCTPD_CLEARED$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FYEA_A_C")+" = "+_CUR.FY_ACCTPD_CLEARED$
15100 IF _ORIG.GL_ACCT$=_CUR.GL_ACCT$ OR GL_ACCT$=_CUR.GL_ACCT$ THEN GOTO *NEXT ELSE IF _ORIG.GL_ACCT$=GL_ACCT$ THEN _CHG2$=_CHG2$+SEP+MSG("GL_ACCT")+" = "+_CUR.GL_ACCT$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("GL_ACCT")+" = "+_CUR.GL_ACCT$
15110 IF _ORIG.CLEARED$=_CUR.CLEARED$ OR CLEARED$=_CUR.CLEARED$ THEN GOTO *NEXT ELSE IF _ORIG.CLEARED$=CLEARED$ THEN _CHG2$=_CHG2$+SEP+MSG("CLEARED")+" = "+_CUR.CLEARED$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CLEARED")+" = "+_CUR.CLEARED$
15120 IF _ORIG.MEMO_FIELD$=_CUR.MEMO_FIELD$ OR MEMO_FIELD$=_CUR.MEMO_FIELD$ THEN GOTO *NEXT ELSE IF _ORIG.MEMO_FIELD$=MEMO_FIELD$ THEN _CHG2$=_CHG2$+SEP+MSG("MEMO_FIELD")+" = "+_CUR.MEMO_FIELD$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MEMO_FIELD")+" = "+_CUR.MEMO_FIELD$
15130 IF _ORIG.FYEAR_ACCTPD_BOOKED$=_CUR.FYEAR_ACCTPD_BOOKED$ OR FYEAR_ACCTPD_BOOKED$=_CUR.FYEAR_ACCTPD_BOOKED$ THEN GOTO *NEXT ELSE IF _ORIG.FYEAR_ACCTPD_BOOKED$=FYEAR_ACCTPD_BOOKED$ THEN _CHG2$=_CHG2$+SEP+MSG("FYEA_A_B")+" = "+_CUR.FYEAR_ACCTPD_BOOKED$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FYEA_A_B")+" = "+_CUR.FYEAR_ACCTPD_BOOKED$
15140 IF _ORIG.MANUAL_CHECK$=_CUR.MANUAL_CHECK$ OR MANUAL_CHECK$=_CUR.MANUAL_CHECK$ THEN GOTO *NEXT ELSE IF _ORIG.MANUAL_CHECK$=MANUAL_CHECK$ THEN _CHG2$=_CHG2$+SEP+MSG("MANU_C")+" = "+_CUR.MANUAL_CHECK$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MANU_C")+" = "+_CUR.MANUAL_CHECK$
15150 IF _ORIG.BANK_ERROR$=_CUR.BANK_ERROR$ OR BANK_ERROR$=_CUR.BANK_ERROR$ THEN GOTO *NEXT ELSE IF _ORIG.BANK_ERROR$=BANK_ERROR$ THEN _CHG2$=_CHG2$+SEP+MSG("BANK_ERROR")+" = "+_CUR.BANK_ERROR$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BANK_ERROR")+" = "+_CUR.BANK_ERROR$
15160 IF _ORIG.VEND_DIV$=_CUR.VEND_DIV$ OR VEND_DIV$=_CUR.VEND_DIV$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_DIV$=VEND_DIV$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_DIV")+" = "+_CUR.VEND_DIV$
15170 IF _ORIG.VEND_CODE$=_CUR.VEND_CODE$ OR VEND_CODE$=_CUR.VEND_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.VEND_CODE$=VEND_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VEND_CODE")+" = "+_CUR.VEND_CODE$
15180 IF _ORIG.ACTION_FLD$=_CUR.ACTION_FLD$ OR ACTION_FLD$=_CUR.ACTION_FLD$ THEN GOTO *NEXT ELSE IF _ORIG.ACTION_FLD$=ACTION_FLD$ THEN _CHG2$=_CHG2$+SEP+MSG("ACTI_FLD")+" = "+_CUR.ACTION_FLD$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ACTI_FLD")+" = "+_CUR.ACTION_FLD$
15190 IF _ORIG.SEQ_NUM$=_CUR.SEQ_NUM$ OR SEQ_NUM$=_CUR.SEQ_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.SEQ_NUM$=SEQ_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("SEQ_NUM")+" = "+_CUR.SEQ_NUM$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEQ_NUM")+" = "+_CUR.SEQ_NUM$
15200 IF _ORIG.CHECK_TYPE$=_CUR.CHECK_TYPE$ OR CHECK_TYPE$=_CUR.CHECK_TYPE$ THEN GOTO *NEXT ELSE IF _ORIG.CHECK_TYPE$=CHECK_TYPE$ THEN _CHG2$=_CHG2$+SEP+MSG("CHECK_TYPE")+" = "+_CUR.CHECK_TYPE$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CHECK_TYPE")+" = "+_CUR.CHECK_TYPE$
15210 IF _ORIG.FY_ACCTPD_DISCREP$=_CUR.FY_ACCTPD_DISCREP$ OR FY_ACCTPD_DISCREP$=_CUR.FY_ACCTPD_DISCREP$ THEN GOTO *NEXT ELSE IF _ORIG.FY_ACCTPD_DISCREP$=FY_ACCTPD_DISCREP$ THEN _CHG2$=_CHG2$+SEP+MSG("FYEA_A_D")+" = "+_CUR.FY_ACCTPD_DISCREP$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FYEA_A_D")+" = "+_CUR.FY_ACCTPD_DISCREP$
15220 IF _ORIG.ITEM_AMT=_CUR.ITEM_AMT OR ITEM_AMT=_CUR.ITEM_AMT THEN GOTO *NEXT ELSE IF _ORIG.ITEM_AMT=ITEM_AMT THEN _CHG2$=_CHG2$+SEP+MSG("ITEM_AMT")+" = "+STR(_CUR.ITEM_AMT),_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ITEM_AMT")+" = "+STR(_CUR.ITEM_AMT)
15230 IF _ORIG.CLEARED_FOR=_CUR.CLEARED_FOR OR CLEARED_FOR=_CUR.CLEARED_FOR THEN GOTO *NEXT ELSE IF _ORIG.CLEARED_FOR=CLEARED_FOR THEN _CHG2$=_CHG2$+SEP+MSG("CLEA_F")+" = "+STR(_CUR.CLEARED_FOR),_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CLEA_F")+" = "+STR(_CUR.CLEARED_FOR)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN BANK_CODE$=_CUR.BANK_CODE$
16030 IF _CHG_VAR$(2,1)="Y" THEN ITEM_TYPE$=_CUR.ITEM_TYPE$
16040 IF _CHG_VAR$(3,1)="Y" THEN CHECK_NUM$=_CUR.CHECK_NUM$
16050 IF _CHG_VAR$(4,1)="Y" THEN PAYEE_MEMO$=_CUR.PAYEE_MEMO$
16060 IF _CHG_VAR$(5,1)="Y" THEN ITEM_DATE$=_CUR.ITEM_DATE$
16070 IF _CHG_VAR$(6,1)="Y" THEN RELEASE_DATE$=_CUR.RELEASE_DATE$
16080 IF _CHG_VAR$(7,1)="Y" THEN FY_ACCTPD_CLEARED$=_CUR.FY_ACCTPD_CLEARED$
16090 IF _CHG_VAR$(8,1)="Y" THEN GL_ACCT$=_CUR.GL_ACCT$
16100 IF _CHG_VAR$(9,1)="Y" THEN CLEARED$=_CUR.CLEARED$
16110 IF _CHG_VAR$(10,1)="Y" THEN MEMO_FIELD$=_CUR.MEMO_FIELD$
16120 IF _CHG_VAR$(11,1)="Y" THEN FYEAR_ACCTPD_BOOKED$=_CUR.FYEAR_ACCTPD_BOOKED$
16130 IF _CHG_VAR$(12,1)="Y" THEN MANUAL_CHECK$=_CUR.MANUAL_CHECK$
16140 IF _CHG_VAR$(13,1)="Y" THEN BANK_ERROR$=_CUR.BANK_ERROR$
16150 IF _CHG_VAR$(14,1)="Y" THEN VEND_DIV$=_CUR.VEND_DIV$
16160 IF _CHG_VAR$(15,1)="Y" THEN VEND_CODE$=_CUR.VEND_CODE$
16170 IF _CHG_VAR$(16,1)="Y" THEN ACTION_FLD$=_CUR.ACTION_FLD$
16180 IF _CHG_VAR$(17,1)="Y" THEN SEQ_NUM$=_CUR.SEQ_NUM$
16190 IF _CHG_VAR$(18,1)="Y" THEN CHECK_TYPE$=_CUR.CHECK_TYPE$
16200 IF _CHG_VAR$(19,1)="Y" THEN FY_ACCTPD_DISCREP$=_CUR.FY_ACCTPD_DISCREP$
16210 IF _CHG_VAR$(20,1)="Y" THEN ITEM_AMT=_CUR.ITEM_AMT
16220 IF _CHG_VAR$(21,1)="Y" THEN CLEARED_FOR=_CUR.CLEARED_FOR
16990 RETURN 
16999 ! 
17000 SELECT_QRY:
17010 IF RESULT$="YES" THEN RES$="QRY_BR2" ELSE RES$="QRY_BR0"
17011 GOSUB TYPE_OPTION
17015 %WHERE1$=BANK_CODE$+ITEM_TYPE$
17020 PROCESS RES$,"../BRG/BR.EN",CHECK_NUM$
17040 MULTI_LINE WRITE CHECK_NUM.CTL,CHECK_NUM$
17045 REFRESH_FLG=1,NEXT_ID=CHECK_NUM.CTL
17047 QRY_VAL$=CHECK_NUM$
17050 RETURN 
17999 ! 
18000 PROCESS_LINK_FILES:
18010 VENDOR$=VEND_DIV$+VEND_CODE$; IF VENDOR$(1,1)<>" " THEN GOSUB AP4_FILES ELSE VEND_NAME$=""
18020 IF GL_ACCT$(1,1)<>" " THEN GOSUB GL1_FILES ELSE ML_GL_DESC$=""
18100 RETURN 
18500 AP4_FILES:
18510 READ RECORD (_AP4,KEY=VENDOR$,DOM=*NEXT)_AP4$; VEND_NAME$=_AP4$(11,35); GOTO 18530
18520 VEND_NAME$="****** N O F ******"
18530 RETURN 
18600 GL1_FILES:
18610 READ RECORD (_GL1,KEY=GL_ACCT$,ERR=*NEXT)_GL1$; ML_GL_DESC$=_GL1$(13,35); GOTO 18630
18620 ML_GL_DESC$="****** N O F ******"
18630 RETURN 
32000 TYPE_OPTION:
32010 IF ITEM_TYPE$="1" THEN %WHERE$=MSG("CHECK_NUM"),%WHERE1$=BANK_CODE$+"1"
32020 IF ITEM_TYPE$="2" THEN %WHERE$=MSG("DEPOSIT_NU"),%WHERE1$=BANK_CODE$+"2"
32030 IF ITEM_TYPE$="3" THEN %WHERE$=MSG("ADJUST_NU"),%WHERE1$=BANK_CODE$+"3"
32040 IF ITEM_TYPE$="4" THEN %WHERE$=MSG("BR_CH_NOF"),%WHERE1$=BANK_CODE$+"4"
32050 RETURN 
35000 ! 35000,10 Load Bank Code
35010 LOAD_BANK_CODE: CHANGE_FLG=0
35020 DIM PARAM$(200)
35030 READ (_ZZP,KEY=%C$+"A/R",DOM=*NEXT)PARAM$
35035 PARAM$(16,1)="Y"
35040 IF PARAM$(16,1)<>"Y" THEN {
35050 READ (_ZYBB,KEY=PARAM$(43,3),DOM=*RETURN)ZYB$
35060 BANK_CODE_LIST$=ZYB$(1,3)+"-"+ZYB$(4,30)
35070 DROP_BOX LOAD BANK_CODE.CTL,1,BANK_CODE_LIST$
35080 DROP_BOX WRITE BANK_CODE.CTL,BANK_CODE_LIST$
35090 BANK_CODE$=BANK_CODE_LIST$(1,3)
35100 REFRESH_FLG=1; NEXT_ID=DEPOSIT_NUM.CTL
35110 RETURN  }
35120 READ (_ZYBB,KEY="",DOM=*NEXT)
35130 NEXT_REC_ZYB:
35140 KEY_9$=KEY(_ZYBB,END=END_LOAD_BANK_CODE); READ (_ZYBB)ZYB$
35150 BANK_CODE_LIST$+=ZYB$(1,3)+"-"+ZYB$(4,30)+"/"
35160 IF ZYB$(1,3)=PARAM$(43,3) THEN DFLT_BANK_CODE$=ZYB$(1,3)+"-"+ZYB$(4,30)
35170 GOTO NEXT_REC_ZYB
35180 END_LOAD_BANK_CODE:
35190 DROP_BOX LOAD BANK_CODE.CTL,BANK_CODE_LIST$
35200 DROP_BOX WRITE BANK_CODE.CTL,DFLT_BANK_CODE$
35210 BANK_CODE$=DFLT_BANK_CODE$,NEXT_ID=BANK_CODE.CTL
35220 EXIT 
35230 READ_ZYB:
35240 READ (_ZYBB,KEY=BANK_CODE$,DOM=*NEXT)ZYB$
35250 BANK_CODE_LIST$=ZYB$(1,3)+"-"+ZYB$(4,30)
35260 DROP_BOX WRITE BANK_CODE.CTL,BANK_CODE_LIST$
35270 RETURN 
56000 REM "210955-In Bank Rec GUI after you select your bank code, item type, 
