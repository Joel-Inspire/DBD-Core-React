0010 ! BRGMAA - Bank Reconciliation Data
0035 REM "5.7 - 11/05/09 - 9.213333 - tma - SSP# 234157
0037 REM "234157-Trying to add Bank Rec entry and the system is just locked. 
0040 REM "Copyright 2009 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "BRGMAA","../BRG/BR.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="BR1"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0182 _ZZP=HFN,_FILE_NAME$="ZZPARM"; OPEN (_ZZP,ERR=OPEN_ERR)_FILE_NAME$
0183 READ (_ZZP,KEY=FID(0)+"      ")X3$
0185 _ZYB=HFN,_FILE_NAME$="ZYB"+%C$; OPEN (_ZYB,ERR=OPEN_ERR)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="BANK_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0515 GOSUB LOAD_BANK_CODE
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0915 IF BAL_LEFT_TO_RECON<>0 THEN %NOMAD_TIMEOUT=10; BB$=MSG("WARNING"),VAL$=STR(BAL_LEFT_TO_RECON); PROCESS "BRGMAA.A","../BRG/BR.EN",MSG("BRGMAA_M1")+":"+STP(STR(BAL_LEFT_TO_RECON:"(###,###,###.00)")),VAL$; %NOMAD_TIMEOUT=0
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1015 BANK_CODE$=PAD(BANK_CODE$,3) ! SSP231729 jdf!SSP#234157
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ AND _CURKEY<2 THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN ! SSP#217051
1022 NXT_FIND_REC: BANK_CODE$=PAD(BANK_CODE$,3); REM BANK_CODE$(1,3) ! SSP231729 jdf !SSP#234157
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1095 GOSUB SEL_AMTS
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1251 GOSUB PROCESS_BR1
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1280 PRINT (0,ERR=*NEXT)'POP','POP',
1290 GOTO 1070
1300 RETURN 
1399 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOSUB CREATE_BNK_CODE; GOTO DISP_REC ! SSP231729 jdf
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOSUB CREATE_BNK_CODE; GOTO DISP_REC ! SSP231729 jdf
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOSUB CREATE_BNK_CODE; GOTO DISP_REC ! SSP231729 jdf
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOSUB CREATE_BNK_CODE; GOTO DISP_REC ! SSP231729 jdf
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3025 IF NO=0 THEN GOSUB PROCESS_BR1; PRINT 'POP','POP', ELSE NO=0
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3065 PERFORM "BRGRAS;SELECT_BANK_CODE"
3066 GOSUB SEL_AMTS
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO,ERR=WRT),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 _YESNO$="YES" ! MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:! IF _CHG2$<>"" THEN        MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:IF STP(_KEY$)="" THEN GOTO WRITE_ERROR ELSE WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR) ! SSP231729 jdf
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$ ! IF SECOND=0 THEN MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3535 GOSUB SEL_AMTS
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=BANK_CODE.CTL,_FIRST_FIELD=STMT_DATE.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
4500 CREATE_BNK_CODE:! Creates Bank Code for drop down menu ! SSP231729 jdf
4510 Y_COR=POS(BANK_CODE$+"-"=BANK_CODE_LIST$) ! SSP231729 jdf
4520 CUR_SELECT$=BANK_CODE_LIST$(1,Y_COR+3) ! SSP231729 jdf
4525 INDEX_P=POS("-"=CUR_SELECT$,1,0) ! SSP231729 jdf
4530 DROP_BOX WRITE BANK_CODE.CTL,INDEX_P ! SSP231729 jdf
4535 REFRESH_FLG=1 ! SSP231729 jdf
4550 RETURN ! SSP231729 jdf
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9915 IF %GUI THEN CALL "*progbar;Wrap_up"
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 BEG_BAL$=STR(BEG_BAL)
10030 DEPOSITS_CREDITED$=STR(DEPOSITS_CREDITED)
10040 CHECKS_OR_OTH_DEBITS$=STR(CHECKS_OR_OTH_DEBITS)
10050 ADJUSTMENTS_OR_FEES$=STR(ADJUSTMENTS_OR_FEES)
10060 ENDING_BAL_PER_BANK$=STR(ENDING_BAL_PER_BANK)
10070 NUM_OF_DEPOSIT_ITEMS$=STR(NUM_OF_DEPOSIT_ITEMS)
10080 NUM_OF_CHECK_ITEMS$=STR(NUM_OF_CHECK_ITEMS)
10090 WORKING_TOT_DEPOSIT$=STR(WORKING_TOT_DEPOSIT)
10100 WORKING_TOT_CHECKS$=STR(WORKING_TOT_CHECKS)
10110 WORKING_TOT_ADJUST$=STR(WORKING_TOT_ADJUST)
10120 RECON_NUM_OF_DEP_ITM$=STR(RECON_NUM_OF_DEP_ITM)
10130 RECON_NUM_OF_CHK_ITM$=STR(RECON_NUM_OF_CHK_ITM)
10140 GL_BAL_TO_RECONCILE$=STR(GL_BAL_TO_RECONCILE)
10150 OUTSTDING_DEP_ITEMS$=STR(OUTSTDING_DEP_ITEMS)
10160 OUTSTDING_CHK_ITEMS$=STR(OUTSTDING_CHK_ITEMS)
10170 ADJ_NOT_YET_BOOKED$=STR(ADJ_NOT_YET_BOOKED)
10180 BAL_LEFT_TO_RECON$=STR(BAL_LEFT_TO_RECON)
10190 AMT_PD_FYOP_GL_RECON$=STR(AMT_PD_FYOP_GL_RECON)
10200 DISCREPANCY_AMTS$=STR(DISCREPANCY_AMTS)
10210 BANK_ERRORS$=STR(BANK_ERRORS)
10220 DATA_ENTRY_ERRORS$=STR(DATA_ENTRY_ERRORS)
10230 TOTAL_NOF_CHECKS$=STR(TOTAL_NOF_CHECKS)
10240 BR1_UNUSED_1$=STR(BR1_UNUSED_1)
10250 BR1_UNUSED_2$=STR(BR1_UNUSED_2)
10260 BR1_UNUSED_3$=STR(BR1_UNUSED_3)
10270 BR1_UNUSED_4$=STR(BR1_UNUSED_4)
10280 BR1_UNUSED_5$=STR(BR1_UNUSED_5)
10290 BR1_UNUSED_6$=STR(BR1_UNUSED_6)
10300 BR1_UNUSED_7$=STR(BR1_UNUSED_7)
10310 BR1_UNUSED_8$=STR(BR1_UNUSED_8)
10320 BR1_UNUSED_9$=STR(BR1_UNUSED_9)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="BEG_BAL",_X=BEG_BAL.CTL,BEG_BAL=NUM(BEG_BAL$,ERR=NON_NUMERIC)
11030 _X$="DEPOSITS_CREDITED",_X=DEPOSITS_CREDITED.CTL,DEPOSITS_CREDITED=NUM(DEPOSITS_CREDITED$,ERR=NON_NUMERIC)
11040 _X$="CHECKS_OR_OTH_DEBITS",_X=CHECKS_OR_OTH_DEBITS.CTL,CHECKS_OR_OTH_DEBITS=NUM(CHECKS_OR_OTH_DEBITS$,ERR=NON_NUMERIC)
11050 _X$="ADJUSTMENTS_OR_FEES",_X=ADJUSTMENTS_OR_FEES.CTL,ADJUSTMENTS_OR_FEES=NUM(ADJUSTMENTS_OR_FEES$,ERR=NON_NUMERIC)
11060 _X$="ENDING_BAL_PER_BANK",_X=ENDING_BAL_PER_BANK.CTL,ENDING_BAL_PER_BANK=NUM(ENDING_BAL_PER_BANK$,ERR=NON_NUMERIC)
11070 _X$="NUM_OF_DEPOSIT_ITEMS",_X=NUM_OF_DEPOSIT_ITEMS.CTL,NUM_OF_DEPOSIT_ITEMS=NUM(NUM_OF_DEPOSIT_ITEMS$,ERR=NON_NUMERIC)
11080 _X$="NUM_OF_CHECK_ITEMS",_X=NUM_OF_CHECK_ITEMS.CTL,NUM_OF_CHECK_ITEMS=NUM(NUM_OF_CHECK_ITEMS$,ERR=NON_NUMERIC)
11090 _X$="WORKING_TOT_DEPOSIT",_X=WORKING_TOT_DEPOSIT.CTL,WORKING_TOT_DEPOSIT=NUM(WORKING_TOT_DEPOSIT$,ERR=NON_NUMERIC)
11100 _X$="WORKING_TOT_CHECKS",_X=WORKING_TOT_CHECKS.CTL,WORKING_TOT_CHECKS=NUM(WORKING_TOT_CHECKS$,ERR=NON_NUMERIC)
11110 _X$="WORKING_TOT_ADJUST",_X=WORKING_TOT_ADJUST.CTL,WORKING_TOT_ADJUST=NUM(WORKING_TOT_ADJUST$,ERR=NON_NUMERIC)
11120 _X$="RECON_NUM_OF_DEP_ITM",_X=RECON_NUM_OF_DEP_ITM.CTL,RECON_NUM_OF_DEP_ITM=NUM(RECON_NUM_OF_DEP_ITM$,ERR=NON_NUMERIC)
11130 _X$="RECON_NUM_OF_CHK_ITM",_X=RECON_NUM_OF_CHK_ITM.CTL,RECON_NUM_OF_CHK_ITM=NUM(RECON_NUM_OF_CHK_ITM$,ERR=NON_NUMERIC)
11140 _X$="GL_BAL_TO_RECONCILE",_X=GL_BAL_TO_RECONCILE.CTL,GL_BAL_TO_RECONCILE=NUM(GL_BAL_TO_RECONCILE$,ERR=NON_NUMERIC)
11150 _X$="OUTSTDING_DEP_ITEMS",_X=OUTSTDING_DEP_ITEMS.CTL,OUTSTDING_DEP_ITEMS=NUM(OUTSTDING_DEP_ITEMS$,ERR=NON_NUMERIC)
11160 _X$="OUTSTDING_CHK_ITEMS",_X=OUTSTDING_CHK_ITEMS.CTL,OUTSTDING_CHK_ITEMS=NUM(OUTSTDING_CHK_ITEMS$,ERR=NON_NUMERIC)
11170 _X$="ADJ_NOT_YET_BOOKED",_X=ADJ_NOT_YET_BOOKED.CTL,ADJ_NOT_YET_BOOKED=NUM(ADJ_NOT_YET_BOOKED$,ERR=NON_NUMERIC)
11180 _X$="BAL_LEFT_TO_RECON",_X=BAL_LEFT_TO_RECON.CTL,BAL_LEFT_TO_RECON=NUM(BAL_LEFT_TO_RECON$,ERR=NON_NUMERIC)
11190 _X$="AMT_PD_FYOP_GL_RECON",_X=AMT_PD_FYOP_GL_RECON.CTL,AMT_PD_FYOP_GL_RECON=NUM(AMT_PD_FYOP_GL_RECON$,ERR=NON_NUMERIC)
11200 _X$="DISCREPANCY_AMTS",_X=DISCREPANCY_AMTS.CTL,DISCREPANCY_AMTS=NUM(DISCREPANCY_AMTS$,ERR=NON_NUMERIC)
11210 _X$="BANK_ERRORS",_X=BANK_ERRORS.CTL,BANK_ERRORS=NUM(BANK_ERRORS$,ERR=NON_NUMERIC)
11220 _X$="DATA_ENTRY_ERRORS",_X=DATA_ENTRY_ERRORS.CTL,DATA_ENTRY_ERRORS=NUM(DATA_ENTRY_ERRORS$,ERR=NON_NUMERIC)
11230 _X$="TOTAL_NOF_CHECKS",_X=TOTAL_NOF_CHECKS.CTL,TOTAL_NOF_CHECKS=NUM(TOTAL_NOF_CHECKS$,ERR=NON_NUMERIC)
11240 _X$="BR1_UNUSED_1",_X=BR1_UNUSED_1.CTL,BR1_UNUSED_1=NUM(BR1_UNUSED_1$,ERR=NON_NUMERIC)
11250 _X$="BR1_UNUSED_2",_X=BR1_UNUSED_2.CTL,BR1_UNUSED_2=NUM(BR1_UNUSED_2$,ERR=NON_NUMERIC)
11260 _X$="BR1_UNUSED_3",_X=BR1_UNUSED_3.CTL,BR1_UNUSED_3=NUM(BR1_UNUSED_3$,ERR=NON_NUMERIC)
11270 _X$="BR1_UNUSED_4",_X=BR1_UNUSED_4.CTL,BR1_UNUSED_4=NUM(BR1_UNUSED_4$,ERR=NON_NUMERIC)
11280 _X$="BR1_UNUSED_5",_X=BR1_UNUSED_5.CTL,BR1_UNUSED_5=NUM(BR1_UNUSED_5$,ERR=NON_NUMERIC)
11290 _X$="BR1_UNUSED_6",_X=BR1_UNUSED_6.CTL,BR1_UNUSED_6=NUM(BR1_UNUSED_6$,ERR=NON_NUMERIC)
11300 _X$="BR1_UNUSED_7",_X=BR1_UNUSED_7.CTL,BR1_UNUSED_7=NUM(BR1_UNUSED_7$,ERR=NON_NUMERIC)
11310 _X$="BR1_UNUSED_8",_X=BR1_UNUSED_8.CTL,BR1_UNUSED_8=NUM(BR1_UNUSED_8$,ERR=NON_NUMERIC)
11320 _X$="BR1_UNUSED_9",_X=BR1_UNUSED_9.CTL,BR1_UNUSED_9=NUM(BR1_UNUSED_9$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN BANK_CODE$=""
13030 STMT_DATE$="",ML_BK_DESC$=""
13040 FY_OP_TO_REC$=""
13050 PERIOD_END_DATE$=""
13060 BEG_BAL=0
13070 DEPOSITS_CREDITED=0
13080 CHECKS_OR_OTH_DEBITS=0
13090 ADJUSTMENTS_OR_FEES=0
13100 ENDING_BAL_PER_BANK=0
13110 NUM_OF_DEPOSIT_ITEMS=0
13120 NUM_OF_CHECK_ITEMS=0
13130 WORKING_TOT_DEPOSIT=0
13140 WORKING_TOT_CHECKS=0
13150 WORKING_TOT_ADJUST=0
13160 RECON_NUM_OF_DEP_ITM=0
13170 RECON_NUM_OF_CHK_ITM=0
13180 GL_BAL_TO_RECONCILE=0
13190 OUTSTDING_DEP_ITEMS=0
13200 OUTSTDING_CHK_ITEMS=0
13210 ADJ_NOT_YET_BOOKED=0
13220 BAL_LEFT_TO_RECON=0
13230 AMT_PD_FYOP_GL_RECON=0
13240 DISCREPANCY_AMTS=0
13250 BANK_ERRORS=0
13260 DATA_ENTRY_ERRORS=0
13270 TOTAL_NOF_CHECKS=0
13280 BR1_UNUSED_1=0
13290 BR1_UNUSED_2=0
13300 BR1_UNUSED_3=0
13310 BR1_UNUSED_4=0
13320 BR1_UNUSED_5=0
13330 BR1_UNUSED_6=0
13340 BR1_UNUSED_7=0
13350 BR1_UNUSED_8=0
13360 BR1_UNUSED_9=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(35,"N")
15030 IF _ORIG.BANK_CODE$=_CUR.BANK_CODE$ OR BANK_CODE$=_CUR.BANK_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.BANK_CODE$=BANK_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("BANK_CODE")+" = "+_CUR.BANK_CODE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BANK_CODE")+" = "+_CUR.BANK_CODE$
15040 IF _ORIG.STMT_DATE$=_CUR.STMT_DATE$ OR STMT_DATE$=_CUR.STMT_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.STMT_DATE$=STMT_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("STMT_DATE")+" = "+_CUR.STMT_DATE$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("STMT_DATE")+" = "+_CUR.STMT_DATE$
15050 IF _ORIG.FY_OP_TO_REC$=_CUR.FY_OP_TO_REC$ OR FY_OP_TO_REC$=_CUR.FY_OP_TO_REC$ THEN GOTO *NEXT ELSE IF _ORIG.FY_OP_TO_REC$=FY_OP_TO_REC$ THEN _CHG2$=_CHG2$+SEP+MSG("F_O_T_R")+" = "+_CUR.FY_OP_TO_REC$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("F_O_T_R")+" = "+_CUR.FY_OP_TO_REC$
15060 IF _ORIG.PERIOD_END_DATE$=_CUR.PERIOD_END_DATE$ OR PERIOD_END_DATE$=_CUR.PERIOD_END_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.PERIOD_END_DATE$=PERIOD_END_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("PERIOD_E_D")+" = "+_CUR.PERIOD_END_DATE$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PERIOD_E_D")+" = "+_CUR.PERIOD_END_DATE$
15070 IF _ORIG.BEG_BAL=_CUR.BEG_BAL OR BEG_BAL=_CUR.BEG_BAL THEN GOTO *NEXT ELSE IF _ORIG.BEG_BAL=BEG_BAL THEN _CHG2$=_CHG2$+SEP+MSG("BEG_BAL")+" = "+STR(_CUR.BEG_BAL),_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BEG_BAL")+" = "+STR(_CUR.BEG_BAL)
15080 IF _ORIG.DEPOSITS_CREDITED=_CUR.DEPOSITS_CREDITED OR DEPOSITS_CREDITED=_CUR.DEPOSITS_CREDITED THEN GOTO *NEXT ELSE IF _ORIG.DEPOSITS_CREDITED=DEPOSITS_CREDITED THEN _CHG2$=_CHG2$+SEP+MSG("DEPO_C")+" = "+STR(_CUR.DEPOSITS_CREDITED),_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DEPO_C")+" = "+STR(_CUR.DEPOSITS_CREDITED)
15090 IF _ORIG.CHECKS_OR_OTH_DEBITS=_CUR.CHECKS_OR_OTH_DEBITS OR CHECKS_OR_OTH_DEBITS=_CUR.CHECKS_OR_OTH_DEBITS THEN GOTO *NEXT ELSE IF _ORIG.CHECKS_OR_OTH_DEBITS=CHECKS_OR_OTH_DEBITS THEN _CHG2$=_CHG2$+SEP+MSG("CHEC_O_O_D")+" = "+STR(_CUR.CHECKS_OR_OTH_DEBITS),_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CHEC_O_O_D")+" = "+STR(_CUR.CHECKS_OR_OTH_DEBITS)
15100 IF _ORIG.ADJUSTMENTS_OR_FEES=_CUR.ADJUSTMENTS_OR_FEES OR ADJUSTMENTS_OR_FEES=_CUR.ADJUSTMENTS_OR_FEES THEN GOTO *NEXT ELSE IF _ORIG.ADJUSTMENTS_OR_FEES=ADJUSTMENTS_OR_FEES THEN _CHG2$=_CHG2$+SEP+MSG("ADJU_O_F")+" = "+STR(_CUR.ADJUSTMENTS_OR_FEES),_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ADJU_O_F")+" = "+STR(_CUR.ADJUSTMENTS_OR_FEES)
15110 IF _ORIG.ENDING_BAL_PER_BANK=_CUR.ENDING_BAL_PER_BANK OR ENDING_BAL_PER_BANK=_CUR.ENDING_BAL_PER_BANK THEN GOTO *NEXT ELSE IF _ORIG.ENDING_BAL_PER_BANK=ENDING_BAL_PER_BANK THEN _CHG2$=_CHG2$+SEP+MSG("ENDI_B_P_B")+" = "+STR(_CUR.ENDING_BAL_PER_BANK),_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ENDI_B_P_B")+" = "+STR(_CUR.ENDING_BAL_PER_BANK)
15120 IF _ORIG.NUM_OF_DEPOSIT_ITEMS=_CUR.NUM_OF_DEPOSIT_ITEMS OR NUM_OF_DEPOSIT_ITEMS=_CUR.NUM_OF_DEPOSIT_ITEMS THEN GOTO *NEXT ELSE IF _ORIG.NUM_OF_DEPOSIT_ITEMS=NUM_OF_DEPOSIT_ITEMS THEN _CHG2$=_CHG2$+SEP+MSG("NUM_O_D_I")+" = "+STR(_CUR.NUM_OF_DEPOSIT_ITEMS),_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NUM_O_D_I")+" = "+STR(_CUR.NUM_OF_DEPOSIT_ITEMS)
15130 IF _ORIG.NUM_OF_CHECK_ITEMS=_CUR.NUM_OF_CHECK_ITEMS OR NUM_OF_CHECK_ITEMS=_CUR.NUM_OF_CHECK_ITEMS THEN GOTO *NEXT ELSE IF _ORIG.NUM_OF_CHECK_ITEMS=NUM_OF_CHECK_ITEMS THEN _CHG2$=_CHG2$+SEP+MSG("NUM_O_C_I")+" = "+STR(_CUR.NUM_OF_CHECK_ITEMS),_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NUM_O_C_I")+" = "+STR(_CUR.NUM_OF_CHECK_ITEMS)
15140 IF _ORIG.WORKING_TOT_DEPOSIT=_CUR.WORKING_TOT_DEPOSIT OR WORKING_TOT_DEPOSIT=_CUR.WORKING_TOT_DEPOSIT THEN GOTO *NEXT ELSE IF _ORIG.WORKING_TOT_DEPOSIT=WORKING_TOT_DEPOSIT THEN _CHG2$=_CHG2$+SEP+MSG("WORK_T_D")+" = "+STR(_CUR.WORKING_TOT_DEPOSIT),_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WORK_T_D")+" = "+STR(_CUR.WORKING_TOT_DEPOSIT)
15150 IF _ORIG.WORKING_TOT_CHECKS=_CUR.WORKING_TOT_CHECKS OR WORKING_TOT_CHECKS=_CUR.WORKING_TOT_CHECKS THEN GOTO *NEXT ELSE IF _ORIG.WORKING_TOT_CHECKS=WORKING_TOT_CHECKS THEN _CHG2$=_CHG2$+SEP+MSG("WORK_T_C")+" = "+STR(_CUR.WORKING_TOT_CHECKS),_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WORK_T_C")+" = "+STR(_CUR.WORKING_TOT_CHECKS)
15160 IF _ORIG.WORKING_TOT_ADJUST=_CUR.WORKING_TOT_ADJUST OR WORKING_TOT_ADJUST=_CUR.WORKING_TOT_ADJUST THEN GOTO *NEXT ELSE IF _ORIG.WORKING_TOT_ADJUST=WORKING_TOT_ADJUST THEN _CHG2$=_CHG2$+SEP+MSG("WORK_T_A")+" = "+STR(_CUR.WORKING_TOT_ADJUST),_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("WORK_T_A")+" = "+STR(_CUR.WORKING_TOT_ADJUST)
15170 IF _ORIG.RECON_NUM_OF_DEP_ITM=_CUR.RECON_NUM_OF_DEP_ITM OR RECON_NUM_OF_DEP_ITM=_CUR.RECON_NUM_OF_DEP_ITM THEN GOTO *NEXT ELSE IF _ORIG.RECON_NUM_OF_DEP_ITM=RECON_NUM_OF_DEP_ITM THEN _CHG2$=_CHG2$+SEP+MSG("R_N_O_D_I")+" = "+STR(_CUR.RECON_NUM_OF_DEP_ITM),_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("R_N_O_D_I")+" = "+STR(_CUR.RECON_NUM_OF_DEP_ITM)
15180 IF _ORIG.RECON_NUM_OF_CHK_ITM=_CUR.RECON_NUM_OF_CHK_ITM OR RECON_NUM_OF_CHK_ITM=_CUR.RECON_NUM_OF_CHK_ITM THEN GOTO *NEXT ELSE IF _ORIG.RECON_NUM_OF_CHK_ITM=RECON_NUM_OF_CHK_ITM THEN _CHG2$=_CHG2$+SEP+MSG("R_N_O_C_I")+" = "+STR(_CUR.RECON_NUM_OF_CHK_ITM),_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("R_N_O_C_I")+" = "+STR(_CUR.RECON_NUM_OF_CHK_ITM)
15190 IF _ORIG.GL_BAL_TO_RECONCILE=_CUR.GL_BAL_TO_RECONCILE OR GL_BAL_TO_RECONCILE=_CUR.GL_BAL_TO_RECONCILE THEN GOTO *NEXT ELSE IF _ORIG.GL_BAL_TO_RECONCILE=GL_BAL_TO_RECONCILE THEN _CHG2$=_CHG2$+SEP+MSG("G_B_T_R")+" = "+STR(_CUR.GL_BAL_TO_RECONCILE),_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("G_B_T_R")+" = "+STR(_CUR.GL_BAL_TO_RECONCILE)
15200 IF _ORIG.OUTSTDING_DEP_ITEMS=_CUR.OUTSTDING_DEP_ITEMS OR OUTSTDING_DEP_ITEMS=_CUR.OUTSTDING_DEP_ITEMS THEN GOTO *NEXT ELSE IF _ORIG.OUTSTDING_DEP_ITEMS=OUTSTDING_DEP_ITEMS THEN _CHG2$=_CHG2$+SEP+MSG("OUTS_D_I")+" = "+STR(_CUR.OUTSTDING_DEP_ITEMS),_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OUTS_D_I")+" = "+STR(_CUR.OUTSTDING_DEP_ITEMS)
15210 IF _ORIG.OUTSTDING_CHK_ITEMS=_CUR.OUTSTDING_CHK_ITEMS OR OUTSTDING_CHK_ITEMS=_CUR.OUTSTDING_CHK_ITEMS THEN GOTO *NEXT ELSE IF _ORIG.OUTSTDING_CHK_ITEMS=OUTSTDING_CHK_ITEMS THEN _CHG2$=_CHG2$+SEP+MSG("OUTS_C_I")+" = "+STR(_CUR.OUTSTDING_CHK_ITEMS),_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OUTS_C_I")+" = "+STR(_CUR.OUTSTDING_CHK_ITEMS)
15220 IF _ORIG.ADJ_NOT_YET_BOOKED=_CUR.ADJ_NOT_YET_BOOKED OR ADJ_NOT_YET_BOOKED=_CUR.ADJ_NOT_YET_BOOKED THEN GOTO *NEXT ELSE IF _ORIG.ADJ_NOT_YET_BOOKED=ADJ_NOT_YET_BOOKED THEN _CHG2$=_CHG2$+SEP+MSG("ADJ_N_Y_B")+" = "+STR(_CUR.ADJ_NOT_YET_BOOKED),_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ADJ_N_Y_B")+" = "+STR(_CUR.ADJ_NOT_YET_BOOKED)
15230 IF _ORIG.BAL_LEFT_TO_RECON=_CUR.BAL_LEFT_TO_RECON OR BAL_LEFT_TO_RECON=_CUR.BAL_LEFT_TO_RECON THEN GOTO *NEXT ELSE IF _ORIG.BAL_LEFT_TO_RECON=BAL_LEFT_TO_RECON THEN _CHG2$=_CHG2$+SEP+MSG("BAL_L_T_R")+" = "+STR(_CUR.BAL_LEFT_TO_RECON),_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BAL_L_T_R")+" = "+STR(_CUR.BAL_LEFT_TO_RECON)
15240 IF _ORIG.AMT_PD_FYOP_GL_RECON=_CUR.AMT_PD_FYOP_GL_RECON OR AMT_PD_FYOP_GL_RECON=_CUR.AMT_PD_FYOP_GL_RECON THEN GOTO *NEXT ELSE IF _ORIG.AMT_PD_FYOP_GL_RECON=AMT_PD_FYOP_GL_RECON THEN _CHG2$=_CHG2$+SEP+MSG("A_P_F_G_R")+" = "+STR(_CUR.AMT_PD_FYOP_GL_RECON),_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("A_P_F_G_R")+" = "+STR(_CUR.AMT_PD_FYOP_GL_RECON)
15250 IF _ORIG.DISCREPANCY_AMTS=_CUR.DISCREPANCY_AMTS OR DISCREPANCY_AMTS=_CUR.DISCREPANCY_AMTS THEN GOTO *NEXT ELSE IF _ORIG.DISCREPANCY_AMTS=DISCREPANCY_AMTS THEN _CHG2$=_CHG2$+SEP+MSG("DISCR_AMT")+" = "+STR(_CUR.DISCREPANCY_AMTS),_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DISCR_AMT")+" = "+STR(_CUR.DISCREPANCY_AMTS)
15260 IF _ORIG.BANK_ERRORS=_CUR.BANK_ERRORS OR BANK_ERRORS=_CUR.BANK_ERRORS THEN GOTO *NEXT ELSE IF _ORIG.BANK_ERRORS=BANK_ERRORS THEN _CHG2$=_CHG2$+SEP+MSG("BANK_E")+" = "+STR(_CUR.BANK_ERRORS),_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BANK_E")+" = "+STR(_CUR.BANK_ERRORS)
15270 IF _ORIG.DATA_ENTRY_ERRORS=_CUR.DATA_ENTRY_ERRORS OR DATA_ENTRY_ERRORS=_CUR.DATA_ENTRY_ERRORS THEN GOTO *NEXT ELSE IF _ORIG.DATA_ENTRY_ERRORS=DATA_ENTRY_ERRORS THEN _CHG2$=_CHG2$+SEP+MSG("DATA_E_E")+" = "+STR(_CUR.DATA_ENTRY_ERRORS),_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DATA_E_E")+" = "+STR(_CUR.DATA_ENTRY_ERRORS)
15280 IF _ORIG.TOTAL_NOF_CHECKS=_CUR.TOTAL_NOF_CHECKS OR TOTAL_NOF_CHECKS=_CUR.TOTAL_NOF_CHECKS THEN GOTO *NEXT ELSE IF _ORIG.TOTAL_NOF_CHECKS=TOTAL_NOF_CHECKS THEN _CHG2$=_CHG2$+SEP+MSG("TOTA_N_C")+" = "+STR(_CUR.TOTAL_NOF_CHECKS),_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("TOTA_N_C")+" = "+STR(_CUR.TOTAL_NOF_CHECKS)
15290 IF _ORIG.BR1_UNUSED_1=_CUR.BR1_UNUSED_1 OR BR1_UNUSED_1=_CUR.BR1_UNUSED_1 THEN GOTO *NEXT ELSE IF _ORIG.BR1_UNUSED_1=BR1_UNUSED_1 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_1),_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_1)
15300 IF _ORIG.BR1_UNUSED_2=_CUR.BR1_UNUSED_2 OR BR1_UNUSED_2=_CUR.BR1_UNUSED_2 THEN GOTO *NEXT ELSE IF _ORIG.BR1_UNUSED_2=BR1_UNUSED_2 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_2),_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_2)
15310 IF _ORIG.BR1_UNUSED_3=_CUR.BR1_UNUSED_3 OR BR1_UNUSED_3=_CUR.BR1_UNUSED_3 THEN GOTO *NEXT ELSE IF _ORIG.BR1_UNUSED_3=BR1_UNUSED_3 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_3),_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_3)
15320 IF _ORIG.BR1_UNUSED_4=_CUR.BR1_UNUSED_4 OR BR1_UNUSED_4=_CUR.BR1_UNUSED_4 THEN GOTO *NEXT ELSE IF _ORIG.BR1_UNUSED_4=BR1_UNUSED_4 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_4),_CHG_VAR$(30,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_4)
15330 IF _ORIG.BR1_UNUSED_5=_CUR.BR1_UNUSED_5 OR BR1_UNUSED_5=_CUR.BR1_UNUSED_5 THEN GOTO *NEXT ELSE IF _ORIG.BR1_UNUSED_5=BR1_UNUSED_5 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_5),_CHG_VAR$(31,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_5)
15340 IF _ORIG.BR1_UNUSED_6=_CUR.BR1_UNUSED_6 OR BR1_UNUSED_6=_CUR.BR1_UNUSED_6 THEN GOTO *NEXT ELSE IF _ORIG.BR1_UNUSED_6=BR1_UNUSED_6 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_6),_CHG_VAR$(32,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_6)
15350 IF _ORIG.BR1_UNUSED_7=_CUR.BR1_UNUSED_7 OR BR1_UNUSED_7=_CUR.BR1_UNUSED_7 THEN GOTO *NEXT ELSE IF _ORIG.BR1_UNUSED_7=BR1_UNUSED_7 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_7),_CHG_VAR$(33,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_7)
15360 IF _ORIG.BR1_UNUSED_8=_CUR.BR1_UNUSED_8 OR BR1_UNUSED_8=_CUR.BR1_UNUSED_8 THEN GOTO *NEXT ELSE IF _ORIG.BR1_UNUSED_8=BR1_UNUSED_8 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_8),_CHG_VAR$(34,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_8)
15370 IF _ORIG.BR1_UNUSED_9=_CUR.BR1_UNUSED_9 OR BR1_UNUSED_9=_CUR.BR1_UNUSED_9 THEN GOTO *NEXT ELSE IF _ORIG.BR1_UNUSED_9=BR1_UNUSED_9 THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_9),_CHG_VAR$(35,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+STR(_CUR.BR1_UNUSED_9)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN BANK_CODE$=_CUR.BANK_CODE$
16030 IF _CHG_VAR$(2,1)="Y" THEN STMT_DATE$=_CUR.STMT_DATE$
16040 IF _CHG_VAR$(3,1)="Y" THEN FY_OP_TO_REC$=_CUR.FY_OP_TO_REC$
16050 IF _CHG_VAR$(4,1)="Y" THEN PERIOD_END_DATE$=_CUR.PERIOD_END_DATE$
16060 IF _CHG_VAR$(5,1)="Y" THEN BEG_BAL=_CUR.BEG_BAL
16070 IF _CHG_VAR$(6,1)="Y" THEN DEPOSITS_CREDITED=_CUR.DEPOSITS_CREDITED
16080 IF _CHG_VAR$(7,1)="Y" THEN CHECKS_OR_OTH_DEBITS=_CUR.CHECKS_OR_OTH_DEBITS
16090 IF _CHG_VAR$(8,1)="Y" THEN ADJUSTMENTS_OR_FEES=_CUR.ADJUSTMENTS_OR_FEES
16100 IF _CHG_VAR$(9,1)="Y" THEN ENDING_BAL_PER_BANK=_CUR.ENDING_BAL_PER_BANK
16110 IF _CHG_VAR$(10,1)="Y" THEN NUM_OF_DEPOSIT_ITEMS=_CUR.NUM_OF_DEPOSIT_ITEMS
16120 IF _CHG_VAR$(11,1)="Y" THEN NUM_OF_CHECK_ITEMS=_CUR.NUM_OF_CHECK_ITEMS
16130 IF _CHG_VAR$(12,1)="Y" THEN WORKING_TOT_DEPOSIT=_CUR.WORKING_TOT_DEPOSIT
16140 IF _CHG_VAR$(13,1)="Y" THEN WORKING_TOT_CHECKS=_CUR.WORKING_TOT_CHECKS
16150 IF _CHG_VAR$(14,1)="Y" THEN WORKING_TOT_ADJUST=_CUR.WORKING_TOT_ADJUST
16160 IF _CHG_VAR$(15,1)="Y" THEN RECON_NUM_OF_DEP_ITM=_CUR.RECON_NUM_OF_DEP_ITM
16170 IF _CHG_VAR$(16,1)="Y" THEN RECON_NUM_OF_CHK_ITM=_CUR.RECON_NUM_OF_CHK_ITM
16180 IF _CHG_VAR$(17,1)="Y" THEN GL_BAL_TO_RECONCILE=_CUR.GL_BAL_TO_RECONCILE
16190 IF _CHG_VAR$(18,1)="Y" THEN OUTSTDING_DEP_ITEMS=_CUR.OUTSTDING_DEP_ITEMS
16200 IF _CHG_VAR$(19,1)="Y" THEN OUTSTDING_CHK_ITEMS=_CUR.OUTSTDING_CHK_ITEMS
16210 IF _CHG_VAR$(20,1)="Y" THEN ADJ_NOT_YET_BOOKED=_CUR.ADJ_NOT_YET_BOOKED
16220 IF _CHG_VAR$(21,1)="Y" THEN BAL_LEFT_TO_RECON=_CUR.BAL_LEFT_TO_RECON
16230 IF _CHG_VAR$(22,1)="Y" THEN AMT_PD_FYOP_GL_RECON=_CUR.AMT_PD_FYOP_GL_RECON
16240 IF _CHG_VAR$(23,1)="Y" THEN DISCREPANCY_AMTS=_CUR.DISCREPANCY_AMTS
16250 IF _CHG_VAR$(24,1)="Y" THEN BANK_ERRORS=_CUR.BANK_ERRORS
16260 IF _CHG_VAR$(25,1)="Y" THEN DATA_ENTRY_ERRORS=_CUR.DATA_ENTRY_ERRORS
16270 IF _CHG_VAR$(26,1)="Y" THEN TOTAL_NOF_CHECKS=_CUR.TOTAL_NOF_CHECKS
16280 IF _CHG_VAR$(27,1)="Y" THEN BR1_UNUSED_1=_CUR.BR1_UNUSED_1
16290 IF _CHG_VAR$(28,1)="Y" THEN BR1_UNUSED_2=_CUR.BR1_UNUSED_2
16300 IF _CHG_VAR$(29,1)="Y" THEN BR1_UNUSED_3=_CUR.BR1_UNUSED_3
16310 IF _CHG_VAR$(30,1)="Y" THEN BR1_UNUSED_4=_CUR.BR1_UNUSED_4
16320 IF _CHG_VAR$(31,1)="Y" THEN BR1_UNUSED_5=_CUR.BR1_UNUSED_5
16330 IF _CHG_VAR$(32,1)="Y" THEN BR1_UNUSED_6=_CUR.BR1_UNUSED_6
16340 IF _CHG_VAR$(33,1)="Y" THEN BR1_UNUSED_7=_CUR.BR1_UNUSED_7
16350 IF _CHG_VAR$(34,1)="Y" THEN BR1_UNUSED_8=_CUR.BR1_UNUSED_8
16360 IF _CHG_VAR$(35,1)="Y" THEN BR1_UNUSED_9=_CUR.BR1_UNUSED_9
16990 RETURN 
35000 ! 35000,10 Load Bank Code
35010 LOAD_BANK_CODE:
35020 DIM PARAM$(200)
35030 READ (_ZZP,KEY=%C$+"A/R",DOM=*NEXT)PARAM$
35040 IF PARAM$(16,1)=" " THEN {
35050 READ (_ZYB,KEY=PARAM$(43,3),DOM=*RETURN)ZYB$
35060 BANK_CODE_LIST$=ZYB$(1,3)+"-"+ZYB$(4,30),%BANK_POST_ADJ$+=ZYB$(81,10)
35070 DROP_BOX LOAD BANK_CODE.CTL,1,BANK_CODE_LIST$
35080 DROP_BOX WRITE BANK_CODE.CTL,BANK_CODE_LIST$
35090 BANK_CODE$=BANK_CODE_LIST$(1,3)
35100 REFRESH_FLG=1; NEXT_ID=DEPOSIT_NUM.CTL
35110 GOTO NXT_FIND_REC }
35120 READ (_ZYB,KEY="",DOM=*NEXT)
35130 NEXT_REC_ZYB:
35140 KEY_9$=KEY(_ZYB,END=END_LOAD_BANK_CODE); READ (_ZYB)ZYB$
35150 BANK_CODE_LIST$+=ZYB$(1,3)+"-"+ZYB$(4,30)+"/",%BANK_POST_ADJ$+=ZYB$(81,10)
35160 IF ZYB$(1,3)=PARAM$(43,3) THEN DFLT_BANK_CODE$=ZYB$(1,3)+"-"+ZYB$(4,30)
35170 GOTO NEXT_REC_ZYB
35180 END_LOAD_BANK_CODE:
35190 DROP_BOX LOAD BANK_CODE.CTL,BANK_CODE_LIST$
35200 DROP_BOX WRITE BANK_CODE.CTL,DFLT_BANK_CODE$
35210 BANK_CODE$=DFLT_BANK_CODE$,NEXT_ID=BANK_CODE.CTL
35220 EXIT 
50000 PROCESS_BR1:
50010 REM "Bank Reconciliation Data <BR2MAA>
50020 REM "Prog Type: I -370032  
50030 SETESC 53900; SETERR 53730
50040 REM "4.4 - 08/23/00 - 10.32 - dmm - SSP# 128599
50050 REM "Copyright 2000 Computer Software Inc.; Norcross, Georgia
50060 REM "        Licensed Software - All Rights Reserved.
50070 SETERR 50075; ENTER X3$,X4$,Q0$,Q1$
50080 X0$="BR2MAA",X1$="Bank Reconciliation Data",K9$="",K9=0
50090 DIM Z2$(10,"0"),S$(40)
50100 C9=-1
50110 M0$="###,###,###.00-",M1$="##,##0-"
50120 REM "
50125 ZZPARM=HFN; OPEN (ZZPARM)"ZZPARM"; READ (ZZPARM,KEY=FID(0)+"      ")X3$
50130 ! CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,X0,X1,X2; IF X1>0 THEN GOTO 54045
50140 IF X3$(65,1)>"2" THEN PRECISION NUM(X3$(65,1),ERR=50145)
50150 DIM Z0$(80,X3$(235,1)); Z0$=MNM('GS')+Z0$+MNM('GE')
50160 REM "IOLISTS
50170 IOLIST A$(1),A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15],A[16],A[17],A[18],A[19],A[20],A[21],A[22],A[23],A[24],A[25],A[26],A[27],A[28],A[29],A[30]
50180 IOLIST B$,B[0],B[1],B[2]
50190 IOLIST C$,C[0],C[1],C[2],C[3]
50200 IOLIST D$
50210 REM "FILES
50220 DIM Z[NUM(X3$(60,3))]
50230 Z$="01X BR1...  02O ZYB...  03O BR0...  04O GL1... 05O FR1... 13O ZZPARM  "
50240 GOSUB 53980; ON Z0 GOTO 50245,54020
50250 READ (Z[5],KEY="G/LEBAL    ")P9$
50260 READ (Z[5],KEY="G/LPTD     ")P8$
50270 READ (Z[13],KEY=X3$(9,3)+"G/L")G2$
50280 REM "
50300 REM "
50310 Y8=1,Z8=0 ! CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,X2
50320 DIM B$(200),B[3],C[3]
50330 DIM A$(35),A[30],C$(128)
50340 A$(1,LEN(A1$))=A1$; IF A1$="" THEN A$(1,LEN(K9$))=K9$
50350 GOSUB 52020; GOTO 50370
50360 GOSUB 51680; GOSUB 52020
50370 REM "KEY SEQ
50380 X0=-1,C0=0,X1=0,C9=0,Z9=0
50390 SETERR 53730; C0=ABS(C0),X$=""; IF C0=2 AND X0>0 THEN X0=X0-1 ELSE IF C0<>2 THEN X0=X0+1; IF C0=4 THEN GOTO 54020
50400 ON X0 GOTO 50410,50480
50410 REM "Bank code
50415 A$(1,3)=BANK_CODE$
50420 GOSUB 51960; C0=1
50430 IF INT(ABS(C0))=3 THEN C0=-ABS(C0); READ (Z[1],KEY=A$(1,3),DOM=50435)
50440 IF C0<0 THEN ON INT(ABS(C0)-2) GOTO 50420,52160,54010,52365
50450 IF V9<>-2 THEN FIND (Z[2],KEY=A$(1,3),DOM=50420)IOL=50180
50460 ! PRINT @(17,3),B$(4,30),
50470 GOTO 50390
50480 REM "
50490 Z9=-1,Z8=0,C9=0,A2$="",A3$="",A4$="",A5$=""
50500 A1$=A$(1,3)
50510 READ (Z[1],ERR=52370,KEY=A1$,DOM=50550)IOL=50170
50520 Z9=0,V7$=""; GOSUB 51660
50530 GOSUB 52510
50540 GOTO 50620
50550 REM "
50560 ! CALL "ZZPROM","2",X3$,Z,"","","",0; ON Z GOTO 50575,50570
50570 ! IF Z8=1 THEN REMOVE (Z[1],KEY=A1$,DOM=50300); GOTO 50300 ELSE GOTO 50300
50580 Z8=1
50590 A[0]=B[1],A$(4,6)=B$(121,6); GOSUB 52630; GOSUB 52560
50600 GOSUB 52820; GOSUB 52590; GOSUB 51780
50610 GOTO 50770
50620 REM "
50630 GOSUB 52820
50640 GOSUB 51780
50650 REM "
50660 IF A$(10,6)=S$(1,6) THEN X0=0; GOTO 50810
50670 IF C0=3 THEN IF V8$="" THEN X0=X0-5; GOTO 50810 ELSE X0=NUM(V8$(LEN(V8$)-3,2)); GOTO 50810
50680 WRITE (Z[1],KEY=A1$)IOL=50170; RETURN 
50685 CALL "ZZPROM","7 BR2MAA",X3$,Z,"","","V",X0; ON Z GOTO 50720,52060,50570,52120,50685
50690 IF Z>10 THEN GOTO 52880
50700 GOTO 52120
50710 GOTO 50770
50720 REM "MODIFY
50730 X0=X0-1; IF Z9=1 THEN GOTO 50755 ELSE IF Z9=0 THEN Z9=1
50740 GOSUB 52510
50750 GOSUB 51780
50760 IF Z<0 THEN GOTO 50805 ELSE GOTO 50770
50770 REM "DATA SEQ
50780 C0=0,X0=-1,X1=1
50790 SETERR 53730; X$="",Q$="",C0=ABS(C0),X0=X0+1; IF C0=2 THEN IF X0>0 THEN X0=X0-2
50800 IF INT(C0)=3 THEN GOSUB 52440 ELSE IF C0>3 OR X0<0 THEN GOTO 50650
50810 ON X0 GOTO 50820,50880,50920,51090,50960,51130,51000,51170,51210,51250,51290,51330,51570,51370,51410,51450,51490,51530,50650
50820 REM "Statement date
50821 RETURN 
50822 SEL_DATE:
50830 CALL "ZZENTR","DX",A{ALL},A$,X4$,X3$,68,3,4,6,C0,"","{3"+X$,"","BR2MAA02","","",""
50840 IF A$(4,6)=S$(1,6) THEN IF C0=4 THEN GOTO 54020 ELSE GOTO 50830
50850 GOSUB 52630; IF Q$="" THEN GOTO 50830
50860 GOSUB 52820; GOSUB 51780
50870 GOTO 50790
50880 REM "Beginning balance
50890 CALL "ZZENTR","NX",A{ALL},A$,X4$,X3$,29,5,0,922,C0,M0$,"{3"+X$,"","BR2MAA04","","",""
50900 IF C0>0 THEN GOSUB 51780
50910 GOTO 50790
50920 REM "Deposits credited
50930 CALL "ZZENTR","NX",A{ALL},A$,X4$,X3$,29,6,1,922,C0,M0$,"{3"+X$,"","BR2MAA06","","",""
50940 IF C0>0 THEN GOSUB 51780
50950 GOTO 50790
50960 REM "Checks and other debits
50970 CALL "ZZENTR","NX",A{ALL},A$,X4$,X3$,29,7,2,922,C0,M0$,"{3"+X$,"","BR2MAA08","","",""
50980 IF C0>0 THEN GOSUB 51780
50990 GOTO 50790
51000 REM "Adjustments / Service fees
51010 X$="Enter deductions by the bank as a negative number"
51020 CALL "ZZENTR","NX",A{ALL},A$,X4$,X3$,29,8,3,922,C0,M0$,"{3"+X$,"","BR2MAA10","","",""
51030 IF C0>0 THEN GOSUB 51780
51040 GOTO 50790
51050 REM "Ending balance per bank
51060 GOTO 50790
51070 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,29,9,4,922,C0,M0$,"{3"+X$,"","BR2MAA12","","",""
51080 GOTO 50790
51090 REM "Number of deposit items
51100 CALL "ZZENTR","NX",A{ALL},A$,X4$,X3$,46,6,5,501,C0,M1$,"{3"+X$,"","BR2MAA14","","",""
51110 IF C0>0 THEN GOSUB 51780
51120 GOTO 50790
51130 REM "Number of check items
51140 CALL "ZZENTR","NX",A{ALL},A$,X4$,X3$,46,7,6,501,C0,M1$,"{3"+X$,"","BR2MAA16","","",""
51150 IF C0>0 THEN GOSUB 51780
51160 GOTO 50790
51170 REM "Working total, deposits
51180 GOTO 50790
51190 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,56,6,7,922,C0,M0$,"{3"+X$,"","BR2MAA18","","",""
51200 GOTO 50790
51210 REM "Working total, checks
51220 GOTO 50790
51230 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,56,7,8,922,C0,M0$,"{3"+X$,"","BR2MAA20","","",""
51240 GOTO 50790
51250 REM "Working total, adjustments
51260 GOTO 50790
51270 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,56,8,9,922,C0,M0$,"{3"+X$,"","BR2MAA22","","",""
51280 GOTO 50790
51290 REM "Recon number of deposit items
51300 GOTO 50790
51310 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,73,6,10,501,C0,M1$,"{3"+X$,"","BR2MAA24","","",""
51320 GOTO 50790
51330 REM "Recon number of check items
51340 GOTO 50790
51350 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,73,7,11,501,C0,M1$,"{3"+X$,"","BR2MAA26","","",""
51360 GOTO 50790
51370 REM "G/L balance to reconcile
51380 GOTO 50790
51390 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,29,11,12,922,C0,M0$,"{3"+X$,"","BR2MAA28","","",""
51400 GOTO 50790
51410 REM "Outstanding deposit items
51420 GOTO 50790
51430 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,29,12,13,922,C0,M0$,"{3"+X$,"","BR2MAA30","","",""
51440 GOTO 50790
51450 REM "Outstanding check items
51460 GOTO 50790
51470 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,29,13,14,922,C0,M0$,"{3"+X$,"","BR2MAA32","","",""
51480 GOTO 50790
51490 REM "Adjustments not yet booked
51500 GOTO 50790
51510 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,29,14,15,922,C0,M0$,"{3"+X$,"","BR2MAA34","","",""
51520 GOTO 50790
51530 REM "Discrepancy amount
51540 GOTO 50790
51550 CALL "ZZENTR","N",A{ALL},A$,X4$,X3$,29,16,16,922,C0,M0$,"{3"+X$,"","BR2MAA36","","",""
51560 GOTO 50790
51570 REM "G/L Fiscal Yr / AP to reconcile
51580 REM "Not connected for data entry
51590 GOTO 50790
51600 PRINT @(0,11),S$(1,7),
51610 CALL "ZZENTR","ZX",A{ALL},A$,X4$,X3$,1,11,10,6,C0,"","{3"+X$,"","","","",""
51620 PRINT @(0,11),A$(10,4),"/",A$(14,2),
51630 REM "Only get the correct g/l balance if field changed
51640 IF C0>0 THEN GOSUB 52690
51650 GOTO 50790
51660 REM "Alt sort keys
51670 RETURN 
51680 REM "BACKGROUND
51685 RETURN 
51690 PRINT (0,ERR=51695)'SB',
51700 PRINT @(1,3),"Bank code:",@(51,3),"Period End Date:",@(0,4),Z0$,
51710 PRINT @(0,5),"Statement beginning balance:",@(48,5),"# of",@(56,5),"Working totals",@(75,5),"# of",@(10,6),"Deposits credited:",@(4,7),"Checks and other debits:",@(1,8),"Adjustments / Service fees:",@(4,9),"Ending balance per bank:",@(0,10),Z0$,
51720 PRINT @(2,11),"Plus outstanding deposits:",@(4,12),"Less outstanding checks:",@(5,13),"Plus/Minus Bank errors:",@(11,14),"Future G/L items:",@(6,15),"Adjusted bank balance:",
51730 PRINT @(0,16),Z0$
51740 PRINT @(51,11),"G/L Balance: "
51750 PRINT @(47,12),"Less NOF checks:",@(47,13),"G/L Adjustments:",@(45,14),"Data entry errors:",@(45,15),"Amt. to reconcile:",
51760 PRINT (0,ERR=51765)'SF',
51770 RETURN 
51780 REM "DISPLAY DATA
51790 GOSUB 52590
51800 GOSUB 52020
51810 ! PRINT @(68,3),FND$(A$(4,6)),
51820 ! PRINT @(29,5),A[0]:M0$,@(29,6),A[1]:M0$,@(29,7),A[2]:M0$
51830 ! PRINT @(29,8),A[3]:M0$,@(29,9),A[4]:M0$,@(46,6),A[5]:M1$,@(46,7),A[6]:M1$
51840 ! PRINT @(56,6),A[1]-A[7]:M0$,@(56,7),A[2]-A[8]:M0$,@(56,8),A[3]-A[9]:M0$,@(73,6),A[5]-A[10]:M1$,@(73,7),A[6]-A[11]:M1$
51850 ! PRINT @(58,9),A$(10,4),"/",A$(14,2),@(68,9),FND$(A$(16,6)),@(64,11),A[12]:M0$,@(29,11),A[13]:M0$,@(29,12),A[14]:M0$,@(29,13),-A[19]:M0$
51860 A(18)=A[4]+A[13]-A[14]-A[19]+A[17]
51870 ! PRINT @(64,12),-A[21]:M0$,@(64,13),A[15]:M0$,@(64,14),A[20]:M0$
51880 RETURN 
51890 PRINT 'SB',@(1,L0-1),Q$," No.",@(15),"Date",@(24),"Description",@(68),"Amount",@(76),"Clr?"
51900 PRINT 'SF',@(1,L0),C$(5,9),@(13),FND$(C$(49,6)),@(24),C$(14,35),@(60),C[0]:M0$,@(77),C$(79,1),; IF C$(106,1)="Y" THEN PRINT @(1,L0+1),"Manual ck",
51910 IF C$(100,6)>A$(10,6) THEN PRINT @(12,L0+1),'BB',
51920 IF C$(67,12)=S$(1,12) AND C$(4,1)<>"4" THEN PRINT @(13,L0+1),C$(100,4),"/",C$(104,2),; IF C$(100,6)>A$(10,6) THEN PRINT 'EB',
51930 IF C$(67,12)<>S$(1,12) THEN PRINT @(4,L0+1),"G/L:",; CALL "ZZDISP","A",C$(67,12),"G/L",X3$,"","",12,L0+1,X4$; PRINT @(24,L0+1),D$(13,35),
51940 IF POS(C$(79,1)="D")>0 THEN PRINT @(42,L0+1),"Amount bank paid:",@(60),C[1]:M0$,@(42,L0+2),"Is this a bank error?",@(71,L0+2),C$(107,1),
51950 RETURN 
51960 REM "WHOLE SCREEN
51970 ! CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,X5$,X0,X1,0
51980 GOSUB 51680
51990 IF C9>0 THEN GOSUB 51780 ELSE GOSUB 52020
52000 IF ABS(C0)>4 THEN C0=ABS(C0)-5
52010 RETURN 
52020 REM "DISPLAY KEYS
52030 IF C9<0 THEN GOTO 52010
52040 ! PRINT @(12,3),A$(1,3),@(17,3),B$(4,30),
52050 RETURN 
52060 REM "DELETE
52070 REMOVE (Z[1],KEY=A1$,DOM=52075)
52080 A1$=""; GOTO 50570
52090 REM "ALT KEY DATA READS
52100 FIND (Z[2],KEY=A$(1,3),DOM=52105)IOL=50180
52110 RETURN 
52120 REM "ADD ENTRY
52130 IF Z9=0 THEN GOTO 52150 ELSE IF V7$>"" THEN X0=POS(" "<>V7$); IF X0>0 THEN X0=X0-1; GOTO 50805
52140 WRITE (Z[1],KEY=A1$)IOL=50170
52150 C9=0; IF Z=6 OR K1=0 THEN GOTO 54020 ELSE IF Z<4 THEN GOTO 50300 ELSE C0=-(3.1+(Z-4)/10); GOTO 52160
52160 REM "NEXT ENTRY IN FILE
52170 ON 10*FPT(C0)+2 GOTO 52240,52175
52180 A1$=KEY(Z[1],END=52310)
52190 IF A1$="" THEN GOTO 52160 ELSE IF A1$(1,LEN(K9$))<>K9$ THEN GOTO 52310
52200 A$(1,LEN(A1$))=A1$
52210 GOSUB 52090
52220 GOSUB 52020
52230 GOTO 50505
52240 REM "PRIOR ENTRY
52250 CALL "ZZKEYP",ERR=52260,Z[1],A1$; GOTO 52190
52260 CALL "ZZPROM","K0",X3$,S3,"","","",0; ON S3 GOTO 52265,54020
52270 PRINT 'RB',; CALL "ZZKEYL",ERR=52275,Z[1],A1$; GOTO 52190
52280 GOTO 50370
52290 GOTO 52310
52300 GOTO 50505
52310 CALL "ZZPROM","K1",X3$,S3,"","","",0; IF S3=1 THEN GOTO 54020 ELSE IF A1$="" THEN GOTO 52270 ELSE PRINT 'RB',; READ (Z[1],KEY=K9$,DOM=52315)
52320 ON S9 GOTO 52180,50370
52330 REM "Get next adjustment number
52335 GET_NXT:
52340 EXTRACT RECORD (Z[13],KEY=X3$(9,3)+"B/R")S0$
52350 C0=NUM(S0$(9,6)); S0$(9,6)=STR(C0+1:"000000"); WRITE RECORD (Z[13],KEY=X3$(9,3)+"B/R")S0$
52355 ML_CK_NO$=STR(C0:"000000000"),REFRESH_FLG=1,NEXT_ID=ML_DATE.CTL
52360 RETURN 
52370 REM "Forced read 
52380 IF ERR<>0 THEN GOTO 53730
52390 CALL "ZZREAD",Z[1],A1$,A$,A{ALL},S8; ON S8 GOTO 52395,50570
52400 GOSUB 51780
52410 CALL "ZZPROM","E0",X3$,0,"","","",0; GOTO 52430
52420 CALL "ZZPROM","E0A",X3$,0,"","","",0; GOTO 52430
52430 GOTO 50570
52440 REM 
52450 ON FPT(C0)*10 GOTO 52490,52460,52470,52490
52460 IF V8$="" THEN X0=X0+4; GOTO 52490 ELSE X0=NUM(V8$(POS(STR(X0:"00")<=V8$,2),2)); GOTO 52490
52470 IF V8$="" THEN X0=X0-6; GOTO 52480 ELSE X0=POS(STR(X0-1:"00")<=V8$,2)-2; IF X0<0 THEN X0=0; GOTO 52490 ELSE X0=NUM(V8$(X0,2)); GOTO 52490
52480 IF X0<0 THEN X0=0; GOTO 52490
52490 IF X0>0 THEN X0=X0-0
52500 C0=3; RETURN 
52510 REM "EXTRACT
52520 EXTRACT (Z[1],ERR=52370,KEY=A1$,DOM=52550)IOL=50170
52530 C9=1,Z9=1; GOSUB 51660
52540 GOSUB 52820
52550 RETURN 
52560 REM "EXTRACT NEW ENTRY
52570 WRITE (Z[1],KEY=A1$,DOM=52420)IOL=50170; GOTO 52510
52580 RETURN 
52590 REM "Recompute bank statement ebal
52600 A[4]=A[0]+A[1]-A[2]+A[3] ! PRINT @(29,9),A[4]:M0$
52610 A[16]=A[12]-A[21]+A[15]+A[20]-(A[4]+A[13]-A[14]-A[19]+A[17]) ! PRINT @(64,15),A[16]:M0$
52620 RETURN 
52630 REM "Get G/L fy/ap for statemtns date
52640 IF POS(" "<>A$(4,6))=0 THEN GOTO 52810
52650 CALL "ZZ2FYP",X3$,A$(4,6),Q$; IF Q$="" THEN GOTO 52810
52660 A[12]=0; IF Q$(19,6)=A$(4,6) THEN A$(10,6)=Q$(1,6); GOTO 52690
52670 REM "Get the period data for the prior period
52680 IF Q$>"" THEN Z9$=Q$(13,6); CALL "ZZ2FYP",X3$,Z9$,Q$; A$(10,6)=Q$(1,6)
52690 A$(16,6)=Q$(19,6),Y$=A$(10,4),P$=A$(14,2),R0$=B$(69,12),R1$=R0$
52700 DIM P6$(105); P6$(13,2)="12"; READ (Z[13],KEY=X3$(9,3)+"G/LYE"+Y$,DOM=52710)P6$
52710 P6=NUM(P6$(13,2)); IF Y$=G2$(34,4) THEN GOTO 52790 ELSE Z9$=STR(NUM(Y$)-1:"0000")
52720 DIM P7$(105); P7$(13,2)="12"; READ (Z[13],KEY=X3$(9,3)+"G/LYE"+Z9$,DOM=52730)P7$; REM "GET END BAL PRIOR YEAR
52730 P7=NUM(P7$(13,2)); CALL "FR2UZA",X3$,P7,P9$,Z9$,P7$(13,2),R1,R0$,R1$,"","",X9$,Y{ALL},""
52740 FOR X=1 TO NUM(P$)
52750 CALL "FR2UZA",X3$,P7,P8$,Y$,STR(X:"00"),R2,R0$,R1$,"","",X9$,Y{ALL},""
52760 R1=R1+R2
52770 NEXT X
52780 R0=R1; GOTO 52795
52790 CALL "FR2UZA",X3$,P6,P9$,Y$,P$,R0,R0$,R1$,"","",X9$,Y{ALL},""
52800 A[12]=R0
52810 RETURN 
52820 REM "Set totals based on BR1 data
52830 PRINT 'DIALOGUE'(30,14,48,5,"Calculating Totals From Bank Rec Data "),@(0,1),"Update...........",
52831 ! PRINT 'SHOW'(-1)
52840 GOSUB 52630
52850 CALL "BR2MAB",X3$,A$,Z[3],A{ALL}
52851 ! PRINT 'SHOW'(3)
52852 WRITE (Z[1],KEY=A1$)IOL=50170
52853 WAIT 1
52870 RETURN 
52880 REM "Maintain data
52890 L0=18,C0$=A$(1,3)+STR(Z-10),Q$="Check"; IF C0$(4,1)="2" THEN Q$="Deposit" ELSE IF C0$(4,1)="3" THEN Q$="Adj." ELSE IF C0$(4,1)="4" THEN Q$="NOF Ck"
52900 PRINT 'SB',@(1,L0-1),Q$," No.",@(15),"Date",@(24),"Description",@(68),"Amount",@(76),"Clr?"
52910 IF POS(C0$(4,1)="34")>0 THEN READ (Z[3],KEY=C0$(1,4),DOM=53300); GOTO 53300
52920 REM "Enter the item number
52930 X$="Press F10 to display starting at beginning",Z9$=""; IF C0$(4,1)="1" THEN X$=X$+", F5 to clear a range of checks",Z9$="F" ELSE IF C0$(4,1)="3" THEN Z9$="F",X$="Press F10 for first, F5 to add new Adjustment"
52940 DIM Q$(9); CALL "ZZENTR","SUX"+Z9$,Q{ALL},Q$,X4$,X3$,1,L0,1,9,C0,"",""+X$,"","BR2MAA00","","",""
52950 IF C0$(4,1)="3" THEN IF C0=-14 THEN GOSUB 52330; Q$(1)=STR(C0:"000000000"),C0=0; PRINT @(1,L0),Q$
52960 IF ABS(C0)=14 THEN PRINT @(0,L0),'CL',"Check range",; GOTO 53580
52970 IF ABS(C0)=4 THEN GOTO 53550 ELSE REM IF Q$(1,9)=S$(1,9) THEN GOTO 08060
52980 REM IF C0$(4,1)="3" THEN IF Q$(1,9)=S$(1,9) THEN GOTO 08060
52990 IF C0$(4,1)="1" THEN C0=NUM(Q$,ERR=52940); GOTO 53010
53000 C0=-1,C0=NUM(Q$,ERR=53005)
53010 REM "C0 is item number
53020 C$=C0$(1,4)+STR(C0:Z2$(1,9))
53030 IF C0$(4,1)="3" THEN IF C0<0 THEN C$(5,9)=Q$(1,9)
53040 EXTRACT (Z[3],KEY=C$,DOM=53050)IOL=50190; GOTO 53130
53050 REM "Add this entry?
53060 IF POS(C0$(4,1)="34")>0 AND C$(5,9)<>"000000000" THEN GOTO 53075
53070 GOTO 53300
53080 CALL "ZZPROM","2",X3$,Z,"","","",0; ON Z GOTO 53085,52920
53090 REM T Q$=C$
53100 Q$=C$
53110 DIM C$(127),C[3]; C$(1)=Q$,C$(79,1)="Y",C$(100,6)=A$(10,6); IF C0$(4,1)="3" THEN C$(67,12)=B$(81,12)
53120 GOTO 53130
53130 REM "DISPLAY DATA
53140 CALL "BR2MAC",X3$,A$,A{ALL},C$,C{ALL},-1
53150 DIM D$(120); IF C$(4,1)="3" THEN FIND (Z[4],KEY=C$(67,12),DOM=53155)IOL=50200
53160 PRINT 'SF',@(1,L0),C$(5,9),@(13),FND$(C$(49,6)),@(24),C$(14,35),@(60),C[0]:M0$,@(77),C$(79,1),; IF C$(106,1)="Y" THEN PRINT @(1,L0+1),"Manual ck",
53170 IF C$(100,6)>A$(10,6) THEN PRINT @(12,L0+1),'BB',
53180 IF C$(67,12)=S$(1,12) AND C$(4,1)<>"4" THEN PRINT @(13,L0+1),C$(100,4),"/",C$(104,2),; IF C$(100,6)>A$(10,6) THEN PRINT 'EB',
53190 IF C$(67,12)<>S$(1,12) THEN PRINT @(4,L0+1),"G/L:",; CALL "ZZDISP","A",C$(67,12),"G/L",X3$,"","",12,L0+1,X4$; PRINT @(24,L0+1),D$(13,35),
53200 IF POS(C$(79,1)="D")>0 THEN PRINT @(42,L0+1),"Amount bank paid:",@(60),C[1]:M0$,@(42,L0+2),"Is this a bank error?",@(71,L0+2),C$(107,1),
53210 GOSUB 53330
53220 IF POS(C$(4,1)="34")>0 THEN IF C[0]=0 THEN REMOVE (Z[3],KEY=C$(1,13)+C$(119,2),DOM=53240); GOTO 53240
53230 WRITE (Z[3],KEY=C$(1,13)+C$(119,2))IOL=50190
53240 PRINT @(0,L0),'CE',
53250 CALL "BR2MAC",X3$,A$,A{ALL},C$,C{ALL},1; GOSUB 52590; GOSUB 51780
53260 IF POS(C$(4,1)="34")>0 THEN GOTO 53300
53270 REM "Get prior entry?
53280 IF ABS(C9)=3.2 THEN K$=KEP(Z[3],ERR=52920); GOTO 53310
53290 IF ABS(C9)=4 THEN GOTO 52920
53300 K$=KEY(Z[3],END=53315)
53310 IF K$(1,4)=C0$(1,4) THEN C$=K$(1,15); GOTO 53040
53320 GOTO 52920
53330 REM "Maintain fields in BR0 record
53340 C1$=C$(79,1),C2$=C$(107,1),C1=C[1]; IF POS(C$(79,1)="YD")=0 THEN C1=C[0]
53350 IF POS(C0$(4,1)="34")>0 THEN CALL "ZZENTR","D",C{ALL},C$,X4$,X3$,13,L0,49,6,C0,"",X$,"","","","",""; ON INT(C0-1) GOTO 53355,53355,53465
53360 IF POS(C0$(4,1)="34")>0 THEN X$=""; CALL "ZZENTR","S",C{ALL},C$,X4$,X3$,24,L0,14,35,C0,"",X$,"","","","",""; ON INT(C0-1) GOTO 53365,53350,53465
53370 X$="0 to delete"; IF C0$(4,1)="4" THEN X$="Enter amount cleared, use negative amount for NOF Deposits, "+X$ ELSE IF C$(4,1)="3" THEN X$="Enter bank deductions as NEGATIVE, additions as positive, "+X$
53380 IF POS(C0$(4,1)="34")>0 THEN CALL "ZZENTR","N",C{ALL},C$,X4$,X3$,60,L0,0,922,C0,M0$,X$,"","","","",""; ON INT(C0-1) GOTO 53385,53360,53465
53390 X$="'Y'-cleared, 'D' is on stmt but discrepancy, ^ for prior"
53400 IF POS(C$(4,1)="34")=0 THEN CALL "ZZENTR","SEXRU",C{ALL},C$,X4$,X3$,77,L0,79,1,C9,"",""+X$,"YND","","","",""; X$=""; IF INT(C9)<>0 THEN GOTO 53405 ELSE ON INT(C9-1) GOTO 53405,53365,53465
53410 IF C$(79,1)="N" THEN C[1]=0 ELSE IF C$(79,1)="Y" THEN C[1]=C[0],C$(107,1)="N" ELSE GOSUB 53480; IF C0=2 THEN GOTO 53370
53420 IF POS(C0$(4,1)="3")=0 THEN GOTO 53465
53430 REM "Adjustments
53440 X$=""; CALL "ZZENTR","AX",C{ALL},C$,X4$,X3$,12,L0+1,67,12,C0,"G/L",""+X$,"","","GL1","GL2MAA",""; IF ABS(C0)>4 THEN GOSUB 51960; GOSUB 51885; GOTO 53440; REM "ON INT(C0-1) GOTO 08556,08535,08590
53450 DIM D$(100); FIND (Z[4],KEY=C$(67,12),DOM=53430)IOL=50200
53460 PRINT @(24,L0+1),D$(13,35),
53470 RETURN 
53480 REM "Enter the amount paid at bank
53490 C0=0; IF ABS(INT(C9))=3 THEN GOTO 53530
53500 PRINT @(42,L0+1),"Amount bank paid:",@(42,L0+2),"Is this a bank error?"
53510 X$=""; CALL "ZZENTR","N&",C{ALL},C$,X4$,X3$,60,L0+1,1,922,C0,M0$,X$,"","","","",""; IF C0=4 OR C0=2 THEN GOTO 53530
53520 CALL "ZZENTR","SEXRU",C{ALL},C$,X4$,X3$,71,L0+2,107,1,C0,"",""+X$,"YN","","","",""; IF ABS(C0)=2 THEN GOTO 53510
53530 IF C[0]=C[1] THEN C$(79,1)="Y",C[1]=C[0],C$(107,1)=""
53540 RETURN 
53550 REM "
53560 PRINT @(0,L0-1),'CE',
53570 GOTO 50650
53580 REM "Clear a range of checks
53590 PRINT @(24,L0),"Mark check xxxxxxxxx to xxxxxxxxx as cleared"
53600 DIM Q$(18); CALL "ZZENTR","ZX",Q{ALL},Q$,X4$,X3$,35,L0,1,9,C0,"",""+X$,"","","","",""
53610 CALL "ZZENTR","ZX",Q{ALL},Q$,X4$,X3$,48,L0,10,9,C0,"",""+X$,"","","","",""; IF ABS(C0)=2 THEN GOTO 53600
53620 CALL "ZZPROM","YE",X3$,Q,"OK to proceed?","","",0; ON Q GOTO 53630,53580,52920
53630 READ (Z[3],KEY=C0$(1,4)+Q$(1,9),DOM=53635)IOL=50190; GOTO 53650
53640 READ (Z[3],END=53710)IOL=50190
53650 IF C$(5,9)>Q$(10,9) THEN GOTO 53710 ELSE IF POS(C$(79,1)="YD")>0 THEN GOTO 53640
53660 CALL "BR2MAC",X3$,A$,A{ALL},C$,C{ALL},-1; REM "to fix up o/s check amount
53670 C1$=C$(79,1),C[1]=C[0],C1=C[1],C$(79,1)="Y"
53680 WRITE (Z[3],KEY=C$(1,13)+C$(119,2))IOL=50190
53690 CALL "BR2MAC",X3$,A$,A{ALL},C$,C{ALL},1; GOSUB 52590; GOSUB 51780
53700 GOTO 53640
53710 PRINT @(0,L0),'CE',; GOTO 52920
53720 DEF FND$(Z9$)=Z9$(NUM(X3$(48,1))*2+1,2)+X3$(59,1)+Z9$(7-NUM(X3$(48,1))*2,2)+X3$(59,1)+STR((ASC(Z9$(1,1))-65)*10+1900+NUM(Z9$(2,1))-1570*POS("  "=Z9$(1,2)):"####")
53730 REM "ERROR PROCESSING
53740 IF ERR=69 THEN GOTO 53940
53750 Y5=ERR,Y6=TCB(5); IF Y5=68 OR Y5=69 THEN GOTO 53940
53760 SETERR 53765; Y8$=LST(PGM(Y6))
53770 CALL "ZZERRM",Y8$,X0$,Y7$,X3$,Y5,Y6,Y7,Y8,0
53780 REM 
53790 ON Y7 GOTO 53810,53860,54010,53820,53850
53800 REM 
53810 RETRY 
53820 SETERR 53840
53830 EXECUTE Y7$
53840 SETERR 53730; RETRY 
53850 SETERR 0000; RETRY 
53860 REM " TRANSFER CONTROL
53870 ON Y8 GOTO 54020,50295,54045
53880 GOTO 50295
53890 GOTO 54010
53900 SETESC 53930
53910 SETERR 53930
53920 IF X3$(47,1)<>"1" THEN RETURN ELSE SETESC 0000; RETURN 
53930 SETERR 53730; SETESC 53900; RETURN 
53940 REM "CTRL LOGIC
53950 SETERR 53730; GOSUB 51680; GOSUB 51960; GOSUB 51885
53960 ON C9 GOTO 50400,53440
53970 RETURN 
53980 REM "FILES
53990 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
54000 RETURN 
54010 REM "EXIT PROGRAM
54020 REM "END PROGRAM
54030 Y8=2
54040 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
54050 SETERR 54060; Q1$=A1$; EXIT 
54060 SETESC 53930
54070 RUN "ZMENU"
54080 END 
55000 SEL_AMTS:
55010 ENDING_BAL_PER_BANK$=STR(NUM(BEG_BAL$)+NUM(DEPOSITS_CREDITED$)-NUM(CHECKS_OR_OTH_DEBITS$)+NUM(ADJUSTMENTS_OR_FEES$)),REFRESH_FLG=1
55012 WK_TOTAL$=STR(NUM(DEPOSITS_CREDITED$)-NUM(WORKING_TOT_DEPOSIT$))
55020 WK_TOTAL$=STR(NUM(DEPOSITS_CREDITED$)-NUM(WORKING_TOT_DEPOSIT$))
55030 WK_TOTAL1$=STR(NUM(CHECKS_OR_OTH_DEBITS$)-NUM(WORKING_TOT_CHECKS$))
55040 WK_TOTAL2$=STR(NUM(ADJUSTMENTS_OR_FEES$)-NUM(WORKING_TOT_ADJUST$))
55050 WK_TOTAL3$=STR(NUM(NUM_OF_DEPOSIT_ITEMS$)-NUM(RECON_NUM_OF_DEP_ITM$))
55060 WK_TOTAL4$=STR(NUM(NUM_OF_CHECK_ITEMS$)-NUM(RECON_NUM_OF_CHK_ITM$))
55070 DISCREPANCY_AMTS$=STR(NUM(ENDING_BAL_PER_BANK$)+NUM(OUTSTDING_DEP_ITEMS$)-NUM(OUTSTDING_CHK_ITEMS$)+NUM(AMT_PD_FYOP_GL_RECON$)-NUM(BANK_ERRORS$))
55999 RETURN 
56000 ! "186002-Bank Rec should pull the period ending date for the current 
56001 ! "       period instead of the prior. Does pull correct balance
56002 REM "200493-In Bank Rec processing, the amount to reconcile keeps changing. 
56003 REM "206227-He is getting an error when he tries to reconcile his first 
56004 REM "231729-Issues with Bank Code in Bank Reconciliation Data           
60000 DATES:
60001 IF A$="" THEN GOSUB FIND_REC; REM "206227
60005 IF A$(4,6)<>STMT_DATE$ THEN A$(4,6)=STMT_DATE$; GOSUB 52630; GOSUB 52820; NO=1; GOSUB 51780; PRINT 'POP'; READ (_FIL_NO,KEY=_KEY$); GOSUB PROCESS_READ ELSE RETURN ; REM "SSP#200493
60006 GOSUB NUM_TO_STR; GOSUB SEL_AMTS; REM "SSP#200493
60010 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD; REM "SSP#200493
60020 XX$=FND$(PERIOD_END_DATE$),FY_OP_TO_REC$=XX$(7)+XX$(1,2),REFRESH_FLG=1
60030 RETURN 
