0010 ! ZGXOPO - File Maintenance Program for ZZS_Rpt_selection (="ZZS"+%C$)
0035 REM "5.7 - 08/20/10 - 11.893611 - crg - SSP# 240570
0037 REM "240570-GUI Printing - Support for queueing of reports.             
0040 REM "Copyright 2010 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZZS"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="PRG_NAME$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 REM GOSUB CLEAR_REC
0535 ARG_1$=_KEY$
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 _KEY$=PRG_NAME$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 ! READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 _KEY$=PRG_NAME$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2025 EXIT ! <><><> dff
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2215 EXIT ! <><><> dff
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 GOTO 3070 ! <><><> dff
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3225 ! READ (_FIL_NO,KEY=ARG_1$,DOM=*NEXT) ! @CH-JIR
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3330 _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=PRG_NAME.CTL,_FIRST_FIELD=RPT_SELEC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN PRG_NAME$=""
13030 RPT_SELEC$=""
13040 RPT_DESC$=""
13050 RPT_OPT$=""
13060 RPT_SEQ$=""
13070 RPT_SHIPTO$=" "
13080 RPT_AGEINV$=""
13090 RPT_REPTYPE$=""
13100 RPT_ZEROBAL$=""
13110 RPT_POSTAGE$=""
13120 RPT_NAMEADD$=""
13130 RPT_INVRPT$=""
13140 RPT_FISYR$=""
13150 RPT_PER$=""
13160 RPT_CCINV$=""
13170 RPT_AGEDATE$=""
13180 PRT_MODE$=""
13190 RPT_OUTDEV$=""
13200 RPT_VERT$=""
13210 RPT_HORIZ$=""
13220 RPT_AUX1$=""
13230 RPT_AUX2$=""
13240 RPT_AUX3$=""
13250 RPT_AUX4$=""
13260 RPT_LINES$=""
13270 RPT_FORMCODE$=""
13280 NOT_USED$=""
13290 RPT_JOBCARD$=""
13300 RPT_JOBCARD_FLG$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(29,"N")
15030 IF _ORIG.PRG_NAME$=_CUR.PRG_NAME$ OR PRG_NAME$=_CUR.PRG_NAME$ THEN GOTO *NEXT ELSE IF _ORIG.PRG_NAME$=PRG_NAME$ THEN _CHG2$=_CHG2$+SEP+MSG("PROG_N")+" = "+_CUR.PRG_NAME$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PROG_N")+" = "+_CUR.PRG_NAME$
15040 IF _ORIG.RPT_SELEC$=_CUR.RPT_SELEC$ OR RPT_SELEC$=_CUR.RPT_SELEC$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_SELEC$=RPT_SELEC$ THEN _CHG2$=_CHG2$+SEP+MSG("SELECTION")+" = "+_CUR.RPT_SELEC$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SELECTION")+" = "+_CUR.RPT_SELEC$
15050 IF _ORIG.RPT_DESC$=_CUR.RPT_DESC$ OR RPT_DESC$=_CUR.RPT_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_DESC$=RPT_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC")+" = "+_CUR.RPT_DESC$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC")+" = "+_CUR.RPT_DESC$
15060 IF _ORIG.RPT_OPT$=_CUR.RPT_OPT$ OR RPT_OPT$=_CUR.RPT_OPT$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_OPT$=RPT_OPT$ THEN _CHG2$=_CHG2$+SEP+MSG("OPTIONS")+" = "+_CUR.RPT_OPT$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OPTIONS")+" = "+_CUR.RPT_OPT$
15070 IF _ORIG.RPT_SEQ$=_CUR.RPT_SEQ$ OR RPT_SEQ$=_CUR.RPT_SEQ$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_SEQ$=RPT_SEQ$ THEN _CHG2$=_CHG2$+SEP+MSG("SEQ")+" = "+_CUR.RPT_SEQ$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEQ")+" = "+_CUR.RPT_SEQ$
15080 IF _ORIG.RPT_SHIPTO$=_CUR.RPT_SHIPTO$ OR RPT_SHIPTO$=_CUR.RPT_SHIPTO$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_SHIPTO$=RPT_SHIPTO$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIN_ST_A")+" = "+_CUR.RPT_SHIPTO$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIN_ST_A")+" = "+_CUR.RPT_SHIPTO$
15090 IF _ORIG.RPT_AGEINV$=_CUR.RPT_AGEINV$ OR RPT_AGEINV$=_CUR.RPT_AGEINV$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_AGEINV$=RPT_AGEINV$ THEN _CHG2$=_CHG2$+SEP+" = "+_CUR.RPT_AGEINV$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+_CUR.RPT_AGEINV$
15100 IF _ORIG.RPT_REPTYPE$=_CUR.RPT_REPTYPE$ OR RPT_REPTYPE$=_CUR.RPT_REPTYPE$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_REPTYPE$=RPT_REPTYPE$ THEN _CHG2$=_CHG2$+SEP+" = "+_CUR.RPT_REPTYPE$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+_CUR.RPT_REPTYPE$
15110 IF _ORIG.RPT_ZEROBAL$=_CUR.RPT_ZEROBAL$ OR RPT_ZEROBAL$=_CUR.RPT_ZEROBAL$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_ZEROBAL$=RPT_ZEROBAL$ THEN _CHG2$=_CHG2$+SEP+" = "+_CUR.RPT_ZEROBAL$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+_CUR.RPT_ZEROBAL$
15120 IF _ORIG.RPT_POSTAGE$=_CUR.RPT_POSTAGE$ OR RPT_POSTAGE$=_CUR.RPT_POSTAGE$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_POSTAGE$=RPT_POSTAGE$ THEN _CHG2$=_CHG2$+SEP+" = "+_CUR.RPT_POSTAGE$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+_CUR.RPT_POSTAGE$
15130 IF _ORIG.RPT_NAMEADD$=_CUR.RPT_NAMEADD$ OR RPT_NAMEADD$=_CUR.RPT_NAMEADD$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_NAMEADD$=RPT_NAMEADD$ THEN _CHG2$=_CHG2$+SEP+" = "+_CUR.RPT_NAMEADD$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+_CUR.RPT_NAMEADD$
15140 IF _ORIG.RPT_INVRPT$=_CUR.RPT_INVRPT$ OR RPT_INVRPT$=_CUR.RPT_INVRPT$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_INVRPT$=RPT_INVRPT$ THEN _CHG2$=_CHG2$+SEP+" = "+_CUR.RPT_INVRPT$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+_CUR.RPT_INVRPT$
15150 IF _ORIG.RPT_FISYR$=_CUR.RPT_FISYR$ OR RPT_FISYR$=_CUR.RPT_FISYR$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_FISYR$=RPT_FISYR$ THEN _CHG2$=_CHG2$+SEP+" = "+_CUR.RPT_FISYR$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+_CUR.RPT_FISYR$
15160 IF _ORIG.RPT_PER$=_CUR.RPT_PER$ OR RPT_PER$=_CUR.RPT_PER$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_PER$=RPT_PER$ THEN _CHG2$=_CHG2$+SEP+" = "+_CUR.RPT_PER$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+_CUR.RPT_PER$
15170 IF _ORIG.RPT_CCINV$=_CUR.RPT_CCINV$ OR RPT_CCINV$=_CUR.RPT_CCINV$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_CCINV$=RPT_CCINV$ THEN _CHG2$=_CHG2$+SEP+" = "+_CUR.RPT_CCINV$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+" = "+_CUR.RPT_CCINV$
15180 IF _ORIG.RPT_AGEDATE$=_CUR.RPT_AGEDATE$ OR RPT_AGEDATE$=_CUR.RPT_AGEDATE$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_AGEDATE$=RPT_AGEDATE$ THEN _CHG2$=_CHG2$+SEP+"TopForm Date Format = "+_CUR.RPT_AGEDATE$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+"TopForm Date Format = "+_CUR.RPT_AGEDATE$
15190 IF _ORIG.PRT_MODE$=_CUR.PRT_MODE$ OR PRT_MODE$=_CUR.PRT_MODE$ THEN GOTO *NEXT ELSE IF _ORIG.PRT_MODE$=PRT_MODE$ THEN _CHG2$=_CHG2$+SEP+MSG("PRIN_MODE")+" = "+_CUR.PRT_MODE$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PRIN_MODE")+" = "+_CUR.PRT_MODE$
15200 IF _ORIG.RPT_OUTDEV$=_CUR.RPT_OUTDEV$ OR RPT_OUTDEV$=_CUR.RPT_OUTDEV$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_OUTDEV$=RPT_OUTDEV$ THEN _CHG2$=_CHG2$+SEP+MSG("OUTPUT_DEV")+" = "+_CUR.RPT_OUTDEV$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("OUTPUT_DEV")+" = "+_CUR.RPT_OUTDEV$
15210 IF _ORIG.RPT_VERT$=_CUR.RPT_VERT$ OR RPT_VERT$=_CUR.RPT_VERT$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_VERT$=RPT_VERT$ THEN _CHG2$=_CHG2$+SEP+MSG("VERT_P_M")+" = "+_CUR.RPT_VERT$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("VERT_P_M")+" = "+_CUR.RPT_VERT$
15220 IF _ORIG.RPT_HORIZ$=_CUR.RPT_HORIZ$ OR RPT_HORIZ$=_CUR.RPT_HORIZ$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_HORIZ$=RPT_HORIZ$ THEN _CHG2$=_CHG2$+SEP+MSG("HORI_P_M")+" = "+_CUR.RPT_HORIZ$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("HORI_P_M")+" = "+_CUR.RPT_HORIZ$
15230 IF _ORIG.RPT_AUX1$=_CUR.RPT_AUX1$ OR RPT_AUX1$=_CUR.RPT_AUX1$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_AUX1$=RPT_AUX1$ THEN _CHG2$=_CHG2$+SEP+MSG("AUX_PC_1")+" = "+_CUR.RPT_AUX1$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("AUX_PC_1")+" = "+_CUR.RPT_AUX1$
15240 IF _ORIG.RPT_AUX2$=_CUR.RPT_AUX2$ OR RPT_AUX2$=_CUR.RPT_AUX2$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_AUX2$=RPT_AUX2$ THEN _CHG2$=_CHG2$+SEP+MSG("AUX_PC_2")+" = "+_CUR.RPT_AUX2$,_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("AUX_PC_2")+" = "+_CUR.RPT_AUX2$
15250 IF _ORIG.RPT_AUX3$=_CUR.RPT_AUX3$ OR RPT_AUX3$=_CUR.RPT_AUX3$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_AUX3$=RPT_AUX3$ THEN _CHG2$=_CHG2$+SEP+MSG("AUX_PC_3")+" = "+_CUR.RPT_AUX3$,_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("AUX_PC_3")+" = "+_CUR.RPT_AUX3$
15260 IF _ORIG.RPT_AUX4$=_CUR.RPT_AUX4$ OR RPT_AUX4$=_CUR.RPT_AUX4$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_AUX4$=RPT_AUX4$ THEN _CHG2$=_CHG2$+SEP+MSG("AUX_PC_4")+" = "+_CUR.RPT_AUX4$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("AUX_PC_4")+" = "+_CUR.RPT_AUX4$
15270 IF _ORIG.RPT_LINES$=_CUR.RPT_LINES$ OR RPT_LINES$=_CUR.RPT_LINES$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_LINES$=RPT_LINES$ THEN _CHG2$=_CHG2$+SEP+MSG("LINE_P_P")+" = "+_CUR.RPT_LINES$,_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LINE_P_P")+" = "+_CUR.RPT_LINES$
15280 IF _ORIG.RPT_FORMCODE$=_CUR.RPT_FORMCODE$ OR RPT_FORMCODE$=_CUR.RPT_FORMCODE$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_FORMCODE$=RPT_FORMCODE$ THEN _CHG2$=_CHG2$+SEP+MSG("SPEC_F_C")+" = "+_CUR.RPT_FORMCODE$,_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SPEC_F_C")+" = "+_CUR.RPT_FORMCODE$
15290 IF _ORIG.NOT_USED$=_CUR.NOT_USED$ OR NOT_USED$=_CUR.NOT_USED$ THEN GOTO *NEXT ELSE IF _ORIG.NOT_USED$=NOT_USED$ THEN _CHG2$=_CHG2$+SEP+MSG("NOT_IN_USE")+" = "+_CUR.NOT_USED$,_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("NOT_IN_USE")+" = "+_CUR.NOT_USED$
15300 IF _ORIG.RPT_JOBCARD$=_CUR.RPT_JOBCARD$ OR RPT_JOBCARD$=_CUR.RPT_JOBCARD$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_JOBCARD$=RPT_JOBCARD$ THEN _CHG2$=_CHG2$+SEP+MSG("JOB_C_D")+" = "+_CUR.RPT_JOBCARD$,_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("JOB_C_D")+" = "+_CUR.RPT_JOBCARD$
15310 IF _ORIG.RPT_JOBCARD_FLG$=_CUR.RPT_JOBCARD_FLG$ OR RPT_JOBCARD_FLG$=_CUR.RPT_JOBCARD_FLG$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_JOBCARD_FLG$=RPT_JOBCARD_FLG$ THEN _CHG2$=_CHG2$+SEP+MSG("ALLO_C_M")+" = "+_CUR.RPT_JOBCARD_FLG$,_CHG_VAR$(29,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALLO_C_M")+" = "+_CUR.RPT_JOBCARD_FLG$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN PRG_NAME$=_CUR.PRG_NAME$
16030 IF _CHG_VAR$(2,1)="Y" THEN RPT_SELEC$=_CUR.RPT_SELEC$
16040 IF _CHG_VAR$(3,1)="Y" THEN RPT_DESC$=_CUR.RPT_DESC$
16050 IF _CHG_VAR$(4,1)="Y" THEN RPT_OPT$=_CUR.RPT_OPT$
16060 IF _CHG_VAR$(5,1)="Y" THEN RPT_SEQ$=_CUR.RPT_SEQ$
16070 IF _CHG_VAR$(6,1)="Y" THEN RPT_SHIPTO$=_CUR.RPT_SHIPTO$
16080 IF _CHG_VAR$(7,1)="Y" THEN RPT_AGEINV$=_CUR.RPT_AGEINV$
16090 IF _CHG_VAR$(8,1)="Y" THEN RPT_REPTYPE$=_CUR.RPT_REPTYPE$
16100 IF _CHG_VAR$(9,1)="Y" THEN RPT_ZEROBAL$=_CUR.RPT_ZEROBAL$
16110 IF _CHG_VAR$(10,1)="Y" THEN RPT_POSTAGE$=_CUR.RPT_POSTAGE$
16120 IF _CHG_VAR$(11,1)="Y" THEN RPT_NAMEADD$=_CUR.RPT_NAMEADD$
16130 IF _CHG_VAR$(12,1)="Y" THEN RPT_INVRPT$=_CUR.RPT_INVRPT$
16140 IF _CHG_VAR$(13,1)="Y" THEN RPT_FISYR$=_CUR.RPT_FISYR$
16150 IF _CHG_VAR$(14,1)="Y" THEN RPT_PER$=_CUR.RPT_PER$
16160 IF _CHG_VAR$(15,1)="Y" THEN RPT_CCINV$=_CUR.RPT_CCINV$
16170 IF _CHG_VAR$(16,1)="Y" THEN RPT_AGEDATE$=_CUR.RPT_AGEDATE$
16180 IF _CHG_VAR$(17,1)="Y" THEN PRT_MODE$=_CUR.PRT_MODE$
16190 IF _CHG_VAR$(18,1)="Y" THEN RPT_OUTDEV$=_CUR.RPT_OUTDEV$
16200 IF _CHG_VAR$(19,1)="Y" THEN RPT_VERT$=_CUR.RPT_VERT$
16210 IF _CHG_VAR$(20,1)="Y" THEN RPT_HORIZ$=_CUR.RPT_HORIZ$
16220 IF _CHG_VAR$(21,1)="Y" THEN RPT_AUX1$=_CUR.RPT_AUX1$
16230 IF _CHG_VAR$(22,1)="Y" THEN RPT_AUX2$=_CUR.RPT_AUX2$
16240 IF _CHG_VAR$(23,1)="Y" THEN RPT_AUX3$=_CUR.RPT_AUX3$
16250 IF _CHG_VAR$(24,1)="Y" THEN RPT_AUX4$=_CUR.RPT_AUX4$
16260 IF _CHG_VAR$(25,1)="Y" THEN RPT_LINES$=_CUR.RPT_LINES$
16270 IF _CHG_VAR$(26,1)="Y" THEN RPT_FORMCODE$=_CUR.RPT_FORMCODE$
16280 IF _CHG_VAR$(27,1)="Y" THEN NOT_USED$=_CUR.NOT_USED$
16290 IF _CHG_VAR$(28,1)="Y" THEN RPT_JOBCARD$=_CUR.RPT_JOBCARD$
16300 IF _CHG_VAR$(29,1)="Y" THEN RPT_JOBCARD_FLG$=_CUR.RPT_JOBCARD_FLG$
16990 RETURN 
17000 ! 
17010 LOAD_PRINT_DEV:
17015 CR_DEV$=MID(RPT_OUTDEV$,1,2)
17018 RPT_OUTDEV$="",SS$=TSK(0)
17020 ZZ9=HFN
17030 OPEN (ZZ9)"ZZ9"+%C$
17040 KEY_ZZ9$=KEY(ZZ9,END=END_LOAD_PRINT_DEV)
17050 READ (ZZ9,KEY=KEY_ZZ9$)ZZ9$
17055 IF POS(ZZ9$(1,2)=SS$)=0 THEN GOTO 17040
17057 GOSUB CHECK_IS_PDF; IF PRT_MODE$="S" AND NOT(IS_PDF_DRIVER) THEN GOTO 17040
17060 RPT_OUTDEV$=RPT_OUTDEV$+ZZ9$(1,2)+" - "+ZZ9$(3,30)+SEP
17077 IF ZZ9$(43,1)<>"2" THEN GOTO 17040
17090 GOTO 17040
17100 END_LOAD_PRINT_DEV:
17105 XX=POS(CR_DEV$=RPT_OUTDEV$); IF XX<>0 THEN XXX=POS(SEP=RPT_OUTDEV$(XX)),CR_DEV$=RPT_OUTDEV$(XX,XXX-1)
17110 DROP_BOX LOAD RPT_OUTDEV.CTL,RPT_OUTDEV$
17120 DROP_BOX WRITE RPT_OUTDEV.CTL,CR_DEV$
17125 RPT_OUTDEV$=CR_DEV$
17130 CLOSE (ZZ9)
17135 REFRESH_FLG=1
17137 GOSUB ENABLE_PRINT_MODES
17140 RETURN 
17149 ! 
17200 CHECK_IS_PDF:
17210 IS_PDF_DRIVER=0
17220 OPEN (HFN,ISZ=256,ERR=*RETURN)ZZ9$(1,2); LNK_FLE=LFO
17230 READ (LNK_FLE)LNK$
17250 IF POS("TF_TOPDF"=UCS(LNK$)) OR POS("TF_TOUNFORM"=UCS(LNK$)) THEN IS_PDF_DRIVER=1
17290 CLOSE (LNK_FLE); LNK_FLE=0
17295 RETURN 
17299 ! 
18000 ! Get Printer Defaults
18010 GET_PRINT_DEFAULTS:
18020 ZZ9=HFN; OPEN (ZZ9)"ZZ9"+%C$
18030 ZZPARM=HFN; OPEN (ZZPARM)"ZZPARM"
18040 FIND (ZZ9,KEY=RPT_OUTDEV$,DOM=*NEXT)ZZ9$
18050 FIND (ZZPARM,KEY="ptr"+ZZ9$(44,8),DOM=*NEXT)A9$
18070 REFRESH_FLG=1
18900 RETURN 
19000 ! 19000,10
19010 CHECK_PRINTERS:
19020 ! Check printer on System
19030 P0$=TSK(0),SS$=""
19040 FOR I=1 TO LEN(P0$) STEP 6
19050 IF POS(P0$(I,1)="LP")<>0 THEN SS$=SS$+P0$(I,2)
19060 NEXT I
19070 RETURN 
19099 ! 
19100 ! Use this routine to get list of printer devices, in format ready for loading a drop box or list box
19101 ! FILTER$ - Prefix string used to select only matching devices
19110 GET_PRINT_DEVICES:
19120 ENTER RPT_OUTDEV$,PRT_DEV$,INDEX,FILTER$,ERR=*NEXT
19130 RPT_OUTDEV$="",SS$=TSK(0)
19140 OPEN (HFN,ERR=*RETURN)"ZZ9"+%C$; ZZ9=LFO
19150 NEXT_DEV: KEY_ZZ9$=KEY(ZZ9,END=END_GET_PRINT_DEV)
19160 READ (ZZ9,KEY=KEY_ZZ9$)ZZ9$
19170 IF POS(ZZ9$(1,2)=SS$)=0 THEN GOTO NEXT_DEV
19190 IF ZZ9$(43,1)<>"2" THEN GOTO NEXT_DEV
19195 IF NUL(FILTER$) OR POS(UCS(FILTER$)=UCS(STP(ZZ9$(173,60),2)))=1 THEN GOTO *NEXT ELSE GOTO NEXT_DEV
19196 RPT_OUTDEV$=RPT_OUTDEV$+ZZ9$(1,2)+" - "+ZZ9$(3,30)+SEP
19200 GOTO NEXT_DEV
19210 END_GET_PRINT_DEV:
19220 XX=0,XXX=0; IF NOT(NUL(PRT_DEV$)) THEN XX=POS(SEP+PRT_DEV$=SEP+RPT_OUTDEV$); IF XX<>0 THEN XXX=POS(SEP=SEP+MID(RPT_OUTDEV$,1,XX),1,0); INDEX=XXX
19230 ! DROP_BOX LOAD RPT_OUTDEV.CTL,RPT_OUTDEV$
19240 ! IF XXX THEN DROP_BOX WRITE RPT_OUTDEV.CTL,XXX,ERR=*NEXT
19250 CLOSE (ZZ9); ZZ9=0
19295 EXIT 
19299 ! 
19599 ! 240570 - Support for other print modes
19600 ENABLE_PRINT_MODES:
19620 RADIO_BUTTON SHOW PRT_MODE.CTL:1,ERR=*NEXT
19630 IF POS("Q"=PRT_MODES$)>0 THEN RADIO_BUTTON SHOW PRT_MODE.CTL:2,ERR=*NEXT
19640 IF POS("S"=PRT_MODES$)>0 THEN RADIO_BUTTON SHOW PRT_MODE.CTL:3,ERR=*NEXT
19695 RETURN 
19699 ! 
20000 PROCESS_PRINT_MODE:
20020 ON POS(PRT_MODE$="QS") GOTO *NEXT,PROCESS_PRINT_QUEUED,PROCESS_PRINT_SCHEDULED
20045 RETURN 
20049 ! 
20050 ERR_MODE_NOT_SUPPORTED:
20060 MSGBOX MSG("ZGXOPO_ERM"),MSG("WARNING"),"!"
20095 RETURN 
20099 ! 
20100 PROCESS_PRINT_QUEUED:
20110 LOCAL ZZQ_KEY$
20115 PRT_MODE$="I",PRT$(1,1)="I"; REFRESH_FLG=1
20117 IF POS("Q"=PRT_MODES$)=0 THEN GOTO ERR_MODE_NOT_SUPPORTED
20120 ZZQ_KEY$=DAY,ZZQ_KEY$=ZZQ_KEY$(7,2)+ZZQ_KEY$(1,2)+ZZQ_KEY$(4,2),ZZQ_KEY$=PAD(MID(RPT_OUTDEV$,1,2),6)+X3$(162,1)+RPT_FORMCODE$+ZZQ_KEY$+STR(TIM*100:"0000")+" "+ZZS$(1,6)+X3$(9,3)+X3$(40,3); IF MID(RPT_OUTDEV$,1,1)="U" THEN ZZQ_KEY$(1,2)=X3$(172,2)
20125 OPEN (HFN,ERR=OPEN_ERR)"ZZQ"; _ZZQ=LFO
20130 WRITE (_ZZQ,KEY=ZZQ_KEY$(1,19),DOM=*NEXT)ZZQ_KEY$,X3$,X4$,T1$,PRT$,RNG$,ZZS$(1)
20135 MSGBOX MSG("ZGXOPO_Q"),MSG("FYI"),"OK,TIM=2"
20140 CLOSE (_ZZQ); _ZZQ=0
20145 RETURN 
20149 ! 
20180 IOL_ZZK_P:IOLIST ZZK_KEY_P$,X3$,X4$,T1$,PRT$,RNG$,ZZS$,RPT_PGM$,RPT_SPLIT$
20182 IOL_ZZK_O:IOLIST ZZK_KEY_O$,%FROM_POS,%LAST_POS,%FIELD_LEN,%KEY_POS,%THE_KEY$,%FILE_TO_PROCESS$,%FROM_POS1,%LAST_POS1,%FIELD_LEN1,%BREAK$,%ACCTPD,%BREAK_FM0_LOC
20184 IOL_ZZK_S:IOLIST ZZK_KEY_S$,RPT_PGM_NAME$,RPT_DESC$,SCHD_EXP1$,SCHD_EXP2$,SCHD_EXP3$,SCHD_EXP4$,SCHD_EXP5$ ! Scheduling Options
20186 IOL_ZZK_D:IOLIST ZZK_KEY_D$,RPT_OPTIONS_DESC$,RPT_OPTIONS_TYPE$,RPT_OPTIONS_OFFSET$,RPT_OPTIONS_VAR$,RPT_OPTIONS_INITVAL$,RPT_OPTIONS_STEP$,RPT_OPTIONS_INCR$,RPT_OPTIONS_DOMAIN$
20199 ! 
20200 PROCESS_PRINT_SCHEDULED:
20210 LOCAL ZZK_KEY$
20215 PRT_MODE$="I",PRT$(1,1)="I"; REFRESH_FLG=1
20217 IF POS("S"=PRT_MODES$)=0 THEN GOTO ERR_MODE_NOT_SUPPORTED
20220 ZZK_KEY$=DAY; ZZK_KEY$=ZZK_KEY$(7,2)+ZZK_KEY$(1,2)+ZZK_KEY$(4,2); ZZK_KEY$=ZZS$(1,6)+ZZK_KEY$+STR(TIM*100:"0000")+X3$(9,3)+X3$(40,3)+MID(RPT_OUTDEV$,1,2); IF MID(RPT_OUTDEV$,1,1)="U" THEN ZZK_KEY$(1,2)=X3$(172,2)
20221 ZZK_KEY$=PAD(ZZK_KEY$,31)
20222 RPT_PGM_NAME$=""; CALL "ZZ2FNC;GET_PRG_REMARK",RPT_PGM$,RPT_PGM_NAME$
20230 GOSUB WRITE_ZZK
20245 TF_TYPE$="SCHEDULED_DBD_RPT"; PERFORM "DTGOMA;select_type"
20250 %FROM_DTGOMA=0; REPLACEMENT_SCRN$=""; SCH_OK$=""; PROCESS "DTGOMA.SV7","../DTG/DT.EN",ZZK_KEY$,SCH_OK$
20275 IF SCH_OK$<>"Y" THEN GOSUB DELETE_ZZK; MSGBOX MSG("ZGXOPO_S_N"),MSG("FYI"),"OK,TIM=2" ELSE MSGBOX MSG("ZGXOPO_S"),MSG("FYI"),"OK,TIM=2"
20295 RETURN 
20299 ! 
20300 WRITE_ZZK:
20305 OPEN (HFN,ERR=OPEN_ERR)"ZZK"+%C$; _ZZK=LFO
20310 ZZK_KEY_P$=ZZK_KEY$+"P"; WRITE (_ZZK,KEY=ZZK_KEY_P$,DOM=*NEXT)IOL=IOL_ZZK_P
20315 ZZK_KEY_O$=ZZK_KEY$+"O"; WRITE (_ZZK,KEY=ZZK_KEY_O$,DOM=*NEXT)IOL=IOL_ZZK_O
20317 SCHD_EXP1$="1",SCHD_EXP2$="1" ! Default minutes and hours fields to 1
20320 ZZK_KEY_S$=ZZK_KEY$+"S"; WRITE (_ZZK,KEY=ZZK_KEY_S$,DOM=*NEXT)IOL=IOL_ZZK_S
20325 IF NOT(RPT_OPTIONS_COUNT) THEN GOTO SKIP_ZZK_D
20330 FOR D=1 TO RPT_OPTIONS_COUNT
20335 READ DATA FROM ZZK_KEY$+STR(D)+SEP+RPT_OPTIONS$[D,0]+SEP+RPT_OPTIONS$[D,1]+SEP+RPT_OPTIONS$[D,2]+SEP+RPT_OPTIONS$[D,3]+SEP+SEP+SEP+SEP+RPT_OPTIONS$[D,4] TO IOL=IOL_ZZK_D
20336 EXECUTE "RPT_OPTIONS_INITVAL$=MID("+RPT_OPTIONS$[D,3]+"$,"+RPT_OPTIONS$[D,2]+","+RPT_OPTIONS$[D,1]+")"
20340 WRITE (_ZZK,KEY=ZZK_KEY_D$,DOM=*NEXT)IOL=IOL_ZZK_D
20345 NEXT D
20350 SKIP_ZZK_D:
20355 CLOSE (_ZZK); _ZZK=0
20395 RETURN 
20399 ! 
20400 DELETE_ZZK:
20405 OPEN (HFN,ERR=OPEN_ERR)"ZZK"+%C$; _ZZK=LFO
20410 ZZK_KEY_P$=ZZK_KEY$+"P"; REMOVE (_ZZK,KEY=ZZK_KEY_P$,DOM=*NEXT)
20415 ZZK_KEY_O$=ZZK_KEY$+"O"; REMOVE (_ZZK,KEY=ZZK_KEY_O$,DOM=*NEXT)
20420 ZZK_KEY_S$=ZZK_KEY$+"S"; REMOVE (_ZZK,KEY=ZZK_KEY_S$,DOM=*NEXT)
20425 IF NOT(RPT_OPTIONS_COUNT) THEN GOTO SKIP_DELZZK_D
20430 FOR D=1 TO RPT_OPTIONS_COUNT
20440 REMOVE (_ZZK,KEY=ZZK_KEY$+STR(D),DOM=*NEXT)
20445 NEXT D
20450 SKIP_DELZZK_D:
20455 CLOSE (_ZZK); _ZZK=0
20495 RETURN 
20499 ! 
56000 ! 
56001 REM "240570-GUI Printing - Support for queueing of reports.             
