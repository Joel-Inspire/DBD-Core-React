0010 ! ZYGMCA - State Setup
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Nov. 22, 2002 9:49
0030 ! ************************************************************************
0035 REM "5.7 - 08/04/09 - 13.006666 - crg - SSP# 230875
0037 REM "230875-Would like a change made to the sales tax code lookup.      
0040 REM "Copyright 2009 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "ZYGMCA","../ZZG/ZZ.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZY0"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="ST_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0965 FOR X=1 TO 5; TEMP$="%TABLE_"+STR(X)+"$"; VIA TEMP$=""; NEXT X
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",ANSWER$
1230 IF ANSWER$="NO" THEN GOTO CLEAR_REC
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1855 NEXT_ID=ST_CODE.CTL
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3065 GOSUB TABLE_VALUES
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE 
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=ST_CODE.CTL,_FIRST_FIELD=ST_NAME.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 MIN_FIN_CHARGE$=STR(MIN_FIN_CHARGE)
10030 BAL_AMT_1$=STR(BAL_AMT_1)
10040 FINANCE_CHARGE_1$=STR(FINANCE_CHARGE_1)
10050 BAL_AMT_2$=STR(BAL_AMT_2)
10060 FINANCE_CHARGE_2$=STR(FINANCE_CHARGE_2)
10070 BAL_AMT_3$=STR(BAL_AMT_3)
10080 FINANCE_CHARGE_3$=STR(FINANCE_CHARGE_3)
10090 BAL_AMT_4$=STR(BAL_AMT_4)
10100 FINANCE_CHARGE_4$=STR(FINANCE_CHARGE_4)
10110 BAL_AMT_5$=STR(BAL_AMT_5)
10120 FINANCE_CHARGE_5$=STR(FINANCE_CHARGE_5)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="MIN_FIN_CHARGE",_X=MIN_FIN_CHARGE.CTL,MIN_FIN_CHARGE=NUM(MIN_FIN_CHARGE$,ERR=NON_NUMERIC)
11030 _X$="BAL_AMT_1",_X=BAL_AMT_1.CTL,BAL_AMT_1=NUM(BAL_AMT_1$,ERR=NON_NUMERIC)
11040 _X$="FINANCE_CHARGE_1",_X=FINANCE_CHARGE_1.CTL,FINANCE_CHARGE_1=NUM(FINANCE_CHARGE_1$,ERR=NON_NUMERIC)
11050 _X$="BAL_AMT_2",_X=BAL_AMT_2.CTL,BAL_AMT_2=NUM(BAL_AMT_2$,ERR=NON_NUMERIC)
11060 _X$="FINANCE_CHARGE_2",_X=FINANCE_CHARGE_2.CTL,FINANCE_CHARGE_2=NUM(FINANCE_CHARGE_2$,ERR=NON_NUMERIC)
11070 _X$="BAL_AMT_3",_X=BAL_AMT_3.CTL,BAL_AMT_3=NUM(BAL_AMT_3$,ERR=NON_NUMERIC)
11080 _X$="FINANCE_CHARGE_3",_X=FINANCE_CHARGE_3.CTL,FINANCE_CHARGE_3=NUM(FINANCE_CHARGE_3$,ERR=NON_NUMERIC)
11090 _X$="BAL_AMT_4",_X=BAL_AMT_4.CTL,BAL_AMT_4=NUM(BAL_AMT_4$,ERR=NON_NUMERIC)
11100 _X$="FINANCE_CHARGE_4",_X=FINANCE_CHARGE_4.CTL,FINANCE_CHARGE_4=NUM(FINANCE_CHARGE_4$,ERR=NON_NUMERIC)
11110 _X$="BAL_AMT_5",_X=BAL_AMT_5.CTL,BAL_AMT_5=NUM(BAL_AMT_5$,ERR=NON_NUMERIC)
11120 _X$="FINANCE_CHARGE_5",_X=FINANCE_CHARGE_5.CTL,FINANCE_CHARGE_5=NUM(FINANCE_CHARGE_5$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN ST_CODE$=""
13030 ST_NAME$=""
13040 BEG_THREE_ZIP$=""
13050 ENDING_THREE_ZIP$=""
13060 FINANCE_CHARGES$=""
13070 MIN_FIN_CHARGE=0
13080 BAL_AMT_1=0
13090 FINANCE_CHARGE_1=0
13100 BAL_AMT_2=0
13110 FINANCE_CHARGE_2=0
13120 BAL_AMT_3=0
13130 FINANCE_CHARGE_3=0
13140 BAL_AMT_4=0
13150 FINANCE_CHARGE_4=0
13160 BAL_AMT_5=0
13170 FINANCE_CHARGE_5=0
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(16,"N")
15030 IF _ORIG.ST_CODE$=_CUR.ST_CODE$ OR ST_CODE$=_CUR.ST_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ST_CODE$=ST_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ST_CODE")+" = "+_CUR.ST_CODE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ST_CODE")+" = "+_CUR.ST_CODE$
15040 IF _ORIG.ST_NAME$=_CUR.ST_NAME$ OR ST_NAME$=_CUR.ST_NAME$ THEN GOTO *NEXT ELSE IF _ORIG.ST_NAME$=ST_NAME$ THEN _CHG2$=_CHG2$+SEP+MSG("ST_NAME")+" = "+_CUR.ST_NAME$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ST_NAME")+" = "+_CUR.ST_NAME$
15050 IF _ORIG.BEG_THREE_ZIP$=_CUR.BEG_THREE_ZIP$ OR BEG_THREE_ZIP$=_CUR.BEG_THREE_ZIP$ THEN GOTO *NEXT ELSE IF _ORIG.BEG_THREE_ZIP$=BEG_THREE_ZIP$ THEN _CHG2$=_CHG2$+SEP+MSG("BEG_T_Z")+" = "+_CUR.BEG_THREE_ZIP$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BEG_T_Z")+" = "+_CUR.BEG_THREE_ZIP$
15060 IF _ORIG.ENDING_THREE_ZIP$=_CUR.ENDING_THREE_ZIP$ OR ENDING_THREE_ZIP$=_CUR.ENDING_THREE_ZIP$ THEN GOTO *NEXT ELSE IF _ORIG.ENDING_THREE_ZIP$=ENDING_THREE_ZIP$ THEN _CHG2$=_CHG2$+SEP+MSG("ENDI_T_Z")+" = "+_CUR.ENDING_THREE_ZIP$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ENDI_T_Z")+" = "+_CUR.ENDING_THREE_ZIP$
15070 IF _ORIG.FINANCE_CHARGES$=_CUR.FINANCE_CHARGES$ OR FINANCE_CHARGES$=_CUR.FINANCE_CHARGES$ THEN GOTO *NEXT ELSE IF _ORIG.FINANCE_CHARGES$=FINANCE_CHARGES$ THEN _CHG2$=_CHG2$+SEP+MSG("FINA_C")+" = "+_CUR.FINANCE_CHARGES$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FINA_C")+" = "+_CUR.FINANCE_CHARGES$
15080 IF _ORIG.MIN_FIN_CHARGE=_CUR.MIN_FIN_CHARGE OR MIN_FIN_CHARGE=_CUR.MIN_FIN_CHARGE THEN GOTO *NEXT ELSE IF _ORIG.MIN_FIN_CHARGE=MIN_FIN_CHARGE THEN _CHG2$=_CHG2$+SEP+MSG("MIN_F_C")+" = "+STR(_CUR.MIN_FIN_CHARGE),_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("MIN_F_C")+" = "+STR(_CUR.MIN_FIN_CHARGE)
15090 IF _ORIG.BAL_AMT_1=_CUR.BAL_AMT_1 OR BAL_AMT_1=_CUR.BAL_AMT_1 THEN GOTO *NEXT ELSE IF _ORIG.BAL_AMT_1=BAL_AMT_1 THEN _CHG2$=_CHG2$+SEP+MSG("BAL_AMT_1")+" = "+STR(_CUR.BAL_AMT_1),_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BAL_AMT_1")+" = "+STR(_CUR.BAL_AMT_1)
15100 IF _ORIG.FINANCE_CHARGE_1=_CUR.FINANCE_CHARGE_1 OR FINANCE_CHARGE_1=_CUR.FINANCE_CHARGE_1 THEN GOTO *NEXT ELSE IF _ORIG.FINANCE_CHARGE_1=FINANCE_CHARGE_1 THEN _CHG2$=_CHG2$+SEP+MSG("FINA_C_1")+" = "+STR(_CUR.FINANCE_CHARGE_1),_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FINA_C_1")+" = "+STR(_CUR.FINANCE_CHARGE_1)
15110 IF _ORIG.BAL_AMT_2=_CUR.BAL_AMT_2 OR BAL_AMT_2=_CUR.BAL_AMT_2 THEN GOTO *NEXT ELSE IF _ORIG.BAL_AMT_2=BAL_AMT_2 THEN _CHG2$=_CHG2$+SEP+MSG("BAL_AMT_2")+" = "+STR(_CUR.BAL_AMT_2),_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BAL_AMT_2")+" = "+STR(_CUR.BAL_AMT_2)
15120 IF _ORIG.FINANCE_CHARGE_2=_CUR.FINANCE_CHARGE_2 OR FINANCE_CHARGE_2=_CUR.FINANCE_CHARGE_2 THEN GOTO *NEXT ELSE IF _ORIG.FINANCE_CHARGE_2=FINANCE_CHARGE_2 THEN _CHG2$=_CHG2$+SEP+MSG("FINA_C_2")+" = "+STR(_CUR.FINANCE_CHARGE_2),_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FINA_C_2")+" = "+STR(_CUR.FINANCE_CHARGE_2)
15130 IF _ORIG.BAL_AMT_3=_CUR.BAL_AMT_3 OR BAL_AMT_3=_CUR.BAL_AMT_3 THEN GOTO *NEXT ELSE IF _ORIG.BAL_AMT_3=BAL_AMT_3 THEN _CHG2$=_CHG2$+SEP+MSG("BAL_AMT_3")+" = "+STR(_CUR.BAL_AMT_3),_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BAL_AMT_3")+" = "+STR(_CUR.BAL_AMT_3)
15140 IF _ORIG.FINANCE_CHARGE_3=_CUR.FINANCE_CHARGE_3 OR FINANCE_CHARGE_3=_CUR.FINANCE_CHARGE_3 THEN GOTO *NEXT ELSE IF _ORIG.FINANCE_CHARGE_3=FINANCE_CHARGE_3 THEN _CHG2$=_CHG2$+SEP+MSG("FINA_C_3")+" = "+STR(_CUR.FINANCE_CHARGE_3),_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FINA_C_3")+" = "+STR(_CUR.FINANCE_CHARGE_3)
15150 IF _ORIG.BAL_AMT_4=_CUR.BAL_AMT_4 OR BAL_AMT_4=_CUR.BAL_AMT_4 THEN GOTO *NEXT ELSE IF _ORIG.BAL_AMT_4=BAL_AMT_4 THEN _CHG2$=_CHG2$+SEP+MSG("BAL_AMT_4")+" = "+STR(_CUR.BAL_AMT_4),_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BAL_AMT_4")+" = "+STR(_CUR.BAL_AMT_4)
15160 IF _ORIG.FINANCE_CHARGE_4=_CUR.FINANCE_CHARGE_4 OR FINANCE_CHARGE_4=_CUR.FINANCE_CHARGE_4 THEN GOTO *NEXT ELSE IF _ORIG.FINANCE_CHARGE_4=FINANCE_CHARGE_4 THEN _CHG2$=_CHG2$+SEP+MSG("FINA_C_4")+" = "+STR(_CUR.FINANCE_CHARGE_4),_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FINA_C_4")+" = "+STR(_CUR.FINANCE_CHARGE_4)
15170 IF _ORIG.BAL_AMT_5=_CUR.BAL_AMT_5 OR BAL_AMT_5=_CUR.BAL_AMT_5 THEN GOTO *NEXT ELSE IF _ORIG.BAL_AMT_5=BAL_AMT_5 THEN _CHG2$=_CHG2$+SEP+MSG("BAL_AMT_5")+" = "+STR(_CUR.BAL_AMT_5),_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BAL_AMT_5")+" = "+STR(_CUR.BAL_AMT_5)
15180 IF _ORIG.FINANCE_CHARGE_5=_CUR.FINANCE_CHARGE_5 OR FINANCE_CHARGE_5=_CUR.FINANCE_CHARGE_5 THEN GOTO *NEXT ELSE IF _ORIG.FINANCE_CHARGE_5=FINANCE_CHARGE_5 THEN _CHG2$=_CHG2$+SEP+MSG("FINA_C_5")+" = "+STR(_CUR.FINANCE_CHARGE_5),_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FINA_C_5")+" = "+STR(_CUR.FINANCE_CHARGE_5)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN ST_CODE$=_CUR.ST_CODE$
16030 IF _CHG_VAR$(2,1)="Y" THEN ST_NAME$=_CUR.ST_NAME$
16040 IF _CHG_VAR$(3,1)="Y" THEN BEG_THREE_ZIP$=_CUR.BEG_THREE_ZIP$
16050 IF _CHG_VAR$(4,1)="Y" THEN ENDING_THREE_ZIP$=_CUR.ENDING_THREE_ZIP$
16060 IF _CHG_VAR$(5,1)="Y" THEN FINANCE_CHARGES$=_CUR.FINANCE_CHARGES$
16070 IF _CHG_VAR$(6,1)="Y" THEN MIN_FIN_CHARGE=_CUR.MIN_FIN_CHARGE
16080 IF _CHG_VAR$(7,1)="Y" THEN BAL_AMT_1=_CUR.BAL_AMT_1
16090 IF _CHG_VAR$(8,1)="Y" THEN FINANCE_CHARGE_1=_CUR.FINANCE_CHARGE_1
16100 IF _CHG_VAR$(9,1)="Y" THEN BAL_AMT_2=_CUR.BAL_AMT_2
16110 IF _CHG_VAR$(10,1)="Y" THEN FINANCE_CHARGE_2=_CUR.FINANCE_CHARGE_2
16120 IF _CHG_VAR$(11,1)="Y" THEN BAL_AMT_3=_CUR.BAL_AMT_3
16130 IF _CHG_VAR$(12,1)="Y" THEN FINANCE_CHARGE_3=_CUR.FINANCE_CHARGE_3
16140 IF _CHG_VAR$(13,1)="Y" THEN BAL_AMT_4=_CUR.BAL_AMT_4
16150 IF _CHG_VAR$(14,1)="Y" THEN FINANCE_CHARGE_4=_CUR.FINANCE_CHARGE_4
16160 IF _CHG_VAR$(15,1)="Y" THEN BAL_AMT_5=_CUR.BAL_AMT_5
16170 IF _CHG_VAR$(16,1)="Y" THEN FINANCE_CHARGE_5=_CUR.FINANCE_CHARGE_5
16990 RETURN 
20000 BEG_THREE_ZIP_ENTRY:
20005 IF STP(BEG_THREE_ZIP$,3)="" THEN GOTO BEG_THREE_ZIP_ENTRY_END
20010 BEG_THREE_ZIP$=STR(NUM(BEG_THREE_ZIP$,ERR=*NEXT):"000"),REFRESH_FLG=1; GOTO BEG_THREE_ZIP_ENTRY_END
20015 MSGBOX MSG("MUST_BE_NM"),MSG("INVALID"),"!"; BEG_THREE_ZIP$="",NEXT_ID=BEG_THREE_ZIP.CTL,REFRESH_FLG=1
20020 BEG_THREE_ZIP_ENTRY_END:RETURN 
20023 ! 
20025 ENDING_THREE_ZIP_ENTRY:
20030 IF STP(ENDING_THREE_ZIP$,3)="" THEN GOTO ENDING_THREE_ZIP_ENTRY_END
20035 ENDING_THREE_ZIP$=STR(NUM(ENDING_THREE_ZIP$,ERR=*NEXT):"000"),REFRESH_FLG=1; GOTO ENDING_THREE_ZIP_ENTRY_END
20040 MSGBOX MSG("MUST_BE_NM"),MSG("INVALID"),"!"; ENDING_THREE_ZIP$="",NEXT_ID=ENDING_THREE_ZIP.CTL,REFRESH_FLG=1
20045 ENDING_THREE_ZIP_ENTRY_END:RETURN 
20048 ! 
20050 TABLE_VALUES:
20055 TABLE_IOL:IOLIST A$(1),A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11]
20056 FOR X=1 TO 5; TEMP$="%TABLE_"+STR(X)+"$"; VIA TEMP$=""; NEXT X
20057 FOR X=1 TO 5; TEMP2$="TO_AND_OVER_"+STR(X)+"$"; VIA TEMP2$=""; NEXT X
20060 DIM A[11]; READ (_FIL_NO,KEY=_KEY$)IOL=TABLE_IOL
20065 FOR I=1 TO 9 STEP 2
20067 J=INT(I/2)+1
20070 IF I<9 AND A[I+2]>0 THEN TEMP$="%TABLE_"+STR(J)+"$"; VIA TEMP$=STR(A[I+2]-.01); TEMP2$="TO_AND_OVER_"+STR(J)+"$"; VIA TEMP2$=MSG("TO_1") ELSE IF I=1 AND A[I+1]=0 THEN EXITTO 20076 ELSE TEMP2$="TO_AND_OVER_"+STR(J)+"$"; VIA TEMP2$=MSG("AND_OVER"); EXITTO 20076
20075 NEXT I
20090 TABLE_VALUES_END:RETURN 
20095 ! 
21400 BREAK_1_ENTRY:
21410 IF NUM(BAL_AMT_1$)=0 THEN XX=1; GOSUB BAL_AMT_IS_ZERO; NEXT_ID=BUTTON_1.CTL
21440 BREAK_1_ENTRY_END:RETURN 
21445 ! 
21450 BREAK_2_ENTRY:
21455 IF NUM(BAL_AMT_2$)>0 THEN IF NUM(BAL_AMT_2$)<=NUM(BAL_AMT_1$) THEN MSGBOX MSG("MUST_BAL_B"),MSG("ATTN"),"!"; BAL_AMT_2$="0"; NEXT_ID=BAL_AMT_2.CTL; GOTO BREAK_2_ENTRY_END
21460 IF NUM(BAL_AMT_2$)=0 THEN TO_AND_OVER_1$=MSG("AND_OVER"); XX=2; GOSUB BAL_AMT_IS_ZERO; NEXT_ID=BUTTON_1.CTL ELSE TO_AND_OVER_1$=MSG("TO_1"),%TABLE_1$=STR(NUM(BAL_AMT_2$)-.01)
21490 BREAK_2_ENTRY_END: REFRESH_FLG=1; RETURN 
21495 ! 
21500 BREAK_3_ENTRY:
21505 IF NUM(BAL_AMT_3$)>0 THEN IF NUM(BAL_AMT_3$)<=NUM(BAL_AMT_2$) THEN MSGBOX MSG("MUST_BAL_B"),MSG("ATTN"),"!"; BAL_AMT_3$="0"; NEXT_ID=BAL_AMT_3.CTL; GOTO BREAK_3_ENTRY_END
21510 IF NUM(BAL_AMT_3$)=0 THEN TO_AND_OVER_2$=MSG("AND_OVER"); XX=3; GOSUB BAL_AMT_IS_ZERO; NEXT_ID=BUTTON_1.CTL ELSE TO_AND_OVER_2$=MSG("TO_1"),%TABLE_2$=STR(NUM(BAL_AMT_3$)-.01)
21540 BREAK_3_ENTRY_END: REFRESH_FLG=1; RETURN 
21545 ! 
21550 BREAK_4_ENTRY:
21555 IF NUM(BAL_AMT_4$)>0 THEN IF NUM(BAL_AMT_4$)<=NUM(BAL_AMT_3$) THEN MSGBOX MSG("MUST_BAL_B"),MSG("ATTN"),"!"; BAL_AMT_4$="0"; NEXT_ID=BAL_AMT_4.CTL; GOTO BREAK_4_ENTRY_END
21560 IF NUM(BAL_AMT_4$)=0 THEN TO_AND_OVER_3$=MSG("AND_OVER"); XX=4; GOSUB BAL_AMT_IS_ZERO; NEXT_ID=BUTTON_1.CTL ELSE TO_AND_OVER_3$=MSG("TO_1"),%TABLE_3$=STR(NUM(BAL_AMT_4$)-.01)
21590 BREAK_4_ENTRY_END: REFRESH_FLG=1; RETURN 
21595 ! 
21600 BREAK_5_ENTRY:
21605 IF NUM(BAL_AMT_5$)>0 THEN IF NUM(BAL_AMT_5$)<=NUM(BAL_AMT_4$) THEN MSGBOX MSG("MUST_BAL_B"),MSG("ATTN"),"!"; BAL_AMT_5$="0"; NEXT_ID=BAL_AMT_5.CTL; GOTO BREAK_5_ENTRY_END
21610 IF NUM(BAL_AMT_5$)=0 THEN TO_AND_OVER_4$=MSG("AND_OVER"); XX=5; GOSUB BAL_AMT_IS_ZERO; NEXT_ID=BUTTON_1.CTL ELSE TO_AND_OVER_4$=MSG("TO_1"),%TABLE_4$=STR(NUM(BAL_AMT_5$)-.01)
21640 BREAK_5_ENTRY_END: REFRESH_FLG=1; RETURN 
21645 ! 
22000 BAL_AMT_IS_ZERO:
22010 FOR X=XX TO 5; TEMP$="%TABLE_"+STR(X)+"$"; VIA TEMP$=""; NEXT X
22015 FOR X=XX TO 5; TEMP2$="TO_AND_OVER_"+STR(X)+"$"; VIA TEMP2$=""; NEXT X
22020 FOR X=XX TO 5; TEMP3$="BAL_AMT_"+STR(X)+"$"; VIA TEMP3$=""; NEXT X
22025 FOR X=XX TO 5; TEMP4$="FINANCE_CHARGE_"+STR(X)+"$"; VIA TEMP4$=""; NEXT X
22030 REFRESH_FLG=1
22040 BAL_AMT_IS_ZERO_END:RETURN 
22045 ! 
25000 CHECK_WRITE:
25010 MSGBOX MSG("WRITE_REC"),MSG("CONFIRM"),"?,YESNO",ANSWER$
25020 IF ANSWER$="YES" THEN GOTO WRITE_REC
25040 CHECK_WRITE_END:RETURN 
25045 ! 
26000 REM "Dialog box to select a state
26005 SELECT_STATE:
26010 ENTER VAL$,ERR=*RETURN
26020 PROCESS "SEL_ZY0","../ARG/AR.EN",VAL$
26045 EXIT 
26049 ! 
