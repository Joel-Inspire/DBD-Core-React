0010 ! ZYGBAA - Bank Account Setup
0035 REM "5.7 - 02/17/21 - 15.413269 - jvv - SSP# 307332
0037 REM "307332-Create combined pdf of checks in a batch                    
0040 REM "Copyright 2021 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 PROCESS "ZYGBAA","../ZZG/ZZ.EN"
0060 EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZYB"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0180 _CUR_FN=HFN; OPEN (_CUR_FN,IOL=*,REC=_CUR$)_FILE_NAME$
0185 ZYB=HFN; OPEN (ZYB,IOL=*,REC=ZYB_REC$,ERR=OPEN_ERR)"ZYB"+%C$
0186 ZYA=HFN; OPEN (ZYA,IOL=*,REC=ZYA_REC$,ERR=OPEN_ERR)"ZYA"+%C$
0187 GL1=HFN; OPEN (GL1,IOL=*,REC=GL1_REC$,ERR=OPEN_ERR)"GL1"+%C$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="BANK_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1102 GOSUB ZYA_REC; ML_INST_DESC$=ZYA_REC.BANK_NAME$
1105 _GL1$=POST_CASH_TO_GL_ACCT$; GOSUB GL1_REC; ML_GL_DESC1$=GL1_REC.GL_ACCT_DESC$,REFRESH_FLG=1
1110 _GL1$=POST_ADJ_TO_GL$; GOSUB GL1_REC; ML_GL_DESC2$=GL1_REC.GL_ACCT_DESC$,REFRESH_FLG=1
1120 GOSUB CK_REMAINING
1190 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX MSG("ADD_RECORD"),MSG("CONFIRM"),"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1485 GOSUB CLEAR_FIELDS
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX MSG("DELETE_REC"),MSG("CONFIRM"),"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1670 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$ ! MSGBOX _MSG_REC_REMOVE$+_R_KEY$,_FYI$,"INFO"
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0; GOSUB CLEAR_REC ! SSP#241318
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3060 CHANGE_FLG=0
3070 GOSUB ZYA_REC; ML_INST_DESC$=ZYA_REC.BANK_NAME$
3080 _GL1$=POST_ADJ_TO_GL$; GOSUB GL1_REC; ML_GL_DESC2$=GL1_REC.GL_ACCT_DESC$,REFRESH_FLG=1
3090 _GL1$=POST_CASH_TO_GL_ACCT$; GOSUB GL1_REC; ML_GL_DESC1$=GL1_REC.GL_ACCT_DESC$,REFRESH_FLG=1
3095 GOSUB CK_REMAINING
3100 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$=""
3230 READ (_CUR_FN,KEY=KEC(_FIL_NO),DOM=WRT)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3330 ! _R_KEY$=KEC(_FIL_NO); TRANSLATE _R_KEY$," ",$00$; MSGBOX _MSG_REC_UPDADD$+_R_KEY$,_FYI$,"INFO"
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=BANK_CODE.CTL,_FIRST_FIELD=BANK_ACCT_DESC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF _KEYS$[_CURKEY]=ID$+"$" OR _KEYS$[_CURKEY]=ID$ THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10020 EST_CHKS_PER_MONTH$=STR(EST_CHKS_PER_MONTH)
10030 LAST_REC_STMT_BAL$=STR(LAST_REC_STMT_BAL)
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11020 _X$="EST_CHKS_PER_MONTH",_X=EST_CHKS_PER_MONTH.CTL,EST_CHKS_PER_MONTH=NUM(EST_CHKS_PER_MONTH$,ERR=NON_NUMERIC)
11030 _X$="LAST_REC_STMT_BAL",_X=LAST_REC_STMT_BAL.CTL,LAST_REC_STMT_BAL=NUM(LAST_REC_STMT_BAL$,ERR=NON_NUMERIC)
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN BANK_CODE$=""
13030 BANK_ACCT_DESC$=""
13040 INSTITUTION_CODE$=""
13050 SEPARATE_CHECK_STOCK$=""
13060 BANKS_ACCT_NUM$=""
13070 ZYB_UNUSED_1$=""
13080 ZYB_UNUSED_2$=""
13090 ZYB_UNUSED_3$=""
13100 POST_CASH_TO_GL_ACCT$=""
13110 POST_ADJ_TO_GL$=""
13120 LAST_CHECK_NUM$=""
13130 HIGHEST_CHK_ON_HAND$=""
13140 ALT_CURR_TO_USE$=""
13150 BANK_DATA_FORMAT$=""
13160 BANK_DATA_FILE_NAME$=""
13170 LAST_REC_STMT_DATE$=""
13180 ALT_BANK_CODE$=""
13190 SUMMARY_RECORDS$=""
13200 PAYMENT_FILE$=""
13210 FLEXIBLE_FORMAT$=""
13215 COMBINE_PDF$="" ! SSP 307332
13220 ZYB_UNUSED_4$=""
13230 EST_CHKS_PER_MONTH=0
13240 LAST_REC_STMT_BAL=0
13250 ML_INST_DESC$=""
13260 CK_REMAINING=0
13270 CK_REMAINING1=0
13280 UNIT_NUM$="",FILE_CREATION_DATE$="",FILE_SEQ_NUM$="" ! WO251293
13282 PAYMENT_FILE_FMT$="" ! WO267103
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(28,"N") ! WO251293 WO 267103 SSP307332
15030 IF _ORIG.BANK_CODE$=_CUR.BANK_CODE$ OR BANK_CODE$=_CUR.BANK_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.BANK_CODE$=BANK_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("BANK_CODE")+" = "+_CUR.BANK_CODE$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BANK_CODE")+" = "+_CUR.BANK_CODE$
15040 IF _ORIG.BANK_ACCT_DESC$=_CUR.BANK_ACCT_DESC$ OR BANK_ACCT_DESC$=_CUR.BANK_ACCT_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.BANK_ACCT_DESC$=BANK_ACCT_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("BANK_A_D")+" = "+_CUR.BANK_ACCT_DESC$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BANK_A_D")+" = "+_CUR.BANK_ACCT_DESC$
15050 IF _ORIG.INSTITUTION_CODE$=_CUR.INSTITUTION_CODE$ OR INSTITUTION_CODE$=_CUR.INSTITUTION_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.INSTITUTION_CODE$=INSTITUTION_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("INST_C")+" = "+_CUR.INSTITUTION_CODE$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("INST_C")+" = "+_CUR.INSTITUTION_CODE$
15060 IF _ORIG.SEPARATE_CHECK_STOCK$=_CUR.SEPARATE_CHECK_STOCK$ OR SEPARATE_CHECK_STOCK$=_CUR.SEPARATE_CHECK_STOCK$ THEN GOTO *NEXT ELSE IF _ORIG.SEPARATE_CHECK_STOCK$=SEPARATE_CHECK_STOCK$ THEN _CHG2$=_CHG2$+SEP+MSG("SEPA_C_S")+" = "+_CUR.SEPARATE_CHECK_STOCK$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SEPA_C_S")+" = "+_CUR.SEPARATE_CHECK_STOCK$
15070 IF _ORIG.BANKS_ACCT_NUM$=_CUR.BANKS_ACCT_NUM$ OR BANKS_ACCT_NUM$=_CUR.BANKS_ACCT_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.BANKS_ACCT_NUM$=BANKS_ACCT_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("BANK_A_N")+" = "+_CUR.BANKS_ACCT_NUM$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BANK_A_N")+" = "+_CUR.BANKS_ACCT_NUM$
15080 IF _ORIG.ZYB_UNUSED_1$=_CUR.ZYB_UNUSED_1$ OR ZYB_UNUSED_1$=_CUR.ZYB_UNUSED_1$ THEN GOTO *NEXT ELSE IF _ORIG.ZYB_UNUSED_1$=ZYB_UNUSED_1$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.ZYB_UNUSED_1$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.ZYB_UNUSED_1$
15090 IF _ORIG.ZYB_UNUSED_2$=_CUR.ZYB_UNUSED_2$ OR ZYB_UNUSED_2$=_CUR.ZYB_UNUSED_2$ THEN GOTO *NEXT ELSE IF _ORIG.ZYB_UNUSED_2$=ZYB_UNUSED_2$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.ZYB_UNUSED_2$,_CHG_VAR$(7,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.ZYB_UNUSED_2$
15100 IF _ORIG.ZYB_UNUSED_3$=_CUR.ZYB_UNUSED_3$ OR ZYB_UNUSED_3$=_CUR.ZYB_UNUSED_3$ THEN GOTO *NEXT ELSE IF _ORIG.ZYB_UNUSED_3$=ZYB_UNUSED_3$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.ZYB_UNUSED_3$,_CHG_VAR$(8,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.ZYB_UNUSED_3$
15110 IF _ORIG.POST_CASH_TO_GL_ACCT$=_CUR.POST_CASH_TO_GL_ACCT$ OR POST_CASH_TO_GL_ACCT$=_CUR.POST_CASH_TO_GL_ACCT$ THEN GOTO *NEXT ELSE IF _ORIG.POST_CASH_TO_GL_ACCT$=POST_CASH_TO_GL_ACCT$ THEN _CHG2$=_CHG2$+SEP+MSG("P_C_T_G_A")+" = "+_CUR.POST_CASH_TO_GL_ACCT$,_CHG_VAR$(9,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("P_C_T_G_A")+" = "+_CUR.POST_CASH_TO_GL_ACCT$
15120 IF _ORIG.POST_ADJ_TO_GL$=_CUR.POST_ADJ_TO_GL$ OR POST_ADJ_TO_GL$=_CUR.POST_ADJ_TO_GL$ THEN GOTO *NEXT ELSE IF _ORIG.POST_ADJ_TO_GL$=POST_ADJ_TO_GL$ THEN _CHG2$=_CHG2$+SEP+MSG("POST_A_T_G")+" = "+_CUR.POST_ADJ_TO_GL$,_CHG_VAR$(10,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("POST_A_T_G")+" = "+_CUR.POST_ADJ_TO_GL$
15130 IF _ORIG.LAST_CHECK_NUM$=_CUR.LAST_CHECK_NUM$ OR LAST_CHECK_NUM$=_CUR.LAST_CHECK_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.LAST_CHECK_NUM$=LAST_CHECK_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("LAST_C_N")+" = "+_CUR.LAST_CHECK_NUM$,_CHG_VAR$(11,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_C_N")+" = "+_CUR.LAST_CHECK_NUM$
15140 IF _ORIG.HIGHEST_CHK_ON_HAND$=_CUR.HIGHEST_CHK_ON_HAND$ OR HIGHEST_CHK_ON_HAND$=_CUR.HIGHEST_CHK_ON_HAND$ THEN GOTO *NEXT ELSE IF _ORIG.HIGHEST_CHK_ON_HAND$=HIGHEST_CHK_ON_HAND$ THEN _CHG2$=_CHG2$+SEP+MSG("HIGH_C_O_H")+" = "+_CUR.HIGHEST_CHK_ON_HAND$,_CHG_VAR$(12,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("HIGH_C_O_H")+" = "+_CUR.HIGHEST_CHK_ON_HAND$
15150 IF _ORIG.ALT_CURR_TO_USE$=_CUR.ALT_CURR_TO_USE$ OR ALT_CURR_TO_USE$=_CUR.ALT_CURR_TO_USE$ THEN GOTO *NEXT ELSE IF _ORIG.ALT_CURR_TO_USE$=ALT_CURR_TO_USE$ THEN _CHG2$=_CHG2$+SEP+MSG("ALT_C_T_U")+" = "+_CUR.ALT_CURR_TO_USE$,_CHG_VAR$(13,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_C_T_U")+" = "+_CUR.ALT_CURR_TO_USE$
15160 IF _ORIG.BANK_DATA_FORMAT$=_CUR.BANK_DATA_FORMAT$ OR BANK_DATA_FORMAT$=_CUR.BANK_DATA_FORMAT$ THEN GOTO *NEXT ELSE IF _ORIG.BANK_DATA_FORMAT$=BANK_DATA_FORMAT$ THEN _CHG2$=_CHG2$+SEP+MSG("BANK_D_F")+" = "+_CUR.BANK_DATA_FORMAT$,_CHG_VAR$(14,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BANK_D_F")+" = "+_CUR.BANK_DATA_FORMAT$
15170 IF _ORIG.BANK_DATA_FILE_NAME$=_CUR.BANK_DATA_FILE_NAME$ OR BANK_DATA_FILE_NAME$=_CUR.BANK_DATA_FILE_NAME$ THEN GOTO *NEXT ELSE IF _ORIG.BANK_DATA_FILE_NAME$=BANK_DATA_FILE_NAME$ THEN _CHG2$=_CHG2$+SEP+MSG("BANK_D_F_N")+" = "+_CUR.BANK_DATA_FILE_NAME$,_CHG_VAR$(15,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("BANK_D_F_N")+" = "+_CUR.BANK_DATA_FILE_NAME$
15180 IF _ORIG.LAST_REC_STMT_DATE$=_CUR.LAST_REC_STMT_DATE$ OR LAST_REC_STMT_DATE$=_CUR.LAST_REC_STMT_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.LAST_REC_STMT_DATE$=LAST_REC_STMT_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("LAST_R_S_D")+" = "+_CUR.LAST_REC_STMT_DATE$,_CHG_VAR$(16,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_R_S_D")+" = "+_CUR.LAST_REC_STMT_DATE$
15190 IF _ORIG.ALT_BANK_CODE$=_CUR.ALT_BANK_CODE$ OR ALT_BANK_CODE$=_CUR.ALT_BANK_CODE$ THEN GOTO *NEXT ELSE IF _ORIG.ALT_BANK_CODE$=ALT_BANK_CODE$ THEN _CHG2$=_CHG2$+SEP+MSG("ALT_B_C")+" = "+_CUR.ALT_BANK_CODE$,_CHG_VAR$(17,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ALT_B_C")+" = "+_CUR.ALT_BANK_CODE$
15200 IF _ORIG.SUMMARY_RECORDS$=_CUR.SUMMARY_RECORDS$ OR SUMMARY_RECORDS$=_CUR.SUMMARY_RECORDS$ THEN GOTO *NEXT ELSE IF _ORIG.SUMMARY_RECORDS$=SUMMARY_RECORDS$ THEN _CHG2$=_CHG2$+SEP+MSG("SUMM_REC")+" = "+_CUR.SUMMARY_RECORDS$,_CHG_VAR$(18,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("SUMM_REC")+" = "+_CUR.SUMMARY_RECORDS$
15210 IF _ORIG.PAYMENT_FILE$=_CUR.PAYMENT_FILE$ OR PAYMENT_FILE$=_CUR.PAYMENT_FILE$ THEN GOTO *NEXT ELSE IF _ORIG.PAYMENT_FILE$=PAYMENT_FILE$ THEN _CHG2$=_CHG2$+SEP+MSG("PAYM_FILE")+" = "+_CUR.PAYMENT_FILE$,_CHG_VAR$(19,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PAYM_FILE")+" = "+_CUR.PAYMENT_FILE$
15220 IF _ORIG.FLEXIBLE_FORMAT$=_CUR.FLEXIBLE_FORMAT$ OR FLEXIBLE_FORMAT$=_CUR.FLEXIBLE_FORMAT$ THEN GOTO *NEXT ELSE IF _ORIG.FLEXIBLE_FORMAT$=FLEXIBLE_FORMAT$ THEN _CHG2$=_CHG2$+SEP+MSG("FLEX_F_C")+" = "+_CUR.FLEXIBLE_FORMAT$,_CHG_VAR$(20,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FLEX_F_C")+" = "+_CUR.FLEXIBLE_FORMAT$
15221 IF _ORIG.COMBINE_PDF$=_CUR.COMBINE_PDF$ OR COMBINE_PDF$=_CUR.COMBINE_PDF$ THEN GOTO *NEXT ELSE IF _ORIG.COMBINE_PDF$=COMBINE_PDF$ THEN _CHG2$=_CHG2$+SEP+MSG("CMP_PDF")+" = "+_CUR.COMBINE_PDF$,_CHG_VAR$(28,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("CMP_PDF")+" = "+_CUR.COMBINE_PDF$ ! SSP 307332
15222 IF _ORIG.UNIT_NUM$=_CUR.UNIT_NUM$ OR UNIT_NUM$=_CUR.UNIT_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.UNIT_NUM$=UNIT_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("UNIT_NUM")+" = "+_CUR.UNIT_NUM$,_CHG_VAR$(24,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNIT_NUM")+" = "+_CUR.UNIT_NUM$ ! WO 251293
15224 IF _ORIG.FILE_CREATION_DATE$=_CUR.FILE_CREATION_DATE$ OR FILE_CREATION_DATE$=_CUR.FILE_CREATION_DATE$ THEN GOTO *NEXT ELSE IF _ORIG.FILE_CREATION_DATE$=FILE_CREATION_DATE$ THEN _CHG2$=_CHG2$+SEP+MSG("FILE_DATE")+" = "+_CUR.FILE_CREATION_DATE$,_CHG_VAR$(25,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FILE_DATE")+" = "+_CUR.FILE_CREATION_DATE$ ! WO 251293
15226 IF _ORIG.FILE_SEQ_NUM$=_CUR.FILE_SEQ_NUM$ OR FILE_SEQ_NUM$=_CUR.FILE_SEQ_NUM$ THEN GOTO *NEXT ELSE IF _ORIG.FILE_SEQ_NUM$=FILE_SEQ_NUM$ THEN _CHG2$=_CHG2$+SEP+MSG("FILE_SEQ")+" = "+_CUR.FILE_SEQ_NUM$,_CHG_VAR$(26,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FILE_SEQ")+" = "+_CUR.FILE_SEQ_NUM$ ! WO 251293
15228 IF _ORIG.PAYMENT_FILE_FMT$=_CUR.PAYMENT_FILE_FMT$ OR PAYMENT_FILE_FMT$=_CUR.PAYMENT_FILE_FMT$ THEN GOTO *NEXT ELSE IF _ORIG.PAYMENT_FILE_FMT$=PAYMENT_FILE_FMT$ THEN _CHG2$=_CHG2$+SEP+MSG("PAYM_FLFMT")+" = "+_CUR.PAYMENT_FILE_FMT$,_CHG_VAR$(27,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("PAYM_FLFMT")+" = "+_CUR.PAYMENT_FILE_FMT$ ! WO267103
15230 IF _ORIG.ZYB_UNUSED_4$=_CUR.ZYB_UNUSED_4$ OR ZYB_UNUSED_4$=_CUR.ZYB_UNUSED_4$ THEN GOTO *NEXT ELSE IF _ORIG.ZYB_UNUSED_4$=ZYB_UNUSED_4$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.ZYB_UNUSED_4$,_CHG_VAR$(21,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.ZYB_UNUSED_4$
15240 IF _ORIG.EST_CHKS_PER_MONTH=_CUR.EST_CHKS_PER_MONTH OR EST_CHKS_PER_MONTH=_CUR.EST_CHKS_PER_MONTH THEN GOTO *NEXT ELSE IF _ORIG.EST_CHKS_PER_MONTH=EST_CHKS_PER_MONTH THEN _CHG2$=_CHG2$+SEP+MSG("EST_C_P_M")+" = "+STR(_CUR.EST_CHKS_PER_MONTH),_CHG_VAR$(22,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("EST_C_P_M")+" = "+STR(_CUR.EST_CHKS_PER_MONTH)
15250 IF _ORIG.LAST_REC_STMT_BAL=_CUR.LAST_REC_STMT_BAL OR LAST_REC_STMT_BAL=_CUR.LAST_REC_STMT_BAL THEN GOTO *NEXT ELSE IF _ORIG.LAST_REC_STMT_BAL=LAST_REC_STMT_BAL THEN _CHG2$=_CHG2$+SEP+MSG("LAST_R_S_B")+" = "+STR(_CUR.LAST_REC_STMT_BAL),_CHG_VAR$(23,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("LAST_R_S_B")+" = "+STR(_CUR.LAST_REC_STMT_BAL)
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN BANK_CODE$=_CUR.BANK_CODE$
16030 IF _CHG_VAR$(2,1)="Y" THEN BANK_ACCT_DESC$=_CUR.BANK_ACCT_DESC$
16040 IF _CHG_VAR$(3,1)="Y" THEN INSTITUTION_CODE$=_CUR.INSTITUTION_CODE$
16050 IF _CHG_VAR$(4,1)="Y" THEN SEPARATE_CHECK_STOCK$=_CUR.SEPARATE_CHECK_STOCK$
16060 IF _CHG_VAR$(5,1)="Y" THEN BANKS_ACCT_NUM$=_CUR.BANKS_ACCT_NUM$
16070 IF _CHG_VAR$(6,1)="Y" THEN ZYB_UNUSED_1$=_CUR.ZYB_UNUSED_1$
16080 IF _CHG_VAR$(7,1)="Y" THEN ZYB_UNUSED_2$=_CUR.ZYB_UNUSED_2$
16090 IF _CHG_VAR$(8,1)="Y" THEN ZYB_UNUSED_3$=_CUR.ZYB_UNUSED_3$
16100 IF _CHG_VAR$(9,1)="Y" THEN POST_CASH_TO_GL_ACCT$=_CUR.POST_CASH_TO_GL_ACCT$
16110 IF _CHG_VAR$(10,1)="Y" THEN POST_ADJ_TO_GL$=_CUR.POST_ADJ_TO_GL$
16120 IF _CHG_VAR$(11,1)="Y" THEN LAST_CHECK_NUM$=_CUR.LAST_CHECK_NUM$
16130 IF _CHG_VAR$(12,1)="Y" THEN HIGHEST_CHK_ON_HAND$=_CUR.HIGHEST_CHK_ON_HAND$
16140 IF _CHG_VAR$(13,1)="Y" THEN ALT_CURR_TO_USE$=_CUR.ALT_CURR_TO_USE$
16150 IF _CHG_VAR$(14,1)="Y" THEN BANK_DATA_FORMAT$=_CUR.BANK_DATA_FORMAT$
16160 IF _CHG_VAR$(15,1)="Y" THEN BANK_DATA_FILE_NAME$=_CUR.BANK_DATA_FILE_NAME$
16170 IF _CHG_VAR$(16,1)="Y" THEN LAST_REC_STMT_DATE$=_CUR.LAST_REC_STMT_DATE$
16180 IF _CHG_VAR$(17,1)="Y" THEN ALT_BANK_CODE$=_CUR.ALT_BANK_CODE$
16190 IF _CHG_VAR$(18,1)="Y" THEN SUMMARY_RECORDS$=_CUR.SUMMARY_RECORDS$
16200 IF _CHG_VAR$(19,1)="Y" THEN PAYMENT_FILE$=_CUR.PAYMENT_FILE$
16210 IF _CHG_VAR$(20,1)="Y" THEN FLEXIBLE_FORMAT$=_CUR.FLEXIBLE_FORMAT$
16220 IF _CHG_VAR$(21,1)="Y" THEN ZYB_UNUSED_4$=_CUR.ZYB_UNUSED_4$
16230 IF _CHG_VAR$(22,1)="Y" THEN EST_CHKS_PER_MONTH=_CUR.EST_CHKS_PER_MONTH
16240 IF _CHG_VAR$(23,1)="Y" THEN LAST_REC_STMT_BAL=_CUR.LAST_REC_STMT_BAL
16242 IF _CHG_VAR$(24,1)="Y" THEN UNIT_NUM$=_CUR.UNIT_NUM$ ! WO251293
16244 IF _CHG_VAR$(25,1)="Y" THEN FILE_CREATION_DATE$=_CUR.FILE_CREATION_DATE$ ! WO251293
16246 IF _CHG_VAR$(26,1)="Y" THEN FILE_SEQ_NUM$=_CUR.FILE_SEQ_NUM$ ! WO251293
16248 IF _CHG_VAR$(27,1)="Y" THEN PAYMENT_FILE_FMT$=_CUR.PAYMENT_FILE_FMT$ ! WO 276103
16250 IF _CHG_VAR$(28,1)="Y" THEN COMBINE_PDF$=_CUR.COMBINE_PDF$ ! SSP307332
16990 RETURN 
20000 ZYB_REC:
20005 READ (ZYB,KEY=_ZYB$,DOM=*NEXT)
20010 READ DATA FROM _ZYB$ TO IOL=IOL(ZYB:KEY,ERR=*NEXT)
20020 READ DATA FROM REC(IOL(ZYB,ERR=*NEXT)),REC=_ZYB$ TO IOL=IOL(ZYB)
20030 RETURN 
21000 ZYA_REC:
21005 _ZYA$=INSTITUTION_CODE$
21010 READ (ZYA,KEY=_ZYA$,DOM=*NEXT); GOTO 21020
21011 MSGBOX MSG("INVALID")+" "+MSG("INST_C"),"FYI","!" ! SSP#241318
21015 ML_INST_DESC$="******** N O F ********",REFRESH_FLG=1,NEXT_ID=INSTITUTION_CODE.CTL; GOTO 21040
21020 READ DATA FROM _ZYA$ TO IOL=IOL(ZYA:KEY,ERR=*NEXT)
21030 READ DATA FROM REC(IOL(ZYA,ERR=*NEXT)),REC=_ZYA$ TO IOL=IOL(ZYA)
21035 ML_INST_DESC$=ZYA_REC.BANK_NAME$,REFRESH_FLG=1
21040 RETURN 
21050 GL1_REC:
21060 READ (GL1,KEY=_GL1$,DOM=*NEXT); GOTO 21070
21062 IF ID$="POST_ADJ_TO_GL" AND STP(POST_ADJ_TO_GL$,3)="" THEN GOTO 21090 ! SSP#241318
21065 _GL1$="",GL1_REC.GL_ACCT_DESC$="******** N O F ********"; GOTO 21090
21070 READ DATA FROM _GL1$ TO IOL=IOL(GL1:KEY,ERR=*NEXT)
21080 READ DATA FROM REC(IOL(GL1,ERR=*NEXT)),REC=_GL1$ TO IOL=IOL(GL1)
21090 REFRESH_FLG=1
21095 RETURN 
21100 CK_REMAINING:
21110 CK_REMAINING=(NUM(HIGHEST_CHK_ON_HAND$)-NUM(LAST_CHECK_NUM$))
21111 CK_REMAINING1=(NUM(HIGHEST_CHK_ON_HAND$)-NUM(LAST_CHECK_NUM$))
21120 RETURN 
56000 REM "241318-Bank Account Code panel ZYGBAA has multiple issues          
56002 REM "251293-Bank Code option for P-Card file generation during CD update
56004 REM "267103-Option for different format for Positive Pay file of check  
56005 REM "307332-Create combined pdf of checks in a batch                    
