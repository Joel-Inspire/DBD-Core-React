0010 ! ZYGZY8 - File Maintenance Program for ZY8_Country (="ZY8"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Sep. 11, 2019 11:37
0030 ! ************************************************************************
0035 REM "5.7 - 09/11/19 - 14.475277 - crg - SSP# 307210
0037 REM "307210-International shipping address - add country code           
0040 REM "Copyright 2019 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 IF TCB(13)=1 THEN BEGIN 
0052 IF NUL(%WDX$) THEN MSGBOX "You must be using Windx to access this panel!"; GOTO 0075
0055 IF NOT(%GUI) THEN CHUI_MODE=1; %GUI=1 ! PRINT 'SHOW'(0)
0060 PROCESS "ZYGZY8","../ZZG/ZZ.EN"
0065 IF CHUI_MODE THEN %GUI=0; RUN "ZMENU" ! PRINT 'SHOW'(1); RUN "ZMENU"
0075 IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0160 _FILE_NAME$="ZY8"+%C$
0170 _FIL_NO=HFN; OPEN (_FIL_NO,IOL=*,ERR=OPEN_ERR)_FILE_NAME$
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="COUNTRY_CODE$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1220 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1230 MSGBOX _MSG_REC_MISS1$+_R_KEY$+_MSG_REC_MISS2$+SEP+_MSG_REC_CR_NEW$,_MSG_NOT_FOUND$,"?,YESNO",_YESNO$
1240 IF _YESNO$="NO" THEN NEXT_ID=_FIRST_KEY,CHANGE_FLG=0; EXIT 
1250 _CLR_FLG$="F"; GOSUB CLEAR_FIELDS
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3070 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=COUNTRY_CODE.CTL,_FIRST_FIELD=COUNTRY_DESC.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF UCS(_KEYS$[_CURKEY])=UCS(ID$)+"$" OR UCS(_KEYS$[_CURKEY])=UCS(ID$) THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN COUNTRY_CODE$=""
13030 COUNTRY_DESC$=""
13040 ALPHA3_CODE$=""
13050 ALT_DESC_1$=""
13060 ALT_DESC_2$=""
13070 ALT_DESC_3$=""
13080 ZY8_UNUSED$=""
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
16995 ! 
17000 MERGE_COUNTRY_FILE:
17005 OPEN (HFN)"ZY8"; _ZY8=LFO
17006 OPEN (HFN)"ZY8"+%C$; _ZY8CUS=LFO
17010 READ (_ZY8,KEY="",DOM=*NEXT)
17020 READ RECORD (_ZY8,END=END_MERGE)ZY8$
17030 COUNTRY_CODE$=MID(ZY8$,1,2)
17040 WRITE RECORD (_ZY8CUS,KEY=COUNTRY_CODE$,DOM=*NEXT)ZY8$
17050 GOTO 17020
17060 END_MERGE:
17070 MSGBOX "Process Completed !!","F.Y.I","!,TIM=3)"
17080 NEXT_ID=COUNTRY_CODE.CTL
17085 CLOSE (_ZY8),(_ZY8CUS)
17090 RETURN 
17095 ! 
20000 LOOKUP_COUNTRY:
20010 ENTER X3$,X4$,IN_COUNTRY$,T$,T{ALL},ERR=*NEXT
20015 ZY8_IOL:IOLIST T$(1)
20030 OPEN (HFN)"ZY8"+%C$; _ZY8=LFO
20050 ! 
20080 IF NUL(IN_COUNTRY$) THEN GOTO NOT_FOUND
20090 COUNTRY$=STP(UCS(IN_COUNTRY$),2)
20095 ! 
20100 FIND_BY_KEY:! Primary key, Alpha-2 code, "US"
20102 IF LEN(COUNTRY$)>2 THEN GOTO FIND_BY_ALTKEY1
20105 READ (_ZY8,KEY=COUNTRY$,KNO=0,DOM=FIND_BY_ALTKEY1,ERR=FIND_BY_ALTKEY1)
20110 COUNTRY_CODE$=COUNTRY$; GOTO FOUND_COUNTRY
20119 ! 
20120 FIND_BY_ALTKEY1:! Alpha-3 code, "USA" <=> "US"
20122 IF LEN(COUNTRY$)>3 THEN GOTO FIND_BY_ALTKEY2
20125 READ (_ZY8,KEY=COUNTRY$,KNO=1,DOM=*NEXT)
20130 TKEY$=KEY(_ZY8,END=FIND_BY_ALTKEY2); IF MID(TKEY$,1,3)=COUNTRY$ THEN COUNTRY_CODE$=MID(TKEY$,4,2); GOTO FOUND_COUNTRY
20139 ! 
20140 FIND_BY_ALTKEY2:! Country Desc, "United States" <=> "US"
20145 READ (_ZY8,KEY=COUNTRY$,KNO=2,DOM=*NEXT)
20150 TKEY$=KEY(_ZY8,END=FIND_BY_ALTKEY3); IF MID(TKEY$,1,60)=PAD(COUNTRY$,60) THEN COUNTRY_CODE$=MID(TKEY$,61,2); GOTO FOUND_COUNTRY
20159 ! 
20160 FIND_BY_ALTKEY3:! Alt Desc 1, "United States" <=> "US"
20165 READ (_ZY8,KEY=COUNTRY$,KNO=3,DOM=*NEXT)
20170 TKEY$=KEY(_ZY8,END=FIND_BY_ALTKEY4); IF MID(TKEY$,1,60)=PAD(COUNTRY$,60) THEN COUNTRY_CODE$=MID(TKEY$,61,2); GOTO FOUND_COUNTRY
20179 ! 
20180 FIND_BY_ALTKEY4:! Alt Desc 2, "United States" <=> "US"
20185 READ (_ZY8,KEY=COUNTRY$,KNO=4,DOM=*NEXT)
20190 TKEY$=KEY(_ZY8,END=FIND_BY_ALTKEY5); IF MID(TKEY$,1,60)=PAD(COUNTRY$,60) THEN COUNTRY_CODE$=MID(TKEY$,61,2); GOTO FOUND_COUNTRY
20199 ! 
20200 FIND_BY_ALTKEY5:! Alt Desc 3, "United States" <=> "US"
20205 READ (_ZY8,KEY=COUNTRY$,KNO=5,DOM=*NEXT)
20210 TKEY$=KEY(_ZY8,END=NOT_FOUND); IF MID(TKEY$,1,60)=PAD(COUNTRY$,60) THEN COUNTRY_CODE$=MID(TKEY$,61,2); GOTO FOUND_COUNTRY
20219 ! 
20335 GOTO NOT_FOUND
20340 ! 
20350 FOUND_COUNTRY:
20370 DIM T$(450); READ (_ZY8,KEY=COUNTRY_CODE$,KNO=0,DOM=NOT_FOUND)IOL=ZY8_IOL
20390 GOTO WRAPUP_COUNTRY
20400 ! 
20410 NOT_FOUND:
20415 COUNTRY_NOT_FOUND=1
20430 GOTO WRAPUP_COUNTRY
20440 ! 
20450 WRAPUP_COUNTRY:
20460 CLOSE (_ZY8)
20480 ! 
20485 IF COUNTRY_NOT_FOUND THEN EXIT 96 ! Error condition 96 - Invalid Return Value
20490 ! 
20495 EXIT 
20499 ! 
20500 TEST_IT:
20505 OPEN (HFN)"ZY8"+%C$; _ZY8=LFO
20510 WRITE RECORD (_ZY8,KEY="00")"00"+PAD("OUTTHERE",60)+"000"+PAD("WAYOUTTHERE",60)+PAD("OUTERSPACE",60)+PAD("OTHERDIMENSION",60)
20520 TEST$=""; CALL "ZYGZY8;LOOKUP_COUNTRY",%X3$,%X4$,"00",TEST$; PRINT MID(TEST$,1,62); IF MID(TEST$,1,2)<>"00" THEN ESCAPE 
20530 TEST$=""; CALL "ZYGZY8;LOOKUP_COUNTRY",%X3$,%X4$,"000",TEST$; PRINT MID(TEST$,1,62); IF MID(TEST$,1,2)<>"00" THEN ESCAPE 
20540 TEST$=""; CALL "ZYGZY8;LOOKUP_COUNTRY",%X3$,%X4$,"OUTTHERE",TEST$; PRINT MID(TEST$,1,62); IF MID(TEST$,1,2)<>"00" THEN ESCAPE 
20550 TEST$=""; CALL "ZYGZY8;LOOKUP_COUNTRY",%X3$,%X4$,"WAYOUTTHERE",TEST$; PRINT MID(TEST$,1,62); IF MID(TEST$,1,2)<>"00" THEN ESCAPE 
20560 TEST$=""; CALL "ZYGZY8;LOOKUP_COUNTRY",%X3$,%X4$,"OuterSpace",TEST$; PRINT MID(TEST$,1,62); IF MID(TEST$,1,2)<>"00" THEN ESCAPE 
20570 TEST$=""; CALL "ZYGZY8;LOOKUP_COUNTRY",%X3$,%X4$,"OTHERDIMENSION",TEST$; PRINT MID(TEST$,1,62); IF MID(TEST$,1,2)<>"00" THEN ESCAPE 
20571 TEST$=""; CALL "ZYGZY8;LOOKUP_COUNTRY",%X3$,%X4$,"UNITED STATES",TEST$; PRINT MID(TEST$,1,62); IF MID(TEST$,1,2)<>"US" THEN ESCAPE 
20572 TEST$=""; CALL "ZYGZY8;LOOKUP_COUNTRY",%X3$,%X4$,"United States",TEST$; PRINT MID(TEST$,1,62); IF MID(TEST$,1,2)<>"US" THEN ESCAPE 
20575 TEST$=""; CALL "ZYGZY8;LOOKUP_COUNTRY",ERR=*PROCEED,%X3$,%X4$,"DOESNOTEXIST",TEST$; PRINT MID(TEST$,1,62); IF NOT(NUL(TEST$)) THEN ESCAPE 
20580 PRINT "IF YOU SEE THIS, EVERYTHING WORKED"
20590 REMOVE (_ZY8,KEY="00")
20595 CLOSE (_ZY8)
20598 RETURN 
20599 ! 
56001 REM "307210-International shipping address - add country code           
