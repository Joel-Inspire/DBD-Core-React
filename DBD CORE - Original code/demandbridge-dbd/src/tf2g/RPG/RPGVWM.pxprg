0010 ! RPGVWM - View External Reports
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Jul. 21, 2004 16:58
0030 ! ************************************************************************
0035 REM "5.7 - 04/06/20 - 16.49 - crg - SSP# 307282
0037 REM "307282-DBRS Report Viewer - Only licensed comp allowed to run and  
0040 REM "Copyright 2020 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 IF TCB(13)=1 THEN BEGIN 
0052 IF NUL(%WDX$) THEN MSGBOX "You must be using Windx to access TopForm to scan images into the library"; GOTO 0075
0055 IF NOT(%GUI) THEN CHUI_MODE=1; %GUI=1; PRINT 'SHOW'(0)
0060 IF FN%HAS_MODULE("RP") THEN PROCESS "RPGVWM","../RPG/RP.EN"
0065 IF CHUI_MODE THEN %GUI=0; PRINT 'SHOW'(1); RUN "ZMENU"
0075 IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0115 %NO_X=1
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0154 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; DIM Z[NUM(X3$(60,3))]
0155 Z$="01O RPA...  02O RPC...  03O RPD...  13O ZZPARM " ! SSP241019 jdf
0156 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
0174 IF NOT(%GLOBALS_DONE) THEN PERFORM "ZZGGBL;SET_GLOBALS"
0185 READ (Z[13],KEY=X3$(9,3)+"EXTREPORT",DOM=*NEXT)RPTPARM$ ! read module parameters
0187 READ (Z[13],KEY=X3$(40,3)+"RPGVWM",DOM=*NEXT)IOL=DEFAULT_LIST ! read operator specific/program specific info
0188 IF PNL_COL>80 THEN PNL_COL=3 ! ssp 212524
0189 IF PNL_LINE>50 THEN PNL_LINE=15 ! 307230
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0250 DEFAULT_LIST:IOLIST DEF_START_RPT$,PNL_COL,PNL_LINE,PNL_W,PNL_H
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0522 IF PNL_COL>=0 AND PNL_LINE>=0 THEN _ORIG_OBJ_C=PNL_COL,_ORIG_OBJ_L=PNL_LINE,_ORIG_OBJ_W=MIN(_PNL_MAX_W,PNL_W),_ORIG_OBJ_H=MIN(_PNL_MAX_H,PNL_H); PRINT (0,ERR=*NEXT)'SIZE'(_ORIG_OBJ_W,_ORIG_OBJ_H),'MOVE'(_ORIG_OBJ_C,_ORIG_OBJ_L),
0525 VIIW_OPT$="A"; GOSUB SETUP_REPORT_WINDOW
0530 GOSUB LOAD_REPORTS_LIST
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0915 %NO_X=0
0920 %NO_VALIDATE=0
0925 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0940 IF _CUR_FN<>0 THEN CLOSE (_CUR_FN); _CUR_FN=0
0945 IF SCAN_WINDOW_HANDLE THEN CALL "[WDX]*OCX;CLOSE_OCX_OBJECT",SCAN_WINDOW_HANDLE; SCAN_WINDOW_HANDLE=0 ! 232305
0950 MESSAGE_LIB _SV_MSGLIB$
0952 X$=OBJ(0),M$=MSE,PNL_COL=INT((DEC(X$(21,2))+1)/DEC($00$+M$(10,1))),PNL_LINE=INT((DEC(X$(23,2))+1)/DEC($00$+M$(11,1))),PNL_W=PANEL_WIDE,PNL_H=PANEL_HIGH
0955 WRITE (Z[13],KEY=X3$(40,3)+"RPGVWM")IOL=DEFAULT_LIST ! write out operator specific/program specific info
0960 SET_PARAM 'KR'=_SV_KR
0962 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
0970 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
19000 RECORD_MISSING:! given MISSING_MESS$ use MSG("RPGVWM_03") and give msgbox and end
19010 MSGBOX MSG("RPGVWM_03",MISSING_MESS$),MSG("MB_ATTN"),"!"
19040 MISSING_MESS$=""
19095 EXIT 
19299 ! ****************************************************
19300 SET_REFRESH_FLG:
19310 REFRESH_FLG=1
19320 RETURN 
26000 SETUP_REPORT_WINDOW:! setup scan window area based on location of INDEX_BOX control
26005 LINE=7
26085 GOSUB SET_WINDOW_SIZE; CALL "[WDX]*OCX;URL_IN_IE",COLUMN,LINE,WIDTH,HEIGHT,"IL_LOGO",SCAN_WINDOW_HANDLE,RET_CODE
26086 VIIW_OPT$=""
26090 OBTAIN (0,ERR=*NEXT,TIM=.1)*
26095 RETURN 
26099 ! *****************************************************
27000 LOAD_REPORTS_LIST: RPA_ARRAY$=""; DROP_BOX LOAD RPT_LIST.CTL,"",ERR=*NEXT; READ (Z[3],KEY=X3$(40,3),DOM=*NEXT)
27001 OPER_KEY$=KEY(Z[3],END=27090); READ (Z[3],KEY=OPER_KEY$)RPD$
27002 IF X3$(40,3)<>RPD$(1,3) THEN GOTO 27090
27003 RPT_ROLE_ID$=RPD$(4,4)
27012 READ (Z[2],KEY=RPT_ROLE_ID$,DOM=*NEXT)
27015 RPT_ROLE_KEY$=KEY(Z[2],END=27056); READ (Z[2],KEY=RPT_ROLE_KEY$)RPC$
27016 IF RPT_ROLE_ID$<>RPC$(1,4) THEN GOTO 27056 ELSE IF RPC$(15,1)<>"R" THEN GOTO 27015
27017 RPT_KEY$=RPC$(5,10)
27018 READ (Z[1],KEY=RPT_KEY$,DOM=27015)RPA$
27020 IF X3$(43,2)<MID(RPA$,271,2) THEN GOTO 27015
27022 IF POS(MID(RPA$,273,1)=" R")=0 THEN GOTO 27015 ! Skip dashboards
27025 IF POS(MID(RPA$,1,10)=RPA_ARRAY$,10)>0 THEN GOTO 27051
27030 RPA_ARRAY$=RPA_ARRAY$+MID(RPA$,1,10)
27050 DROP_BOX LOAD RPT_LIST.CTL,++RPT_INDEX,MID(RPA$,1,10)+" - "+STP(MID(RPA$,11,40),2)
27055 GOTO 27015
27060 GOTO 27001
27095 RETURN 
27099 ! *****************************************************
35200 SELECT_REPORT:! Select a report from the list
35210 RPT_REC$=""; DROP_BOX READ RPT_LIST.CTL,RPT_REC$,ERR=*NEXT
35220 GET_REPORT_SETTINGS:
35230 IF NOT(NUL(RPT_REC$)) THEN READ (Z[1],KEY=MID(RPT_REC$,1,10))RPT_SELECTED$
35240 REPORT_PATH$=STP(MID(RPTPARM$,13,156),2)+STP(MID(RPT_SELECTED$,151,120),2)
35250 RPT_DESC$=MID(RPT_SELECTED$,51,100)
35260 REFRESH_FLG=1
35270 RETURN 
35280 ! 
35290 ! View an external report in viewer
35300 VIEW_REPORT:
35310 GOSUB CREATE_URL ! returns URL$
35320 SYSTEM_HELP QUO+URL$+QUO ! spin up a browser with the new URL
35330 LAST_BUTTON_USED=VIEW_REPORT.CTL
35340 RETURN 
35350 ! 
35360 ! Given report id and options array, run report and save to file, as a background task
35370 RUN_REPORT:
35380 ENTER RPT_REC$,RPP${ALL},PARAM_CNT,OUTFILE$,RETURN_CODE,RETURN$,ERR=*NEXT
35390 GOSUB INIT
35400 GOSUB GET_REPORT_SETTINGS
35405 GOSUB CREATE_URL; REPORT_PATH$=URL$
35410 FOR P=1 TO PARAM_CNT
35450 REPORT_PATH$+="&"+STP(RPP$[P,0],2)+"="+STP(RPP$[P,1],2)
35460 NEXT P
35470 IF POS("/frameset?"=REPORT_PATH$) THEN REPORT_PATH$=SUB(REPORT_PATH$,"/frameset?","/run?") ! Change URL from interactive viewer to background execution (assuming it is a BIRT URL)
35480 WGET_CMD$="wget -q "+QUO+REPORT_PATH$+QUO+" -O "+OUTFILE$
35490 INVOKE WGET_CMD$
35500 GOSUB WRAPUP
35510 EXIT 
35520 ! 
35530 ! get data from DB/d for this customer, create a URL including a computed hash
35540 CREATE_URL:
35550 GOSUB GET_TIME ! return DBD_TIME$
35560 GOSUB GET_SERIAL_AND_AUTH ! return DBD_SERIAL_NUMBER$ and DBD_AUTH_CODE$
35570 GOSUB GET_SERVER_KEY ! return DBD_SERVER_KEY$
35580 GOSUB GET_REPORT_NAME ! return DBD_REPORT_NAME$
35590 RAWDATA$=DBD_REPORT_NAME$+DBD_SERIAL_NUMBER$+DBD_AUTH_CODE$+DBD_TIME$+%X3$(40,3)+DBD_SERVER_KEY$
35599 RAWDATA$=SUB(RAWDATA$," ","0")
35600 IF NOT(NUL(DBD_SERVER_KEY$)) THEN DBD_S1$="&digest="+STP(HTA(HSH(RAWDATA$,"",1,HASHERROR)),0,"0")
35610 DBD_S2$="&dbd_serial_number="+DBD_SERIAL_NUMBER$
35620 DBD_S3$="&dbd_auth_code="+DBD_AUTH_CODE$
35630 DBD_S5$="&dbd_time="+DBD_TIME$
35635 DBD_S4$="&dbd_operator="+%X3$(40,3)
35640 URL$=REPORT_PATH$+DBD_S1$+DBD_S2$+DBD_S3$+DBD_S4$+DBD_S5$
35650 RETURN 
35660 ! 
35670 HASHERROR:
35680 MSGBOX ("ERROR while creating hash")
35690 URL$=""
35700 RETURN 
35710 ! 
35720 GET_REPORT_NAME:
35730 DBD_REPORT_NAME$=STP(MID(RPT_SELECTED$,151,120),2) ! for instance, "dbreport_open_ar_invoice.rptdesign"
35740 RETURN DBD_REPORT_NAME$
35750 ! 
35760 GET_TIME:
35770 YEAR$=DTE(0:"%Yl")
35780 MONTH$=DTE(0:"%Mz")
35790 DAY$=DTE(0:"%Dz")
35800 HOUR$=DTE(0:"%Hz")
35810 MINUTE$=DTE(0:"%mz")
35820 SECOND$=DTE(0:"%sz")
35830 DBD_TIME$=YEAR$+MONTH$+DAY$+HOUR$+MINUTE$+SECOND$
35840 RETURN DBD_TIME$
35850 ! 
35860 GET_SERIAL_AND_AUTH:
35870 CALL "TF"+%LIC_COMP$+";LIMA",APPINFO$ ! Get application info
35880 DBD_SERIAL_NUMBER$=APPINFO$(47,9) ! Serial Num
35890 DBD_AUTH_CODE$=APPINFO$(56,8) ! Auth Code
35900 RETURN DBD_AUTH_CODE$
35910 ! 
35920 GET_SERVER_KEY:
35930 DBD_SERVER_KEY$=STP(RPTPARM$(369,64))
35940 RETURN DBD_SERVER_KEY$
36000 ! 
36010 ! *******************************************************
36020 EXIT:! Exit button pressed, are we ready to leave?
36030 CMD_STR$="END"
36040 RETURN 
36050 ! ****************************************************
40000 SET_WINDOW_SIZE:! Set WIDTH and HEIGHT based on already set COLUMN and LINE to fill out the rest of the window
40010 CALL "*INFO;GETWINDOWVIEWPORT",PANEL_WIDE,PANEL_HIGH
40020 WIDTH=(PANEL_WIDE-COLUMN)
40030 HEIGHT=(PANEL_HIGH-LINE)
40095 RETURN 
40099 ! *************************************************************
40100 WINDOW_RESIZE:! Window was resized
40110 IF SCAN_WINDOW_HANDLE=0 THEN RETURN 
40120 GOSUB SET_WINDOW_SIZE
40130 CALL "[WDX]*OCX;REDO_OBJECT_WINDOW",COLUMN,LINE,WIDTH,HEIGHT,SCAN_WINDOW_HANDLE
40195 RETURN 
40199 ! *************************************
56001 REM "255884-Design reports for DB Reports Suite (DBRS); Master Issue for
56002 REM "261434-DBRS Development - Next Phase - Ability to schedule BIRT rpt
56003 REM "278217-DBRS Reports Viewer panel depends on I/L programs. Errors i
56004 REM "279707-DBRS Development - single sign-on/authentication
56005 REM "282314-DBRS; Invoice Detail-Commission Report                      
56006 REM "285836-Error in DBRS authentication for short (2-char) names.      
56007 REM "307230-DBSPT-75331: RPGVWM panel positioning on screen logic broken
56008 REM "307282-DBRS Report Viewer - Only licensed comp allowed to run and  
