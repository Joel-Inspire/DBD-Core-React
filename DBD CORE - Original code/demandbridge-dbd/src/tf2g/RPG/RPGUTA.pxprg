0010 ! RPGUTA - Utility to update DPRS RPA/RPP files from master files
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Oct. 30, 2007 8:52
0030 ! ************************************************************************
0035 REM "5.7 - 01/27/16 - 9.525277 - jvv - SSP# 282220
0037 REM "282220-DBRS - Utility to copy reports definition from release data 
0040 REM "Copyright 2016 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0060 IF TCB(88)=0 THEN MSGBOX "You must be using Windx to access this program" ELSE PROCESS "RPGUTA","../RPG/RP.EN"
0080 IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0160 _FILE_NAME$="RPA000" ! Master report definition files
0165 _RPA_RL=HFN; OPEN (_RPA_RL,ERR=OPEN_ERR)_FILE_NAME$
0170 _FILE_NAME$="RPP000"
0175 _RPP_RL=HFN; OPEN (_RPP_RL,ERR=OPEN_ERR)_FILE_NAME$
0180 _FILE_NAME$="RPA"+%C$ ! Company RPA 
0185 _RPA_C=HFN; OPEN (_RPA_C,ERR=OPEN_ERR)_FILE_NAME$
0190 _FILE_NAME$="RPP"+%C$
0195 _RPP_C=HFN; OPEN (_RPP_C,ERR=OPEN_ERR)_FILE_NAME$
0198 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0930 IF _FIL_NO<>0 THEN CLOSE (_FIL_NO); _FIL_NO=0
0940 IF _OSM_NO<>0 THEN CLOSE (_OSM_NO); _OSM_NO=0
0941 IF _OS0_NO<>0 THEN CLOSE (_OS0_NO); _OS0_NO=0
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0970 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 LIST_BOX_1:
10005 ! Populate list box from Standard RPA file
10010 IDX=0
10030 LIST_BOX LOAD LIST_BOX_1.CTL,""
10040 READ (_RPA_RL,KEY="",DOM=*NEXT)
10045 NEXT_RPA:
10050 READ (_RPA_RL,END=*RETURN)A$
10060 RPT_ID$=A$(1,10),DESC$=PAD(A$(11,40),40)
10070 IDX+=1; LIST_BOX LOAD LIST_BOX_1.CTL,IDX,RPT_ID$+SEP+DESC$
10080 GOTO NEXT_RPA
10085 RETURN 
10089 ! 
10100 SEL_LINE_LB_1:! Select Line from Rel File to copy
10102 LLEN=52
10104 SEL_LINE_LB_11:! Select Line from Rel File to copy into ZZPARM or QSX
10105 IF LIST_BOX_1$="" THEN EXIT 
10110 LIST_BOX READ LIST_BOX_1.CTL,RL$
10115 ! F _EOM$=$02$ THEN GOTO SELECT_LINES
10120 ! OTO MULTI_SELECT_OPT
10130 SELECT_LINES:
10135 RLEN=LEN(RL$)/LLEN ! Compute how many entries were selected
10140 FOR XX=1 TO RLEN
10150 RTXT$=RL$((XX*LLEN)-(LLEN-1),LLEN)
10159 ! 
10160 RL_ID$=RTXT$(1,10); RL_DESC$=RTXT$(12,40)
10165 FROM_LIST=1,NEW_COPY=0
10170 GOSUB COPY_FILES
10180 IF NEW_COPY THEN LIST_BOX LOAD LIST_BOX_2.CTL,0,RL_ID$+SEP+RL_DESC$ ! ITEM_NUMBER$
10190 NEXT XX
10192 LIST_BOX WRITE LIST_BOX_1.CTL,""
10193 LIST_BOX_1$=""
10195 RETURN 
10199 ! 
10200 SEL_LB_1:
10210 IF _EOM$=$02$ THEN LLEN=51; GOTO SEL_LINE_LB_11
10215 RETURN 
10220 ! 
10230 SEL_LB_2:
10240 IF _EOM$=$02$ THEN LLEN=51; GOTO SEL_LINE_LB_21
10250 RETURN 
10259 ! 
10299 ! 
10300 LIST_BOX_2:
10310 IDX_2=0
10320 LIST_BOX LOAD LIST_BOX_2.CTL,""
10330 READ (_RPA_C,KEY="",DOM=*NEXT)
10340 READ (_RPA_C,END=*RETURN)B$
10350 RPT_ID$=B$(1,10),DESC$=PAD(B$(11,40),40)
10360 IDX_2+=1; LIST_BOX LOAD LIST_BOX_2.CTL,IDX_2,RPT_ID$+SEP+DESC$
10365 GOTO 10340
10370 RETURN 
10399 ! 
10400 SEL_LINE_LB_2:! Select Line from Compaany file to copy to master
10402 LLEN=52
10404 SEL_LINE_LB_21:! Select Line from Compaany file to copy to master
10410 IF LIST_BOX_2$="" THEN EXIT 
10420 LIST_BOX READ LIST_BOX_2.CTL,RL$
10425 RLEN=LEN(RL$)/LLEN ! Compute how many entries were selected
10430 FOR XX=1 TO RLEN
10440 RTXT$=RL$((XX*LLEN)-(LLEN-1),LLEN)
10445 RL_ID$=RTXT$(1,10); RL_DESC$=RTXT$(12,40)
10450 FROM_LIST=2,NEW_COPY=0
10455 GOSUB COPY_FILES
10460 IF NEW_COPY THEN LIST_BOX LOAD LIST_BOX_1.CTL,0,RL_ID$+SEP+RL_DESC$ ! ITEM_NUMBER$
10465 NEXT XX
10470 LIST_BOX WRITE LIST_BOX_2.CTL,""
10475 LIST_BOX_2$=""
10490 RETURN 
10499 ! 
10500 MULTI_LNS:
10510 GOSUB SELECT_LINES
10520 RETURN 
10529 ! 
10530 MULTI_SELECT_OPT:
10540 ENABLE CONTROL BT_ALL.CTL
10550 RETURN 
10559 ! 
10599 ! 
10600 COPY_FILES:
10610 OLD_KY$=RL_ID$,NEW_KY$=OLD_KY$,NEW_DESC$=RL_DESC$
10620 IF FROM_LIST=1 THEN IN_FILE=_RPA_RL,IN_FILED=_RPP_RL,OUT_FILE=_RPA_C,OUT_FILED=_RPP_C ELSE IN_FILE=_RPA_C,IN_FILED=_RPP_C,OUT_FILE=_RPA_RL,OUT_FILED=_RPP_RL
10630 CHECK_EXISTING:
10670 FIND (OUT_FILE,KEY=NEW_KY$,DOM=*NEXT)*; GOTO REC_EXISTS
10672 NEW_COPY=1
10675 WRITE_REC:
10680 READ RECORD (IN_FILE,KEY=OLD_KY$)REC$
10682 REC$(1,LEN(NEW_KY$))=NEW_KY$,REC$(LEN(NEW_KY$)+1,40)=NEW_DESC$
10685 WRITE RECORD (OUT_FILE,KEY=NEW_KY$)SUB(REC$,$00$,"")
10688 GOSUB ADD_RPP
10690 RL_ID$=MID(NEW_KY$,1,10),RL_DESC$=NEW_DESC$ ! Set fields for display in list box after copy
10695 GOTO *RETURN
10699 ! 
10800 REC_EXISTS:
10810 REC_EXISTS$="REPORT "+NEW_KY$+" ALREADY EXISTS"
10815 MSGBOX REC_EXISTS$+SEP+"DO YOU WISH TO OVERWRITE",MSG("CONFIRM"),"?,YESNOCANCEL",ANSWER$
10820 IF ANSWER$="CANCEL" THEN GOTO *RETURN
10825 IF ANSWER$="YES" THEN GOSUB DEL_RPT; GOTO WRITE_REC
10830 RPT_SEL$=NEW_KY$
10840 SELECTED$=""
10845 RPT_DESC$=NEW_DESC$
10850 PROCESS "RPGUTA.1","../RPG/RP.EN",SELECTED$,RPT_SEL$,RPT_DESC$
10860 IF STP(SELECTED$,2)="C" THEN GOTO *RETURN
10865 IF STP(SELECTED$,2)="" THEN GOSUB GET_NEXT_RPT_ID
10870 NEW_KY$=STR(NUM(SELECTED$):DIM(10,"0"),ERR=*NEXT)
10875 NEW_DESC$=RPT_DESC$; IF STP(NEW_DESC$,2)="" THEN NEW_DESC$=DESC$
10878 NEW_DESC$=PAD(NEW_DESC$,40)
10880 GOTO CHECK_EXISTING
10890 RETURN 
10899 ! 
10900 DEL_RPT:! Remove any existing RPA/RPP records before overwriting same rpt id
10910 READ (OUT_FILED,KEY=NEW_KY$,ERR=*NEXT)
10915 DEL_NEXT_RPP:
10920 KD$=KEY(OUT_FILED,END=10980); READ (OUT_FILED,KEY=KD$)OUTF$
10930 IF OUTF$(1,LEN(NEW_KY$))<>NEW_KY$ THEN GOTO DEL_RPA
10940 REMOVE (OUT_FILED,KEY=KD$)
10950 GOTO DEL_NEXT_RPP
10970 DEL_RPA:
10980 REMOVE (OUT_FILE,KEY=NEW_KY$)
10990 RETURN 
10999 ! 
11000 ADD_RPP:
11010 READ RECORD (IN_FILED,KEY=OLD_KY$+"",ERR=*NEXT)DREC$
11012 ADD_NEXT_RPP:
11015 DKEY$=KEY(IN_FILED,END=11090); READ RECORD (IN_FILED,KEY=DKEY$)DREC$
11020 IF DREC$(1,LEN(OLD_KY$))<>OLD_KY$ THEN GOTO *RETURN
11030 DREC$(1,LEN(NEW_KY$))=NEW_KY$
11035 NKEY$=DKEY$,NKEY$(1,LEN(NEW_KY$))=NEW_KY$
11040 WRITE RECORD (OUT_FILED,KEY=NKEY$)SUB(DREC$,$00$,"")
11050 GOTO ADD_NEXT_RPP
11090 RETURN 
11099 ! 
11100 GET_NEXT_RPT_ID:
11110 ID_PFX$=MID(OLD_KY$,1,3),SEQ$=" "; READ (OUT_FILE,KEY=ID_PFX$+$FF$,DOM=*NEXT)
11120 RID_KEY$=KEP(OUT_FILE,END=*NEXT); SEQ$=MID(RID_KEY$,4,7)
11130 IF STP(SEQ$,3," ")="" THEN SEQ$="0"
11140 SEQ$=STR(NUM(SEQ$)+1:DIM(7,"0"))
11150 RPT_ID$=ID_PFX$+SEQ$
11160 SELECTED$=RPT_ID$
11170 RETURN 
11199 ! 
12100 GET_LAST_KEY:! Auto Rpt ID
12130 RPT_ID$=DIM(10,$00$); RPT_ID$=KEL(OUT_FILE,END=*NEXT)
12140 IF NUL(RPT_ID$) THEN RPT_ID$=DIM(10,$00$) ELSE IF RPT_ID$=DIM(10,"Z") THEN MSGBOX "Error: Last possible key - No more entries allowed"; CMD_STR$="END"; RETURN 
12150 RPT_ID$=FN%NEXT_SEQ$(RPT_ID$,6)
12160 SELECTED$=RPT_ID$
12190 RETURN 
