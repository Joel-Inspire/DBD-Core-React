0010 ! RPGRPA - File Maintenance Program for RPA_ReportMst (="RPA"+%C$)
0020 ! Generated by ProvideX® NOMADS II File Maintenance on Jan. 22, 2010 0:23
0030 ! ************************************************************************
0035 REM "5.7 - 09/14/16 - 13.073055 - tma - SSP# 286942
0037 REM "286942-Trying to setup the Report Scheduler for the Reports Suite  
0040 REM "Copyright 2016 Demand Bridge, LLC.; Norcross, Georgia
0041 REM "        Licensed Software - All Rights Reserved.
0050 IF TCB(13)=1 THEN BEGIN 
0052 IF NUL(%WDX$) THEN MSGBOX "You must be using Windx to maintain report entries"; GOTO 0075
0055 IF NOT(%GUI) THEN CHUI_MODE=1; %GUI=1; PRINT 'SHOW'(0)
0060 PROCESS "RPGRPA","../RPG/RP.EN"
0065 IF CHUI_MODE THEN %GUI=0; PRINT 'SHOW'(1); RUN "ZMENU"
0075 IF TCB(13)=1 THEN RUN "ZMENU" ELSE EXIT 
0090 ! 
0100 ! 100 - Initialization
0110 INIT:
0120 _SV_KR=PRM('KR'); SET_PARAM 'KR'=0 ! Ensure native handling of KEP()
0130 GOSUB SETUP_LIBRARY; IF %FLMAINT_MSG$<>"" THEN MESSAGE_LIB %FLMAINT_MSG$
0140 CHANGE_FLG=0,_ENABLE_FLG=0,_KCNT=1,_FIRST_KEY=0,_FIRST_FIELD=0
0150 GOSUB SETUP_KEYS
0154 CALL "ZZCOMP",X0$,X1$,X2$,X3$,X4$,M9$,-1,X1,X2; DIM Z[NUM(X3$(60,3))]
0155 Z$="01O RPA...  02O RPP...  03O RPK...  04O DTT...  13O ZZPARM "
0156 CALL "ZZFLES",X3$,Y1$,Y0$,Z$,Z{ALL},Z0,Z1
0160 _FILE_NAME$="RPA"+%C$
0170 _FIL_NO=Z[1]
0175 DTT=Z[4]
0190 RETURN 
0200 OPEN_ERR: MSGBOX _MSG_FILOPNERR1$+QUO+_FILE_NAME$+QUO+SEP+_MSG_DIRECTORY$+LWD+SEP+_MSG_PREFIX$+PFX,MSG(ERR),"!"
0210 CMD_STR$="END"
0220 RETURN 
0300 ! 300 - Set up the message library
0310 SETUP_LIBRARY:
0320 _SV_MSGLIB$=MSG(*)
0330 _LANG$=LCS(%NOMAD_DEF_SFX$); IF _LANG$="" THEN _LANG$=LCS(ENV("PVXLANG")); IF _LANG$="" THEN _LANG$=LCS(ENV("LANG")); IF _LANG$="" THEN _LANG$="en"
0340 MESSAGE_LIB "*msglib."+_LANG$,ERR=*NEXT; GOTO 0360
0350 MESSAGE_LIB "*msglib.en"
0360 SET_MSG:GOSUB SETUP_MESSAGES
0370 RETURN 
0400 ! 400 - Set up key information
0410 SETUP_KEYS:
0420 _NUMKEYS=1
0430 DIM _KEYS$[1:1]; _KEYS$[1]="RPT_ID$"
0440 _KEY1=1
0490 RETURN 
0500 ! 500 - Main panel post_display logic
0510 MAIN_POST_DISPLAY:
0520 MESSAGE_LIB _SV_MSGLIB$
0530 GOSUB CLEAR_REC
0540 IF ARG_1$="" THEN _ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS; GOTO *RETURN
0550 _KEY$=ARG_1$; READ (_FIL_NO,KEY=_KEY$,ERR=NEXT_REC)
0560 _ENABLE_FLG=-1; GOSUB PROCESS_READ; GOSUB DISP_REC
0570 RETURN 
0900 ! 900 - Wrapup
0910 WRAPUP:
0920 ARG_1$=KEC(_FIL_NO,ERR=*NEXT)
0950 MESSAGE_LIB _SV_MSGLIB$
0960 SET_PARAM 'KR'=_SV_KR
0962 CALL "ZZFLES",X3$,Y1$,Y0$,"END",Z{ALL},0,0
0970 RETURN 
1000 ! 1000 - Start of maintenance only code - Find/Add/Delete/Clear record
1010 FIND_REC:
1020 CHANGE_FLG=0; IF POS(_EOM$=$000102090D$)=0 THEN RETURN ELSE GOSUB GET_CURKEY; IF _EOM$=$00$ THEN IF QRY_VAL$<>"" AND QRY_VAL$=EVS(_KEYS$[_CURKEY]) THEN QRY_VAL$="" ELSE RETURN 
1030 IF _ENABLE_FLG<0 THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1
1040 IF _ENABLE_FLG THEN IF _KCNT<_NUMKEYS THEN _KCNT=_CURKEY+1,_ENABLE_FLG=_KCNT; GOSUB ENABLE_GROUPS; RETURN ! If multiple key segments, enable the _KCNT segment
1050 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1060 IF NUL(STP(_KEY$,1,$00$)) THEN NEXT_ID=_FIRST_KEY; RETURN 
1070 READ (_FIL_NO,KEY=_KEY$,DOM=NEW_RECORD,ERR=CHK_ERR_NXT)
1080 GOSUB PROCESS_READ
1090 GOSUB NUM_TO_STR
1100 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1110 EXIT 
1200 ! 1200 - New RECORD check
1210 NEW_RECORD:
1260 IF _ENABLE_FLG THEN _KCNT=0,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
1270 CHANGE_FLG=0,REFRESH_FLG=1,NEXT_ID=_FIRST_FIELD
1290 RETURN 
1400 ! 1400 - Add RECORD
1410 WRITE_REC:
1420 GOSUB STR_TO_NUM
1430 GOSUB CHECK_REQD_FLDS; IF _W_FLG=0 THEN IGNORE_EXIT=1; EXIT 
1440 GOSUB REVIEW_WRITE; IF _ABORT_WRITE THEN _ABORT_WRITE=0; RETURN 
1460 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1470 CHANGE_FLG=0
1480 NEXT_ID=_FIRST_KEY
1490 EXIT 
1600 ! 1600 - Delete
1610 DELETE_REC:
1620 READ DATA FROM REC(IOL(_FIL_NO:KEY,ERR=*NEXT)) TO _KEY$
1630 _R_KEY$=_KEY$; TRANSLATE _R_KEY$," ",$00$
1640 MSGBOX _MSG_REC_VFYDEL1$+_R_KEY$+_MSG_REC_VFYDEL2$,_MSG_JUST_CHECK$,"?,YESNO",_X$
1650 IF _X$<>"YES" THEN RETURN 
1660 REMOVE (_FIL_NO,KEY=_KEY$,ERR=NO_SUCH)
1680 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1690 CHANGE_FLG=0
1700 NEXT_ID=_FIRST_KEY
1710 EXIT 
1720 NO_SUCH: MSGBOX _MSG_REC_NOTFND$,_FYI$,"!"; EXIT 
1800 ! 1800 - Clear record
1810 CLEAR_REC:
1820 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
1830 _CLR_FLG$="R"; GOSUB CLEAR_FIELDS
1835 GRID LOAD PARAM_LIST.CTL,0,0,""; PARAM_CNT=0
1840 IF _ENABLE_FLG THEN _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
1850 CHANGE_FLG=0
1860 RETURN 
2000 ! 2000 - Browsing mode
2010 ! - Next
2020 NEXT_REC:
2030 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2040 _KEY$=KEY(_FIL_NO,END=END_OF_FILE)
2060 READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2070 CHK_ERR_NXT:IF ERR<>0 THEN EXIT ERR
2080 _D$=_MSG_NEXT$; GOSUB BUSY_CHK
2090 _KEY$=KEN(_FIL_NO,KEY=_KEY$,END=END_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2100 END_OF_FILE: MSGBOX _MSG_END_OF_FIL$,_FYI$,"!"; EXIT 
2200 ! 2200 - Prior record
2210 PRIOR_REC:
2220 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2230 _KEY$=KEP(_FIL_NO,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=*NEXT); GOSUB PROCESS_READ; GOTO DISP_REC
2240 CHK_ERR_PRE:IF ERR<>0 THEN EXIT ERR
2250 _D$=_MSG_PRECEDING$; GOSUB BUSY_CHK
2260 _KEY$=KEP(_FIL_NO,KEY=_KEY$,END=START_OF_FILE); READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2270 START_OF_FILE: MSGBOX _MSG_START_FILE$,_FYI$,"!"; EXIT 
2400 ! 2400 - First record
2410 FIRST_REC:
2420 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2430 _KEY$=KEF(_FIL_NO,ERR=NO_FIRST)
2450 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_NXT); GOSUB PROCESS_READ; GOTO DISP_REC
2460 NO_FIRST: MSGBOX _MSG_REC_NO_1ST$,_FYI$,"!"; EXIT 
2600 ! 2600 - Last record
2610 LAST_REC:
2620 IF CHANGE_FLG<>0 THEN GOSUB CHECK_CHANGES
2630 _KEY$=KEL(_FIL_NO,ERR=NO_LAST)
2650 READ (_FIL_NO,KEY=_KEY$,ERR=CHK_ERR_PRE); GOSUB PROCESS_READ; GOTO DISP_REC
2660 NO_LAST: MSGBOX _MSG_REC_NO_LST$,_FYI$,"!"; EXIT 
3000 ! 3000 - Subroutines
3010 ! Processing required by READ
3020 PROCESS_READ:
3030 READ DATA FROM _KEY$ TO IOL=IOL(_FIL_NO:KEY,ERR=*NEXT) ! load fields from external key
3040 IF _ENABLE_FLG THEN _KCNT=_KEY1-1,_ENABLE_FLG=-1; GOSUB ENABLE_GROUPS
3050 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3055 GOSUB LOAD_PARAM_LIST
3060 CHANGE_FLG=0
3070 RETURN 
3200 ! 3200 - Review record for changes before WRITE
3210 REVIEW_WRITE:
3220 _CHG1$="",_CHG2$="",_ABORT_WRITE=0
3230 EXTRACT (_FIL_NO,KEY=KEC(_FIL_NO),REC=_CUR$,DOM=WRT,ERR=REC_BUSY)
3240 GOSUB DETERMINE_CHGS
3250 IF _CHG1$="" AND _CHG2$="" THEN GOTO WRT
3260 IF _CHG1$="" THEN GOTO CHK2
3270 MSGBOX _MSG_UPD_SAME$+SEP+_CHG1$+SEP+SEP+_MSG_OVRWRT_CHG$,_MSG_WARNING$,"Yesno,1,!",_YESNO$
3280 IF _YESNO$="NO" THEN GOTO *RETURN
3290 IF _CHG2$="" THEN GOTO WRT
3300 CHK2:IF _CHG2$<>"" THEN MSGBOX _MSG_UPD_OTHER1$+SEP+_CHG2$+SEP+SEP+_MSG_UPD_OTHER2$,_FYI$,"!"
3310 GOSUB INCORPORATE_CHGS
3320 WRT:WRITE (_FIL_NO,KEY=_KEY$,ERR=WRITE_ERROR)
3340 READ DATA FROM REC(IOL(_FIL_NO,ERR=*NEXT)),REC=_ORIG$ TO IOL=IOL(_FIL_NO) ! Save record for review
3350 GOSUB NUM_TO_STR
3360 REFRESH_FLG=1
3370 RETURN 
3380 WRITE_ERROR:
3390 IF ERR=11 THEN MSGBOX _MSG_DUP_UNIQUE$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG(ERR),_MSG_CANNOT_WRITE$
3400 RETURN 
3410 REC_BUSY:
3420 IF ERR=0 THEN MSGBOX _MSG_REC_LOCKED$,_MSG_CANNOT_WRITE$ ELSE MSGBOX MSG_CANNOT_WRITE$+SEP+MSG(ERR),_ERROR$
3430 _ABORT_WRITE=1
3440 RETURN 
3500 ! 3500 - Display a record
3510 DISP_REC:
3520 GOSUB NUM_TO_STR
3530 REFRESH_FLG=1
3540 RETURN 
3600 ! 3600 - Busy Record display
3610 BUSY_CHK:
3620 MSGBOX _MSG_REC_LOCKED$+SEP+SEP+_MSG_REC_VIEW1$+_D$+_MSG_REC_VIEW2$,_MSG_REC_ACCESS$,"YESNO,!",_D$
3630 IF _D$="NO" THEN EXIT 
3640 RETURN 
3790 ! 3790 - See if changes are to be written
3800 CHECK_CHANGES:
3810 IF _FIRST_KEY=0 THEN _FIRST_KEY=RPT_ID.CTL,_FIRST_FIELD=RPT_NAME.CTL
3820 IF CHANGE_FLG=0 THEN IF _ENABLE_FLG THEN GOTO CC ELSE GOTO *RETURN
3830 MSGBOX _MSG_REC_ALTERD$,_MSG_UPDATE$,"?,Yesno",_YESNO$
3840 IF _YESNO$="YES" THEN GOTO WRITE_REC
3850 CHANGE_FLG=0
3860 CC: _KCNT=_KEY1,_ENABLE_FLG=_KEY1; GOSUB ENABLE_GROUPS
3870 RETURN 
4000 ! 4000 - Get the current key segment number
4010 GET_CURKEY:
4020 FOR _CURKEY=1 TO _NUMKEYS
4030 IF UCS(_KEYS$[_CURKEY])=UCS(ID$)+"$" OR UCS(_KEYS$[_CURKEY])=UCS(ID$) THEN EXITTO *RETURN
4040 NEXT _CURKEY
4050 RETURN 
9000 ! 9000 - Retrieve messages from the *msglib.xxx library
9010 SETUP_MESSAGES:
9020 _FYI$=MSG("FYI"),_ERROR$=MSG("ERROR")
9030 _MSG_DIRECTORY$=MSG("DIRECTORY")
9040 _MSG_END_OF_FIL$=MSG("END_OF_FIL")
9050 _MSG_FILOPNERR1$=MSG("FILOPNERR1")
9060 _MSG_JUST_CHECK$=MSG("JUST_CHECK")
9070 _MSG_MANDATORY$=MSG("MANDATORY")
9080 _MSG_NEXT$=MSG("NEXT")
9090 _MSG_NON_NUMER$=MSG("NON_NUMER")
9100 _MSG_NOT_FOUND$=MSG("NOT_FOUND")
9110 _MSG_OVRWRT_CHG$=MSG("OVRWRT_CHG")
9120 _MSG_PRECEDING$=MSG("PRECEDING")
9130 _MSG_PREFIX$=MSG("PREFIX")
9140 _MSG_REC_ACCESS$=MSG("REC_ACCESS")
9150 _MSG_REC_ALTERD$=MSG("REC_ALTERD")
9160 _MSG_REC_CR_NEW$=MSG("REC_CR_NEW")
9170 _MSG_REC_LOCKED$=MSG("REC_LOCKED")
9180 _MSG_X$=MSG("REC_MISS","^"),P=POS("^"=_MSG_X$),_MSG_REC_MISS1$=_MSG_X$(1,P-1),_MSG_REC_MISS2$=_MSG_X$(P+1)
9190 _MSG_REC_NOTFND$=MSG("REC_NOTFND")
9200 _MSG_REC_NO_1ST$=MSG("REC_NO_1ST")
9210 _MSG_REC_NO_LST$=MSG("REC_NO_LST")
9220 _MSG_REC_REMOVE$=MSG("REC_REMOVE")
9230 _MSG_REC_UPDADD$=MSG("REC_UPDADD")
9240 _MSG_X$=MSG("REC_VFYDEL","^"),P=POS("^"=_MSG_X$),_MSG_REC_VFYDEL1$=_MSG_X$(1,P-1),_MSG_REC_VFYDEL2$=_MSG_X$(P+1)
9250 _MSG_X$=MSG("REC_VIEW","^"),P=POS("^"=_MSG_X$),_MSG_REC_VIEW1$=_MSG_X$(1,P-1),_MSG_REC_VIEW2$=_MSG_X$(P+1)
9260 _MSG_REQ_FIELDS$=MSG("REQ_FIELDS")
9270 _MSG_START_FILE$=MSG("START_FILE")
9280 _MSG_UPDATE$=MSG("UPDATE")
9290 _MSG_UPD_OTHER1$=MSG("UPD_OTHER1")
9300 _MSG_UPD_OTHER2$=MSG("UPD_OTHER2")
9310 _MSG_UPD_SAME$=MSG("UPD_SAME")
9320 _MSG_WARNING$=MSG("WARNING")
9330 _MSG_CANNOT_WRITE$=MSG("CANT_WRITE")
9340 _MSG_DUP_UNIQUE$=MSG("DUP_UNIQUE")
9350 RETURN 
9999 END 
10000 ! 10000 - Convert numeric values to string
10010 NUM_TO_STR:
10999 RETURN 
11000 ! 11000 - Convert numeric strings to number
11010 STR_TO_NUM:
11970 RETURN 
11980 NON_NUMERIC: MSGBOX _MSG_NON_NUMER$+_X$,_ERROR$,"!"
11990 NEXT_ID=_X
11999 EXIT 
12000 ! 12000 - Check if the required fields have data
12010 CHECK_REQD_FLDS:
12020 _W_FLG=1
12999 RETURN 
13000 ! 13000 - Clear the record fields
13010 CLEAR_FIELDS:
13020 IF _CLR_FLG$="R" THEN RPT_ID$=""
13030 RPT_NAME$=""
13040 RPT_DESC$=""
13050 FILE_NAME$=""
13060 ACCESS_LEVEL$=""
13070 RPA_UNUSED$=""
13080 RPT_TYPE$="R"
13980 GOSUB NUM_TO_STR
13990 REFRESH_FLG=1
13999 RETURN 
14000 ! 14000 - Enable/Disable groups - _ENABLE_FLG: 0=don't!, >1=corresponding key segment on, others off, -1=buttons and non-key fields on
14010 ENABLE_GROUPS:
14020 IF _ENABLE_FLG=0 THEN GOTO *RETURN
14970 IF _ENABLE_FLG>0 THEN CALL "*wingrp;Disable",FIELDS.GRP$; CALL "*wingrp;Disable",BUTTONS.GRP$
14980 IF _ENABLE_FLG<0 THEN CALL "*wingrp;Enable",FIELDS.GRP$; CALL "*wingrp;Enable",BUTTONS.GRP$
14990 RETURN 
15000 ! 15000 - Determine the changes that have been made before writing
15010 DETERMINE_CHGS:
15020 DIM _CHG_VAR$(6,"N")
15030 IF _ORIG.RPT_ID$=_CUR.RPT_ID$ OR RPT_ID$=_CUR.RPT_ID$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_ID$=RPT_ID$ THEN _CHG2$=_CHG2$+SEP+MSG("RPT_ID")+" = "+_CUR.RPT_ID$,_CHG_VAR$(1,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RPT_ID")+" = "+_CUR.RPT_ID$
15040 IF _ORIG.RPT_NAME$=_CUR.RPT_NAME$ OR RPT_NAME$=_CUR.RPT_NAME$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_NAME$=RPT_NAME$ THEN _CHG2$=_CHG2$+SEP+MSG("RPT_NAME")+" = "+_CUR.RPT_NAME$,_CHG_VAR$(2,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("RPT_NAME")+" = "+_CUR.RPT_NAME$
15050 IF _ORIG.RPT_DESC$=_CUR.RPT_DESC$ OR RPT_DESC$=_CUR.RPT_DESC$ THEN GOTO *NEXT ELSE IF _ORIG.RPT_DESC$=RPT_DESC$ THEN _CHG2$=_CHG2$+SEP+MSG("DESC")+" = "+_CUR.RPT_DESC$,_CHG_VAR$(3,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("DESC")+" = "+_CUR.RPT_DESC$
15060 IF _ORIG.FILE_NAME$=_CUR.FILE_NAME$ OR FILE_NAME$=_CUR.FILE_NAME$ THEN GOTO *NEXT ELSE IF _ORIG.FILE_NAME$=FILE_NAME$ THEN _CHG2$=_CHG2$+SEP+MSG("FILE_NAME")+" = "+_CUR.FILE_NAME$,_CHG_VAR$(4,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("FILE_NAME")+" = "+_CUR.FILE_NAME$
15070 IF _ORIG.ACCESS_LEVEL$=_CUR.ACCESS_LEVEL$ OR ACCESS_LEVEL$=_CUR.ACCESS_LEVEL$ THEN GOTO *NEXT ELSE IF _ORIG.ACCESS_LEVEL$=ACCESS_LEVEL$ THEN _CHG2$=_CHG2$+SEP+MSG("ACCE_L")+" = "+_CUR.ACCESS_LEVEL$,_CHG_VAR$(5,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("ACCE_L")+" = "+_CUR.ACCESS_LEVEL$
15080 IF _ORIG.RPA_UNUSED$=_CUR.RPA_UNUSED$ OR RPA_UNUSED$=_CUR.RPA_UNUSED$ THEN GOTO *NEXT ELSE IF _ORIG.RPA_UNUSED$=RPA_UNUSED$ THEN _CHG2$=_CHG2$+SEP+MSG("UNUSED")+" = "+_CUR.RPA_UNUSED$,_CHG_VAR$(6,1)="Y" ELSE _CHG1$=_CHG1$+SEP+MSG("UNUSED")+" = "+_CUR.RPA_UNUSED$
15990 RETURN 
16000 ! 16000 - Incorporate changes made by another user into the record
16010 INCORPORATE_CHGS:
16020 IF _CHG_VAR$(1,1)="Y" THEN RPT_ID$=_CUR.RPT_ID$
16030 IF _CHG_VAR$(2,1)="Y" THEN RPT_NAME$=_CUR.RPT_NAME$
16040 IF _CHG_VAR$(3,1)="Y" THEN RPT_DESC$=_CUR.RPT_DESC$
16050 IF _CHG_VAR$(4,1)="Y" THEN FILE_NAME$=_CUR.FILE_NAME$
16060 IF _CHG_VAR$(5,1)="Y" THEN ACCESS_LEVEL$=_CUR.ACCESS_LEVEL$
16070 IF _CHG_VAR$(6,1)="Y" THEN RPA_UNUSED$=_CUR.RPA_UNUSED$
16990 RETURN 
16999 ! 
17000 LOAD_PARAM_LIST:
17025 GRID LOAD PARAM_LIST.CTL,0,0,""; PARAM_CNT=0
17030 DIM RPP$[999]; CALL "RPGRPP;GET_PARAM_LIST",Z[2],1,(RPT_ID$),RPP${ALL},PARAM_CNT
17035 IF PARAM_CNT<=0 THEN GOTO 17090 ELSE IF PARAM_CNT>999 THEN PARAM_CNT=999
17040 FOR P=1 TO PARAM_CNT
17050 RPP$=RPP$[P]; IF NUL(RPP$) THEN CONTINUE
17060 GRID LOAD PARAM_LIST.CTL,1,0,SEP+STP(RPP$(11,40),2)+SEP+STP(RPP$(51,60),2)+SEP+TBL(POS(RPP$(211,1)="SND"),"-","String","Number",TBL(POS(RPP$(212,1)="246"),"Date","Month","Year","Date"))+SEP+STP(RPP$(213,3),2)+SEP+TBL(RPP$(216,1)="Y","0","1")+SEP+TBL(RPP$(217,1)="Y","0","1")+SEP+STP(RPP$(218,100),2)+SEP
17065 PARAM_LIST.CTL'COLUMN=1,PARAM_LIST.CTL'ROW=P,PARAM_LIST.CTL'BITMAP$="!Write,t",PARAM_LIST.CTL'ALIGN=5
17080 NEXT P
17090 REFRESH_FLG=1
17095 RETURN 
17099 ! 
17100 POST_RPT_ID:! Processing after report key
17110 IF NOT(NUL(RPT_ID$)) THEN {
17120 IF UCS(STP(RPT_ID$,2))="A" THEN {! Auto number
17130 RPT_ID$=DIM(10,$00$); RPT_ID$=KEL(Z[1],END=*NEXT)
17140 IF NUL(RPT_ID$) THEN RPT_ID$=DIM(10,$00$) ELSE IF RPT_ID$=DIM(10,"Z") THEN MSGBOX "Error: Last possible key - No more entries allowed"; CMD_STR$="END"; RETURN 
17150 RPT_ID$=FN%NEXT_SEQ$(RPT_ID$,6)
17160  } ELSE {! not auto number
17170 RPT_ID$=PAD(RPT_ID$,10)
17180 RPT_ID$=STR(RPT_ID$:DIM(10,"0"),ERR=*NEXT)
17190 REFRESH_FLG=1
17200  }
17210  }
17220 GOTO FIND_REC
17230 ! 
17240 AUTO_NUMBER:! Auto number button pressed, act like put in an A
17250 RPT_ID$="A"; _EOM$=$0D$
17260 GOTO POST_RPT_ID
17299 ! 
17350 REM "Edit parameters
17355 EDIT_PARAM:
17360 IF PARAM_LIST.CTL'CURRENTCOLUMN<>1 THEN RETURN ; END_IF ; PARAM_LIST.CTL'ROW=PARAM_LIST.CTL'CURRENTROW
17375 READ DATA FROM PARAM_LIST.CTL'ROWDATA$ TO IOL=PARAM_LIST.CTL'LOADIOLIST$
17377 PRINT 'CI'
17380 PROCESS "RPGRPP","",RPT_ID$+C_RPT_PARAM_VAR$
17390 GOSUB LOAD_PARAM_LIST; CHANGE_FLG=0
17395 RETURN 
17399 ! 
17400 REM "Select report file from disk
17410 SELECT_REPORT_FILE:
17415 IF NUL(RPT_XML_DIR$) THEN RPT_XML_DIR$=HWD
17420 GET_FILE_BOX RPT_XML_PATH$,RPT_XML_DIR$,"Select Report File","Report Files|*.rptdesign,All Files|*.*,",".rptdesign",ERR=*RETURN
17430 REFRESH_FLG=1
17440 DONE_SEL_FILE:
17445 IF NOT(NUL(RPT_XML_PATH$)) THEN FILE_NAME$=FN%GET_BASENAME$(RPT_XML_PATH$); RPT_XML_DIR$=FN%GET_DIRNAME$(RPT_XML_PATH$) ELSE RETURN 
17450 ANS$="YES"; MSGBOX MSG("RPGRPA_05"),MSG("RPGRPA_06"),"YESNO,!",ANS$
17460 IF ANS$<>"YES" THEN RETURN 
17465 GOSUB IMPORT_PARAMS; GOSUB LOAD_PARAM_LIST
17495 RETURN 
17499 ! 
17500 REM "Attempt to import BIRT report parameters from specified file
17510 IMPORT_PARAMS:
17515 OPEN (HFN,OPT="TEXT",ERR=ERR_FILEOPEN)RPT_XML_PATH$; XMLCHAN=LFO
17520 READ (XMLCHAN,END=*NEXT)XML_LINE$; XML$+=STP(XML_LINE$,2); GOTO *SAME
17525 DEF OBJECT XML,"[WDX][Running or New]MSXML2.DOMDocument",ERR=ERR_PARSER
17530 IP_CNT=0
17540 EXISTS_PARAM=0; GOSUB GET_NEXT_PARAM_XML; IF EXISTS_PARAM THEN GOSUB ITERATE_XML; GOTO *SAME
17580 DONE_IMPORT_PARAMS:
17590 CLOSE (XMLCHAN,ERR=*PROCEED); DROP OBJECT XML
17595 RETURN 
17596 ! 
17597 ERR_FILEOPEN: MSGBOX "Error opening report file: "+MSG(ERR); GOTO DONE_IMPORT_PARAMS
17598 ERR_PARSER: MSGBOX "Error parsing report file: "+MSG(ERR); GOTO DONE_IMPORT_PARAMS
17599 ! 
17600 GET_NEXT_PARAM_XML:
17610 PARAMXML$=""
17620 SPOS=POS("<scalar-parameter "=XML$); EPOS=POS("</scalar-parameter>"=XML$); IF SPOS AND EPOS AND EPOS>SPOS THEN PARAMXML$=MID(XML$,SPOS,EPOS-SPOS+19); XML$=MID(XML$,EPOS+19); EXISTS_PARAM=1
17630 ! PREVLEN=LEN(PARAMXML$); PARAMXML$=SUB(PARAMXML$,"  "," "); CURRLEN=LEN(PARAMXML$); IF CURRLEN<PREVLEN THEN GOTO *SAME
17645 RETURN 
17649 ! 
17700 ITERATE_XML:
17705 DIM RPP$:IOL(Z[2]); READ DATA FROM DIM(LEN(RPP$)),REC=RPP$ TO IOL=IOL(RPP$)
17710 RPP.RPT_ID$=RPT_ID$,RPP.DATATYPE$="S ",RPP.IS_REQUIRED$="N",RPP.ISLOCKED$="N",SKIP_PARAM=0
17715 XML'LOADXML(PARAMXML$,ERR=*RETURN)
17716 PARSEERR=XML'PARSEERROR; IF PARSEERR'ERRORCODE<>0 THEN MSGBOX (MSG("RPGRPA_ER","Line "+XML'PARSEERROR'LINE$+", Pos "+XML'PARSEERROR'LINEPOS$+SEP+XML'PARSEERROR'SRCTEXT$)),MSG("RPGRPA_ER",""),"OK,STOP"; RETURN 
17717 IF XML'CHILDNODES()'LENGTH<=0 THEN GOTO *RETURN
17720 RPP.PARAM_NAME$=XML'DOCUMENTELEMENT()'GETATTRIBUTE$("name")
17725 NUMNODES=XML'DOCUMENTELEMENT()'CHILDNODES()'LENGTH
17730 IF NOT(NUL(RPP.PARAM_NAME$)) AND NUMNODES>0 THEN {
17735 NODENAME$=XML'DOCUMENTELEMENT()'CHILDNODES(I)'GETATTRIBUTE$("name")
17740 SWITCH NODENAME$
17741 CASE "promptText"; RPP.PARAM_PROMPT$=XML'DOCUMENTELEMENT()'CHILDNODES(I)'TEXT$; BREAK
17742 CASE "isRequired"; IF LCS(XML'DOCUMENTELEMENT()'CHILDNODES(I)'TEXT$)="true" THEN RPP.IS_REQUIRED$="Y" END_IF ; BREAK
17743 CASE "hidden"; IF LCS(XML'DOCUMENTELEMENT()'CHILDNODES(I)'TEXT$)="true" THEN SKIP_PARAM=1 END_IF ; BREAK
17765 DEFAULT ; BREAK
17770 END SWITCH 
17775  }
17780 IF SKIP_PARAM THEN RETURN ! Hidden parameter, skip it
17785 IP_CNT++; RPP.SEQ_NUM$=STR(IP_CNT:"000")
17790 WRITE (Z[2],KEY=RPP.RPT_ID$+PAD(RPP.PARAM_NAME$,40))REC(IOL(Z[2]),REC=RPP$)
17795 RETURN 
17799 ! 
20110 IOL_RPK_S:IOLIST RPK_KEY_S$,RPT_DESC$,RPT_IS_STALE$,SCHD_EXP1$,SCHD_EXP2$,SCHD_EXP3$,SCHD_EXP4$,SCHD_EXP5$ ! Scheduling Options
20120 IOL_RPK_P:IOLIST RPK_KEY_P$,RPT_PARAM_VAR$,RPT_PARAM_DESC$,RPT_PARAM_TYPE$,RPT_PARAM_VAL$,RPT_PARAM_DEFVAL$,RPT_PARAM_ACCTMASK$,RPT_PARAM_IS_LOCKED$,RPT_PARAM_IS_REQD$,RPT_PARAM_STEP$,RPT_PARAM_INCR$ ! Parameters data
20200 SCHEDULE_REPORT:
20210 LOCAL RPK_KEY$
20220 RPK_KEY_LEN=25; RPK_KEY$=DAY; RPK_KEY$=RPK_KEY$(7,2)+RPK_KEY$(1,2)+RPK_KEY$(4,2); RPK_KEY$=X3$(40,3)+RPK_KEY$+STR(TIM*10000:"000000")
20225 RPK_KEY$=RPT_ID$+RPK_KEY$
20228 RPK_KEY$=PAD(RPK_KEY$,RPK_KEY_LEN)
20230 GOSUB WRITE_RPK
20245 TF_TYPE$="SCHEDULED_DBRS_RPT"; PERFORM "DTGOMA;select_type"
20250 %FROM_DTGOMA=0; REPLACEMENT_SCRN$=""; SCH_OK$=""; PROCESS "DTGOMA.BV7","../DTG/DT.EN",RPK_KEY$,SCH_OK$
20275 IF SCH_OK$<>"Y" THEN GOSUB DELETE_RPK; MSGBOX MSG("ZGXOPO_S_N"),MSG("FYI"),"OK,TIM=2" ELSE MSGBOX MSG("ZGXOPO_S"),MSG("FYI"),"OK,TIM=2"
20295 RETURN 
20299 ! 
20300 WRITE_RPK:
20317 SCHD_EXP1$="1",SCHD_EXP2$="1" ! Default minutes and hours fields to 1
20320 RPK_KEY_S$=RPK_KEY$+"S  "; WRITE (Z[3],KEY=RPK_KEY_S$,DOM=*NEXT)IOL=IOL_RPK_S
20335 PARAM_CNT=0; READ (Z[2],KEY=RPT_ID$,KNO=0,DOM=*NEXT)
20340 NPKEY$=KEY(Z[2],END=20385); READ (Z[2],KEY=NPKEY$)RPP$
20350 IF MID(RPP$,1,LEN(RPT_ID$))<>RPT_ID$ THEN GOTO 20385
20355 ! Set the default value as the parameter value initially - allow user to update it later
20360 PARAM_CNT++; WRITE (Z[3],KEY=RPK_KEY$+STR(PARAM_CNT:"000"))RPK_KEY$+STR(PARAM_CNT:"000"),STP(RPP$(11,40),2),STP(RPP$(51,60),2),RPP$(211,2),STP(RPP$(218,100),2),STP(RPP$(218,100),2),RPP$(213,3),RPP$(217,1),RPP$(216,1)
20380 GOTO 20340
20395 RETURN 
20399 ! 
20400 DELETE_RPK:
20420 RPK_KEY_S$=RPK_KEY$+"S  "; REMOVE (Z[3],KEY=RPK_KEY_S$,DOM=*NEXT)
20430 READ (Z[3],KEY=RPK_KEY$,DOM=*NEXT) ! SSP#286942
20440 NPKEY$=KEY(Z[3],END=20485); IF MID(NPKEY$,1,LEN(RPK_KEY$))<>RPK_KEY$ THEN GOTO 20485 ! SSP#286942
20450 REMOVE (Z[3],KEY=NPKEY$)
20480 GOTO 20440
20495 RETURN 
20499 ! 
56002 REM "261434-DBRS Development - Next Phase - Ability to schedule BIRT rpt
56003 REM "286942-Trying to setup the Report Scheduler for the Reports Suite  
